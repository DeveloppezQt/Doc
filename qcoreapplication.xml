<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QCoreApplication Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> class provides an event loop for console Qt applications.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCoreApplication</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class is used by non-GUI applications to provide their event loop. For non-GUI application that uses Qt, there should be exactly one <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object. For GUI applications, see QApplication.</db:para>
<db:para><db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> contains the main event loop, where all events from the operating system (e.g., timer and network events) and other sources are processed and dispatched. It also handles the application's initialization and finalization, as well as system-wide and application-wide settings.</db:para>
<db:section xml:id="the-event-loop-and-event-handling">
<db:title>The Event Loop and Event Handling</db:title>
<db:para>The event loop is started with a call to <db:link xlink:href="qcoreapplication.xml#exec">exec</db:link>(). Long running operations can call processEvents() to keep the application responsive.</db:para>
<db:para>In general, we recommend that you create a <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> or a QApplication object in your main() function as early as possible. <db:link xlink:href="qcoreapplication.xml#exec">exec</db:link>() will not return until the event loop exits; e.g., when quit() is called.</db:para>
<db:para>Several static convenience functions are also provided. The <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object is available from <db:link xlink:href="qcoreapplication.xml#instance">instance</db:link>(). Events can be sent or posted using sendEvent(), postEvent(), and <db:link xlink:href="qcoreapplication.xml#sendPostedEvents">sendPostedEvents</db:link>(). Pending events can be removed with <db:link xlink:href="qcoreapplication.xml#removePostedEvents">removePostedEvents</db:link>() or flushed with <db:link xlink:href="qcoreapplication.xml#flush">flush</db:link>().</db:para>
<db:para>The class provides a quit() slot and an aboutToQuit() signal.</db:para>
</db:section>
<db:section xml:id="application-and-library-paths">
<db:title>Application and Library Paths</db:title>
<db:para>An application has an <db:link xlink:href="qcoreapplication.xml#applicationDirPath">applicationDirPath</db:link>() and an <db:link xlink:href="qcoreapplication.xml#applicationFilePath">applicationFilePath</db:link>(). Library paths (see QLibrary) can be retrieved with libraryPaths() and manipulated by setLibraryPaths(), addLibraryPath(), and removeLibraryPath().</db:para>
</db:section>
<db:section xml:id="internationalization-and-translations">
<db:title>Internationalization and Translations</db:title>
<db:para>Translation files can be added or removed using installTranslator() and removeTranslator(). Application strings can be translated using translate(). The <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>() and QObject::trUtf8() functions are implemented in terms of translate().</db:para>
</db:section>
<db:section xml:id="accessing-command-line-arguments">
<db:title>Accessing Command Line Arguments</db:title>
<db:para>The command line arguments which are passed to <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>'s constructor should be accessed using the <db:link xlink:href="qcoreapplication.xml#arguments">arguments</db:link>() function. Note that some arguments supplied by the user may have been processed and removed by <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>.</db:para>
<db:para>For more advanced command line option handling, create a <db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link>.</db:para>
</db:section>
<db:section xml:id="locale-settings">
<db:title>Locale Settings</db:title>
<db:para>On Unix/Linux Qt is configured to use the system locale settings by default. This can cause a conflict when using POSIX functions, for instance, when converting between data types such as floats and strings, since the notation may differ between locales. To get around this problem, call the POSIX function setlocale(LC_NUMERIC,&quot;C&quot;) right after initializing QApplication or <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> to reset the locale that is used for number formatting to &quot;C&quot;-locale.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QGuiApplication</db:member>
<db:member><db:link xlink:href="qabstracteventdispatcher.xml">QAbstractEventDispatcher</db:link></db:member>
<db:member><db:link xlink:href="qeventloop.xml">QEventLoop</db:link></db:member>
<db:member><db:link xlink:href="qtcore-semaphores-example.xml">Semaphores Example</db:link></db:member>
<db:member><db:link xlink:href="qtcore-waitconditions-example.xml">Wait Conditions Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCoreApplication">
<db:title>QCoreApplication::QCoreApplication(int &amp;<db:emphasis>argc</db:emphasis>, char **<db:emphasis>argv</db:emphasis>)</db:title>
<db:para>Constructs a Qt kernel application. Kernel applications are applications without a graphical user interface. These type of applications are used at the console or as server processes.</db:para>
<db:para>The <db:code role="parameter">argc</db:code> and <db:code role="parameter">argv</db:code> arguments are processed by the application, and made available in a more convenient form by the <db:link xlink:href="qcoreapplication.xml#arguments">arguments</db:link>() function.</db:para>
<db:warning>
<db:para>The data referred to by <db:code role="parameter">argc</db:code> and <db:code role="parameter">argv</db:code> must stay valid for the entire lifetime of the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object. In addition, <db:code role="parameter">argc</db:code> must be greater than zero and <db:code role="parameter">argv</db:code> must contain at least one valid character string.</db:para>
</db:warning>
</db:section>
<db:section xml:id="dtor.QCoreApplication">
<db:title>[noexcept] QCoreApplication::~QCoreApplication()</db:title>
<db:para>Destroys the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object.</db:para>
</db:section>
<db:section xml:id="applicationDirPath">
<db:title>[static] QString QCoreApplication::applicationDirPath()</db:title>
<db:para>Returns the directory that contains the application executable.</db:para>
<db:para>For example, if you have installed Qt in the C:\Qt directory, and you run the regexp example, this function will return &quot;C:/Qt/examples/tools/regexp&quot;.</db:para>
<db:para>On Mac OS X this will point to the directory actually containing the executable, which may be inside of an application bundle (if the application is bundled).</db:para>
<db:warning>
<db:para>On Linux, this function will try to get the path from the /proc file system. If that fails, it assumes that argv[0] contains the absolute file name of the executable. The function also assumes that the current directory has not been changed by the application.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#applicationFilePath">applicationFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="applicationFilePath">
<db:title>[static] QString QCoreApplication::applicationFilePath()</db:title>
<db:para>Returns the file path of the application executable.</db:para>
<db:para>For example, if you have installed Qt in the /usr/local/qt directory, and you run the regexp example, this function will return &quot;/usr/local/qt/examples/tools/regexp/regexp&quot;.</db:para>
<db:warning>
<db:para>On Linux, this function will try to get the path from the /proc file system. If that fails, it assumes that argv[0] contains the absolute file name of the executable. The function also assumes that the current directory has not been changed by the application.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#applicationDirPath">applicationDirPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="applicationPid">
<db:title>[static, since 4.4] qint64 QCoreApplication::applicationPid()</db:title>
<db:para>Returns the current process ID for the application.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="arguments">
<db:title>[static, since 4.1] QStringList QCoreApplication::arguments()</db:title>
<db:para>Returns the list of command-line arguments.</db:para>
<db:para>Usually arguments().at(0) is the program name, arguments().at(1) is the first argument, and arguments().last() is the last argument. See the note below about Windows.</db:para>
<db:para>Calling this function is slow - you should store the result in a variable when parsing the command line.</db:para>
<db:warning>
<db:para>On Unix, this list is built from the argc and argv parameters passed to the constructor in the main() function. The string-data in argv is interpreted using QString::fromLocal8Bit(); hence it is not possible to pass, for example, Japanese command line arguments on a system that runs in a Latin1 locale. Most modern Unix systems do not have this limitation, as they are Unicode-based.</db:para>
</db:warning>
<db:para>On NT-based Windows, this limitation does not apply either. On Windows, the arguments() are not built from the contents of argv/argc, as the content does not support Unicode. Instead, the arguments() are constructed from the return value of <db:link xlink:href="http://msdn2.microsoft.com/en-us/library/ms683156(VS.85).aspx">GetCommandLine()</db:link>. As a result of this, the string given by arguments().at(0) might not be the program name on Windows, depending on how the application was started.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#applicationFilePath">applicationFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closingDown">
<db:title>[static] bool QCoreApplication::closingDown()</db:title>
<db:para>Returns true if the application objects are being destroyed; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#startingUp">startingUp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="eventDispatcher">
<db:title>[static] QAbstractEventDispatcher *QCoreApplication::eventDispatcher()</db:title>
<db:para>Returns a pointer to the event dispatcher object for the main thread. If no event dispatcher exists for the thread, this function returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#setEventDispatcher">setEventDispatcher</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exec">
<db:title>[static] int QCoreApplication::exec()</db:title>
<db:para>Enters the main event loop and waits until <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>() is called. Returns the value that was set to <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>() (which is 0 if <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>() is called via quit()).</db:para>
<db:para>It is necessary to call this function to start event handling. The main event loop receives events from the window system and dispatches these to the application widgets.</db:para>
<db:para>To make your application perform idle processing (i.e. executing a special function whenever there are no pending events), use a <db:link xlink:href="qtimer.xml">QTimer</db:link> with 0 timeout. More advanced idle processing schemes can be achieved using processEvents().</db:para>
<db:para>We recommend that you connect clean-up code to the <db:link xlink:href="">aboutToQuit()</db:link> signal, instead of putting it in your application's main() function because on some platforms the QCoreApplication::exec() call may not return. For example, on Windows when the user logs off, the system terminates the process after Qt closes all top-level windows. Hence, there is no guarantee that the application will have time to exit its event loop and execute code at the end of the main() function after the QCoreApplication::exec() call.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">quit()</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>()</db:member>
<db:member><db:link xlink:href="">processEvents()</db:link></db:member>
<db:member><db:link xlink:href="">QApplication::exec()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exit">
<db:title>[static] void QCoreApplication::exit(int <db:emphasis>returnCode</db:emphasis> = 0)</db:title>
<db:para>Tells the application to exit with a return code.</db:para>
<db:para>After this function has been called, the application leaves the main event loop and returns from the call to <db:link xlink:href="qcoreapplication.xml#exec">exec</db:link>(). The <db:link xlink:href="qcoreapplication.xml#exec">exec</db:link>() function returns <db:code role="parameter">returnCode</db:code>. If the event loop is not running, this function does nothing.</db:para>
<db:para>By convention, a <db:code role="parameter">returnCode</db:code> of 0 means success, and any non-zero value indicates an error.</db:para>
<db:para>Note that unlike the C library function of the same name, this function <db:emphasis>does</db:emphasis> return to the caller – it is event processing that stops.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">quit()</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#exec">exec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flush">
<db:title>[static] void QCoreApplication::flush()</db:title>
<db:para>Flushes the platform specific event queues.</db:para>
<db:para>If you are doing graphical changes inside a loop that does not return to the event loop on asynchronous window systems like X11 or double buffered window systems like Mac OS X, and you want to visualize these changes immediately (e.g. Splash Screens), call this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#sendPostedEvents">sendPostedEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasPendingEvents">
<db:title>[static] bool QCoreApplication::hasPendingEvents()</db:title>
<db:para>This function returns true if there are pending events; otherwise returns false. Pending events can be either from the window system or posted events using postEvent().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#hasPendingEvents">QAbstractEventDispatcher::hasPendingEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="installNativeEventFilter">
<db:title>[since 5.0] void QCoreApplication::installNativeEventFilter(QAbstractNativeEventFilter *<db:emphasis>filterObj</db:emphasis>)</db:title>
<db:para>Installs an event filter <db:code role="parameter">filterObj</db:code> for all native events received by the application in the main thread.</db:para>
<db:para>The event filter <db:code role="parameter">filterObj</db:code> receives events via its nativeEventFilter() function, which is called for all native events received in the main thread.</db:para>
<db:para>The nativeEventFilter() function should return true if the event should be filtered, (i.e. stopped). It should return false to allow normal Qt processing to continue: the native event can then be translated into a <db:link xlink:href="qevent.xml">QEvent</db:link> and handled by the standard Qt <db:link xlink:href="qevent.xml">event</db:link> filtering, e.g. <db:link xlink:href="qobject.xml#installEventFilter">QObject::installEventFilter</db:link>().</db:para>
<db:para>If multiple event filters are installed, the filter that was installed last is activated first.</db:para>
<db:note>
<db:para>The filter function set here receives native messages, i.e. MSG or XCB event structs.</db:para>
</db:note>
<db:para>For maximum portability, you should always try to use QEvents and <db:link xlink:href="qobject.xml#installEventFilter">QObject::installEventFilter</db:link>() whenever possible.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#installEventFilter">QObject::installEventFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="instance">
<db:title>[static] QCoreApplication *QCoreApplication::instance()</db:title>
<db:para>Returns a pointer to the application's <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> (or QApplication) instance.</db:para>
<db:para>If no instance has been allocated, null is returned.</db:para>
</db:section>
<db:section xml:id="isQuitLockEnabled">
<db:title>[static] bool QCoreApplication::isQuitLockEnabled()</db:title>
<db:para>Returns true if the use of the <db:link xlink:href="qeventlooplocker.xml">QEventLoopLocker</db:link> feature can cause the application to quit, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventlooplocker.xml">QEventLoopLocker</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeNativeEventFilter">
<db:title>[since 5.0] void QCoreApplication::removeNativeEventFilter(QAbstractNativeEventFilter *<db:emphasis>filterObject</db:emphasis>)</db:title>
<db:para>Removes an event <db:code role="parameter">filterObject</db:code> from this object. The request is ignored if such an event filter has not been installed.</db:para>
<db:para>All event filters for this object are automatically removed when this object is destroyed.</db:para>
<db:para>It is always safe to remove an event filter, even during event filter activation (i.e. from the nativeEventFilter() function).</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#installNativeEventFilter">installNativeEventFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removePostedEvents">
<db:title>[static, since 4.3] void QCoreApplication::removePostedEvents(QObject *<db:emphasis>receiver</db:emphasis>, int <db:emphasis>eventType</db:emphasis> = 0)</db:title>
<db:para>Removes all events of the given <db:code role="parameter">eventType</db:code> that were posted using postEvent() for <db:code role="parameter">receiver</db:code>.</db:para>
<db:para>The events are <db:emphasis>not</db:emphasis> dispatched, instead they are removed from the queue. You should never need to call this function. If you do call it, be aware that killing events may cause <db:code role="parameter">receiver</db:code> to break one or more invariants.</db:para>
<db:para>If <db:code role="parameter">receiver</db:code> is null, the events of <db:code role="parameter">eventType</db:code> are removed for all objects. If <db:code role="parameter">eventType</db:code> is 0, all the events are removed for <db:code role="parameter">receiver</db:code>. You should never call this function with <db:code role="parameter">eventType</db:code> of 0. If you do call it in this way, be aware that killing events may cause <db:code role="parameter">receiver</db:code> to break one or more invariants.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="sendPostedEvents">
<db:title>[static] void QCoreApplication::sendPostedEvents(QObject *<db:emphasis>receiver</db:emphasis> = 0, int <db:emphasis>event_type</db:emphasis> = 0)</db:title>
<db:para>Immediately dispatches all events which have been previously queued with QCoreApplication::postEvent() and which are for the object <db:code role="parameter">receiver</db:code> and have the event type <db:code role="parameter">event_type</db:code>.</db:para>
<db:para>Events from the window system are <db:emphasis>not</db:emphasis> dispatched by this function, but by processEvents().</db:para>
<db:para>If <db:code role="parameter">receiver</db:code> is null, the events of <db:code role="parameter">event_type</db:code> are sent for all objects. If <db:code role="parameter">event_type</db:code> is 0, all the events are sent for <db:code role="parameter">receiver</db:code>.</db:para>
<db:note>
<db:para>This method must be called from the same thread as its <db:link xlink:href="qobject.xml">QObject</db:link> parameter, <db:code role="parameter">receiver</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#flush">flush</db:link>()</db:member>
<db:member><db:link xlink:href="">postEvent()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttribute">
<db:title>[static] void QCoreApplication::setAttribute(Qt::ApplicationAttribute <db:emphasis>attribute</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:para>Sets the attribute <db:code role="parameter">attribute</db:code> if <db:code role="parameter">on</db:code> is true; otherwise clears the attribute.</db:para>
<db:para>One of the attributes that can be set with this method is <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_ImmediateWidgetCreation</db:link>. It tells Qt to create toplevel windows immediately. Normally, resources for widgets are allocated on demand to improve efficiency and minimize resource usage. Therefore, if it is important to minimize resource consumption, do not set this attribute.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#testAttribute">testAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEventDispatcher">
<db:title>[static] void QCoreApplication::setEventDispatcher(QAbstractEventDispatcher *<db:emphasis>eventDispatcher</db:emphasis>)</db:title>
<db:para>Sets the event dispatcher for the main thread to <db:code role="parameter">eventDispatcher</db:code>. This is only possible as long as there is no event dispatcher installed yet. That is, before <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> has been instantiated. This method takes ownership of the object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#eventDispatcher">eventDispatcher</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setQuitLockEnabled">
<db:title>[static] void QCoreApplication::setQuitLockEnabled(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:para>Enables the ability of the <db:link xlink:href="qeventlooplocker.xml">QEventLoopLocker</db:link> feature to quit the application.</db:para>
<db:para>If disabled, the use of <db:link xlink:href="qeventlooplocker.xml">QEventLoopLocker</db:link> will not quit the application.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#isQuitLockEnabled">isQuitLockEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qeventlooplocker.xml">QEventLoopLocker</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startingUp">
<db:title>[static] bool QCoreApplication::startingUp()</db:title>
<db:para>Returns true if an application object has not been created yet; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#closingDown">closingDown</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="testAttribute">
<db:title>[static] bool QCoreApplication::testAttribute(Qt::ApplicationAttribute <db:emphasis>attribute</db:emphasis>)</db:title>
<db:para>Returns true if attribute <db:code role="parameter">attribute</db:code> is set; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#setAttribute">setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qAddPostRoutine">
<db:title>void qAddPostRoutine(QtCleanUpFunction <db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>Adds a global routine that will be called from the QApplication destructor. This function is normally used to add cleanup routines for program-wide functionality.</db:para>
<db:para>The function specified by <db:code role="parameter">ptr</db:code> should take no arguments and should return nothing. For example:</db:para>
<db:programlisting language="cpp">static int *global_ptr = 0;

static void cleanup_ptr()
{
    delete [] global_ptr;
    global_ptr = 0;
}

void init_ptr()
{
    global_ptr = new int[100];      // allocate data
    qAddPostRoutine(cleanup_ptr);   // delete later
}
</db:programlisting>
<db:para>Note that for an application- or module-wide cleanup, qAddPostRoutine() is often not suitable. For example, if the program is split into dynamically loaded modules, the relevant module may be unloaded long before the QApplication destructor is called.</db:para>
<db:para>For modules and libraries, using a reference-counted initialization manager or Qt's parent-child deletion mechanism may be better. Here is an example of a private class that uses the parent-child mechanism to call a cleanup function at the right time:</db:para>
<db:programlisting language="cpp">class MyPrivateInitStuff : public QObject
{
public:
    static MyPrivateInitStuff *initStuff(QObject *parent)
    {
        if (!p)
            p = new MyPrivateInitStuff(parent);
        return p;
    }

    ~MyPrivateInitStuff()
    {
        // cleanup goes here
    }

private:
    MyPrivateInitStuff(QObject *parent)
        : QObject(parent)
    {
        // initialization goes here
    }

    MyPrivateInitStuff *p;
};
</db:programlisting>
<db:para>By selecting the right parent object, this can often be made to clean up the module's data at the right moment.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_COREAPP_STARTUP_FUNCTION">
<db:title>[since 5.1] Q_COREAPP_STARTUP_FUNCTION(QtStartUpFunction <db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>Adds a global function that will be called from the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> constructor. This macro is normally used to initialize libraries for program-wide functionality, without requiring the application to call into the library for initialization.</db:para>
<db:para>The function specified by <db:code role="parameter">ptr</db:code> should take no arguments and should return nothing. For example:</db:para>
<db:programlisting language="cpp">// Called once QCoreApplication exists
static void preRoutineMyDebugTool()
{
    MyDebugTool* tool = new MyDebugTool(QCoreApplication::instance());
    QCoreApplication::instance()-&gt;installEventFilter(tool);
}

Q_COREAPP_STARTUP_FUNCTION(preRoutineMyDebugTool)
</db:programlisting>
<db:para>Note that the startup function will run at the end of the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> constructor, before any GUI initialization. If GUI code is required in the function, use a timer (or a queued invocation) to perform the initialization later on, from the event loop.</db:para>
<db:para>If <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> is deleted and another <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> is created, the startup function will be invoked again.</db:para>
<db:note>
<db:para>This macro is reentrant.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="Q_DECLARE_TR_FUNCTIONS">
<db:title>Q_DECLARE_TR_FUNCTIONS(<db:emphasis>context</db:emphasis>)</db:title>
<db:para>The Q_DECLARE_TR_FUNCTIONS() macro declares and implements two translation functions, tr() and trUtf8(), with these signatures:</db:para>
<db:programlisting language="cpp">static inline QString tr(const char *sourceText,
                         const char *comment = 0);
static inline QString trUtf8(const char *sourceText,
                             const char *comment = 0);
</db:programlisting>
<db:para>This macro is useful if you want to use <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>() or QObject::trUtf8() in classes that don't inherit from <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:para>Q_DECLARE_TR_FUNCTIONS() must appear at the very top of the class definition (before the first public: or protected:). For example:</db:para>
<db:programlisting language="cpp">class MyMfcView : public CView
{
    Q_DECLARE_TR_FUNCTIONS(MyMfcView)

public:
    MyMfcView();
    ...
};
</db:programlisting>
<db:para>The <db:code role="parameter">context</db:code> parameter is normally the class name, but it can be any string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link></db:member>
<db:member><db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#trUtf8" role="deprecated">QObject::trUtf8</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
