<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCoreApplication Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> class provides an event loop for Qt applications without UI.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCoreApplication</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qandroidservice.xml" xlink:role="class">QAndroidService</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class is used by non-GUI applications to provide their event loop. For non-GUI application that uses Qt, there should be exactly one <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object. For GUI applications, see QGuiApplication. For applications that use the Qt Widgets module, see QApplication.</db:para>
<db:para><db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> contains the main event loop, where all events from the operating system (e.g., timer and network events) and other sources are processed and dispatched. It also handles the application's initialization and finalization, as well as system-wide and application-wide settings.</db:para>
<db:section xml:id="the-event-loop-and-event-handling">
<db:title>The Event Loop and Event Handling</db:title>
<db:para>The event loop is started with a call to <db:link xlink:href="qcoreapplication.xml#exec">exec</db:link>(). Long-running operations can call <db:link xlink:href="qcoreapplication.xml#processEvents">processEvents</db:link>() to keep the application responsive.</db:para>
<db:para>In general, we recommend that you create a <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>, QGuiApplication or a QApplication object in your main() function as early as possible. <db:link xlink:href="qcoreapplication.xml#exec">exec</db:link>() will not return until the event loop exits; e.g., when <db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>() is called.</db:para>
<db:para>Several static convenience functions are also provided. The <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object is available from <db:link xlink:href="qcoreapplication.xml#instance">instance</db:link>(). Events can be sent with <db:link xlink:href="qcoreapplication.xml#sendEvent">sendEvent</db:link>() or posted to an event queue with <db:link xlink:href="qcoreapplication.xml#postEvent">postEvent</db:link>(). Pending events can be removed with <db:link xlink:href="qcoreapplication.xml#removePostedEvents">removePostedEvents</db:link>() or dispatched with <db:link xlink:href="qcoreapplication.xml#sendPostedEvents">sendPostedEvents</db:link>().</db:para>
<db:para>The class provides a <db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>() slot and an <db:link xlink:href="qcoreapplication.xml#aboutToQuit">aboutToQuit</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="application-and-library-paths">
<db:title>Application and Library Paths</db:title>
<db:para>An application has an <db:link xlink:href="qcoreapplication.xml#applicationDirPath">applicationDirPath</db:link>() and an <db:link xlink:href="qcoreapplication.xml#applicationFilePath">applicationFilePath</db:link>(). Library paths (see <db:link xlink:href="qlibrary.xml">QLibrary</db:link>) can be retrieved with <db:link xlink:href="qcoreapplication.xml#libraryPaths">libraryPaths</db:link>() and manipulated by <db:link xlink:href="qcoreapplication.xml#setLibraryPaths">setLibraryPaths</db:link>(), <db:link xlink:href="qcoreapplication.xml#addLibraryPath">addLibraryPath</db:link>(), and <db:link xlink:href="qcoreapplication.xml#removeLibraryPath">removeLibraryPath</db:link>().</db:para>
</db:section>
<db:section xml:id="internationalization-and-translations">
<db:title>Internationalization and Translations</db:title>
<db:para>Translation files can be added or removed using <db:link xlink:href="qcoreapplication.xml#installTranslator">installTranslator</db:link>() and <db:link xlink:href="qcoreapplication.xml#removeTranslator">removeTranslator</db:link>(). Application strings can be translated using <db:link xlink:href="qcoreapplication.xml#translate">translate</db:link>(). The <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>() function is implemented in terms of <db:link xlink:href="qcoreapplication.xml#translate">translate</db:link>().</db:para>
</db:section>
<db:section xml:id="accessing-command-line-arguments">
<db:title>Accessing Command Line Arguments</db:title>
<db:para>The command line arguments which are passed to <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>'s constructor should be accessed using the <db:link xlink:href="qcoreapplication.xml#arguments">arguments</db:link>() function.</db:para>
<db:note>
<db:para><db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> removes option -qmljsdebugger=&quot;...&quot;. It parses the argument of qmljsdebugger, and then removes this option plus its argument.</db:para>
</db:note>
<db:para>For more advanced command line option handling, create a <db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link>.</db:para>
</db:section>
<db:section xml:id="locale-settings">
<db:title>Locale Settings</db:title>
<db:para>On Unix/Linux Qt is configured to use the system locale settings by default. This can cause a conflict when using POSIX functions, for instance, when converting between data types such as floats and strings, since the notation may differ between locales. To get around this problem, call the POSIX function setlocale(LC_NUMERIC,&quot;C&quot;) right after initializing QApplication, QGuiApplication or <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> to reset the locale that is used for number formatting to &quot;C&quot;-locale.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QGuiApplication</db:member>
<db:member><db:link xlink:href="qabstracteventdispatcher.xml">QAbstractEventDispatcher</db:link></db:member>
<db:member><db:link xlink:href="qeventloop.xml">QEventLoop</db:link></db:member>
<db:member><db:link xlink:href="qtcore-threads-semaphores-example.xml">Producer and Consumer using Semaphores</db:link></db:member>
<db:member><db:link xlink:href="qtcore-threads-waitconditions-example.xml">Producer and Consumer using Wait Conditions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="applicationName-prop">
<db:title>applicationName : QString</db:title>
<db:para>This property holds the name of this application</db:para>
<db:para>The application name is used in various Qt classes and modules, most prominently in <db:link xlink:href="qsettings.xml">QSettings</db:link> when it is constructed using the default constructor. Other uses are in formatted logging output (see <db:link xlink:href="qtlogging.xml#qSetMessagePattern">qSetMessagePattern</db:link>()), in output by <db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link>, in <db:link xlink:href="qtemporarydir.xml">QTemporaryDir</db:link> and <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link> default paths, and in some file locations of <db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link>. <db:link xlink:href="">Qt D-Bus</db:link>, Accessibility, and the XCB platform integration make use of the application name, too.</db:para>
<db:para>If not set, the application name defaults to the executable name.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">applicationName</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setApplicationName</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>application</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">applicationNameChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#organizationName-prop">organizationName</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#organizationDomain-prop">organizationDomain</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#applicationVersion-prop">applicationVersion</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#applicationFilePath">applicationFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="applicationVersion-prop">
<db:title>applicationVersion : QString</db:title>
<db:para>This property holds the version of this application</db:para>
<db:para>If not set, the application version defaults to a platform-specific value determined from the main application executable or package (since Qt 5.9):</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Platform</db:para>
</db:th>
<db:th>
<db:para>Source</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Windows (classic desktop)</db:para>
</db:td>
<db:td>
<db:para>PRODUCTVERSION parameter of the VERSIONINFO resource</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>macOS, iOS, tvOS, watchOS</db:para>
</db:td>
<db:td>
<db:para>CFBundleVersion property of the information property list</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Android</db:para>
</db:td>
<db:td>
<db:para>android:versionName property of the AndroidManifest.xml manifest element</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>On other platforms, the default is the empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">applicationVersion</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setApplicationVersion</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>version</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">applicationVersionChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#applicationName-prop">applicationName</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#organizationName-prop">organizationName</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#organizationDomain-prop">organizationDomain</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="organizationDomain-prop">
<db:title>organizationDomain : QString</db:title>
<db:para>This property holds the Internet domain of the organization that wrote this application</db:para>
<db:para>The value is used by the <db:link xlink:href="qsettings.xml">QSettings</db:link> class when it is constructed using the default constructor. This saves having to repeat this information each time a <db:link xlink:href="qsettings.xml">QSettings</db:link> object is created.</db:para>
<db:para>On Mac, <db:link xlink:href="qsettings.xml">QSettings</db:link> uses organizationDomain() as the organization if it's not an empty string; otherwise it uses <db:link xlink:href="qcoreapplication.xml#organizationName-prop">organizationName</db:link>(). On all other platforms, <db:link xlink:href="qsettings.xml">QSettings</db:link> uses <db:link xlink:href="qcoreapplication.xml#organizationName-prop">organizationName</db:link>() as the organization.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">organizationDomain</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOrganizationDomain</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>orgDomain</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">organizationDomainChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#organizationName-prop">organizationName</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#applicationName-prop">applicationName</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#applicationVersion-prop">applicationVersion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="organizationName-prop">
<db:title>organizationName : QString</db:title>
<db:para>This property holds the name of the organization that wrote this application</db:para>
<db:para>The value is used by the <db:link xlink:href="qsettings.xml">QSettings</db:link> class when it is constructed using the default constructor. This saves having to repeat this information each time a <db:link xlink:href="qsettings.xml">QSettings</db:link> object is created.</db:para>
<db:para>On Mac, <db:link xlink:href="qsettings.xml">QSettings</db:link> uses <db:link xlink:href="qcoreapplication.xml#organizationDomain-prop">organizationDomain</db:link>() as the organization if it's not an empty string; otherwise it uses organizationName(). On all other platforms, <db:link xlink:href="qsettings.xml">QSettings</db:link> uses organizationName() as the organization.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">organizationName</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOrganizationName</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>orgName</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">organizationNameChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#organizationDomain-prop">organizationDomain</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#applicationName-prop">applicationName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quitLockEnabled-prop">
<db:title>quitLockEnabled : bool</db:title>
<db:para>This property holds whether the use of the <db:link xlink:href="qeventlooplocker.xml">QEventLoopLocker</db:link> feature can cause the application to quit.</db:para>
<db:para>When this property is true the release of the last remaining <db:link xlink:href="qeventlooplocker.xml">QEventLoopLocker</db:link> operating on the application will attempt to quit the application.</db:para>
<db:para>Note that attempting a quit may not necessarily result in the application quitting, for example if there still are open windows, or the <db:link xlink:href="qevent.xml#Type-enum">QEvent::Quit</db:link> event is ignored.</db:para>
<db:para>The default is true.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isQuitLockEnabled</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setQuitLockEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventlooplocker.xml">QEventLoopLocker</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCoreApplication">
<db:title>QCoreApplication::QCoreApplication(int &amp;<db:emphasis>argc</db:emphasis>, char **<db:emphasis>argv</db:emphasis>)</db:title>
<db:para>Constructs a Qt core application. Core applications are applications without a graphical user interface. Such applications are used at the console or as server processes.</db:para>
<db:para>The <db:code role="parameter">argc</db:code> and <db:code role="parameter">argv</db:code> arguments are processed by the application, and made available in a more convenient form by the <db:link xlink:href="qcoreapplication.xml#arguments">arguments</db:link>() function.</db:para>
<db:warning>
<db:para>The data referred to by <db:code role="parameter">argc</db:code> and <db:code role="parameter">argv</db:code> must stay valid for the entire lifetime of the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object. In addition, <db:code role="parameter">argc</db:code> must be greater than zero and <db:code role="parameter">argv</db:code> must contain at least one valid character string.</db:para>
</db:warning>
</db:section>
<db:section xml:id="aboutToQuit">
<db:title>void QCoreApplication::aboutToQuit()</db:title>
<db:para>This signal is emitted when the application is about to quit the main event loop, e.g. when the event loop level drops to zero. This may happen either after a call to <db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>() from inside the application or when the user shuts down the entire desktop session.</db:para>
<db:para>The signal is particularly useful if your application has to do some last-second cleanup. Note that no user interaction is possible in this state.</db:para>
<db:note>
<db:para>At this point the main event loop is still running, but will not process further events on return except <db:link xlink:href="qevent.xml#Type-enum">QEvent::DeferredDelete</db:link> events for objects deleted via <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>(). If event processing is needed, use a nested event loop or call <db:link xlink:href="qcoreapplication.xml#processEvents">QCoreApplication::processEvents</db:link>() manually.</db:para>
</db:note>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addLibraryPath">
<db:title>[static] void QCoreApplication::addLibraryPath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Prepends <db:code role="parameter">path</db:code> to the beginning of the library path list, ensuring that it is searched for libraries first. If <db:code role="parameter">path</db:code> is empty or already in the path list, the path list is not changed.</db:para>
<db:para>The default path list consists of one or two entries. The first is the installation directory for plugins, which is INSTALL/plugins, where INSTALL is the directory where Qt was installed. The second is the application's own directory (<db:emphasis role="bold">not</db:emphasis> the current directory), but only after the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object is instantiated.</db:para>
<db:para>The library paths are reset to the default when an instance of <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> is destructed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#removeLibraryPath">removeLibraryPath</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#libraryPaths">libraryPaths</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#setLibraryPaths">setLibraryPaths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="applicationDirPath">
<db:title>[static] QString QCoreApplication::applicationDirPath()</db:title>
<db:para>Returns the directory that contains the application executable.</db:para>
<db:para>For example, if you have installed Qt in the C:\Qt directory, and you run the regexp example, this function will return &quot;C:/Qt/examples/tools/regexp&quot;.</db:para>
<db:para>On macOS and iOS this will point to the directory actually containing the executable, which may be inside an application bundle (if the application is bundled).</db:para>
<db:para>On Android this will point to the directory actually containing the executable, which may be inside the application APK (if it was built with uncompressed libraries support).</db:para>
<db:warning>
<db:para>On Linux, this function will try to get the path from the /proc file system. If that fails, it assumes that argv[0] contains the absolute file name of the executable. The function also assumes that the current directory has not been changed by the application.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#applicationFilePath">applicationFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="applicationFilePath">
<db:title>[static] QString QCoreApplication::applicationFilePath()</db:title>
<db:para>Returns the file path of the application executable.</db:para>
<db:para>For example, if you have installed Qt in the /usr/local/qt directory, and you run the regexp example, this function will return &quot;/usr/local/qt/examples/tools/regexp/regexp&quot;.</db:para>
<db:warning>
<db:para>On Linux, this function will try to get the path from the /proc file system. If that fails, it assumes that argv[0] contains the absolute file name of the executable. The function also assumes that the current directory has not been changed by the application.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#applicationDirPath">applicationDirPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="applicationPid">
<db:title>[static] qint64 QCoreApplication::applicationPid()</db:title>
<db:para>Returns the current process ID for the application.</db:para>
</db:section>
<db:section xml:id="arguments">
<db:title>[static] QStringList QCoreApplication::arguments()</db:title>
<db:para>Returns the list of command-line arguments.</db:para>
<db:para>Usually arguments().at(0) is the program name, arguments().at(1) is the first argument, and arguments().last() is the last argument. See the note below about Windows.</db:para>
<db:para>Calling this function is slow - you should store the result in a variable when parsing the command line.</db:para>
<db:warning>
<db:para>On Unix, this list is built from the argc and argv parameters passed to the constructor in the main() function. The string-data in argv is interpreted using <db:link xlink:href="qstring.xml#fromLocal8Bit">QString::fromLocal8Bit</db:link>(); hence it is not possible to pass, for example, Japanese command line arguments on a system that runs in a Latin1 locale. Most modern Unix systems do not have this limitation, as they are Unicode-based.</db:para>
</db:warning>
<db:para>On Windows, the list is built from the argc and argv parameters only if modified argv/argc parameters are passed to the constructor. In that case, encoding problems might occur.</db:para>
<db:para>Otherwise, the arguments() are constructed from the return value of <db:link xlink:href="https://docs.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-getcommandlinea">GetCommandLine()</db:link>. As a result of this, the string given by arguments().at(0) might not be the program name on Windows, depending on how the application was started.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#applicationFilePath">applicationFilePath</db:link>()</db:member>
<db:member><db:link xlink:href="qcommandlineparser.xml">QCommandLineParser</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkPermission">
<db:title>[since 6.5] Qt::PermissionStatus QCoreApplication::checkPermission(const QPermission &amp;<db:emphasis>permission</db:emphasis>)</db:title>
<db:para>Checks the status of the given <db:code role="parameter">permission</db:code></db:para>
<db:para>If the result is <db:link xlink:href="qt.xml#PermissionStatus-enum">Qt::PermissionStatus::Undetermined</db:link> then permission should be requested via <db:link xlink:href="qcoreapplication.xml#requestPermission">requestPermission</db:link>() to determine the user's intent.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#requestPermission">requestPermission</db:link>()</db:member>
<db:member><db:link xlink:href="permissions.xml">Application Permissions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closingDown">
<db:title>[static] bool QCoreApplication::closingDown()</db:title>
<db:para>Returns true if the application objects are being destroyed; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#startingUp">startingUp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QCoreApplication::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventDispatcher">
<db:title>[static] QAbstractEventDispatcher *QCoreApplication::eventDispatcher()</db:title>
<db:para>Returns a pointer to the event dispatcher object for the main thread. If no event dispatcher exists for the thread, this function returns nullptr.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#setEventDispatcher">setEventDispatcher</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exec">
<db:title>[static] int QCoreApplication::exec()</db:title>
<db:para>Enters the main event loop and waits until <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>() is called. Returns the value that was passed to <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>() (which is 0 if <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>() is called via <db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>()).</db:para>
<db:para>It is necessary to call this function to start event handling. The main event loop receives events from the window system and dispatches these to the application widgets.</db:para>
<db:para>To make your application perform idle processing (by executing a special function whenever there are no pending events), use a <db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link> with 0ns timeout. More advanced idle processing schemes can be achieved using <db:link xlink:href="qcoreapplication.xml#processEvents">processEvents</db:link>().</db:para>
<db:para>We recommend that you connect clean-up code to the <db:link xlink:href="qcoreapplication.xml#aboutToQuit">aboutToQuit</db:link>() signal, instead of putting it in your application's main() function because on some platforms the exec() call may not return. For example, on Windows when the user logs off, the system terminates the process after Qt closes all top-level windows. Hence, there is no guarantee that the application will have time to exit its event loop and execute code at the end of the main() function after the exec() call.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#processEvents">processEvents</db:link>()</db:member>
<db:member><db:link xlink:href="">QApplication::exec()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exit">
<db:title>[static] void QCoreApplication::exit(int <db:emphasis>returnCode</db:emphasis> = 0)</db:title>
<db:para>Tells the application to exit with a return code.</db:para>
<db:para>After this function has been called, the application leaves the main event loop and returns from the call to <db:link xlink:href="qcoreapplication.xml#exec">exec</db:link>(). The <db:link xlink:href="qcoreapplication.xml#exec">exec</db:link>() function returns <db:code role="parameter">returnCode</db:code>. If the event loop is not running, this function does nothing.</db:para>
<db:para>By convention, a <db:code role="parameter">returnCode</db:code> of 0 means success, and any non-zero value indicates an error.</db:para>
<db:para>It's good practice to always connect signals to this slot using a <db:link xlink:href="qt.xml#ConnectionType-enum">QueuedConnection</db:link>. If a signal connected (non-queued) to this slot is emitted before control enters the main event loop (such as before &quot;int main&quot; calls <db:link xlink:href="qcoreapplication.xml#exec">exec</db:link>()), the slot has no effect and the application never exits. Using a queued connection ensures that the slot will not be invoked until after control enters the main event loop.</db:para>
<db:para>Note that unlike the C library function of the same name, this function <db:emphasis>does</db:emphasis> return to the caller – it is event processing that stops.</db:para>
<db:para>Note also that this function is not thread-safe. It should be called only from the main thread (the thread that the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object is processing events on). To ask the application to exit from another thread, either use <db:link xlink:href="qcoreapplication.xml#quit">QCoreApplication::quit</db:link>() or instead call this function from the main thread with QMetaMethod::invokeMethod().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#quit">quit</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#exec">exec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="installNativeEventFilter">
<db:title>void QCoreApplication::installNativeEventFilter(QAbstractNativeEventFilter *<db:emphasis>filterObj</db:emphasis>)</db:title>
<db:para>Installs an event filter <db:code role="parameter">filterObj</db:code> for all native events received by the application in the main thread.</db:para>
<db:para>The event filter <db:code role="parameter">filterObj</db:code> receives events via its <db:link xlink:href="qabstractnativeeventfilter.xml#nativeEventFilter">nativeEventFilter</db:link>() function, which is called for all native events received in the main thread.</db:para>
<db:para>The <db:link xlink:href="qabstractnativeeventfilter.xml#nativeEventFilter">QAbstractNativeEventFilter::nativeEventFilter</db:link>() function should return true if the event should be filtered, i.e. stopped. It should return false to allow normal Qt processing to continue: the native event can then be translated into a <db:link xlink:href="qevent.xml">QEvent</db:link> and handled by the standard Qt <db:link xlink:href="qevent.xml">event</db:link> filtering, e.g. <db:link xlink:href="qobject.xml#installEventFilter">QObject::installEventFilter</db:link>().</db:para>
<db:para>If multiple event filters are installed, the filter that was installed last is activated first.</db:para>
<db:note>
<db:para>The filter function set here receives native messages, i.e. MSG or XCB event structs.</db:para>
</db:note>
<db:note>
<db:para>Native event filters will be disabled in the application when the <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_PluginApplication</db:link> attribute is set.</db:para>
</db:note>
<db:para>For maximum portability, you should always try to use <db:link xlink:href="qevent.xml">QEvent</db:link> and <db:link xlink:href="qobject.xml#installEventFilter">QObject::installEventFilter</db:link>() whenever possible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#installEventFilter">QObject::installEventFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="installTranslator">
<db:title>[static] bool QCoreApplication::installTranslator(QTranslator *<db:emphasis>translationFile</db:emphasis>)</db:title>
<db:para>Adds the translation file <db:code role="parameter">translationFile</db:code> to the list of translation files to be used for translations.</db:para>
<db:para>Multiple translation files can be installed. Translations are searched for in the reverse order in which they were installed, so the most recently installed translation file is searched first and the first translation file installed is searched last. The search stops as soon as a translation containing a matching string is found.</db:para>
<db:para>Installing or removing a <db:link xlink:href="qtranslator.xml">QTranslator</db:link>, or changing an installed <db:link xlink:href="qtranslator.xml">QTranslator</db:link> generates a <db:link xlink:href="qevent.xml#Type-enum">LanguageChange</db:link> event for the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> instance. A QApplication instance will propagate the event to all toplevel widgets, where a reimplementation of changeEvent can re-translate the user interface by passing user-visible strings via the <db:link xlink:href="qobject.xml#tr">tr</db:link>() function to the respective property setters. User-interface classes generated by Qt Widgets Designer provide a retranslateUi() function that can be called.</db:para>
<db:para>The function returns true on success and false on failure.</db:para>
<db:note>
<db:para><db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> does <db:emphasis>not</db:emphasis> take ownership of <db:code role="parameter">translationFile</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#removeTranslator">removeTranslator</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#translate">translate</db:link>()</db:member>
<db:member><db:link xlink:href="qtranslator.xml#load">QTranslator::load</db:link>()</db:member>
<db:member><db:link xlink:href="">Prepare for Dynamic Language Changes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="instance">
<db:title>[static noexcept] QCoreApplication *QCoreApplication::instance()</db:title>
<db:para>Returns a pointer to the application's <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> (or QGuiApplication/QApplication) instance.</db:para>
<db:para>If no instance has been allocated, nullptr is returned.</db:para>
</db:section>
<db:section xml:id="libraryPaths">
<db:title>[static] QStringList QCoreApplication::libraryPaths()</db:title>
<db:para>Returns a list of paths that the application will search when dynamically loading libraries.</db:para>
<db:para>The return value of this function may change when a <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> is created. It is not recommended to call it before creating a <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>. The directory of the application executable (<db:emphasis role="bold">not</db:emphasis> the working directory) is part of the list if it is known. In order to make it known a <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> has to be constructed as it will use argv[0] to find it.</db:para>
<db:para>Qt provides default library paths, but they can also be set using a <db:link xlink:href="">qt.conf</db:link> file. Paths specified in this file will override default values. Note that if the qt.conf file is in the directory of the application executable, it may not be found until a <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> is created. If it is not found when calling this function, the default library paths will be used.</db:para>
<db:para>The list will include the installation directory for plugins if it exists (the default installation directory for plugins is INSTALL/plugins, where INSTALL is the directory where Qt was installed). The colon separated entries of the QT_PLUGIN_PATH environment variable are always added. The plugin installation directory (and its existence) may change when the directory of the application executable becomes known.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#setLibraryPaths">setLibraryPaths</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#addLibraryPath">addLibraryPath</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#removeLibraryPath">removeLibraryPath</db:link>()</db:member>
<db:member><db:link xlink:href="qlibrary.xml">QLibrary</db:link></db:member>
<db:member><db:link xlink:href="">How to Create Qt Plugins</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="notify">
<db:title>[virtual] bool QCoreApplication::notify(QObject *<db:emphasis>receiver</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Sends <db:code role="parameter">event</db:code> to <db:code role="parameter">receiver</db:code>: <db:code role="parameter">receiver</db:code>-&gt;event(<db:code role="parameter">event</db:code>). Returns the value that is returned from the receiver's event handler. Note that this function is called for all events sent to any object in any thread.</db:para>
<db:para>For certain types of events (e.g. mouse and key events), the event will be propagated to the receiver's parent and so on up to the top-level object if the receiver is not interested in the event (i.e., it returns false).</db:para>
<db:para>There are five different ways that events can be processed; reimplementing this virtual function is just one of them. All five approaches are listed below:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Reimplementing <db:link xlink:href="">paintEvent()</db:link>, <db:link xlink:href="">mousePressEvent()</db:link> and so on. This is the most common, easiest, and least powerful way.</db:para>
</db:listitem>
<db:listitem>
<db:para>Reimplementing this function. This is very powerful, providing complete control; but only one subclass can be active at a time.</db:para>
</db:listitem>
<db:listitem>
<db:para>Installing an event filter on <db:link xlink:href="qcoreapplication.xml#instance">QCoreApplication::instance</db:link>(). Such an event filter is able to process all events for all widgets, so it's just as powerful as reimplementing notify(); furthermore, it's possible to have more than one application-global event filter. Global event filters even see mouse events for <db:link xlink:href="">disabled widgets</db:link>. Note that application event filters are only called for objects that live in the main thread.</db:para>
</db:listitem>
<db:listitem>
<db:para>Reimplementing <db:link xlink:href="qobject.xml#event">QObject::event</db:link>() (as QWidget does). If you do this you get Tab key presses, and you get to see the events before any widget-specific event filters.</db:para>
</db:listitem>
<db:listitem>
<db:para>Installing an event filter on the object. Such an event filter gets all the events, including Tab and Shift+Tab key press events, as long as they do not change the focus widget.</db:para>
</db:listitem>
</db:orderedlist>
<db:para><db:emphasis role="bold">Future direction:</db:emphasis> This function will not be called for objects that live outside the main thread in Qt 7. Applications that need that functionality should find other solutions for their event inspection needs in the meantime. The change may be extended to the main thread, causing this function to be deprecated.</db:para>
<db:warning>
<db:para>If you override this function, you must ensure all threads that process events stop doing so before your application object begins destruction. This includes threads started by other libraries that you may be using, but does not apply to Qt's own threads.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#event">QObject::event</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#installNativeEventFilter">installNativeEventFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="postEvent">
<db:title>[static] void QCoreApplication::postEvent(QObject *<db:emphasis>receiver</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>, int <db:emphasis>priority</db:emphasis> = Qt::NormalEventPriority)</db:title>
<db:para>Adds the event <db:code role="parameter">event</db:code>, with the object <db:code role="parameter">receiver</db:code> as the receiver of the event, to an event queue and returns immediately.</db:para>
<db:para>The event must be allocated on the heap since the post event queue will take ownership of the event and delete it once it has been posted. It is <db:emphasis>not safe</db:emphasis> to access the event after it has been posted.</db:para>
<db:para>When control returns to the main event loop, all events that are stored in the queue will be sent using the <db:link xlink:href="qcoreapplication.xml#notify">notify</db:link>() function.</db:para>
<db:para>Events are sorted in descending <db:code role="parameter">priority</db:code> order, i.e. events with a high <db:code role="parameter">priority</db:code> are queued before events with a lower <db:code role="parameter">priority</db:code>. The <db:code role="parameter">priority</db:code> can be any integer value, i.e. between INT_MAX and INT_MIN, inclusive; see <db:link xlink:href="qt.xml#EventPriority-enum">Qt::EventPriority</db:link> for more details. Events with equal <db:code role="parameter">priority</db:code> will be processed in the order posted.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#sendEvent">sendEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#notify">notify</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#sendPostedEvents">sendPostedEvents</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#EventPriority-enum">Qt::EventPriority</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="processEvents">
<db:title>[static] void QCoreApplication::processEvents(QEventLoop::ProcessEventsFlags <db:emphasis>flags</db:emphasis> = QEventLoop::AllEvents)</db:title>
<db:para>Processes some pending events for the calling thread according to the specified <db:code role="parameter">flags</db:code>.</db:para>
<db:para>Use of this function is discouraged. Instead, prefer to move long operations out of the GUI thread into an auxiliary one and to completely avoid nested event loop processing. If event processing is really necessary, consider using <db:link xlink:href="qeventloop.xml">QEventLoop</db:link> instead.</db:para>
<db:para>In the event that you are running a local loop which calls this function continuously, without an event loop, the <db:link xlink:href="qevent.xml#Type-enum">DeferredDelete</db:link> events will not be processed. This can affect the behaviour of widgets, e.g. QToolTip, that rely on <db:link xlink:href="qevent.xml#Type-enum">DeferredDelete</db:link> events to function properly. An alternative would be to call <db:link xlink:href="qcoreapplication.xml#sendPostedEvents">sendPostedEvents</db:link>() from within that local loop.</db:para>
<db:para>Calling this function processes events only for the calling thread, and returns after all available events have been processed. Available events are events queued before the function call. This means that events that are posted while the function runs will be queued until a later round of event processing.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#exec">exec</db:link>()</db:member>
<db:member><db:link xlink:href="qtimer.xml">QTimer</db:link></db:member>
<db:member><db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link></db:member>
<db:member><db:link xlink:href="qeventloop.xml#processEvents">QEventLoop::processEvents</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#sendPostedEvents">sendPostedEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="processEvents-1">
<db:title>[static, since 6.7] void QCoreApplication::processEvents(QEventLoop::ProcessEventsFlags <db:emphasis>flags</db:emphasis>, QDeadlineTimer <db:emphasis>deadline</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Processes pending events for the calling thread untile <db:code role="parameter">deadline</db:code> has expired, or until there are no more events to process, whichever happens first.</db:para>
<db:para>Use of this function is discouraged. Instead, prefer to move long operations out of the GUI thread into an auxiliary one and to completely avoid nested event loop processing. If event processing is really necessary, consider using <db:link xlink:href="qeventloop.xml">QEventLoop</db:link> instead.</db:para>
<db:para>Calling this function processes events only for the calling thread.</db:para>
<db:note>
<db:para>Unlike the <db:link xlink:href="qcoreapplication.xml#processEvents">processEvents</db:link>() overload, this function also processes events that are posted while the function runs.</db:para>
</db:note>
<db:note>
<db:para>All events that were queued before the timeout will be processed, however long it takes.</db:para>
</db:note>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#exec">exec</db:link>()</db:member>
<db:member><db:link xlink:href="qtimer.xml">QTimer</db:link></db:member>
<db:member><db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link></db:member>
<db:member><db:link xlink:href="qeventloop.xml#processEvents">QEventLoop::processEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="processEvents-2">
<db:title>[static] void QCoreApplication::processEvents(QEventLoop::ProcessEventsFlags <db:emphasis>flags</db:emphasis>, int <db:emphasis>ms</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Processes pending events for the calling thread for <db:code role="parameter">ms</db:code> milliseconds or until there are no more events to process, whichever is shorter.</db:para>
<db:para>This is equivalent to calling:</db:para>
<db:programlisting language="cpp">QCoreApplication::processEvents(flags, QDeadlineTimer(ms));
</db:programlisting>
</db:section>
<db:section xml:id="quit">
<db:title>[static] void QCoreApplication::quit()</db:title>
<db:para>Asks the application to quit.</db:para>
<db:para>The request may be ignored if the application prevents the quit, for example if one of its windows can't be closed. The application can affect this by handling the <db:link xlink:href="qevent.xml#Type-enum">QEvent::Quit</db:link> event on the application level, or <db:link xlink:href="qevent.xml#Type-enum">QEvent::Close</db:link> events for the individual windows.</db:para>
<db:para>If the quit is not interrupted the application will exit with return code 0 (success).</db:para>
<db:para>To exit the application without a chance of being interrupted, call <db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>() directly. Note that method is not thread-safe.</db:para>
<db:para>It's good practice to always connect signals to this slot using a <db:link xlink:href="qt.xml#ConnectionType-enum">QueuedConnection</db:link>. If a signal connected (non-queued) to this slot is emitted before control enters the main event loop (such as before &quot;int main&quot; calls <db:link xlink:href="qcoreapplication.xml#exec">exec</db:link>()), the slot has no effect and the application never exits. Using a queued connection ensures that the slot will not be invoked until after control enters the main event loop.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QPushButton *quitButton = new QPushButton(&quot;Quit&quot;);
connect(quitButton, &amp;QPushButton::clicked, &amp;app, &amp;QCoreApplication::quit, Qt::QueuedConnection);
</db:programlisting>
<db:para><db:emphasis role="bold">Thread-safety note</db:emphasis>: this function may be called from any thread to thread-safely cause the currently-running main application loop to exit. However, thread-safety is not guaranteed if the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object is being destroyed at the same time.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#exit">exit</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#aboutToQuit">aboutToQuit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeLibraryPath">
<db:title>[static] void QCoreApplication::removeLibraryPath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">path</db:code> from the library path list. If <db:code role="parameter">path</db:code> is empty or not in the path list, the list is not changed.</db:para>
<db:para>The library paths are reset to the default when an instance of <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> is destructed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#addLibraryPath">addLibraryPath</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#libraryPaths">libraryPaths</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#setLibraryPaths">setLibraryPaths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeNativeEventFilter">
<db:title>void QCoreApplication::removeNativeEventFilter(QAbstractNativeEventFilter *<db:emphasis>filterObject</db:emphasis>)</db:title>
<db:para>Removes an event <db:code role="parameter">filterObject</db:code> from this object. The request is ignored if such an event filter has not been installed.</db:para>
<db:para>All event filters for this object are automatically removed when this object is destroyed.</db:para>
<db:para>It is always safe to remove an event filter, even during event filter activation (i.e. from the nativeEventFilter() function).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#installNativeEventFilter">installNativeEventFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removePostedEvents">
<db:title>[static] void QCoreApplication::removePostedEvents(QObject *<db:emphasis>receiver</db:emphasis>, int <db:emphasis>eventType</db:emphasis> = 0)</db:title>
<db:para>Removes all events of the given <db:code role="parameter">eventType</db:code> that were posted using <db:link xlink:href="qcoreapplication.xml#postEvent">postEvent</db:link>() for <db:code role="parameter">receiver</db:code>.</db:para>
<db:para>The events are <db:emphasis>not</db:emphasis> dispatched, instead they are removed from the queue. You should never need to call this function. If you do call it, be aware that killing events may cause <db:code role="parameter">receiver</db:code> to break one or more invariants.</db:para>
<db:para>If <db:code role="parameter">receiver</db:code> is nullptr, the events of <db:code role="parameter">eventType</db:code> are removed for all objects. If <db:code role="parameter">eventType</db:code> is 0, all the events are removed for <db:code role="parameter">receiver</db:code>. You should never call this function with <db:code role="parameter">eventType</db:code> of 0.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="removeTranslator">
<db:title>[static] bool QCoreApplication::removeTranslator(QTranslator *<db:emphasis>translationFile</db:emphasis>)</db:title>
<db:para>Removes the translation file <db:code role="parameter">translationFile</db:code> from the list of translation files used by this application. (It does not delete the translation file from the file system.)</db:para>
<db:para>The function returns true on success and false on failure.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#installTranslator">installTranslator</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#translate">translate</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestPermission">
<db:title>[since 6.5] void QCoreApplication::requestPermission(const QPermission &amp;<db:emphasis>permission</db:emphasis>, Functor &amp;&amp;<db:emphasis>functor</db:emphasis>)</db:title>
<db:para>Requests the given <db:code role="parameter">permission</db:code>.</db:para>
<db:para>When the request is ready, <db:code role="parameter">functor</db:code> will be called as functor(const QPermission &amp;permission), with permission describing the result of the request.</db:para>
<db:para>The <db:code role="parameter">functor</db:code> can be a free-standing or static member function:</db:para>
<db:programlisting language="cpp">qApp-&gt;requestPermission(QCameraPermission{}, &amp;permissionUpdated);
</db:programlisting>
<db:para>or a lambda:</db:para>
<db:programlisting language="cpp">qApp-&gt;requestPermission(QCameraPermission{}, [](const QPermission &amp;permission) {
});
</db:programlisting>
<db:para>If the user explicitly grants the application the requested <db:code role="parameter">permission</db:code>, or the <db:code role="parameter">permission</db:code> is known to not require user authorization on the given platform, the status will be <db:link xlink:href="qt.xml#PermissionStatus-enum">Qt::PermissionStatus::Granted</db:link>.</db:para>
<db:para>If the user explicitly denies the application the requested <db:code role="parameter">permission</db:code>, or the <db:code role="parameter">permission</db:code> is known to not be accessible or applicable to applications on the given platform, the status will be <db:link xlink:href="qt.xml#PermissionStatus-enum">Qt::PermissionStatus::Denied</db:link>.</db:para>
<db:para>The result of a request will never be <db:link xlink:href="qt.xml#PermissionStatus-enum">Qt::PermissionStatus::Undetermined</db:link>.</db:para>
<db:note>
<db:para>Permissions can only be requested from the main thread.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#checkPermission">checkPermission</db:link>()</db:member>
<db:member><db:link xlink:href="permissions.xml">Application Permissions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestPermission-1">
<db:title>[since 6.5] void QCoreApplication::requestPermission(const QPermission &amp;<db:emphasis>permission</db:emphasis>, const QObject *<db:emphasis>context</db:emphasis>, Functor <db:emphasis>functor</db:emphasis>)</db:title>
<db:para>Requests the given <db:code role="parameter">permission</db:code>, in the context of <db:code role="parameter">context</db:code>.</db:para>
<db:para>When the request is ready, <db:code role="parameter">functor</db:code> will be called as functor(const QPermission &amp;permission), with permission describing the result of the request.</db:para>
<db:para>The <db:code role="parameter">functor</db:code> can be a free-standing or static member function:</db:para>
<db:programlisting language="cpp">qApp-&gt;requestPermission(QCameraPermission{}, context, &amp;permissionUpdated);
</db:programlisting>
<db:para>a lambda:</db:para>
<db:programlisting language="cpp">qApp-&gt;requestPermission(QCameraPermission{}, context, [](const QPermission &amp;permission) {
});
</db:programlisting>
<db:para>or a slot in the <db:code role="parameter">context</db:code> object:</db:para>
<db:programlisting language="cpp">qApp-&gt;requestPermission(QCameraPermission{}, this, &amp;CamerWidget::permissionUpdated);
</db:programlisting>
<db:para>The <db:code role="parameter">functor</db:code> will be called in the thread of the <db:code role="parameter">context</db:code> object. If <db:code role="parameter">context</db:code> is destroyed before the request completes, the <db:code role="parameter">functor</db:code> will not be called.</db:para>
<db:para>If the user explicitly grants the application the requested <db:code role="parameter">permission</db:code>, or the <db:code role="parameter">permission</db:code> is known to not require user authorization on the given platform, the status will be <db:link xlink:href="qt.xml#PermissionStatus-enum">Qt::PermissionStatus::Granted</db:link>.</db:para>
<db:para>If the user explicitly denies the application the requested <db:code role="parameter">permission</db:code>, or the <db:code role="parameter">permission</db:code> is known to not be accessible or applicable to applications on the given platform, the status will be <db:link xlink:href="qt.xml#PermissionStatus-enum">Qt::PermissionStatus::Denied</db:link>.</db:para>
<db:para>The result of a request will never be <db:link xlink:href="qt.xml#PermissionStatus-enum">Qt::PermissionStatus::Undetermined</db:link>.</db:para>
<db:note>
<db:para>Permissions can only be requested from the main thread.</db:para>
</db:note>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#checkPermission">checkPermission</db:link>()</db:member>
<db:member><db:link xlink:href="permissions.xml">Application Permissions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sendEvent">
<db:title>[static] bool QCoreApplication::sendEvent(QObject *<db:emphasis>receiver</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Sends event <db:code role="parameter">event</db:code> directly to receiver <db:code role="parameter">receiver</db:code>, using the <db:link xlink:href="qcoreapplication.xml#notify">notify</db:link>() function. Returns the value that was returned from the event handler.</db:para>
<db:para>The event is <db:emphasis>not</db:emphasis> deleted when the event has been sent. The normal approach is to create the event on the stack, for example:</db:para>
<db:programlisting language="cpp">QMouseEvent event(QEvent::MouseButtonPress, pos, 0, 0, 0);
QApplication::sendEvent(mainWindow, &amp;event);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#postEvent">postEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#notify">notify</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sendPostedEvents">
<db:title>[static] void QCoreApplication::sendPostedEvents(QObject *<db:emphasis>receiver</db:emphasis> = nullptr, int <db:emphasis>event_type</db:emphasis> = 0)</db:title>
<db:para>Immediately dispatches all events which have been previously queued with <db:link xlink:href="qcoreapplication.xml#postEvent">QCoreApplication::postEvent</db:link>() and which are for the object <db:code role="parameter">receiver</db:code> and have the event type <db:code role="parameter">event_type</db:code>.</db:para>
<db:para>Events from the window system are <db:emphasis>not</db:emphasis> dispatched by this function, but by <db:link xlink:href="qcoreapplication.xml#processEvents">processEvents</db:link>().</db:para>
<db:para>If <db:code role="parameter">receiver</db:code> is nullptr, the events of <db:code role="parameter">event_type</db:code> are sent for all objects. If <db:code role="parameter">event_type</db:code> is 0, all the events are sent for <db:code role="parameter">receiver</db:code>.</db:para>
<db:note>
<db:para>This method must be called from the thread in which its <db:link xlink:href="qobject.xml">QObject</db:link> parameter, <db:code role="parameter">receiver</db:code>, lives.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#postEvent">postEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEventDispatcher">
<db:title>[static] void QCoreApplication::setEventDispatcher(QAbstractEventDispatcher *<db:emphasis>eventDispatcher</db:emphasis>)</db:title>
<db:para>Sets the event dispatcher for the main thread to <db:code role="parameter">eventDispatcher</db:code>. This is only possible as long as there is no event dispatcher installed yet. That is, before <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> has been instantiated. This method takes ownership of the object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#eventDispatcher">eventDispatcher</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLibraryPaths">
<db:title>[static] void QCoreApplication::setLibraryPaths(const QStringList &amp;<db:emphasis>paths</db:emphasis>)</db:title>
<db:para>Sets the list of directories to search when loading plugins with <db:link xlink:href="qlibrary.xml">QLibrary</db:link> to <db:code role="parameter">paths</db:code>. All existing paths will be deleted and the path list will consist of the paths given in <db:code role="parameter">paths</db:code> and the path to the application.</db:para>
<db:para>The library paths are reset to the default when an instance of <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> is destructed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#libraryPaths">libraryPaths</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#addLibraryPath">addLibraryPath</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#removeLibraryPath">removeLibraryPath</db:link>()</db:member>
<db:member><db:link xlink:href="qlibrary.xml">QLibrary</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startingUp">
<db:title>[static] bool QCoreApplication::startingUp()</db:title>
<db:para>Returns true if an application object has not been created yet; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#closingDown">closingDown</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate">
<db:title>[static] QString QCoreApplication::translate(const char *<db:emphasis>context</db:emphasis>, const char *<db:emphasis>sourceText</db:emphasis>, const char *<db:emphasis>disambiguation</db:emphasis> = nullptr, int <db:emphasis>n</db:emphasis> = -1)</db:title>
<db:para>Returns the translation text for <db:code role="parameter">sourceText</db:code>, by querying the installed translation files. The translation files are searched from the most recently installed file back to the first installed file.</db:para>
<db:para><db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>() provides this functionality more conveniently.</db:para>
<db:para><db:code role="parameter">context</db:code> is typically a class name (e.g., &quot;MyDialog&quot;) and <db:code role="parameter">sourceText</db:code> is either English text or a short identifying text.</db:para>
<db:para><db:code role="parameter">disambiguation</db:code> is an identifying string, for when the same <db:code role="parameter">sourceText</db:code> is used in different roles within the same context. By default, it is nullptr.</db:para>
<db:para>See the <db:link xlink:href="qtranslator.xml">QTranslator</db:link> and <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>() documentation for more information about contexts, disambiguations and comments.</db:para>
<db:para><db:code role="parameter">n</db:code> is used in conjunction with %n to support plural forms. See <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>() for details.</db:para>
<db:para>If none of the translation files contain a translation for <db:code role="parameter">sourceText</db:code> in <db:code role="parameter">context</db:code>, this function returns a <db:link xlink:href="qstring.xml">QString</db:link> equivalent of <db:code role="parameter">sourceText</db:code>.</db:para>
<db:para>This function is not virtual. You can use alternative translation techniques by subclassing <db:link xlink:href="qtranslator.xml">QTranslator</db:link>.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#installTranslator">installTranslator</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#removeTranslator">removeTranslator</db:link>()</db:member>
<db:member><db:link xlink:href="qcoreapplication.xml#internationalization-and-translations">Internationalization and Translations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qAddPostRoutine">
<db:title>void qAddPostRoutine(QtCleanUpFunction <db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>Adds a global routine that will be called from the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> destructor. This function is normally used to add cleanup routines for program-wide functionality.</db:para>
<db:para>The cleanup routines are called in the reverse order of their addition.</db:para>
<db:para>The function specified by <db:code role="parameter">ptr</db:code> should take no arguments and should return nothing. For example:</db:para>
<db:programlisting language="cpp">static int *global_ptr = nullptr;

static void cleanup_ptr()
{
    delete [] global_ptr;
    global_ptr = nullptr;
}

void init_ptr()
{
    global_ptr = new int[100];      // allocate data
    qAddPostRoutine(cleanup_ptr);   // delete later
}
</db:programlisting>
<db:para>Note that for an application- or module-wide cleanup, qAddPostRoutine() is often not suitable. For example, if the program is split into dynamically loaded modules, the relevant module may be unloaded long before the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> destructor is called. In such cases, if using qAddPostRoutine() is still desirable, <db:link xlink:href="qcoreapplication.xml#qRemovePostRoutine">qRemovePostRoutine</db:link>() can be used to prevent a routine from being called by the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> destructor. For example, if that routine was called before the module was unloaded.</db:para>
<db:para>For modules and libraries, using a reference-counted initialization manager or Qt's parent-child deletion mechanism may be better. Here is an example of a private class that uses the parent-child mechanism to call a cleanup function at the right time:</db:para>
<db:programlisting language="cpp">class MyPrivateInitStuff : public QObject
{
public:
    static MyPrivateInitStuff *initStuff(QObject *parent)
    {
        if (!p)
            p = new MyPrivateInitStuff(parent);
        return p;
    }

    ~MyPrivateInitStuff()
    {
        // cleanup goes here
    }

private:
    MyPrivateInitStuff(QObject *parent)
        : QObject(parent)
    {
        // initialization goes here
    }

    MyPrivateInitStuff *p;
};
</db:programlisting>
<db:para>By selecting the right parent object, this can often be made to clean up the module's data at the right moment.</db:para>
<db:note>
<db:para>This function has been thread-safe since Qt 5.10.</db:para>
</db:note>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#qRemovePostRoutine">qRemovePostRoutine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qRemovePostRoutine">
<db:title>void qRemovePostRoutine(QtCleanUpFunction <db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>Removes the cleanup routine specified by <db:code role="parameter">ptr</db:code> from the list of routines called by the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> destructor. The routine must have been previously added to the list by a call to <db:link xlink:href="qcoreapplication.xml#qAddPostRoutine">qAddPostRoutine</db:link>(), otherwise this function has no effect.</db:para>
<db:note>
<db:para>This function has been thread-safe since Qt 5.10.</db:para>
</db:note>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoreapplication.xml#qAddPostRoutine">qAddPostRoutine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_COREAPP_STARTUP_FUNCTION">
<db:title>Q_COREAPP_STARTUP_FUNCTION(QtStartUpFunction <db:emphasis>ptr</db:emphasis>)</db:title>
<db:para>Adds a global function that will be called from the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> constructor. This macro is normally used to initialize libraries for program-wide functionality, without requiring the application to call into the library for initialization.</db:para>
<db:para>The function specified by <db:code role="parameter">ptr</db:code> should take no arguments and should return nothing. For example:</db:para>
<db:programlisting language="cpp">// Called once QCoreApplication exists
static void preRoutineMyDebugTool()
{
    MyDebugTool* tool = new MyDebugTool(QCoreApplication::instance());
    QCoreApplication::instance()-&gt;installEventFilter(tool);
}

Q_COREAPP_STARTUP_FUNCTION(preRoutineMyDebugTool)
</db:programlisting>
<db:para>Note that the startup function will run at the end of the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> constructor, before any GUI initialization. If GUI code is required in the function, use a timer (or a queued invocation) to perform the initialization later on, from the event loop.</db:para>
<db:para>If <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> is deleted and another <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> is created, the startup function will be invoked again.</db:para>
<db:note>
<db:para>This macro is not suitable for use in library code that is then statically linked into an application since the function may not be called at all due to being eliminated by the linker.</db:para>
</db:note>
<db:note>
<db:para>This macro is reentrant.</db:para>
</db:note>
</db:section>
<db:section xml:id="Q_DECLARE_TR_FUNCTIONS">
<db:title>Q_DECLARE_TR_FUNCTIONS(<db:emphasis>context</db:emphasis>)</db:title>
<db:para>The Q_DECLARE_TR_FUNCTIONS() macro declares and implements the translation function tr() with this signature:</db:para>
<db:programlisting language="cpp">static inline QString tr(const char *sourceText,
                         const char *comment = nullptr);
</db:programlisting>
<db:para>This macro is useful if you want to use <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>() in classes that don't inherit from <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:para>Q_DECLARE_TR_FUNCTIONS() must appear at the very top of the class definition (before the first public: or protected:). For example:</db:para>
<db:programlisting language="cpp">class MyMfcView : public CView
{
    Q_DECLARE_TR_FUNCTIONS(MyMfcView)

public:
    MyMfcView();
    ...
};
</db:programlisting>
<db:para>The <db:code role="parameter">context</db:code> parameter is normally the class name, but it can be any text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link></db:member>
<db:member><db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
