<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Sensors C++ Overview</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Explains how to use the Qt Sensors C++ API.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="sensor-types">
<db:title>Sensor Types</db:title>
<db:para>On a device there can be many types of sensors. Not all of the types that the Qt Sensors API supports may be available. There may also be types available that are not defined in the Qt Sensors API. The types of sensors available on a device is found using the <db:link xlink:href="qsensor.xml#sensorTypes">QSensor::sensorTypes</db:link>() function.</db:para>
<db:para>For a list of built-in sensor types, see the <db:link xlink:href="qtsensors-cpp.xml#sensor-classes">Sensor Classes</db:link> section below.</db:para>
</db:section>
<db:section xml:id="common-conventions">
<db:title>Common Conventions</db:title>
<db:para>Unless specified otherwise, Qt Sensors uses the <db:link xlink:href="http://en.wikipedia.org/wiki/Cartesian_coordinate_system">Right Hand Cartesian coordinate system</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensors-coordinates.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>To allow for measurements in all 6 directions, negative values are used.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensors-coordinates2.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>Where rotation around an axis is used, the rotation shall be expressed as a Right Hand rotation.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensors-coordinates3.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>In general, sensor data is oriented relative to <db:link xlink:href="qscreen.xml#nativeOrientation-prop">QScreen::nativeOrientation</db:link>, that is to the top of the device when the device is held in its natural orientation (normally when the device logo appears the right side up). If values are to be displayed on the screen, the values may need to be transformed so that they match the user interface orientation. A sensor may define its data as being oriented to the UI. This will be noted in the documentation for the sensor.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensors-sides2.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="using-a-sensor">
<db:title>Using a Sensor</db:title>
<db:para>The life cycle of a <db:link xlink:href="qsensor.xml">QSensor</db:link> is typically:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Create an instance of <db:link xlink:href="qsensor.xml">QSensor</db:link> or one of its sub-classes on the stack or heap.</db:para>
</db:listitem>
<db:listitem>
<db:para>Setup as required by the application.</db:para>
</db:listitem>
<db:listitem>
<db:para>Start receiving values.</db:para>
</db:listitem>
<db:listitem>
<db:para>Sensor data is used by the application.</db:para>
</db:listitem>
<db:listitem>
<db:para>Stop receiving values.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Here is an example of creating a sensor on the heap and on the stack.</db:para>
<db:programlisting language="cpp">// On the heap (deleted when this object is deleted)
QAccelerometer *sensor = new QAccelerometer(this);

// On the stack (deleted when the current scope ends)
QOrientationSensor orient_sensor;
</db:programlisting>
</db:section>
<db:section xml:id="accessing-sensor-data-in-a-generic-fashion">
<db:title>Accessing Sensor Data in a Generic Fashion</db:title>
<db:para>The preferred way to deal with sensor data is via the <db:link xlink:href="qtsensors-cpp.xml#reading-classes">Reading Classes</db:link>. However, sometimes this may not be possible. For example, you may be deploying an application to a device that has a new sensor type but no C++ header describing the reading class is available.</db:para>
<db:para>Thanks to Qt's property system you can still access the sensor data. You need to know 3 pieces of information in order to do this:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The sensor type.</db:para>
</db:listitem>
<db:listitem>
<db:para>The property name or index.</db:para>
</db:listitem>
<db:listitem>
<db:para>The property type or a comparable type.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, here is an example of how you can access a property of the accelerometer. This code does not require any compile-time links to <db:link xlink:href="qaccelerometer.xml">QAccelerometer</db:link> or <db:link xlink:href="qaccelerometerreading.xml">QAccelerometerReading</db:link>.</db:para>
<db:programlisting language="cpp">// start the sensor
QSensor sensor(&quot;QAccelerometer&quot;);
sensor.start();

// later
QSensorReading *reading = sensor.reading();
qreal x = reading-&amp;gt;property(&quot;x&quot;).value&amp;lt;qreal&amp;gt;();
qreal y = reading-&amp;gt;value(1).value&amp;lt;qreal&amp;gt;();
</db:programlisting>
<db:para>You can discover all of this information at runtime too. The sensor_explorer example shows you information about available sensors.</db:para>
</db:section>
<db:section xml:id="front-end-back-end">
<db:title>Front End, Back End</db:title>
<db:para>The Qt Sensors API has a front end, for application developers to use and a back end, where device implementors write code to access their hardware. As an application developer you do not need to access the back end though it may be useful to understand how it works.</db:para>
<db:para>Commands from the application are delivered through <db:link xlink:href="qsensor.xml">QSensor</db:link> and then down to the device plugin. Data comes back through the <db:link xlink:href="qsensorreading.xml">QSensorReading</db:link> class.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensors-overview.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>More information about the back end can be found in <db:link xlink:href="sensors-backend-topics.xml">Qt Sensors Backend</db:link>.</db:para>
</db:section>
<db:section xml:id="main-classes">
<db:title>Main Classes</db:title>
<db:para>The primary classes that make up the Qt Sensors API.</db:para>
<db:variablelist role="sensors_main">
<db:varlistentry>
<db:term><db:link xlink:href="qsensor.xml" xlink:role="class">QSensor</db:link></db:term>
<db:listitem>
<db:para>The QSensor class represents a single hardware sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsensorfilter.xml" xlink:role="class">QSensorFilter</db:link></db:term>
<db:listitem>
<db:para>The QSensorFilter class provides an efficient callback facility for asynchronous notifications of sensor changes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsensorreading.xml" xlink:role="class">QSensorReading</db:link></db:term>
<db:listitem>
<db:para>The QSensorReading class holds the readings from the sensor.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="reading-classes">
<db:title>Reading Classes</db:title>
<db:para>The best way to access sensor data is via one of these classes.</db:para>
<db:variablelist role="sensors_reading">
<db:varlistentry>
<db:term><db:link xlink:href="qaccelerometerreading.xml" xlink:role="class">QAccelerometerReading</db:link></db:term>
<db:listitem>
<db:para>The QAccelerometerReading class reports on linear acceleration along the X, Y and Z axes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaltimeterreading.xml" xlink:role="class">QAltimeterReading</db:link></db:term>
<db:listitem>
<db:para>The QAltimeterReading class holds readings from the altimeter sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qambientlightreading.xml" xlink:role="class">QAmbientLightReading</db:link></db:term>
<db:listitem>
<db:para>The QAmbientLightReading class represents one reading from the ambient light sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qambienttemperaturereading.xml" xlink:role="class">QAmbientTemperatureReading</db:link></db:term>
<db:listitem>
<db:para>The QAmbientTemperatureReading class holds readings of the ambient temperature.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcompassreading.xml" xlink:role="class">QCompassReading</db:link></db:term>
<db:listitem>
<db:para>The QCompassReading class represents one reading from a compass.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qdistancereading.xml" xlink:role="class">QDistanceReading</db:link></db:term>
<db:listitem>
<db:para>The QDistanceReading class holds distance reading in cm from the proximity sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgyroscopereading.xml" xlink:role="class">QGyroscopeReading</db:link></db:term>
<db:listitem>
<db:para>The QGyroscopeReading class represents one reading from the gyroscope sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qholsterreading.xml" xlink:role="class">QHolsterReading</db:link></db:term>
<db:listitem>
<db:para>The QHolsterReading class holds readings from the holster sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qhumidityreading.xml" xlink:role="class">QHumidityReading</db:link></db:term>
<db:listitem>
<db:para>The QHumidityReading class holds readings from the humidity sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qirproximityreading.xml" xlink:role="class">QIRProximityReading</db:link></db:term>
<db:listitem>
<db:para>The QIRProximityReading class holds readings from the IR proximity sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlidreading.xml" xlink:role="class">QLidReading</db:link></db:term>
<db:listitem>
<db:para>The QLidReading class holds readings from the Lid sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlightreading.xml" xlink:role="class">QLightReading</db:link></db:term>
<db:listitem>
<db:para>The QLightReading class represents one reading from the light sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmagnetometerreading.xml" xlink:role="class">QMagnetometerReading</db:link></db:term>
<db:listitem>
<db:para>The QMagnetometerReading class represents one reading from the magnetometer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qorientationreading.xml" xlink:role="class">QOrientationReading</db:link></db:term>
<db:listitem>
<db:para>The QOrientationReading class represents one reading from the orientation sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qpressurereading.xml" xlink:role="class">QPressureReading</db:link></db:term>
<db:listitem>
<db:para>The QPressureReading class holds readings from the pressure sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qproximityreading.xml" xlink:role="class">QProximityReading</db:link></db:term>
<db:listitem>
<db:para>The QProximityReading class represents one reading from the proximity sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qrotationreading.xml" xlink:role="class">QRotationReading</db:link></db:term>
<db:listitem>
<db:para>The QRotationReading class represents one reading from the rotation sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtapreading.xml" xlink:role="class">QTapReading</db:link></db:term>
<db:listitem>
<db:para>The QTapReading class represents one reading from the tap sensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtiltreading.xml" xlink:role="class">QTiltReading</db:link></db:term>
<db:listitem>
<db:para>The QTiltReading class holds readings from the tilt sensor.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="sensor-classes">
<db:title>Sensor Classes</db:title>
<db:para>These classes provide convenience wrappers that reduce the need for casting. Each of these classes represents a sensor type that the Qt Sensors API knows about. Note that additional types may be made available at run-time. See <db:link xlink:href="qtsensors-cpp.xml#sensor-types">Sensor Types</db:link> for more information.</db:para>
<db:variablelist role="sensors_type">
<db:varlistentry>
<db:term><db:link xlink:href="qaccelerometer.xml" xlink:role="class">QAccelerometer</db:link></db:term>
<db:listitem>
<db:para>The QAccelerometer class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaltimeter.xml" xlink:role="class">QAltimeter</db:link></db:term>
<db:listitem>
<db:para>The QAltimeter class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qambientlightsensor.xml" xlink:role="class">QAmbientLightSensor</db:link></db:term>
<db:listitem>
<db:para>The QAmbientLightSensor class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qambienttemperaturesensor.xml" xlink:role="class">QAmbientTemperatureSensor</db:link></db:term>
<db:listitem>
<db:para>The QAmbientTemperatureSensor class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcompass.xml" xlink:role="class">QCompass</db:link></db:term>
<db:listitem>
<db:para>The QCompass class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qdistancesensor.xml" xlink:role="class">QDistanceSensor</db:link></db:term>
<db:listitem>
<db:para>The QDistanceSensor class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgyroscope.xml" xlink:role="class">QGyroscope</db:link></db:term>
<db:listitem>
<db:para>The QGyroscope class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qholstersensor.xml" xlink:role="class">QHolsterSensor</db:link></db:term>
<db:listitem>
<db:para>The QHolsterSensor class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qhumiditysensor.xml" xlink:role="class">QHumiditySensor</db:link></db:term>
<db:listitem>
<db:para>The QHumiditySensor class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qirproximitysensor.xml" xlink:role="class">QIRProximitySensor</db:link></db:term>
<db:listitem>
<db:para>The QIRProximitySensor class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlidsensor.xml" xlink:role="class">QLidSensor</db:link></db:term>
<db:listitem>
<db:para>The QLidSensor class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlightsensor.xml" xlink:role="class">QLightSensor</db:link></db:term>
<db:listitem>
<db:para>The QLightSensor class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmagnetometer.xml" xlink:role="class">QMagnetometer</db:link></db:term>
<db:listitem>
<db:para>The QMagnetometer class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qorientationsensor.xml" xlink:role="class">QOrientationSensor</db:link></db:term>
<db:listitem>
<db:para>The QOrientationSensor class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qpressuresensor.xml" xlink:role="class">QPressureSensor</db:link></db:term>
<db:listitem>
<db:para>The QPressureSensor class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qproximitysensor.xml" xlink:role="class">QProximitySensor</db:link></db:term>
<db:listitem>
<db:para>The QProximitySensor class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qrotationsensor.xml" xlink:role="class">QRotationSensor</db:link></db:term>
<db:listitem>
<db:para>The QRotationSensor class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtapsensor.xml" xlink:role="class">QTapSensor</db:link></db:term>
<db:listitem>
<db:para>The QTapSensor class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtiltsensor.xml" xlink:role="class">QTiltSensor</db:link></db:term>
<db:listitem>
<db:para>The QTiltSensor class is a convenience wrapper around QSensor.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="filter-classes">
<db:title>Filter Classes</db:title>
<db:para>As with the sensor classes, these provide convenience wrappers that reduce the need for casting.</db:para>
<db:variablelist role="sensors_filter">
<db:varlistentry>
<db:term><db:link xlink:href="qaccelerometerfilter.xml" xlink:role="class">QAccelerometerFilter</db:link></db:term>
<db:listitem>
<db:para>The QAccelerometerFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qaltimeterfilter.xml" xlink:role="class">QAltimeterFilter</db:link></db:term>
<db:listitem>
<db:para>The QAltimeterFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qambientlightfilter.xml" xlink:role="class">QAmbientLightFilter</db:link></db:term>
<db:listitem>
<db:para>The QAmbientLightFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qambienttemperaturefilter.xml" xlink:role="class">QAmbientTemperatureFilter</db:link></db:term>
<db:listitem>
<db:para>The QAmbientTemperatureFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcompassfilter.xml" xlink:role="class">QCompassFilter</db:link></db:term>
<db:listitem>
<db:para>The QCompassFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qdistancefilter.xml" xlink:role="class">QDistanceFilter</db:link></db:term>
<db:listitem>
<db:para>The QDistanceFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qgyroscopefilter.xml" xlink:role="class">QGyroscopeFilter</db:link></db:term>
<db:listitem>
<db:para>The QGyroscopeFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qholsterfilter.xml" xlink:role="class">QHolsterFilter</db:link></db:term>
<db:listitem>
<db:para>The QHolsterFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qhumidityfilter.xml" xlink:role="class">QHumidityFilter</db:link></db:term>
<db:listitem>
<db:para>The QHumidityFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qirproximityfilter.xml" xlink:role="class">QIRProximityFilter</db:link></db:term>
<db:listitem>
<db:para>The QIRProximityFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlidfilter.xml" xlink:role="class">QLidFilter</db:link></db:term>
<db:listitem>
<db:para>The QLidFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlightfilter.xml" xlink:role="class">QLightFilter</db:link></db:term>
<db:listitem>
<db:para>The QLightFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmagnetometerfilter.xml" xlink:role="class">QMagnetometerFilter</db:link></db:term>
<db:listitem>
<db:para>The QMagnetometerFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qorientationfilter.xml" xlink:role="class">QOrientationFilter</db:link></db:term>
<db:listitem>
<db:para>The QOrientationFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qpressurefilter.xml" xlink:role="class">QPressureFilter</db:link></db:term>
<db:listitem>
<db:para>The QPressureFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qproximityfilter.xml" xlink:role="class">QProximityFilter</db:link></db:term>
<db:listitem>
<db:para>The QProximityFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qrotationfilter.xml" xlink:role="class">QRotationFilter</db:link></db:term>
<db:listitem>
<db:para>The QRotationFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtapfilter.xml" xlink:role="class">QTapFilter</db:link></db:term>
<db:listitem>
<db:para>The QTapFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtiltfilter.xml" xlink:role="class">QTiltFilter</db:link></db:term>
<db:listitem>
<db:para>The QTiltFilter class is a convenience wrapper around QSensorFilter.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
