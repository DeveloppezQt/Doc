<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Settings Editor Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Settings Editor example shows how Qt's standard settings support is used in an application by providing an editor that enables the user to view the settings for installed applications, and modify those that can be edited.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;locationdialog.h&quot;

LocationDialog::LocationDialog(QWidget *parent)
    : QDialog(parent)
{
    formatComboBox = new QComboBox;
    formatComboBox-&gt;addItem(tr(&quot;Native&quot;));
    formatComboBox-&gt;addItem(tr(&quot;INI&quot;));

    scopeComboBox = new QComboBox;
    scopeComboBox-&gt;addItem(tr(&quot;User&quot;));
    scopeComboBox-&gt;addItem(tr(&quot;System&quot;));

    organizationComboBox = new QComboBox;
    organizationComboBox-&gt;addItem(tr(&quot;QtProject&quot;));
    organizationComboBox-&gt;setEditable(true);

    applicationComboBox = new QComboBox;
    applicationComboBox-&gt;addItem(tr(&quot;Any&quot;));
    applicationComboBox-&gt;addItem(tr(&quot;Qt Creator&quot;));
    applicationComboBox-&gt;addItem(tr(&quot;Application Example&quot;));
    applicationComboBox-&gt;addItem(tr(&quot;Assistant&quot;));
    applicationComboBox-&gt;addItem(tr(&quot;Designer&quot;));
    applicationComboBox-&gt;addItem(tr(&quot;Linguist&quot;));
    applicationComboBox-&gt;setEditable(true);
    applicationComboBox-&gt;setCurrentIndex(1);

    formatLabel = new QLabel(tr(&quot;&amp;Format:&quot;));
    formatLabel-&gt;setBuddy(formatComboBox);

    scopeLabel = new QLabel(tr(&quot;&amp;Scope:&quot;));
    scopeLabel-&gt;setBuddy(scopeComboBox);

    organizationLabel = new QLabel(tr(&quot;&amp;Organization:&quot;));
    organizationLabel-&gt;setBuddy(organizationComboBox);

    applicationLabel = new QLabel(tr(&quot;&amp;Application:&quot;));
    applicationLabel-&gt;setBuddy(applicationComboBox);

    locationsGroupBox = new QGroupBox(tr(&quot;Setting Locations&quot;));

    QStringList labels;
    labels &lt;&lt; tr(&quot;Location&quot;) &lt;&lt; tr(&quot;Access&quot;);

    locationsTable = new QTableWidget;
    locationsTable-&gt;setSelectionMode(QAbstractItemView::SingleSelection);
    locationsTable-&gt;setSelectionBehavior(QAbstractItemView::SelectRows);
    locationsTable-&gt;setEditTriggers(QAbstractItemView::NoEditTriggers);
    locationsTable-&gt;setColumnCount(2);
    locationsTable-&gt;setHorizontalHeaderLabels(labels);
    locationsTable-&gt;horizontalHeader()-&gt;setSectionResizeMode(0, QHeaderView::Stretch);
    locationsTable-&gt;horizontalHeader()-&gt;resizeSection(1, 180);
    connect(locationsTable, &amp;QTableWidget::itemActivated, this, &amp;LocationDialog::itemActivated);

    buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel);

    typedef void (QComboBox::*QComboIntSignal)(int);
    connect(formatComboBox, static_cast&lt;QComboIntSignal&gt;(&amp;QComboBox::activated),
            this, &amp;LocationDialog::updateLocationsTable);
    connect(scopeComboBox, static_cast&lt;QComboIntSignal&gt;(&amp;QComboBox::activated),
            this, &amp;LocationDialog::updateLocationsTable);
    connect(organizationComboBox-&gt;lineEdit(),
            &amp;QLineEdit::editingFinished,
            this, &amp;LocationDialog::updateLocationsTable);
    connect(applicationComboBox-&gt;lineEdit(),
            &amp;QLineEdit::editingFinished,
            this, &amp;LocationDialog::updateLocationsTable);
    connect(applicationComboBox, static_cast&lt;QComboIntSignal&gt;(&amp;QComboBox::activated),
            this, &amp;LocationDialog::updateLocationsTable);
    connect(buttonBox, &amp;QDialogButtonBox::accepted, this, &amp;QDialog::accept);
    connect(buttonBox, &amp;QDialogButtonBox::rejected, this, &amp;QDialog::reject);

    QVBoxLayout *locationsLayout = new QVBoxLayout(locationsGroupBox);
    locationsLayout-&gt;addWidget(locationsTable);

    QGridLayout *mainLayout = new QGridLayout(this);
    mainLayout-&gt;addWidget(formatLabel, 0, 0);
    mainLayout-&gt;addWidget(formatComboBox, 0, 1);
    mainLayout-&gt;addWidget(scopeLabel, 1, 0);
    mainLayout-&gt;addWidget(scopeComboBox, 1, 1);
    mainLayout-&gt;addWidget(organizationLabel, 2, 0);
    mainLayout-&gt;addWidget(organizationComboBox, 2, 1);
    mainLayout-&gt;addWidget(applicationLabel, 3, 0);
    mainLayout-&gt;addWidget(applicationComboBox, 3, 1);
    mainLayout-&gt;addWidget(locationsGroupBox, 4, 0, 1, 2);
    mainLayout-&gt;addWidget(buttonBox, 5, 0, 1, 2);

    updateLocationsTable();

    setWindowTitle(tr(&quot;Open Application Settings&quot;));
    resize(650, 400);
}

QSettings::Format LocationDialog::format() const
{
    if (formatComboBox-&gt;currentIndex() == 0)
        return QSettings::NativeFormat;
    else
        return QSettings::IniFormat;
}

QSettings::Scope LocationDialog::scope() const
{
    if (scopeComboBox-&gt;currentIndex() == 0)
        return QSettings::UserScope;
    else
        return QSettings::SystemScope;
}

QString LocationDialog::organization() const
{
    return organizationComboBox-&gt;currentText();
}

QString LocationDialog::application() const
{
    if (applicationComboBox-&gt;currentText() == tr(&quot;Any&quot;))
        return QString();
    else
        return applicationComboBox-&gt;currentText();
}

void LocationDialog::itemActivated(QTableWidgetItem *)
{
    buttonBox-&gt;button(QDialogButtonBox::Ok)-&gt;animateClick();
}

void LocationDialog::updateLocationsTable()
{
    locationsTable-&gt;setUpdatesEnabled(false);
    locationsTable-&gt;setRowCount(0);

    for (int i = 0; i &lt; 2; ++i) {
        if (i == 0 &amp;&amp; scope() == QSettings::SystemScope)
            continue;

        QSettings::Scope actualScope = (i == 0) ? QSettings::UserScope
                                                : QSettings::SystemScope;
        for (int j = 0; j &lt; 2; ++j) {
            if (j == 0 &amp;&amp; application().isEmpty())
                continue;

            QString actualApplication;
            if (j == 0)
                actualApplication = application();
            QSettings settings(format(), actualScope, organization(),
                               actualApplication);

            int row = locationsTable-&gt;rowCount();
            locationsTable-&gt;setRowCount(row + 1);

            QTableWidgetItem *item0 = new QTableWidgetItem(QDir::toNativeSeparators(settings.fileName()));

            QTableWidgetItem *item1 = new QTableWidgetItem;
            bool disable = (settings.childKeys().isEmpty()
                            &amp;&amp; settings.childGroups().isEmpty());

            if (row == 0) {
                if (settings.isWritable()) {
                    item1-&gt;setText(tr(&quot;Read-write&quot;));
                    disable = false;
                } else {
                    item1-&gt;setText(tr(&quot;Read-only&quot;));
                }
                buttonBox-&gt;button(QDialogButtonBox::Ok)-&gt;setDisabled(disable);
            } else {
                item1-&gt;setText(tr(&quot;Read-only fallback&quot;));
            }

            if (disable) {
                item0-&gt;setFlags(item0-&gt;flags() &amp; ~Qt::ItemIsEnabled);
                item1-&gt;setFlags(item1-&gt;flags() &amp; ~Qt::ItemIsEnabled);
            }

            locationsTable-&gt;setItem(row, 0, item0);
            locationsTable-&gt;setItem(row, 1, item1);
        }
    }
    locationsTable-&gt;setUpdatesEnabled(true);
}

</db:programlisting>
</db:article>
