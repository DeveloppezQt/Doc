<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTaskBuilder Class</db:title>
<db:subtitle>template &lt;typename Task, typename Args&gt; class QtConcurrent::QTaskBuilder</db:subtitle>
<db:productname>QtConcurrent</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Concurrent Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtconcurrent-qtaskbuilder.xml">QTaskBuilder</db:link> class is used for adjusting task parameters.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTaskBuilder</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Concurrent)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Concurrent)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += concurrent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTaskBuilder is part of <db:simplelist><db:member>thread</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>It's not possible to create an object of this class manually. See <db:link xlink:href="qtconcurrenttask.xml">Concurrent Task</db:link> for more details and usage examples.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="onThreadPool">
<db:title>QTaskBuilder&lt;Task, Args...&gt; &amp;QTaskBuilder::onThreadPool(QThreadPool &amp;<db:emphasis>newThreadPool</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTaskBuilder&lt;Task, Args...&gt; &amp;</db:type>
<db:methodname>onThreadPool</db:methodname>
<db:methodparam>
<db:type>QThreadPool &amp;</db:type>
<db:parameter>newThreadPool</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTaskBuilder&lt;Task, Args...&gt; &amp; onThreadPool(QThreadPool &amp;newThreadPool)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the thread pool <db:code role="parameter">newThreadPool</db:code> that the task will be invoked on.</db:para>
</db:section>
<db:section xml:id="spawn">
<db:title>QFuture&lt;QtConcurrent::InvokeResultType&gt; QTaskBuilder::spawn()</db:title>
<db:methodsynopsis>
<db:type>QFuture&lt;QtConcurrent::InvokeResultType&gt;</db:type>
<db:methodname>spawn</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFuture&lt;QtConcurrent::InvokeResultType&gt; spawn()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Runs the task in a separate thread and returns a future object immediately. This is a non-blocking call. The task might not start immediately.</db:para>
</db:section>
<db:section xml:id="spawn-1">
<db:title>void QTaskBuilder::spawn(<db:emphasis>QtConcurrent::FutureResult</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>spawn</db:methodname>
<db:methodparam>
<db:type>QtConcurrent::FutureResult</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void spawn(QtConcurrent::FutureResult)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Runs the task in a separate thread. This is a non-blocking call. The task might not start immediately.</db:para>
</db:section>
<db:section xml:id="withArguments">
<db:title>QTaskBuilder&lt;Task, ExtraArgs...&gt; QTaskBuilder::withArguments(ExtraArgs &amp;&amp;... <db:emphasis>args</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTaskBuilder&lt;Task, ExtraArgs...&gt;</db:type>
<db:methodname>withArguments</db:methodname>
<db:methodparam>
<db:type>ExtraArgs &amp;&amp;...</db:type>
<db:parameter>args</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTaskBuilder&lt;Task, ExtraArgs...&gt; withArguments(ExtraArgs &amp;&amp;... args)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the arguments <db:code role="parameter">args</db:code> the task will be invoked with. The code is ill-formed (causes compilation errors) if:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>This function is invoked more than once.</db:para>
</db:listitem>
<db:listitem>
<db:para>The arguments count is zero.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="withPriority">
<db:title>QTaskBuilder&lt;Task, Args...&gt; &amp;QTaskBuilder::withPriority(int <db:emphasis>newPriority</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTaskBuilder&lt;Task, Args...&gt; &amp;</db:type>
<db:methodname>withPriority</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>newPriority</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTaskBuilder&lt;Task, Args...&gt; &amp; withPriority(int newPriority)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the priority <db:code role="parameter">newPriority</db:code> that the task will be invoked with.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="InvokeResultType-typedef">
<db:title>[alias] InvokeResultType</db:title>
<db:typedefsynopsis>
<db:typedefname>InvokeResultType</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The simplified definition of this type looks like this:</db:para>
<db:programlisting language="cpp">template &amp;lt;class Task, class ...Args&amp;gt;
using InvokeResultType = std::invoke_result_t&amp;lt;std::decay_t&amp;lt;Task&amp;gt;, std::decay_t&amp;lt;Args&amp;gt;...&amp;gt;;
</db:programlisting>
<db:para>The real implementation also contains a compile-time check for whether the task can be invoked with the specified arguments or not.</db:para>
</db:section>
</db:section>
</db:article>
