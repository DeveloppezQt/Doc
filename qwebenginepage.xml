<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEnginePage Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> class provides an object to view and edit web documents.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEnginePage</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webenginewidgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:emphasis>web engine page</db:emphasis> holds the contents of an HTML document, the history of navigated links, and actions.</db:para>
<db:para><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link>'s API is very similar to <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link>, as you are still provided with common functions like action() (known as pageAction() in <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link>), triggerAction(), and findText().</db:para>
<db:para>A page can be loaded using load() or <db:link xlink:href="qwebenginepage.xml#url-prop">setUrl</db:link>(). Alternatively, if you have the HTML content readily available, you can use setHtml(). The GET method is always used to load URLs.</db:para>
<db:para>The <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> class also offers methods to retrieve both the URL currently loaded by the page (see <db:link xlink:href="qwebenginepage.xml#url-prop">url</db:link>()) as well as the URL originally requested to be loaded (see <db:link xlink:href="qwebenginepage.xml#requestedUrl-prop">requestedUrl</db:link>()). These methods make possible the retrieval of the URL before and after a DNS resolution or a redirection occurs during the load process. The <db:link xlink:href="qwebenginepage.xml#requestedUrl-prop">requestedUrl</db:link>() also matches to the URL added to the page history (<db:link xlink:href="qwebenginehistory.xml">QWebEngineHistory</db:link>) if load is successful.</db:para>
<db:para>The title of an HTML page can be accessed with the <db:link xlink:href="qwebenginepage.xml#title-prop">title</db:link>() property. Additionally, a page may also specify an icon, which can be accessed using the <db:link xlink:href="qwebenginepage.xml#iconUrl-prop">iconUrl</db:link>() property. If the title or the icon changes, the corresponding titleChanged() and iconUrlChanged() signals will be emitted. The <db:link xlink:href="qwebenginepage.xml#zoomFactor-prop">zoomFactor</db:link>() property enables zooming the contents of the web page by a scale factor.</db:para>
<db:para>The loadStarted() signal is emitted when the page begins to load, whereas the loadProgress() signal is emitted whenever an element of the web page completes loading, such as an embedded image or a script. The loadFinished() signal is emitted when the page contents have been loaded completely, independent of script execution or page rendering. Its argument, either <db:code>true</db:code> or <db:code>false</db:code>, indicates whether or not the load operation succeeded.</db:para>
<db:para>An HTML document is loaded in a <db:emphasis>main frame</db:emphasis> within the web page. If it references <db:emphasis>child frames</db:emphasis> (as defined by the <db:code>&lt;frame&gt;</db:code> or <db:code>&lt;iframe&gt;</db:code> elements), they are considered part of the content. Child frames are individually accessible only through JavaScript.</db:para>
<db:para>Web sites define <db:emphasis>security origin</db:emphasis> for safely accessing each other's resources for client-side scripting or databases. An origin consist of a host name, a scheme, and a port number. For example, the sites <db:code>http://www.example.com/my/page.html</db:code> and <db:code>http://www.example.com/my/overview.html</db:code> are allowed to share the same database or access each other's documents when used in HTML frame sets and JavaScript. At the same time, <db:code>http://www.malicious.com/evil.html</db:code> is prevented from accessing the resources of <db:code>http://www.example.com/</db:code>, because they are of a different security origin. By default, local schemes like <db:code>file://</db:code> and <db:code>qrc://</db:code> are considered to be in the same security origin, and can access each other's resources. Local resources are by default restricted from accessing remote content, which means that <db:code>file://</db:code> will not be able to access <db:code>http://domain.com/foo.html</db:code>.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Feature-enum">
<db:title>enum QWebEnginePage::Feature</db:title>
<db:para>This enum describes the platform feature access categories that the user may be asked to grant or deny access to:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Geolocation</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Location hardware or service.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::MediaAudioCapture</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Audio capture devices, such as microphones.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::MediaVideoCapture</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Video devices, such as cameras.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::MediaAudioVideoCapture</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Both audio and video capture devices.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::MouseLock</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Mouse locking, which locks the mouse pointer to the web view and is typically used in games.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">featurePermissionRequested()</db:link></db:member>
<db:member><db:link xlink:href="">featurePermissionRequestCanceled()</db:link></db:member>
<db:member><db:link xlink:href="">setFeaturePermission()</db:link></db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#PermissionPolicy-enum">PermissionPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="FileSelectionMode-enum">
<db:title>enum QWebEnginePage::FileSelectionMode</db:title>
<db:para>This enum indicates whether the implementation of the chooseFiles() function should return only one file or may return multiple files:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::FileSelectOpen</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Return only one file name.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::FileSelectOpenMultiple</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Return multiple file names.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">chooseFiles()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="FindFlag-enum">
<db:title>enum QWebEnginePage::FindFlag</db:title>
<db:bridgehead renderas="sect2">flags QWebEnginePage::FindFlags</db:bridgehead>
<db:para>This enum describes the options available to the findText() function. The options can be OR-ed together from the following list:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::FindBackward</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Searches backwards instead of forwards.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::FindCaseSensitively</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>By default findText() works case insensitive. Specifying this option changes the behavior to a case sensitive find operation.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>FindFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;FindFlag&gt;. </db:code>It stores an OR combination of <db:code>FindFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="JavaScriptConsoleMessageLevel-enum">
<db:title>enum QWebEnginePage::JavaScriptConsoleMessageLevel</db:title>
<db:para>This enum describes the different severity levels a JavaScript console message can have:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::InfoMessageLevel</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The message is purely informative and can safely be ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::WarningMessageLevel</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The message informs about unexpected behavior or errors that may need attention.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ErrorMessageLevel</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The message indicates there has been an error.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="NavigationType-enum">
<db:title>enum QWebEnginePage::NavigationType</db:title>
<db:para>This enum describes the type of a navigation request:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NavigationTypeLinkClicked</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The navigation request resulted from a clicked link.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NavigationTypeTyped</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The navigation request resulted from an explicitly loaded URL.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NavigationTypeFormSubmitted</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The navigation request resulted from a form submission.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NavigationTypeBackForward</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The navigation request resulted from a back or forward action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NavigationTypeReload</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The navigation request resulted from a reload action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NavigationTypeOther</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The navigation request was triggered by other means not covered by the above.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">acceptNavigationRequest()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="PermissionPolicy-enum">
<db:title>enum QWebEnginePage::PermissionPolicy</db:title>
<db:para>This enum describes the permission policies that the user may set for data or device access:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::PermissionUnknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>It is unknown whether the user grants or denies permission.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::PermissionGrantedByUser</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The user has granted permission.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::PermissionDeniedByUser</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The user has denied permission.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">featurePermissionRequested()</db:link></db:member>
<db:member><db:link xlink:href="">featurePermissionRequestCanceled()</db:link></db:member>
<db:member><db:link xlink:href="">setFeaturePermission()</db:link></db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#Feature-enum">Feature</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="RenderProcessTerminationStatus-enum">
<db:title>[since 5.6] enum QWebEnginePage::RenderProcessTerminationStatus</db:title>
<db:para>This enum describes the status with which the render process terminated:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NormalTerminationStatus</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The render process terminated normally.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::AbnormalTerminationStatus</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The render process terminated with with a non-zero exit status.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::CrashedTerminationStatus</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The render process crashed, for example because of a segmentation fault.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::KilledTerminationStatus</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The render process was killed, for example by <db:code>SIGKILL</db:code> or task manager kill.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="WebAction-enum">
<db:title>enum QWebEnginePage::WebAction</db:title>
<db:para>This enum describes the types of action which can be performed on the web page.</db:para>
<db:para>Actions only have an effect when they are applicable. The availability of actions can be be determined by checking <db:link xlink:href="qaction.xml#enabled-prop">isEnabled</db:link>() on the action returned by action().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NoWebAction</db:code></db:para>
</db:td>
<db:td><db:code>- 1</db:code></db:td>
<db:td>
<db:para>No action is triggered.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Back</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Navigate back in the history of navigated links.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Forward</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Navigate forward in the history of navigated links.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Stop</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Stop loading the current page.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Reload</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Reload the current page.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ReloadAndBypassCache</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Reload the current page, but do not use any local cache.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Cut</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Cut the content currently selected into the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Copy</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Copy the content currently selected into the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Paste</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Paste content from the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Undo</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Undo the last editing action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Redo</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Redo the last editing action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::SelectAll</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Select all content.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::PasteAndMatchStyle</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Paste content from the clipboard with current style.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::OpenLinkInThisWindow</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Open the current link in the current window. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::OpenLinkInNewWindow</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Open the current link in a new window. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::OpenLinkInNewTab</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>Open the current link in a new tab. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::CopyLinkToClipboard</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>Copy the current link to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::CopyImageToClipboard</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>Copy the clicked image to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::CopyImageUrlToClipboard</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>Copy the clicked image's URL to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::CopyMediaUrlToClipboard</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td>
<db:para>Copy the hovered audio or video's URL to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ToggleMediaControls</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td>
<db:para>Toggle between showing and hiding the controls for the hovered audio or video element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ToggleMediaLoop</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td>
<db:para>Toggle whether the hovered audio or video should loop on completetion or not. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ToggleMediaPlayPause</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
<db:td>
<db:para>Toggle the play/pause state of the hovered audio or video element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ToggleMediaMute</db:code></db:para>
</db:td>
<db:td><db:code>24</db:code></db:td>
<db:td>
<db:para>Mute or unmute the hovered audio or video element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::DownloadLinkToDisk</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Download the current link to the disk. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::DownloadImageToDisk</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>Download the highlighted image to the disk. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::DownloadMediaToDisk</db:code></db:para>
</db:td>
<db:td><db:code>25</db:code></db:td>
<db:td>
<db:para>Download the hovered audio or video to the disk. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::InspectElement</db:code></db:para>
</db:td>
<db:td><db:code>26</db:code></db:td>
<db:td>
<db:para>Trigger any attached Web Inspector to inspect the highlighed element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ExitFullScreen</db:code></db:para>
</db:td>
<db:td><db:code>27</db:code></db:td>
<db:td>
<db:para>Exit the fullscreen mode. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::RequestClose</db:code></db:para>
</db:td>
<db:td><db:code>28</db:code></db:td>
<db:td>
<db:para>Request to close the web page. If defined, the <db:code>window.onbeforeunload</db:code> handler is run, and the user can confirm or reject to close the page. If the close request is confirmed, <db:code>windowCloseRequested</db:code> is emitted. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="WebWindowType-enum">
<db:title>enum QWebEnginePage::WebWindowType</db:title>
<db:para>This enum describes the types of window that can be created by the createWindow() function:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::WebBrowserWindow</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A complete web browser window.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::WebBrowserTab</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A web browser tab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::WebDialog</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A window without decoration.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="backgroundColor-prop">
<db:title>[since 5.6] backgroundColor : QColor</db:title>
<db:para>This property holds the page's background color behind the document's body.</db:para>
<db:para>You can set the background color to <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::transparent</db:link> or to a translucent color to see through the document, or you can set it to match your web content in a hybrid application to prevent the white flashes that may appear during loading.</db:para>
<db:para>The default value is white.</db:para>
<db:para>This property was introduced in Qt 5.6.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">backgroundColor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBackgroundColor</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="hasSelection-prop">
<db:title>[read-only] hasSelection : const bool</db:title>
<db:para>This property holds whether this page contains selected content or not.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasSelection</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">selectionChanged()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iconUrl-prop">
<db:title>[read-only] iconUrl : const QUrl</db:title>
<db:para>This property holds the URL of the icon associated with the page currently viewed.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">iconUrl</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">iconUrlChanged()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestedUrl-prop">
<db:title>[read-only] requestedUrl : const QUrl</db:title>
<db:para>This property holds the URL that was originally requested to be loaded by the page that is currently viewed</db:para>
<db:note>
<db:para>The URL may differ from the one returned by <db:link xlink:href="qwebenginepage.xml#url-prop">url</db:link>(), which is the actual URL that results from DNS resolution or redirection.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">requestedUrl</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#url-prop">url</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#url-prop">setUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedText-prop">
<db:title>[read-only] selectedText : const QString</db:title>
<db:para>This property holds the text currently selected</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">selectedText</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">selectionChanged()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title-prop">
<db:title>[read-only] title : const QString</db:title>
<db:para>This property holds the title of the page as defined by the HTML <db:code>&lt;title&gt;</db:code> element</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">title</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">titleChanged()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="url-prop">
<db:title>url : QUrl</db:title>
<db:para>This property holds the URL of the page currently viewed</db:para>
<db:para>Setting this property clears the view and loads the URL.</db:para>
<db:para>By default, this property contains an empty, invalid URL.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">url</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUrl</db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">urlChanged()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="zoomFactor-prop">
<db:title>zoomFactor : qreal</db:title>
<db:para>This property holds the zoom factor for the page content</db:para>
<db:para>Valid values are within the range from <db:code>0.25</db:code> to <db:code>5.0</db:code>. The default factor is <db:code>1.0</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">zoomFactor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setZoomFactor</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>factor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWebEnginePage">
<db:title>[since 5.5] QWebEnginePage::QWebEnginePage(QWebEngineProfile *<db:emphasis>profile</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs an empty web engine page in the web engine profile <db:code role="parameter">profile</db:code> with the parent <db:code role="parameter">parent</db:code>.</db:para>
<db:para>If the profile is not the default profile, the caller must ensure that the profile stays alive for as long as the page does.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual] bool QWebEnginePage::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="profile">
<db:title>[since 5.5] QWebEngineProfile *QWebEnginePage::profile() const</db:title>
<db:para>Returns the web engine profile the page belongs to.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="scripts">
<db:title>QWebEngineScriptCollection &amp;QWebEnginePage::scripts()</db:title>
<db:para>Returns the collection of scripts that are injected into the page.</db:para>
<db:para>In addition, a page might also execute scripts added through <db:link xlink:href="qwebengineprofile.xml#scripts">QWebEngineProfile::scripts</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescriptcollection.xml">QWebEngineScriptCollection</db:link></db:member>
<db:member><db:link xlink:href="qwebenginescript.xml">QWebEngineScript</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWebChannel">
<db:title>[since 5.5] void QWebEnginePage::setWebChannel(QWebChannel *<db:emphasis>channel</db:emphasis>)</db:title>
<db:para>Sets the web channel instance to be used by this page to <db:code role="parameter">channel</db:code> and connects it to web engine's transport using Chromium IPC messages. The transport is exposed in the JavaScript context of this page as <db:code>qt.webChannelTransport</db:code>, which should be used when using the <db:link xlink:href="qtwebchannel-javascript.xml">Qt WebChannel JavaScript API</db:link>.</db:para>
<db:note>
<db:para>The page does not take ownership of the channel object.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#webChannel">webChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="webChannel">
<db:title>[since 5.5] QWebChannel *QWebEnginePage::webChannel() const</db:title>
<db:para>Returns a pointer to the web channel instance used by this page or a null pointer if none was set. This channel automatically uses the internal web engine transport mechanism over Chromium IPC that is exposed in the JavaScript context of this page as <db:code>qt.webChannelTransport</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#setWebChannel">setWebChannel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
