<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEnginePage Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> class provides an object to view and edit web documents.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEnginePage</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webenginewidgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:emphasis>web engine page</db:emphasis> holds the contents of an HTML document, the history of navigated links, and actions.</db:para>
<db:para><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link>'s API is very similar to <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link>, as you are still provided with common functions like <db:link xlink:href="qwebenginepage.xml#action">action</db:link>() (known as <db:link xlink:href="qwebengineview.xml#pageAction">pageAction</db:link>() in <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link>), <db:link xlink:href="qwebenginepage.xml#triggerAction">triggerAction</db:link>(), and <db:link xlink:href="qwebenginepage.xml#findText">findText</db:link>().</db:para>
<db:para>A page can be loaded using <db:link xlink:href="qwebenginepage.xml#load">load</db:link>() or <db:link xlink:href="qwebenginepage.xml#url-prop">setUrl</db:link>(). Alternatively, if you have the HTML content readily available, you can use <db:link xlink:href="qwebenginepage.xml#setHtml">setHtml</db:link>(). The GET method is always used to load URLs.</db:para>
<db:para>The <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> class also offers methods to retrieve both the URL currently loaded by the page (see <db:link xlink:href="qwebenginepage.xml#url-prop">url</db:link>()) as well as the URL originally requested to be loaded (see <db:link xlink:href="qwebenginepage.xml#requestedUrl-prop">requestedUrl</db:link>()). These methods make possible the retrieval of the URL before and after a DNS resolution or a redirection occurs during the load process. The <db:link xlink:href="qwebenginepage.xml#requestedUrl-prop">requestedUrl</db:link>() also matches to the URL added to the page history (<db:link xlink:href="qwebenginehistory.xml">QWebEngineHistory</db:link>) if load is successful.</db:para>
<db:para>The title of an HTML page can be accessed with the <db:link xlink:href="qwebenginepage.xml#title-prop">title</db:link>() property. Additionally, a page may also specify an icon, which can be accessed using the <db:link xlink:href="qwebenginepage.xml#icon-prop">icon</db:link>() or its URL using the <db:link xlink:href="qwebenginepage.xml#iconUrl-prop">iconUrl</db:link>() property. If the title or the icon changes, the corresponding <db:link xlink:href="qwebenginepage.xml#titleChanged">titleChanged</db:link>(), <db:link xlink:href="qwebenginepage.xml#iconChanged">iconChanged</db:link>() and <db:link xlink:href="qwebenginepage.xml#iconUrlChanged">iconUrlChanged</db:link>() signals will be emitted. The <db:link xlink:href="qwebenginepage.xml#zoomFactor-prop">zoomFactor</db:link>() property enables zooming the contents of the web page by a scale factor.</db:para>
<db:para>The <db:link xlink:href="qwebenginepage.xml#loadStarted">loadStarted</db:link>() signal is emitted when the page begins to load, whereas the <db:link xlink:href="qwebenginepage.xml#loadProgress">loadProgress</db:link>() signal is emitted whenever an element of the web page completes loading, such as an embedded image or a script. The <db:link xlink:href="qwebenginepage.xml#loadFinished">loadFinished</db:link>() signal is emitted when the page contents have been loaded completely, independent of script execution or page rendering. Its argument, either <db:code>true</db:code> or <db:code>false</db:code>, indicates whether or not the load operation succeeded.</db:para>
<db:para>An HTML document is loaded in a <db:emphasis>main frame</db:emphasis> within the web page. If it references <db:emphasis>child frames</db:emphasis> (as defined by the <db:code>&lt;frame&gt;</db:code> or <db:code>&lt;iframe&gt;</db:code> elements), they are considered part of the content. Child frames are individually accessible only through JavaScript.</db:para>
<db:para>Web sites define <db:emphasis>security origin</db:emphasis> for safely accessing each other's resources for client-side scripting or databases. An origin consist of a host name, a scheme, and a port number. For example, the sites <db:code>http://www.example.com/my/page.html</db:code> and <db:code>http://www.example.com/my/overview.html</db:code> are allowed to share the same database or access each other's documents when used in HTML frame sets and JavaScript. At the same time, <db:code>http://www.malicious.com/evil.html</db:code> is prevented from accessing the resources of <db:code>http://www.example.com/</db:code>, because they are of a different security origin. By default, local schemes like <db:code>file://</db:code> and <db:code>qrc://</db:code> are considered to be in the same security origin, and can access each other's resources. Local resources are by default restricted from accessing remote content, which means that <db:code>file://</db:code> will not be able to access <db:code>http://domain.com/foo.html</db:code>.</db:para>
<db:para>Scripts can be executed on the web page by using <db:link xlink:href="qwebenginepage.xml#runJavaScript">runJavaScript</db:link>(), either in the main JavaScript <db:emphasis>world</db:emphasis>, along with the rest of the JavaScript coming from the web contents, or in their own isolated world. While the DOM of the page can be accessed from any world, JavaScript variables of a function defined in one world are not accessible from a different one. <db:link xlink:href="qwebenginescript.xml#ScriptWorldId-enum">QWebEngineScript::ScriptWorldId</db:link> provides some predefined IDs for this purpose. Using the <db:code>runJavaScript()</db:code> version without the world ID is the same as running the script in the <db:code>MainWorld</db:code>.</db:para>
<db:para>The <db:link xlink:href="qwebenginesettings.xml#WebAttribute-enum">FocusOnNavigationEnabled</db:link> setting can be used to make the view associated with the page automatically receive focus when a navigation operation occurs (like loading or reloading a page or navigating through history).</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Feature-enum">
<db:title>enum QWebEnginePage::Feature</db:title>
<db:enumsynopsis>
<db:enumname>Feature</db:enumname>
<db:enumitem>
<db:enumidentifier>Geolocation</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaAudioCapture</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaVideoCapture</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaAudioVideoCapture</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MouseLock</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DesktopVideoCapture</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DesktopAudioVideoCapture</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the platform feature access categories that the user may be asked to grant or deny access to:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Geolocation</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Location hardware or service.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::MediaAudioCapture</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Audio capture devices, such as microphones.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::MediaVideoCapture</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Video devices, such as cameras.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::MediaAudioVideoCapture</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Both audio and video capture devices.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::MouseLock</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Mouse locking, which locks the mouse pointer to the web view and is typically used in games.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::DesktopVideoCapture</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Video output capture, that is, the capture of the user's display, for screen sharing purposes for example. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::DesktopAudioVideoCapture</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Both audio and video output capture. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#featurePermissionRequested">featurePermissionRequested</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#featurePermissionRequestCanceled">featurePermissionRequestCanceled</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#setFeaturePermission">setFeaturePermission</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#PermissionPolicy-enum">PermissionPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="FileSelectionMode-enum">
<db:title>enum QWebEnginePage::FileSelectionMode</db:title>
<db:enumsynopsis>
<db:enumname>FileSelectionMode</db:enumname>
<db:enumitem>
<db:enumidentifier>FileSelectOpen</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FileSelectOpenMultiple</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum indicates whether the implementation of the <db:link xlink:href="qwebenginepage.xml#chooseFiles">chooseFiles</db:link>() function should return only one file or may return multiple files:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::FileSelectOpen</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Return only one file name.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::FileSelectOpenMultiple</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Return multiple file names.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#chooseFiles">chooseFiles</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="FindFlag-enum">
<db:title>enum QWebEnginePage::FindFlag</db:title>
<db:bridgehead renderas="sect2">flags QWebEnginePage::FindFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>FindFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>FindBackward</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FindCaseSensitively</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QWebEnginePage::FindFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes the options available to the <db:link xlink:href="qwebenginepage.xml#findText">findText</db:link>() function. The options can be OR-ed together from the following list:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::FindBackward</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Searches backwards instead of forwards.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::FindCaseSensitively</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>By default <db:link xlink:href="qwebenginepage.xml#findText">findText</db:link>() works case insensitive. Specifying this option changes the behavior to a case sensitive find operation.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>FindFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;FindFlag&gt;. </db:code>It stores an OR combination of <db:code>FindFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="JavaScriptConsoleMessageLevel-enum">
<db:title>enum QWebEnginePage::JavaScriptConsoleMessageLevel</db:title>
<db:enumsynopsis>
<db:enumname>JavaScriptConsoleMessageLevel</db:enumname>
<db:enumitem>
<db:enumidentifier>InfoMessageLevel</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WarningMessageLevel</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ErrorMessageLevel</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the different severity levels a JavaScript console message can have:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::InfoMessageLevel</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The message is purely informative and can safely be ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::WarningMessageLevel</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The message informs about unexpected behavior or errors that may need attention.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ErrorMessageLevel</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The message indicates there has been an error.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="NavigationType-enum">
<db:title>enum QWebEnginePage::NavigationType</db:title>
<db:enumsynopsis>
<db:enumname>NavigationType</db:enumname>
<db:enumitem>
<db:enumidentifier>NavigationTypeLinkClicked</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NavigationTypeTyped</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NavigationTypeFormSubmitted</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NavigationTypeBackForward</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NavigationTypeReload</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NavigationTypeOther</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the type of a navigation request:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NavigationTypeLinkClicked</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The navigation request resulted from a clicked link.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NavigationTypeTyped</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The navigation request resulted from an explicitly loaded URL.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NavigationTypeFormSubmitted</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The navigation request resulted from a form submission.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NavigationTypeBackForward</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The navigation request resulted from a back or forward action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NavigationTypeReload</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The navigation request resulted from a reload action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NavigationTypeOther</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The navigation request was triggered by other means not covered by the above.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#acceptNavigationRequest">acceptNavigationRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="PermissionPolicy-enum">
<db:title>enum QWebEnginePage::PermissionPolicy</db:title>
<db:enumsynopsis>
<db:enumname>PermissionPolicy</db:enumname>
<db:enumitem>
<db:enumidentifier>PermissionUnknown</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PermissionGrantedByUser</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PermissionDeniedByUser</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the permission policies that the user may set for data or device access:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::PermissionUnknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>It is unknown whether the user grants or denies permission.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::PermissionGrantedByUser</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The user has granted permission.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::PermissionDeniedByUser</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The user has denied permission.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#featurePermissionRequested">featurePermissionRequested</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#featurePermissionRequestCanceled">featurePermissionRequestCanceled</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#setFeaturePermission">setFeaturePermission</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#Feature-enum">Feature</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="RenderProcessTerminationStatus-enum">
<db:title>[since 5.6] enum QWebEnginePage::RenderProcessTerminationStatus</db:title>
<db:enumsynopsis>
<db:enumname>RenderProcessTerminationStatus</db:enumname>
<db:enumitem>
<db:enumidentifier>NormalTerminationStatus</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AbnormalTerminationStatus</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CrashedTerminationStatus</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>KilledTerminationStatus</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the status with which the render process terminated:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NormalTerminationStatus</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The render process terminated normally.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::AbnormalTerminationStatus</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The render process terminated with with a non-zero exit status.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::CrashedTerminationStatus</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The render process crashed, for example because of a segmentation fault.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::KilledTerminationStatus</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The render process was killed, for example by <db:code>SIGKILL</db:code> or task manager kill.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="WebAction-enum">
<db:title>enum QWebEnginePage::WebAction</db:title>
<db:enumsynopsis>
<db:enumname>WebAction</db:enumname>
<db:enumitem>
<db:enumidentifier>NoWebAction</db:enumidentifier>
<db:enumvalue>- 1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Back</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Forward</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Stop</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Reload</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Cut</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Copy</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Paste</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Undo</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Redo</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SelectAll</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReloadAndBypassCache</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PasteAndMatchStyle</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenLinkInThisWindow</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenLinkInNewWindow</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenLinkInNewTab</db:enumidentifier>
<db:enumvalue>14</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CopyLinkToClipboard</db:enumidentifier>
<db:enumvalue>15</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DownloadLinkToDisk</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CopyImageToClipboard</db:enumidentifier>
<db:enumvalue>17</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CopyImageUrlToClipboard</db:enumidentifier>
<db:enumvalue>18</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DownloadImageToDisk</db:enumidentifier>
<db:enumvalue>19</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CopyMediaUrlToClipboard</db:enumidentifier>
<db:enumvalue>20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ToggleMediaControls</db:enumidentifier>
<db:enumvalue>21</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ToggleMediaLoop</db:enumidentifier>
<db:enumvalue>22</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ToggleMediaPlayPause</db:enumidentifier>
<db:enumvalue>23</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ToggleMediaMute</db:enumidentifier>
<db:enumvalue>24</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DownloadMediaToDisk</db:enumidentifier>
<db:enumvalue>25</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InspectElement</db:enumidentifier>
<db:enumvalue>26</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExitFullScreen</db:enumidentifier>
<db:enumvalue>27</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RequestClose</db:enumidentifier>
<db:enumvalue>28</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Unselect</db:enumidentifier>
<db:enumvalue>29</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SavePage</db:enumidentifier>
<db:enumvalue>30</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenLinkInNewBackgroundTab</db:enumidentifier>
<db:enumvalue>31</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ViewSource</db:enumidentifier>
<db:enumvalue>32</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ToggleBold</db:enumidentifier>
<db:enumvalue>33</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ToggleItalic</db:enumidentifier>
<db:enumvalue>34</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ToggleUnderline</db:enumidentifier>
<db:enumvalue>35</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ToggleStrikethrough</db:enumidentifier>
<db:enumvalue>36</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlignLeft</db:enumidentifier>
<db:enumvalue>37</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlignCenter</db:enumidentifier>
<db:enumvalue>38</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlignRight</db:enumidentifier>
<db:enumvalue>39</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlignJustified</db:enumidentifier>
<db:enumvalue>40</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Indent</db:enumidentifier>
<db:enumvalue>41</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Outdent</db:enumidentifier>
<db:enumvalue>42</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InsertOrderedList</db:enumidentifier>
<db:enumvalue>43</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InsertUnorderedList</db:enumidentifier>
<db:enumvalue>44</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WebActionCount</db:enumidentifier>
<db:enumvalue>45</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the types of action which can be performed on the web page.</db:para>
<db:para>Actions only have an effect when they are applicable.</db:para>
<db:para>The availability of actions can be be determined by checking <db:link xlink:href="qaction.xml#enabled-prop">isEnabled</db:link>() on the action returned by <db:link xlink:href="qwebenginepage.xml#action">action</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::NoWebAction</db:code></db:para>
</db:td>
<db:td><db:code>- 1</db:code></db:td>
<db:td>
<db:para>No action is triggered.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Back</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Navigate back in the history of navigated links.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Forward</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Navigate forward in the history of navigated links.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Stop</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Stop loading the current page.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Reload</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Reload the current page.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ReloadAndBypassCache</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Reload the current page, but do not use any local cache.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Cut</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Cut the content currently selected into the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Copy</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Copy the content currently selected into the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Paste</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Paste content from the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Undo</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Undo the last editing action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Redo</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Redo the last editing action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::SelectAll</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Select all content. This action is only enabled when the page's content is focused. The focus can be forced by the JavaScript <db:code>window.focus()</db:code> call, or the <db:link xlink:href="qwebenginesettings.xml#WebAttribute-enum">FocusOnNavigationEnabled</db:link> setting should be enabled to get automatic focus.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::PasteAndMatchStyle</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Paste content from the clipboard with current style.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::OpenLinkInThisWindow</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Open the current link in the current window. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::OpenLinkInNewWindow</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Open the current link in a new window. Requires implementation of <db:link xlink:href="qwebenginepage.xml#createWindow">createWindow</db:link>(). (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::OpenLinkInNewTab</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>Open the current link in a new tab. Requires implementation of <db:link xlink:href="qwebenginepage.xml#createWindow">createWindow</db:link>(). (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::OpenLinkInNewBackgroundTab</db:code></db:para>
</db:td>
<db:td><db:code>31</db:code></db:td>
<db:td>
<db:para>Open the current link in a new background tab. Requires implementation of <db:link xlink:href="qwebenginepage.xml#createWindow">createWindow</db:link>(). (Added in Qt 5.7)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::CopyLinkToClipboard</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>Copy the current link to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::CopyImageToClipboard</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>Copy the clicked image to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::CopyImageUrlToClipboard</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>Copy the clicked image's URL to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::CopyMediaUrlToClipboard</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td>
<db:para>Copy the hovered audio or video's URL to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ToggleMediaControls</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td>
<db:para>Toggle between showing and hiding the controls for the hovered audio or video element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ToggleMediaLoop</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td>
<db:para>Toggle whether the hovered audio or video should loop on completetion or not. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ToggleMediaPlayPause</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
<db:td>
<db:para>Toggle the play/pause state of the hovered audio or video element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ToggleMediaMute</db:code></db:para>
</db:td>
<db:td><db:code>24</db:code></db:td>
<db:td>
<db:para>Mute or unmute the hovered audio or video element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::DownloadLinkToDisk</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Download the current link to the disk. Requires a slot for <db:link xlink:href="qwebengineprofile.xml#downloadRequested">downloadRequested</db:link>(). (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::DownloadImageToDisk</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>Download the highlighted image to the disk. Requires a slot for <db:link xlink:href="qwebengineprofile.xml#downloadRequested">downloadRequested</db:link>(). (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::DownloadMediaToDisk</db:code></db:para>
</db:td>
<db:td><db:code>25</db:code></db:td>
<db:td>
<db:para>Download the hovered audio or video to the disk. Requires a slot for <db:link xlink:href="qwebengineprofile.xml#downloadRequested">downloadRequested</db:link>(). (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::InspectElement</db:code></db:para>
</db:td>
<db:td><db:code>26</db:code></db:td>
<db:td>
<db:para>Trigger any attached Web Inspector to inspect the highlighed element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ExitFullScreen</db:code></db:para>
</db:td>
<db:td><db:code>27</db:code></db:td>
<db:td>
<db:para>Exit the fullscreen mode. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::RequestClose</db:code></db:para>
</db:td>
<db:td><db:code>28</db:code></db:td>
<db:td>
<db:para>Request to close the web page. If defined, the <db:code>window.onbeforeunload</db:code> handler is run, and the user can confirm or reject to close the page. If the close request is confirmed, <db:code>windowCloseRequested</db:code> is emitted. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Unselect</db:code></db:para>
</db:td>
<db:td><db:code>29</db:code></db:td>
<db:td>
<db:para>Clear the current selection. (Added in Qt 5.7)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::SavePage</db:code></db:para>
</db:td>
<db:td><db:code>30</db:code></db:td>
<db:td>
<db:para>Save the current page to disk. MHTML is the default format that is used to store the web page on disk. Requires a slot for <db:link xlink:href="qwebengineprofile.xml#downloadRequested">downloadRequested</db:link>(). (Added in Qt 5.7)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ViewSource</db:code></db:para>
</db:td>
<db:td><db:code>32</db:code></db:td>
<db:td>
<db:para>Show the source of the current page in a new tab. Requires implementation of <db:link xlink:href="qwebenginepage.xml#createWindow">createWindow</db:link>(). (Added in Qt 5.8)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ToggleBold</db:code></db:para>
</db:td>
<db:td><db:code>33</db:code></db:td>
<db:td>
<db:para>Toggles boldness for the selection or at the cursor position. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ToggleItalic</db:code></db:para>
</db:td>
<db:td><db:code>34</db:code></db:td>
<db:td>
<db:para>Toggles italics for the selection or at the cursor position. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ToggleUnderline</db:code></db:para>
</db:td>
<db:td><db:code>35</db:code></db:td>
<db:td>
<db:para>Toggles underlining of the selection or at the cursor position. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::ToggleStrikethrough</db:code></db:para>
</db:td>
<db:td><db:code>36</db:code></db:td>
<db:td>
<db:para>Toggles striking through the selection or at the cursor position. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::AlignLeft</db:code></db:para>
</db:td>
<db:td><db:code>37</db:code></db:td>
<db:td>
<db:para>Aligns the lines containing the selection or the cursor to the left. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::AlignCenter</db:code></db:para>
</db:td>
<db:td><db:code>38</db:code></db:td>
<db:td>
<db:para>Aligns the lines containing the selection or the cursor at the center. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::AlignRight</db:code></db:para>
</db:td>
<db:td><db:code>39</db:code></db:td>
<db:td>
<db:para>Aligns the lines containing the selection or the cursor to the right. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::AlignJustified</db:code></db:para>
</db:td>
<db:td><db:code>40</db:code></db:td>
<db:td>
<db:para>Stretches the lines containing the selection or the cursor so that each line has equal width. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Indent</db:code></db:para>
</db:td>
<db:td><db:code>41</db:code></db:td>
<db:td>
<db:para>Indents the lines containing the selection or the cursor. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::Outdent</db:code></db:para>
</db:td>
<db:td><db:code>42</db:code></db:td>
<db:td>
<db:para>Outdents the lines containing the selection or the cursor. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::InsertOrderedList</db:code></db:para>
</db:td>
<db:td><db:code>43</db:code></db:td>
<db:td>
<db:para>Inserts an ordered list at the current cursor position, deleting the current selection. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::InsertUnorderedList</db:code></db:para>
</db:td>
<db:td><db:code>44</db:code></db:td>
<db:td>
<db:para>Inserts an unordered list at the current cursor position, deleting the current selection. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="WebWindowType-enum">
<db:title>enum QWebEnginePage::WebWindowType</db:title>
<db:enumsynopsis>
<db:enumname>WebWindowType</db:enumname>
<db:enumitem>
<db:enumidentifier>WebBrowserWindow</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WebBrowserTab</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WebDialog</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WebBrowserBackgroundTab</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the types of window that can be created by the <db:link xlink:href="qwebenginepage.xml#createWindow">createWindow</db:link>() function:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::WebBrowserWindow</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A complete web browser window.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::WebBrowserTab</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A web browser tab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::WebDialog</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A window without decoration.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link></db:emphasis>::WebBrowserBackgroundTab</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>A web browser tab without hiding the current visible <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link>. (Added in Qt 5.7)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="audioMuted-prop">
<db:title>[since 5.7] audioMuted : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>audioMuted</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isAudioMuted</db:synopsisinfo>
<db:synopsisinfo role="setter">setAudioMuted</db:synopsisinfo>
<db:synopsisinfo role="notifier">audioMutedChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the current page audio is muted.</db:para>
<db:para>The default value is <db:code>false</db:code>.</db:para>
<db:para>This property was introduced in Qt 5.7.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isAudioMuted</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAudioMuted</db:emphasis>(<db:type>bool</db:type> <db:emphasis>muted</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml#audioMutedChanged">audioMutedChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>muted</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#recentlyAudible-prop">recentlyAudible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="backgroundColor-prop">
<db:title>[since 5.6] backgroundColor : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>backgroundColor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">backgroundColor</db:synopsisinfo>
<db:synopsisinfo role="setter">setBackgroundColor</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the page's background color behind the document's body.</db:para>
<db:para>You can set the background color to <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::transparent</db:link> or to a translucent color to see through the document, or you can set it to match your web content in a hybrid application to prevent the white flashes that may appear during loading.</db:para>
<db:para>The default value is white.</db:para>
<db:para>This property was introduced in Qt 5.6.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">backgroundColor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBackgroundColor</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>color</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="contentsSize-prop">
<db:title>[read-only, since 5.7] contentsSize : const QSizeF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSizeF</db:type>
<db:varname>contentsSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">contentsSize</db:synopsisinfo>
<db:synopsisinfo role="notifier">contentsSizeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the size of the page contents.</db:para>
<db:para>This property was introduced in Qt 5.7.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> <db:emphasis role="bold">contentsSize</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">contentsSizeChanged</db:emphasis>(const <db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="hasSelection-prop">
<db:title>[read-only] hasSelection : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>hasSelection</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hasSelection</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether this page contains selected content or not.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasSelection</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#selectionChanged">selectionChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="icon-prop">
<db:title>[read-only, since 5.7] icon : const QIcon</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QIcon</db:type>
<db:varname>icon</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">icon</db:synopsisinfo>
<db:synopsisinfo role="notifier">iconChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the icon associated with the page currently viewed.</db:para>
<db:para>By default, this property contains a null icon. If the web page specifies more than one icon, the <db:code>icon</db:code> property encapsulates the available candidate icons in a single, scalable <db:code>QIcon</db:code>.</db:para>
<db:para>This property was introduced in Qt 5.7.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qicon.xml">QIcon</db:link></db:type> <db:emphasis role="bold">icon</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml#iconChanged">iconChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qicon.xml">QIcon</db:link></db:type> &amp;<db:emphasis>icon</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#iconChanged">iconChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#iconUrl-prop">iconUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#iconUrlChanged">iconUrlChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iconUrl-prop">
<db:title>[read-only] iconUrl : const QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>iconUrl</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">iconUrl</db:synopsisinfo>
<db:synopsisinfo role="notifier">iconUrlChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the URL of the icon associated with the page currently viewed.</db:para>
<db:para>By default, this property contains an empty URL.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">iconUrl</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml#iconUrlChanged">iconUrlChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#iconUrlChanged">iconUrlChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#icon-prop">icon</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#iconChanged">iconChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="recentlyAudible-prop">
<db:title>[read-only, since 5.7] recentlyAudible : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>recentlyAudible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">recentlyAudible</db:synopsisinfo>
<db:synopsisinfo role="notifier">recentlyAudibleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current page's <db:emphasis>audible state</db:emphasis>, that is, whether audio was recently played or not.</db:para>
<db:para>The default value is <db:code>false</db:code>.</db:para>
<db:para>This property was introduced in Qt 5.7.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">recentlyAudible</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qwebenginepage.xml#recentlyAudibleChanged">recentlyAudibleChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>recentlyAudible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#audioMuted-prop">audioMuted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestedUrl-prop">
<db:title>[read-only] requestedUrl : const QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>requestedUrl</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">requestedUrl</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the URL that was originally requested to be loaded by the page that is currently viewed.</db:para>
<db:note>
<db:para>The URL may differ from the one returned by <db:link xlink:href="qwebenginepage.xml#url-prop">url</db:link>(), which is the actual URL that results from DNS resolution or redirection.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">requestedUrl</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#url-prop">url</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#url-prop">setUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scrollPosition-prop">
<db:title>[read-only, since 5.7] scrollPosition : const QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>scrollPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">scrollPosition</db:synopsisinfo>
<db:synopsisinfo role="notifier">scrollPositionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the scroll position of the page contents.</db:para>
<db:para>This property was introduced in Qt 5.7.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">scrollPosition</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">scrollPositionChanged</db:emphasis>(const <db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> &amp;<db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="selectedText-prop">
<db:title>[read-only] selectedText : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>selectedText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">selectedText</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the text currently selected.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">selectedText</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#selectionChanged">selectionChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title-prop">
<db:title>[read-only] title : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>title</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">title</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the title of the page as defined by the HTML <db:code>&lt;title&gt;</db:code> element.</db:para>
<db:para>If the page has no <db:code>&lt;title&gt;</db:code> element, then the URL is used instead. For <db:code>file://</db:code> URLs only the filename is used and not the full path.</db:para>
<db:para>By default, before any content has been loaded, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">title</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#titleChanged">titleChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="url-prop">
<db:title>url : QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>url</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">url</db:synopsisinfo>
<db:synopsisinfo role="setter">setUrl</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the URL of the page currently viewed.</db:para>
<db:para>Setting this property clears the view and loads the URL.</db:para>
<db:para>By default, this property contains an empty, invalid URL.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">url</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUrl</db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#urlChanged">urlChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="zoomFactor-prop">
<db:title>zoomFactor : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>zoomFactor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">zoomFactor</db:synopsisinfo>
<db:synopsisinfo role="setter">setZoomFactor</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the zoom factor for the page content.</db:para>
<db:para>Valid values are within the range from <db:code>0.25</db:code> to <db:code>5.0</db:code>. The default factor is <db:code>1.0</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">zoomFactor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setZoomFactor</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>factor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="runJavaScript">
<db:title>[since 5.7] void QWebEnginePage::runJavaScript(const QString &amp;<db:emphasis>scriptSource</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="runJavaScript-2">[since 5.7] void QWebEnginePage::runJavaScript(const QString &amp;<db:emphasis>scriptSource</db:emphasis>, const QWebEngineCallback&lt;const QVariant &amp;&gt; &amp;<db:emphasis>resultCallback</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="runJavaScript-1">[since 5.7] void QWebEnginePage::runJavaScript(const QString &amp;<db:emphasis>scriptSource</db:emphasis>, quint32 <db:emphasis>worldId</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="runJavaScript-3">[since 5.7] void QWebEnginePage::runJavaScript(const QString &amp;<db:emphasis>scriptSource</db:emphasis>, quint32 <db:emphasis>worldId</db:emphasis>, const QWebEngineCallback&lt;const QVariant &amp;&gt; &amp;<db:emphasis>resultCallback</db:emphasis>)</db:bridgehead>
<db:para>Runs the JavaScript code contained in <db:code role="parameter">scriptSource</db:code> without checking whether the DOM of the page has been constructed. If you need more control over how the script is run, consider using <db:link xlink:href="qwebenginepage.xml#scripts">scripts</db:link>() instead.</db:para>
<db:para>To avoid conflicts with other scripts executed on the page, the world in which the script is run is specified by <db:code role="parameter">worldId</db:code>. The world ID values are the same as provided by <db:link xlink:href="qwebenginescript.xml#ScriptWorldId-enum">QWebEngineScript::ScriptWorldId</db:link>, and between <db:code>0</db:code> and <db:code>256</db:code>. If you leave out the <db:code>world</db:code> ID, the script is run in the <db:code>MainWorld</db:code>.</db:para>
<db:para>When the script has been executed, <db:code role="parameter">resultCallback</db:code> is called with the result of the last executed statement. <db:code>resultCallback</db:code> can be any of a function pointer, a functor or a lambda, and it is expected to take a <db:link xlink:href="qvariant.xml">QVariant</db:link> parameter. For example:</db:para>
<db:programlisting language="cpp">page.runJavaScript(&quot;document.title&quot;, [](const QVariant &amp;amp;v) { qDebug() &amp;lt;&amp;lt; v.toString(); });
</db:programlisting>
<db:para>Only plain data can be returned from JavaScript as the result value. Supported data types include all of the JSON data types as well as, for example, <db:code>Date</db:code> and <db:code>ArrayBuffer</db:code>. Unsupported data types include, for example, <db:code>Function</db:code> and <db:code>Promise</db:code>.</db:para>
<db:warning>
<db:para>Do not execute lengthy routines in the callback function, because it might block the rendering of the web engine page.</db:para>
</db:warning>
<db:warning>
<db:para>We guarantee that the callback (<db:code role="parameter">resultCallback</db:code>) is always called, but it might be done during page destruction. When <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> is deleted, the callback is triggered with an invalid value and it is not safe to use the corresponding <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> or <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> instance inside it.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#scripts">scripts</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginescript.xml#ScriptWorldId-enum">QWebEngineScript::ScriptWorldId</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-overview.xml#script-injection">Script Injection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QWebEnginePage">
<db:title>[explicit] QWebEnginePage::QWebEnginePage(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEnginePage</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>Q_NULLPTR</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEnginePage(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> with the parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QWebEnginePage-1">
<db:title>[since 5.5] QWebEnginePage::QWebEnginePage(QWebEngineProfile *<db:emphasis>profile</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEnginePage</db:methodname>
<db:methodparam>
<db:type>QWebEngineProfile *</db:type>
<db:parameter>profile</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>Q_NULLPTR</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEnginePage(QWebEngineProfile *profile, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty web engine page in the web engine profile <db:code role="parameter">profile</db:code> with the parent <db:code role="parameter">parent</db:code>.</db:para>
<db:para>If the profile is not the default profile, the caller must ensure that the profile stays alive for as long as the page does.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="dtor.QWebEnginePage">
<db:title>[virtual] QWebEnginePage::~QWebEnginePage()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QWebEnginePage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWebEnginePage()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the web page.</db:para>
</db:section>
<db:section xml:id="acceptNavigationRequest">
<db:title>[virtual protected, since 5.5] bool QWebEnginePage::acceptNavigationRequest(const QUrl &amp;<db:emphasis>url</db:emphasis>, QWebEnginePage::NavigationType <db:emphasis>type</db:emphasis>, bool <db:emphasis>isMainFrame</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>acceptNavigationRequest</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWebEnginePage::NavigationType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>isMainFrame</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool acceptNavigationRequest(const QUrl &amp;url, QWebEnginePage::NavigationType type, bool isMainFrame)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called upon receiving a request to navigate to the specified <db:code role="parameter">url</db:code> by means of the specified navigation type <db:code role="parameter">type</db:code>. <db:code role="parameter">isMainFrame</db:code> indicates whether the request corresponds to the main frame or a child frame. If the function returns <db:code>true</db:code>, the navigation request is accepted and <db:code>url</db:code> is loaded. The default implementation accepts all navigation requests.</db:para>
<db:para>This function is called for absolute URLs that are prefixed with <db:code>http://</db:code> or <db:code>https://</db:code> and for unrecognized schemes, such as <db:code>mailto:</db:code>, which will be handled by <db:link xlink:href="qdesktopservices.xml">QDesktopServices</db:link> if accepted. To have this function called also upon receiving navigation requests to local URLs, prefix the URLs with <db:code>http://</db:code>.</db:para>
<db:para>Navigation requests can be delegated to the Qt application instead of having the HTML handler engine process them by overloading this function. This is necessary when an HTML document is used as part of the user interface, and not to display external data, for example, when displaying a list of results.</db:para>
<db:note>
<db:para>The loading process is started and the <db:link xlink:href="qwebenginepage.xml#loadStarted">loadStarted</db:link>() signal is emitted <db:emphasis>before</db:emphasis> the request is accepted or rejected. Therefore, a <db:link xlink:href="qwebenginepage.xml#loadFinished">loadFinished</db:link>() signal that returns <db:code>false</db:code> is to be expected even after delegating the request.</db:para>
</db:note>
<db:para>The <db:link xlink:href="qwebengineurlrequestinterceptor.xml">QWebEngineUrlRequestInterceptor</db:link> class offers further options for intercepting and manipulating requests.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="action">
<db:title>QAction *QWebEnginePage::action(QWebEnginePage::WebAction <db:emphasis>action</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAction *</db:type>
<db:methodname>action</db:methodname>
<db:methodparam>
<db:type>QWebEnginePage::WebAction</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAction * action(QWebEnginePage::WebAction action) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qaction.xml">QAction</db:link> for the specified <db:link xlink:href="qwebenginepage.xml#WebAction-enum">WebAction</db:link> <db:code role="parameter">action</db:code>.</db:para>
<db:para>The action is owned by the <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> but you can customize the look by changing its properties.</db:para>
<db:para><db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> also takes care of implementing the action, so that upon triggering the corresponding action is performed on the page.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#triggerAction">triggerAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="audioMutedChanged">
<db:title>[since 5.7] void QWebEnginePage::audioMutedChanged(bool <db:emphasis>muted</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>audioMutedChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>muted</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioMuted</db:synopsisinfo>
<db:synopsisinfo role="signature">void audioMutedChanged(bool muted)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the page's <db:code role="parameter">muted</db:code> state changes.</db:para>
<db:note>
<db:para>Not to be confused with a specific HTML5 audio or video element being muted.</db:para>
</db:note>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qwebenginepage.xml#audioMuted-prop">audioMuted</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="authenticationRequired">
<db:title>void QWebEnginePage::authenticationRequired(const QUrl &amp;<db:emphasis>requestUrl</db:emphasis>, QAuthenticator *<db:emphasis>authenticator</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>authenticationRequired</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>requestUrl</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAuthenticator *</db:type>
<db:parameter>authenticator</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void authenticationRequired(const QUrl &amp;requestUrl, QAuthenticator *authenticator)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when access to <db:code role="parameter">requestUrl</db:code> requires authentication. <db:code role="parameter">authenticator</db:code> should be used to pass the user name and password for the connection.</db:para>
</db:section>
<db:section xml:id="certificateError">
<db:title>[virtual protected] bool QWebEnginePage::certificateError(const QWebEngineCertificateError &amp;<db:emphasis>certificateError</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>certificateError</db:methodname>
<db:methodparam>
<db:type>const QWebEngineCertificateError &amp;</db:type>
<db:parameter>certificateError</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool certificateError(const QWebEngineCertificateError &amp;certificateError)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called when an invalid certificate error is raised while loading a given request.</db:para>
<db:para>The <db:code role="parameter">certificateError</db:code> parameter contains information about the certificate and details of the error.</db:para>
<db:para>Return <db:code>true</db:code> to ignore the error and complete the request. Return <db:code>false</db:code> to stop loading the request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginecertificateerror.xml">QWebEngineCertificateError</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chooseFiles">
<db:title>[virtual protected] QStringList QWebEnginePage::chooseFiles(QWebEnginePage::FileSelectionMode <db:emphasis>mode</db:emphasis>, const QStringList &amp;<db:emphasis>oldFiles</db:emphasis>, const QStringList &amp;<db:emphasis>acceptedMimeTypes</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>chooseFiles</db:methodname>
<db:methodparam>
<db:type>QWebEnginePage::FileSelectionMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>oldFiles</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>acceptedMimeTypes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList chooseFiles(QWebEnginePage::FileSelectionMode mode, const QStringList &amp;oldFiles, const QStringList &amp;acceptedMimeTypes)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called when the web content requests a file name, for example as a result of the user clicking on a file upload button in an HTML form.</db:para>
<db:para><db:code role="parameter">mode</db:code> indicates whether only one file or multiple files are expected to be returned.</db:para>
<db:para>A suggested filename may be provided as the first entry of <db:code role="parameter">oldFiles</db:code>. <db:code role="parameter">acceptedMimeTypes</db:code> is ignored by the default implementation, but might be used by overrides.</db:para>
</db:section>
<db:section xml:id="contextMenuData">
<db:title>[since 5.7] const QWebEngineContextMenuData &amp;QWebEnginePage::contextMenuData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QWebEngineContextMenuData &amp;</db:type>
<db:methodname>contextMenuData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QWebEngineContextMenuData &amp; contextMenuData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns additional data about the current context menu. It is only guaranteed to be valid during the call to the <db:link xlink:href="qwebengineview.xml#contextMenuEvent">QWebEngineView::contextMenuEvent</db:link>() handler of the associated <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#createStandardContextMenu">createStandardContextMenu</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createStandardContextMenu">
<db:title>QMenu *QWebEnginePage::createStandardContextMenu()</db:title>
<db:methodsynopsis>
<db:type>QMenu *</db:type>
<db:methodname>createStandardContextMenu</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMenu * createStandardContextMenu()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates the standard context menu which is shown when the user clicks on the web page with the right mouse button. It is called from the default <db:link xlink:href="qwidget.xml#contextMenuEvent">contextMenuEvent</db:link>() handler. The popup menu's ownership is transferred to the caller.</db:para>
<db:para>Returns <db:code>nullptr</db:code> if the context menu data is not initialized, for example when it is called when there is actually no context menu requested.</db:para>
</db:section>
<db:section xml:id="createWindow">
<db:title>[virtual protected] QWebEnginePage *QWebEnginePage::createWindow(QWebEnginePage::WebWindowType <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QWebEnginePage *</db:type>
<db:methodname>createWindow</db:methodname>
<db:methodparam>
<db:type>QWebEnginePage::WebWindowType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEnginePage * createWindow(QWebEnginePage::WebWindowType type)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called to create a new window of the specified <db:code role="parameter">type</db:code>. For example, when a JavaScript program requests to open a document in a new window.</db:para>
<db:para>If the new window can be created, the new window's <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> is returned; otherwise a null pointer is returned.</db:para>
<db:para>If the view associated with the web page is a <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> object, then the default implementation forwards the request to <db:link xlink:href="qwebengineview.xml#createWindow">QWebEngineView::createWindow</db:link>(); otherwise it returns a null pointer.</db:para>
<db:note>
<db:para>In the cases when the window creation is being triggered by JavaScript, apart from reimplementing this method the application must also set <db:link xlink:href="qwebenginesettings.xml#WebAttribute-enum">QWebEngineSettings::JavascriptCanOpenWindows</db:link> to <db:code>true</db:code> in order for the method to get called.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineview.xml#createWindow">QWebEngineView::createWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="devToolsPage">
<db:title>[since 5.11] QWebEnginePage *QWebEnginePage::devToolsPage() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEnginePage *</db:type>
<db:methodname>devToolsPage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEnginePage * devToolsPage() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the page that is hosting the developer tools of this page, if any.</db:para>
<db:para>Returns <db:code>nullptr</db:code> if no developer tools page is set.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#setDevToolsPage">setDevToolsPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#inspectedPage">inspectedPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="download">
<db:title>[since 5.10] void QWebEnginePage::download(const QUrl &amp;<db:emphasis>url</db:emphasis>, const QString &amp;<db:emphasis>filename</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>download</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filename</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void download(const QUrl &amp;url, const QString &amp;filename)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Downloads the resource from the location given by <db:code role="parameter">url</db:code> to a local file.</db:para>
<db:para>If <db:code role="parameter">filename</db:code> is given, it is used as the suggested file name. If it is relative, the file is saved in the standard download location with the given name. If it is a null or empty <db:link xlink:href="qstring.xml">QString</db:link>, the default file name is used.</db:para>
<db:para>This will emit <db:link xlink:href="qwebengineprofile.xml#downloadRequested">QWebEngineProfile::downloadRequested</db:link>() after the download has started.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual] bool QWebEnginePage::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="featurePermissionRequestCanceled">
<db:title>void QWebEnginePage::featurePermissionRequestCanceled(const QUrl &amp;<db:emphasis>securityOrigin</db:emphasis>, QWebEnginePage::Feature <db:emphasis>feature</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>featurePermissionRequestCanceled</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>securityOrigin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWebEnginePage::Feature</db:type>
<db:parameter>feature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void featurePermissionRequestCanceled(const QUrl &amp;securityOrigin, QWebEnginePage::Feature feature)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the web site identified by <db:code role="parameter">securityOrigin</db:code> cancels a previously issued request to make use of <db:code role="parameter">feature</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#featurePermissionRequested">featurePermissionRequested</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#setFeaturePermission">setFeaturePermission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="featurePermissionRequested">
<db:title>void QWebEnginePage::featurePermissionRequested(const QUrl &amp;<db:emphasis>securityOrigin</db:emphasis>, QWebEnginePage::Feature <db:emphasis>feature</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>featurePermissionRequested</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>securityOrigin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWebEnginePage::Feature</db:type>
<db:parameter>feature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void featurePermissionRequested(const QUrl &amp;securityOrigin, QWebEnginePage::Feature feature)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the web site identified by <db:code role="parameter">securityOrigin</db:code> requests to make use of the resource or device identified by <db:code role="parameter">feature</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#featurePermissionRequestCanceled">featurePermissionRequestCanceled</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#setFeaturePermission">setFeaturePermission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findText">
<db:title>void QWebEnginePage::findText(const QString &amp;<db:emphasis>subString</db:emphasis>, QWebEnginePage::FindFlags <db:emphasis>options</db:emphasis> = FindFlags(), const QWebEngineCallback&lt;bool&gt; &amp;<db:emphasis>resultCallback</db:emphasis> = QWebEngineCallback&lt;bool&gt;())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>findText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>subString</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWebEnginePage::FindFlags</db:type>
<db:parameter>options</db:parameter>
<db:initializer>FindFlags()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QWebEngineCallback&lt;bool&gt; &amp;</db:type>
<db:parameter>resultCallback</db:parameter>
<db:initializer>QWebEngineCallback&lt;bool&gt;()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void findText(const QString &amp;subString, QWebEnginePage::FindFlags options, const QWebEngineCallback&lt;bool&gt; &amp;resultCallback)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Finds the specified string, <db:code role="parameter">subString</db:code>, in the page, using the given <db:code role="parameter">options</db:code>.</db:para>
<db:para>To clear the search highlight, just pass an empty string.</db:para>
<db:para>The <db:code role="parameter">resultCallback</db:code> must take a boolean parameter. It will be called with a value of <db:code>true</db:code> if the <db:code role="parameter">subString</db:code> was found; otherwise the callback value will be <db:code>false</db:code>.</db:para>
<db:warning>
<db:para>We guarantee that the callback (<db:code role="parameter">resultCallback</db:code>) is always called, but it might be done during page destruction. When <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> is deleted, the callback is triggered with an invalid value and it is not safe to use the corresponding <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> or <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> instance inside it.</db:para>
</db:warning>
<db:para>For example:</db:para>
<db:programlisting language="cpp">    m_view-&amp;gt;page()-&amp;gt;findText(QStringLiteral(&quot;Qt&quot;), QWebEnginePage::FindFlags(), [this](bool found) {
        if (!found) QMessageBox::information(m_view, QString(), QStringLiteral(&quot;No occurrences found&quot;));
    });
</db:programlisting>
</db:section>
<db:section xml:id="fullScreenRequested">
<db:title>void QWebEnginePage::fullScreenRequested(QWebEngineFullScreenRequest <db:emphasis>fullScreenRequest</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fullScreenRequested</db:methodname>
<db:methodparam>
<db:type>QWebEngineFullScreenRequest</db:type>
<db:parameter>fullScreenRequest</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fullScreenRequested(QWebEngineFullScreenRequest fullScreenRequest)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the web page issues the request to enter fullscreen mode for a web-element, usually a video element.</db:para>
<db:para>The request object <db:code role="parameter">fullScreenRequest</db:code> can be used to accept or reject the request.</db:para>
<db:para>If the request is accepted the element requesting fullscreen will fill the viewport, but it is up to the application to make the view fullscreen or move the page to a view that is fullscreen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginesettings.xml#WebAttribute-enum">QWebEngineSettings::FullScreenSupportEnabled</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="geometryChangeRequested">
<db:title>void QWebEnginePage::geometryChangeRequested(const QRect &amp;<db:emphasis>geom</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>geometryChangeRequested</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>geom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void geometryChangeRequested(const QRect &amp;geom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the document wants to change the position and size of the page to <db:code role="parameter">geom</db:code>. This can happen for example through JavaScript.</db:para>
<db:note>
<db:para><db:link xlink:href="qwindow.xml#setGeometry">setGeometry</db:link>() expects a size excluding the window decoration, while <db:code role="parameter">geom</db:code> includes it. You have to remove the size of the frame margins from <db:code role="parameter">geom</db:code> to handle this signal correctly.</db:para>
</db:note>
<db:programlisting language="cpp">window-&amp;gt;setGeometry(geom.marginsRemoved(window-&amp;gt;frameMargins()));
</db:programlisting>
</db:section>
<db:section xml:id="history">
<db:title>QWebEngineHistory *QWebEnginePage::history() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineHistory *</db:type>
<db:methodname>history</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineHistory * history() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the view's history of navigated web pages.</db:para>
</db:section>
<db:section xml:id="iconChanged">
<db:title>[since 5.7] void QWebEnginePage::iconChanged(const QIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>iconChanged</db:methodname>
<db:methodparam>
<db:type>const QIcon &amp;</db:type>
<db:parameter>icon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">icon</db:synopsisinfo>
<db:synopsisinfo role="signature">void iconChanged(const QIcon &amp;icon)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the icon (&quot;favicon&quot;) associated with the page is changed. The new icon is specified by <db:code role="parameter">icon</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qwebenginepage.xml#icon-prop">icon</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#icon-prop">icon</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#iconUrl-prop">iconUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#iconUrlChanged">iconUrlChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iconUrlChanged">
<db:title>void QWebEnginePage::iconUrlChanged(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>iconUrlChanged</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">iconUrl</db:synopsisinfo>
<db:synopsisinfo role="signature">void iconUrlChanged(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the URL of the icon (&quot;favicon&quot;) associated with the page is changed. The new URL is specified by <db:code role="parameter">url</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qwebenginepage.xml#iconUrl-prop">iconUrl</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#iconUrl-prop">iconUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#icon-prop">icon</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#iconChanged">iconChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inspectedPage">
<db:title>[since 5.11] QWebEnginePage *QWebEnginePage::inspectedPage() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEnginePage *</db:type>
<db:methodname>inspectedPage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEnginePage * inspectedPage() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the page this page is inspecting, if any.</db:para>
<db:para>Returns <db:code>nullptr</db:code> if this page is not a developer tools page.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#setInspectedPage">setInspectedPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#devToolsPage">devToolsPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="javaScriptAlert">
<db:title>[virtual protected] void QWebEnginePage::javaScriptAlert(const QUrl &amp;<db:emphasis>securityOrigin</db:emphasis>, const QString &amp;<db:emphasis>msg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>javaScriptAlert</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>securityOrigin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>msg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void javaScriptAlert(const QUrl &amp;securityOrigin, const QString &amp;msg)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called whenever a JavaScript program running in a frame affiliated with <db:code role="parameter">securityOrigin</db:code> calls the <db:code>alert()</db:code> function with the message <db:code role="parameter">msg</db:code>.</db:para>
<db:para>The default implementation shows the message, <db:code role="parameter">msg</db:code>, with <db:link xlink:href="qmessagebox.xml#information">QMessageBox::information</db:link>.</db:para>
</db:section>
<db:section xml:id="javaScriptConfirm">
<db:title>[virtual protected] bool QWebEnginePage::javaScriptConfirm(const QUrl &amp;<db:emphasis>securityOrigin</db:emphasis>, const QString &amp;<db:emphasis>msg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>javaScriptConfirm</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>securityOrigin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>msg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool javaScriptConfirm(const QUrl &amp;securityOrigin, const QString &amp;msg)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called whenever a JavaScript program running in a frame affiliated with <db:code role="parameter">securityOrigin</db:code> calls the <db:code>confirm()</db:code> function with the message <db:code role="parameter">msg</db:code>. Returns <db:code>true</db:code> if the user confirms the message; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>It is also called when the <db:code>onbeforeunload</db:code> handler is requesting a confirmation before leaving a page.</db:para>
<db:para>The default implementation executes the query using <db:link xlink:href="qmessagebox.xml#information">QMessageBox::information</db:link> with <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Ok</db:link> and <db:link xlink:href="qmessagebox.xml#StandardButton-enum">QMessageBox::Cancel</db:link> buttons.</db:para>
</db:section>
<db:section xml:id="javaScriptConsoleMessage">
<db:title>[virtual protected] void QWebEnginePage::javaScriptConsoleMessage(QWebEnginePage::JavaScriptConsoleMessageLevel <db:emphasis>level</db:emphasis>, const QString &amp;<db:emphasis>message</db:emphasis>, int <db:emphasis>lineNumber</db:emphasis>, const QString &amp;<db:emphasis>sourceID</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>javaScriptConsoleMessage</db:methodname>
<db:methodparam>
<db:type>QWebEnginePage::JavaScriptConsoleMessageLevel</db:type>
<db:parameter>level</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineNumber</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>sourceID</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void javaScriptConsoleMessage(QWebEnginePage::JavaScriptConsoleMessageLevel level, const QString &amp;message, int lineNumber, const QString &amp;sourceID)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called when a JavaScript program tries to print the <db:code role="parameter">message</db:code> to the web browser's console.</db:para>
<db:para>For example, in case of evaluation errors the source URL may be provided in <db:code role="parameter">sourceID</db:code> as well as the <db:code role="parameter">lineNumber</db:code>.</db:para>
<db:para><db:code role="parameter">level</db:code> indicates the severity of the event that triggered the message. That is, whether it was triggered by an error or a less severe event.</db:para>
<db:para>Since Qt 5.6, the default implementation logs the messages in a <db:code>js</db:code> <db:link xlink:href="qloggingcategory.xml">logging category</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwebengine-debugging.xml#console-logging">Console Logging</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="javaScriptPrompt">
<db:title>[virtual protected] bool QWebEnginePage::javaScriptPrompt(const QUrl &amp;<db:emphasis>securityOrigin</db:emphasis>, const QString &amp;<db:emphasis>msg</db:emphasis>, const QString &amp;<db:emphasis>defaultValue</db:emphasis>, QString *<db:emphasis>result</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>javaScriptPrompt</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>securityOrigin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>msg</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>defaultValue</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>result</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool javaScriptPrompt(const QUrl &amp;securityOrigin, const QString &amp;msg, const QString &amp;defaultValue, QString *result)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called whenever a JavaScript program running in a frame affiliated with <db:code role="parameter">securityOrigin</db:code> tries to prompt the user for input. The program may provide an optional message, <db:code role="parameter">msg</db:code>, as well as a default value for the input in <db:code role="parameter">defaultValue</db:code>.</db:para>
<db:para>If the prompt was cancelled by the user, the implementation should return <db:code>false</db:code>; otherwise the result should be written to <db:code role="parameter">result</db:code> and <db:code>true</db:code> should be returned. If the prompt was not cancelled by the user, the implementation should return <db:code>true</db:code> and the result string must not be null.</db:para>
<db:para>The default implementation uses <db:link xlink:href="qinputdialog.xml#getText">QInputDialog::getText</db:link>().</db:para>
</db:section>
<db:section xml:id="linkHovered">
<db:title>void QWebEnginePage::linkHovered(const QString &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>linkHovered</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void linkHovered(const QString &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the mouse hovers over a link. <db:code role="parameter">url</db:code> contains the target URL of the link.</db:para>
</db:section>
<db:section xml:id="load">
<db:title>void QWebEnginePage::load(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void load(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads <db:code role="parameter">url</db:code> into this page.</db:para>
<db:note>
<db:para>The view remains the same until enough data has arrived to display the new URL.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#url-prop">setUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#setHtml">setHtml</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#setContent">setContent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="load-1">
<db:title>[since 5.9] void QWebEnginePage::load(const QWebEngineHttpRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QWebEngineHttpRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void load(const QWebEngineHttpRequest &amp;request)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Issues the specified <db:code role="parameter">request</db:code> and loads the response.</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#load">load</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#url-prop">setUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#url-prop">url</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#urlChanged">urlChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qurl.xml#fromUserInput">QUrl::fromUserInput</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadFinished">
<db:title>void QWebEnginePage::loadFinished(bool <db:emphasis>ok</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loadFinished</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void loadFinished(bool ok)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the page finishes loading content. This signal is independent of script execution or page rendering. <db:code role="parameter">ok</db:code> will indicate whether the load was successful or any error occurred.</db:para>
<db:note>
<db:para>Navigation requests can be delegated to the Qt application instead of having the HTML handler engine process them by overloading the <db:link xlink:href="qwebenginepage.xml#acceptNavigationRequest">acceptNavigationRequest</db:link>() function. Because the loading process is started and the <db:link xlink:href="qwebenginepage.xml#loadStarted">loadStarted</db:link>() signal is emitted <db:emphasis>before</db:emphasis> the request is accepted or rejected, a <db:code>loadFinished()</db:code> signal that returns <db:code>false</db:code> is to be expected even after delegating the request.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#loadStarted">loadStarted</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#acceptNavigationRequest">acceptNavigationRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadProgress">
<db:title>void QWebEnginePage::loadProgress(int <db:emphasis>progress</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loadProgress</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>progress</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void loadProgress(int progress)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the global progress status changes. The current value is provided by <db:code role="parameter">progress</db:code> and scales from 0 to 100, which is the default range of <db:link xlink:href="qprogressbar.xml">QProgressBar</db:link>. It accumulates changes from all the child frames.</db:para>
</db:section>
<db:section xml:id="loadStarted">
<db:title>void QWebEnginePage::loadStarted()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loadStarted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void loadStarted()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a page starts loading content.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#loadFinished">loadFinished</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#acceptNavigationRequest">acceptNavigationRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pdfPrintingFinished">
<db:title>[since 5.9] void QWebEnginePage::pdfPrintingFinished(const QString &amp;<db:emphasis>filePath</db:emphasis>, bool <db:emphasis>success</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pdfPrintingFinished</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filePath</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>success</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pdfPrintingFinished(const QString &amp;filePath, bool success)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when printing the web page into a PDF file has finished. <db:code role="parameter">filePath</db:code> will contain the path the file was requested to be created at, and <db:code role="parameter">success</db:code> will be <db:code>true</db:code> if the file was successfully created and <db:code>false</db:code> otherwise.</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#printToPdf">printToPdf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="print">
<db:title>[since 5.8] void QWebEnginePage::print(QPrinter *<db:emphasis>printer</db:emphasis>, const QWebEngineCallback&lt;bool&gt; &amp;<db:emphasis>resultCallback</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>print</db:methodname>
<db:methodparam>
<db:type>QPrinter *</db:type>
<db:parameter>printer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QWebEngineCallback&lt;bool&gt; &amp;</db:type>
<db:parameter>resultCallback</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void print(QPrinter *printer, const QWebEngineCallback&lt;bool&gt; &amp;resultCallback)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Renders the current content of the page into a temporary PDF document, then prints it using <db:code role="parameter">printer</db:code>.</db:para>
<db:para>The settings for creating and printing the PDF document will be retrieved from the <db:code role="parameter">printer</db:code> object. It is the users responsibility to ensure the <db:code role="parameter">printer</db:code> remains valid until <db:code role="parameter">resultCallback</db:code> has been called.</db:para>
<db:note>
<db:para>The rendering of the current content into a temporary PDF document is asynchronous and does not block the main thread. However, the subsequent rendering of PDF into <db:code role="parameter">printer</db:code> runs on the main thread and will therefore block the event loop. Moreover, printing runs on the browser process, which is by default not sandboxed.</db:para>
</db:note>
<db:para>The <db:code role="parameter">resultCallback</db:code> must take a boolean as parameter. If printing was successful, this boolean will have the value <db:code>true</db:code>, otherwise, its value will be <db:code>false</db:code>.</db:para>
<db:warning>
<db:para>We guarantee that the callback (<db:code role="parameter">resultCallback</db:code>) is always called, but it might be done during page destruction. When <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> is deleted, the callback is triggered with an invalid value and it is not safe to use the corresponding <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> or <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> instance inside it.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="printRequested">
<db:title>[since 5.12] void QWebEnginePage::printRequested()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>printRequested</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void printRequested()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the JavaScript <db:code>window.print()</db:code> method is called. Typically, the signal handler can simply call <db:link xlink:href="qwebenginepage.xml#printToPdf">printToPdf</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#printToPdf">printToPdf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="printToPdf">
<db:title>[since 5.7] void QWebEnginePage::printToPdf(const QString &amp;<db:emphasis>filePath</db:emphasis>, const QPageLayout &amp;<db:emphasis>pageLayout</db:emphasis> = QPageLayout(QPageSize(QPageSize::A4), QPageLayout::Portrait, QMarginsF()))</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>printToPdf</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filePath</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPageLayout &amp;</db:type>
<db:parameter>pageLayout</db:parameter>
<db:initializer>QPageLayout(QPageSize(QPageSize::A4), QPageLayout::Portrait, QMarginsF())</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void printToPdf(const QString &amp;filePath, const QPageLayout &amp;pageLayout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Renders the current content of the page into a PDF document and saves it in the location specified in <db:code role="parameter">filePath</db:code>. The page size and orientation of the produced PDF document are taken from the values specified in <db:code role="parameter">pageLayout</db:code>.</db:para>
<db:para>This method issues an asynchronous request for printing the web page into a PDF and returns immediately. To be informed about the result of the request, connect to the signal <db:link xlink:href="qwebenginepage.xml#pdfPrintingFinished">pdfPrintingFinished</db:link>().</db:para>
<db:para>If a file already exists at the provided file path, it will be overwritten.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#pdfPrintingFinished">pdfPrintingFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="printToPdf-1">
<db:title>[since 5.7] void QWebEnginePage::printToPdf(const QWebEngineCallback&lt;const QByteArray &amp;&gt; &amp;<db:emphasis>resultCallback</db:emphasis>, const QPageLayout &amp;<db:emphasis>pageLayout</db:emphasis> = QPageLayout(QPageSize(QPageSize::A4), QPageLayout::Portrait, QMarginsF()))</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>printToPdf</db:methodname>
<db:methodparam>
<db:type>const QWebEngineCallback&lt;const QByteArray &amp;&gt; &amp;</db:type>
<db:parameter>resultCallback</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPageLayout &amp;</db:type>
<db:parameter>pageLayout</db:parameter>
<db:initializer>QPageLayout(QPageSize(QPageSize::A4), QPageLayout::Portrait, QMarginsF())</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void printToPdf(const QWebEngineCallback&lt;const QByteArray &amp;&gt; &amp;resultCallback, const QPageLayout &amp;pageLayout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Renders the current content of the page into a PDF document and returns a byte array containing the PDF data as parameter to <db:code role="parameter">resultCallback</db:code>. The page size and orientation of the produced PDF document are taken from the values specified in <db:code role="parameter">pageLayout</db:code>.</db:para>
<db:para>The <db:code role="parameter">resultCallback</db:code> must take a const reference to a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> as parameter. If printing was successful, this byte array will contain the PDF data, otherwise, the byte array will be empty.</db:para>
<db:warning>
<db:para>We guarantee that the callback (<db:code role="parameter">resultCallback</db:code>) is always called, but it might be done during page destruction. When <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> is deleted, the callback is triggered with an invalid value and it is not safe to use the corresponding <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> or <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> instance inside it.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="profile">
<db:title>[since 5.5] QWebEngineProfile *QWebEnginePage::profile() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineProfile *</db:type>
<db:methodname>profile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineProfile * profile() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the web engine profile the page belongs to.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="proxyAuthenticationRequired">
<db:title>void QWebEnginePage::proxyAuthenticationRequired(const QUrl &amp;<db:emphasis>requestUrl</db:emphasis>, QAuthenticator *<db:emphasis>authenticator</db:emphasis>, const QString &amp;<db:emphasis>proxyHost</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>proxyAuthenticationRequired</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>requestUrl</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAuthenticator *</db:type>
<db:parameter>authenticator</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>proxyHost</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void proxyAuthenticationRequired(const QUrl &amp;requestUrl, QAuthenticator *authenticator, const QString &amp;proxyHost)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when access to <db:code role="parameter">requestUrl</db:code> via <db:code role="parameter">proxyHost</db:code> requires authentication for the proxy. <db:code role="parameter">authenticator</db:code> should be used to pass the user name and password for the connection.</db:para>
</db:section>
<db:section xml:id="quotaRequested">
<db:title>[since 5.11] void QWebEnginePage::quotaRequested(QWebEngineQuotaRequest <db:emphasis>quotaRequest</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>quotaRequested</db:methodname>
<db:methodparam>
<db:type>QWebEngineQuotaRequest</db:type>
<db:parameter>quotaRequest</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void quotaRequested(QWebEngineQuotaRequest quotaRequest)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the web page requests larger persistent storage than the application's current allocation in File System API. The default quota is 0 bytes.</db:para>
<db:para>The request object <db:code role="parameter">quotaRequest</db:code> can be used to accept or reject the request.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
</db:section>
<db:section xml:id="recentlyAudibleChanged">
<db:title>[since 5.7] void QWebEnginePage::recentlyAudibleChanged(bool <db:emphasis>recentlyAudible</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>recentlyAudibleChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>recentlyAudible</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">recentlyAudible</db:synopsisinfo>
<db:synopsisinfo role="signature">void recentlyAudibleChanged(bool recentlyAudible)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the page's audible state, <db:code role="parameter">recentlyAudible</db:code>, changes, because the audio is played or stopped.</db:para>
<db:note>
<db:para>The signal is also emitted when calling the <db:link xlink:href="qwebenginepage.xml#audioMuted-prop">setAudioMuted</db:link>() method. Also, if the audio is paused, this signal is emitted with an approximate <db:emphasis role="bold">two-second delay</db:emphasis>, from the moment the audio is paused.</db:para>
</db:note>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qwebenginepage.xml#recentlyAudible-prop">recentlyAudible</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="registerProtocolHandlerRequested">
<db:title>[since 5.11] void QWebEnginePage::registerProtocolHandlerRequested(QWebEngineRegisterProtocolHandlerRequest <db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>registerProtocolHandlerRequested</db:methodname>
<db:methodparam>
<db:type>QWebEngineRegisterProtocolHandlerRequest</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void registerProtocolHandlerRequested(QWebEngineRegisterProtocolHandlerRequest request)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the web page tries to register a custom protocol using the <db:link xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler">registerProtocolHandler</db:link> API.</db:para>
<db:para>The request object <db:code role="parameter">request</db:code> can be used to accept or reject the request:</db:para>
<db:programlisting language="cpp">void WebPage::handleRegisterProtocolHandlerRequested(QWebEngineRegisterProtocolHandlerRequest request)
{
    auto answer = QMessageBox::question(
        view()-&amp;gt;window(),
        tr(&quot;Permission Request&quot;),
        tr(&quot;Allow %1 to open all %2 links?&quot;)
        .arg(request.origin().host())
        .arg(request.scheme()));
    if (answer == QMessageBox::Yes)
        request.accept();
    else
        request.reject();
}
</db:programlisting>
<db:para>This function was introduced in Qt 5.11.</db:para>
</db:section>
<db:section xml:id="renderProcessTerminated">
<db:title>[since 5.6] void QWebEnginePage::renderProcessTerminated(QWebEnginePage::RenderProcessTerminationStatus <db:emphasis>terminationStatus</db:emphasis>, int <db:emphasis>exitCode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>renderProcessTerminated</db:methodname>
<db:methodparam>
<db:type>QWebEnginePage::RenderProcessTerminationStatus</db:type>
<db:parameter>terminationStatus</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>exitCode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void renderProcessTerminated(QWebEnginePage::RenderProcessTerminationStatus terminationStatus, int exitCode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the render process is terminated with a non-zero exit status. <db:code role="parameter">terminationStatus</db:code> is the termination status of the process and <db:code role="parameter">exitCode</db:code> is the status code with which the process terminated.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="replaceMisspelledWord">
<db:title>[since 5.8] void QWebEnginePage::replaceMisspelledWord(const QString &amp;<db:emphasis>replacement</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replaceMisspelledWord</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>replacement</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void replaceMisspelledWord(const QString &amp;replacement)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replace the current misspelled word with <db:code role="parameter">replacement</db:code>.</db:para>
<db:para>The current misspelled word can be found in <db:link xlink:href="qwebenginecontextmenudata.xml#misspelledWord">QWebEngineContextMenuData::misspelledWord</db:link>(), and suggested replacements in <db:link xlink:href="qwebenginecontextmenudata.xml#spellCheckerSuggestions">QWebEngineContextMenuData::spellCheckerSuggestions</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#contextMenuData">contextMenuData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="save">
<db:title>[since 5.8] void QWebEnginePage::save(const QString &amp;<db:emphasis>filePath</db:emphasis>, QWebEngineDownloadItem::SavePageFormat <db:emphasis>format</db:emphasis> = QWebEngineDownloadItem::MimeHtmlSaveFormat) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>save</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filePath</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWebEngineDownloadItem::SavePageFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>QWebEngineDownloadItem::MimeHtmlSaveFormat</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void save(const QString &amp;filePath, QWebEngineDownloadItem::SavePageFormat format) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Save the currently loaded web page to disk.</db:para>
<db:para>The web page is saved to <db:code role="parameter">filePath</db:code> in the specified <db:code role="parameter">format</db:code>.</db:para>
<db:para>This is a short cut for the following actions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Trigger the Save web action.</db:para>
</db:listitem>
<db:listitem>
<db:para>Accept the next download item and set the specified file path and save format.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This function issues an asynchronous download request for the web page and returns immediately.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginedownloaditem.xml#SavePageFormat-enum">QWebEngineDownloadItem::SavePageFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scripts">
<db:title>QWebEngineScriptCollection &amp;QWebEnginePage::scripts()</db:title>
<db:methodsynopsis>
<db:type>QWebEngineScriptCollection &amp;</db:type>
<db:methodname>scripts</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineScriptCollection &amp; scripts()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the collection of scripts that are injected into the page.</db:para>
<db:para>In addition, a page might also execute scripts added through <db:link xlink:href="qwebengineprofile.xml#scripts">QWebEngineProfile::scripts</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescriptcollection.xml">QWebEngineScriptCollection</db:link></db:member>
<db:member><db:link xlink:href="qwebenginescript.xml">QWebEngineScript</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-overview.xml#script-injection">Script Injection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectClientCertificate">
<db:title>[since 5.12] void QWebEnginePage::selectClientCertificate(QWebEngineClientCertificateSelection <db:emphasis>clientCertificateSelection</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectClientCertificate</db:methodname>
<db:methodparam>
<db:type>QWebEngineClientCertificateSelection</db:type>
<db:parameter>clientCertificateSelection</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectClientCertificate(QWebEngineClientCertificateSelection clientCertificateSelection)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a web site requests an SSL client certificate, and one or more were found in system's client certificate store.</db:para>
<db:para>Handling the signal is asynchronous, and loading will be waiting until a certificate is selected, or the last copy of <db:code role="parameter">clientCertificateSelection</db:code> is destroyed.</db:para>
<db:para>If the signal is not handled, <db:code role="parameter">clientCertificateSelection</db:code> is automatically destroyed, and loading will continue without a client certificate.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineclientcertificateselection.xml">QWebEngineClientCertificateSelection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionChanged">
<db:title>void QWebEnginePage::selectionChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectionChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectionChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the selection changes, either interactively or programmatically. For example, by calling <db:link xlink:href="qwebenginepage.xml#triggerAction">triggerAction</db:link>() with a selection action.</db:para>
<db:note>
<db:para>When using the mouse to select text by left-clicking and dragging, the signal will be emitted for each new character selected, and not upon releasing the left mouse button.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#selectedText-prop">selectedText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContent">
<db:title>void QWebEnginePage::setContent(const QByteArray &amp;<db:emphasis>data</db:emphasis>, const QString &amp;<db:emphasis>mimeType</db:emphasis> = QString(), const QUrl &amp;<db:emphasis>baseUrl</db:emphasis> = QUrl())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setContent</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>mimeType</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>baseUrl</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setContent(const QByteArray &amp;data, const QString &amp;mimeType, const QUrl &amp;baseUrl)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the content of the web page to <db:code role="parameter">data</db:code>. If the <db:code role="parameter">mimeType</db:code> argument is empty, it is assumed that the content is <db:code>text/plain,charset=US-ASCII</db:code>.</db:para>
<db:para>External objects referenced in the content are located relative to <db:code role="parameter">baseUrl</db:code>.</db:para>
<db:para>The <db:code role="parameter">data</db:code> is loaded immediately; external objects are loaded asynchronously.</db:para>
<db:note>
<db:para>This method will not affect session or global history for the page.</db:para>
</db:note>
<db:warning>
<db:para>The content will be percent encoded before being sent to the renderer via IPC. This may increase its size. The maximum size of the percent encoded content is 2 megabytes minus 6 bytes plus the length of the mime type string.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#toHtml">toHtml</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#setHtml">setHtml</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevToolsPage">
<db:title>[since 5.11] void QWebEnginePage::setDevToolsPage(QWebEnginePage *<db:emphasis>devToolsPage</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDevToolsPage</db:methodname>
<db:methodparam>
<db:type>QWebEnginePage *</db:type>
<db:parameter>devToolsPage</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDevToolsPage(QWebEnginePage *devToolsPage)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Binds <db:code role="parameter">devToolsPage</db:code> to be the developer tools of this page. Triggers <db:code role="parameter">devToolsPage</db:code> to navigate to an internal URL with the developer tools.</db:para>
<db:para>This is the same as calling <db:link xlink:href="qwebenginepage.xml#setInspectedPage">setInspectedPage</db:link>() on <db:code role="parameter">devToolsPage</db:code> with <db:code>this</db:code> as argument.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#devToolsPage">devToolsPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#setInspectedPage">setInspectedPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFeaturePermission">
<db:title>void QWebEnginePage::setFeaturePermission(const QUrl &amp;<db:emphasis>securityOrigin</db:emphasis>, QWebEnginePage::Feature <db:emphasis>feature</db:emphasis>, QWebEnginePage::PermissionPolicy <db:emphasis>policy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFeaturePermission</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>securityOrigin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWebEnginePage::Feature</db:type>
<db:parameter>feature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWebEnginePage::PermissionPolicy</db:type>
<db:parameter>policy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFeaturePermission(const QUrl &amp;securityOrigin, QWebEnginePage::Feature feature, QWebEnginePage::PermissionPolicy policy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the permission for the web site identified by <db:code role="parameter">securityOrigin</db:code> to use <db:code role="parameter">feature</db:code> to <db:code role="parameter">policy</db:code>.</db:para>
<db:note>
<db:para>Call this method on the <db:link xlink:href="qwebenginepage.xml#featurePermissionRequested">featurePermissionRequested</db:link>() signal, as it is meant to serve pending feature requests only. Setting feature permissions ahead of a request has no effect.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#featurePermissionRequested">featurePermissionRequested</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#featurePermissionRequestCanceled">featurePermissionRequestCanceled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHtml">
<db:title>void QWebEnginePage::setHtml(const QString &amp;<db:emphasis>html</db:emphasis>, const QUrl &amp;<db:emphasis>baseUrl</db:emphasis> = QUrl())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHtml</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>html</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>baseUrl</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHtml(const QString &amp;html, const QUrl &amp;baseUrl)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the content of this page to <db:code role="parameter">html</db:code>. <db:code role="parameter">baseUrl</db:code> is optional and used to resolve relative URLs in the document, such as referenced images or stylesheets.</db:para>
<db:para>The <db:code role="parameter">html</db:code> is loaded immediately; external objects are loaded asynchronously.</db:para>
<db:para>If a script in the <db:code role="parameter">html</db:code> runs longer than the default script timeout (currently 10 seconds), for example due to being blocked by a modal JavaScript alert dialog, this method will return as soon as possible after the timeout and any subsequent <db:code role="parameter">html</db:code> will be loaded asynchronously.</db:para>
<db:para>When using this method, the web engine assumes that external resources, such as JavaScript programs or style sheets, are encoded in UTF-8 unless otherwise specified. For example, the encoding of an external script can be specified through the charset attribute of the HTML script tag. It is also possible for the encoding to be specified by the web server.</db:para>
<db:para>This is a convenience function equivalent to <db:link xlink:href="qwebenginepage.xml#setContent">setContent</db:link>(html, &quot;text/html&quot;, baseUrl).</db:para>
<db:note>
<db:para>This method will not affect session or global history for the page.</db:para>
</db:note>
<db:warning>
<db:para>This function works only for HTML, for other mime types (such as XHTML and SVG) <db:link xlink:href="qwebenginepage.xml#setContent">setContent</db:link>() should be used instead.</db:para>
</db:warning>
<db:warning>
<db:para>The content will be percent encoded before being sent to the renderer via IPC. This may increase its size. The maximum size of the percent encoded content is 2 megabytes minus 30 bytes.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#toHtml">toHtml</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#setContent">setContent</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setInspectedPage">
<db:title>[since 5.11] void QWebEnginePage::setInspectedPage(QWebEnginePage *<db:emphasis>page</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setInspectedPage</db:methodname>
<db:methodparam>
<db:type>QWebEnginePage *</db:type>
<db:parameter>page</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInspectedPage(QWebEnginePage *page)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Navigates this page to an internal URL that is the developer tools of <db:code role="parameter">page</db:code>.</db:para>
<db:para>This is the same as calling <db:link xlink:href="qwebenginepage.xml#setDevToolsPage">setDevToolsPage</db:link>() on <db:code role="parameter">page</db:code> with <db:code>this</db:code> as argument.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#inspectedPage">inspectedPage</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#setDevToolsPage">setDevToolsPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setView">
<db:title>void QWebEnginePage::setView(QWidget *<db:emphasis>view</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setView</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>view</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setView(QWidget *view)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">view</db:code> that is associated with the web page.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#view">view</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWebChannel">
<db:title>[since 5.7] void QWebEnginePage::setWebChannel(QWebChannel *<db:emphasis>channel</db:emphasis>, uint <db:emphasis>worldId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWebChannel</db:methodname>
<db:methodparam>
<db:type>QWebChannel *</db:type>
<db:parameter>channel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>worldId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWebChannel(QWebChannel *channel, uint worldId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the web channel instance to be used by this page to <db:code role="parameter">channel</db:code> and connects it to web engine's transport using Chromium IPC messages. The transport is exposed in the JavaScript world <db:code role="parameter">worldId</db:code> as <db:code>qt.webChannelTransport</db:code>, which should be used when using the <db:link xlink:href="qtwebchannel-javascript.xml">Qt WebChannel JavaScript API</db:link>.</db:para>
<db:note>
<db:para>The page does not take ownership of the channel object.</db:para>
</db:note>
<db:note>
<db:para>Only one web channel can be installed per page, setting one even in another JavaScript world uninstalls any already installed web channel.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#webChannel">webChannel</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginescript.xml#ScriptWorldId-enum">QWebEngineScript::ScriptWorldId</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWebChannel-1">
<db:title>[since 5.5] void QWebEnginePage::setWebChannel(QWebChannel *<db:emphasis>channel</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWebChannel</db:methodname>
<db:methodparam>
<db:type>QWebChannel *</db:type>
<db:parameter>channel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWebChannel(QWebChannel *channel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the web channel instance to be used by this page to <db:code role="parameter">channel</db:code> and installs it in the main JavaScript world.</db:para>
<db:para>With this method the web channel can be accessed by web page content. If the content is not under your control and might be hostile, this could be a security issue and you should consider installing it in a private JavaScript world.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescript.xml#ScriptWorldId-enum">QWebEngineScript::MainWorld</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="settings">
<db:title>QWebEngineSettings *QWebEnginePage::settings() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineSettings *</db:type>
<db:methodname>settings</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineSettings * settings() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the page's settings object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginesettings.xml#globalSettings" role="deprecated">QWebEngineSettings::globalSettings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="titleChanged">
<db:title>void QWebEnginePage::titleChanged(const QString &amp;<db:emphasis>title</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>titleChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void titleChanged(const QString &amp;title)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the title of the page changes. The <db:code role="parameter">title</db:code> string specifies the new title.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#title-prop">title</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toHtml">
<db:title>void QWebEnginePage::toHtml(const QWebEngineCallback&lt;const QString &amp;&gt; &amp;<db:emphasis>resultCallback</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>toHtml</db:methodname>
<db:methodparam>
<db:type>const QWebEngineCallback&lt;const QString &amp;&gt; &amp;</db:type>
<db:parameter>resultCallback</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void toHtml(const QWebEngineCallback&lt;const QString &amp;&gt; &amp;resultCallback) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Asynchronous method to retrieve the page's content as HTML, enclosed in HTML and BODY tags. Upon successful completion, <db:code role="parameter">resultCallback</db:code> is called with the page's content.</db:para>
<db:note>
<db:para><db:code role="parameter">resultCallback</db:code> can be any of a function pointer, a functor or a lambda, and it is expected to take a <db:link xlink:href="qstring.xml">QString</db:link> parameter.</db:para>
</db:note>
<db:warning>
<db:para>We guarantee that the callback (<db:code role="parameter">resultCallback</db:code>) is always called, but it might be done during page destruction. When <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> is deleted, the callback is triggered with an invalid value and it is not safe to use the corresponding <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> or <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> instance inside it.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#setHtml">setHtml</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#toPlainText">toPlainText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toPlainText">
<db:title>void QWebEnginePage::toPlainText(const QWebEngineCallback&lt;const QString &amp;&gt; &amp;<db:emphasis>resultCallback</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>toPlainText</db:methodname>
<db:methodparam>
<db:type>const QWebEngineCallback&lt;const QString &amp;&gt; &amp;</db:type>
<db:parameter>resultCallback</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void toPlainText(const QWebEngineCallback&lt;const QString &amp;&gt; &amp;resultCallback) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Asynchronous method to retrieve the page's content converted to plain text, completely stripped of all HTML formatting. Upon successful completion, <db:code role="parameter">resultCallback</db:code> is called with the page's content.</db:para>
<db:note>
<db:para><db:code role="parameter">resultCallback</db:code> can be any of a function pointer, a functor or a lambda, and it is expected to take a <db:link xlink:href="qstring.xml">QString</db:link> parameter.</db:para>
</db:note>
<db:warning>
<db:para>We guarantee that the callback (<db:code role="parameter">resultCallback</db:code>) is always called, but it might be done during page destruction. When <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> is deleted, the callback is triggered with an invalid value and it is not safe to use the corresponding <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> or <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> instance inside it.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#toHtml">toHtml</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="triggerAction">
<db:title>[virtual] void QWebEnginePage::triggerAction(QWebEnginePage::WebAction <db:emphasis>action</db:emphasis>, bool <db:emphasis>checked</db:emphasis> = false)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>triggerAction</db:methodname>
<db:methodparam>
<db:type>QWebEnginePage::WebAction</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>checked</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void triggerAction(QWebEnginePage::WebAction action, bool checked)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function can be called to trigger the specified <db:code role="parameter">action</db:code>. It is also called by Qt WebEngine if the user triggers the action, for example through a context menu item.</db:para>
<db:para>If <db:code role="parameter">action</db:code> is a checkable action, then <db:code role="parameter">checked</db:code> specifies whether the action is toggled or not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#action">action</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="urlChanged">
<db:title>void QWebEnginePage::urlChanged(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>urlChanged</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void urlChanged(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted with the URL of the page when the page title is received. The new URL is specified by <db:code role="parameter">url</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#url-prop">url</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="view">
<db:title>QWidget *QWebEnginePage::view() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>view</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * view() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the view widget that is associated with the web page.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#setView">setView</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="webChannel">
<db:title>[since 5.5] QWebChannel *QWebEnginePage::webChannel() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebChannel *</db:type>
<db:methodname>webChannel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebChannel * webChannel() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the web channel instance used by this page or a null pointer if none was set. This channel automatically uses the internal web engine transport mechanism over Chromium IPC that is exposed in the JavaScript context of this page as <db:code>qt.webChannelTransport</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#setWebChannel">setWebChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowCloseRequested">
<db:title>void QWebEnginePage::windowCloseRequested()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>windowCloseRequested</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void windowCloseRequested()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the page requests the web browser window to be closed, for example through the JavaScript <db:code>window.close()</db:code> call.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginepage.xml#WebAction-enum">RequestClose</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
