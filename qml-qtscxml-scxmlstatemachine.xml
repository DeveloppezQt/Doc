<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ScxmlStateMachine QML Type</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SCXML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides an interface to the state machines created from SCXML files.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtScxml 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiates:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qscxmlstatemachine.xml">QScxmlStateMachine</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtscxml-scxmlstatemachine.xml">ScxmlStateMachine</db:link> type is an implementation of the <db:link xlink:href="http://www.w3.org/TR/scxml/">State Chart XML (SCXML)</db:link>.</db:para>
<db:para>All states that are defined in the SCXML file are accessible as properties of this type. These properties are boolean values and indicate whether the state is active or inactive.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="dataModel-prop">
<db:title>dataModel : ScxmlDataModel</db:title>
<db:fieldsynopsis>
<db:type>ScxmlDataModel</db:type>
<db:varname>dataModel</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The data model to be used for this state machine.</db:para>
<db:para>SCXML data models are described in <db:link xlink:href="https://www.w3.org/TR/scxml/#data-module">SCXML Specification - 5 Data Model and Data Manipulation</db:link>. For more information about supported data models, see <db:link xlink:href="qtscxml-scxml-compliance.xml">SCXML Compliance</db:link>.</db:para>
<db:para>Changing the data model when the state machine has been <db:link xlink:href="qml-qtscxml-scxmlstatemachine.xml#initialized-prop">initialized</db:link> is not specified in the SCXML standard and leads to undefined behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmldatamodel.xml">QScxmlDataModel</db:link></db:member>
<db:member><db:link xlink:href="qscxmlnulldatamodel.xml">QScxmlNullDataModel</db:link></db:member>
<db:member><db:link xlink:href="qscxmlcppdatamodel.xml">QScxmlCppDataModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initialValues-prop">
<db:title>initialValues : var</db:title>
<db:fieldsynopsis>
<db:type>var</db:type>
<db:varname>initialValues</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The initial values to be used for setting up the data model.</db:para>
</db:section>
<db:section xml:id="initialized-prop">
<db:title>[read-only] initialized : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>initialized</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This read-only property is set to <db:code>true</db:code> if the state machine has been initialized, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="invoked-prop">
<db:title>[read-only] invoked : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>invoked</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Whether the state machine was invoked from an outer state machine.</db:para>
<db:para>This read-only property is set to <db:code>true</db:code> when the state machine was started as a service with the <db:code>&lt;invoke&gt;</db:code> element, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="invokedServices-prop">
<db:title>[read-only] invokedServices : list</db:title>
<db:fieldsynopsis>
<db:type>list</db:type>
<db:varname>invokedServices</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>A list of SCXML services that were invoked from the main state machine (possibly recursively).</db:para>
</db:section>
<db:section xml:id="loader-prop">
<db:title>loader : Loader</db:title>
<db:fieldsynopsis>
<db:type>Loader</db:type>
<db:varname>loader</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The loader that is currently used to resolve and load URIs for the state machine.</db:para>
</db:section>
<db:section xml:id="name-prop">
<db:title>[read-only] name : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>name</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The name of the state machine as set by the <db:emphasis>name</db:emphasis> attribute of the <db:code>&lt;scxml&gt;</db:code> tag.</db:para>
</db:section>
<db:section xml:id="parseErrors-prop">
<db:title>[read-only] parseErrors : var</db:title>
<db:fieldsynopsis>
<db:type>var</db:type>
<db:varname>parseErrors</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The list of parse errors that occurred while creating a state machine from an SCXML file.</db:para>
</db:section>
<db:section xml:id="running-prop">
<db:title>running : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>running</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The running state of this state machine.</db:para>
</db:section>
<db:section xml:id="sessionId-prop">
<db:title>[read-only] sessionId : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>sessionId</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The session ID of the current state machine.</db:para>
<db:para>The session ID is used for message routing between parent and child state machines. If a state machine is started by an <db:code>&lt;invoke&gt;</db:code> element, any event it sends will have the <db:code>invokeid</db:code> field set to the session ID. The state machine will use the origin of an event (which is set by the <db:emphasis>target</db:emphasis> or <db:emphasis>targetexpr</db:emphasis> attribute in a <db:code>&lt;send&gt;</db:code> element) to dispatch messages to the correct child state machine.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="finished-signal">
<db:title>finished()</db:title>
<db:para>This signal is emitted when the state machine reaches a top-level final state.</db:para>
<db:para>The corresponding signal handler is <db:code>onFinished()</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onFinished</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="log-signal">
<db:title>log(string <db:emphasis>label</db:emphasis>, string <db:emphasis>msg</db:emphasis>)</db:title>
<db:para>This signal is emitted if a <db:code>&lt;log&gt;</db:code> tag is used in the SCXML. <db:code role="parameter">label</db:code> is the value of the <db:emphasis>label</db:emphasis> attribute of the <db:code>&lt;log&gt;</db:code> tag. <db:code role="parameter">msg</db:code> is the value of the evaluated <db:emphasis>expr</db:emphasis> attribute of the <db:code>&lt;log&gt;</db:code> tag. If there is no <db:emphasis>expr</db:emphasis> attribute, a null string will be returned.</db:para>
<db:para>The corresponding signal handler is <db:code>onLog()</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLog</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="reachedStableState-signal">
<db:title>reachedStableState()</db:title>
<db:para>This signal is emitted when the event queue is empty at the end of a macro step or when a final state is reached.</db:para>
<db:para>The corresponding signal handler is <db:code>onreachedStableState()</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onReachedStableState</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="activeStateNames-method">
<db:title>activeStateNames(bool <db:emphasis>compress</db:emphasis>)</db:title>
<db:para>Retrieves a list of state names of all active states.</db:para>
<db:para>When a state is active, all its parent states are active by definition. When <db:code role="parameter">compress</db:code> is <db:code>true</db:code> (the default), the parent states are filtered out and only the <db:emphasis>leaf states</db:emphasis> are returned. When it is <db:code>false</db:code>, the full list of active states is returned.</db:para>
</db:section>
<db:section xml:id="cancelDelayedEvent-method">
<db:title>cancelDelayedEvent(string <db:emphasis>sendId</db:emphasis>)</db:title>
<db:para>Cancels a delayed event with the specified <db:code role="parameter">sendId</db:code>.</db:para>
</db:section>
<db:section xml:id="init-method">
<db:title>init()</db:title>
<db:para>Initializes the state machine by setting the initial values for <db:code>&lt;data&gt;</db:code> elements and executing any <db:code>&lt;script&gt;</db:code> tags of the <db:code>&lt;scxml&gt;</db:code> tag. The initial data values are taken from the <db:link xlink:href="qml-qtscxml-scxmlstatemachine.xml#initialValues-prop">initialValues</db:link> property.</db:para>
<db:para>Returns <db:code>false</db:code> if parse errors occur or if any of the initialization steps fail. Returns <db:code>true</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="isActive-method">
<db:title>isActive(string <db:emphasis>scxmlStateName</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the state specified by <db:code role="parameter">scxmlStateName</db:code> is active, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="isDispatchableTarget-method">
<db:title>isDispatchableTarget(string <db:emphasis>target</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if a message to <db:code role="parameter">target</db:code> can be dispatched by this state machine.</db:para>
<db:para>Valid targets are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>#_parent</db:code> for the parent state machine if the current state machine is started by <db:code>&lt;invoke&gt;</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>#_internal</db:code> for the current state machine</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>#_scxml_sessionid</db:code>, where <db:code>sessionid</db:code> is the session ID of the current state machine</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>#_servicename</db:code>, where <db:code>servicename</db:code> is the ID or name of a service started with <db:code>&lt;invoke&gt;</db:code> by this state machine</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="start-method">
<db:title>start()</db:title>
<db:para>Starts this state machine. The machine resets its configuration and transitions to the initial state. When a final top-level state is entered, the machine emits the <db:link xlink:href="qml-qtscxml-scxmlstatemachine.xml#finished-signal">finished</db:link>() signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtscxml-scxmlstatemachine.xml#stop-method">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtscxml-scxmlstatemachine.xml#finished-signal">finished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateNames-method">
<db:title>stateNames(bool <db:emphasis>compress</db:emphasis>)</db:title>
<db:para>Retrieves a list of state names of all states.</db:para>
<db:para>When <db:code role="parameter">compress</db:code> is <db:code>true</db:code> (the default), the states that contain child states is filtered out and only the <db:emphasis>leaf states</db:emphasis> is returned. When it is <db:code>false</db:code>, the full list of all states is returned.</db:para>
<db:para>The returned list does not contain the states of possible nested state machines.</db:para>
<db:note>
<db:para>The order of the state names in the list is the order in which the states occurred in the SCXML document.</db:para>
</db:note>
</db:section>
<db:section xml:id="stop-method">
<db:title>stop()</db:title>
<db:para>Stops this state machine. The machine will not execute any further state transitions. Its <db:link xlink:href="qml-qtscxml-scxmlstatemachine.xml#running-prop">running</db:link> property is set to <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtscxml-scxmlstatemachine.xml#start-method">start</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtscxml-scxmlstatemachine.xml#finished-signal">finished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="submitEvent-method">
<db:title>submitEvent(<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Submits the SCXML event <db:code role="parameter">event</db:code> to the internal or external event queue depending on the priority of the event.</db:para>
<db:para>When a delay is set, the event will be queued for delivery after the timeout has passed. The state machine takes ownership of the event and deletes it after processing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscxmlevent.xml">QScxmlEvent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="submitEvent-method-1">
<db:title>submitEvent(string <db:emphasis>eventName</db:emphasis>, var <db:emphasis>data</db:emphasis>)</db:title>
<db:para>A utility method to create and submit an external event with the specified <db:code role="parameter">eventName</db:code> as the name and <db:code role="parameter">data</db:code> as the payload data (optional).</db:para>
</db:section>
</db:section>
</db:article>
