<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCameraControl Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcameracontrol.xml">QCameraControl</db:link> class is an abstract base class for classes that control still cameras or video cameras.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCameraControl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediacontrol.xml" xlink:role="class">QMediaControl</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCameraControl is part of <db:simplelist><db:member>multimedia_control</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This service is provided by a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link> object via QMediaService::control(). It is used by <db:link xlink:href="qcamera.xml">QCamera</db:link>.</db:para>
<db:para>The interface name of <db:link xlink:href="qcameracontrol.xml">QCameraControl</db:link> is <db:code>org.qt-project.qt.cameracontrol/5.0</db:code> as defined in <db:link xlink:href="qcameracontrol.xml#QCameraControl_iid">QCameraControl_iid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaservice.xml#requestControl">QMediaService::requestControl</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml">QCamera</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PropertyChangeType-enum">
<db:title>enum QCameraControl::PropertyChangeType</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcameracontrol.xml">QCameraControl</db:link></db:emphasis>::CaptureMode</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Indicates the capture mode is changed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcameracontrol.xml">QCameraControl</db:link></db:emphasis>::ImageEncodingSettings</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Image encoder settings are changed, including resolution.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcameracontrol.xml">QCameraControl</db:link></db:emphasis>::VideoEncodingSettings</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Video encoder settings are changed, including audio, video and container settings.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcameracontrol.xml">QCameraControl</db:link></db:emphasis>::Viewfinder</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Viewfinder is changed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcameracontrol.xml">QCameraControl</db:link></db:emphasis>::ViewfinderSettings</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Viewfinder settings are changed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCameraControl">
<db:title>[explicit protected] QCameraControl::QCameraControl(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a camera control object with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QCameraControl">
<db:title>[virtual noexcept] QCameraControl::~QCameraControl()</db:title>
<db:para>Destruct the camera control object.</db:para>
</db:section>
<db:section xml:id="canChangeProperty">
<db:title>[pure virtual] bool QCameraControl::canChangeProperty(QCameraControl::PropertyChangeType <db:emphasis>changeType</db:emphasis>, QCamera::Status <db:emphasis>status</db:emphasis>) const</db:title>
<db:para>Returns true if backend can effectively apply changing camera properties of <db:code role="parameter">changeType</db:code> type while the camera state is QCamera::Active and camera status matches <db:code role="parameter">status</db:code> parameter.</db:para>
<db:para>If backend doesn't support applying this change in the active state, it will be stopped before the settings are changed and restarted after. Otherwise the backend should apply the change in the current state, with the camera status indicating the progress, if necessary.</db:para>
</db:section>
<db:section xml:id="captureMode">
<db:title>[pure virtual] QCamera::CaptureModes QCameraControl::captureMode() const</db:title>
<db:para>Returns the current capture mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameracontrol.xml#setCaptureMode">setCaptureMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="captureModeChanged">
<db:title>void QCameraControl::captureModeChanged(QCamera::CaptureModes <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Signal emitted when the camera capture <db:code role="parameter">mode</db:code> changes.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>void QCameraControl::error(int <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>)</db:title>
<db:para>Signal emitted when an error occurs with error code <db:code role="parameter">error</db:code> and a description of the error <db:code role="parameter">errorString</db:code>.</db:para>
</db:section>
<db:section xml:id="isCaptureModeSupported">
<db:title>[pure virtual] bool QCameraControl::isCaptureModeSupported(QCamera::CaptureModes <db:emphasis>mode</db:emphasis>) const</db:title>
<db:para>Returns true if the capture <db:code role="parameter">mode</db:code> is suported.</db:para>
</db:section>
<db:section xml:id="setCaptureMode">
<db:title>[pure virtual] void QCameraControl::setCaptureMode(QCamera::CaptureModes <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets the current capture <db:code role="parameter">mode</db:code>.</db:para>
<db:para>The capture mode changes are synchronous and allowed in any camera state.</db:para>
<db:para>If the capture mode is changed while camera is active, it's recommended to change status to <db:link xlink:href="qcamera.xml#Status-enum">QCamera::LoadedStatus</db:link> and start activating the camera in the next event loop with the status changed to <db:link xlink:href="qcamera.xml#Status-enum">QCamera::StartingStatus</db:link>. This allows the capture settings to be applied before camera is started. Than change the status to QCamera::StartedStatus when the capture mode change is done.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameracontrol.xml#captureMode">captureMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setState">
<db:title>[pure virtual] void QCameraControl::setState(QCamera::State <db:emphasis>state</db:emphasis>)</db:title>
<db:para>Sets the camera <db:code role="parameter">state</db:code>.</db:para>
<db:para>State changes are synchronous and indicate user intention, while camera status is used as a feedback mechanism to inform application about backend status. Status changes are reported asynchronously with <db:link xlink:href="qcameracontrol.xml#statusChanged">QCameraControl::statusChanged</db:link>() signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameracontrol.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#State-enum">QCamera::State</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>[pure virtual] QCamera::State QCameraControl::state() const</db:title>
<db:para>Returns the state of the camera service.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcameracontrol.xml#setState">setState</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml#state-prop">QCamera::state</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QCameraControl::stateChanged(QCamera::State <db:emphasis>state</db:emphasis>)</db:title>
<db:para>Signal emitted when the camera <db:code role="parameter">state</db:code> changes.</db:para>
<db:para>In most cases the state chage is caused by <db:link xlink:href="qcameracontrol.xml#setState">QCameraControl::setState</db:link>(), but if critical error has occurred the state changes to <db:link xlink:href="qcamera.xml#State-enum">QCamera::UnloadedState</db:link>.</db:para>
</db:section>
<db:section xml:id="status">
<db:title>[pure virtual] QCamera::Status QCameraControl::status() const</db:title>
<db:para>Returns the status of the camera service.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml#state-prop">QCamera::state</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="statusChanged">
<db:title>void QCameraControl::statusChanged(QCamera::Status <db:emphasis>status</db:emphasis>)</db:title>
<db:para>Signal emitted when the camera <db:code role="parameter">status</db:code> changes.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QCameraControl_iid">
<db:title>QCameraControl_iid</db:title>
<db:para><db:code>org.qt-project.qt.cameracontrol/5.0</db:code></db:para>
<db:para>Defines the interface name of the <db:link xlink:href="qcameracontrol.xml">QCameraControl</db:link> class.</db:para>
</db:section>
</db:section>
</db:article>
