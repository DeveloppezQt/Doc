<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLPixelTransferOptions Class</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopenglpixeltransferoptions.xml">QOpenGLPixelTransferOptions</db:link> class describes the pixel storage modes that affect the unpacking of pixels during texture upload.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLPixelTransferOptions</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS OpenGL)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::OpenGL)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opengl</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpenGLPixelTransferOptions">
<db:title>QOpenGLPixelTransferOptions::QOpenGLPixelTransferOptions()</db:title>
<db:para>Constructs a new <db:link xlink:href="qopenglpixeltransferoptions.xml">QOpenGLPixelTransferOptions</db:link> instance with the default settings.</db:para>
</db:section>
<db:section xml:id="dtor.QOpenGLPixelTransferOptions">
<db:title>[noexcept] QOpenGLPixelTransferOptions::~QOpenGLPixelTransferOptions()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="alignment">
<db:title>int QOpenGLPixelTransferOptions::alignment() const</db:title>
<db:para>Returns the current alignment requirement for each pixel row.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpixeltransferoptions.xml#setAlignment">setAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="imageHeight">
<db:title>int QOpenGLPixelTransferOptions::imageHeight() const</db:title>
<db:para>Returns the currently set image height.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpixeltransferoptions.xml#setImageHeight">setImageHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLeastSignificantBitFirst">
<db:title>bool QOpenGLPixelTransferOptions::isLeastSignificantBitFirst() const</db:title>
<db:para>Returns <db:code>true</db:code> if bits within a byte are ordered from least to most significant.</db:para>
</db:section>
<db:section xml:id="isSwapBytesEnabled">
<db:title>bool QOpenGLPixelTransferOptions::isSwapBytesEnabled() const</db:title>
<db:para>Returns <db:code>true</db:code> if the byte ordering for multibyte components is reversed.</db:para>
</db:section>
<db:section xml:id="rowLength">
<db:title>int QOpenGLPixelTransferOptions::rowLength() const</db:title>
<db:para>Returns the currently set row length.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpixeltransferoptions.xml#setRowLength">setRowLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAlignment">
<db:title>void QOpenGLPixelTransferOptions::setAlignment(int <db:emphasis>alignment</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">alignment</db:code> requirements for each pixel row. Corresponds to <db:code>GL_UNPACK_ALIGNMENT</db:code>. The default value is 4, as specified by OpenGL.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpixeltransferoptions.xml#alignment">alignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setImageHeight">
<db:title>void QOpenGLPixelTransferOptions::setImageHeight(int <db:emphasis>imageHeight</db:emphasis>)</db:title>
<db:para>Sets the image height for 3D textures to <db:code role="parameter">imageHeight</db:code>. Corresponds to <db:code>GL_UNPACK_IMAGE_HEIGHT</db:code>. The default value is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpixeltransferoptions.xml#imageHeight">imageHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLeastSignificantByteFirst">
<db:title>void QOpenGLPixelTransferOptions::setLeastSignificantByteFirst(bool <db:emphasis>lsbFirst</db:emphasis>)</db:title>
<db:para><db:code role="parameter">lsbFirst</db:code> specifies if bits within a byte are ordered from least to most significat. The default value is <db:code>false</db:code>, meaning that the first bit in each byte is the most significant one. This is significant for bitmap data only. Corresponds to <db:code>GL_UNPACK_LSB_FIRST</db:code>.</db:para>
</db:section>
<db:section xml:id="setRowLength">
<db:title>void QOpenGLPixelTransferOptions::setRowLength(int <db:emphasis>rowLength</db:emphasis>)</db:title>
<db:para>Sets the number of pixels in a row to <db:code role="parameter">rowLength</db:code>. Corresponds to <db:code>GL_UNPACK_ROW_LENGTH</db:code>. The default value is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpixeltransferoptions.xml#rowLength">rowLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSkipImages">
<db:title>void QOpenGLPixelTransferOptions::setSkipImages(int <db:emphasis>skipImages</db:emphasis>)</db:title>
<db:para>Sets the number of images that are skipped to <db:code role="parameter">skipImages</db:code>. Corresponds to <db:code>GL_UNPACK_SKIP_IMAGES</db:code>. Equivalent to incrementing the pointer passed to <db:link xlink:href="qopengltexture.xml#setData">QOpenGLTexture::setData</db:link>(). The default value is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpixeltransferoptions.xml#skipImages">skipImages</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSkipPixels">
<db:title>void QOpenGLPixelTransferOptions::setSkipPixels(int <db:emphasis>skipPixels</db:emphasis>)</db:title>
<db:para>Sets the number of pixels that are skipped to <db:code role="parameter">skipPixels</db:code>. Corresponds to <db:code>GL_UNPACK_SKIP_PIXELS</db:code>. Equivalent to incrementing the pointer passed to <db:link xlink:href="qopengltexture.xml#setData">QOpenGLTexture::setData</db:link>(). The default value is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpixeltransferoptions.xml#skipPixels">skipPixels</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSkipRows">
<db:title>void QOpenGLPixelTransferOptions::setSkipRows(int <db:emphasis>skipRows</db:emphasis>)</db:title>
<db:para>Sets the number of rows that are skipped to <db:code role="parameter">skipRows</db:code>. Corresponds to <db:code>GL_UNPACK_SKIP_ROWS</db:code>. Equivalent to incrementing the pointer passed to <db:link xlink:href="qopengltexture.xml#setData">QOpenGLTexture::setData</db:link>(). The default value is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpixeltransferoptions.xml#skipRows">skipRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSwapBytesEnabled">
<db:title>void QOpenGLPixelTransferOptions::setSwapBytesEnabled(bool <db:emphasis>swapBytes</db:emphasis>)</db:title>
<db:para><db:code role="parameter">swapBytes</db:code> specifies if the byte ordering for multibyte components is reversed. The default value is <db:code>false</db:code>. Corresponds to <db:code>GL_UNPACK_SWAP_BYTES</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpixeltransferoptions.xml#isSwapBytesEnabled">isSwapBytesEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="skipImages">
<db:title>int QOpenGLPixelTransferOptions::skipImages() const</db:title>
<db:para>Returns the number of images that are skipped.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpixeltransferoptions.xml#setSkipImages">setSkipImages</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="skipPixels">
<db:title>int QOpenGLPixelTransferOptions::skipPixels() const</db:title>
<db:para>Returns the number of pixels that are skipped.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpixeltransferoptions.xml#setSkipPixels">setSkipPixels</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="skipRows">
<db:title>int QOpenGLPixelTransferOptions::skipRows() const</db:title>
<db:para>Returns the number of rows that are skipped.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpixeltransferoptions.xml#setSkipRows">setSkipRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QOpenGLPixelTransferOptions::swap(QOpenGLPixelTransferOptions &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this options with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
</db:section>
</db:article>
