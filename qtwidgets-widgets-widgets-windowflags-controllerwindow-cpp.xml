<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Window Flags Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Window Flags example shows how to use the window flags available in Qt.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;controllerwindow.h&quot;

ControllerWindow::ControllerWindow()
{
    previewWindow = new PreviewWindow(this);

    createTypeGroupBox();
    createHintsGroupBox();

    quitButton = new QPushButton(tr(&quot;&amp;amp;Quit&quot;));
    connect(quitButton, SIGNAL(clicked()), qApp, SLOT(quit()));

    QHBoxLayout *bottomLayout = new QHBoxLayout;
    bottomLayout-&amp;gt;addStretch();
    bottomLayout-&amp;gt;addWidget(quitButton);

    QHBoxLayout *mainLayout = new QHBoxLayout;
    mainLayout-&amp;gt;addWidget(typeGroupBox);
    mainLayout-&amp;gt;addWidget(hintsGroupBox);
    mainLayout-&amp;gt;addLayout(bottomLayout);
    setLayout(mainLayout);

    setWindowTitle(tr(&quot;Window Flags&quot;));
    updatePreview();
}

void ControllerWindow::updatePreview()
{
    Qt::WindowFlags flags = 0;

    if (windowRadioButton-&amp;gt;isChecked()) {
        flags = Qt::Window;
    } else if (dialogRadioButton-&amp;gt;isChecked()) {
        flags = Qt::Dialog;
    } else if (sheetRadioButton-&amp;gt;isChecked()) {
        flags = Qt::Sheet;
    } else if (drawerRadioButton-&amp;gt;isChecked()) {
        flags = Qt::Drawer;
    } else if (popupRadioButton-&amp;gt;isChecked()) {
        flags = Qt::Popup;
    } else if (toolRadioButton-&amp;gt;isChecked()) {
        flags = Qt::Tool;
    } else if (toolTipRadioButton-&amp;gt;isChecked()) {
        flags = Qt::ToolTip;
    } else if (splashScreenRadioButton-&amp;gt;isChecked()) {
        flags = Qt::SplashScreen;
    }

    if (msWindowsFixedSizeDialogCheckBox-&amp;gt;isChecked())
        flags |= Qt::MSWindowsFixedSizeDialogHint;
    if (x11BypassWindowManagerCheckBox-&amp;gt;isChecked())
        flags |= Qt::X11BypassWindowManagerHint;
    if (framelessWindowCheckBox-&amp;gt;isChecked())
        flags |= Qt::FramelessWindowHint;
    if (windowNoShadowCheckBox-&amp;gt;isChecked())
        flags |= Qt::NoDropShadowWindowHint;
    if (windowTitleCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowTitleHint;
    if (windowSystemMenuCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowSystemMenuHint;
    if (windowMinimizeButtonCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowMinimizeButtonHint;
    if (windowMaximizeButtonCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowMaximizeButtonHint;
    if (windowCloseButtonCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowCloseButtonHint;
    if (windowContextHelpButtonCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowContextHelpButtonHint;
    if (windowShadeButtonCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowShadeButtonHint;
    if (windowStaysOnTopCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowStaysOnTopHint;
    if (windowStaysOnBottomCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowStaysOnBottomHint;
    if (customizeWindowHintCheckBox-&amp;gt;isChecked())
        flags |= Qt::CustomizeWindowHint;

    previewWindow-&amp;gt;setWindowFlags(flags);

    QPoint pos = previewWindow-&amp;gt;pos();
    if (pos.x() &amp;lt; 0)
        pos.setX(0);
    if (pos.y() &amp;lt; 0)
        pos.setY(0);
    previewWindow-&amp;gt;move(pos);
    previewWindow-&amp;gt;show();
}

void ControllerWindow::createTypeGroupBox()
{
    typeGroupBox = new QGroupBox(tr(&quot;Type&quot;));

    windowRadioButton = createRadioButton(tr(&quot;Window&quot;));
    dialogRadioButton = createRadioButton(tr(&quot;Dialog&quot;));
    sheetRadioButton = createRadioButton(tr(&quot;Sheet&quot;));
    drawerRadioButton = createRadioButton(tr(&quot;Drawer&quot;));
    popupRadioButton = createRadioButton(tr(&quot;Popup&quot;));
    toolRadioButton = createRadioButton(tr(&quot;Tool&quot;));
    toolTipRadioButton = createRadioButton(tr(&quot;Tooltip&quot;));
    splashScreenRadioButton = createRadioButton(tr(&quot;Splash screen&quot;));
    windowRadioButton-&amp;gt;setChecked(true);

    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(windowRadioButton, 0, 0);
    layout-&amp;gt;addWidget(dialogRadioButton, 1, 0);
    layout-&amp;gt;addWidget(sheetRadioButton, 2, 0);
    layout-&amp;gt;addWidget(drawerRadioButton, 3, 0);
    layout-&amp;gt;addWidget(popupRadioButton, 0, 1);
    layout-&amp;gt;addWidget(toolRadioButton, 1, 1);
    layout-&amp;gt;addWidget(toolTipRadioButton, 2, 1);
    layout-&amp;gt;addWidget(splashScreenRadioButton, 3, 1);
    typeGroupBox-&amp;gt;setLayout(layout);
}

void ControllerWindow::createHintsGroupBox()
{
    hintsGroupBox = new QGroupBox(tr(&quot;Hints&quot;));

    msWindowsFixedSizeDialogCheckBox =
            createCheckBox(tr(&quot;MS Windows fixed size dialog&quot;));
    x11BypassWindowManagerCheckBox =
            createCheckBox(tr(&quot;X11 bypass window manager&quot;));
    framelessWindowCheckBox = createCheckBox(tr(&quot;Frameless window&quot;));
    windowNoShadowCheckBox = createCheckBox(tr(&quot;No drop shadow&quot;));
    windowTitleCheckBox = createCheckBox(tr(&quot;Window title&quot;));
    windowSystemMenuCheckBox = createCheckBox(tr(&quot;Window system menu&quot;));
    windowMinimizeButtonCheckBox = createCheckBox(tr(&quot;Window minimize button&quot;));
    windowMaximizeButtonCheckBox = createCheckBox(tr(&quot;Window maximize button&quot;));
    windowCloseButtonCheckBox = createCheckBox(tr(&quot;Window close button&quot;));
    windowContextHelpButtonCheckBox =
            createCheckBox(tr(&quot;Window context help button&quot;));
    windowShadeButtonCheckBox = createCheckBox(tr(&quot;Window shade button&quot;));
    windowStaysOnTopCheckBox = createCheckBox(tr(&quot;Window stays on top&quot;));
    windowStaysOnBottomCheckBox = createCheckBox(tr(&quot;Window stays on bottom&quot;));
    customizeWindowHintCheckBox= createCheckBox(tr(&quot;Customize window&quot;));

    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(msWindowsFixedSizeDialogCheckBox, 0, 0);
    layout-&amp;gt;addWidget(x11BypassWindowManagerCheckBox, 1, 0);
    layout-&amp;gt;addWidget(framelessWindowCheckBox, 2, 0);
    layout-&amp;gt;addWidget(windowNoShadowCheckBox, 3, 0);
    layout-&amp;gt;addWidget(windowTitleCheckBox, 4, 0);
    layout-&amp;gt;addWidget(windowSystemMenuCheckBox, 5, 0);
    layout-&amp;gt;addWidget(customizeWindowHintCheckBox, 6, 0);
    layout-&amp;gt;addWidget(windowMinimizeButtonCheckBox, 0, 1);
    layout-&amp;gt;addWidget(windowMaximizeButtonCheckBox, 1, 1);
    layout-&amp;gt;addWidget(windowCloseButtonCheckBox, 2, 1);
    layout-&amp;gt;addWidget(windowContextHelpButtonCheckBox, 3, 1);
    layout-&amp;gt;addWidget(windowShadeButtonCheckBox, 4, 1);
    layout-&amp;gt;addWidget(windowStaysOnTopCheckBox, 5, 1);
    layout-&amp;gt;addWidget(windowStaysOnBottomCheckBox, 6, 1);
    hintsGroupBox-&amp;gt;setLayout(layout);
}

QCheckBox *ControllerWindow::createCheckBox(const QString &amp;amp;text)
{
    QCheckBox *checkBox = new QCheckBox(text);
    connect(checkBox, SIGNAL(clicked()), this, SLOT(updatePreview()));
    return checkBox;
}

QRadioButton *ControllerWindow::createRadioButton(const QString &amp;amp;text)
{
    QRadioButton *button = new QRadioButton(text);
    connect(button, SIGNAL(clicked()), this, SLOT(updatePreview()));
    return button;
}

</db:programlisting>
</db:article>
