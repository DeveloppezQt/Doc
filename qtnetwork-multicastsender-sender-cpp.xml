<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Multicast Sender Example</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to send messages to a multicast group.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;
#include &lt;QtNetwork&gt;

#include &quot;sender.h&quot;

Sender::Sender(QWidget *parent)
    : QDialog(parent)
{
    groupAddress = QHostAddress(&quot;239.255.43.21&quot;);

    statusLabel = new QLabel(tr(&quot;Ready to multicast datagrams to group %1 on port 45454&quot;).arg(groupAddress.toString()));

    ttlLabel = new QLabel(tr(&quot;TTL for multicast datagrams:&quot;));
    ttlSpinBox = new QSpinBox;
    ttlSpinBox-&gt;setRange(0, 255);

    QHBoxLayout *ttlLayout = new QHBoxLayout;
    ttlLayout-&gt;addWidget(ttlLabel);
    ttlLayout-&gt;addWidget(ttlSpinBox);

    startButton = new QPushButton(tr(&quot;&amp;Start&quot;));
    quitButton = new QPushButton(tr(&quot;&amp;Quit&quot;));

    buttonBox = new QDialogButtonBox;
    buttonBox-&gt;addButton(startButton, QDialogButtonBox::ActionRole);
    buttonBox-&gt;addButton(quitButton, QDialogButtonBox::RejectRole);

    timer = new QTimer(this);
    udpSocket = new QUdpSocket(this);
    messageNo = 1;

    connect(ttlSpinBox, SIGNAL(valueChanged(int)), this, SLOT(ttlChanged(int)));
    connect(startButton, SIGNAL(clicked()), this, SLOT(startSending()));
    connect(quitButton, SIGNAL(clicked()), this, SLOT(close()));
    connect(timer, SIGNAL(timeout()), this, SLOT(sendDatagram()));

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout-&gt;addWidget(statusLabel);
    mainLayout-&gt;addLayout(ttlLayout);
    mainLayout-&gt;addWidget(buttonBox);
    setLayout(mainLayout);

    setWindowTitle(tr(&quot;Multicast Sender&quot;));
    ttlSpinBox-&gt;setValue(1);
}

void Sender::ttlChanged(int newTtl)
{
    udpSocket-&gt;setSocketOption(QAbstractSocket::MulticastTtlOption, newTtl);
}

void Sender::startSending()
{
    startButton-&gt;setEnabled(false);
    timer-&gt;start(1000);
}

void Sender::sendDatagram()
{
    statusLabel-&gt;setText(tr(&quot;Now sending datagram %1&quot;).arg(messageNo));
    QByteArray datagram = &quot;Multicast message &quot; + QByteArray::number(messageNo);
    udpSocket-&gt;writeDatagram(datagram.data(), datagram.size(),
                             groupAddress, 45454);
    ++messageNo;
}

</db:programlisting>
</db:article>
