<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>DragHandler QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Handler for dragging.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>MultiPointHandler</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>DragHandler is part of <db:simplelist><db:member>qtquick-input-handlers</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> is a handler that is used to interactively move an Item. Like other Input Handlers, by default it is fully functional, and manipulates its <db:link xlink:href="qml-qtquick-draghandler.xml#target-prop">target</db:link>.</db:para>
<db:programlisting language="qml">import QtQuick 2.12

Rectangle {
    width: 100
    height: 100
    color: &quot;lightsteelblue&quot;
    DragHandler { }
}
</db:programlisting>
<db:para>It has properties to restrict the range of dragging.</db:para>
<db:para>If it is declared within one Item but is assigned a different <db:link xlink:href="qml-qtquick-draghandler.xml#target-prop">target</db:link>, then it handles events within the bounds of the <db:link xlink:href="qml-qtquick-draghandler.xml#parent-prop">parent</db:link> Item but manipulates the <db:code>target</db:code> Item instead:</db:para>
<db:programlisting language="qml">import QtQuick 2.12

Item {
    width: 640
    height: 480

    Rectangle {
        id: feedback
        border.color: &quot;red&quot;
        width: Math.max(10, handler.centroid.ellipseDiameters.width)
        height: Math.max(10, handler.centroid.ellipseDiameters.height)
        radius: Math.max(width, height) / 2
        visible: handler.active
    }

    DragHandler {
        id: handler
        target: feedback
    }
}
</db:programlisting>
<db:para>A third way to use it is to set <db:link xlink:href="qml-qtquick-draghandler.xml#target-prop">target</db:link> to <db:code>null</db:code> and react to property changes in some other way:</db:para>
<db:programlisting language="qml">import QtQuick 2.12

Item {
    width: 640
    height: 480

    DragHandler {
        id: handler
        target: null
    }

    Text {
        color: handler.active ? &quot;darkgreen&quot; : &quot;black&quot;
        text: handler.centroid.position.x.toFixed(1) + &quot;,&quot; + handler.centroid.position.y.toFixed(1)
        x: handler.centroid.position.x - width / 2
        y: handler.centroid.position.y - height
    }
}
</db:programlisting>
<db:para>If minimumPointCount and maximumPointCount are set to values larger than 1, the user will need to drag that many fingers in the same direction to start dragging. A multi-finger drag gesture can be detected independently of both a (default) single-finger <db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> and a <db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link> on the same Item, and thus can be used to adjust some other feature independently of the usual pinch behavior: for example adjust a tilt transformation, or adjust some other numeric value, if the <db:code>target</db:code> is set to null. But if the <db:code>target</db:code> is an Item, <db:code>centroid</db:code> is the point at which the drag begins and to which the <db:code>target</db:code> will be moved (subject to constraints).</db:para>
<db:para>At this time, drag-and-drop is not yet supported.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-drag.xml">Drag</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="acceptedButtons-prop">
<db:title>acceptedButtons : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>acceptedButtons</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The mouse buttons which can activate this Pointer Handler.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qml-qtquick-mouseevent.xml#button-prop">Qt.LeftButton</db:link>. It can be set to an OR combination of mouse buttons, and will ignore events from other buttons.</db:para>
<db:para>For example, a control could be made to respond to left and right clicks in different ways, with two handlers:</db:para>
<db:programlisting language="qml">Item {
    TapHandler {
        onTapped: console.log(&quot;left clicked&quot;)
    }
    TapHandler {
        acceptedButtons: Qt.RightButton
        onTapped: console.log(&quot;right clicked&quot;)
    }
}
</db:programlisting>
<db:note>
<db:para>Tapping on a touchscreen or tapping the stylus on a graphics tablet emulates clicking the left mouse button. This behavior can be altered via <db:link xlink:href="qml-qtquick-draghandler.xml#acceptedDevices-prop">acceptedDevices</db:link> or <db:link xlink:href="qml-qtquick-draghandler.xml#acceptedPointerTypes-prop">acceptedPointerTypes</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="acceptedDevices-prop">
<db:title>acceptedDevices : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>acceptedDevices</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The types of pointing devices that can activate this Pointer Handler.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qinputdevice.xml#DeviceType-enum">PointerDevice.AllDevices</db:link>. If you set it to an OR combination of device types, it will ignore events from non-matching devices.</db:para>
<db:para>For example, a control could be made to respond to mouse and stylus clicks in one way, and touchscreen taps in another way, with two handlers:</db:para>
<db:programlisting language="qml">Item {
   TapHandler {
       acceptedDevices: PointerDevice.Mouse | PointerDevice.Stylus
       onTapped: console.log(&quot;clicked&quot;)
   }
   TapHandler {
       acceptedDevices: PointerDevice.TouchScreen
       onTapped: console.log(&quot;tapped&quot;)
   }
}
</db:programlisting>
</db:section>
<db:section xml:id="acceptedModifiers-prop">
<db:title>acceptedModifiers : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>acceptedModifiers</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is set, it will require the given keyboard modifiers to be pressed in order to react to pointer events, and otherwise ignore them.</db:para>
<db:para>If this property is set to <db:code>Qt.KeyboardModifierMask</db:code> (the default value), then the <db:link xlink:href="qml-qtquick-pointerhandler.xml">PointerHandler</db:link> ignores the modifier keys.</db:para>
<db:para>For example, an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> could have two handlers of the same type, one of which is enabled only if the required keyboard modifiers are pressed:</db:para>
<db:programlisting language="qml">Item {
   TapHandler {
       acceptedModifiers: Qt.ControlModifier
       onTapped: console.log(&quot;control-tapped&quot;)
   }
   TapHandler {
       acceptedModifiers: Qt.NoModifier
       onTapped: console.log(&quot;tapped&quot;)
   }
}
</db:programlisting>
<db:para>If you set <db:code>acceptedModifiers</db:code> to an OR combination of modifier keys, it means <db:emphasis>all</db:emphasis> of those modifiers must be pressed to activate the handler:</db:para>
<db:programlisting language="qml">Item {
   TapHandler {
       acceptedModifiers: Qt.ControlModifier | Qt.AltModifier | Qt.ShiftModifier
       onTapped: console.log(&quot;control-alt-shift-tapped&quot;)
   }
}
</db:programlisting>
<db:para>The available modifiers are as follows:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>NoModifier</db:para>
</db:td>
<db:td>
<db:para>No modifier key is allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShiftModifier</db:para>
</db:td>
<db:td>
<db:para>A Shift key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ControlModifier</db:para>
</db:td>
<db:td>
<db:para>A Ctrl key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>AltModifier</db:para>
</db:td>
<db:td>
<db:para>An Alt key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MetaModifier</db:para>
</db:td>
<db:td>
<db:para>A Meta key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>KeypadModifier</db:para>
</db:td>
<db:td>
<db:para>A keypad button must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>GroupSwitchModifier</db:para>
</db:td>
<db:td>
<db:para>X11 only (unless activated on Windows by a command line argument). A Mode_switch key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>KeyboardModifierMask</db:para>
</db:td>
<db:td>
<db:para>The handler does not care which modifiers are pressed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If you need even more complex behavior than can be achieved with combinations of multiple handlers with multiple modifier flags, you can check the modifiers in JavaScript code:</db:para>
<db:programlisting language="qml">Item {
    TapHandler {
        onTapped:
            switch (point.modifiers) {
            case Qt.ControlModifier | Qt.AltModifier:
                console.log(&quot;CTRL+ALT&quot;);
                break;
            case Qt.ControlModifier | Qt.AltModifier | Qt.MetaModifier:
                console.log(&quot;CTRL+META+ALT&quot;);
                break;
            default:
                console.log(&quot;other modifiers&quot;, point.modifiers);
                break;
            }
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#KeyboardModifier-enum">Qt::KeyboardModifier</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="acceptedPointerTypes-prop">
<db:title>acceptedPointerTypes : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>acceptedPointerTypes</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The types of pointing instruments (finger, stylus, eraser, etc.) that can activate this Pointer Handler.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qpointingdevice.xml#PointerType-enum">PointerDevice.AllPointerTypes</db:link>. If you set it to an OR combination of device types, it will ignore events from non-matching events.</db:para>
<db:para>For example, a control could be made to respond to mouse, touch, and stylus clicks in some way, but delete itself if tapped with an eraser tool on a graphics tablet, with two handlers:</db:para>
<db:programlisting language="qml">Rectangle {
   id: rect
   TapHandler {
       acceptedPointerTypes: PointerDevice.GenericPointer | PointerDevice.Finger | PointerDevice.Pen
       onTapped: console.log(&quot;clicked&quot;)
   }
   TapHandler {
       acceptedPointerTypes: PointerDevice.Eraser
       onTapped: rect.destroy()
   }
}
</db:programlisting>
</db:section>
<db:section xml:id="active-prop">
<db:title>[read-only] active : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>active</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This holds true whenever this Input Handler has taken sole responsibility for handing one or more EventPoints, by successfully taking an exclusive grab of those points. This means that it is keeping its properties up-to-date according to the movements of those Event Points and actively manipulating its <db:link xlink:href="qml-qtquick-draghandler.xml#target-prop">target</db:link> (if any).</db:para>
</db:section>
<db:section xml:id="activeTranslation-prop">
<db:title>[read-only] activeTranslation : QVector2D</db:title>
<db:fieldsynopsis>
<db:type>QVector2D</db:type>
<db:varname>activeTranslation</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The translation while the drag gesture is being performed. It is <db:code>0, 0</db:code> when the gesture begins, and increases as the event point(s) are dragged downward and to the right. After the gesture ends, it stays the same; and when the next drag gesture begins, it is reset to <db:code>0, 0</db:code> again.</db:para>
</db:section>
<db:section xml:id="cursorShape-prop">
<db:title>[since 5.15] cursorShape : Qt::CursorShape</db:title>
<db:fieldsynopsis>
<db:type>Qt::CursorShape</db:type>
<db:varname>cursorShape</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the cursor shape that will appear whenever the mouse is hovering over the <db:link xlink:href="qml-qtquick-draghandler.xml#parent-prop">parent</db:link> item while <db:link xlink:href="qml-qtquick-draghandler.xml#active-prop">active</db:link> is <db:code>true</db:code>.</db:para>
<db:para>The available cursor shapes are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ArrowCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.UpArrowCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.CrossCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.WaitCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.IBeamCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeVerCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeHorCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeBDiagCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeFDiagCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeAllCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.BlankCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SplitVCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SplitHCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.PointingHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ForbiddenCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.WhatsThisCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.BusyCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.OpenHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ClosedHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragCopyCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragMoveCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragLinkCursor</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default value is not set, which allows the <db:link xlink:href="qquickitem.xml#cursor">cursor</db:link> of <db:link xlink:href="qml-qtquick-draghandler.xml#parent-prop">parent</db:link> item to appear. This property can be reset to the same initial condition by setting it to undefined.</db:para>
<db:note>
<db:para>When this property has not been set, or has been set to <db:code>undefined</db:code>, if you read the value it will return <db:code>Qt.ArrowCursor</db:code>.</db:para>
</db:note>
<db:para>This property was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#CursorShape-enum">Qt::CursorShape</db:link></db:member>
<db:member><db:link xlink:href="qquickitem.xml#cursor">QQuickItem::cursor</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-hoverhandler.xml#cursorShape-prop">HoverHandler::cursorShape</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragThreshold-prop">
<db:title>[since 5.15] dragThreshold : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>dragThreshold</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The distance in pixels that the user must drag an event point in order to have it treated as a drag gesture.</db:para>
<db:para>The default value depends on the platform and screen resolution. It can be reset back to the default value by setting it to undefined. The behavior when a drag gesture begins varies in different handlers.</db:para>
<db:para>This property was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>enabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If a <db:link xlink:href="qml-qtquick-pointerhandler.xml">PointerHandler</db:link> is disabled, it will reject all events and no signals will be emitted.</db:para>
</db:section>
<db:section xml:id="grabPermissions-prop">
<db:title>grabPermissions : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>grabPermissions</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property specifies the permissions when this handler's logic decides to take over the exclusive grab, or when it is asked to approve grab takeover or cancellation by another handler.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>PointerHandler.TakeOverForbidden</db:para>
</db:td>
<db:td>
<db:para>This handler neither takes from nor gives grab permission to any type of Item or Handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromHandlersOfSameType</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from another handler of the same class.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromHandlersOfDifferentType</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from any kind of handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromItems</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from any type of Item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromAnything</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from any type of Item or Handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByHandlersOfSameType</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for another handler of the same class to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByHandlersOfDifferentType</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any kind of handler to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByItems</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any kind of Item to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesCancellation</db:para>
</db:td>
<db:td>
<db:para>This handler will allow its grab to be set to null.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByAnything</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any any type of Item or Handler to take the grab.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default is <db:code>PointerHandler.CanTakeOverFromItems | PointerHandler.CanTakeOverFromHandlersOfDifferentType | PointerHandler.ApprovesTakeOverByAnything</db:code> which allows most takeover scenarios but avoids e.g. two PinchHandlers fighting over the same touchpoints.</db:para>
</db:section>
<db:section xml:id="margin-prop">
<db:title>margin : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>margin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The margin beyond the bounds of the <db:link xlink:href="qml-qtquick-draghandler.xml#parent-prop">parent</db:link> item within which an event point can activate this handler. For example, on a <db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link> where the <db:link xlink:href="qml-qtquick-draghandler.xml#target-prop">target</db:link> is also the <db:code>parent</db:code>, it's useful to set this to a distance at least half the width of a typical user's finger, so that if the <db:code>parent</db:code> has been scaled down to a very small size, the pinch gesture is still possible. Or, if a <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link>-based button is placed near the screen edge, it can be used to comply with Fitts's Law: react to mouse clicks at the screen edge even though the button is visually spaced away from the edge by a few pixels.</db:para>
<db:para>The default value is 0.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pointerHandlerMargin.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="parent-prop">
<db:title>parent : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>parent</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> which is the scope of the handler; the Item in which it was declared. The handler will handle events on behalf of this Item, which means a pointer event is relevant if at least one of its event points occurs within the Item's interior. Initially <db:link xlink:href="qml-qtquick-draghandler.xml#target-prop">target()</db:link> is the same, but it can be reassigned.</db:para>
<db:note>
<db:para>When a handler is declared in a <db:link xlink:href="qtquickcontrols-chattutorial-example.xml#model">QtQuick3D.Model</db:link> object, the parent is not an Item, therefore this property is <db:code>null</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-draghandler.xml#target-prop">target</db:link></db:member>
<db:member><db:link xlink:href="qobject.xml#parent">QObject::parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="persistentTranslation-prop">
<db:title>persistentTranslation : QVector2D</db:title>
<db:fieldsynopsis>
<db:type>QVector2D</db:type>
<db:varname>persistentTranslation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The translation to be applied to the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> if it is not <db:code>null</db:code>. Otherwise, bindings can be used to do arbitrary things with this value. While the drag gesture is being performed, <db:link xlink:href="qml-qtquick-draghandler.xml#activeTranslation-prop">activeTranslation</db:link> is continuously added to it; after the gesture ends, it stays the same.</db:para>
</db:section>
<db:section xml:id="snapMode-prop">
<db:title>snapMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>snapMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the snap mode.</db:para>
<db:para>The snap mode configures snapping of the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> item's center to the event point.</db:para>
<db:para>Possible values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>DragHandler.SnapNever</db:para>
</db:td>
<db:td>
<db:para>Never snap</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DragHandler.SnapAuto</db:para>
</db:td>
<db:td>
<db:para>The <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> snaps if the event point was pressed outside of the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> item <db:emphasis>and</db:emphasis> the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> is a descendant of <db:link xlink:href="qml-qtquick-draghandler.xml#parent-prop">parent</db:link> item (default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DragHandler.SnapWhenPressedOutsideTarget</db:para>
</db:td>
<db:td>
<db:para>The <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link> snaps if the event point was pressed outside of the <db:link xlink:href="qmake-variable-reference.xml#target">target</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DragHandler.SnapAlways</db:para>
</db:td>
<db:td>
<db:para>Always snap</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="target-prop">
<db:title>target : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>target</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The Item which this handler will manipulate.</db:para>
<db:para>By default, it is the same as the <db:link xlink:href="qml-qtquick-draghandler.xml#parent-prop">parent</db:link>, the Item within which the handler is declared. However, it can sometimes be useful to set the target to a different Item, in order to handle events within one item but manipulate another; or to <db:code>null</db:code>, to disable the default behavior and do something else instead.</db:para>
</db:section>
<db:section xml:id="xAxis-prop">
<db:title>xAxis group</db:title>
<db:bridgehead renderas="sect2" xml:id="xAxis.enabled-prop">xAxis.enabled : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>xAxis.enabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="xAxis.maximum-prop">xAxis.maximum : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>xAxis.maximum</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="xAxis.minimum-prop">xAxis.minimum : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>xAxis.minimum</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para><db:code>xAxis</db:code> controls the constraints for horizontal dragging.</db:para>
<db:para><db:code>minimum</db:code> is the minimum acceptable value of <db:link xlink:href="qml-qtquick-item.xml#x-prop">x</db:link> to be applied to the <db:link xlink:href="qml-qtquick-draghandler.xml#target-prop">target</db:link>. <db:code>maximum</db:code> is the maximum acceptable value of <db:link xlink:href="qml-qtquick-item.xml#x-prop">x</db:link> to be applied to the <db:link xlink:href="qml-qtquick-draghandler.xml#target-prop">target</db:link>. If <db:code>enabled</db:code> is true, horizontal dragging is allowed.</db:para>
</db:section>
<db:section xml:id="yAxis-prop">
<db:title>yAxis group</db:title>
<db:bridgehead renderas="sect2" xml:id="yAxis.enabled-prop">yAxis.enabled : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>yAxis.enabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="yAxis.maximum-prop">yAxis.maximum : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>yAxis.maximum</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="yAxis.minimum-prop">yAxis.minimum : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>yAxis.minimum</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para><db:code>yAxis</db:code> controls the constraints for vertical dragging.</db:para>
<db:para><db:code>minimum</db:code> is the minimum acceptable value of <db:link xlink:href="qml-qtquick-item.xml#y-prop">y</db:link> to be applied to the <db:link xlink:href="qml-qtquick-draghandler.xml#target-prop">target</db:link>. <db:code>maximum</db:code> is the maximum acceptable value of <db:link xlink:href="qml-qtquick-item.xml#y-prop">y</db:link> to be applied to the <db:link xlink:href="qml-qtquick-draghandler.xml#target-prop">target</db:link>. If <db:code>enabled</db:code> is true, vertical dragging is allowed.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="canceled-signal">
<db:title>canceled(EventPoint <db:emphasis>point</db:emphasis>)</db:title>
<db:para>If this handler has already grabbed the given <db:code role="parameter">point</db:code>, this signal is emitted when the grab is stolen by a different Pointer Handler or Item.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onCanceled</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="grabChanged-signal">
<db:title>grabChanged(GrabTransition <db:emphasis>transition</db:emphasis>, EventPoint <db:emphasis>point</db:emphasis>)</db:title>
<db:para>This signal is emitted when the grab has changed in some way which is relevant to this handler.</db:para>
<db:para>The <db:code role="parameter">transition</db:code> (verb) tells what happened. The <db:code role="parameter">point</db:code> (object) is the point that was grabbed or ungrabbed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onGrabChanged</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for DragHandler</db:title>
<db:para><db:emphasis role="bold">The following members of QML type <db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-property-documentation">
<db:title>Obsolete Property Documentation</db:title>
<db:section xml:id="translation-prop">
<db:title>[read-only] translation : QVector2D</db:title>
<db:fieldsynopsis>
<db:type>QVector2D</db:type>
<db:varname>translation</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is deprecated since 6.2. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qml-qtquick-draghandler.xml#activeTranslation-prop">activeTranslation</db:link></db:para>
</db:section>
</db:section>
</db:section>
</db:article>
