<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Widgets Example</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to mix QML with a Qt Widgets application using the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> class.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QQuickWidget&amp;gt;
#include &amp;lt;QQuickItem&amp;gt;
#include &amp;lt;QQmlError&amp;gt;
#include &amp;lt;QtWidgets&amp;gt;
#include &quot;fbitem.h&quot;

static bool optMultipleSample = false;
static bool optCoreProfile = false;

class MainWindow : public QMainWindow {
    Q_OBJECT
public:
    MainWindow();

private slots:
    void quickWidgetStatusChanged(QQuickWidget::Status);
    void sceneGraphError(QQuickWindow::SceneGraphError error, const QString &amp;amp;message);
    void grabFramebuffer();
    void renderToPixmap();
    void grabToImage();
    void createQuickWidgetsInTabs(QMdiArea *mdiArea);

private:
    QQuickWidget *m_quickWidget;
};

MainWindow::MainWindow()
   : m_quickWidget(new QQuickWidget)
{
    QSurfaceFormat format;
    if (optCoreProfile) {
        format.setVersion(4, 4);
        format.setProfile(QSurfaceFormat::CoreProfile);
    }
    if (optMultipleSample)
        format.setSamples(4);
    m_quickWidget-&amp;gt;setFormat(format);

    QMdiArea *centralWidget = new QMdiArea;

    QLCDNumber *lcd = new QLCDNumber;
    lcd-&amp;gt;display(1337);
    lcd-&amp;gt;setMinimumSize(250,100);
    centralWidget-&amp;gt;addSubWindow(lcd);

    QUrl source(&quot;qrc:quickwidget/rotatingsquare.qml&quot;);

    connect(m_quickWidget, &amp;amp;QQuickWidget::statusChanged,
            this, &amp;amp;MainWindow::quickWidgetStatusChanged);
    connect(m_quickWidget, &amp;amp;QQuickWidget::sceneGraphError,
            this, &amp;amp;MainWindow::sceneGraphError);
    m_quickWidget-&amp;gt;resize(300,300);
    m_quickWidget-&amp;gt;setResizeMode(QQuickWidget::SizeRootObjectToView );
    m_quickWidget-&amp;gt;setSource(source);

    centralWidget-&amp;gt;addSubWindow(m_quickWidget);

    setCentralWidget(centralWidget);

    QMenu *fileMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;File&quot;));
    fileMenu-&amp;gt;addAction(tr(&quot;Grab framebuffer&quot;), this, &amp;amp;MainWindow::grabFramebuffer);
    fileMenu-&amp;gt;addAction(tr(&quot;Render to pixmap&quot;), this, &amp;amp;MainWindow::renderToPixmap);
    fileMenu-&amp;gt;addAction(tr(&quot;Grab via grabToImage&quot;), this, &amp;amp;MainWindow::grabToImage);
    fileMenu-&amp;gt;addAction(tr(&quot;Quit&quot;), qApp, &amp;amp;QCoreApplication::quit);

    QMenu *windowMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Window&quot;));
    windowMenu-&amp;gt;addAction(tr(&quot;Add tab widget&quot;), this,
                          [this, centralWidget] { createQuickWidgetsInTabs(centralWidget); });
}

void MainWindow::createQuickWidgetsInTabs(QMdiArea *mdiArea)
{
    QTabWidget *tabWidget = new QTabWidget;

    const QSize size(400, 400);

    QQuickWidget *w = new QQuickWidget;
    w-&amp;gt;resize(size);
    w-&amp;gt;setResizeMode(QQuickWidget::SizeRootObjectToView);
    w-&amp;gt;setSource(QUrl(&quot;qrc:quickwidget/rotatingsquaretab.qml&quot;));

    tabWidget-&amp;gt;addTab(w, tr(&quot;Plain Quick content&quot;));

    w = new QQuickWidget;
    w-&amp;gt;resize(size);
    w-&amp;gt;setResizeMode(QQuickWidget::SizeRootObjectToView);
    w-&amp;gt;setSource(QUrl(&quot;qrc:quickwidget/customgl.qml&quot;));

    tabWidget-&amp;gt;addTab(w, tr(&quot;Custom OpenGL drawing&quot;));

    mdiArea-&amp;gt;addSubWindow(tabWidget);
    tabWidget-&amp;gt;show();
}

void MainWindow::quickWidgetStatusChanged(QQuickWidget::Status status)
{
    if (status == QQuickWidget::Error) {
        QStringList errors;
        const auto widgetErrors = m_quickWidget-&amp;gt;errors();
        for (const QQmlError &amp;amp;error : widgetErrors)
            errors.append(error.toString());
        statusBar()-&amp;gt;showMessage(errors.join(QStringLiteral(&quot;, &quot;)));
    }
}

void MainWindow::sceneGraphError(QQuickWindow::SceneGraphError, const QString &amp;amp;message)
{
     statusBar()-&amp;gt;showMessage(message);
}

template&amp;lt;class T&amp;gt; void saveToFile(QWidget *parent, T *saveable)
{
    QFileDialog fd(parent);
    fd.setAcceptMode(QFileDialog::AcceptSave);
    fd.setDefaultSuffix(&quot;png&quot;);
    fd.selectFile(&quot;test.png&quot;);
    if (fd.exec() == QDialog::Accepted)
        saveable-&amp;gt;save(fd.selectedFiles().first());
}

void MainWindow::grabFramebuffer()
{
    QImage image = m_quickWidget-&amp;gt;grabFramebuffer();
    saveToFile(this, &amp;amp;image);
}

void MainWindow::renderToPixmap()
{
    QPixmap pixmap(m_quickWidget-&amp;gt;size());
    m_quickWidget-&amp;gt;render(&amp;amp;pixmap);
    saveToFile(this, &amp;amp;pixmap);
}

void MainWindow::grabToImage()
{
    QFileDialog fd(this);
    fd.setAcceptMode(QFileDialog::AcceptSave);
    fd.setDefaultSuffix(&quot;png&quot;);
    fd.selectFile(&quot;test_grabToImage.png&quot;);
    if (fd.exec() == QDialog::Accepted) {
        QMetaObject::invokeMethod(m_quickWidget-&amp;gt;rootObject(), &quot;performLayerBasedGrab&quot;,
                                  Q_ARG(QVariant, fd.selectedFiles().first()));
    }
}

int main(int argc, char **argv)
{
    QApplication app(argc, argv);

    QCoreApplication::setApplicationName(&quot;Qt QQuickWidget Example&quot;);
    QCoreApplication::setOrganizationName(&quot;QtProject&quot;);
    QCoreApplication::setApplicationVersion(QT_VERSION_STR);
    QCommandLineParser parser;
    parser.setApplicationDescription(QCoreApplication::applicationName());
    parser.addHelpOption();
    parser.addVersionOption();
    QCommandLineOption multipleSampleOption(&quot;multisample&quot;, &quot;Multisampling&quot;);
    parser.addOption(multipleSampleOption);
    QCommandLineOption coreProfileOption(&quot;coreprofile&quot;, &quot;Use core profile&quot;);
    parser.addOption(coreProfileOption);

    parser.process(app);

    optMultipleSample = parser.isSet(multipleSampleOption);
    optCoreProfile = parser.isSet(coreProfileOption);

    qmlRegisterType&amp;lt;FbItem&amp;gt;(&quot;QuickWidgetExample&quot;, 1, 0, &quot;FbItem&quot;);

    MainWindow mainWindow;
    mainWindow.show();

    return app.exec();
}

#include &quot;main.moc&quot;

</db:programlisting>
</db:article>
