<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: Basic Shapes C++ Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows four basic shapes that Qt 3D offers and sets up a mesh for each of them.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2014 Klaralvdalens Datakonsult AB (KDAB).
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;scenemodifier.h&quot;

#include &amp;lt;QGuiApplication&amp;gt;

#include &amp;lt;Qt3DRender/qcamera.h&amp;gt;
#include &amp;lt;Qt3DCore/qentity.h&amp;gt;
#include &amp;lt;Qt3DRender/qcameralens.h&amp;gt;

#include &amp;lt;QtWidgets/QApplication&amp;gt;
#include &amp;lt;QtWidgets/QWidget&amp;gt;
#include &amp;lt;QtWidgets/QHBoxLayout&amp;gt;
#include &amp;lt;QtWidgets/QCheckBox&amp;gt;
#include &amp;lt;QtWidgets/QCommandLinkButton&amp;gt;
#include &amp;lt;QtGui/QScreen&amp;gt;

#include &amp;lt;Qt3DInput/QInputAspect&amp;gt;

#include &amp;lt;Qt3DExtras/qtorusmesh.h&amp;gt;
#include &amp;lt;Qt3DRender/qmesh.h&amp;gt;
#include &amp;lt;Qt3DRender/qtechnique.h&amp;gt;
#include &amp;lt;Qt3DRender/qmaterial.h&amp;gt;
#include &amp;lt;Qt3DRender/qeffect.h&amp;gt;
#include &amp;lt;Qt3DRender/qtexture.h&amp;gt;
#include &amp;lt;Qt3DRender/qrenderpass.h&amp;gt;
#include &amp;lt;Qt3DRender/qsceneloader.h&amp;gt;
#include &amp;lt;Qt3DRender/qpointlight.h&amp;gt;

#include &amp;lt;Qt3DCore/qtransform.h&amp;gt;
#include &amp;lt;Qt3DCore/qaspectengine.h&amp;gt;

#include &amp;lt;Qt3DRender/qrenderaspect.h&amp;gt;
#include &amp;lt;Qt3DExtras/qforwardrenderer.h&amp;gt;

#include &amp;lt;Qt3DExtras/qt3dwindow.h&amp;gt;
#include &amp;lt;Qt3DExtras/qfirstpersoncameracontroller.h&amp;gt;

int main(int argc, char **argv)
{
    QApplication app(argc, argv);
    Qt3DExtras::Qt3DWindow *view = new Qt3DExtras::Qt3DWindow();
    view-&amp;gt;defaultFrameGraph()-&amp;gt;setClearColor(QColor(QRgb(0x4d4d4f)));
    QWidget *container = QWidget::createWindowContainer(view);
    QSize screenSize = view-&amp;gt;screen()-&amp;gt;size();
    container-&amp;gt;setMinimumSize(QSize(200, 100));
    container-&amp;gt;setMaximumSize(screenSize);

    QWidget *widget = new QWidget;
    QHBoxLayout *hLayout = new QHBoxLayout(widget);
    QVBoxLayout *vLayout = new QVBoxLayout();
    vLayout-&amp;gt;setAlignment(Qt::AlignTop);
    hLayout-&amp;gt;addWidget(container, 1);
    hLayout-&amp;gt;addLayout(vLayout);

    widget-&amp;gt;setWindowTitle(QStringLiteral(&quot;Basic shapes&quot;));

    Qt3DInput::QInputAspect *input = new Qt3DInput::QInputAspect;
    view-&amp;gt;registerAspect(input);

    // Root entity
    Qt3DCore::QEntity *rootEntity = new Qt3DCore::QEntity();

    // Camera
    Qt3DRender::QCamera *cameraEntity = view-&amp;gt;camera();

    cameraEntity-&amp;gt;lens()-&amp;gt;setPerspectiveProjection(45.0f, 16.0f/9.0f, 0.1f, 1000.0f);
    cameraEntity-&amp;gt;setPosition(QVector3D(0, 0, 20.0f));
    cameraEntity-&amp;gt;setUpVector(QVector3D(0, 1, 0));
    cameraEntity-&amp;gt;setViewCenter(QVector3D(0, 0, 0));

    Qt3DCore::QEntity *lightEntity = new Qt3DCore::QEntity(rootEntity);
    Qt3DRender::QPointLight *light = new Qt3DRender::QPointLight(lightEntity);
    light-&amp;gt;setColor(&quot;white&quot;);
    light-&amp;gt;setIntensity(1);
    lightEntity-&amp;gt;addComponent(light);
    Qt3DCore::QTransform *lightTransform = new Qt3DCore::QTransform(lightEntity);
    lightTransform-&amp;gt;setTranslation(cameraEntity-&amp;gt;position());
    lightEntity-&amp;gt;addComponent(lightTransform);

    // For camera controls
    Qt3DExtras::QFirstPersonCameraController *camController = new Qt3DExtras::QFirstPersonCameraController(rootEntity);
    camController-&amp;gt;setCamera(cameraEntity);

    // Scenemodifier
    SceneModifier *modifier = new SceneModifier(rootEntity);

    // Set root object of the scene
    view-&amp;gt;setRootEntity(rootEntity);

    // Create control widgets
    QCommandLinkButton *info = new QCommandLinkButton();
    info-&amp;gt;setText(QStringLiteral(&quot;Qt3D ready-made meshes&quot;));
    info-&amp;gt;setDescription(QString::fromLatin1(&quot;Qt3D provides several ready-made meshes, like torus, cylinder, cone, &quot;
                                             &quot;cube, plane and sphere.&quot;));
    info-&amp;gt;setIconSize(QSize(0,0));

    QCheckBox *torusCB = new QCheckBox(widget);
    torusCB-&amp;gt;setChecked(true);
    torusCB-&amp;gt;setText(QStringLiteral(&quot;Torus&quot;));

    QCheckBox *coneCB = new QCheckBox(widget);
    coneCB-&amp;gt;setChecked(true);
    coneCB-&amp;gt;setText(QStringLiteral(&quot;Cone&quot;));

    QCheckBox *cylinderCB = new QCheckBox(widget);
    cylinderCB-&amp;gt;setChecked(true);
    cylinderCB-&amp;gt;setText(QStringLiteral(&quot;Cylinder&quot;));

    QCheckBox *cuboidCB = new QCheckBox(widget);
    cuboidCB-&amp;gt;setChecked(true);
    cuboidCB-&amp;gt;setText(QStringLiteral(&quot;Cuboid&quot;));

    QCheckBox *planeCB = new QCheckBox(widget);
    planeCB-&amp;gt;setChecked(true);
    planeCB-&amp;gt;setText(QStringLiteral(&quot;Plane&quot;));

    QCheckBox *sphereCB = new QCheckBox(widget);
    sphereCB-&amp;gt;setChecked(true);
    sphereCB-&amp;gt;setText(QStringLiteral(&quot;Sphere&quot;));

    vLayout-&amp;gt;addWidget(info);
    vLayout-&amp;gt;addWidget(torusCB);
    vLayout-&amp;gt;addWidget(coneCB);
    vLayout-&amp;gt;addWidget(cylinderCB);
    vLayout-&amp;gt;addWidget(cuboidCB);
    vLayout-&amp;gt;addWidget(planeCB);
    vLayout-&amp;gt;addWidget(sphereCB);

    QObject::connect(torusCB, &amp;amp;QCheckBox::stateChanged,
                     modifier, &amp;amp;SceneModifier::enableTorus);
    QObject::connect(coneCB, &amp;amp;QCheckBox::stateChanged,
                     modifier, &amp;amp;SceneModifier::enableCone);
    QObject::connect(cylinderCB, &amp;amp;QCheckBox::stateChanged,
                     modifier, &amp;amp;SceneModifier::enableCylinder);
    QObject::connect(cuboidCB, &amp;amp;QCheckBox::stateChanged,
                     modifier, &amp;amp;SceneModifier::enableCuboid);
    QObject::connect(planeCB, &amp;amp;QCheckBox::stateChanged,
                     modifier, &amp;amp;SceneModifier::enablePlane);
    QObject::connect(sphereCB, &amp;amp;QCheckBox::stateChanged,
                     modifier, &amp;amp;SceneModifier::enableSphere);

    torusCB-&amp;gt;setChecked(true);
    coneCB-&amp;gt;setChecked(true);
    cylinderCB-&amp;gt;setChecked(true);
    cuboidCB-&amp;gt;setChecked(true);
    planeCB-&amp;gt;setChecked(true);
    sphereCB-&amp;gt;setChecked(true);

    // Show window
    widget-&amp;gt;show();
    widget-&amp;gt;resize(1200, 800);

    return app.exec();
}

</db:programlisting>
</db:article>
