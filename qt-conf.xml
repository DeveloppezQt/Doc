<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using qt.conf</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>You can use the <db:code>qt.conf</db:code> file to override paths or to specify arguments to be passed to the platform plugins.</db:para>
<db:section xml:id="format-and-location">
<db:title>Format and Location</db:title>
<db:para>The <db:code>qt.conf</db:code> file is an INI text file, as described in the <db:link xlink:href="qsettings.xml#Format-enum">QSettings</db:link> documentation.</db:para>
<db:para><db:link xlink:href="qlibraryinfo.xml">QLibraryInfo</db:link> will load <db:code>qt.conf</db:code> from one of the following locations:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para><db:code>:/qt/etc/qt.conf</db:code> using the resource system</db:para>
</db:listitem>
<db:listitem>
<db:para>on macOS, in the Resource directory inside the application bundle, for example <db:code>assistant.app/Contents/Resources/qt.conf</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para>in the directory containing the application executable, i.e. <db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>() + <db:link xlink:href="qdir.xml#separator">QDir::separator</db:link>() + &quot;qt.conf&quot;</db:para>
</db:listitem>
</db:orderedlist>
</db:section>
<db:section xml:id="overriding-paths">
<db:title>Overriding Paths</db:title>
<db:para>The <db:code>qt.conf</db:code> file can be used to override the hard-coded paths that are compiled into the Qt library. These paths are accessible using the <db:link xlink:href="qlibraryinfo.xml">QLibraryInfo</db:link> class. Without <db:code>qt.conf</db:code>, the functions in <db:link xlink:href="qlibraryinfo.xml">QLibraryInfo</db:link> return these hard-coded paths; otherwise they return the paths as specified in <db:code>qt.conf</db:code>.</db:para>
<db:para>Without <db:code>qt.conf</db:code>, the Qt libraries will use the hard-coded paths to look for plugins, translations, and so on. These paths may not exist on the target system, or they may not be accessible. Because of this, you may need <db:code>qt.conf</db:code> to make the Qt libraries look elsewhere.</db:para>
<db:para>The file should have a <db:code>Paths</db:code> group which contains the entries that correspond to each value of the <db:link xlink:href="qlibraryinfo.xml#LibraryLocation-enum">QLibraryInfo::LibraryLocation</db:link> enum. See the <db:link xlink:href="qlibraryinfo.xml">QLibraryInfo</db:link> documentation for details on the meaning of the various locations.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Entry</db:para>
</db:th>
<db:th>
<db:para>Default Value</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Prefix</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Documentation</db:para>
</db:td>
<db:td>
<db:para><db:code>doc</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Headers</db:para>
</db:td>
<db:td>
<db:para><db:code>include</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Libraries</db:para>
</db:td>
<db:td>
<db:para><db:code>lib</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LibraryExecutables</db:para>
</db:td>
<db:td>
<db:para><db:code>libexec</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Binaries</db:para>
</db:td>
<db:td>
<db:para><db:code>bin</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Plugins</db:para>
</db:td>
<db:td>
<db:para><db:code>plugins</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Imports</db:para>
</db:td>
<db:td>
<db:para><db:code>imports</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Qml2Imports</db:para>
</db:td>
<db:td>
<db:para><db:code>qml</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ArchData</db:para>
</db:td>
<db:td>
<db:para><db:code>.</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Data</db:para>
</db:td>
<db:td>
<db:para><db:code>.</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Translations</db:para>
</db:td>
<db:td>
<db:para><db:code>translations</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Examples</db:para>
</db:td>
<db:td>
<db:para><db:code>examples</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Tests</db:para>
</db:td>
<db:td>
<db:para><db:code>tests</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Settings</db:para>
</db:td>
<db:td>
<db:para><db:code>.</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Absolute paths are used as specified in the <db:code>qt.conf</db:code> file. All paths are relative to the <db:code>Prefix</db:code>. On Windows and X11, the <db:code>Prefix</db:code> is relative to the directory containing the application executable (<db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>()). On macOS, the <db:code>Prefix</db:code> is relative to the <db:code>Contents</db:code> in the application bundle. For example, <db:code>application.app/Contents/plugins/</db:code> is the default location for loading Qt plugins. Note that the plugins need to be placed in specific sub-directories under the <db:code>plugins</db:code> directory (see <db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link> for details).</db:para>
<db:para>For example, a <db:code>qt.conf</db:code> file could contain the following:</db:para>
<db:programlisting language="cpp">[Paths]
Prefix = /some/path
Translations = i18n
</db:programlisting>
<db:note>
<db:para>The backslash character is treated as a special character in INI files (see <db:link xlink:href="qsettings.xml">QSettings</db:link>). It is therefore recommended to use forward slashes for paths on Windows as well. Otherwise, an escape character is required:</db:para>
</db:note>
<db:programlisting language="cpp">Prefix = c:\\SomePath
</db:programlisting>
</db:section>
<db:section xml:id="configuring-arguments-to-the-platform-plugins">
<db:title>Configuring Arguments to the Platform Plugins</db:title>
<db:para>The <db:code>qt.conf</db:code> may contain a <db:code>Platforms</db:code> group, whose keys are comma-delimited lists of arguments to be passed to the platform plugin. The key name is the name of the platform plugin with the first letter upper-cased followed by <db:code>Arguments</db:code>.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">[Platforms]
WindowsArguments = fontengine=freetype
</db:programlisting>
<db:para>would cause the Windows platform plugin to use the FreeType font engine.</db:para>
</db:section>
</db:article>
