<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QMimeData Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmimedata.xml">QMimeData</db:link> class provides a container for data that records information about its MIME type.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMimeData</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmimedata.xml">QMimeData</db:link> is used to describe information that can be stored in the clipboard, and transferred via the <db:link xlink:href="">drag and drop</db:link> mechanism. <db:link xlink:href="qmimedata.xml">QMimeData</db:link> objects associate the data that they hold with the corresponding MIME types to ensure that information can be safely transferred between applications, and copied around within the same application.</db:para>
<db:para><db:link xlink:href="qmimedata.xml">QMimeData</db:link> objects are usually created using new and supplied to QDrag or QClipboard objects. This is to enable Qt to manage the memory that they use.</db:para>
<db:para>A single <db:link xlink:href="qmimedata.xml">QMimeData</db:link> object can store the same data using several different formats at the same time. The formats() function returns a list of the available formats in order of preference. The data() function returns the raw data associated with a MIME type, and setData() allows you to set the data for a MIME type.</db:para>
<db:para>For the most common MIME types, <db:link xlink:href="qmimedata.xml">QMimeData</db:link> provides convenience functions to access the data:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Tester</db:para>
</db:th>
<db:th>
<db:para>Getter</db:para>
</db:th>
<db:th>
<db:para>Setter</db:para>
</db:th>
<db:th>
<db:para>MIME Types</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>hasText()</db:para>
</db:td>
<db:td>
<db:para>text()</db:para>
</db:td>
<db:td>
<db:para>setText()</db:para>
</db:td>
<db:td>
<db:para>text/plain</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hasHtml()</db:para>
</db:td>
<db:td>
<db:para>html()</db:para>
</db:td>
<db:td>
<db:para>setHtml()</db:para>
</db:td>
<db:td>
<db:para>text/html</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hasUrls()</db:para>
</db:td>
<db:td>
<db:para>urls()</db:para>
</db:td>
<db:td>
<db:para>setUrls()</db:para>
</db:td>
<db:td>
<db:para>text/uri-list</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hasImage()</db:para>
</db:td>
<db:td>
<db:para>imageData()</db:para>
</db:td>
<db:td>
<db:para>setImageData()</db:para>
</db:td>
<db:td>
<db:para>image/ *</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hasColor()</db:para>
</db:td>
<db:td>
<db:para>colorData()</db:para>
</db:td>
<db:td>
<db:para>setColorData()</db:para>
</db:td>
<db:td>
<db:para>application/x-color</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example, if your write a widget that accepts URL drags, you would end up writing code like this:</db:para>
<db:programlisting language="cpp">void MyWidget::dragEnterEvent(QDragEnterEvent *event)
{
    if (event-&gt;mimeData()-&gt;hasUrls())
        event-&gt;acceptProposedAction();
}

void MyWidget::dropEvent(QDropEvent *event)
{
    if (event-&gt;mimeData()-&gt;hasUrls()) {
        foreach (QUrl url, event-&gt;mimeData()-&gt;urls()) {
            ...
        }
    }
}
</db:programlisting>
<db:para>There are three approaches for storing custom data in a <db:link xlink:href="qmimedata.xml">QMimeData</db:link> object:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Custom data can be stored directly in a <db:link xlink:href="qmimedata.xml">QMimeData</db:link> object as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> using setData(). For example:</db:para>
<db:programlisting language="cpp">QByteArray csvData = ...;

QMimeData *mimeData = new QMimeData;
mimeData-&gt;setData(&quot;text/csv&quot;, csvData);
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>We can subclass <db:link xlink:href="qmimedata.xml">QMimeData</db:link> and reimplement hasFormat(), formats(), and retrieveData().</db:para>
</db:listitem>
<db:listitem>
<db:para>If the drag and drop operation occurs within a single application, we can subclass <db:link xlink:href="qmimedata.xml">QMimeData</db:link> and add extra data in it, and use a qobject_cast() in the receiver's drop event handler. For example:</db:para>
<db:programlisting language="cpp">void MyWidget::dropEvent(QDropEvent *event)
{
    const MyMimeData *myData =
            qobject_cast&lt;const MyMimeData *&gt;(event-&gt;mimeData());
    if (myData) {
        // access myData's data directly (not through QMimeData's API)
    }
}
</db:programlisting>
</db:listitem>
</db:orderedlist>
<db:section xml:id="platform-specific-mime-types">
<db:title>Platform-Specific MIME Types</db:title>
<db:para>On Windows, formats() will also return custom formats available in the MIME data, using the x-qt-windows-mime subtype to indicate that they represent data in non-standard formats. The formats will take the following form:</db:para>
<db:programlisting language="cpp">application/x-qt-windows-mime;value=&quot;&lt;custom type&gt;&quot;
</db:programlisting>
<db:para>The following are examples of custom MIME types:</db:para>
<db:programlisting language="cpp">application/x-qt-windows-mime;value=&quot;FileGroupDescriptor&quot;
application/x-qt-windows-mime;value=&quot;FileContents&quot;
</db:programlisting>
<db:para>The value declaration of each format describes the way in which the data is encoded.</db:para>
<db:para>On Windows, the MIME format does not always map directly to the clipboard formats. Qt provides QWindowsMime to map clipboard formats to open-standard MIME formats. Similarly, the QMacPasteboardMime maps MIME to Mac flavors.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QClipboard</db:member>
<db:member>QDragEnterEvent</db:member>
<db:member>QDragMoveEvent</db:member>
<db:member>QDropEvent</db:member>
<db:member>QDrag</db:member>
<db:member>QWindowsMime</db:member>
<db:member>QMacPasteboardMime</db:member>
<db:member><db:link xlink:href="">Drag and Drop</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
