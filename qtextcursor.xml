<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextCursor Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> class offers an API to access and modify QTextDocuments.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextCursor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextCursor is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Text cursors are objects that are used to access and modify the contents and underlying structure of text documents via a programming interface that mimics the behavior of a cursor in a text editor. <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> contains information about both the cursor's position within a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> and any selection that it has made.</db:para>
<db:para><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> is modeled on the way a text cursor behaves in a text editor, providing a programmatic means of performing standard actions through the user interface. A document can be thought of as a single string of characters. The cursor's current <db:link xlink:href="qtextcursor.xml#position">position</db:link>() then is always either <db:emphasis>between</db:emphasis> two consecutive characters in the string, or else <db:emphasis>before</db:emphasis> the very first character or <db:emphasis>after</db:emphasis> the very last character in the string. Documents can also contain tables, lists, images, and other objects in addition to text but, from the developer's point of view, the document can be treated as one long string. Some portions of that string can be considered to lie within particular blocks (e.g. paragraphs), or within a table's cell, or a list's item, or other structural elements. When we refer to &quot;current character&quot; we mean the character immediately <db:emphasis>before</db:emphasis> the cursor <db:link xlink:href="qtextcursor.xml#position">position</db:link>() in the document. Similarly, the &quot;current block&quot; is the block that contains the cursor <db:link xlink:href="qtextcursor.xml#position">position</db:link>().</db:para>
<db:para>A <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> also has an <db:link xlink:href="qtextcursor.xml#anchor">anchor</db:link>() position. The text that is between the <db:link xlink:href="qtextcursor.xml#anchor">anchor</db:link>() and the <db:link xlink:href="qtextcursor.xml#position">position</db:link>() is the selection. If <db:link xlink:href="qtextcursor.xml#anchor">anchor</db:link>() == <db:link xlink:href="qtextcursor.xml#position">position</db:link>() there is no selection.</db:para>
<db:para>The cursor position can be changed programmatically using <db:link xlink:href="qtextcursor.xml#setPosition">setPosition</db:link>() and <db:link xlink:href="qtextcursor.xml#movePosition">movePosition</db:link>(); the latter can also be used to select text. For selections see <db:link xlink:href="qtextcursor.xml#selectionStart">selectionStart</db:link>(), <db:link xlink:href="qtextcursor.xml#selectionEnd">selectionEnd</db:link>(), <db:link xlink:href="qtextcursor.xml#hasSelection">hasSelection</db:link>(), <db:link xlink:href="qtextcursor.xml#clearSelection">clearSelection</db:link>(), and <db:link xlink:href="qtextcursor.xml#removeSelectedText">removeSelectedText</db:link>().</db:para>
<db:para>If the <db:link xlink:href="qtextcursor.xml#position">position</db:link>() is at the start of a block, <db:link xlink:href="qtextcursor.xml#atBlockStart">atBlockStart</db:link>() returns <db:code>true</db:code>; and if it is at the end of a block, <db:link xlink:href="qtextcursor.xml#atBlockEnd">atBlockEnd</db:link>() returns true. The format of the current character is returned by <db:link xlink:href="qtextcursor.xml#charFormat">charFormat</db:link>(), and the format of the current block is returned by <db:link xlink:href="qtextcursor.xml#blockFormat">blockFormat</db:link>().</db:para>
<db:para>Formatting can be applied to the current text document using the <db:link xlink:href="qtextcursor.xml#setCharFormat">setCharFormat</db:link>(), <db:link xlink:href="qtextcursor.xml#mergeCharFormat">mergeCharFormat</db:link>(), <db:link xlink:href="qtextcursor.xml#setBlockFormat">setBlockFormat</db:link>() and <db:link xlink:href="qtextcursor.xml#mergeBlockFormat">mergeBlockFormat</db:link>() functions. The 'set' functions will replace the cursor's current character or block format, while the 'merge' functions add the given format properties to the cursor's current format. If the cursor has a selection, the given format is applied to the current selection. Note that when only a part of a block is selected, the block format is applied to the entire block. The text at the current character position can be turned into a list using <db:link xlink:href="qtextcursor.xml#createList">createList</db:link>().</db:para>
<db:para>Deletions can be achieved using <db:link xlink:href="qtextcursor.xml#deleteChar">deleteChar</db:link>(), <db:link xlink:href="qtextcursor.xml#deletePreviousChar">deletePreviousChar</db:link>(), and <db:link xlink:href="qtextcursor.xml#removeSelectedText">removeSelectedText</db:link>().</db:para>
<db:para>Text strings can be inserted into the document with the <db:link xlink:href="qtextcursor.xml#insertText">insertText</db:link>() function, blocks (representing new paragraphs) can be inserted with <db:link xlink:href="qtextcursor.xml#insertBlock">insertBlock</db:link>().</db:para>
<db:para>Existing fragments of text can be inserted with <db:link xlink:href="qtextcursor.xml#insertFragment">insertFragment</db:link>() but, if you want to insert pieces of text in various formats, it is usually still easier to use <db:link xlink:href="qtextcursor.xml#insertText">insertText</db:link>() and supply a character format.</db:para>
<db:para>Various types of higher-level structure can also be inserted into the document with the cursor:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Lists are ordered sequences of block elements that are decorated with bullet points or symbols. These are inserted in a specified format with <db:link xlink:href="qtextcursor.xml#insertList">insertList</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>Tables are inserted with the <db:link xlink:href="qtextcursor.xml#insertTable">insertTable</db:link>() function, and can be given an optional format. These contain an array of cells that can be traversed using the cursor.</db:para>
</db:listitem>
<db:listitem>
<db:para>Inline images are inserted with <db:link xlink:href="qtextcursor.xml#insertImage">insertImage</db:link>(). The image to be used can be specified in an image format, or by name.</db:para>
</db:listitem>
<db:listitem>
<db:para>Frames are inserted by calling <db:link xlink:href="qtextcursor.xml#insertFrame">insertFrame</db:link>() with a specified format.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Actions can be grouped (i.e. treated as a single action for undo/redo) using <db:link xlink:href="qtextcursor.xml#beginEditBlock">beginEditBlock</db:link>() and <db:link xlink:href="qtextcursor.xml#endEditBlock">endEditBlock</db:link>().</db:para>
<db:para>Cursor movements are limited to valid cursor positions. In Latin writing this is between any two consecutive characters in the text, before the first character, or after the last character. In some other writing systems cursor movements are limited to &quot;clusters&quot; (e.g. a syllable in Devanagari, or a base letter plus diacritics). Functions such as <db:link xlink:href="qtextcursor.xml#movePosition">movePosition</db:link>() and <db:link xlink:href="qtextcursor.xml#deleteChar">deleteChar</db:link>() limit cursor movement to these valid positions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="richtext.xml">Rich Text Processing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="MoveMode-enum">
<db:title>enum QTextCursor::MoveMode</db:title>
<db:enumsynopsis>
<db:enumname>MoveMode</db:enumname>
<db:enumitem>
<db:enumidentifier>MoveAnchor</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>KeepAnchor</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::MoveAnchor</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Moves the anchor to the same position as the cursor itself.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::KeepAnchor</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Keeps the anchor where it is.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If the <db:link xlink:href="qtextcursor.xml#anchor">anchor</db:link>() is kept where it is and the <db:link xlink:href="qtextcursor.xml#position">position</db:link>() is moved, the text in between will be selected.</db:para>
</db:section>
<db:section xml:id="MoveOperation-enum">
<db:title>enum QTextCursor::MoveOperation</db:title>
<db:enumsynopsis>
<db:enumname>MoveOperation</db:enumname>
<db:enumitem>
<db:enumidentifier>NoMove</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Start</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Up</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StartOfLine</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StartOfBlock</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StartOfWord</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PreviousBlock</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PreviousCharacter</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PreviousWord</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Left</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WordLeft</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>End</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Down</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EndOfLine</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EndOfWord</db:enumidentifier>
<db:enumvalue>14</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EndOfBlock</db:enumidentifier>
<db:enumvalue>15</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NextBlock</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NextCharacter</db:enumidentifier>
<db:enumvalue>17</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NextWord</db:enumidentifier>
<db:enumvalue>18</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Right</db:enumidentifier>
<db:enumvalue>19</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WordRight</db:enumidentifier>
<db:enumvalue>20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NextCell</db:enumidentifier>
<db:enumvalue>21</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PreviousCell</db:enumidentifier>
<db:enumvalue>22</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NextRow</db:enumidentifier>
<db:enumvalue>23</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PreviousRow</db:enumidentifier>
<db:enumvalue>24</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::NoMove</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Keep the cursor where it is</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::Start</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Move to the start of the document.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::StartOfLine</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Move to the start of the current line.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::StartOfBlock</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Move to the start of the current block.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::StartOfWord</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Move to the start of the current word.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::PreviousBlock</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Move to the start of the previous block.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::PreviousCharacter</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Move to the previous character.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::PreviousWord</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Move to the beginning of the previous word.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::Up</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Move up one line.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::Left</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Move left one character.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::WordLeft</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Move left one word.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::End</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Move to the end of the document.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::EndOfLine</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Move to the end of the current line.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::EndOfWord</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>Move to the end of the current word.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::EndOfBlock</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>Move to the end of the current block.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::NextBlock</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Move to the beginning of the next block.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::NextCharacter</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>Move to the next character.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::NextWord</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>Move to the next word.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::Down</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Move down one line.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::Right</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>Move right one character.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::WordRight</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td>
<db:para>Move right one word.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::NextCell</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td>
<db:para>Move to the beginning of the next table cell inside the current table. If the current cell is the last cell in the row, the cursor will move to the first cell in the next row.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::PreviousCell</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td>
<db:para>Move to the beginning of the previous table cell inside the current table. If the current cell is the first cell in the row, the cursor will move to the last cell in the previous row.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::NextRow</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
<db:td>
<db:para>Move to the first new cell of the next row in the current table.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::PreviousRow</db:code></db:para>
</db:td>
<db:td><db:code>24</db:code></db:td>
<db:td>
<db:para>Move to the last cell of the previous row in the current table.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#movePosition">movePosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="SelectionType-enum">
<db:title>enum QTextCursor::SelectionType</db:title>
<db:enumsynopsis>
<db:enumname>SelectionType</db:enumname>
<db:enumitem>
<db:enumidentifier>WordUnderCursor</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LineUnderCursor</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlockUnderCursor</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Document</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the types of selection that can be applied with the <db:link xlink:href="qtextcursor.xml#select">select</db:link>() function.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::Document</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Selects the entire document.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::BlockUnderCursor</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Selects the block of text under the cursor.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::LineUnderCursor</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Selects the line of text under the cursor.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:emphasis>::WordUnderCursor</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Selects the word under the cursor. If the cursor is not positioned within a string of selectable characters, no text is selected.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextCursor">
<db:title>QTextCursor::QTextCursor()</db:title>
<db:constructorsynopsis>
<db:methodname>QTextCursor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCursor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null cursor.</db:para>
</db:section>
<db:section xml:id="QTextCursor-1">
<db:title>[explicit] QTextCursor::QTextCursor(QTextDocument *<db:emphasis>document</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextCursor</db:methodname>
<db:methodparam>
<db:type>QTextDocument *</db:type>
<db:parameter>document</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCursor(QTextDocument *document)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a cursor pointing to the beginning of the <db:code role="parameter">document</db:code>.</db:para>
</db:section>
<db:section xml:id="QTextCursor-2">
<db:title>[explicit] QTextCursor::QTextCursor(QTextFrame *<db:emphasis>frame</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextCursor</db:methodname>
<db:methodparam>
<db:type>QTextFrame *</db:type>
<db:parameter>frame</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCursor(QTextFrame *frame)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a cursor pointing to the beginning of the <db:code role="parameter">frame</db:code>.</db:para>
</db:section>
<db:section xml:id="QTextCursor-3">
<db:title>[explicit] QTextCursor::QTextCursor(const QTextBlock &amp;<db:emphasis>block</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextCursor</db:methodname>
<db:methodparam>
<db:type>const QTextBlock &amp;</db:type>
<db:parameter>block</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCursor(const QTextBlock &amp;block)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a cursor pointing to the beginning of the <db:code role="parameter">block</db:code>.</db:para>
</db:section>
<db:section xml:id="QTextCursor-4">
<db:title>QTextCursor::QTextCursor(const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextCursor</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCursor(const QTextCursor &amp;cursor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new cursor that is a copy of <db:code role="parameter">cursor</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QTextCursor">
<db:title>QTextCursor::~QTextCursor()</db:title>
<db:destructorsynopsis>
<db:methodname>~QTextCursor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QTextCursor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link>.</db:para>
</db:section>
<db:section xml:id="anchor">
<db:title>int QTextCursor::anchor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>anchor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int anchor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the anchor position; this is the same as <db:link xlink:href="qtextcursor.xml#position">position</db:link>() unless there is a selection in which case <db:link xlink:href="qtextcursor.xml#position">position</db:link>() marks one end of the selection and anchor() marks the other end. Just like the cursor position, the anchor position is between characters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#position">position</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#setPosition">setPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#movePosition">movePosition</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#selectionStart">selectionStart</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#selectionEnd">selectionEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="atBlockEnd">
<db:title>bool QTextCursor::atBlockEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>atBlockEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool atBlockEnd() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the cursor is at the end of a block; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#atBlockStart">atBlockStart</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#atEnd">atEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="atBlockStart">
<db:title>bool QTextCursor::atBlockStart() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>atBlockStart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool atBlockStart() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the cursor is at the start of a block; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#atBlockEnd">atBlockEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#atStart">atStart</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="atEnd">
<db:title>bool QTextCursor::atEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>atEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool atEnd() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the cursor is at the end of the document; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#atStart">atStart</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#atBlockEnd">atBlockEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="atStart">
<db:title>bool QTextCursor::atStart() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>atStart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool atStart() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the cursor is at the start of the document; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#atBlockStart">atBlockStart</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#atEnd">atEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginEditBlock">
<db:title>void QTextCursor::beginEditBlock()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>beginEditBlock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginEditBlock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Indicates the start of a block of editing operations on the document that should appear as a single operation from an undo/redo point of view.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">QTextCursor cursor(textDocument);
cursor.beginEditBlock();
cursor.insertText(&quot;Hello&quot;);
cursor.insertText(&quot;World&quot;);
cursor.endEditBlock();

textDocument-&amp;gt;undo();
</db:programlisting>
<db:para>The call to undo() will cause both insertions to be undone, causing both &quot;World&quot; and &quot;Hello&quot; to be removed.</db:para>
<db:para>It is possible to nest calls to beginEditBlock and <db:link xlink:href="qtextcursor.xml#endEditBlock">endEditBlock</db:link>. The top-most pair will determine the scope of the undo/redo operation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#endEditBlock">endEditBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="block">
<db:title>QTextBlock QTextCursor::block() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextBlock</db:type>
<db:methodname>block</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBlock block() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the block that contains the cursor.</db:para>
</db:section>
<db:section xml:id="blockCharFormat">
<db:title>QTextCharFormat QTextCursor::blockCharFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextCharFormat</db:type>
<db:methodname>blockCharFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCharFormat blockCharFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the block character format of the block the cursor is in.</db:para>
<db:para>The block char format is the format used when inserting text at the beginning of an empty block.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#setBlockCharFormat">setBlockCharFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockFormat">
<db:title>QTextBlockFormat QTextCursor::blockFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextBlockFormat</db:type>
<db:methodname>blockFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBlockFormat blockFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the block format of the block the cursor is in.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#setBlockFormat">setBlockFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#charFormat">charFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockNumber">
<db:title>int QTextCursor::blockNumber() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>blockNumber</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int blockNumber() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of the block the cursor is in, or 0 if the cursor is invalid.</db:para>
<db:para>Note that this function only makes sense in documents without complex objects such as tables or frames.</db:para>
</db:section>
<db:section xml:id="charFormat">
<db:title>QTextCharFormat QTextCursor::charFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextCharFormat</db:type>
<db:methodname>charFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCharFormat charFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the format of the character immediately before the cursor <db:link xlink:href="qtextcursor.xml#position">position</db:link>(). If the cursor is positioned at the beginning of a text block that is not empty then the format of the character immediately after the cursor is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#setCharFormat">setCharFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#insertText">insertText</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#blockFormat">blockFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearSelection">
<db:title>void QTextCursor::clearSelection()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearSelection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearSelection()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the current selection by setting the anchor to the cursor position.</db:para>
<db:para>Note that it does <db:emphasis role="bold">not</db:emphasis> delete the text of the selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#removeSelectedText">removeSelectedText</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#hasSelection">hasSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnNumber">
<db:title>int QTextCursor::columnNumber() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>columnNumber</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columnNumber() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the cursor within its containing line.</db:para>
<db:para>Note that this is the column number relative to a wrapped line, not relative to the block (i.e. the paragraph).</db:para>
<db:para>You probably want to call <db:link xlink:href="qtextcursor.xml#positionInBlock">positionInBlock</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#positionInBlock">positionInBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createList">
<db:title>QTextList *QTextCursor::createList(const QTextListFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextList *</db:type>
<db:methodname>createList</db:methodname>
<db:methodparam>
<db:type>const QTextListFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextList * createList(const QTextListFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns a new list with the given <db:code role="parameter">format</db:code>, and makes the current paragraph the cursor is in the first list item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#insertList">insertList</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#currentList">currentList</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createList-1">
<db:title>QTextList *QTextCursor::createList(QTextListFormat::Style <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextList *</db:type>
<db:methodname>createList</db:methodname>
<db:methodparam>
<db:type>QTextListFormat::Style</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextList * createList(QTextListFormat::Style style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates and returns a new list with the given <db:code role="parameter">style</db:code>, making the cursor's current paragraph the first list item.</db:para>
<db:para>The style to be used is defined by the <db:link xlink:href="qtextlistformat.xml#Style-enum">QTextListFormat::Style</db:link> enum.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#insertList">insertList</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#currentList">currentList</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentFrame">
<db:title>QTextFrame *QTextCursor::currentFrame() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextFrame *</db:type>
<db:methodname>currentFrame</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextFrame * currentFrame() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the current frame. Returns <db:code>nullptr</db:code> if the cursor is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#insertFrame">insertFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentList">
<db:title>QTextList *QTextCursor::currentList() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextList *</db:type>
<db:methodname>currentList</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextList * currentList() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current list if the cursor <db:link xlink:href="qtextcursor.xml#position">position</db:link>() is inside a block that is part of a list; otherwise returns <db:code>nullptr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#insertList">insertList</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#createList">createList</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentTable">
<db:title>QTextTable *QTextCursor::currentTable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextTable *</db:type>
<db:methodname>currentTable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextTable * currentTable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the current table if the cursor <db:link xlink:href="qtextcursor.xml#position">position</db:link>() is inside a block that is part of a table; otherwise returns <db:code>nullptr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#insertTable">insertTable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deleteChar">
<db:title>void QTextCursor::deleteChar()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deleteChar</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deleteChar()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If there is no selected text, deletes the character <db:emphasis>at</db:emphasis> the current cursor position; otherwise deletes the selected text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#deletePreviousChar">deletePreviousChar</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#hasSelection">hasSelection</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#clearSelection">clearSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deletePreviousChar">
<db:title>void QTextCursor::deletePreviousChar()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deletePreviousChar</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deletePreviousChar()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If there is no selected text, deletes the character <db:emphasis>before</db:emphasis> the current cursor position; otherwise deletes the selected text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#deleteChar">deleteChar</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#hasSelection">hasSelection</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#clearSelection">clearSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="document">
<db:title>QTextDocument *QTextCursor::document() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextDocument *</db:type>
<db:methodname>document</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextDocument * document() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the document this cursor is associated with.</db:para>
</db:section>
<db:section xml:id="endEditBlock">
<db:title>void QTextCursor::endEditBlock()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>endEditBlock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void endEditBlock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Indicates the end of a block of editing operations on the document that should appear as a single operation from an undo/redo point of view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#beginEditBlock">beginEditBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasComplexSelection">
<db:title>bool QTextCursor::hasComplexSelection() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasComplexSelection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasComplexSelection() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the cursor contains a selection that is not simply a range from <db:link xlink:href="qtextcursor.xml#selectionStart">selectionStart</db:link>() to <db:link xlink:href="qtextcursor.xml#selectionEnd">selectionEnd</db:link>(); otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Complex selections are ones that span at least two cells in a table; their extent is specified by <db:link xlink:href="qtextcursor.xml#selectedTableCells">selectedTableCells</db:link>().</db:para>
</db:section>
<db:section xml:id="hasSelection">
<db:title>bool QTextCursor::hasSelection() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasSelection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasSelection() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the cursor contains a selection; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="insertBlock">
<db:title>void QTextCursor::insertBlock()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertBlock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertBlock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a new empty block at the cursor <db:link xlink:href="qtextcursor.xml#position">position</db:link>() with the current <db:link xlink:href="qtextcursor.xml#blockFormat">blockFormat</db:link>() and <db:link xlink:href="qtextcursor.xml#charFormat">charFormat</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#setBlockFormat">setBlockFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertBlock-1">
<db:title>void QTextCursor::insertBlock(const QTextBlockFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertBlock</db:methodname>
<db:methodparam>
<db:type>const QTextBlockFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertBlock(const QTextBlockFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts a new empty block at the cursor <db:link xlink:href="qtextcursor.xml#position">position</db:link>() with block format <db:code role="parameter">format</db:code> and the current <db:link xlink:href="qtextcursor.xml#charFormat">charFormat</db:link>() as block char format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#setBlockFormat">setBlockFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertBlock-2">
<db:title>void QTextCursor::insertBlock(const QTextBlockFormat &amp;<db:emphasis>format</db:emphasis>, const QTextCharFormat &amp;<db:emphasis>charFormat</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertBlock</db:methodname>
<db:methodparam>
<db:type>const QTextBlockFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextCharFormat &amp;</db:type>
<db:parameter>charFormat</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertBlock(const QTextBlockFormat &amp;format, const QTextCharFormat &amp;charFormat)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts a new empty block at the cursor <db:link xlink:href="qtextcursor.xml#position">position</db:link>() with block format <db:code role="parameter">format</db:code> and <db:code role="parameter">charFormat</db:code> as block char format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#setBlockFormat">setBlockFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertFragment">
<db:title>void QTextCursor::insertFragment(const QTextDocumentFragment &amp;<db:emphasis>fragment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertFragment</db:methodname>
<db:methodparam>
<db:type>const QTextDocumentFragment &amp;</db:type>
<db:parameter>fragment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertFragment(const QTextDocumentFragment &amp;fragment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the text <db:code role="parameter">fragment</db:code> at the current <db:link xlink:href="qtextcursor.xml#position">position</db:link>().</db:para>
</db:section>
<db:section xml:id="insertFrame">
<db:title>QTextFrame *QTextCursor::insertFrame(const QTextFrameFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextFrame *</db:type>
<db:methodname>insertFrame</db:methodname>
<db:methodparam>
<db:type>const QTextFrameFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextFrame * insertFrame(const QTextFrameFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a frame with the given <db:code role="parameter">format</db:code> at the current cursor <db:link xlink:href="qtextcursor.xml#position">position</db:link>(), moves the cursor <db:link xlink:href="qtextcursor.xml#position">position</db:link>() inside the frame, and returns the frame.</db:para>
<db:para>If the cursor holds a selection, the whole selection is moved inside the frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#hasSelection">hasSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertHtml">
<db:title>void QTextCursor::insertHtml(const QString &amp;<db:emphasis>html</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertHtml</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>html</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertHtml(const QString &amp;html)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the text <db:code role="parameter">html</db:code> at the current <db:link xlink:href="qtextcursor.xml#position">position</db:link>(). The text is interpreted as HTML.</db:para>
<db:note>
<db:para>When using this function with a style sheet, the style sheet will only apply to the current block in the document. In order to apply a style sheet throughout a document, use <db:link xlink:href="qtextdocument.xml#defaultStyleSheet-prop">QTextDocument::setDefaultStyleSheet</db:link>() instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="insertImage">
<db:title>void QTextCursor::insertImage(const QTextImageFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertImage</db:methodname>
<db:methodparam>
<db:type>const QTextImageFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertImage(const QTextImageFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the image defined by <db:code role="parameter">format</db:code> at the current <db:link xlink:href="qtextcursor.xml#position">position</db:link>().</db:para>
</db:section>
<db:section xml:id="insertImage-1">
<db:title>void QTextCursor::insertImage(const QTextImageFormat &amp;<db:emphasis>format</db:emphasis>, QTextFrameFormat::Position <db:emphasis>alignment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertImage</db:methodname>
<db:methodparam>
<db:type>const QTextImageFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextFrameFormat::Position</db:type>
<db:parameter>alignment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertImage(const QTextImageFormat &amp;format, QTextFrameFormat::Position alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts the image defined by the given <db:code role="parameter">format</db:code> at the cursor's current position with the specified <db:code role="parameter">alignment</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#position">position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertImage-2">
<db:title>void QTextCursor::insertImage(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertImage</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertImage(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Convenience method for inserting the image with the given <db:code role="parameter">name</db:code> at the current <db:link xlink:href="qtextcursor.xml#position">position</db:link>().</db:para>
<db:programlisting language="cpp">QImage img;
textDocument-&amp;gt;addResource(QTextDocument::ImageResource, QUrl(&quot;myimage&quot;), img);
cursor.insertImage(&quot;myimage&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="insertImage-3">
<db:title>void QTextCursor::insertImage(const QImage &amp;<db:emphasis>image</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertImage</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertImage(const QImage &amp;image, const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Convenience function for inserting the given <db:code role="parameter">image</db:code> with an optional <db:code role="parameter">name</db:code> at the current <db:link xlink:href="qtextcursor.xml#position">position</db:link>().</db:para>
</db:section>
<db:section xml:id="insertList">
<db:title>QTextList *QTextCursor::insertList(const QTextListFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextList *</db:type>
<db:methodname>insertList</db:methodname>
<db:methodparam>
<db:type>const QTextListFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextList * insertList(const QTextListFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a new block at the current position and makes it the first list item of a newly created list with the given <db:code role="parameter">format</db:code>. Returns the created list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#currentList">currentList</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#createList">createList</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#insertBlock">insertBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertList-1">
<db:title>QTextList *QTextCursor::insertList(QTextListFormat::Style <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextList *</db:type>
<db:methodname>insertList</db:methodname>
<db:methodparam>
<db:type>QTextListFormat::Style</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextList * insertList(QTextListFormat::Style style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts a new block at the current position and makes it the first list item of a newly created list with the given <db:code role="parameter">style</db:code>. Returns the created list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#currentList">currentList</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#createList">createList</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#insertBlock">insertBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertMarkdown">
<db:title>[since 6.4] void QTextCursor::insertMarkdown(const QString &amp;<db:emphasis>markdown</db:emphasis>, QTextDocument::MarkdownFeatures <db:emphasis>features</db:emphasis> = QTextDocument::MarkdownDialectGitHub)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertMarkdown</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>markdown</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextDocument::MarkdownFeatures</db:type>
<db:parameter>features</db:parameter>
<db:initializer>QTextDocument::MarkdownDialectGitHub</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertMarkdown(const QString &amp;markdown, QTextDocument::MarkdownFeatures features)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the <db:code role="parameter">markdown</db:code> text at the current <db:link xlink:href="qtextcursor.xml#position">position</db:link>(), with the specified Markdown <db:code role="parameter">features</db:code>. The default is GitHub dialect.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="insertTable">
<db:title>QTextTable *QTextCursor::insertTable(int <db:emphasis>rows</db:emphasis>, int <db:emphasis>columns</db:emphasis>, const QTextTableFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextTable *</db:type>
<db:methodname>insertTable</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rows</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columns</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextTableFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextTable * insertTable(int rows, int columns, const QTextTableFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a new table with the given number of <db:code role="parameter">rows</db:code> and <db:code role="parameter">columns</db:code> in the specified <db:code role="parameter">format</db:code>, inserts it at the current cursor <db:link xlink:href="qtextcursor.xml#position">position</db:link>() in the document, and returns the table object. The cursor is moved to the beginning of the first cell.</db:para>
<db:para>There must be at least one row and one column in the table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#currentTable">currentTable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertTable-1">
<db:title>QTextTable *QTextCursor::insertTable(int <db:emphasis>rows</db:emphasis>, int <db:emphasis>columns</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextTable *</db:type>
<db:methodname>insertTable</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rows</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columns</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextTable * insertTable(int rows, int columns)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a new table with the given number of <db:code role="parameter">rows</db:code> and <db:code role="parameter">columns</db:code>, inserts it at the current cursor <db:link xlink:href="qtextcursor.xml#position">position</db:link>() in the document, and returns the table object. The cursor is moved to the beginning of the first cell.</db:para>
<db:para>There must be at least one row and one column in the table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#currentTable">currentTable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertText">
<db:title>void QTextCursor::insertText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertText(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts <db:code role="parameter">text</db:code> at the current position, using the current character format.</db:para>
<db:para>If there is a selection, the selection is deleted and replaced by <db:code role="parameter">text</db:code>, for example:</db:para>
<db:programlisting language="cpp">cursor.clearSelection();
cursor.movePosition(QTextCursor::NextWord, QTextCursor::KeepAnchor);
cursor.insertText(&quot;Hello World&quot;);
</db:programlisting>
<db:para>This clears any existing selection, selects the word at the cursor (i.e. from <db:link xlink:href="qtextcursor.xml#position">position</db:link>() forward), and replaces the selection with the phrase &quot;Hello World&quot;.</db:para>
<db:para>Any ASCII linefeed characters (\n) in the inserted text are transformed into unicode block separators, corresponding to <db:link xlink:href="qtextcursor.xml#insertBlock">insertBlock</db:link>() calls.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#charFormat">charFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#hasSelection">hasSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertText-1">
<db:title>void QTextCursor::insertText(const QString &amp;<db:emphasis>text</db:emphasis>, const QTextCharFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextCharFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertText(const QString &amp;text, const QTextCharFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts <db:code role="parameter">text</db:code> at the current position with the given <db:code role="parameter">format</db:code>.</db:para>
</db:section>
<db:section xml:id="isCopyOf">
<db:title>bool QTextCursor::isCopyOf(const QTextCursor &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCopyOf</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCopyOf(const QTextCursor &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this cursor and <db:code role="parameter">other</db:code> are copies of each other, i.e. one of them was created as a copy of the other and neither has moved since. This is much stricter than equality.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#operator-eq-1">operator=</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QTextCursor::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the cursor is null; otherwise returns <db:code>false</db:code>. A null cursor is created by the default constructor.</db:para>
</db:section>
<db:section xml:id="joinPreviousEditBlock">
<db:title>void QTextCursor::joinPreviousEditBlock()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>joinPreviousEditBlock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void joinPreviousEditBlock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Like <db:link xlink:href="qtextcursor.xml#beginEditBlock">beginEditBlock</db:link>() indicates the start of a block of editing operations that should appear as a single operation for undo/redo. However unlike <db:link xlink:href="qtextcursor.xml#beginEditBlock">beginEditBlock</db:link>() it does not start a new block but reverses the previous call to <db:link xlink:href="qtextcursor.xml#endEditBlock">endEditBlock</db:link>() and therefore makes following operations part of the previous edit block created.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">QTextCursor cursor(textDocument);
cursor.beginEditBlock();
cursor.insertText(&quot;Hello&quot;);
cursor.insertText(&quot;World&quot;);
cursor.endEditBlock();

// ...

cursor.joinPreviousEditBlock();
cursor.insertText(&quot;Hey&quot;);
cursor.endEditBlock();

textDocument-&amp;gt;undo();
</db:programlisting>
<db:para>The call to undo() will cause all three insertions to be undone.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#beginEditBlock">beginEditBlock</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#endEditBlock">endEditBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keepPositionOnInsert">
<db:title>bool QTextCursor::keepPositionOnInsert() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>keepPositionOnInsert</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool keepPositionOnInsert() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the cursor should keep its current position when text gets inserted at the position of the cursor.</db:para>
<db:para>The default is false;</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#setKeepPositionOnInsert">setKeepPositionOnInsert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mergeBlockCharFormat">
<db:title>void QTextCursor::mergeBlockCharFormat(const QTextCharFormat &amp;<db:emphasis>modifier</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mergeBlockCharFormat</db:methodname>
<db:methodparam>
<db:type>const QTextCharFormat &amp;</db:type>
<db:parameter>modifier</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mergeBlockCharFormat(const QTextCharFormat &amp;modifier)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Modifies the block char format of the current block (or all blocks that are contained in the selection) with the block format specified by <db:code role="parameter">modifier</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#setBlockCharFormat">setBlockCharFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mergeBlockFormat">
<db:title>void QTextCursor::mergeBlockFormat(const QTextBlockFormat &amp;<db:emphasis>modifier</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mergeBlockFormat</db:methodname>
<db:methodparam>
<db:type>const QTextBlockFormat &amp;</db:type>
<db:parameter>modifier</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mergeBlockFormat(const QTextBlockFormat &amp;modifier)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Modifies the block format of the current block (or all blocks that are contained in the selection) with the block format specified by <db:code role="parameter">modifier</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#setBlockFormat">setBlockFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#blockFormat">blockFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mergeCharFormat">
<db:title>void QTextCursor::mergeCharFormat(const QTextCharFormat &amp;<db:emphasis>modifier</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mergeCharFormat</db:methodname>
<db:methodparam>
<db:type>const QTextCharFormat &amp;</db:type>
<db:parameter>modifier</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mergeCharFormat(const QTextCharFormat &amp;modifier)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Merges the cursor's current character format with the properties described by format <db:code role="parameter">modifier</db:code>. If the cursor has a selection, this function applies all the properties set in <db:code role="parameter">modifier</db:code> to all the character formats that are part of the selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#hasSelection">hasSelection</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#setCharFormat">setCharFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="movePosition">
<db:title>bool QTextCursor::movePosition(QTextCursor::MoveOperation <db:emphasis>operation</db:emphasis>, QTextCursor::MoveMode <db:emphasis>mode</db:emphasis> = MoveAnchor, int <db:emphasis>n</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>movePosition</db:methodname>
<db:methodparam>
<db:type>QTextCursor::MoveOperation</db:type>
<db:parameter>operation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextCursor::MoveMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>MoveAnchor</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>n</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool movePosition(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode, int n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the cursor by performing the given <db:code role="parameter">operation</db:code> <db:code role="parameter">n</db:code> times, using the specified <db:code role="parameter">mode</db:code>, and returns <db:code>true</db:code> if all operations were completed successfully; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>For example, if this function is repeatedly used to seek to the end of the next word, it will eventually fail when the end of the document is reached.</db:para>
<db:para>By default, the move operation is performed once (<db:code role="parameter">n</db:code> = 1).</db:para>
<db:para>If <db:code role="parameter">mode</db:code> is <db:code>KeepAnchor</db:code>, the cursor selects the text it moves over. This is the same effect that the user achieves when they hold down the Shift key and move the cursor with the cursor keys.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#setVisualNavigation">setVisualNavigation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="position">
<db:title>int QTextCursor::position() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>position</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int position() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the absolute position of the cursor within the document. The cursor is positioned between characters.</db:para>
<db:note>
<db:para>The &quot;characters&quot; in this case refer to the string of <db:link xlink:href="qchar.xml">QChar</db:link> objects, i.e. 16-bit Unicode characters, and the position is considered an index into this string. This does not necessarily correspond to individual graphemes in the writing system, as a single grapheme may be represented by multiple Unicode characters, such as in the case of surrogate pairs, linguistic ligatures or diacritics.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#setPosition">setPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#movePosition">movePosition</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#anchor">anchor</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#positionInBlock">positionInBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="positionInBlock">
<db:title>int QTextCursor::positionInBlock() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>positionInBlock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int positionInBlock() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the relative position of the cursor within the block. The cursor is positioned between characters.</db:para>
<db:para>This is equivalent to <db:code>position() - block().position()</db:code>.</db:para>
<db:note>
<db:para>The &quot;characters&quot; in this case refer to the string of <db:link xlink:href="qchar.xml">QChar</db:link> objects, i.e. 16-bit Unicode characters, and the position is considered an index into this string. This does not necessarily correspond to individual graphemes in the writing system, as a single grapheme may be represented by multiple Unicode characters, such as in the case of surrogate pairs, linguistic ligatures or diacritics.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#position">position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeSelectedText">
<db:title>void QTextCursor::removeSelectedText()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeSelectedText</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeSelectedText()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If there is a selection, its content is deleted; otherwise does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#hasSelection">hasSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="select">
<db:title>void QTextCursor::select(QTextCursor::SelectionType <db:emphasis>selection</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>select</db:methodname>
<db:methodparam>
<db:type>QTextCursor::SelectionType</db:type>
<db:parameter>selection</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void select(QTextCursor::SelectionType selection)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Selects text in the document according to the given <db:code role="parameter">selection</db:code>.</db:para>
</db:section>
<db:section xml:id="selectedTableCells">
<db:title>void QTextCursor::selectedTableCells(int *<db:emphasis>firstRow</db:emphasis>, int *<db:emphasis>numRows</db:emphasis>, int *<db:emphasis>firstColumn</db:emphasis>, int *<db:emphasis>numColumns</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>selectedTableCells</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>firstRow</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>numRows</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>firstColumn</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>numColumns</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectedTableCells(int *firstRow, int *numRows, int *firstColumn, int *numColumns) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the selection spans over table cells, <db:code role="parameter">firstRow</db:code> is populated with the number of the first row in the selection, <db:code role="parameter">firstColumn</db:code> with the number of the first column in the selection, and <db:code role="parameter">numRows</db:code> and <db:code role="parameter">numColumns</db:code> with the number of rows and columns in the selection. If the selection does not span any table cells the results are harmless but undefined.</db:para>
</db:section>
<db:section xml:id="selectedText">
<db:title>QString QTextCursor::selectedText() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>selectedText</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString selectedText() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current selection's text (which may be empty). This only returns the text, with no rich text formatting information. If you want a document fragment (i.e. formatted rich text) use <db:link xlink:href="qtextcursor.xml#selection">selection</db:link>() instead.</db:para>
<db:note>
<db:para>If the selection obtained from an editor spans a line break, the text will contain a Unicode U+2029 paragraph separator character instead of a newline <db:code>\n</db:code> character. Use <db:link xlink:href="qstring.xml#replace">QString::replace</db:link>() to replace these characters with newlines.</db:para>
</db:note>
</db:section>
<db:section xml:id="selection">
<db:title>QTextDocumentFragment QTextCursor::selection() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextDocumentFragment</db:type>
<db:methodname>selection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextDocumentFragment selection() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current selection (which may be empty) with all its formatting information. If you just want the selected text (i.e. plain text) use <db:link xlink:href="qtextcursor.xml#selectedText">selectedText</db:link>() instead.</db:para>
<db:note>
<db:para>Unlike <db:link xlink:href="qtextdocumentfragment.xml#toPlainText">QTextDocumentFragment::toPlainText</db:link>(), <db:link xlink:href="qtextcursor.xml#selectedText">selectedText</db:link>() may include special unicode characters such as <db:link xlink:href="qchar.xml#SpecialCharacter-enum">QChar::ParagraphSeparator</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocumentfragment.xml#toPlainText">QTextDocumentFragment::toPlainText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionEnd">
<db:title>int QTextCursor::selectionEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>selectionEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int selectionEnd() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the end of the selection or <db:link xlink:href="qtextcursor.xml#position">position</db:link>() if the cursor doesn't have a selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#selectionStart">selectionStart</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#position">position</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#anchor">anchor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionStart">
<db:title>int QTextCursor::selectionStart() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>selectionStart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int selectionStart() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the start of the selection or <db:link xlink:href="qtextcursor.xml#position">position</db:link>() if the cursor doesn't have a selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#selectionEnd">selectionEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#position">position</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#anchor">anchor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBlockCharFormat">
<db:title>void QTextCursor::setBlockCharFormat(const QTextCharFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBlockCharFormat</db:methodname>
<db:methodparam>
<db:type>const QTextCharFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBlockCharFormat(const QTextCharFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the block char format of the current block (or all blocks that are contained in the selection) to <db:code role="parameter">format</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#blockCharFormat">blockCharFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBlockFormat">
<db:title>void QTextCursor::setBlockFormat(const QTextBlockFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBlockFormat</db:methodname>
<db:methodparam>
<db:type>const QTextBlockFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBlockFormat(const QTextBlockFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the block format of the current block (or all blocks that are contained in the selection) to <db:code role="parameter">format</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#blockFormat">blockFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#mergeBlockFormat">mergeBlockFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCharFormat">
<db:title>void QTextCursor::setCharFormat(const QTextCharFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCharFormat</db:methodname>
<db:methodparam>
<db:type>const QTextCharFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCharFormat(const QTextCharFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the cursor's current character format to the given <db:code role="parameter">format</db:code>. If the cursor has a selection, the given <db:code role="parameter">format</db:code> is applied to the current selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#charFormat">charFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#hasSelection">hasSelection</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#mergeCharFormat">mergeCharFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setKeepPositionOnInsert">
<db:title>void QTextCursor::setKeepPositionOnInsert(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setKeepPositionOnInsert</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setKeepPositionOnInsert(bool b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Defines whether the cursor should keep its current position when text gets inserted at the current position of the cursor.</db:para>
<db:para>If <db:code role="parameter">b</db:code> is true, the cursor keeps its current position when text gets inserted at the positing of the cursor. If <db:code role="parameter">b</db:code> is false, the cursor moves along with the inserted text.</db:para>
<db:para>The default is false.</db:para>
<db:para>Note that a cursor always moves when text is inserted before the current position of the cursor, and it always keeps its position when text is inserted after the current position of the cursor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#keepPositionOnInsert">keepPositionOnInsert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPosition">
<db:title>void QTextCursor::setPosition(int <db:emphasis>pos</db:emphasis>, QTextCursor::MoveMode <db:emphasis>m</db:emphasis> = MoveAnchor)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPosition</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextCursor::MoveMode</db:type>
<db:parameter>m</db:parameter>
<db:initializer>MoveAnchor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPosition(int pos, QTextCursor::MoveMode m)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the cursor to the absolute position in the document specified by <db:code role="parameter">pos</db:code> using a <db:code>MoveMode</db:code> specified by <db:code role="parameter">m</db:code>. The cursor is positioned between characters.</db:para>
<db:note>
<db:para>The &quot;characters&quot; in this case refer to the string of <db:link xlink:href="qchar.xml">QChar</db:link> objects, i.e. 16-bit Unicode characters, and <db:code role="parameter">pos</db:code> is considered an index into this string. This does not necessarily correspond to individual graphemes in the writing system, as a single grapheme may be represented by multiple Unicode characters, such as in the case of surrogate pairs, linguistic ligatures or diacritics. For a more generic approach to navigating the document, use <db:link xlink:href="qtextcursor.xml#movePosition">movePosition</db:link>(), which will respect the actual grapheme boundaries in the text.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#position">position</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#movePosition">movePosition</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#anchor">anchor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerticalMovementX">
<db:title>void QTextCursor::setVerticalMovementX(int <db:emphasis>x</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVerticalMovementX</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVerticalMovementX(int x)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the visual x position for vertical cursor movements to <db:code role="parameter">x</db:code>.</db:para>
<db:para>The vertical movement x position is cleared automatically when the cursor moves horizontally, and kept unchanged when the cursor moves vertically. The mechanism allows the cursor to move up and down on a visually straight line with proportional fonts, and to gently &quot;jump&quot; over short lines.</db:para>
<db:para>A value of -1 indicates no predefined x position. It will then be set automatically the next time the cursor moves up or down.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#verticalMovementX">verticalMovementX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisualNavigation">
<db:title>void QTextCursor::setVisualNavigation(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVisualNavigation</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVisualNavigation(bool b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets visual navigation to <db:code role="parameter">b</db:code>.</db:para>
<db:para>Visual navigation means skipping over hidden text paragraphs. The default is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#visualNavigation">visualNavigation</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#movePosition">movePosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QTextCursor::swap(QTextCursor &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QTextCursor &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QTextCursor &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this text cursor instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="verticalMovementX">
<db:title>int QTextCursor::verticalMovementX() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>verticalMovementX</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int verticalMovementX() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the visual x position for vertical cursor movements.</db:para>
<db:para>A value of -1 indicates no predefined x position. It will then be set automatically the next time the cursor moves up or down.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#setVerticalMovementX">setVerticalMovementX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visualNavigation">
<db:title>bool QTextCursor::visualNavigation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>visualNavigation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool visualNavigation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the cursor does visual navigation; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Visual navigation means skipping over hidden text paragraphs. The default is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#setVisualNavigation">setVisualNavigation</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcursor.xml#movePosition">movePosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QTextCursor::operator!=(const QTextCursor &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QTextCursor &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">other</db:code> cursor is at a different position in the document as this cursor; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt">
<db:title>bool QTextCursor::operator&lt;(const QTextCursor &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const QTextCursor &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">other</db:code> cursor is positioned later in the document than this cursor; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>bool QTextCursor::operator&lt;=(const QTextCursor &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(const QTextCursor &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">other</db:code> cursor is positioned later or at the same position in the document as this cursor; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QTextCursor &amp;QTextCursor::operator=(const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextCursor &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCursor &amp; operator=(const QTextCursor &amp;cursor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes a copy of <db:code role="parameter">cursor</db:code> and assigns it to this <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link>. Note that <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> is an <db:link xlink:href="shared.xml">implicitly shared</db:link> class.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QTextCursor::operator==(const QTextCursor &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QTextCursor &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">other</db:code> cursor is at the same position in the document as this cursor; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt">
<db:title>bool QTextCursor::operator&gt;(const QTextCursor &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(const QTextCursor &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">other</db:code> cursor is positioned earlier in the document than this cursor; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>bool QTextCursor::operator&gt;=(const QTextCursor &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(const QTextCursor &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">other</db:code> cursor is positioned earlier or at the same position in the document as this cursor; otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
