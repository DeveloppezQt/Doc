<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Move Blocks Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Move Blocks example shows how to animate items in a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> using a <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link> with a custom transition.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtCore module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtCore&gt;
#include &lt;QtWidgets&gt;

class StateSwitchEvent: public QEvent
{
public:
    StateSwitchEvent()
        : QEvent(Type(StateSwitchType))
    {
    }

    explicit StateSwitchEvent(int rand)
        : QEvent(Type(StateSwitchType)),
          m_rand(rand)
    {
    }

    enum { StateSwitchType = QEvent::User + 256 };

    int rand() const { return m_rand; }

private:
    int m_rand;
};

class QGraphicsRectWidget : public QGraphicsWidget
{
public:
    void paint(QPainter *painter, const QStyleOptionGraphicsItem *,
               QWidget *) override
    {
        painter-&gt;fillRect(rect(), Qt::blue);
    }
};

class StateSwitchTransition: public QAbstractTransition
{
public:
    StateSwitchTransition(int rand)
        : QAbstractTransition(),
          m_rand(rand)
    {
    }

protected:
    bool eventTest(QEvent *event) override
    {
        return (event-&gt;type() == QEvent::Type(StateSwitchEvent::StateSwitchType))
            &amp;&amp; (static_cast&lt;StateSwitchEvent *&gt;(event)-&gt;rand() == m_rand);
    }

    void onTransition(QEvent *) override {}

private:
    int m_rand;
};

class StateSwitcher : public QState
{
    Q_OBJECT
public:
    StateSwitcher(QStateMachine *machine)
        : QState(machine), m_stateCount(0), m_lastIndex(0)
    { }

    void onEntry(QEvent *) override
    {
        int n;
        while ((n = (qrand() % m_stateCount + 1)) == m_lastIndex)
        { }
        m_lastIndex = n;
        machine()-&gt;postEvent(new StateSwitchEvent(n));
    }
    void onExit(QEvent *) override {}

    void addState(QState *state, QAbstractAnimation *animation) {
        StateSwitchTransition *trans = new StateSwitchTransition(++m_stateCount);
        trans-&gt;setTargetState(state);
        addTransition(trans);
        trans-&gt;addAnimation(animation);
    }

private:
    int m_stateCount;
    int m_lastIndex;
};

QState *createGeometryState(QObject *w1, const QRect &amp;rect1,
                            QObject *w2, const QRect &amp;rect2,
                            QObject *w3, const QRect &amp;rect3,
                            QObject *w4, const QRect &amp;rect4,
                            QState *parent)
{
    QState *result = new QState(parent);
    result-&gt;assignProperty(w1, &quot;geometry&quot;, rect1);
    result-&gt;assignProperty(w2, &quot;geometry&quot;, rect2);
    result-&gt;assignProperty(w3, &quot;geometry&quot;, rect3);
    result-&gt;assignProperty(w4, &quot;geometry&quot;, rect4);

    return result;
}

class GraphicsView : public QGraphicsView
{
    Q_OBJECT
public:
    GraphicsView(QGraphicsScene *scene, QWidget *parent = NULL) : QGraphicsView(scene, parent)
    {
    }

protected:
    void resizeEvent(QResizeEvent *event) override
    {
        fitInView(scene()-&gt;sceneRect());
        QGraphicsView::resizeEvent(event);
    }
};

int main(int argc, char **argv)
{
    QApplication app(argc, argv);

    QGraphicsRectWidget *button1 = new QGraphicsRectWidget;
    QGraphicsRectWidget *button2 = new QGraphicsRectWidget;
    QGraphicsRectWidget *button3 = new QGraphicsRectWidget;
    QGraphicsRectWidget *button4 = new QGraphicsRectWidget;
    button2-&gt;setZValue(1);
    button3-&gt;setZValue(2);
    button4-&gt;setZValue(3);
    QGraphicsScene scene(0, 0, 300, 300);
    scene.setBackgroundBrush(Qt::black);
    scene.addItem(button1);
    scene.addItem(button2);
    scene.addItem(button3);
    scene.addItem(button4);
    GraphicsView window(&amp;scene);
    window.setFrameStyle(0);
    window.setAlignment(Qt::AlignLeft | Qt::AlignTop);
    window.setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    window.setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    QStateMachine machine;

    QState *group = new QState();
    group-&gt;setObjectName(&quot;group&quot;);
    QTimer timer;
    timer.setInterval(1250);
    timer.setSingleShot(true);
    QObject::connect(group, SIGNAL(entered()), &amp;timer, SLOT(start()));

    QState *state1;
    QState *state2;
    QState *state3;
    QState *state4;
    QState *state5;
    QState *state6;
    QState *state7;

    state1 = createGeometryState(button1, QRect(100, 0, 50, 50),
                                 button2, QRect(150, 0, 50, 50),
                                 button3, QRect(200, 0, 50, 50),
                                 button4, QRect(250, 0, 50, 50),
                                 group);
    state2 = createGeometryState(button1, QRect(250, 100, 50, 50),
                                 button2, QRect(250, 150, 50, 50),
                                 button3, QRect(250, 200, 50, 50),
                                 button4, QRect(250, 250, 50, 50),
                                 group);
    state3 = createGeometryState(button1, QRect(150, 250, 50, 50),
                                 button2, QRect(100, 250, 50, 50),
                                 button3, QRect(50, 250, 50, 50),
                                 button4, QRect(0, 250, 50, 50),
                                 group);
    state4 = createGeometryState(button1, QRect(0, 150, 50, 50),
                                 button2, QRect(0, 100, 50, 50),
                                 button3, QRect(0, 50, 50, 50),
                                 button4, QRect(0, 0, 50, 50),
                                 group);
    state5 = createGeometryState(button1, QRect(100, 100, 50, 50),
                                 button2, QRect(150, 100, 50, 50),
                                 button3, QRect(100, 150, 50, 50),
                                 button4, QRect(150, 150, 50, 50),
                                 group);
    state6 = createGeometryState(button1, QRect(50, 50, 50, 50),
                                 button2, QRect(200, 50, 50, 50),
                                 button3, QRect(50, 200, 50, 50),
                                 button4, QRect(200, 200, 50, 50),
                                 group);
    state7 = createGeometryState(button1, QRect(0, 0, 50, 50),
                                 button2, QRect(250, 0, 50, 50),
                                 button3, QRect(0, 250, 50, 50),
                                 button4, QRect(250, 250, 50, 50),
                                 group);
    group-&gt;setInitialState(state1);

    QParallelAnimationGroup animationGroup;
    QSequentialAnimationGroup *subGroup;

    QPropertyAnimation *anim = new QPropertyAnimation(button4, &quot;geometry&quot;);
    anim-&gt;setDuration(1000);
    anim-&gt;setEasingCurve(QEasingCurve::OutElastic);
    animationGroup.addAnimation(anim);

    subGroup = new QSequentialAnimationGroup(&amp;animationGroup);
    subGroup-&gt;addPause(100);
    anim = new QPropertyAnimation(button3, &quot;geometry&quot;);
    anim-&gt;setDuration(1000);
    anim-&gt;setEasingCurve(QEasingCurve::OutElastic);
    subGroup-&gt;addAnimation(anim);

    subGroup = new QSequentialAnimationGroup(&amp;animationGroup);
    subGroup-&gt;addPause(150);
    anim = new QPropertyAnimation(button2, &quot;geometry&quot;);
    anim-&gt;setDuration(1000);
    anim-&gt;setEasingCurve(QEasingCurve::OutElastic);
    subGroup-&gt;addAnimation(anim);

    subGroup = new QSequentialAnimationGroup(&amp;animationGroup);
    subGroup-&gt;addPause(200);
    anim = new QPropertyAnimation(button1, &quot;geometry&quot;);
    anim-&gt;setDuration(1000);
    anim-&gt;setEasingCurve(QEasingCurve::OutElastic);
    subGroup-&gt;addAnimation(anim);

    StateSwitcher *stateSwitcher = new StateSwitcher(&amp;machine);
    stateSwitcher-&gt;setObjectName(&quot;stateSwitcher&quot;);
    group-&gt;addTransition(&amp;timer, SIGNAL(timeout()), stateSwitcher);
    stateSwitcher-&gt;addState(state1, &amp;animationGroup);
    stateSwitcher-&gt;addState(state2, &amp;animationGroup);
    stateSwitcher-&gt;addState(state3, &amp;animationGroup);
    stateSwitcher-&gt;addState(state4, &amp;animationGroup);
    stateSwitcher-&gt;addState(state5, &amp;animationGroup);
    stateSwitcher-&gt;addState(state6, &amp;animationGroup);
    stateSwitcher-&gt;addState(state7, &amp;animationGroup);

    machine.addState(group);
    machine.setInitialState(group);
    machine.start();

    window.resize(300, 300);
    window.show();

    qsrand(QTime(0,0,0).secsTo(QTime::currentTime()));

    return app.exec();
}

#include &quot;main.moc&quot;

</db:programlisting>
</db:article>
