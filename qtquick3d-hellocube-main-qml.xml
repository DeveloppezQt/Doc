<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - HelloCube Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to render 2D and 3D objects together in Qt Quick 3D.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2019 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D

Window {
    id: window
    width: 640
    height: 640
    visible: true
    color: &quot;black&quot;

    Item {
        id: qt_logo
        width: 230
        height: 230
        anchors.top: parent.top
        anchors.left: parent.left
        anchors.margins: 10

        layer.enabled: true

        Rectangle {
            anchors.fill: parent
            color: &quot;black&quot;
            Image {
                anchors.fill: parent
                source: &quot;qt_logo.png&quot;
            }
            Text {
                anchors.bottom: parent.bottom
                anchors.left: parent.left
                color: &quot;white&quot;
                font.pixelSize: 17
                text: qsTr(&quot;The Future is Written with Qt&quot;)
            }

            transform: Rotation {
                id: rotation
                origin.x: qt_logo.width / 2
                origin.y: qt_logo.height / 2
                axis { x: 1; y: 0; z: 0 }
            }

            PropertyAnimation {
                id: flip1
                target: rotation
                property: &quot;angle&quot;
                duration: 600
                to: 180
                from: 0
            }
            PropertyAnimation {
                id: flip2
                target: rotation
                property: &quot;angle&quot;
                duration: 600
                to: 360
                from: 180
            }
        }
    }

    View3D {
        id: view
        anchors.fill: parent

        PerspectiveCamera {
            position: Qt.vector3d(0, 200, 300)
            eulerRotation.x: -30
        }

        DirectionalLight {
            eulerRotation.x: -30
        }

        Model {
            id: cube
            source: &quot;#Cube&quot;
            materials: DefaultMaterial {
                diffuseMap: Texture {
                    sourceItem: qt_logo
                }
            }
            eulerRotation.y: 90

            Vector3dAnimation on eulerRotation {
                loops: Animation.Infinite
                duration: 5000
                from: Qt.vector3d(0, 0, 0)
                to: Qt.vector3d(360, 0, 360)
            }
        }
    }

    MouseArea {
        id: mouseArea
        anchors.fill: qt_logo

        Text {
            id: clickme
            anchors.top: mouseArea.top
            anchors.horizontalCenter: mouseArea.horizontalCenter
            font.pixelSize: 17
            text: &quot;Click me!&quot;
            color: &quot;white&quot;

            SequentialAnimation on color {
                loops: Animation.Infinite
                ColorAnimation { duration: 400; from: &quot;white&quot;; to: &quot;black&quot; }
                ColorAnimation { duration: 400; from: &quot;black&quot;; to: &quot;white&quot; }
            }

            states: [
                State {
                    name: &quot;flipped&quot;;
                    AnchorChanges {
                        target: clickme
                        anchors.top: undefined
                        anchors.bottom: mouseArea.bottom
                    }
                }
            ]
        }

        onClicked: {
            if (clickme.state == &quot;flipped&quot;) {
                clickme.state = &quot;&quot;;
                flip2.start();
            } else {
                clickme.state = &quot;flipped&quot;;
                flip1.start();
            }
        }
    }
}

</db:programlisting>
</db:article>
