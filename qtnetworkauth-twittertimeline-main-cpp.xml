<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Twitter Timeline Example</db:title>
<db:productname>QtNetworkAuth</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Authorization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates authenticating with OAuth to access a Twitter timeline.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Network Auth module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;ui_twitterdialog.h&quot;
#include &quot;twittertimelinemodel.h&quot;

#include &lt;functional&gt;

#include &lt;QUrl&gt;
#include &lt;QProcess&gt;
#include &lt;QApplication&gt;
#include &lt;QNetworkReply&gt;
#include &lt;QNetworkRequest&gt;
#include &lt;QCommandLineParser&gt;
#include &lt;QCommandLineOption&gt;

int main(int argc, char **argv)
{
    QApplication app(argc, argv);

    app.setApplicationName(&quot;Twitter Timeline&quot;);
    app.setApplicationDisplayName(&quot;Twitter Timeline&quot;);
    app.setOrganizationDomain(&quot;qt.io&quot;);
    app.setOrganizationName(&quot;The Qt Company&quot;);

    QCommandLineParser parser;
    QCommandLineOption token(QStringList() &lt;&lt; &quot;k&quot; &lt;&lt; &quot;consumer-key&quot;,
                             &quot;Application consumer key&quot;, &quot;key&quot;);
    QCommandLineOption secret(QStringList() &lt;&lt; &quot;s&quot; &lt;&lt; &quot;consumer-secret&quot;,
                              &quot;Application consumer secret&quot;, &quot;secret&quot;);
    QCommandLineOption connect(QStringList() &lt;&lt; &quot;c&quot; &lt;&lt; &quot;connect&quot;,
                               &quot;Connects to twitter. Requires consumer-key and consumer-secret&quot;);

    parser.addOptions({ token, secret, connect });
    parser.process(app);

    struct TwitterDialog : QDialog, Ui::TwitterDialog {
        TwitterTimelineModel model;

        TwitterDialog()
            : QDialog()
        {
            setupUi(this);
            view-&gt;setModel(&amp;model);
            view-&gt;horizontalHeader()-&gt;hideSection(0);
            view-&gt;horizontalHeader()-&gt;hideSection(1);
        }
    } twitterDialog;

    const auto authenticate = [&amp;]() {
        const auto clientIdentifier = twitterDialog.clientIdLineEdit-&gt;text();
        const auto clientSharedSecret = twitterDialog.clientSecretLineEdit-&gt;text();
        twitterDialog.model.authenticate(qMakePair(clientIdentifier, clientSharedSecret));
    };
    const auto buttonSlot = [&amp;]() {
        if (twitterDialog.model.status() == Twitter::Status::Granted)
            twitterDialog.model.updateTimeline();
        else
            authenticate();
    };

    twitterDialog.clientIdLineEdit-&gt;setText(parser.value(token));
    twitterDialog.clientSecretLineEdit-&gt;setText(parser.value(secret));
    if (parser.isSet(connect)) {
        if (parser.value(token).isEmpty() || parser.value(secret).isEmpty()) {
            parser.showHelp();
        } else {
            authenticate();
            twitterDialog.view-&gt;setFocus();
        }
    }

    QObject::connect(twitterDialog.pushButton, &amp;QPushButton::clicked, buttonSlot);
    QObject::connect(&amp;twitterDialog.model, &amp;TwitterTimelineModel::authenticated,
                     std::bind(&amp;QPushButton::setText, twitterDialog.pushButton, &quot;&amp;Update&quot;));

    twitterDialog.show();
    return app.exec();
}

</db:programlisting>
</db:article>
