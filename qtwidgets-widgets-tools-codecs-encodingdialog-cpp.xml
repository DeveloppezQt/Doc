<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Text Codecs Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to import and export text using text codecs.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2018 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;encodingdialog.h&quot;

#if QT_CONFIG(action)
#  include &amp;lt;QAction&amp;gt;
#endif
#include &amp;lt;QDialogButtonBox&amp;gt;
#include &amp;lt;QFormLayout&amp;gt;
#include &amp;lt;QLabel&amp;gt;
#include &amp;lt;QLineEdit&amp;gt;
#include &amp;lt;QVBoxLayout&amp;gt;

#if QT_CONFIG(clipboard)
#  include &amp;lt;QGuiApplication&amp;gt;
#  include &amp;lt;QClipboard&amp;gt;
#endif

#include &amp;lt;QTextStream&amp;gt;

// Helpers for formatting character sequences

// Format a special character like '\x0a'
template &amp;lt;class Int&amp;gt;
static void formatEscapedNumber(QTextStream &amp;amp;str, Int value, int base,
                                int width = 0,char prefix = 0)
{
    str &amp;lt;&amp;lt; '\\';
    if (prefix)
        str &amp;lt;&amp;lt; prefix;
    const auto oldPadChar = str.padChar();
    const auto oldFieldWidth = str.fieldWidth();
    const auto oldFieldAlignment = str.fieldAlignment();
    const auto oldIntegerBase = str.integerBase();
    str.setPadChar(QLatin1Char('0'));
    str.setFieldWidth(width);
    str.setFieldAlignment(QTextStream::AlignRight);
    str.setIntegerBase(base);
    str &amp;lt;&amp;lt; value;
    str.setIntegerBase(oldIntegerBase);
    str.setFieldAlignment(oldFieldAlignment);
    str.setFieldWidth(oldFieldWidth);
    str.setPadChar(oldPadChar);
}

template &amp;lt;class Int&amp;gt;
static bool formatSpecialCharacter(QTextStream &amp;amp;str, Int value)
{
    bool result = true;
    switch (value) {
    case '\\':
        str &amp;lt;&amp;lt; &quot;\\\\&quot;;
        break;
    case '\&quot;':
        str &amp;lt;&amp;lt; &quot;\\\&quot;&quot;;
        break;
    case '\n':
        str &amp;lt;&amp;lt; &quot;\\n&quot;;
        break;
    default:
        result = false;
        break;
    }
    return result;
}

// Format a sequence of characters (QChar, ushort (UTF-16), uint (UTF-32)
// or just char (Latin1, Utf-8)) with the help of traits specifying
// how to obtain the code for checking the printable-ness and how to
// stream out the plain ASCII values.

template &amp;lt;EncodingDialog::Encoding&amp;gt;
struct FormattingTraits
{
};

template &amp;lt;&amp;gt;
struct FormattingTraits&amp;lt;EncodingDialog::Unicode&amp;gt;
{
    static ushort code(QChar c) { return c.unicode(); }
    static char toAscii(QChar c) { return c.toLatin1(); }
};

template &amp;lt;&amp;gt;
struct FormattingTraits&amp;lt;EncodingDialog::Utf8&amp;gt;
{
    static ushort code(char c) { return uchar(c); }
    static char toAscii(char c) { return c; }
};

template &amp;lt;&amp;gt;
struct FormattingTraits&amp;lt;EncodingDialog::Utf16&amp;gt;
{
    static ushort code(ushort c) { return c; }
    static char toAscii(ushort c) { return char(c); }
};

template &amp;lt;&amp;gt;
struct FormattingTraits&amp;lt;EncodingDialog::Utf32&amp;gt;
{
    static uint code(uint c) { return c; }
    static char toAscii(uint c) { return char(c); }
};

template &amp;lt;&amp;gt;
struct FormattingTraits&amp;lt;EncodingDialog::Latin1&amp;gt;
{
    static uchar code(char c) { return uchar(c); }
    static char toAscii(char  c) { return c; }
};

static bool isHexDigit(char c)
{
    return (c &amp;gt;= '0' &amp;amp;&amp;amp; c &amp;lt;= '9') || (c &amp;gt;= 'a' &amp;amp;&amp;amp; c &amp;lt;= 'f')
        || (c &amp;gt;= 'A' &amp;amp;&amp;amp; c &amp;lt;= 'F');
}

template &amp;lt;EncodingDialog::Encoding encoding, class Iterator&amp;gt;
static void formatStringSequence(QTextStream &amp;amp;str, Iterator i1, Iterator i2,
                                 int escapeIntegerBase, int escapeWidth,
                                 char escapePrefix = 0)
{
    str &amp;lt;&amp;lt; '&quot;';
    bool separateHexEscape = false;
    for (; i1 != i2; ++i1) {
        const auto code = FormattingTraits&amp;lt;encoding&amp;gt;::code(*i1);
        if (code &amp;gt;= 0x80) {
            formatEscapedNumber(str, code, escapeIntegerBase, escapeWidth, escapePrefix);
            separateHexEscape = escapeIntegerBase == 16 &amp;amp;&amp;amp; escapeWidth == 0;
        } else {
            if (!formatSpecialCharacter(str, code)) {
                const char c = FormattingTraits&amp;lt;encoding&amp;gt;::toAscii(*i1);
                // For variable width/hex: Terminate the literal to stop digit parsing
                // (&quot;\x12&quot; &quot;34...&quot;).
                if (separateHexEscape &amp;amp;&amp;amp; isHexDigit(c))
                    str &amp;lt;&amp;lt; &quot;\&quot; \&quot;&quot;;
                str &amp;lt;&amp;lt; c;
            }
            separateHexEscape = false;
        }
    }
    str &amp;lt;&amp;lt; '&quot;';
}

static QString encodedString(const QString &amp;amp;value, EncodingDialog::Encoding e)
{
    QString result;
    QTextStream str(&amp;amp;result);
    switch (e) {
    case EncodingDialog::Unicode:
        formatStringSequence&amp;lt;EncodingDialog::Unicode&amp;gt;(str, value.cbegin(), value.cend(),
                                                      16, 4, 'u');
        break;
    case EncodingDialog::Utf8: {
        const QByteArray utf8 = value.toUtf8();
        str &amp;lt;&amp;lt; &quot;u8&quot;;
        formatStringSequence&amp;lt;EncodingDialog::Utf8&amp;gt;(str, utf8.cbegin(), utf8.cend(),
                                                   8, 3);
    }
        break;
    case EncodingDialog::Utf16: {
        auto utf16 = value.utf16();
        auto utf16End = utf16 + value.size();
        str &amp;lt;&amp;lt; 'u';
        formatStringSequence&amp;lt;EncodingDialog::Utf16&amp;gt;(str, utf16, utf16End,
                                                    16, 0, 'x');
    }
        break;
    case EncodingDialog::Utf32: {
        auto utf32 = value.toUcs4();
        str &amp;lt;&amp;lt; 'U';
        formatStringSequence&amp;lt;EncodingDialog::Utf32&amp;gt;(str, utf32.cbegin(), utf32.cend(),
                                                    16, 0, 'x');
    }
        break;
    case EncodingDialog::Latin1: {
        const QByteArray latin1 = value.toLatin1();
        formatStringSequence&amp;lt;EncodingDialog::Latin1&amp;gt;(str, latin1.cbegin(), latin1.cend(),
                                                     16, 0, 'x');
    }
        break;
    case EncodingDialog::EncodingCount:
        break;
    }
    return result;
}

// Dialog helpers

static const char *encodingLabels[]
{
    QT_TRANSLATE_NOOP(&quot;EncodingDialog&quot;, &quot;Unicode:&quot;),
    QT_TRANSLATE_NOOP(&quot;EncodingDialog&quot;, &quot;UTF-8:&quot;),
    QT_TRANSLATE_NOOP(&quot;EncodingDialog&quot;, &quot;UTF-16:&quot;),
    QT_TRANSLATE_NOOP(&quot;EncodingDialog&quot;, &quot;UTF-32:&quot;),
    QT_TRANSLATE_NOOP(&quot;EncodingDialog&quot;, &quot;Latin1:&quot;)
};

static const char *encodingToolTips[]
{
    QT_TRANSLATE_NOOP(&quot;EncodingDialog&quot;, &quot;Unicode points for use with any encoding (C++, Python)&quot;),
    QT_TRANSLATE_NOOP(&quot;EncodingDialog&quot;, &quot;QString::fromUtf8()&quot;),
    QT_TRANSLATE_NOOP(&quot;EncodingDialog&quot;, &quot;QStringViewLiteral(), wchar_t on Windows&quot;),
    QT_TRANSLATE_NOOP(&quot;EncodingDialog&quot;, &quot;wchar_t on Unix (Ucs4)&quot;),
    QT_TRANSLATE_NOOP(&quot;EncodingDialog&quot;, &quot;QLatin1String&quot;)
};

// A read-only line edit with a tool button to copy the contents
class DisplayLineEdit : public QLineEdit
{
    Q_OBJECT
public:
    explicit DisplayLineEdit(const QIcon &amp;amp;icon, QWidget *parent = nullptr);

public slots:
    void copyAll();
};

DisplayLineEdit::DisplayLineEdit(const QIcon &amp;amp;icon, QWidget *parent) :
    QLineEdit(parent)
{
    setReadOnly(true);
#if QT_CONFIG(clipboard) &amp;amp;&amp;amp; QT_CONFIG(action)
    auto copyAction = addAction(icon, QLineEdit::TrailingPosition);
    connect(copyAction, &amp;amp;QAction::triggered, this, &amp;amp;DisplayLineEdit::copyAll);
#endif
}

void DisplayLineEdit::copyAll()
{
#if QT_CONFIG(clipboard)
    QGuiApplication::clipboard()-&amp;gt;setText(text());
#endif
}

static void addFormLayoutRow(QFormLayout *formLayout, const QString &amp;amp;text,
                             QWidget *w, const QString &amp;amp;toolTip)
{
    auto label = new QLabel(text);
    label-&amp;gt;setToolTip(toolTip);
    w-&amp;gt;setToolTip(toolTip);
    label-&amp;gt;setBuddy(w);
    formLayout-&amp;gt;addRow(label, w);
}

EncodingDialog::EncodingDialog(QWidget *parent) :
    QDialog(parent)
{
    setWindowFlags(windowFlags() &amp;amp; ~Qt::WindowContextHelpButtonHint);
    setWindowTitle(tr(&quot;Encodings&quot;));

    auto formLayout = new QFormLayout;
    auto sourceLineEdit = new QLineEdit(this);
    sourceLineEdit-&amp;gt;setClearButtonEnabled(true);
    connect(sourceLineEdit, &amp;amp;QLineEdit::textChanged, this, &amp;amp;EncodingDialog::textChanged);

    addFormLayoutRow(formLayout, tr(&quot;&amp;amp;Source:&quot;), sourceLineEdit, tr(&quot;Enter text&quot;));

    const auto copyIcon = QIcon::fromTheme(QLatin1String(&quot;edit-copy&quot;),
                                           QIcon(QLatin1String(&quot;:/images/editcopy&quot;)));
    for (int i = 0; i &amp;lt; EncodingCount; ++i) {
        m_lineEdits[i] = new DisplayLineEdit(copyIcon, this);
        addFormLayoutRow(formLayout, tr(encodingLabels[i]),
                         m_lineEdits[i], tr(encodingToolTips[i]));
    }

    auto mainLayout = new QVBoxLayout(this);
    mainLayout-&amp;gt;addLayout(formLayout);
    auto buttonBox = new QDialogButtonBox(QDialogButtonBox::Close);
    connect(buttonBox, &amp;amp;QDialogButtonBox::rejected, this, &amp;amp;QDialog::reject);
    mainLayout-&amp;gt;addWidget(buttonBox);
}

void EncodingDialog::textChanged(const QString &amp;amp;t)
{
    if (t.isEmpty()) {
        for (auto lineEdit : m_lineEdits)
            lineEdit-&amp;gt;clear();
    } else {
         for (int i = 0; i &amp;lt; EncodingCount; ++i)
             m_lineEdits[i]-&amp;gt;setText(encodedString(t, static_cast&amp;lt;Encoding&amp;gt;(i)));
    }
}

#include &quot;encodingdialog.moc&quot;

</db:programlisting>
</db:article>
