<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaPlayerControl Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmediaplayercontrol.xml">QMediaPlayerControl</db:link> class provides access to the media playing functionality of a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaPlayerControl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediacontrol.xml" xlink:role="class">QMediaControl</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaPlayerControl is part of <db:simplelist><db:member>multimedia_control</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>If a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link> can play media is will implement <db:link xlink:href="qmediaplayercontrol.xml">QMediaPlayerControl</db:link>. This control provides a means to set the <db:link xlink:href="qmediaplayercontrol.xml#setMedia">media</db:link> to play, <db:link xlink:href="qmediaplayercontrol.xml#play">start</db:link>, <db:link xlink:href="qmediaplayercontrol.xml#pause">pause</db:link> and <db:link xlink:href="qmediaplayercontrol.xml#stop">stop</db:link> playback, <db:link xlink:href="qmediaplayercontrol.xml#setPosition">seek</db:link>, and control the <db:link xlink:href="qmediaplayercontrol.xml#setVolume">volume</db:link>. It also provides feedback on the <db:link xlink:href="qmediaplayercontrol.xml#duration">duration</db:link> of the media, the current <db:link xlink:href="qmediaplayercontrol.xml#position">position</db:link>, and <db:link xlink:href="qmediaplayercontrol.xml#bufferStatus">buffering</db:link> progress.</db:para>
<db:para>The functionality provided by this control is exposed to application code through the <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> class.</db:para>
<db:para>The interface name of <db:link xlink:href="qmediaplayercontrol.xml">QMediaPlayerControl</db:link> is <db:code>org.qt-project.qt.mediaplayercontrol/5.0</db:code> as defined in <db:link xlink:href="qmediaplayercontrol.xml#QMediaPlayerControl_iid">QMediaPlayerControl_iid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaservice.xml#requestControl">QMediaService::requestControl</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaPlayerControl">
<db:title>[explicit protected] QMediaPlayerControl::QMediaPlayerControl(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new media player control with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMediaPlayerControl">
<db:title>[virtual noexcept] QMediaPlayerControl::~QMediaPlayerControl()</db:title>
<db:para>Destroys a media player control.</db:para>
</db:section>
<db:section xml:id="audioAvailableChanged">
<db:title>void QMediaPlayerControl::audioAvailableChanged(bool <db:emphasis>audio</db:emphasis>)</db:title>
<db:para>Signals that there has been a change in the availability of <db:code role="parameter">audio</db:code> output.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#isAudioAvailable">isAudioAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availablePlaybackRanges">
<db:title>[pure virtual] QMediaTimeRange QMediaPlayerControl::availablePlaybackRanges() const</db:title>
<db:para>Returns a range of times in milliseconds that can be played back.</db:para>
<db:para>Usually for local files this is a continuous interval equal to [0..<db:link xlink:href="qmediaplayercontrol.xml#duration">duration</db:link>()] or an empty time range if seeking is not supported, but for network sources it refers to the buffered parts of the media.</db:para>
</db:section>
<db:section xml:id="availablePlaybackRangesChanged">
<db:title>void QMediaPlayerControl::availablePlaybackRangesChanged(const QMediaTimeRange &amp;<db:emphasis>ranges</db:emphasis>)</db:title>
<db:para>Signals that the available media playback <db:code role="parameter">ranges</db:code> have changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#availablePlaybackRanges">QMediaPlayerControl::availablePlaybackRanges</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bufferStatus">
<db:title>[pure virtual] int QMediaPlayerControl::bufferStatus() const</db:title>
<db:para>Returns the buffering progress of the current media. Progress is measured in the percentage of the buffer filled.</db:para>
</db:section>
<db:section xml:id="bufferStatusChanged">
<db:title>void QMediaPlayerControl::bufferStatusChanged(int <db:emphasis>progress</db:emphasis>)</db:title>
<db:para>Signals that buffering <db:code role="parameter">progress</db:code> has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#bufferStatus">bufferStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="duration">
<db:title>[pure virtual] qint64 QMediaPlayerControl::duration() const</db:title>
<db:para>Returns the duration of the current media in milliseconds.</db:para>
</db:section>
<db:section xml:id="durationChanged">
<db:title>void QMediaPlayerControl::durationChanged(qint64 <db:emphasis>duration</db:emphasis>)</db:title>
<db:para>Signals that the <db:code role="parameter">duration</db:code> of the current media has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#duration">duration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>void QMediaPlayerControl::error(int <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>)</db:title>
<db:para>Signals that an <db:code role="parameter">error</db:code> has occurred. The <db:code role="parameter">errorString</db:code> provides a more detailed explanation.</db:para>
</db:section>
<db:section xml:id="isAudioAvailable">
<db:title>[pure virtual] bool QMediaPlayerControl::isAudioAvailable() const</db:title>
<db:para>Identifies if there is audio output available for the current media.</db:para>
<db:para>Returns true if audio output is available and false otherwise.</db:para>
</db:section>
<db:section xml:id="isMuted">
<db:title>[pure virtual] bool QMediaPlayerControl::isMuted() const</db:title>
<db:para>Returns the mute state of a player control.</db:para>
</db:section>
<db:section xml:id="isSeekable">
<db:title>[pure virtual] bool QMediaPlayerControl::isSeekable() const</db:title>
<db:para>Identifies if the current media is seekable.</db:para>
<db:para>Returns true if it possible to seek within the current media, and false otherwise.</db:para>
</db:section>
<db:section xml:id="isVideoAvailable">
<db:title>[pure virtual] bool QMediaPlayerControl::isVideoAvailable() const</db:title>
<db:para>Identifies if there is video output available for the current media.</db:para>
<db:para>Returns true if video output is available and false otherwise.</db:para>
</db:section>
<db:section xml:id="media">
<db:title>[pure virtual] QMediaContent QMediaPlayerControl::media() const</db:title>
<db:para>Returns the current media source.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#setMedia">setMedia</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mediaChanged">
<db:title>void QMediaPlayerControl::mediaChanged(const QMediaContent &amp;<db:emphasis>content</db:emphasis>)</db:title>
<db:para>Signals that the current media <db:code role="parameter">content</db:code> has changed.</db:para>
</db:section>
<db:section xml:id="mediaStatus">
<db:title>[pure virtual] QMediaPlayer::MediaStatus QMediaPlayerControl::mediaStatus() const</db:title>
<db:para>Returns the status of the current media.</db:para>
</db:section>
<db:section xml:id="mediaStatusChanged">
<db:title>void QMediaPlayerControl::mediaStatusChanged(QMediaPlayer::MediaStatus <db:emphasis>status</db:emphasis>)</db:title>
<db:para>Signals that the <db:code role="parameter">status</db:code> of the current media has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#mediaStatus">mediaStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mediaStream">
<db:title>[pure virtual] const QIODevice *QMediaPlayerControl::mediaStream() const</db:title>
<db:para>Returns the current media stream. This is only a valid if a stream was passed to <db:link xlink:href="qmediaplayercontrol.xml#setMedia">setMedia</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#setMedia">setMedia</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mutedChanged">
<db:title>void QMediaPlayerControl::mutedChanged(bool <db:emphasis>mute</db:emphasis>)</db:title>
<db:para>Signals a change in the <db:code role="parameter">mute</db:code> status of a player control.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#isMuted">isMuted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pause">
<db:title>[pure virtual] void QMediaPlayerControl::pause()</db:title>
<db:para>Pauses playback of the current media.</db:para>
<db:para>If sucessful the player control will immediately enter the <db:link xlink:href="qmediaplayer.xml#State-enum">paused</db:link> state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplayercontrol.xml#play">play</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplayercontrol.xml#stop">stop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="play">
<db:title>[pure virtual] void QMediaPlayerControl::play()</db:title>
<db:para>Starts playback of the current media.</db:para>
<db:para>If successful the player control will immediately enter the <db:link xlink:href="qmediaplayer.xml#State-enum">playing</db:link> state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="playbackRate">
<db:title>[pure virtual] qreal QMediaPlayerControl::playbackRate() const</db:title>
<db:para>Returns the rate of playback.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#setPlaybackRate">setPlaybackRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="playbackRateChanged">
<db:title>void QMediaPlayerControl::playbackRateChanged(qreal <db:emphasis>rate</db:emphasis>)</db:title>
<db:para>Signal emitted when playback rate changes to <db:code role="parameter">rate</db:code>.</db:para>
</db:section>
<db:section xml:id="position">
<db:title>[pure virtual] qint64 QMediaPlayerControl::position() const</db:title>
<db:para>Returns the current playback position in milliseconds.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#setPosition">setPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="positionChanged">
<db:title>void QMediaPlayerControl::positionChanged(qint64 <db:emphasis>position</db:emphasis>)</db:title>
<db:para>Signals the playback <db:code role="parameter">position</db:code> has changed.</db:para>
<db:para>This is only emitted in when there has been a discontinous change in the playback postion, such as a seek or the position being reset.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#position">position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="seekableChanged">
<db:title>void QMediaPlayerControl::seekableChanged(bool <db:emphasis>seekable</db:emphasis>)</db:title>
<db:para>Signals that the <db:code role="parameter">seekable</db:code> state of a player control has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#isSeekable">isSeekable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMedia">
<db:title>[pure virtual] void QMediaPlayerControl::setMedia(const QMediaContent &amp;<db:emphasis>media</db:emphasis>, QIODevice *<db:emphasis>stream</db:emphasis>)</db:title>
<db:para>Sets the current <db:code role="parameter">media</db:code> source. If a <db:code role="parameter">stream</db:code> is supplied; data will be read from that instead of attempting to resolve the media source. The media source may still be used to supply media information such as mime type.</db:para>
<db:para>Setting the media to a null <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link> will cause the control to discard all information relating to the current media source and to cease all I/O operations related to that media.</db:para>
<db:para>Qt resource files are never passed as is. If the service supports <db:link xlink:href="qmediaserviceproviderhint.xml#Feature-enum">QMediaServiceProviderHint::StreamPlayback</db:link>, a <db:code role="parameter">stream</db:code> is supplied, pointing to an opened <db:link xlink:href="qfile.xml">QFile</db:link>. Otherwise, the resource is copied into a temporary file and <db:code role="parameter">media</db:code> contains the url to that file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#media">media</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMuted">
<db:title>[pure virtual] void QMediaPlayerControl::setMuted(bool <db:emphasis>mute</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">mute</db:code> state of a player control.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#isMuted">isMuted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPlaybackRate">
<db:title>[pure virtual] void QMediaPlayerControl::setPlaybackRate(qreal <db:emphasis>rate</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">rate</db:code> of playback.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#playbackRate">playbackRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPosition">
<db:title>[pure virtual] void QMediaPlayerControl::setPosition(qint64 <db:emphasis>position</db:emphasis>)</db:title>
<db:para>Sets the playback <db:code role="parameter">position</db:code> of the current media. This will initiate a seek and it may take some time for playback to reach the position set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#position">position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVolume">
<db:title>[pure virtual] void QMediaPlayerControl::setVolume(int <db:emphasis>volume</db:emphasis>)</db:title>
<db:para>Sets the audio <db:code role="parameter">volume</db:code> of a player control.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#volume">volume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>[pure virtual] QMediaPlayer::State QMediaPlayerControl::state() const</db:title>
<db:para>Returns the state of a player control.</db:para>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QMediaPlayerControl::stateChanged(QMediaPlayer::State <db:emphasis>state</db:emphasis>)</db:title>
<db:para>Signals that the <db:code role="parameter">state</db:code> of a player control has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop">
<db:title>[pure virtual] void QMediaPlayerControl::stop()</db:title>
<db:para>Stops playback of the current media.</db:para>
<db:para>If successful the player control will immediately enter the <db:link xlink:href="qmediaplayer.xml#State-enum">stopped</db:link> state.</db:para>
</db:section>
<db:section xml:id="videoAvailableChanged">
<db:title>void QMediaPlayerControl::videoAvailableChanged(bool <db:emphasis>video</db:emphasis>)</db:title>
<db:para>Signals that there has been a change in the availability of <db:code role="parameter">video</db:code> output.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#isVideoAvailable">isVideoAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="volume">
<db:title>[pure virtual] int QMediaPlayerControl::volume() const</db:title>
<db:para>Returns the audio volume of a player control.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#setVolume">setVolume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="volumeChanged">
<db:title>void QMediaPlayerControl::volumeChanged(int <db:emphasis>volume</db:emphasis>)</db:title>
<db:para>Signals the audio <db:code role="parameter">volume</db:code> of a player control has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayercontrol.xml#volume">volume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QMediaPlayerControl_iid">
<db:title>QMediaPlayerControl_iid</db:title>
<db:para><db:code>org.qt-project.qt.mediaplayercontrol/5.0</db:code></db:para>
<db:para>Defines the interface name of the <db:link xlink:href="qmediaplayercontrol.xml">QMediaPlayerControl</db:link> class.</db:para>
</db:section>
</db:section>
</db:article>
