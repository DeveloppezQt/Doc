<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTest Namespace</db:title>
<db:productname>QtTestLib</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Test Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtest.xml">QTest</db:link> namespace contains all the functions and declarations that are related to Qt Test.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTest</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += testlib</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>See the <db:link xlink:href="qtest-overview.xml">Qt Test Overview</db:link> for information about how to write unit tests.</db:para>
</db:section>
<db:section xml:id="classes">
<db:title>Classes</db:title>
<db:section>
<db:title>class <db:link xlink:href="qtest-qtoucheventsequence.xml" xlink:role="class">QTouchEventSequence</db:link></db:title>
<db:para>The <db:link xlink:href="qtest-qtoucheventsequence.xml">QTouchEventSequence</db:link> class is used to simulate a sequence of touch events.</db:para>
</db:section>
</db:section>
<db:section xml:id="type-documentation">
<db:title>Type Documentation</db:title>
<db:section xml:id="KeyAction-enum">
<db:title>enum QTest::KeyAction</db:title>
<db:para>This enum describes possible actions for key handling.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::Press</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The key is pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::Release</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The key is released.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::Click</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The key is clicked (pressed and released).</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="MouseAction-enum">
<db:title>enum QTest::MouseAction</db:title>
<db:para>This enum describes possible actions for mouse handling.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::MousePress</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A mouse button is pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::MouseRelease</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A mouse button is released.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::MouseClick</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A mouse button is clicked (pressed and released).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::MouseDClick</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>A mouse button is double clicked (pressed and released twice).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::MouseMove</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The mouse pointer has moved.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="QBenchmarkMetric-enum">
<db:title>[since 4.7] enum QTest::QBenchmarkMetric</db:title>
<db:para>This enum lists all the things that can be benchmarked.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::FramesPerSecond</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Frames per second</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::BitsPerSecond</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Bits per second</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::BytesPerSecond</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Bytes per second</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::WalltimeMilliseconds</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Clock time in milliseconds</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::WalltimeNanoseconds</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Clock time in nanoseconds</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::BytesAllocated</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Memory usage in bytes</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::Events</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Event count</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::CPUTicks</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>CPU time</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::CPUMigrations</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Process migrations between CPUs</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::CPUCycles</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>CPU cycles</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::BusCycles</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Bus cycles</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::StalledCycles</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Cycles stalled</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::InstructionReads</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Instruction reads</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::Instructions</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Instructions executed</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::BranchInstructions</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>Branch-type instructions</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::BranchMisses</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>Branch instructions that were mispredicted</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::CacheReferences</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Cache accesses of any type</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::CacheMisses</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td>
<db:para>Cache misses of any type</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::CacheReads</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>Cache reads / loads</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::CacheReadMisses</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td>
<db:para>Cache read / load misses</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::CacheWrites</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>Cache writes / stores</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::CacheWriteMisses</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td>
<db:para>Cache write / store misses</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::CachePrefetches</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>Cache prefetches</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::CachePrefetchMisses</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
<db:td>
<db:para>Cache prefetch misses</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::ContextSwitches</db:code></db:para>
</db:td>
<db:td><db:code>24</db:code></db:td>
<db:td>
<db:para>Context switches</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::PageFaults</db:code></db:para>
</db:td>
<db:td><db:code>25</db:code></db:td>
<db:td>
<db:para>Page faults of any type</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::MinorPageFaults</db:code></db:para>
</db:td>
<db:td><db:code>26</db:code></db:td>
<db:td>
<db:para>Minor page faults</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::MajorPageFaults</db:code></db:para>
</db:td>
<db:td><db:code>27</db:code></db:td>
<db:td>
<db:para>Major page faults</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::AlignmentFaults</db:code></db:para>
</db:td>
<db:td><db:code>28</db:code></db:td>
<db:td>
<db:para>Faults caused due to misalignment</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::EmulationFaults</db:code></db:para>
</db:td>
<db:td><db:code>29</db:code></db:td>
<db:td>
<db:para>Faults that needed software emulation</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that <db:code>WalltimeNanoseconds</db:code> and <db:code>BytesAllocated</db:code> are only provided for use via <db:link xlink:href="">setBenchmarkResult()</db:link>, and results in those metrics are not able to be provided automatically by the <db:link xlink:href="qtest.xml">QTest</db:link> framework.</db:para>
<db:para>This enum was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QTest::benchmarkMetricName()</db:link></db:member>
<db:member><db:link xlink:href="">QTest::benchmarkMetricUnit()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="TestFailMode-enum">
<db:title>enum QTest::TestFailMode</db:title>
<db:para>This enum describes the modes for handling an expected failure of the <db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>() or <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>() macros.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::Abort</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Aborts the execution of the test. Use this mode when it doesn't make sense to execute the test any further after the expected failure.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtest.xml">QTest</db:link></db:emphasis>::Continue</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Continues execution of the test after the expected failure.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#QEXPECT_FAIL">QEXPECT_FAIL</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="currentAppName">
<db:title>const int *QTest::currentAppName()</db:title>
<db:para>Returns the name of the binary that is currently executed.</db:para>
</db:section>
<db:section xml:id="currentDataTag">
<db:title>const int *QTest::currentDataTag()</db:title>
<db:para>Returns the name of the current test data. If the test doesn't have any assigned testdata, the function returns 0.</db:para>
</db:section>
<db:section xml:id="currentTestFailed">
<db:title>int QTest::currentTestFailed()</db:title>
<db:para>Returns <db:code>true</db:code> if the current test function failed, otherwise false.</db:para>
</db:section>
<db:section xml:id="currentTestFunction">
<db:title>const int *QTest::currentTestFunction()</db:title>
<db:para>Returns the name of the test function that is currently executed.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void MyTestClass::cleanup()
{
    if (qstrcmp(currentTestFunction(), &quot;myDatabaseTest&quot;) == 0) {
        // clean up all database connections
        closeAllDatabases();
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="ignoreMessage">
<db:title>int QTest::ignoreMessage(int <db:emphasis>type</db:emphasis>, const char *<db:emphasis>message</db:emphasis>)</db:title>
<db:para>Ignores messages created by <db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>() or <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>(). If the <db:code role="parameter">message</db:code> with the corresponding <db:code role="parameter">type</db:code> is outputted, it will be removed from the test log. If the test finished and the <db:code role="parameter">message</db:code> was not outputted, a test failure is appended to the test log.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Invoking this function will only ignore one message. If the message you want to ignore is outputted twice, you have to call ignoreMessage() twice, too.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDir dir;

QTest::ignoreMessage(QtWarningMsg, &quot;QDir::mkdir: Empty or null file name(s)&quot;);
dir.mkdir(&quot;&quot;);
</db:programlisting>
<db:para>The example above tests that QDir::mkdir() outputs the right warning when invoked with an invalid file name.</db:para>
</db:section>
<db:section xml:id="ignoreMessage-1">
<db:title>[since 5.3] int QTest::ignoreMessage(int <db:emphasis>type</db:emphasis>, const QRegularExpression &amp;<db:emphasis>messagePattern</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Ignores messages created by <db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>() or <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>(). If the message matching <db:code role="parameter">messagePattern</db:code> with the corresponding <db:code role="parameter">type</db:code> is outputted, it will be removed from the test log. If the test finished and the message was not outputted, a test failure is appended to the test log.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Invoking this function will only ignore one message. If the message you want to ignore is outputted twice, you have to call <db:link xlink:href="qtest.xml#ignoreMessage">ignoreMessage</db:link>() twice, too.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="keyClick">
<db:title>[since 5.0] int QTest::keyClick(int *<db:emphasis>window</db:emphasis>, char <db:emphasis>key</db:emphasis>, int <db:emphasis>modifier</db:emphasis>, int <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Simulates clicking of <db:code role="parameter">key</db:code> with an optional <db:code role="parameter">modifier</db:code> on a <db:code role="parameter">window</db:code>. If <db:code role="parameter">delay</db:code> is larger than 0, the test will wait for <db:code role="parameter">delay</db:code> milliseconds before clicking the key.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QTest::keyClick(myWindow, 'a');
</db:programlisting>
<db:para>The example above simulates clicking <db:code>a</db:code> on <db:code>myWindow</db:code> without any keyboard modifiers and without delay of the test.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#keyClicks">QTest::keyClicks</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyClick-1">
<db:title>[since 5.0] int QTest::keyClick(int *<db:emphasis>window</db:emphasis>, int <db:emphasis>key</db:emphasis>, int <db:emphasis>modifier</db:emphasis>, int <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Simulates clicking of <db:code role="parameter">key</db:code> with an optional <db:code role="parameter">modifier</db:code> on a <db:code role="parameter">window</db:code>. If <db:code role="parameter">delay</db:code> is larger than 0, the test will wait for <db:code role="parameter">delay</db:code> milliseconds before clicking the key.</db:para>
<db:para>Examples:</db:para>
<db:programlisting language="cpp">QTest::keyClick(myWindow, Qt::Key_Escape);

QTest::keyClick(myWindow, Qt::Key_Escape, Qt::ShiftModifier, 200);
</db:programlisting>
<db:para>The first example above simulates clicking the <db:code>escape</db:code> key on <db:code>myWindow</db:code> without any keyboard modifiers and without delay. The second example simulates clicking <db:code>shift-escape</db:code> on <db:code>myWindow</db:code> following a 200 ms delay of the test.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#keyClicks">QTest::keyClicks</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyClicks">
<db:title>void QTest::keyClicks(int *<db:emphasis>widget</db:emphasis>, const int &amp;<db:emphasis>sequence</db:emphasis>, int <db:emphasis>modifier</db:emphasis>, int <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>Simulates clicking a <db:code role="parameter">sequence</db:code> of keys on a <db:code role="parameter">widget</db:code>. Optionally, a keyboard <db:code role="parameter">modifier</db:code> can be specified as well as a <db:code role="parameter">delay</db:code> (in milliseconds) of the test before each key click.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QTest::keyClicks(myWidget, &quot;hello world&quot;);
</db:programlisting>
<db:para>The example above simulates clicking the sequence of keys representing &quot;hello world&quot; on <db:code>myWidget</db:code> without any keyboard modifiers and without delay of the test.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#keyClick">QTest::keyClick</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyEvent">
<db:title>[since 5.0] void QTest::keyEvent(QTest::KeyAction <db:emphasis>action</db:emphasis>, int *<db:emphasis>window</db:emphasis>, char <db:emphasis>ascii</db:emphasis>, int <db:emphasis>modifier</db:emphasis>, int <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends a Qt key event to <db:code role="parameter">window</db:code> with the given key <db:code role="parameter">ascii</db:code> and an associated <db:code role="parameter">action</db:code>. Optionally, a keyboard <db:code role="parameter">modifier</db:code> can be specified, as well as a <db:code role="parameter">delay</db:code> (in milliseconds) of the test before sending the event.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="keyEvent-1">
<db:title>[since 5.0] void QTest::keyEvent(QTest::KeyAction <db:emphasis>action</db:emphasis>, int *<db:emphasis>window</db:emphasis>, int <db:emphasis>key</db:emphasis>, int <db:emphasis>modifier</db:emphasis>, int <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sends a Qt key event to <db:code role="parameter">window</db:code> with the given <db:code role="parameter">key</db:code> and an associated <db:code role="parameter">action</db:code>. Optionally, a keyboard <db:code role="parameter">modifier</db:code> can be specified, as well as a <db:code role="parameter">delay</db:code> (in milliseconds) of the test before sending the event.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="keyPress">
<db:title>[since 5.0] int QTest::keyPress(int *<db:emphasis>window</db:emphasis>, char <db:emphasis>key</db:emphasis>, int <db:emphasis>modifier</db:emphasis>, int <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Simulates pressing a <db:code role="parameter">key</db:code> with an optional <db:code role="parameter">modifier</db:code> on a <db:code role="parameter">window</db:code>. If <db:code role="parameter">delay</db:code> is larger than 0, the test will wait for <db:code role="parameter">delay</db:code> milliseconds before pressing the key.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> At some point you should release the key using <db:link xlink:href="qtest.xml#keyRelease">keyRelease</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#keyRelease">QTest::keyRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#keyClick">QTest::keyClick</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPress-1">
<db:title>[since 5.0] int QTest::keyPress(int *<db:emphasis>window</db:emphasis>, int <db:emphasis>key</db:emphasis>, int <db:emphasis>modifier</db:emphasis>, int <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Simulates pressing a <db:code role="parameter">key</db:code> with an optional <db:code role="parameter">modifier</db:code> on a <db:code role="parameter">window</db:code>. If <db:code role="parameter">delay</db:code> is larger than 0, the test will wait for <db:code role="parameter">delay</db:code> milliseconds before pressing the key.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> At some point you should release the key using <db:link xlink:href="qtest.xml#keyRelease">keyRelease</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#keyRelease">QTest::keyRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#keyClick">QTest::keyClick</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyRelease">
<db:title>[since 5.0] int QTest::keyRelease(int *<db:emphasis>window</db:emphasis>, char <db:emphasis>key</db:emphasis>, int <db:emphasis>modifier</db:emphasis>, int <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Simulates releasing a <db:code role="parameter">key</db:code> with an optional <db:code role="parameter">modifier</db:code> on a <db:code role="parameter">window</db:code>. If <db:code role="parameter">delay</db:code> is larger than 0, the test will wait for <db:code role="parameter">delay</db:code> milliseconds before releasing the key.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#keyClick">QTest::keyClick</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyRelease-1">
<db:title>[since 5.0] int QTest::keyRelease(int *<db:emphasis>window</db:emphasis>, int <db:emphasis>key</db:emphasis>, int <db:emphasis>modifier</db:emphasis>, int <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Simulates releasing a <db:code role="parameter">key</db:code> with an optional <db:code role="parameter">modifier</db:code> on a <db:code role="parameter">window</db:code>. If <db:code role="parameter">delay</db:code> is larger than 0, the test will wait for <db:code role="parameter">delay</db:code> milliseconds before releasing the key.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#keyPress">QTest::keyPress</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#keyClick">QTest::keyClick</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseClick">
<db:title>[since 5.0] void QTest::mouseClick(int *<db:emphasis>window</db:emphasis>, int <db:emphasis>button</db:emphasis>, int <db:emphasis>stateKey</db:emphasis> = 0, int <db:emphasis>pos</db:emphasis> = QPoint(), int <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Simulates clicking a mouse <db:code role="parameter">button</db:code> with an optional <db:code role="parameter">stateKey</db:code> modifier on a <db:code role="parameter">window</db:code>. The position of the click is defined by <db:code role="parameter">pos</db:code>; the default position is the center of the window. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before pressing and before releasing the button.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#mousePress">QTest::mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#mouseRelease">QTest::mouseRelease</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseDClick">
<db:title>[since 5.0] void QTest::mouseDClick(int *<db:emphasis>window</db:emphasis>, int <db:emphasis>button</db:emphasis>, int <db:emphasis>stateKey</db:emphasis> = 0, int <db:emphasis>pos</db:emphasis> = QPoint(), int <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Simulates double clicking a mouse <db:code role="parameter">button</db:code> with an optional <db:code role="parameter">stateKey</db:code> modifier on a <db:code role="parameter">window</db:code>. The position of the click is defined by <db:code role="parameter">pos</db:code>; the default position is the center of the window. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before each press and release.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#mouseClick">QTest::mouseClick</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseMove">
<db:title>[since 5.0] void QTest::mouseMove(int *<db:emphasis>window</db:emphasis>, int <db:emphasis>pos</db:emphasis> = QPoint(), int <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Moves the mouse pointer to a <db:code role="parameter">window</db:code>. If <db:code role="parameter">pos</db:code> is not specified, the mouse pointer moves to the center of the window. If a <db:code role="parameter">delay</db:code> (in milliseconds) is given, the test will wait before moving the mouse pointer.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="mousePress">
<db:title>[since 5.0] void QTest::mousePress(int *<db:emphasis>window</db:emphasis>, int <db:emphasis>button</db:emphasis>, int <db:emphasis>stateKey</db:emphasis> = 0, int <db:emphasis>pos</db:emphasis> = QPoint(), int <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Simulates pressing a mouse <db:code role="parameter">button</db:code> with an optional <db:code role="parameter">stateKey</db:code> modifier on a <db:code role="parameter">window</db:code>. The position is defined by <db:code role="parameter">pos</db:code>; the default position is the center of the window. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before the press.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#mouseRelease">QTest::mouseRelease</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#mouseClick">QTest::mouseClick</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseRelease">
<db:title>[since 5.0] void QTest::mouseRelease(int *<db:emphasis>window</db:emphasis>, int <db:emphasis>button</db:emphasis>, int <db:emphasis>stateKey</db:emphasis> = 0, int <db:emphasis>pos</db:emphasis> = QPoint(), int <db:emphasis>delay</db:emphasis> = -1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Simulates releasing a mouse <db:code role="parameter">button</db:code> with an optional <db:code role="parameter">stateKey</db:code> modifier on a <db:code role="parameter">window</db:code>. The position of the release is defined by <db:code role="parameter">pos</db:code>; the default position is the center of the window. If <db:code role="parameter">delay</db:code> is specified, the test will wait for the specified amount of milliseconds before releasing the button.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#mousePress">QTest::mousePress</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#mouseClick">QTest::mouseClick</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qSleep">
<db:title>int QTest::qSleep(int <db:emphasis>ms</db:emphasis>)</db:title>
<db:para>Sleeps for <db:code role="parameter">ms</db:code> milliseconds, blocking execution of the test. qSleep() will not do any event processing and leave your test unresponsive. Network communication might time out while sleeping. Use <db:link xlink:href="qtest.xml#qWait">qWait</db:link>() to do non-blocking sleeping.</db:para>
<db:para><db:code role="parameter">ms</db:code> must be greater than 0.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The qSleep() function calls either <db:code>nanosleep()</db:code> on unix or <db:code>Sleep()</db:code> on windows, so the accuracy of time spent in qSleep() depends on the operating system.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QTest::qSleep(250);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#qWait">qWait</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qWait">
<db:title>int QTest::qWait(int <db:emphasis>ms</db:emphasis>)</db:title>
<db:para>Waits for <db:code role="parameter">ms</db:code> milliseconds. While waiting, events will be processed and your test will stay responsive to user interface events or network communication.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">int i = 0;
while (myNetworkServerNotResponding() &amp;&amp; i++ &lt; 50)
    QTest::qWait(250);
</db:programlisting>
<db:para>The code above will wait until the network server is responding for a maximum of about 12.5 seconds.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#qSleep">QTest::qSleep</db:link>()</db:member>
<db:member><db:link xlink:href="qsignalspy.xml#wait">QSignalSpy::wait</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qWaitForWindowActive">
<db:title>[since 5.0] bool QTest::qWaitForWindowActive(int *<db:emphasis>widget</db:emphasis>, int <db:emphasis>timeout</db:emphasis> = 5000)</db:title>
<db:para>Waits for <db:code role="parameter">timeout</db:code> milliseconds or until the <db:code role="parameter">widget</db:code>'s window is active.</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code>widget</db:code>'s window is active within <db:code role="parameter">timeout</db:code> milliseconds, otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#qWaitForWindowExposed">QTest::qWaitForWindowExposed</db:link>()</db:member>
<db:member><db:link xlink:href="">QWidget::isActiveWindow()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qWaitForWindowExposed">
<db:title>[since 5.0] bool QTest::qWaitForWindowExposed(int *<db:emphasis>widget</db:emphasis>, int <db:emphasis>timeout</db:emphasis> = 5000)</db:title>
<db:para>Waits for <db:code role="parameter">timeout</db:code> milliseconds or until the <db:code role="parameter">widget</db:code>'s window is exposed. Returns <db:code>true</db:code> if <db:code>widget</db:code>'s window is exposed within <db:code role="parameter">timeout</db:code> milliseconds, otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This is mainly useful for asynchronous systems like X11, where a window will be mapped to screen some time after being asked to show itself on the screen.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#qWaitForWindowActive">QTest::qWaitForWindowActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toHexRepresentation">
<db:title>int *QTest::toHexRepresentation(const char *<db:emphasis>ba</db:emphasis>, int <db:emphasis>length</db:emphasis>)</db:title>
<db:para>Returns a pointer to a string that is the string <db:code role="parameter">ba</db:code> represented as a space-separated sequence of hex characters. If the input is considered too long, it is truncated. A trucation is indicated in the returned string as an ellipsis at the end.</db:para>
<db:para><db:code role="parameter">length</db:code> is the length of the string <db:code role="parameter">ba</db:code>.</db:para>
</db:section>
<db:section xml:id="toString-1">
<db:title>char *QTest::toString(const QVariant &amp;<db:emphasis>variant</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a textual representation of the given <db:code role="parameter">variant</db:code>.</db:para>
</db:section>
<db:section xml:id="toString-2">
<db:title>[since 4.4] char *QTest::toString(const int &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a textual representation of the given <db:code role="parameter">rectangle</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="toString-3">
<db:title>[since 5.5] char *QTest::toString(int <db:emphasis>sp</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a textual representation of size policy <db:code role="parameter">sp</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="touchEvent">
<db:title>[since 5.0] QTest::QTouchEventSequence QTest::touchEvent(int *<db:emphasis>widget</db:emphasis>, int *<db:emphasis>device</db:emphasis>, bool <db:emphasis>autoCommit</db:emphasis> = true)</db:title>
<db:para>Creates and returns a <db:link xlink:href="qtest-qtoucheventsequence.xml">QTouchEventSequence</db:link> for the <db:code role="parameter">device</db:code> to simulate events for <db:code role="parameter">widget</db:code>.</db:para>
<db:para>When adding touch events to the sequence, <db:code role="parameter">widget</db:code> will also be used to translate the position provided to screen coordinates, unless another widget is provided in the respective calls to press(), move() etc.</db:para>
<db:para>The touch events are committed to the event system when the destructor of the <db:link xlink:href="qtest-qtoucheventsequence.xml">QTouchEventSequence</db:link> is called (ie when the object returned runs out of scope), unless <db:code role="parameter">autoCommit</db:code> is set to false. When <db:code role="parameter">autoCommit</db:code> is false, commit() has to be called manually.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QBENCHMARK">
<db:title>QBENCHMARK</db:title>
<db:para>This macro is used to measure the performance of code within a test. The code to be benchmarked is contained within a code block following this macro.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">void TestBenchmark::simple()
{
    QString str1 = QLatin1String(&quot;This is a test string&quot;);
    QString str2 = QLatin1String(&quot;This is a test string&quot;);

    QCOMPARE(str1.localeAwareCompare(str2), 0);

    QBENCHMARK {
        str1.localeAwareCompare(str2);
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest-overview.xml#creating-a-benchmark">Creating a Benchmark</db:link></db:member>
<db:member><db:link xlink:href="qttestlib-tutorial5-example.xml">Writing a Benchmark</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBENCHMARK_ONCE">
<db:title>[since 4.6] QBENCHMARK_ONCE</db:title>
<db:para>The QBENCHMARK_ONCE macro is for measuring performance of a code block by running it once.</db:para>
<db:para>This macro is used to measure the performance of code within a test. The code to be benchmarked is contained within a code block following this macro.</db:para>
<db:para>Unlike QBENCHMARK, the contents of the contained code block is only run once. The elapsed time will be reported as &quot;0&quot; if it's to short to be measured by the selected backend. (Use)</db:para>
<db:para>This macro was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest-overview.xml#creating-a-benchmark">Creating a Benchmark</db:link></db:member>
<db:member><db:link xlink:href="qttestlib-tutorial5-example.xml">Writing a Benchmark</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QCOMPARE">
<db:title>QCOMPARE(<db:emphasis>actual</db:emphasis>, <db:emphasis>expected</db:emphasis>)</db:title>
<db:para>The QCOMPARE macro compares an <db:code role="parameter">actual</db:code> value to an <db:code role="parameter">expected</db:code> value using the equals operator. If <db:code role="parameter">actual</db:code> and <db:code role="parameter">expected</db:code> are identical, execution continues. If not, a failure is recorded in the test log and the test won't be executed further.</db:para>
<db:para>In the case of comparing floats and doubles, <db:link xlink:href="qtglobal.xml#qFuzzyCompare">qFuzzyCompare</db:link>() is used for comparing. This means that comparing to 0 will likely fail. One solution to this is to compare to 1, and add 1 to the produced output.</db:para>
<db:para>QCOMPARE tries to output the contents of the values if the comparison fails, so it is visible from the test log why the comparison failed.</db:para>
<db:para>QCOMPARE is very strict on the data types. Both <db:code role="parameter">actual</db:code> and <db:code role="parameter">expected</db:code> have to be of the same type, otherwise the test won't compile. This prohibits unspecified behavior from being introduced; that is behavior that usually occurs when the compiler implicitly casts the argument.</db:para>
<db:para>For your own classes, you can use <db:link xlink:href="">QTest::toString()</db:link> to format values for outputting into the test log.</db:para>
<db:note>
<db:para>This macro can only be used in a test function that is invoked by the test framework.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QCOMPARE(QString(&quot;hello&quot;).toUpper(), QString(&quot;HELLO&quot;));
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QTRY_COMPARE">QTRY_COMPARE</db:link>()</db:member>
<db:member><db:link xlink:href="">QTest::toString()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QEXPECT_FAIL">
<db:title>QEXPECT_FAIL(<db:emphasis>dataIndex</db:emphasis>, <db:emphasis>comment</db:emphasis>, <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>The QEXPECT_FAIL() macro marks the next <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>() or <db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>() as an expected failure. Instead of adding a failure to the test log, an expected failure will be reported.</db:para>
<db:para>If a <db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>() or <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>() is marked as an expected failure, but passes instead, an unexpected pass (XPASS) is written to the test log.</db:para>
<db:para>The parameter <db:code role="parameter">dataIndex</db:code> describes for which entry in the test data the failure is expected. Pass an empty string (<db:code>&quot;&quot;</db:code>) if the failure is expected for all entries or if no test data exists.</db:para>
<db:para><db:code role="parameter">comment</db:code> will be appended to the test log for the expected failure.</db:para>
<db:para><db:code role="parameter">mode</db:code> is a <db:link xlink:href="qtest.xml#TestFailMode-enum">QTest::TestFailMode</db:link> and sets whether the test should continue to execute or not.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This macro can only be used in a test function that is invoked by the test framework.</db:para>
<db:para>Example 1:</db:para>
<db:programlisting language="cpp">QEXPECT_FAIL(&quot;&quot;, &quot;Will fix in the next release&quot;, Continue);
QCOMPARE(i, 42);
QCOMPARE(j, 43);
</db:programlisting>
<db:para>In the example above, an expected fail will be written into the test output if the variable <db:code>i</db:code> is not 42. If the variable <db:code>i</db:code> is 42, an unexpected pass is written instead. The QEXPECT_FAIL() has no influence on the second <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>() statement in the example.</db:para>
<db:para>Example 2:</db:para>
<db:programlisting language="cpp">QEXPECT_FAIL(&quot;data27&quot;, &quot;Oh my, this is soooo broken&quot;, Abort);
QCOMPARE(i, 42);
</db:programlisting>
<db:para>The above testfunction will not continue executing for the test data entry <db:code>data27</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#TestFailMode-enum">QTest::TestFailMode</db:link></db:member>
<db:member><db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFAIL">
<db:title>QFAIL(<db:emphasis>message</db:emphasis>)</db:title>
<db:para>This macro can be used to force a test failure. The test stops executing and the failure <db:code role="parameter">message</db:code> is appended to the test log.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This macro can only be used in a test function that is invoked by the test framework.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">if (sizeof(int) != 4)
    QFAIL(&quot;This test has not been ported to this platform yet.&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="QFETCH">
<db:title>QFETCH(<db:emphasis>type</db:emphasis>, <db:emphasis>name</db:emphasis>)</db:title>
<db:para>The fetch macro creates a local variable named <db:code role="parameter">name</db:code> with the type <db:code role="parameter">type</db:code> on the stack. <db:code role="parameter">name</db:code> has to match the element name from the test's data. If no such element exists, the test will assert.</db:para>
<db:para>Assuming a test has the following data:</db:para>
<db:programlisting language="cpp">void TestQString::toInt_data()
{
    QTest::addColumn&lt;QString&gt;(&quot;aString&quot;);
    QTest::addColumn&lt;int&gt;(&quot;expected&quot;);

    QTest::newRow(&quot;positive value&quot;) &lt;&lt; &quot;42&quot; &lt;&lt; 42;
    QTest::newRow(&quot;negative value&quot;) &lt;&lt; &quot;-42&quot; &lt;&lt; -42;
    QTest::newRow(&quot;zero&quot;) &lt;&lt; &quot;0&quot; &lt;&lt; 0;
}
</db:programlisting>
<db:para>The test data has two elements, a <db:link xlink:href="qstring.xml">QString</db:link> called <db:code>aString</db:code> and an integer called <db:code>expected</db:code>. To fetch these values in the actual test:</db:para>
<db:programlisting language="cpp">void TestQString::toInt()
{
     QFETCH(QString, aString);
     QFETCH(int, expected);

     QCOMPARE(aString.toInt(), expected);
}
</db:programlisting>
<db:para><db:code>aString</db:code> and <db:code>expected</db:code> are variables on the stack that are initialized with the current test data.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This macro can only be used in a test function that is invoked by the test framework. The test function must have a _data function.</db:para>
</db:section>
<db:section xml:id="QFINDTESTDATA">
<db:title>[since 5.0] QFINDTESTDATA(<db:emphasis>filename</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> for the testdata file referred to by <db:code role="parameter">filename</db:code>, or an empty <db:link xlink:href="qstring.xml">QString</db:link> if the testdata file could not be found.</db:para>
<db:para>This macro allows the test to load data from an external file without hardcoding an absolute filename into the test, or using relative paths which may be error prone.</db:para>
<db:para>The returned path will be the first path from the following list which resolves to an existing file or directory:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code role="parameter">filename</db:code> relative to <db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>() (only if a <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> or QApplication object has been created).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">filename</db:code> relative to the test's standard install directory (<db:link xlink:href="qlibraryinfo.xml#LibraryLocation-enum">QLibraryInfo::TestsPath</db:link> with the lowercased testcase name appended).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code role="parameter">filename</db:code> relative to the directory containing the source file from which QFINDTESTDATA is invoked.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the named file/directory does not exist at any of these locations, a warning is printed to the test log.</db:para>
<db:para>For example, in this code:</db:para>
<db:programlisting language="cpp">// Source: /home/user/sources/myxmlparser/tests/tst_myxmlparser/tst_myxmlparser.cpp
// Build:  /home/user/build/myxmlparser/tests/tst_myxmlparser
// Qt:     /usr/local/Qt-5.0.0
void tst_MyXmlParser::parse()
{
    MyXmlParser parser;
    QString input = QFINDTESTDATA(&quot;testxml/simple1.xml&quot;);
    QVERIFY(parser.parse(input));
}
</db:programlisting>
<db:para>The testdata file will be resolved as the first existing file from:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>/home/user/build/myxmlparser/tests/tst_myxmlparser/testxml/simple1.xml</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>/usr/local/Qt-5.0.0/tests/tst_myxmlparser/testxml/simple1.xml</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>/home/user/sources/myxmlparser/tests/tst_myxmlparser/testxml/simple1.xml</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This allows the test to find its testdata regardless of whether the test has been installed, and regardless of whether the test's build tree is equal to the test's source tree.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> reliable detection of testdata from the source directory requires either that qmake is used, or the <db:code>QT_TESTCASE_BUILDDIR</db:code> macro is defined to point to the working directory from which the compiler is invoked, or only absolute paths to the source files are passed to the compiler. Otherwise, the absolute path of the source directory cannot be determined.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> For tests that use the <db:link xlink:href="qtest.xml#QTEST_APPLESS_MAIN">QTEST_APPLESS_MAIN</db:link>() macro to generate a <db:code>main()</db:code> function, <db:code>QFINDTESTDATA</db:code> will not attempt to find test data relative to <db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>(). In practice, this means that tests using <db:code>QTEST_APPLESS_MAIN()</db:code> will fail to find their test data if run from a shadow build tree.</db:para>
<db:para>This macro was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="QSKIP">
<db:title>QSKIP(<db:emphasis>description</db:emphasis>)</db:title>
<db:para>If called from a test function, the QSKIP() macro stops execution of the test without adding a failure to the test log. You can use it to skip tests that wouldn't make sense in the current configuration. The text <db:code role="parameter">description</db:code> is appended to the test log and should contain an explanation of why the test couldn't be executed.</db:para>
<db:para>If the test is data-driven, each call to QSKIP() will skip only the current row of test data, so an unconditional call to QSKIP will produce one skip message in the test log for each row of test data.</db:para>
<db:para>If called from an _data function, the QSKIP() macro will stop execution of the _data function and will prevent execution of the associated test function.</db:para>
<db:para>If called from initTestCase() or initTestCase_data(), the QSKIP() macro will skip all test and _data functions.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This macro can only be used in a test function or _data function that is invoked by the test framework.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">if (!QSqlDatabase::drivers().contains(&quot;SQLITE&quot;))
    QSKIP(&quot;This test requires the SQLITE database driver&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="QTEST">
<db:title>QTEST(<db:emphasis>actual</db:emphasis>, <db:emphasis>testElement</db:emphasis>)</db:title>
<db:para>QTEST() is a convenience macro for <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>() that compares the value <db:code role="parameter">actual</db:code> with the element <db:code role="parameter">testElement</db:code> from the test's data. If there is no such element, the test asserts.</db:para>
<db:para>Apart from that, QTEST() behaves exactly as <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>().</db:para>
<db:para>Instead of writing:</db:para>
<db:programlisting language="cpp">QFETCH(QString, myString);
QCOMPARE(QString(&quot;hello&quot;).toUpper(), myString);
</db:programlisting>
<db:para>you can write:</db:para>
<db:programlisting language="cpp">QTEST(QString(&quot;hello&quot;).toUpper(), &quot;myString&quot;);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTEST_APPLESS_MAIN">
<db:title>QTEST_APPLESS_MAIN(<db:emphasis>TestClass</db:emphasis>)</db:title>
<db:para>Implements a main() function that executes all tests in <db:code role="parameter">TestClass</db:code>.</db:para>
<db:para>Behaves like <db:link xlink:href="qtest.xml#QTEST_MAIN">QTEST_MAIN</db:link>(), but doesn't instantiate a QApplication object. Use this macro for really simple stand-alone non-GUI tests.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#QTEST_MAIN">QTEST_MAIN</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTEST_GUILESS_MAIN">
<db:title>[since 5.0] QTEST_GUILESS_MAIN(<db:emphasis>TestClass</db:emphasis>)</db:title>
<db:para>Implements a main() function that instantiates a <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> object and the <db:code role="parameter">TestClass</db:code>, and executes all tests in the order they were defined. Use this macro to build stand-alone executables.</db:para>
<db:para>Behaves like <db:link xlink:href="qtest.xml#QTEST_MAIN">QTEST_MAIN</db:link>(), but instantiates a <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> instead of the QApplication object. Use this macro if your test case doesn't need functionality offered by QApplication, but the event loop is still necessary.</db:para>
<db:para>This macro was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#QTEST_MAIN">QTEST_MAIN</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTEST_MAIN">
<db:title>QTEST_MAIN(<db:emphasis>TestClass</db:emphasis>)</db:title>
<db:para>Implements a main() function that instantiates an application object and the <db:code role="parameter">TestClass</db:code>, and executes all tests in the order they were defined. Use this macro to build stand-alone executables.</db:para>
<db:para>If <db:code>QT_WIDGETS_LIB</db:code> is defined, the application object will be a QApplication, if <db:code>QT_GUI_LIB</db:code> is defined, the application object will be a QGuiApplication, otherwise it will be a <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link>. If qmake is used and the configuration includes <db:code>QT += widgets</db:code>, then <db:code>QT_WIDGETS_LIB</db:code> will be defined automatically. Similarly, if qmake is used and the configuration includes <db:code>QT += gui</db:code>, then <db:code>QT_GUI_LIB</db:code> will be defined automatically.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> On platforms that have keypad navigation enabled by default, this macro will forcefully disable it if <db:code>QT_WIDGETS_LIB</db:code> is defined. This is done to simplify the usage of key events when writing autotests. If you wish to write a test case that uses keypad navigation, you should enable it either in the <db:code>initTestCase()</db:code> or <db:code>init()</db:code> functions of your test case by calling <db:link xlink:href="">QApplication::setNavigationMode()</db:link>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">class TestQString: public QObject { ... };
QTEST_MAIN(TestQString)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#QTEST_APPLESS_MAIN">QTEST_APPLESS_MAIN</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QTEST_GUILESS_MAIN">QTEST_GUILESS_MAIN</db:link>()</db:member>
<db:member><db:link xlink:href="">QTest::qExec()</db:link></db:member>
<db:member><db:link xlink:href="">QApplication::setNavigationMode()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTRY_COMPARE">
<db:title>[since 5.0] QTRY_COMPARE(<db:emphasis>actual</db:emphasis>, <db:emphasis>expected</db:emphasis>)</db:title>
<db:para>Performs a comparison of the <db:code role="parameter">actual</db:code> and <db:code role="parameter">expected</db:code> values by invoking <db:link xlink:href="qtest.xml#QTRY_COMPARE_WITH_TIMEOUT">QTRY_COMPARE_WITH_TIMEOUT</db:link>() with a timeout of five seconds.</db:para>
<db:note>
<db:para>This macro can only be used in a test function that is invoked by the test framework.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#QTRY_COMPARE_WITH_TIMEOUT">QTRY_COMPARE_WITH_TIMEOUT</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QTRY_VERIFY">QTRY_VERIFY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTRY_COMPARE_WITH_TIMEOUT">
<db:title>[since 5.0] QTRY_COMPARE_WITH_TIMEOUT(<db:emphasis>actual</db:emphasis>, <db:emphasis>expected</db:emphasis>, <db:emphasis>timeout</db:emphasis>)</db:title>
<db:para>The QTRY_COMPARE_WITH_TIMEOUT() macro is similar to <db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>(), but performs the comparison of the <db:code role="parameter">actual</db:code> and <db:code role="parameter">expected</db:code> values repeatedly, until either the two values are equal or the <db:code role="parameter">timeout</db:code> is reached. Between each comparison, events will be processed. If the timeout is reached, a failure is recorded in the test log and the test won't be executed further.</db:para>
<db:note>
<db:para>This macro can only be used in a test function that is invoked by the test framework.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#QTRY_COMPARE">QTRY_COMPARE</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QTRY_VERIFY">QTRY_VERIFY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTRY_VERIFY">
<db:title>[since 5.0] QTRY_VERIFY(<db:emphasis>condition</db:emphasis>)</db:title>
<db:para>Checks the <db:code role="parameter">condition</db:code> by invoking <db:link xlink:href="qtest.xml#QTRY_VERIFY_WITH_TIMEOUT">QTRY_VERIFY_WITH_TIMEOUT</db:link>() with a timeout of five seconds.</db:para>
<db:note>
<db:para>This macro can only be used in a test function that is invoked by the test framework.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#QTRY_VERIFY_WITH_TIMEOUT">QTRY_VERIFY_WITH_TIMEOUT</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QTRY_COMPARE">QTRY_COMPARE</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTRY_VERIFY_WITH_TIMEOUT">
<db:title>[since 5.0] QTRY_VERIFY_WITH_TIMEOUT(<db:emphasis>condition</db:emphasis>, <db:emphasis>timeout</db:emphasis>)</db:title>
<db:para>The QTRY_VERIFY_WITH_TIMEOUT() macro is similar to <db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>(), but checks the <db:code role="parameter">condition</db:code> repeatedly, until either the condition becomes true or the <db:code role="parameter">timeout</db:code> is reached. Between each evaluation, events will be processed. If the timeout is reached, a failure is recorded in the test log and the test won't be executed further.</db:para>
<db:note>
<db:para>This macro can only be used in a test function that is invoked by the test framework.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#QTRY_VERIFY">QTRY_VERIFY</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QTRY_COMPARE">QTRY_COMPARE</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QVERIFY2">
<db:title>QVERIFY2(<db:emphasis>condition</db:emphasis>, <db:emphasis>message</db:emphasis>)</db:title>
<db:para>The QVERIFY2() macro behaves exactly like <db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>(), except that it outputs a verbose <db:code role="parameter">message</db:code> when <db:code role="parameter">condition</db:code> is false. The <db:code role="parameter">message</db:code> is a plain C string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QVERIFY2(1 + 1 == 2, &quot;A breach in basic arithmetic occurred.&quot;);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QVERIFY">
<db:title>QVERIFY(<db:emphasis>condition</db:emphasis>)</db:title>
<db:para>The QVERIFY() macro checks whether the <db:code role="parameter">condition</db:code> is true or not. If it is true, execution continues. If not, a failure is recorded in the test log and the test won't be executed further.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This macro can only be used in a test function that is invoked by the test framework.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QVERIFY(1 + 1 == 2);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#QCOMPARE">QCOMPARE</db:link>()</db:member>
<db:member><db:link xlink:href="qtest.xml#QTRY_VERIFY">QTRY_VERIFY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QVERIFY_EXCEPTION_THROWN">
<db:title>[since 5.3] QVERIFY_EXCEPTION_THROWN(<db:emphasis>expression</db:emphasis>, <db:emphasis>exceptiontype</db:emphasis>)</db:title>
<db:para>The QVERIFY_EXCEPTION_THROWN macro executes an <db:code role="parameter">expression</db:code> and tries to catch an exception thrown from the <db:code role="parameter">expression</db:code>. If the <db:code role="parameter">expression</db:code> throws an exception and its type is the same as <db:code role="parameter">exceptiontype</db:code> or <db:code role="parameter">exceptiontype</db:code> is substitutable with the type of thrown exception (i.e. usually the type of thrown exception is publically derived from <db:code role="parameter">exceptiontype</db:code>) then execution will be continued. If not-substitutable type of exception is thrown or the <db:code role="parameter">expression</db:code> doesn't throw an exception at all, then a failure will be recorded in the test log and the test won't be executed further.</db:para>
<db:note>
<db:para>This macro can only be used in a test function that is invoked by the test framework.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="QWARN">
<db:title>QWARN(<db:emphasis>message</db:emphasis>)</db:title>
<db:para>Appends <db:code role="parameter">message</db:code> as a warning to the test log. This macro can be used anywhere in your tests.</db:para>
<db:note>
<db:para>This macro is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
