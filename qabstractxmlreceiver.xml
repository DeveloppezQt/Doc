<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractXmlReceiver Class</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractxmlreceiver.xml">QAbstractXmlReceiver</db:link> class provides a callback interface for transforming the output of a <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractXmlReceiver</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xmlpatterns</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qxmlserializer.xml" xlink:role="class">QXmlSerializer</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractXmlReceiver is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qabstractxmlreceiver.xml">QAbstractXmlReceiver</db:link> is an abstract base class that provides a callback interface for receiving an <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">XQuery sequence</db:link>, usually the output of an <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link>, and transforming that sequence into a structure of your choosing, usually XML. Consider the example:</db:para>
<db:programlisting language="cpp">QXmlQuery query;
query.setQuery(&quot;doc('index.html')/html/body/p[1]&quot;);

QXmlSerializer serializer(query, myOutputDevice);
query.evaluateTo(&amp;serializer);
</db:programlisting>
<db:para>First it constructs a <db:link xlink:href="qxmlquery.xml">query</db:link> that gets the first paragraph from document <db:code>index.html</db:code>. Then it constructs an <db:link xlink:href="qxmlserializer.xml">XML serializer</db:link> with the <db:link xlink:href="qxmlquery.xml">query</db:link> and <db:link xlink:href="qiodevice.xml">myOutputDevice</db:link> (Note the <db:link xlink:href="qxmlserializer.xml">serializer</db:link> is an <db:emphasis>XML receiver</db:emphasis>, ie a subclass of <db:link xlink:href="qabstractxmlreceiver.xml">QAbstractXmlReceiver</db:link>). Finally, it <db:link xlink:href="qxmlquery.xml#evaluateTo">evaluates</db:link> the <db:link xlink:href="qxmlquery.xml">query</db:link>, producing an ordered sequence of calls to the <db:link xlink:href="qxmlserializer.xml">serializer's</db:link> callback functions. The sequence of callbacks transforms the query output to XML and writes it to <db:link xlink:href="qiodevice.xml">myOutputDevice</db:link>.</db:para>
<db:para>Although the example uses <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link> to produce the sequence of callbacks to functions in <db:link xlink:href="qabstractxmlreceiver.xml">QAbstractXmlReceiver</db:link>, you can call the callback functions directly as long as your sequence of calls represents a valid <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">XQuery sequence</db:link>.</db:para>
<db:anchor xml:id="xquery-sequence"/>
<db:section xml:id="xquery-sequences">
<db:title>XQuery Sequences</db:title>
<db:para>An XQuery <db:code role="parameter">sequence</db:code> is an ordered collection of zero, one, or many <db:emphasis>items</db:emphasis>. Each <db:emphasis>item</db:emphasis> is either an <db:emphasis>atomic value</db:emphasis> or a <db:emphasis>node</db:emphasis>. An <db:emphasis>atomic value</db:emphasis> is a simple data value.</db:para>
<db:para>There are six kinds of <db:emphasis>nodes</db:emphasis>.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>An <db:emphasis>Element Node</db:emphasis> represents an XML element.</db:para>
</db:listitem>
<db:listitem>
<db:para>An <db:emphasis>Attribute Node</db:emphasis> represents an XML attribute.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:emphasis>Document Node</db:emphasis> represents an entire XML document.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:emphasis>Text Node</db:emphasis> represents character data (element content).</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:emphasis>Processing Instruction Node</db:emphasis> represents an XML processing instruction, which is used in an XML document to tell the application reading the document to perform some action. A typical example is to use a processing instruction to tell the application to use a particular XSLT stylesheet to display the document.</db:para>
</db:listitem>
<db:listitem>
<db:para>And a <db:emphasis>Comment node</db:emphasis> represents an XML comment.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:emphasis>sequence</db:emphasis> of <db:emphasis>nodes</db:emphasis> and <db:emphasis>atomic values</db:emphasis> obeys the following rules. Note that <db:emphasis>Namespace Node</db:emphasis> refers to a special <db:emphasis>Attribute Node</db:emphasis> with name <db:emphasis>xmlns</db:emphasis>.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Each <db:emphasis>node</db:emphasis> appears in the <db:emphasis>sequence</db:emphasis> before its children and their descendants appear.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:emphasis>node</db:emphasis>'s descendants appear in the <db:emphasis>sequence</db:emphasis> before any of its siblings appear.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:emphasis>Document Node</db:emphasis> represents an entire document. Zero or more <db:emphasis>Document Nodes</db:emphasis> can appear in a <db:emphasis>sequence</db:emphasis>, but they can only be top level items (i.e., a <db:emphasis>Document Node</db:emphasis> can't be a child of another <db:emphasis>node</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>Namespace Nodes</db:emphasis> immediately follow the <db:emphasis>Element Node</db:emphasis> with which they are associated.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>Attribute Nodes</db:emphasis> immediately follow the <db:emphasis>Namespace Nodes</db:emphasis> of the element with which they are associated, or...</db:para>
</db:listitem>
<db:listitem>
<db:para>If there are no <db:emphasis>Namespace Nodes</db:emphasis> following an element, then the <db:emphasis>Attribute Nodes</db:emphasis> immediately follow the element.</db:para>
</db:listitem>
<db:listitem>
<db:para>An <db:emphasis>atomic value</db:emphasis> can only appear as a top level <db:emphasis>item</db:emphasis>, i.e., it can't appear as a child of a <db:emphasis>node</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>Processing Instruction Nodes</db:emphasis> do not have children, and their parent is either a <db:emphasis>Document Node</db:emphasis> or an <db:emphasis>Element Node</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>Comment Nodes</db:emphasis> do not have children, and their parent is either a <db:emphasis>Document Node</db:emphasis> or an <db:emphasis>Element Node</db:emphasis>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:emphasis>sequence</db:emphasis> of <db:emphasis>nodes</db:emphasis> and <db:emphasis>atomic values</db:emphasis> is sent to an <db:link xlink:href="qabstractxmlreceiver.xml">QAbstractXmlReceiver</db:link> (<db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link> in the example above) as a sequence of calls to the receiver's callback functions. The mapping of callback functions to sequence items is as follows.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qabstractxmlreceiver.xml#startDocument">startDocument</db:link>() and <db:link xlink:href="qabstractxmlreceiver.xml#endDocument">endDocument</db:link>() are called for each <db:emphasis>Document Node</db:emphasis> in the <db:emphasis>sequence</db:emphasis>. <db:link xlink:href="qabstractxmlreceiver.xml#endDocument">endDocument</db:link>() is not called until all the <db:emphasis>Document Node's</db:emphasis> children have appeared in the <db:emphasis>sequence</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractxmlreceiver.xml#startElement">startElement</db:link>() and <db:link xlink:href="qabstractxmlreceiver.xml#endElement">endElement</db:link>() are called for each <db:emphasis>Element Node</db:emphasis>. <db:link xlink:href="qabstractxmlreceiver.xml#endElement">endElement</db:link>() is not called until all the <db:emphasis>Element Node's</db:emphasis> children have appeared in the <db:emphasis>sequence</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractxmlreceiver.xml#attribute">attribute</db:link>() is called for each <db:emphasis>Attribute Node</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractxmlreceiver.xml#comment">comment</db:link>() is called for each <db:emphasis>Comment Node</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractxmlreceiver.xml#characters">characters</db:link>() is called for each <db:emphasis>Text Node</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractxmlreceiver.xml#processingInstruction">processingInstruction</db:link>() is called for each <db:emphasis>Processing Instruction Node</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractxmlreceiver.xml#namespaceBinding">namespaceBinding</db:link>() is called for each <db:emphasis>Namespace Node</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractxmlreceiver.xml#atomicValue">atomicValue</db:link>() is called for each <db:emphasis>atomic value</db:emphasis>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For a complete explanation of XQuery sequences, visit <db:link xlink:href="http://www.w3.org/TR/xpath-datamodel/">XQuery Data Model</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/xpath-datamodel/">W3C XQuery 1.0 and XPath 2.0 Data Model (XDM)</db:link></db:member>
<db:member><db:link xlink:href="qxmlserializer.xml">QXmlSerializer</db:link></db:member>
<db:member><db:link xlink:href="qxmlresultitems.xml">QXmlResultItems</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractXmlReceiver">
<db:title>QAbstractXmlReceiver::QAbstractXmlReceiver()</db:title>
<db:para>Constructs an abstract xml receiver.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractXmlReceiver">
<db:title>[virtual noexcept] QAbstractXmlReceiver::~QAbstractXmlReceiver()</db:title>
<db:para>Destroys the xml receiver.</db:para>
</db:section>
<db:section xml:id="atomicValue">
<db:title>[pure virtual] void QAbstractXmlReceiver::atomicValue(const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This callback is called when an atomic value appears in the <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">sequence</db:link>. The <db:code role="parameter">value</db:code> is a simple <db:link xlink:href="qvariant.xml">data value</db:link>. It is guaranteed to be <db:link xlink:href="qvariant.xml#isValid">valid</db:link>.</db:para>
</db:section>
<db:section xml:id="attribute">
<db:title>[pure virtual] void QAbstractXmlReceiver::attribute(const QXmlName &amp;<db:emphasis>name</db:emphasis>, const QStringRef &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This callback is called when an attribute node appears in the <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">sequence</db:link>. <db:code role="parameter">name</db:code> is the <db:link xlink:href="qxmlname.xml">attribute name</db:link> and the <db:code role="parameter">value</db:code> string contains the attribute value.</db:para>
</db:section>
<db:section xml:id="characters">
<db:title>[pure virtual] void QAbstractXmlReceiver::characters(const QStringRef &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This callback is called when a text node appears in the <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">sequence</db:link>. The <db:code role="parameter">value</db:code> contains the text. Adjacent text nodes may not occur in the <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">sequence</db:link>, i.e., this callback must not be called twice in a row.</db:para>
</db:section>
<db:section xml:id="comment">
<db:title>[pure virtual] void QAbstractXmlReceiver::comment(const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This callback is called when a comment node appears in the <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">sequence</db:link>. The <db:code role="parameter">value</db:code> is the comment text, which must not contain the string &quot;–&quot;.</db:para>
</db:section>
<db:section xml:id="endDocument">
<db:title>[pure virtual] void QAbstractXmlReceiver::endDocument()</db:title>
<db:para>This callback is called when the end of a document node appears in the <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">sequence</db:link>.</db:para>
</db:section>
<db:section xml:id="endElement">
<db:title>[pure virtual] void QAbstractXmlReceiver::endElement()</db:title>
<db:para>This callback is called when the end of an element node appears in the <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">sequence</db:link>.</db:para>
</db:section>
<db:section xml:id="endOfSequence">
<db:title>[pure virtual] void QAbstractXmlReceiver::endOfSequence()</db:title>
<db:para>This callback is called once only, right after the <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">sequence</db:link> ends.</db:para>
</db:section>
<db:section xml:id="namespaceBinding">
<db:title>[pure virtual] void QAbstractXmlReceiver::namespaceBinding(const QXmlName &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>This callback is called when a namespace binding is in scope of an element. A namespace is defined by a URI. In the <db:link xlink:href="qxmlname.xml">QXmlName</db:link> <db:code role="parameter">name</db:code>, the value of <db:link xlink:href="qxmlname.xml#namespaceUri">QXmlName::namespaceUri</db:link>() is that URI. The value of <db:link xlink:href="qxmlname.xml#prefix">QXmlName::prefix</db:link>() is the prefix that the URI is bound to. The local name is insignificant and can be an arbitrary value.</db:para>
</db:section>
<db:section xml:id="processingInstruction">
<db:title>[pure virtual] void QAbstractXmlReceiver::processingInstruction(const QXmlName &amp;<db:emphasis>target</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This callback is called when a processing instruction appears in the <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">sequence</db:link>. A processing instruction is used in an XML document to tell the application reading the document to perform some action. A typical example is to use a processing instruction to tell the application to use a particular XSLT stylesheet to process the document.</db:para>
<db:programlisting language="cpp">&lt;?xml-stylesheet type=&quot;test/xsl&quot; href=&quot;formatter.xsl&quot;?&gt;

</db:programlisting>
<db:para><db:code role="parameter">target</db:code> is the <db:link xlink:href="qxmlname.xml">name</db:link> of the processing instruction. Its <db:emphasis>prefix</db:emphasis> and <db:emphasis>namespace URI</db:emphasis> must both be empty. Its <db:emphasis>local name</db:emphasis> is the target. In the above example, the name is <db:emphasis>xml-stylesheet</db:emphasis>.</db:para>
<db:para>The <db:code role="parameter">value</db:code> specifies the action to be taken. Note that the <db:code role="parameter">value</db:code> must not contain the string &quot;?&gt;&quot;. In the above example, the <db:code role="parameter">value</db:code> is <db:emphasis>type=&quot;test/xsl&quot; href=&quot;formatter.xsl</db:emphasis>.</db:para>
<db:para>Generally, use of processing instructions should be avoided, because they are not namespace aware and in many contexts are stripped out anyway. Processing instructions can often be replaced with elements from a custom namespace.</db:para>
</db:section>
<db:section xml:id="startDocument">
<db:title>[pure virtual] void QAbstractXmlReceiver::startDocument()</db:title>
<db:para>This callback is called when a document node appears in the <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">sequence</db:link>.</db:para>
</db:section>
<db:section xml:id="startElement">
<db:title>[pure virtual] void QAbstractXmlReceiver::startElement(const QXmlName &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>This callback is called when a new element node appears in the <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">sequence</db:link>. <db:code role="parameter">name</db:code> is the valid <db:link xlink:href="qxmlname.xml">name</db:link> of the node element.</db:para>
</db:section>
<db:section xml:id="startOfSequence">
<db:title>[pure virtual] void QAbstractXmlReceiver::startOfSequence()</db:title>
<db:para>This callback is called once only, right before the <db:link xlink:href="qabstractxmlreceiver.xml#xquery-sequences">sequence</db:link> begins.</db:para>
</db:section>
</db:section>
</db:article>
