<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Cached Table Example</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Cached Table example shows how a table view can be used to access a database, caching any changes to the data until the user explicitly submits them using a push button.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/cachedtable-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The example consists of a single class, <db:code>TableEditor</db:code>, which is a custom dialog widget that allows the user to modify data stored in a database. We will first review the class definiton and how to use the class, then we will take a look at the implementation.</db:para>
<db:section xml:id="tableeditor-class-definition">
<db:title>TableEditor Class Definition</db:title>
<db:para>The <db:code>TableEditor</db:code> class inherits QDialog making the table editor widget a top-level dialog window.</db:para>
<db:programlisting language="cpp">class TableEditor : public QWidget
{
    Q_OBJECT

public:
    explicit TableEditor(const QString &amp;amp;tableName, QWidget *parent = nullptr);

private slots:
    void submit();

private:
    QPushButton *submitButton;
    QPushButton *revertButton;
    QPushButton *quitButton;
    QDialogButtonBox *buttonBox;
    QSqlTableModel *model;
};
</db:programlisting>
<db:para>The <db:code>TableEditor</db:code> constructor takes two arguments: The first is a pointer to the parent widget and is passed on to the base class constructor. The other is a reference to the database table the <db:code>TableEditor</db:code> object will operate on.</db:para>
<db:para>Note the QSqlTableModel variable declaration: As we will see in this example, the QSqlTableModel class can be used to provide data to view classes such as QTableView. The QSqlTableModel class provides an editable data model making it possible to read and write database records from a single table. It is build on top of the lower-level QSqlQuery class which provides means of executing and manipulating SQL statements.</db:para>
<db:para>We are also going to show how a table view can be used to cache any changes to the data until the user explicitly requests to submit them. For that reason we need to declare a <db:code>submit()</db:code> slot in additon to the model and the editor's buttons.</db:para>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th>
<db:para>Connecting to a Database</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Before we can use the <db:code>TableEditor</db:code> class, we must create a connection to the database containing the table we want to edit:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    if (!createConnection())
        return 1;

    TableEditor editor(&quot;person&quot;);
    editor.show();
    return app.exec();
}
</db:programlisting>
<db:para>The <db:code>createConnection()</db:code> function is a helper function provided for convenience. It is defined in the <db:code>connection.h</db:code> file which is located in the <db:code>sql</db:code> example directory (all the examples in the <db:code>sql</db:code> directory use this function to connect to a database).</db:para>
<db:programlisting language="cpp">static bool createConnection()
{
    QSqlDatabase db = QSqlDatabase::addDatabase(&quot;QSQLITE&quot;);
    db.setDatabaseName(&quot;:memory:&quot;);
    if (!db.open()) {
        QMessageBox::critical(nullptr, QObject::tr(&quot;Cannot open database&quot;),
            QObject::tr(&quot;Unable to establish a database connection.\n&quot;
                        &quot;This example needs SQLite support. Please read &quot;
                        &quot;the Qt SQL driver documentation for information how &quot;
                        &quot;to build it.\n\n&quot;
                        &quot;Click Cancel to exit.&quot;), QMessageBox::Cancel);
        return false;
    }

    QSqlQuery query;
    query.exec(&quot;create table person (id int primary key, &quot;
               &quot;firstname varchar(20), lastname varchar(20))&quot;);
    query.exec(&quot;insert into person values(101, 'Danny', 'Young')&quot;);
    query.exec(&quot;insert into person values(102, 'Christine', 'Holand')&quot;);
    query.exec(&quot;insert into person values(103, 'Lars', 'Gordon')&quot;);
    query.exec(&quot;insert into person values(104, 'Roberto', 'Robitaille')&quot;);
    query.exec(&quot;insert into person values(105, 'Maria', 'Papadopoulos')&quot;);

    query.exec(&quot;create table items (id int primary key,&quot;
                                             &quot;imagefile int,&quot;
                                             &quot;itemtype varchar(20),&quot;
                                             &quot;description varchar(100))&quot;);
    query.exec(&quot;insert into items &quot;
               &quot;values(0, 0, 'Qt',&quot;
               &quot;'Qt is a full development framework with tools designed to &quot;
               &quot;streamline the creation of stunning applications and  &quot;
               &quot;amazing user interfaces for desktop, embedded and mobile &quot;
               &quot;platforms.')&quot;);
    query.exec(&quot;insert into items &quot;
               &quot;values(1, 1, 'Qt Quick',&quot;
               &quot;'Qt Quick is a collection of techniques designed to help &quot;
               &quot;developers create intuitive, modern-looking, and fluid &quot;
               &quot;user interfaces using a CSS &amp;amp; JavaScript like language.')&quot;);
    query.exec(&quot;insert into items &quot;
               &quot;values(2, 2, 'Qt Creator',&quot;
               &quot;'Qt Creator is a powerful cross-platform integrated &quot;
               &quot;development environment (IDE), including UI design tools &quot;
               &quot;and on-device debugging.')&quot;);
    query.exec(&quot;insert into items &quot;
               &quot;values(3, 3, 'Qt Project',&quot;
               &quot;'The Qt Project governs the open source development of Qt, &quot;
               &quot;allowing anyone wanting to contribute to join the effort &quot;
               &quot;through a meritocratic structure of approvers and &quot;
               &quot;maintainers.')&quot;);

    query.exec(&quot;create table images (itemid int, file varchar(20))&quot;);
    query.exec(&quot;insert into images values(0, 'images/qt-logo.png')&quot;);
    query.exec(&quot;insert into images values(1, 'images/qt-quick.png')&quot;);
    query.exec(&quot;insert into images values(2, 'images/qt-creator.png')&quot;);
    query.exec(&quot;insert into images values(3, 'images/qt-project.png')&quot;);

    return true;
}
</db:programlisting>
<db:para>The <db:code>createConnection</db:code> function opens a connection to an in-memory SQLITE database and creates a test table. If you want to use another database, simply modify this function's code.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="tableeditor-class-implementation">
<db:title>TableEditor Class Implementation</db:title>
<db:para>The class implementation consists of only two functions, the constructor and the <db:code>submit()</db:code> slot. In the constructor we create and customize the data model and the various window elements:</db:para>
<db:programlisting language="cpp">TableEditor::TableEditor(const QString &amp;amp;tableName, QWidget *parent)
    : QWidget(parent)
{
    model = new QSqlTableModel(this);
    model-&amp;gt;setTable(tableName);
    model-&amp;gt;setEditStrategy(QSqlTableModel::OnManualSubmit);
    model-&amp;gt;select();

    model-&amp;gt;setHeaderData(0, Qt::Horizontal, tr(&quot;ID&quot;));
    model-&amp;gt;setHeaderData(1, Qt::Horizontal, tr(&quot;First name&quot;));
    model-&amp;gt;setHeaderData(2, Qt::Horizontal, tr(&quot;Last name&quot;));
</db:programlisting>
<db:para>First we create the data model and set the SQL database table we want the model to operate on. Note that the QSqlTableModel::setTable() function does not select data from the table; it only fetches its field information. For that reason we call the QSqlTableModel::select() function later on, populating the model with data from the table. The selection can be customized by specifying filters and sort conditions (see the QSqlTableModel class documentation for more details).</db:para>
<db:para>We also set the model's edit strategy. The edit strategy dictates when the changes done by the user in the view, are actually applied to the database. Since we want to cache the changes in the table view (i.e. in the model) until the user explicitly submits them, we choose the QSqlTableModel::OnManualSubmit strategy. The alternatives are QSqlTableModel::OnFieldChange and QSqlTableModel::OnRowChange.</db:para>
<db:para>Finally, we set up the labels displayed in the view header using the <db:link xlink:href="">setHeaderData()</db:link> function that the model inherits from the QSqlQueryModel class.</db:para>
<db:programlisting language="cpp">    QTableView *view = new QTableView;
    view-&amp;gt;setModel(model);
    view-&amp;gt;resizeColumnsToContents();
</db:programlisting>
<db:para>Then we create a table view. The QTableView class provides a default model/view implementation of a table view, i.e. it implements a table view that displays items from a model. It also allows the user to edit the items, storing the changes in the model. To create a read only view, set the proper flag using the editTriggers property the view inherits from the QAbstractItemView class.</db:para>
<db:para>To make the view present our data, we pass our model to the view using the <db:link xlink:href="">setModel()</db:link> function.</db:para>
<db:programlisting language="cpp">    submitButton = new QPushButton(tr(&quot;Submit&quot;));
    submitButton-&amp;gt;setDefault(true);
    revertButton = new QPushButton(tr(&quot;&amp;amp;Revert&quot;));
    quitButton = new QPushButton(tr(&quot;Quit&quot;));

    buttonBox = new QDialogButtonBox(Qt::Vertical);
    buttonBox-&amp;gt;addButton(submitButton, QDialogButtonBox::ActionRole);
    buttonBox-&amp;gt;addButton(revertButton, QDialogButtonBox::ActionRole);
    buttonBox-&amp;gt;addButton(quitButton, QDialogButtonBox::RejectRole);
</db:programlisting>
<db:para>The <db:code>TableEditor</db:code>'s buttons are regular QPushButton objects. We add them to a button box to ensure that the buttons are presented in a layout that is appropriate to the current widget style. The rationale for this is that dialogs and message boxes typically present buttons in a layout that conforms to the interface guidelines for that platform. Invariably, different platforms have different layouts for their dialogs. QDialogButtonBox allows a developer to add buttons to it and will automatically use the appropriate layout for the user's desktop environment.</db:para>
<db:para>Most buttons for a dialog follow certain roles. When adding a button to a button box using the <db:link xlink:href="">addButton()</db:link> function, the button's role must be specified using the QDialogButtonBox::ButtonRole enum. Alternatively, QDialogButtonBox provides several standard buttons (e.g. <db:guilabel>OK</db:guilabel>, <db:guilabel>Cancel</db:guilabel>, <db:guilabel>Save</db:guilabel>) that you can use. They exist as flags so you can OR them together in the constructor.</db:para>
<db:programlisting language="cpp">    connect(submitButton, &amp;amp;QPushButton::clicked, this, &amp;amp;TableEditor::submit);
    connect(revertButton, &amp;amp;QPushButton::clicked,  model, &amp;amp;QSqlTableModel::revertAll);
    connect(quitButton, &amp;amp;QPushButton::clicked, this, &amp;amp;TableEditor::close);
</db:programlisting>
<db:para>We connect the <db:guilabel>Quit</db:guilabel> button to the table editor's <db:link xlink:href="">close()</db:link> slot, and the <db:guilabel>Submit</db:guilabel> button to our private <db:code>submit()</db:code> slot. The latter slot will take care of the data transactions. Finally, we connect the <db:guilabel>Revert</db:guilabel> button to our model's <db:link xlink:href="">revertAll()</db:link> slot, reverting all pending changes (i.e., restoring the original data).</db:para>
<db:programlisting language="cpp">    QHBoxLayout *mainLayout = new QHBoxLayout;
    mainLayout-&amp;gt;addWidget(view);
    mainLayout-&amp;gt;addWidget(buttonBox);
    setLayout(mainLayout);

    setWindowTitle(tr(&quot;Cached Table&quot;));
}
</db:programlisting>
<db:para>In the end we add the button box and the table view to a layout, install the layout on the table editor widget, and set the editor's window title.</db:para>
<db:programlisting language="cpp">void TableEditor::submit()
{
    model-&amp;gt;database().transaction();
    if (model-&amp;gt;submitAll()) {
        model-&amp;gt;database().commit();
    } else {
        model-&amp;gt;database().rollback();
        QMessageBox::warning(this, tr(&quot;Cached Table&quot;),
                             tr(&quot;The database reported an error: %1&quot;)
                             .arg(model-&amp;gt;lastError().text()));
    }
}
</db:programlisting>
<db:para>The <db:code>submit()</db:code> slot is called whenever the users hit the <db:guilabel>Submit</db:guilabel> button to save their changes.</db:para>
<db:para>First, we begin a transaction on the database using the QSqlDatabase::transaction() function. A database transaction is a unit of interaction with a database management system or similar system that is treated in a coherent and reliable way independent of other transactions. A pointer to the used database can be obtained using the QSqlTableModel::database() function.</db:para>
<db:para>Then, we try to submit all the pending changes, i.e. the model's modified items. If no error occurs, we commit the transaction to the database using the QSqlDatabase::commit() function (note that on some databases, this function will not work if there is an active QSqlQuery on the database). Otherwise we perform a rollback of the transaction using the QSqlDatabase::rollback() function and post a warning to the user.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">See also:</db:emphasis></db:para>
<db:para>A complete list of Qt's SQL <db:link xlink:href="database.xml">Database Classes</db:link>, and the <db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link> documentation.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/sql/cachedtable?h=5.13">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
