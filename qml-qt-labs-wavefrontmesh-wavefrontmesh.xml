<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WavefrontMesh QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link> provides a mesh based on a Wavefront .obj file.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Qt.labs.wavefrontmesh 1.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>WavefrontMesh is part of <db:simplelist><db:member>qtquick-effects</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link> reads the geometry from a Wavefront .obj file and generates a two-dimensional <db:link xlink:href="qsggeometry.xml">geometry</db:link> from this. If the .obj file contains a three-dimensional shape, it will be orthographically projected, onto a plane. If defined, this is given by <db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml#projectionPlaneV-prop">projectionPlaneV</db:link> and <db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml#projectionPlaneW-prop">projectionPlaneW</db:link>. Otherwise, the first face encountered in the data will be used to determine the projection plane.</db:para>
<db:para>If the file contains texture coordinates, these will also be used. Otherwise, the vertexes of the object will be normalized and used.</db:para>
<db:para>The mesh can be used in a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> to define the shaded geometry. The geometry will be normalized before use, so the position and scale of the input objects have no impact on the result.</db:para>
<db:note>
<db:para>Some Wavefront exporters will change the source scene's coordinate system before exporting it. This can cause unexpected results when Qt applies the projection. If the visual results are not as you expect, try checking the export parameters and the documentation of the editor tool to see if this is the case.</db:para>
</db:note>
<db:para>For instance, the following example takes an .obj file containing a standard torus and visualizes the automatically generated texture coordinates.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtlabs-wavefrontmesh.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:programlisting language="qml">import QtQuick 2.\1
import Qt.labs.wavefrontmesh 1.\1

ShaderEffect {
    width: 200
    height: 200
    mesh: WavefrontMesh {
        source: &quot;torus.obj&quot;
        projectionPlaneV: Qt.vector3d(0, 1, 0)
        projectionPlaneW: Qt.vector3d(1, 0, 0)
    }
    vertexShader: &quot;
            uniform highp mat4 qt_Matrix;
            attribute highp vec4 qt_Vertex;
            attribute highp vec2 qt_MultiTexCoord0;
            varying highp vec2 coord;
            void main() {
                coord = qt_MultiTexCoord0;
                gl_Position = qt_Matrix * qt_Vertex;
            }&quot;
    fragmentShader: &quot;
            varying highp vec2 coord;
            uniform lowp float qt_Opacity;
            void main() {
                gl_FragColor = vec4(coord.x, coord.y, 0.0, 1.0);
            }&quot;

}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Since the input is a 3D torus, we need to define the projection plane. This would not be necessary when using a 2D shape as input. We use the XY plane in this case, because of the orientation of the input.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="lastError-prop">
<db:title>lastError : enumeration</db:title>
<db:para>This property holds the last error, if any, that occurred when parsing the source or building the mesh.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link>.<db:link xlink:href="qdtls.xml#QDtlsError-enum">NoError</db:link> No error has occurred.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link>.InvalidSourceError The source was not recognized as a valid .obj file.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link>.UnsupportedFaceShapeError The faces in the source is of an unsupported type. <db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link> only supports triangles and convex quads.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link>.UnsupportedIndexSizeError The source shape is too large. Only 16 bit indexes are supported.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link>.FileNotFoundError The source file was not found.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link>.MissingPositionAttributeError The 'qt_Vertex' attribute is missing from the shaders.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link>.MissingTextureCoordinateAttributeError The texture coordinate attribute in the shaders is wrongly named. Use 'qt_MultiTexCoord0'.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link>.MissingPositionAndTextureCoordinateAttributesError Both the 'qt_Vertex' and 'qt_MultiTexCoord0' attributes are missing from the shaders.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link>.TooManyAttributesError The shaders expect too many attributes (maximum is two: Position, 'qt_Vertex', and texture coordinate, 'qt_MultiTexCoord0').</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link>.InvalidPlaneDefinitionError The V and W vectors in the plane cannot be null, nor parallel to each other.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="projectionPlaneV-prop">
<db:title>projectionPlaneV : vector3d</db:title>
<db:para>Since the Wavefront .obj format describes an object in 3D space, the coordinates have to be projected into 2D before they can be displayed in Qt Quick.</db:para>
<db:para>This will be done in <db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link> by an orthographic projection onto an appropriate plane.</db:para>
<db:para>The projectionPlaneV is one of two vectors in the plane in 3D space. If either this, or <db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml#projectionPlaneW-prop">projectionPlaneW</db:link> is set to (0, 0, 0) (the default), then the plane will be detected based on the first encountered face in the data set.</db:para>
<db:note>
<db:para>projectionPlaneV and <db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml#projectionPlaneW-prop">projectionPlaneW</db:link> cannot be parallel vectors.</db:para>
</db:note>
</db:section>
<db:section xml:id="projectionPlaneW-prop">
<db:title>projectionPlaneW : vector3d</db:title>
<db:para>Since the Wavefront .obj format describes an object in 3D space, the coordinates have to be projected into 2D before they can be displayed in Qt Quick.</db:para>
<db:para>This will be done in <db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml">WavefrontMesh</db:link> by an orthographic projection onto an appropriate plane.</db:para>
<db:para>The projectionPlaneW is one of two vectors in the plane in 3D space. If either this, or <db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml#projectionPlaneV-prop">projectionPlaneV</db:link> is set to (0, 0, 0) (the default), then the plane will be detected based on the first encountered face in the data set.</db:para>
<db:note>
<db:para><db:link xlink:href="qml-qt-labs-wavefrontmesh-wavefrontmesh.xml#projectionPlaneV-prop">projectionPlaneV</db:link> and projectionPlaneW cannot be parallel vectors.</db:para>
</db:note>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : url</db:title>
<db:para>This property holds the URL of the source. This must be either a local file or in qrc. The source will be read as a Wavefront .obj file and the geometry will be updated.</db:para>
</db:section>
</db:section>
</db:article>
