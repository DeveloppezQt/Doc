<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Direct3D 12 Adaptation</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Direct3D 12 adaptation for Windows 10, both in Win32 (<db:code>windows</db:code> platform plugin) and in UWP (<db:code>winrt</db:code> platform plugin), is shipped as a dynamically loaded plugin. This adaptation doesn't work on earlier Windows versions. Building this plugin is enabled automatically, whenever the necessary D3D and DXGI develpoment files are present. In practice, this currently means Visual Studio 2015 and newer.</db:para>
<db:para>The adaptation is available both in normal, OpenGL-enabled Qt builds, and also when Qt is configured with <db:code>-no-opengl</db:code>. However, it's never the default, meaning that the user or the application has to explicitly request it by setting the <db:code>QT_QUICK_BACKEND</db:code> environment variable to <db:code>d3d12</db:code> or by calling <db:link xlink:href="qquickwindow.xml#setSceneGraphBackend">QQuickWindow::setSceneGraphBackend</db:link>().</db:para>
<db:section xml:id="motivation">
<db:title>Motivation</db:title>
<db:para>This experimental adaptation is the first Qt Quick backend that focuses on a modern, lower-level graphics API in combination with a windowing system interface that's different from the traditional approaches used in combination with OpenGL.</db:para>
<db:para>This adaptation also allows better integration with Windows, as Direct3D is the primary vendor-supported solution. Consequently, there are fewer problems anticipated with drivers, operations like window resizes, and special events like graphics device loss caused by device resets or graphics driver updates.</db:para>
<db:para>Performance-wise, the general expectation is a somewhat lower CPU usage compared to OpenGL, due to lower driver overhead, and a higher GPU utilization with less idle time wastage. The backend doesn't heavily utilize threads yet, which means there are opportunities for further improvements in the future, for example to further optimize image loading.</db:para>
<db:para>The D3D12 backend also introduces support for pre-compiled shaders. All the backend's own shaders (used by the built-in materials on which the Rectangle, Image, Text, and other QML types are built with) are compiled to D3D shader bytecode when you compile Qt. Applications using <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> items can choose to ship bytecode either in regular files, via the Qt resource system, or use High Level Shading Language for DirectX (HLSL) source strings. Unlike OpenGL, the compilation for HLSL is properly threaded, meaning shader compilation won't block the application and its user interface.</db:para>
</db:section>
<db:section xml:id="graphics-adapters">
<db:title>Graphics Adapters</db:title>
<db:para>The plugin does not necessarily require hardware acceleration. You can also use WARP, the Direct3D software rasterizer. By default, the first adapter providing hardware acceleration is chosen. To override this and use another graphics adapter or to force the use of the software rasterizer, set the <db:code>QT_D3D_ADAPTER_INDEX</db:code> environment variable to the index of the adapter. The adapters discovered are printed at startup when <db:code>QSG_INFO</db:code> or the <db:code>qt.scenegraph.general</db:code> logging category is enabled.</db:para>
</db:section>
<db:section xml:id="troubleshooting">
<db:title>Troubleshooting</db:title>
<db:para>If you encounter issues, always set the <db:code>QSG_INFO</db:code> and <db:code>QT_D3D_DEBUG</db:code> environment variables to <db:code>1</db:code>, to get debug and warning messages printed on the debug output. <db:code>QT_D3D_DEBUG</db:code> enables the Direct3D debug layer.</db:para>
<db:note>
<db:para>The debug layer shouldn't be enabled in production use, since it can significantly impact performance (CPU load) due to increased API overhead.</db:para>
</db:note>
</db:section>
<db:section xml:id="render-loops">
<db:title>Render Loops</db:title>
<db:para>By default, the D3D12 adaptation uses a single-threaded render loop similar to OpenGL's <db:code>windows</db:code> render loop. A threaded variant is also available, that you can request by setting the <db:code>QSG_RENDER_LOOP</db:code> environment variable to <db:code>threaded</db:code>. However, due to conceptual limitations in DXGI, the windowing system interface, the threaded loop is prone to deadlocks when multiple <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> or <db:link xlink:href="qquickview.xml">QQuickView</db:link> instances are shown. Consequently, for the time being, the default is the single-threaded loop. This means that with the D3D12 backend, applications are expected to move their work from the main (GUI) thread out to worker threads, instead of expecting Qt to keep the GUI thread responsive and suitable for heavy, blocking operations.</db:para>
<db:para>For more information see <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml">Qt Quick Scene Graph</db:link> for details on render loops and <db:link xlink:href="https://docs.microsoft.com/en-us/windows/desktop/direct3darticles/dxgi-best-practices#multithreading-and-dxgi">Multithreading and DXGI</db:link> regarding the issues with multithreading.</db:para>
</db:section>
<db:section xml:id="renderer">
<db:title>Renderer</db:title>
<db:para>The scene graph renderer in the D3D12 adaptation currently doesn't perform any batching. This is less of an issue, unlike OpenGL, because state changes don't present any problems in the first place. The simpler renderer logic can also lead to lower CPU overhead in some cases. The trade-offs between the various approaches are currently under research.</db:para>
</db:section>
<db:section xml:id="shader-effects">
<db:title>Shader Effects</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> QML type is fully functional with the D3D12 adaptation as well. However, the interpretation of the fragmentShader and vertexShader properties is different than with OpenGL.</db:para>
<db:para>With D3D12, these strings can either be a URL for a local file, a file in the resource system, or an HLSL source string. Using a URL for a local file or a file in the resource system indicates that the file in question contains pre-compiled D3D shader bytecode generated by the <db:code>fxc</db:code> tool, or, alternatively, HLSL source code. The type of file is detected automatically. This means that the D3D12 backend supports all options from <db:link xlink:href="qml-qtquick-graphicsinfo.xml">GraphicsInfo</db:link>.shaderCompilationType and <db:link xlink:href="qml-qtquick-graphicsinfo.xml">GraphicsInfo</db:link>.shaderSourceType.</db:para>
<db:para>Unlike OpenGL, whenever you open a file, there is a <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> with the extra <db:code>hlsl</db:code> selector used. This provides easy creation of <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> items that are functional across both backends, for example by placing the GLSL source code into <db:code>shaders/effect.frag</db:code>, the HLSL source code or - preferably - pre-compiled bytecode into <db:code>shaders/+hlsl/effect.frag</db:code>, while simply writing <db:code>fragmentShader: &quot;qrc:shaders/effect.frag&quot;</db:code> in QML. For more details, see <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.</db:para>
</db:section>
<db:section xml:id="multisample-render-targets">
<db:title>Multisample Render Targets</db:title>
<db:para>The Direct3D 12 adaptation ignores the <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> set on the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> or <db:link xlink:href="qquickview.xml">QQuickView</db:link>, or set via <db:link xlink:href="qsurfaceformat.xml#setDefaultFormat">QSurfaceFormat::setDefaultFormat</db:link>(), with two exceptions: <db:link xlink:href="qsurfaceformat.xml#samples">QSurfaceFormat::samples</db:link>() and <db:link xlink:href="qsurfaceformat.xml#alphaBufferSize">QSurfaceFormat::alphaBufferSize</db:link>() are still taken into account. When the sample value is greater than 1, multisample offscreen render targets will be created with the specified sample count at the maximum supported quality level. The backend automatically performs resolving into the non-multisample swapchain buffers after each frame.</db:para>
</db:section>
<db:section xml:id="semi-transparent-windows">
<db:title>Semi-transparent Windows</db:title>
<db:para>When the alpha channel is enabled either via <db:link xlink:href="qquickwindow.xml#setDefaultAlphaBuffer">QQuickWindow::setDefaultAlphaBuffer</db:link>() or by setting alphaBufferSize to a non-zero value in the window's <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> or in the global format managed by <db:link xlink:href="qsurfaceformat.xml#setDefaultFormat">QSurfaceFormat::setDefaultFormat</db:link>(), the D3D12 backend will create a swapchain for composition and go through DirectComposition. This is necessary, because the mandatory flip model swapchain wouldn't support transparency otherwise.</db:para>
<db:para>Therefore, it's important not to unneccessarily request an alpha channel. When the alphaBufferSize is 0 or the default -1, all these extra steps can be avoided and the traditional window-based swapchain is sufficient.</db:para>
<db:para>On WinRT, this isn't relevant because the backend there always uses a composition swapchain which is associated with the ISwapChainPanel that backs <db:link xlink:href="qwindow.xml">QWindow</db:link> on that platform.</db:para>
</db:section>
<db:section xml:id="mipmaps">
<db:title>Mipmaps</db:title>
<db:para>Mipmap generation is supported and handled transparently to the applications via a built-in compute shader. However, at the moment, this feature is experimental and only supports power-of-two images. Textures of other size will work too, but this involves a <db:link xlink:href="qimage.xml">QImage</db:link>-based scaling on the CPU first. Therefore, avoid enabling mipmapping for Non-Power-Of-Two (NPOT) images whenever possible.</db:para>
</db:section>
<db:section xml:id="image-formats">
<db:title>Image Formats</db:title>
<db:para>When creating textures via C++ scene graph APIs like <db:link xlink:href="qquickwindow.xml#createTextureFromImage">QQuickWindow::createTextureFromImage</db:link>(), 32-bit formats won't involve any conversion, they'll map directly to the corresponding <db:code>R8G8B8A8_UNORM</db:code> or <db:code>B8G8R8A8_UNORM</db:code> format. Everything else will trigger a <db:link xlink:href="qimage.xml">QImage</db:link>-based format conversion on the CPU first.</db:para>
</db:section>
<db:section xml:id="unsupported-features">
<db:title>Unsupported Features</db:title>
<db:para>Particles and some other OpenGL-dependent utilities, like <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link>, are currently not supported.</db:para>
<db:para>Like with <db:link xlink:href="qtquick-visualcanvas-adaptations-software.xml">Software adaptation</db:link>, text is always rendered using the native method. Distance field-based text rendering is currently not implemented.</db:para>
<db:para>The shader sources in the <db:link xlink:href="qtgraphicaleffects-index.xml">Qt Graphical Effects</db:link> module have not been ported to any format other than the OpenGL 2.0 compatible one, meaning that the QML types provided by that module are currently not functional with the D3D12 backend.</db:para>
<db:para>Texture atlases are currently not in use.</db:para>
<db:para>The renderer may lack support for certain minor features, such as drawing points and lines with a width other than 1.</db:para>
<db:para>Custom Qt Quick items using custom scene graph nodes can be problematic because materials are inherently tied to the graphics API. Therefore, only items that use the utility rectangle and image nodes are functional across all adaptations.</db:para>
<db:para><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> and its underlying OpenGL-based compositing architecture is not supported. If you need to mix with <db:link xlink:href="qwidget.xml">QWidget</db:link>-based user interfaces, use <db:link xlink:href="qwidget.xml#createWindowContainer">QWidget::createWindowContainer</db:link>() to embed the native window of the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> or <db:link xlink:href="qquickview.xml">QQuickView</db:link>.</db:para>
<db:para>Finally, rendering via <db:link xlink:href="qsgengine.xml">QSGEngine</db:link> and <db:link xlink:href="qsgabstractrenderer.xml">QSGAbstractRenderer</db:link> is not feasible with the D3D12 adaptation at the moment.</db:para>
</db:section>
<db:section xml:id="related-apis">
<db:title>Related APIs</db:title>
<db:para>To integrate custom Direct3D 12 rendering, use <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> in combination with <db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link>. This approach doesn't rely on OpenGL contexts or API specifics like framebuffers, and allows exposing the graphics device and command buffer from the adaptation. It's not necessarily suitable for easy integration of all types of content, in particular true 3D, so it'll likely get complemented by an alternative to <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link> in future releases.</db:para>
<db:para>To perform runtime decisions based on the adaptation, use <db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link> from C++ and <db:link xlink:href="qml-qtquick-graphicsinfo.xml">GraphicsInfo</db:link> from QML. They can also be used to check the level of shader support: shading language, compilation approach, and so on.</db:para>
<db:para>When creating custom items, use the new <db:link xlink:href="qsgrectanglenode.xml">QSGRectangleNode</db:link> and <db:link xlink:href="qsgimagenode.xml">QSGImageNode</db:link> classes. These replace the now deprecated QSGSimpleRectNode and QSGSimpleTextureNode. Unlike their predecessors, these new classes are interfaces, and implementations are created via the <db:link xlink:href="qquickwindow.xml#createRectangleNode">QQuickWindow::createRectangleNode</db:link>() and <db:link xlink:href="qquickwindow.xml#createImageNode">QQuickWindow::createImageNode</db:link>() factory functions.</db:para>
</db:section>
<db:section xml:id="advanced-configuration">
<db:title>Advanced Configuration</db:title>
<db:para>The D3D12 adaptation can keep multiple frames in flight, similar to modern game engines. This is somewhat different from the traditional &quot;render - swap - wait for vsync&quot; model and allows for better GPU utilization at the expense of higher resource use. This means that the renderer will be a number of frames ahead of what is displayed on the screen.</db:para>
<db:para>For a discussion of flip model swap chains and the typical configuration parameters, refer to <db:link xlink:href="https://software.intel.com/en-us/articles/sample-application-for-direct3d-12-flip-model-swap-chains">Sample Application for Direct3D 12 Flip Model Swap Chains</db:link>.</db:para>
<db:para>Vertical synchronization is always enabled, meaning Present() is invoked with an interval of 1.</db:para>
<db:para>The configuration can be changed by setting the following environment variables:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Environment variable</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>QT_D3D_BUFFER_COUNT</db:code></db:para>
</db:td>
<db:td>
<db:para>The number of swap chain buffers in range 2 - 4. The default value is 3.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>QT_D3D_FRAME_COUNT</db:code></db:para>
</db:td>
<db:td>
<db:para>The number of frames prepared without blocking in range 1 - 4. The default value is 2. Present() starts blocking after queuing 3 frames (regardless of <db:code>QT_D3D_BUFFER_COUNT</db:code>), unless the waitable object is in use. Every additional frame increases GPU resource usage since geometry and constant buffer data needs to be duplicated, and involves more bookkeeping on the CPU side.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>QT_D3D_WAITABLE_SWAP_CHAIN_MAX_LATENCY</db:code></db:para>
</db:td>
<db:td>
<db:para>The frame latency in range 1 - 16. The default value is 0 (disabled). Changes the limit for Present() and triggers a wait for an available swap chain buffer when beginning each frame. For a detailed discussion, see the article linked above.</db:para>
<db:note>
<db:para>Currently, this behavior is experimental.</db:para>
</db:note>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>QT_D3D_BLOCKING_PRESENT</db:code></db:para>
</db:td>
<db:td>
<db:para>The time the CPU should wait, a non-zero value, for the GPU to finish its work after each call to Present(). The default value is 0 (disabled). This behavior effectively kills all parallelism but makes the behavior resemble the traditional swap-blocks-for-vsync model, which can be useful in some special cases. However, this behavior is not the same as setting the frame count to 1 because that still avoids blocking after Present(), and may only block when starting to prepare the next frame (or may not block at all depending on the time gap between the frames).</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:article>
