<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WaylandCompositor QML Type</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Manages the Wayland display server.</db:para>
<db:para>This type was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtWayland.Compositor 1.14</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtwayland-compositor-waylandcompositor.xml">WaylandCompositor</db:link> manages the connections to the clients, as well as the different <db:link xlink:href="qml-qtwayland-compositor-waylandoutput.xml">outputs</db:link> and <db:link xlink:href="qwaylandseat.xml">seats</db:link>.</db:para>
<db:para>Normally, a compositor application will have a single <db:link xlink:href="qml-qtwayland-compositor-waylandcompositor.xml">WaylandCompositor</db:link> instance, which can have several outputs as children. When a client requests the compositor to create a surface, the request is handled by the onSurfaceRequested handler.</db:para>
<db:para>Extensions that are supported by the compositor should be instantiated and added to the extensions property.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="created-prop">
<db:title>created : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>created</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is true if <db:link xlink:href="qml-qtwayland-compositor-waylandcompositor.xml">WaylandCompositor</db:link> has been initialized, otherwise it's false.</db:para>
</db:section>
<db:section xml:id="defaultOutput-prop">
<db:title>defaultOutput : WaylandOutput</db:title>
<db:fieldsynopsis>
<db:type>WaylandOutput</db:type>
<db:varname>defaultOutput</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains the first in the list of outputs added to the <db:link xlink:href="qml-qtwayland-compositor-waylandcompositor.xml">WaylandCompositor</db:link>, or null if no outputs have been added.</db:para>
<db:para>Setting a new default output prepends it to the output list, making it the new default, but the previous default is not removed from the list.</db:para>
</db:section>
<db:section xml:id="defaultSeat-prop">
<db:title>defaultSeat : WaylandSeat</db:title>
<db:fieldsynopsis>
<db:type>WaylandSeat</db:type>
<db:varname>defaultSeat</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains the default seat for this <db:link xlink:href="qml-qtwayland-compositor-waylandcompositor.xml">WaylandCompositor</db:link>.</db:para>
</db:section>
<db:section xml:id="extensions-prop">
<db:title>extensions : list</db:title>
<db:fieldsynopsis>
<db:type>list</db:type>
<db:varname>extensions</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>A list of extensions that the compositor advertises to its clients. For any Wayland extension the compositor should support, instantiate its component, and add it to the list of extensions.</db:para>
<db:para>For instance, the following code would allow the clients to request <db:code>wl_shell</db:code> surfaces in the compositor using the <db:code>wl_shell</db:code> interface.</db:para>
<db:programlisting language="qml">import QtWayland.Compositor 1.14

WaylandCompositor {
    WlShell {
        // ...
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="retainedSelection-prop">
<db:title>retainedSelection : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>retainedSelection</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether retained selection is enabled.</db:para>
</db:section>
<db:section xml:id="socketName-prop">
<db:title>socketName : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>socketName</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the socket name used by <db:link xlink:href="qml-qtwayland-compositor-waylandcompositor.xml">WaylandCompositor</db:link> to communicate with clients. It must be set before the component is completed.</db:para>
<db:para>If the socketName is empty (the default), the contents of the start argument <db:code>--wayland-socket-name</db:code> are used instead. If the argument is not set, the compositor tries to find a socket name, which is <db:code>wayland-0</db:code> by default.</db:para>
</db:section>
<db:section xml:id="useHardwareIntegrationExtension-prop">
<db:title>useHardwareIntegrationExtension : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>useHardwareIntegrationExtension</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the hardware integration extension should be enabled for this <db:link xlink:href="qml-qtwayland-compositor-waylandcompositor.xml">WaylandCompositor</db:link>.</db:para>
<db:para>This property must be set before the compositor component is completed.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="surfaceCreated-signal">
<db:title>void surfaceCreated(WaylandSurface <db:emphasis>surface</db:emphasis>)</db:title>
<db:para>This signal is emitted when a new <db:link xlink:href="qml-qtwayland-compositor-waylandsurface.xml">WaylandSurface</db:link> instance <db:code role="parameter">surface</db:code> has been created.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onSurfaceCreated</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="surfaceRequested-signal">
<db:title>void surfaceRequested(WaylandClient <db:emphasis>client</db:emphasis>, int <db:emphasis>id</db:emphasis>, int <db:emphasis>version</db:emphasis>)</db:title>
<db:para>This signal is emitted when a <db:code role="parameter">client</db:code> has created a surface with id <db:code role="parameter">id</db:code>. The interface <db:code role="parameter">version</db:code> is also available.</db:para>
<db:para>The slot connecting to this signal may create and initialize a <db:link xlink:href="qml-qtwayland-compositor-waylandsurface.xml">WaylandSurface</db:link> instance in the scope of the slot. Otherwise a default surface is created.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onSurfaceRequested</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addSocketDescriptor-method">
<db:title>[since 5.12] addSocketDescriptor(<db:emphasis>fd</db:emphasis>)</db:title>
<db:para>Listen for client connections on a file descriptor, <db:code role="parameter">fd</db:code>, referring to a server socket already bound and listening.</db:para>
<db:para>Does not take ownership of the file descriptor; it must be closed explicitly if needed.</db:para>
<db:note>
<db:para>This method is only available with libwayland 1.10.0 or newer. If built against an earlier libwayland runtime, this method is a noop.</db:para>
</db:note>
<db:para>This method was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="destroyClient-method">
<db:title>destroyClient(<db:emphasis>client</db:emphasis>)</db:title>
<db:para>Destroys the given <db:link xlink:href="qml-qtwayland-compositor-waylandclient.xml">WaylandClient</db:link> <db:code role="parameter">client</db:code>.</db:para>
</db:section>
<db:section xml:id="destroyClientForSurface-method">
<db:title>destroyClientForSurface(<db:emphasis>surface</db:emphasis>)</db:title>
<db:para>Destroys the client for the <db:link xlink:href="qml-qtwayland-compositor-waylandsurface.xml">WaylandSurface</db:link> <db:code role="parameter">surface</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
