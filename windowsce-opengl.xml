<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Windows CE and OpenGL ES</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Information about support for OpenGL ES with Qt for Windows CE.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para><db:link xlink:href="http://www.opengl.org">OpenGL</db:link> is an industry standard API for 2D/3D graphics. It provides a powerful, low-level interface between software and acceleration hardware, and it is operating system and window system independent. <db:link xlink:href="http://www.khronos.org/opengles">OpenGL ES</db:link> is a subset of the <db:link xlink:href="http://www.opengl.org">OpenGL</db:link> standard. Because it is designed for use with embedded systems, it has a smaller, more constrained API.</db:para>
<db:para><db:link xlink:href="http://www.khronos.org/opengles/1_X">OpenGL ES version 1.x</db:link> is designed for fixed function hardware, while its successor <db:link xlink:href="http://www.khronos.org/opengles/2_X">OpenGL ES version 2.x</db:link> is designed for programmable hardware. It is worth noting that there is a significant difference between the two, and that they are not compatible with each other. OpenGL ES 1.x limits processing to a pre-defined set of fixed options for drawing and lighting objects. OpenGL 2.x has a significantly shorter graphics pipeline than 1.x. Instead of using function transformation and a fragment pipeline, 2.x uses the <db:link xlink:href="http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf">OpenGL ES Shading Language (GLSL ES)</db:link>. Instead of using the pre-defined functions, the programmer writes small shader programs telling the hardware in detail how to render each object.</db:para>
<db:para>The <db:link xlink:href="qtopengl-index.xml">Qt OpenGL</db:link> module offers classes that make it easy to draw 3D graphics in GUI applications using OpenGL ES. Qt provides a plugin that integrates both OpenGL ES versions <db:link xlink:href="http://www.khronos.org/opengles/1_X">1.x</db:link> and <db:link xlink:href="http://www.khronos.org/opengles/2_X">2.x</db:link> with Qt for Embedded. However, Qt for Embedded can be adapted to a wide range of OpenGL versions.</db:para>
<db:para>To translate <db:link xlink:href="qpainter.xml">QPainter</db:link> operations into OpenGL ES calls (there are actually two subclasses, one for OpenGL/ES 1.1 and another for OpenGL/ES 2.0), Qt uses a subclass of <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link>. This specialized paint engine can be used to improve 2D rendering performance on appropriate hardware. It can also overlay controls and decorations onto 3D scenes drawn using OpenGL.</db:para>
</db:section>
<db:section xml:id="using-opengl-es-with-qt">
<db:title>Using OpenGL ES with Qt</db:title>
<db:para>To use OpenGL-enabled widgets in a Qt for Embedded application, all that is required is to subclass QGLWidget and draw into instances of the subclass with standard OpenGL functions. The current implementation only supports OpenGL ES and 2D painting within a QGLWidget. Using OpenGL ES to accelerate regular widgets as well as compositing top-level windows with OpenGL ES are not currently supported. These issues will be addressed in future versions of Qt.</db:para>
<db:note>
<db:para>The OpenGL paint engine is not currently supported in regular widgets. However, any application that uses <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> can set a QGLWidget as the viewport and obtain access to the OpenGL paint engine that way:</db:para>
</db:note>
<db:programlisting language="cpp">QGraphicsView view(&amp;scene);
view.setViewport(new QGLWidget());
view.setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
view.setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
view.setViewportUpdateMode(QGraphicsView::FullViewportUpdate);
view.setFrameStyle(0);
view.showFullScreen();
</db:programlisting>
<db:para>It is recommended that the <db:link xlink:href="qgraphicsview.xml#ViewportUpdateMode-enum">QGraphicsView::FullViewportUpdate</db:link> flag be set because the default double-buffered behavior of QGLWidget does not support partial updates. It is also recommended that the window be shown full-screen because that usually has the best performance on current OpenGL ES implementations.</db:para>
<db:para>Once a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> has been initialized as above, regular widgets can be added to the canvas using <db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link> if the application requires them.</db:para>
<db:note>
<db:para>OpenGL ES 2.X does not support PBuffers, so QGLPixelBuffer will not work. In this case, QGLFramebufferObject should be used instead. However, OpenGL ES 1.X does not support Framebuffer objects, with the exception of some OpenGL ES 1.X extensions. In this case, please use QGLPixelBuffer.</db:para>
</db:note>
<db:note>
<db:para>On most embedded hardware, the OpenGL implementation is actually <db:link xlink:href="http://www.khronos.org/opengles/1_X/">OpenGL/ES 1.1</db:link> or <db:link xlink:href="http://www.khronos.org/opengles/2_X/">OpenGL/ES 2.0</db:link>. When painting within a <db:link xlink:href="qglwidget.xml#paintGL">QGLWidget::paintGL</db:link>() override, it is necessary to limit the application to only the features that are present in the OpenGL/ES implementation.</db:para>
</db:note>
</db:section>
<db:section xml:id="using-opengl-with-qt-for-windows-ce">
<db:title>Using OpenGL with Qt for Windows CE</db:title>
<db:para>Qt for Windows CE uses EGL 1.1 to embed OpenGL ES windows within the Windows CE window manager.</db:para>
<db:section xml:id="configure">
<db:title>Configure</db:title>
<db:para>To configure Qt for Windows Mobile 5.0 and OpenGL ES Common support you can run configure like this:</db:para>
<db:programlisting language="cpp">configure -platform win32-msvc2005 -xplatform wincewm50pocket-msvc2005 -opengl-es-cm
</db:programlisting>
<db:para>OpenGL ES includes profiles for floating-point and fixed-point arithmetic. The floating point profile is called OpenGL ES CM (Common) and the fixed-point profile is called OpenGL ES CL (Common Lite). The fixed-point profile is no longer supported since Qt 4.7.</db:para>
<db:para>You can run configure with the -opengl-es-cm option for the Common profile. Ensure that the lib and includes paths include the OpenGL ES headers and libararies from your SDK. The OpenGL ES lib should be called either libGLES_CM.lib for the Common profile.</db:para>
</db:section>
<db:section xml:id="using-opengl-to-accelerate-normal-2d-painting">
<db:title>Using OpenGL to Accelerate Normal 2D Painting</db:title>
<db:para>Qt provides QOpenGLPaintEngine, a subclass of <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> that translates <db:link xlink:href="qpainter.xml">QPainter</db:link> operations into OpenGL calls. This is especially convenient for drawing text or <db:link xlink:href="qimage.xml">QImage</db:link> objects in an OpenGL ES context. For further details, refer to the <db:link xlink:href="qtgui-openglwindow-example.xml">OpenGL Window Example</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
