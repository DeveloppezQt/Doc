<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPlatformGraphicsBuffer Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qplatformgraphicsbuffer.xml">QPlatformGraphicsBuffer</db:link> is a windowsystem abstraction for native graphics buffers.</db:para>
<db:para>This class was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPlatformGraphicsBuffer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Different platforms have different ways of representing graphics buffers. On some platforms, it is possible to create one graphics buffer that you can bind to a texture and also get main memory access to the image bits. On the other hand, on some platforms all graphics buffer abstraction is completely hidden.</db:para>
<db:para><db:link xlink:href="qplatformgraphicsbuffer.xml">QPlatformGraphicsBuffer</db:link> is an abstraction of a single Graphics Buffer.</db:para>
<db:para>There is no public constructor nor any public factory function.</db:para>
<db:para><db:link xlink:href="qplatformgraphicsbuffer.xml">QPlatformGraphicsBuffer</db:link> is intended to be created by using platform specific APIs available from <db:link xlink:href="qtplatformheaders-module.xml">QtPlatformHeaders</db:link>, or there might be accessor functions similar to the accessor function that QPlatformBackingstore has.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AccessType-enum">
<db:title>enum QPlatformGraphicsBuffer::AccessType</db:title>
<db:bridgehead renderas="sect2">flags QPlatformGraphicsBuffer::AccessTypes</db:bridgehead>
<db:para>This enum describes the access that is desired or granted for the graphics buffer.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplatformgraphicsbuffer.xml">QPlatformGraphicsBuffer</db:link></db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplatformgraphicsbuffer.xml">QPlatformGraphicsBuffer</db:link></db:emphasis>::SWReadAccess</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplatformgraphicsbuffer.xml">QPlatformGraphicsBuffer</db:link></db:emphasis>::SWWriteAccess</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplatformgraphicsbuffer.xml">QPlatformGraphicsBuffer</db:link></db:emphasis>::TextureAccess</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplatformgraphicsbuffer.xml">QPlatformGraphicsBuffer</db:link></db:emphasis>::HWCompositor</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>AccessTypes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;AccessType&gt;. </db:code>It stores an OR combination of <db:code>AccessType</db:code> values.</db:para>
</db:section>
<db:section xml:id="Origin-enum">
<db:title>enum QPlatformGraphicsBuffer::Origin</db:title>
<db:para>This enum describes the origin of the content of the buffer.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplatformgraphicsbuffer.xml">QPlatformGraphicsBuffer</db:link></db:emphasis>::OriginTopLeft</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplatformgraphicsbuffer.xml">QPlatformGraphicsBuffer</db:link></db:emphasis>::OriginBottomLeft</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPlatformGraphicsBuffer">
<db:title>[protected] QPlatformGraphicsBuffer::QPlatformGraphicsBuffer(const QSize &amp;<db:emphasis>size</db:emphasis>, const QPixelFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Protected constructor to initialize the private members.</db:para>
<db:para><db:code role="parameter">size</db:code> is the size of the buffer. <db:code role="parameter">format</db:code> is the format of the buffer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">size()</db:link></db:member>
<db:member><db:link xlink:href="">format()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QPlatformGraphicsBuffer">
<db:title>[virtual noexcept] QPlatformGraphicsBuffer::~QPlatformGraphicsBuffer()</db:title>
<db:para>Virtual destructor.</db:para>
</db:section>
<db:section xml:id="bindToTexture">
<db:title>[virtual] bool QPlatformGraphicsBuffer::bindToTexture(const QRect &amp;<db:emphasis>rect</db:emphasis> = QRect()) const</db:title>
<db:para>Binds the content of this graphics buffer into the currently bound texture.</db:para>
<db:para>This function should fail for buffers not capable of locking to <db:link xlink:href="qplatformgraphicsbuffer.xml#AccessType-enum">TextureAccess</db:link>.</db:para>
<db:para><db:code role="parameter">rect</db:code> is the subrect which is desired to be bounded to the texture. This argument has a no less than semantic, meaning more (if not all) of the buffer can be bounded to the texture. An empty <db:link xlink:href="qrect.xml">QRect</db:link> is interpreted as entire buffer should be bound.</db:para>
<db:para>This function only supports binding buffers to the GL_TEXTURE_2D texture target.</db:para>
<db:para>Returns true on success, otherwise false.</db:para>
</db:section>
<db:section xml:id="byteCount">
<db:title>int QPlatformGraphicsBuffer::byteCount() const</db:title>
<db:para>Accessor for the length of the data buffer. This function is a convenience function multiplying height of buffer with <db:link xlink:href="qplatformgraphicsbuffer.xml#bytesPerLine">bytesPerLine</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplatformgraphicsbuffer.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qplatformgraphicsbuffer.xml#bytesPerLine">bytesPerLine</db:link>()</db:member>
<db:member><db:link xlink:href="">size()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bytesPerLine">
<db:title>[virtual] int QPlatformGraphicsBuffer::bytesPerLine() const</db:title>
<db:para>Accessor for bytes per line in the graphics buffer.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[virtual] uchar *QPlatformGraphicsBuffer::data()</db:title>
<db:para>Accessor for the bytes of the buffer. This function needs to be called on a buffer with <db:link xlink:href="qplatformgraphicsbuffer.xml#AccessType-enum">SWReadAccess</db:link> access lock. Behavior is undefined for modifying the memory returned when not having a <db:link xlink:href="qplatformgraphicsbuffer.xml#AccessType-enum">SWWriteAccess</db:link>.</db:para>
</db:section>
<db:section xml:id="data-1">
<db:title>[virtual] const uchar *QPlatformGraphicsBuffer::data() const</db:title>
<db:para>Accessor for the bytes of the buffer. This function needs to be called on a buffer with <db:link xlink:href="qplatformgraphicsbuffer.xml#AccessType-enum">SWReadAccess</db:link> access lock. Behavior is undefined for modifying the memory returned when not having a <db:link xlink:href="qplatformgraphicsbuffer.xml#AccessType-enum">SWWriteAccess</db:link>.</db:para>
</db:section>
<db:section xml:id="lock">
<db:title>bool QPlatformGraphicsBuffer::lock(QPlatformGraphicsBuffer::AccessTypes <db:emphasis>access</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis> = QRect())</db:title>
<db:para>Before the data can be retrieved or before a buffer can be bound to a texture it needs to be locked. This is a separate function call since this operation might be time consuming, and it would not be satisfactory to do it per function call.</db:para>
<db:para><db:code role="parameter">access</db:code> is the access type wanted.</db:para>
<db:para><db:code role="parameter">rect</db:code> is the subrect which is desired to be locked. This argument has a no less than semantic, meaning more (if not all) of the buffer can be locked. An empty <db:link xlink:href="qrect.xml">QRect</db:link> is interpreted as entire buffer should be locked.</db:para>
<db:para>Return true on successfully locking all <db:link xlink:href="qplatformgraphicsbuffer.xml#AccessType-enum">AccessTypes</db:link> specified <db:code role="parameter">access</db:code> otherwise returns false and no locks have been granted.</db:para>
</db:section>
<db:section xml:id="origin">
<db:title>[virtual] QPlatformGraphicsBuffer::Origin QPlatformGraphicsBuffer::origin() const</db:title>
<db:para>In origin of the content of the graphics buffer.</db:para>
<db:para>Default implementation is <db:link xlink:href="qplatformgraphicsbuffer.xml#Origin-enum">OriginTopLeft</db:link>, as this is the coordinate system default for Qt. However, for most regular OpenGL textures this will be <db:link xlink:href="qplatformgraphicsbuffer.xml#Origin-enum">OriginBottomLeft</db:link>.</db:para>
</db:section>
<db:section xml:id="unlock">
<db:title>void QPlatformGraphicsBuffer::unlock()</db:title>
<db:para>Unlocks the current buffer lock.</db:para>
<db:para>This function calls doUnlock, and then emits the unlocked signal with the <db:link xlink:href="qplatformgraphicsbuffer.xml#AccessType-enum">AccessTypes</db:link> from before doUnlock was called.</db:para>
</db:section>
</db:section>
</db:article>
