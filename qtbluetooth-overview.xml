<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Bluetooth Overview</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Qt Bluetooth API enables connectivity with other regular Bluetooth and Bluetooth Low Energy enabled devices.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>With the Qt Bluetooth API typical use cases are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Retrieve information about the local Bluetooth device.</db:para>
</db:listitem>
<db:listitem>
<db:para>Scan for other Bluetooth devices in range and retrieve information about them.</db:para>
</db:listitem>
<db:listitem>
<db:para>Push files to remote devices using the OBEX Object Push Profile (OPP)</db:para>
</db:listitem>
<db:listitem>
<db:para>Connect to remote devices through a RFCOMM channel using the Serial Port Profile (SPP).</db:para>
</db:listitem>
<db:listitem>
<db:para>Create a RFCOMM server that allows incoming connections using SPP.</db:para>
</db:listitem>
<db:listitem>
<db:para>Retrieve specification about Bluetooth Low Energy device.</db:para>
</db:listitem>
<db:listitem>
<db:para>Connect to Bluetooth Low Energy device.</db:para>
</db:listitem>
<db:listitem>
<db:para>Receive advertisement from Bluetooth Low Energy device.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Note that the Object Push Profile is not supported on Android and Windows.</db:para>
<db:note>
<db:para>Parts of RFCOMM functionality cannot be configured by Qt on Windows. A service's <db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">ServiceClassIds</db:link> and <db:link xlink:href="qbluetoothserviceinfo.xml#AttributeId-enum">ProtocolDescriptorList</db:link> are filled automatically. Therefore, registering a service with custom values for these fields might not yield the expected result on Windows.</db:para>
</db:note>
<db:note>
<db:para>The Received Signal Strength Indicator (RSSI), as well as the Manufacturer Specific Data advertised by Bluetooth LE devices are not supported by the Win32 backend. Also, it is only possible to find devices that have been previously paired through Windows Settings.</db:para>
</db:note>
<db:para>The following sections describe how to use the Qt Bluetooth C++ API classes for the above use cases.</db:para>
<db:section xml:id="retrieving-local-device-information">
<db:title>Retrieving Local Device Information</db:title>
<db:para>The Qt Bluetooth API has three main purposes. The first one is to obtain local and remote device information. The first steps in retrieving device information are to check if Bluetooth is available on the device and read the local device address and name. <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link> is the class that provides all of this information. Additionally you can use it to turn Bluetooth on/off, set the visibility of the device and determine the current connections.</db:para>
<db:programlisting language="cpp">QBluetoothLocalDevice localDevice;
QString localDeviceName;

// Check if Bluetooth is available on this device
if (localDevice.isValid()) {

    // Turn Bluetooth on
    localDevice.powerOn();

    // Read local device name
    localDeviceName = localDevice.name();

    // Make it visible to others
    localDevice.setHostMode(QBluetoothLocalDevice::HostDiscoverable);

    // Get connected devices
    QList&amp;lt;QBluetoothAddress&amp;gt; remotes;
    remotes = localDevice.connectedDevices();
}
</db:programlisting>
</db:section>
<db:section xml:id="scanning-for-bluetooth-devices">
<db:title>Scanning for Bluetooth Devices</db:title>
<db:para>Similar to the <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link>, the API offers <db:link xlink:href="qbluetoothdeviceinfo.xml">QBluetoothDeviceInfo</db:link> which provides similar information for remote devices. Although you can just create <db:link xlink:href="qbluetoothdeviceinfo.xml">QBluetoothDeviceInfo</db:link> objects on your own and fill them with data, the easier way is to use the <db:link xlink:href="qbluetoothdevicediscoveryagent.xml">QBluetoothDeviceDiscoveryAgent</db:link> to start an automated search for visible Bluetooth devices within the connectable range.</db:para>
<db:programlisting language="cpp">void MyClass::startDeviceDiscovery()
{

    // Create a discovery agent and connect to its signals
    QBluetoothDeviceDiscoveryAgent *discoveryAgent = new QBluetoothDeviceDiscoveryAgent(this);
    connect(discoveryAgent, SIGNAL(deviceDiscovered(QBluetoothDeviceInfo)),
            this, SLOT(deviceDiscovered(QBluetoothDeviceInfo)));

    // Start a discovery
    discoveryAgent-&amp;gt;start();

    //...
}

// In your local slot, read information about the found devices
void MyClass::deviceDiscovered(const QBluetoothDeviceInfo &amp;amp;device)
{
    qDebug() &amp;lt;&amp;lt; &quot;Found new device:&quot; &amp;lt;&amp;lt; device.name() &amp;lt;&amp;lt; '(' &amp;lt;&amp;lt; device.address().toString() &amp;lt;&amp;lt; ')';
}
</db:programlisting>
</db:section>
<db:section xml:id="exchanging-data-between-devices">
<db:title>Exchanging Data Between Devices</db:title>
<db:para>The more flexible approach for communication between two Bluetooth enabled devices, is to create a virtual serial port connection and freely exchange data over that connection. This can be done by the Serial Port Profile (SPP). The Serial Port Profile emulates a serial connection over the Bluetooth transport protocol RFCOMM.</db:para>
<db:para>To be able to receive incoming SPP connections, you need to listen to incoming connections using <db:link xlink:href="qbluetoothserver.xml">QBluetoothServer</db:link>.</db:para>
<db:programlisting language="cpp">rfcommServer = new QBluetoothServer(QBluetoothServiceInfo::RfcommProtocol, this);
connect(rfcommServer, &amp;amp;QBluetoothServer::newConnection,
        this, QOverload&amp;lt;&amp;gt;::of(&amp;amp;ChatServer::clientConnected));
bool result = rfcommServer-&amp;gt;listen(localAdapter);
if (!result) {
    qWarning() &amp;lt;&amp;lt; &quot;Cannot bind chat server to&quot; &amp;lt;&amp;lt; localAdapter.toString();
    return;
}
</db:programlisting>
<db:para>Connect to this server from another device playing the client role by using a <db:link xlink:href="qbluetoothsocket.xml">QBluetoothSocket</db:link>:</db:para>
<db:programlisting language="cpp">void ChatClient::startClient(const QBluetoothServiceInfo &amp;amp;remoteService)
{
    if (socket)
        return;

    // Connect to service
    socket = new QBluetoothSocket(QBluetoothServiceInfo::RfcommProtocol);
    qDebug() &amp;lt;&amp;lt; &quot;Create socket&quot;;
    socket-&amp;gt;connectToService(remoteService);
    qDebug() &amp;lt;&amp;lt; &quot;ConnectToService done&quot;;

    connect(socket, &amp;amp;QBluetoothSocket::readyRead, this, &amp;amp;ChatClient::readSocket);
    connect(socket, &amp;amp;QBluetoothSocket::connected, this, QOverload&amp;lt;&amp;gt;::of(&amp;amp;ChatClient::connected));
    connect(socket, &amp;amp;QBluetoothSocket::disconnected, this, &amp;amp;ChatClient::disconnected);
    connect(socket, &amp;amp;QBluetoothSocket::errorOccurred, this, &amp;amp;ChatClient::onSocketErrorOccurred);
}
</db:programlisting>
<db:para>Using such a connection allows to exchange any form of data in both directions. It is perfectly suited for gaming or for syncing the state between two instances of an application on two devices. For more detailed descriptions on how to configure the server and client, please refer to the detailed description sections in the <db:link xlink:href="qbluetoothserver.xml">QBluetoothServer</db:link> and <db:link xlink:href="qbluetoothsocket.xml">QBluetoothSocket</db:link> classes. A good example to start with SPP is the <db:link xlink:href="qtbluetooth-btchat-example.xml">Bluetooth Chat</db:link> example.</db:para>
</db:section>
<db:section xml:id="bluetooth-low-energy">
<db:title>Bluetooth Low Energy</db:title>
<db:para>Bluetooth Low Energy, also known as Bluetooth Smart, is a new technology enabling devices with low energy consumption to communicate with each other. More details about this technology and the related Qt APIs can be found in the <db:link xlink:href="qtbluetooth-le-overview.xml">Bluetooth Low Energy Overview</db:link>.</db:para>
</db:section>
</db:article>
