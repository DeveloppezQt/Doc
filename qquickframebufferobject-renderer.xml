<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Renderer Class</db:title>
<db:subtitle>QQuickFramebufferObject::Renderer</db:subtitle>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Renderer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qquickframebufferobject-renderer.xml">QQuickFramebufferObject::Renderer</db:link> class is used to implement the rendering logic of a <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link>.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="Renderer">
<db:title>[protected] Renderer::Renderer()</db:title>
<db:para>Constructs a new renderer.</db:para>
<db:para>This function is called during the scene graph sync phase when the GUI thread is blocked.</db:para>
</db:section>
<db:section xml:id="dtor.Renderer">
<db:title>[virtual noexcept protected] Renderer::~Renderer()</db:title>
<db:para>The Renderer is automatically deleted when the scene graph resources for the <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link> item is cleaned up.</db:para>
<db:para>This function is called on the rendering thread.</db:para>
</db:section>
<db:section xml:id="createFramebufferObject">
<db:title>[virtual protected] QOpenGLFramebufferObject *Renderer::createFramebufferObject(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>This function is called when a new FBO is needed. This happens on the initial frame. If QQuickFramebufferObject::textureFollowsItemSize is set to true, it is called again every time the dimensions of the item changes.</db:para>
<db:para>The returned FBO can have any attachment. If the <db:link xlink:href="qopenglframebufferobjectformat.xml">QOpenGLFramebufferObjectFormat</db:link> indicates that the FBO should be multisampled, the internal implementation of the Renderer will allocate a second FBO and blit the multisampled FBO into the FBO used to display the texture.</db:para>
<db:note>
<db:para>Some hardware has issues with small FBO sizes. <db:code role="parameter">size</db:code> takes that into account, so be cautious when overriding the size with a fixed size. A minimal size of 64x64 should always work.</db:para>
</db:note>
</db:section>
<db:section xml:id="framebufferObject">
<db:title>[protected] QOpenGLFramebufferObject *Renderer::framebufferObject() const</db:title>
<db:para>Returns the framebuffer object currently being rendered to.</db:para>
</db:section>
<db:section xml:id="invalidateFramebufferObject">
<db:title>[protected] void Renderer::invalidateFramebufferObject()</db:title>
<db:para>Call this function during <db:link xlink:href="qquickframebufferobject-renderer.xml#synchronize">synchronize</db:link>() to invalidate the current FBO. This will result in a new FBO being created with <db:link xlink:href="qquickframebufferobject-renderer.xml#createFramebufferObject">createFramebufferObject</db:link>().</db:para>
</db:section>
<db:section xml:id="render">
<db:title>[pure virtual protected] void Renderer::render()</db:title>
<db:para>This function is called when the FBO should be rendered into. The framebuffer is bound at this point and the <db:code>glViewport</db:code> has been set up to match the FBO size.</db:para>
<db:para>The FBO will be automatically unbound after the function returns.</db:para>
</db:section>
<db:section xml:id="synchronize">
<db:title>[virtual protected] void Renderer::synchronize(QQuickFramebufferObject *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This function is called as a result of <db:link xlink:href="qquickitem.xml#update">QQuickFramebufferObject::update</db:link>().</db:para>
<db:para>Use this function to update the renderer with changes that have occurred in the item. <db:code role="parameter">item</db:code> is the item that instantiated this renderer. The function is called once before the FBO is created.</db:para>
<db:para><db:emphasis>For instance, if the item has a color property which is controlled by QML, one should call <db:link xlink:href="qquickitem.xml#update">QQuickFramebufferObject::update</db:link>() and use synchronize() to copy the new color into the renderer so that it can be used to render the next frame.</db:emphasis></db:para>
<db:para>This function is the only place when it is safe for the renderer and the item to read and write each others members.</db:para>
</db:section>
<db:section xml:id="update">
<db:title>[protected] void Renderer::update()</db:title>
<db:para>Call this function when the FBO should be rendered again.</db:para>
<db:para>This function can be called from <db:link xlink:href="qquickframebufferobject-renderer.xml#render">render</db:link>() to force the FBO to be rendered again before the next frame.</db:para>
<db:note>
<db:para>This function should be used from inside the renderer. To update the item on the GUI thread, use <db:link xlink:href="qquickitem.xml#update">QQuickFramebufferObject::update</db:link>().</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
