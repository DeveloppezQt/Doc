<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Syntax Basics</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Description of the basics of QML syntax.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>QML is a multi-paradigm language that enables objects to be defined in terms of their attributes and how they relate and respond to changes in other objects. In contrast to purely imperative code, where changes in attributes and behavior are expressed through a series of statements that are processed step by step, QML's declarative syntax integrates attribute and behavioral changes directly into the definitions of individual objects. These attribute definitions can then include imperative code, in the case where complex custom application behavior is needed.</db:para>
<db:para>QML source code is generally loaded by the engine through QML <db:emphasis>documents</db:emphasis>, which are standalone documents of QML code. These can be used to define <db:link xlink:href="qtqml-typesystem-objecttypes.xml">QML object types</db:link> that can then be reused throughout an application. Note that type names must begin with an uppercase letter in order to be declared as QML object types in a QML file.</db:para>
<db:section xml:id="import-statements">
<db:title>Import Statements</db:title>
<db:para>A QML document may have one or more imports at the top of the file. An import can be any one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>a versioned namespace into which types have been registered (e.g., by a plugin)</db:para>
</db:listitem>
<db:listitem>
<db:para>a relative directory which contains type-definitions as QML documents</db:para>
</db:listitem>
<db:listitem>
<db:para>a JavaScript file</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>JavaScript file imports must be qualified when imported, so that the properties and methods they provide can be accessed.</db:para>
<db:para>The generic form of the various imports are as follows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>import Namespace VersionMajor.VersionMinor</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>import Namespace VersionMajor.VersionMinor as SingletonTypeIdentifier</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>import &quot;directory&quot;</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>import &quot;file.js&quot; as ScriptIdentifier</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Examples:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>import <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> 2.0</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>import <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.LocalStorage 2.0 as Database</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>import &quot;../privateComponents&quot;</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>import &quot;somefile.js&quot; as Script</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Please see the <db:link xlink:href="qtqml-syntax-imports.xml">QML Syntax - Import Statements</db:link> documentation for in-depth information about QML imports.</db:para>
<db:anchor xml:id="qml-object-declarations"/>
</db:section>
<db:section xml:id="object-declarations">
<db:title>Object Declarations</db:title>
<db:para>Syntactically, a block of QML code defines a tree of QML objects to be created. Objects are defined using <db:emphasis>object declarations</db:emphasis> that describe the type of object to be created as well as the attributes that are to be given to the object. Each object may also declare child objects using nested object declarations.</db:para>
<db:para>An object declaration consists of the name of its object type, followed by a set of curly braces. All attributes and child objects are then declared within these braces.</db:para>
<db:para>Here is a simple object declaration:</db:para>
<db:programlisting language="qml">Rectangle {
    width: 100
    height: 100
    color: &quot;red&quot;
}
</db:programlisting>
<db:para>This declares an object of type <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>, followed by a set of curly braces that encompasses the attributes defined for that object. The <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type is a type made available by the QtQuick module, and the attributes defined in this case are the values of the rectangle's width, height and color properties. (These are properties made available by the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type, as described in the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> documentation.)</db:para>
<db:para>The above object can be loaded by the engine if it is part of a <db:link xlink:href="qtqml-documents-topic.xml">QML document</db:link>. That is, if the source code is complemented with <db:emphasis>import</db:emphasis> statement that imports the QtQuick module (to make the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type available), as below:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 100
    height: 100
    color: &quot;red&quot;
}
</db:programlisting>
<db:para>When placed into a .qml file and loaded by the QML engine, the above code creates a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> object using the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type supplied by the QtQuick module:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtqml-syntax-basics-object-declaration.png"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para>If an object definition only has a small number of properties, it can be written on a single line like this, with the properties separated by semi-colons:</db:para>
</db:note>
<db:programlisting language="qml">Rectangle { width: 100; height: 100; color: &quot;red&quot; }
</db:programlisting>
<db:para>Obviously, the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> object declared in this example is very simple indeed, as it defines nothing more than a few property values. To create more useful objects, an object declaration may define many other types of attributes: these are discussed in the <db:link xlink:href="qtqml-syntax-objectattributes.xml">QML Object Attributes</db:link> documentation. Additionally, an object declaration may define child objects, as discussed below.</db:para>
<db:section xml:id="child-objects">
<db:title>Child Objects</db:title>
<db:para>Any object declaration can define child objects through nested object declarations. In this way, <db:emphasis role="bold">any object declaration implicitly declares an object tree that may contain any number of child objects</db:emphasis>.</db:para>
<db:para>For example, the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> object declaration below includes a <db:link xlink:href="qml-qtquick-gradient.xml">Gradient</db:link> object declaration, which in turn contains two <db:link xlink:href="qml-qtquick-gradientstop.xml">GradientStop</db:link> declarations:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 100
    height: 100

    gradient: Gradient {
        GradientStop { position: 0.0; color: &quot;yellow&quot; }
        GradientStop { position: 1.0; color: &quot;green&quot; }
    }
}
</db:programlisting>
<db:para>When this code is loaded by the engine, it creates an object tree with a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> object at the root; this object has a <db:link xlink:href="qml-qtquick-gradient.xml">Gradient</db:link> child object, which in turn has two <db:link xlink:href="qml-qtquick-gradientstop.xml">GradientStop</db:link> children.</db:para>
<db:para>Note, however, that this is a parent-child relationship in the context of the QML object tree, not in the context of the visual scene. The concept of a parent-child relationship in a visual scene is provided by the <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> type from the QtQuick module, which is the base type for most QML types, as most QML objects are intended to be visually rendered. For example, <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> and <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> are both <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>-based types, and below, a <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> object has been declared as a visual child of a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> object:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 200
    height: 200
    color: &quot;red&quot;

    Text {
        anchors.centerIn: parent
        text: &quot;Hello, QML!&quot;
    }
}
</db:programlisting>
<db:para>When the <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> object refers to its <db:link xlink:href="qml-qtquick-item.xml#parent-prop">parent</db:link> value in the above code, it is referring to its <db:emphasis>visual parent</db:emphasis>, not the parent in the object tree. In this case, they are one and the same: the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> object is the parent of the <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> object in both the context of the QML object tree as well as the context of the visual scene. However, while the <db:link xlink:href="qml-qtquick-item.xml#parent-prop">parent</db:link> property can be modified to change the visual parent, the parent of an object in the context of the object tree cannot be changed from QML.</db:para>
<db:para>(Additionally, notice that the <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> object has been declared without assigning it to a property of the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>, unlike the earlier example which assigned a <db:link xlink:href="qml-qtquick-gradient.xml">Gradient</db:link> object to the rectangle's gradient property. This is because the <db:link xlink:href="qml-qtquick-item.xml#children-prop">children</db:link> property of <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> has been set as the type's <db:link xlink:href="qtqml-syntax-objectattributes.xml#default-properties">default property</db:link> to enable this more convenient syntax.)</db:para>
<db:para>See the <db:link xlink:href="qtquick-visualcanvas-visualparent.xml">visual parent</db:link> documentation for more information on the concept of visual parenting with the <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> type.</db:para>
</db:section>
</db:section>
<db:section xml:id="comments">
<db:title>Comments</db:title>
<db:para>The syntax for commenting in QML is similar to that of JavaScript:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Single line comments start with // and finish at the end of the line.</db:para>
</db:listitem>
<db:listitem>
<db:para>Multiline comments start with /* and finish with */</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="qml">Text {
    text: &quot;Hello world!&quot;    //a basic greeting
    /*
        We want this text to stand out from the rest so
        we give it a large size and different font.
     */
    font.family: &quot;Helvetica&quot;
    font.pointSize: 24
}
</db:programlisting>
<db:para>Comments are ignored by the engine when processing QML code. They are useful for explaining what a section of code is doing, whether for reference at a later date or for explaining the implementation to others.</db:para>
<db:para>Comments can also be used to prevent the execution of code, which is sometimes useful for tracking down problems.</db:para>
<db:programlisting language="qml">Text {
    text: &quot;Hello world!&quot;
    //opacity: 0.5
}
</db:programlisting>
<db:para>In the above example, the <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> object will have normal opacity, since the line opacity: 0.5 has been turned into a comment.</db:para>
</db:section>
</db:article>
