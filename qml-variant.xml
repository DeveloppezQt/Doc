<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>variant QML Value Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>a generic property type.</db:para>
<db:para><db:emphasis role="bold">This type is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">This type is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The variant type is a generic property type. It is obsolete and exists only to support old applications; new applications should use <db:link xlink:href="qml-var.xml">var</db:link> type properties instead.</db:para>
<db:para>A variant type property can hold any of the <db:link xlink:href="qtqml-typesystem-basictypes.xml">basic type</db:link> values:</db:para>
<db:programlisting language="qml">Item {
    property variant aNumber: 100
    property variant aString: &quot;Hello world!&quot;
    property variant aBool: false
}
</db:programlisting>
<db:para>When integrating with C++, note that any <db:link xlink:href="qvariant.xml">QVariant</db:link> value <db:link xlink:href="qtqml-cppintegration-data.xml">passed into QML from C++</db:link> is automatically converted into a variant value, and vice-versa.</db:para>
<db:section xml:id="using-scarce-resources-with-the-variant-type">
<db:title>Using Scarce Resources with the variant Type</db:title>
<db:para>A variant type property can also hold an image or pixmap. A variant which contains a QPixmap or QImage is known as a &quot;scarce resource&quot; and the declarative engine will attempt to automatically release such resources after evaluation of any JavaScript expression which requires one to be copied has completed.</db:para>
<db:para>Clients may explicitly release such a scarce resource by calling the &quot;destroy&quot; method on the variant property from within JavaScript. They may also explicitly preserve the scarce resource by calling the &quot;preserve&quot; method on the variant property from within JavaScript.</db:para>
</db:section>
<db:section xml:id="storing-arrays-and-objects">
<db:title>Storing Arrays and Objects</db:title>
<db:para>The variant type can also hold:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>An array of <db:link xlink:href="qtqml-typesystem-basictypes.xml">basic type</db:link> values</db:para>
</db:listitem>
<db:listitem>
<db:para>A map of key-value pairs with <db:link xlink:href="qtqml-typesystem-basictypes.xml">basic-type</db:link> values</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, below is an items array and an attributes map. Their contents can be examined using JavaScript for loops. Individual array values are accessible by index, and individual map values are accessible by key:</db:para>
<db:programlisting language="qml">Item {
    property variant items: [1, 2, 3, &quot;four&quot;, &quot;five&quot;]
    property variant attributes: { 'color': 'red', 'width': 100 }

    Component.onCompleted: {
        for (var i = 0; i &lt; items.length; i++)
            console.log(items[i])

        for (var prop in attributes)
            console.log(prop, &quot;=&quot;, attributes[prop])
    }
}
</db:programlisting>
<db:para>While this is a convenient way to store array and map-type values, you must be aware that the items and attributes properties above are <db:emphasis>not</db:emphasis> QML objects (and certainly not JavaScript object either) and the key-value pairs in attributes are <db:emphasis>not</db:emphasis> QML properties. Rather, the items property holds an array of values, and attributes holds a set of key-value pairs. Since they are stored as a set of values, instead of as an object, their contents <db:emphasis>cannot</db:emphasis> be modified individually:</db:para>
<db:programlisting language="qml">Item {
    property variant items: [1, 2, 3, &quot;four&quot;, &quot;five&quot;]
    property variant attributes: { 'color': 'red', 'width': 100 }

    Component.onCompleted: {
        items[0] = 10
        console.log(items[0])     // This will still be '1'!
        attributes.color = 'blue'
        console.log(attributes.color)     // This will still be 'red'!
    }
}
</db:programlisting>
<db:para>Since it is not possible to individually add or remove items from a list or object stored in a variant, the only way to modify its contents is to reassign a new value. However, this is not efficient, as it causes the value to be serialized and deserialized.</db:para>
<db:para>Additionally, since items and attributes are not QML objects, changing their individual values do not trigger property change notifications. If the above example had onNumberChanged or onAnimalChanged signal handlers, they would not have been called. If, however, the items or attributes properties themselves were reassigned to different values, then such handlers would be called.</db:para>
<db:para>JavaScript programmers should also note that when a JavaScript object is copied to an array or map property, the <db:emphasis>contents</db:emphasis> of the object (that is, its key-value properties) are copied, rather than the object itself. The property does not hold a reference to the original JavaScript object, and extra data such as the object's JavaScript prototype chain is also lost in the process.</db:para>
<db:para>This basic type is provided by the QML language.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-typesystem-basictypes.xml">QML Basic Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
