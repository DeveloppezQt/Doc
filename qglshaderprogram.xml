<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGLShaderProgram Class</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qglshaderprogram.xml">QGLShaderProgram</db:link> class allows OpenGL shader programs to be linked and used.</db:para>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGLShaderProgram</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opengl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGLShaderProgram is part of <db:simplelist><db:member>painting-3D</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>This class supports shader programs written in the OpenGL Shading Language (GLSL) and in the OpenGL/ES Shading Language (GLSL/ES).</db:para>
<db:para><db:link xlink:href="qglshader.xml">QGLShader</db:link> and <db:link xlink:href="qglshaderprogram.xml">QGLShaderProgram</db:link> shelter the programmer from the details of compiling and linking vertex and fragment shaders.</db:para>
<db:para>The following example creates a vertex shader program using the supplied source <db:code>code</db:code>. Once compiled and linked, the shader program is activated in the current <db:link xlink:href="qglcontext.xml">QGLContext</db:link> by calling <db:link xlink:href="qglshaderprogram.xml#bind">QGLShaderProgram::bind</db:link>():</db:para>
<db:programlisting language="cpp">QGLShader shader(QGLShader::Vertex);
shader.compileSourceCode(code);

QGLShaderProgram program(context);
program.addShader(shader);
program.link();

program.bind();
</db:programlisting>
</db:section>
<db:section xml:id="writing-portable-shaders">
<db:title>Writing Portable Shaders</db:title>
<db:para>Shader programs can be difficult to reuse across OpenGL implementations because of varying levels of support for standard vertex attributes and uniform variables. In particular, GLSL/ES lacks all of the standard variables that are present on desktop OpenGL systems: <db:code>gl_Vertex</db:code>, <db:code>gl_Normal</db:code>, <db:code>gl_Color</db:code>, and so on. Desktop OpenGL lacks the variable qualifiers <db:code>highp</db:code>, <db:code>mediump</db:code>, and <db:code>lowp</db:code>.</db:para>
<db:para>The <db:link xlink:href="qglshaderprogram.xml">QGLShaderProgram</db:link> class makes the process of writing portable shaders easier by prefixing all shader programs with the following lines on desktop OpenGL:</db:para>
<db:programlisting language="cpp">#define highp
#define mediump
#define lowp
</db:programlisting>
<db:para>This makes it possible to run most GLSL/ES shader programs on desktop systems. The programmer should restrict themselves to just features that are present in GLSL/ES, and avoid standard variable names that only work on the desktop.</db:para>
</db:section>
<db:section xml:id="simple-shader-example">
<db:title>Simple Shader Example</db:title>
<db:programlisting language="cpp">program.addShaderFromSourceCode(QGLShader::Vertex,
    &quot;attribute highp vec4 vertex;\n&quot;
    &quot;uniform highp mat4 matrix;\n&quot;
    &quot;void main(void)\n&quot;
    &quot;{\n&quot;
    &quot;   gl_Position = matrix * vertex;\n&quot;
    &quot;}&quot;);
program.addShaderFromSourceCode(QGLShader::Fragment,
    &quot;uniform mediump vec4 color;\n&quot;
    &quot;void main(void)\n&quot;
    &quot;{\n&quot;
    &quot;   gl_FragColor = color;\n&quot;
    &quot;}&quot;);
program.link();
program.bind();

int vertexLocation = program.attributeLocation(&quot;vertex&quot;);
int matrixLocation = program.uniformLocation(&quot;matrix&quot;);
int colorLocation = program.uniformLocation(&quot;color&quot;);
</db:programlisting>
<db:para>With the above shader program active, we can draw a green triangle as follows:</db:para>
<db:programlisting language="cpp">static GLfloat const triangleVertices[] = {
    60.0f,  10.0f,  0.0f,
    110.0f, 110.0f, 0.0f,
    10.0f,  110.0f, 0.0f
};

QColor color(0, 255, 0, 255);

QMatrix4x4 pmvMatrix;
pmvMatrix.ortho(rect());

program.enableAttributeArray(vertexLocation);
program.setAttributeArray(vertexLocation, triangleVertices, 3);
program.setUniformValue(matrixLocation, pmvMatrix);
program.setUniformValue(colorLocation, color);

glDrawArrays(GL_TRIANGLES, 0, 3);

program.disableAttributeArray(vertexLocation);
</db:programlisting>
</db:section>
<db:section xml:id="binary-shaders-and-programs">
<db:title>Binary Shaders and Programs</db:title>
<db:para>Binary shaders may be specified using <db:code>glShaderBinary()</db:code> on the return value from <db:link xlink:href="qglshader.xml#shaderId">QGLShader::shaderId</db:link>(). The <db:link xlink:href="qglshader.xml">QGLShader</db:link> instance containing the binary can then be added to the shader program with <db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>() and linked in the usual fashion with <db:link xlink:href="qglshaderprogram.xml#link">link</db:link>().</db:para>
<db:para>Binary programs may be specified using <db:code>glProgramBinaryOES()</db:code> on the return value from <db:link xlink:href="qglshaderprogram.xml#programId">programId</db:link>(). Then the application should call <db:link xlink:href="qglshaderprogram.xml#link">link</db:link>(), which will notice that the program has already been specified and linked, allowing other operations to be performed on the shader program.</db:para>
<db:note>
<db:para>This class has been deprecated in favor of <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link>.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshader.xml">QGLShader</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGLShaderProgram">
<db:title>[explicit] QGLShaderProgram::QGLShaderProgram(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGLShaderProgram</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLShaderProgram(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new shader program and attaches it to <db:code role="parameter">parent</db:code>. The program will be invalid until <db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>() is called.</db:para>
<db:para>The shader program will be associated with the current QGLContext.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGLShaderProgram-1">
<db:title>[explicit] QGLShaderProgram::QGLShaderProgram(const QGLContext *<db:emphasis>context</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGLShaderProgram</db:methodname>
<db:methodparam>
<db:type>const QGLContext *</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGLShaderProgram(const QGLContext *context, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new shader program and attaches it to <db:code role="parameter">parent</db:code>. The program will be invalid until <db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>() is called.</db:para>
<db:para>The shader program will be associated with <db:code role="parameter">context</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QGLShaderProgram">
<db:title>[virtual] QGLShaderProgram::~QGLShaderProgram()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGLShaderProgram</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGLShaderProgram()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Deletes this shader program.</db:para>
</db:section>
<db:section xml:id="addShader">
<db:title>bool QGLShaderProgram::addShader(QGLShader *<db:emphasis>shader</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addShader</db:methodname>
<db:methodparam>
<db:type>QGLShader *</db:type>
<db:parameter>shader</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addShader(QGLShader *shader)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a compiled <db:code role="parameter">shader</db:code> to this shader program. Returns <db:code>true</db:code> if the shader could be added, or false otherwise.</db:para>
<db:para>Ownership of the <db:code role="parameter">shader</db:code> object remains with the caller. It will not be deleted when this <db:link xlink:href="qglshaderprogram.xml" role="deprecated">QGLShaderProgram</db:link> instance is deleted. This allows the caller to add the same shader to multiple shader programs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#addShaderFromSourceCode">addShaderFromSourceCode</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#addShaderFromSourceFile">addShaderFromSourceFile</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#removeShader">removeShader</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#link">link</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#removeAllShaders">removeAllShaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addShaderFromSourceCode">
<db:title>bool QGLShaderProgram::addShaderFromSourceCode(QGLShader::ShaderType <db:emphasis>type</db:emphasis>, const char *<db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addShaderFromSourceCode</db:methodname>
<db:methodparam>
<db:type>QGLShader::ShaderType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addShaderFromSourceCode(QGLShader::ShaderType type, const char *source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compiles <db:code role="parameter">source</db:code> as a shader of the specified <db:code role="parameter">type</db:code> and adds it to this shader program. Returns <db:code>true</db:code> if compilation was successful, false otherwise. The compilation errors and warnings will be made available via <db:link xlink:href="qglshaderprogram.xml#log">log</db:link>().</db:para>
<db:para>This function is intended to be a short-cut for quickly adding vertex and fragment shaders to a shader program without creating an instance of QGLShader first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#addShaderFromSourceFile">addShaderFromSourceFile</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#removeShader">removeShader</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#link">link</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#log">log</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#removeAllShaders">removeAllShaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addShaderFromSourceCode-1">
<db:title>bool QGLShaderProgram::addShaderFromSourceCode(QGLShader::ShaderType <db:emphasis>type</db:emphasis>, const QByteArray &amp;<db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addShaderFromSourceCode</db:methodname>
<db:methodparam>
<db:type>QGLShader::ShaderType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addShaderFromSourceCode(QGLShader::ShaderType type, const QByteArray &amp;source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Compiles <db:code role="parameter">source</db:code> as a shader of the specified <db:code role="parameter">type</db:code> and adds it to this shader program. Returns <db:code>true</db:code> if compilation was successful, false otherwise. The compilation errors and warnings will be made available via <db:link xlink:href="qglshaderprogram.xml#log">log</db:link>().</db:para>
<db:para>This function is intended to be a short-cut for quickly adding vertex and fragment shaders to a shader program without creating an instance of QGLShader first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#addShaderFromSourceFile">addShaderFromSourceFile</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#removeShader">removeShader</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#link">link</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#log">log</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#removeAllShaders">removeAllShaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addShaderFromSourceCode-2">
<db:title>bool QGLShaderProgram::addShaderFromSourceCode(QGLShader::ShaderType <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addShaderFromSourceCode</db:methodname>
<db:methodparam>
<db:type>QGLShader::ShaderType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addShaderFromSourceCode(QGLShader::ShaderType type, const QString &amp;source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Compiles <db:code role="parameter">source</db:code> as a shader of the specified <db:code role="parameter">type</db:code> and adds it to this shader program. Returns <db:code>true</db:code> if compilation was successful, false otherwise. The compilation errors and warnings will be made available via <db:link xlink:href="qglshaderprogram.xml#log">log</db:link>().</db:para>
<db:para>This function is intended to be a short-cut for quickly adding vertex and fragment shaders to a shader program without creating an instance of QGLShader first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#addShaderFromSourceFile">addShaderFromSourceFile</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#removeShader">removeShader</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#link">link</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#log">log</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#removeAllShaders">removeAllShaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addShaderFromSourceFile">
<db:title>bool QGLShaderProgram::addShaderFromSourceFile(QGLShader::ShaderType <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addShaderFromSourceFile</db:methodname>
<db:methodparam>
<db:type>QGLShader::ShaderType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addShaderFromSourceFile(QGLShader::ShaderType type, const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compiles the contents of <db:code role="parameter">fileName</db:code> as a shader of the specified <db:code role="parameter">type</db:code> and adds it to this shader program. Returns <db:code>true</db:code> if compilation was successful, false otherwise. The compilation errors and warnings will be made available via <db:link xlink:href="qglshaderprogram.xml#log">log</db:link>().</db:para>
<db:para>This function is intended to be a short-cut for quickly adding vertex and fragment shaders to a shader program without creating an instance of QGLShader first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#addShaderFromSourceCode">addShaderFromSourceCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attributeLocation">
<db:title>int QGLShaderProgram::attributeLocation(const char *<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>attributeLocation</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int attributeLocation(const char *name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the location of the attribute <db:code role="parameter">name</db:code> within this shader program's parameter list. Returns -1 if <db:code role="parameter">name</db:code> is not a valid attribute for this shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#uniformLocation">uniformLocation</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#bindAttributeLocation">bindAttributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attributeLocation-1">
<db:title>int QGLShaderProgram::attributeLocation(const QByteArray &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>attributeLocation</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int attributeLocation(const QByteArray &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the location of the attribute <db:code role="parameter">name</db:code> within this shader program's parameter list. Returns -1 if <db:code role="parameter">name</db:code> is not a valid attribute for this shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#uniformLocation">uniformLocation</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#bindAttributeLocation">bindAttributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attributeLocation-2">
<db:title>int QGLShaderProgram::attributeLocation(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>attributeLocation</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">int attributeLocation(const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the location of the attribute <db:code role="parameter">name</db:code> within this shader program's parameter list. Returns -1 if <db:code role="parameter">name</db:code> is not a valid attribute for this shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#uniformLocation">uniformLocation</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#bindAttributeLocation">bindAttributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bind">
<db:title>bool QGLShaderProgram::bind()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>bind</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool bind()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Binds this shader program to the active QGLContext and makes it the current shader program. Any previously bound shader program is released. This is equivalent to calling <db:code>glUseProgram()</db:code> on <db:link xlink:href="qglshaderprogram.xml#programId">programId</db:link>(). Returns <db:code>true</db:code> if the program was successfully bound; false otherwise. If the shader program has not yet been linked, or it needs to be re-linked, this function will call <db:link xlink:href="qglshaderprogram.xml#link">link</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#link">link</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#release">release</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bindAttributeLocation">
<db:title>void QGLShaderProgram::bindAttributeLocation(const char *<db:emphasis>name</db:emphasis>, int <db:emphasis>location</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bindAttributeLocation</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void bindAttributeLocation(const char *name, int location)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Binds the attribute <db:code role="parameter">name</db:code> to the specified <db:code role="parameter">location</db:code>. This function can be called before or after the program has been linked. Any attributes that have not been explicitly bound when the program is linked will be assigned locations automatically.</db:para>
<db:para>When this function is called after the program has been linked, the program will need to be relinked for the change to take effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#attributeLocation">attributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bindAttributeLocation-1">
<db:title>void QGLShaderProgram::bindAttributeLocation(const QByteArray &amp;<db:emphasis>name</db:emphasis>, int <db:emphasis>location</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bindAttributeLocation</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void bindAttributeLocation(const QByteArray &amp;name, int location)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Binds the attribute <db:code role="parameter">name</db:code> to the specified <db:code role="parameter">location</db:code>. This function can be called before or after the program has been linked. Any attributes that have not been explicitly bound when the program is linked will be assigned locations automatically.</db:para>
<db:para>When this function is called after the program has been linked, the program will need to be relinked for the change to take effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#attributeLocation">attributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bindAttributeLocation-2">
<db:title>void QGLShaderProgram::bindAttributeLocation(const QString &amp;<db:emphasis>name</db:emphasis>, int <db:emphasis>location</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bindAttributeLocation</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void bindAttributeLocation(const QString &amp;name, int location)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Binds the attribute <db:code role="parameter">name</db:code> to the specified <db:code role="parameter">location</db:code>. This function can be called before or after the program has been linked. Any attributes that have not been explicitly bound when the program is linked will be assigned locations automatically.</db:para>
<db:para>When this function is called after the program has been linked, the program will need to be relinked for the change to take effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#attributeLocation">attributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disableAttributeArray">
<db:title>void QGLShaderProgram::disableAttributeArray(int <db:emphasis>location</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>disableAttributeArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void disableAttributeArray(int location)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disables the vertex array at <db:code role="parameter">location</db:code> in this shader program that was enabled by a previous call to <db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disableAttributeArray-1">
<db:title>void QGLShaderProgram::disableAttributeArray(const char *<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>disableAttributeArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void disableAttributeArray(const char *name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Disables the vertex array called <db:code role="parameter">name</db:code> in this shader program that was enabled by a previous call to <db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enableAttributeArray">
<db:title>void QGLShaderProgram::enableAttributeArray(int <db:emphasis>location</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>enableAttributeArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void enableAttributeArray(int location)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables the vertex array at <db:code role="parameter">location</db:code> in this shader program so that the value set by <db:link xlink:href="qglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>() on <db:code role="parameter">location</db:code> will be used by the shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enableAttributeArray-1">
<db:title>void QGLShaderProgram::enableAttributeArray(const char *<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>enableAttributeArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void enableAttributeArray(const char *name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Enables the vertex array called <db:code role="parameter">name</db:code> in this shader program so that the value set by <db:link xlink:href="qglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>() on <db:code role="parameter">name</db:code> will be used by the shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="geometryInputType">
<db:title>[since 4.7] GLenum QGLShaderProgram::geometryInputType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLenum</db:type>
<db:methodname>geometryInputType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLenum geometryInputType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the geometry shader input type, if active.</db:para>
<db:para>This parameter takes effect the next time the program is linked.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setGeometryInputType">setGeometryInputType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="geometryOutputType">
<db:title>[since 4.7] GLenum QGLShaderProgram::geometryOutputType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLenum</db:type>
<db:methodname>geometryOutputType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLenum geometryOutputType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the geometry shader output type, if active.</db:para>
<db:para>This parameter takes effect the next time the program is linked.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setGeometryOutputType">setGeometryOutputType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="geometryOutputVertexCount">
<db:title>[since 4.7] int QGLShaderProgram::geometryOutputVertexCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>geometryOutputVertexCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int geometryOutputVertexCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum number of vertices the current geometry shader program will produce, if active.</db:para>
<db:para>This parameter takes effect the ntext time the program is linked.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setGeometryOutputVertexCount">setGeometryOutputVertexCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasOpenGLShaderPrograms">
<db:title>[static] bool QGLShaderProgram::hasOpenGLShaderPrograms(const QGLContext *<db:emphasis>context</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasOpenGLShaderPrograms</db:methodname>
<db:methodparam>
<db:type>const QGLContext *</db:type>
<db:parameter>context</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasOpenGLShaderPrograms(const QGLContext *context)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if shader programs written in the OpenGL Shading Language (GLSL) are supported on this system; false otherwise.</db:para>
<db:para>The <db:code role="parameter">context</db:code> is used to resolve the GLSL extensions. If <db:code role="parameter">context</db:code> is null, then <db:link xlink:href="qglcontext.xml#currentContext">QGLContext::currentContext</db:link>() is used.</db:para>
</db:section>
<db:section xml:id="isLinked">
<db:title>bool QGLShaderProgram::isLinked() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLinked</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLinked() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this shader program has been linked; false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#link">link</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="link">
<db:title>[virtual] bool QGLShaderProgram::link()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>link</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool link()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Links together the shaders that were added to this program with <db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>(). Returns <db:code>true</db:code> if the link was successful or false otherwise. If the link failed, the error messages can be retrieved with <db:link xlink:href="qglshaderprogram.xml#log">log</db:link>().</db:para>
<db:para>Subclasses can override this function to initialize attributes and uniform variables for use in specific shader programs.</db:para>
<db:para>If the shader program was already linked, calling this function again will force it to be re-linked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#log">log</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="log">
<db:title>QString QGLShaderProgram::log() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>log</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString log() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the errors and warnings that occurred during the last <db:link xlink:href="qglshaderprogram.xml#link">link</db:link>() or <db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>() with explicitly specified source code.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#link">link</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maxGeometryOutputVertices">
<db:title>[since 4.7] int QGLShaderProgram::maxGeometryOutputVertices() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maxGeometryOutputVertices</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int maxGeometryOutputVertices() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hardware limit for how many vertices a geometry shader can output.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setGeometryOutputVertexCount">setGeometryOutputVertexCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="programId">
<db:title>GLuint QGLShaderProgram::programId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLuint</db:type>
<db:methodname>programId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint programId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the OpenGL identifier associated with this shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshader.xml#shaderId">QGLShader::shaderId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="release">
<db:title>void QGLShaderProgram::release()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>release</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void release()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the active shader program from the current QGLContext. This is equivalent to calling <db:code>glUseProgram(0)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#bind">bind</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAllShaders">
<db:title>void QGLShaderProgram::removeAllShaders()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeAllShaders</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeAllShaders()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all of the shaders that were added to this program previously. The QGLShader objects for the shaders will not be deleted if they were constructed externally. QGLShader objects that are constructed internally by <db:link xlink:href="qglshaderprogram.xml" role="deprecated">QGLShaderProgram</db:link> will be deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#removeShader">removeShader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeShader">
<db:title>void QGLShaderProgram::removeShader(QGLShader *<db:emphasis>shader</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeShader</db:methodname>
<db:methodparam>
<db:type>QGLShader *</db:type>
<db:parameter>shader</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeShader(QGLShader *shader)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">shader</db:code> from this shader program. The object is not deleted.</db:para>
<db:para>The shader program must be valid in the current QGLContext.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#link">link</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#removeAllShaders">removeAllShaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray">
<db:title>void QGLShaderProgram::setAttributeArray(int <db:emphasis>location</db:emphasis>, const GLfloat *<db:emphasis>values</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLfloat *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>tupleSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stride</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeArray(int location, const GLfloat *values, int tupleSize, int stride)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets an array of vertex <db:code role="parameter">values</db:code> on the attribute at <db:code role="parameter">location</db:code> in this shader program. The <db:code role="parameter">tupleSize</db:code> indicates the number of components per vertex (1, 2, 3, or 4), and the <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">location</db:code>. Otherwise the value specified with <db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">location</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-1">
<db:title>void QGLShaderProgram::setAttributeArray(int <db:emphasis>location</db:emphasis>, const QVector2D *<db:emphasis>values</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector2D *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stride</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeArray(int location, const QVector2D *values, int stride)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets an array of 2D vertex <db:code role="parameter">values</db:code> on the attribute at <db:code role="parameter">location</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">location</db:code>. Otherwise the value specified with <db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">location</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-2">
<db:title>void QGLShaderProgram::setAttributeArray(int <db:emphasis>location</db:emphasis>, const QVector3D *<db:emphasis>values</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stride</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeArray(int location, const QVector3D *values, int stride)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets an array of 3D vertex <db:code role="parameter">values</db:code> on the attribute at <db:code role="parameter">location</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">location</db:code>. Otherwise the value specified with <db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">location</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-3">
<db:title>void QGLShaderProgram::setAttributeArray(int <db:emphasis>location</db:emphasis>, const QVector4D *<db:emphasis>values</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector4D *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stride</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeArray(int location, const QVector4D *values, int stride)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets an array of 4D vertex <db:code role="parameter">values</db:code> on the attribute at <db:code role="parameter">location</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">location</db:code>. Otherwise the value specified with <db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">location</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-4">
<db:title>[since 4.7] void QGLShaderProgram::setAttributeArray(int <db:emphasis>location</db:emphasis>, GLenum <db:emphasis>type</db:emphasis>, const void *<db:emphasis>values</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLenum</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>tupleSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stride</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeArray(int location, GLenum type, const void *values, int tupleSize, int stride)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets an array of vertex <db:code role="parameter">values</db:code> on the attribute at <db:code role="parameter">location</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The <db:code role="parameter">type</db:code> indicates the type of elements in the <db:code role="parameter">values</db:code> array, usually <db:code>GL_FLOAT</db:code>, <db:code>GL_UNSIGNED_BYTE</db:code>, etc. The <db:code role="parameter">tupleSize</db:code> indicates the number of components per vertex: 1, 2, 3, or 4.</db:para>
<db:para>The array will become active when <db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">location</db:code>. Otherwise the value specified with <db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">location</db:code> will be used.</db:para>
<db:para>The <db:link xlink:href="qglshaderprogram.xml#setAttributeBuffer">setAttributeBuffer</db:link>() function can be used to set the attribute array to an offset within a vertex buffer.</db:para>
<db:note>
<db:para>Normalization will be enabled. If this is not desired, call glVertexAttribPointer directly through QGLFunctions.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeBuffer">setAttributeBuffer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-5">
<db:title>void QGLShaderProgram::setAttributeArray(const char *<db:emphasis>name</db:emphasis>, const GLfloat *<db:emphasis>values</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLfloat *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>tupleSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stride</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeArray(const char *name, const GLfloat *values, int tupleSize, int stride)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets an array of vertex <db:code role="parameter">values</db:code> on the attribute called <db:code role="parameter">name</db:code> in this shader program. The <db:code role="parameter">tupleSize</db:code> indicates the number of components per vertex (1, 2, 3, or 4), and the <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on <db:code role="parameter">name</db:code>. Otherwise the value specified with <db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">name</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-6">
<db:title>void QGLShaderProgram::setAttributeArray(const char *<db:emphasis>name</db:emphasis>, const QVector2D *<db:emphasis>values</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector2D *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stride</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeArray(const char *name, const QVector2D *values, int stride)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets an array of 2D vertex <db:code role="parameter">values</db:code> on the attribute called <db:code role="parameter">name</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on <db:code role="parameter">name</db:code>. Otherwise the value specified with <db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">name</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-7">
<db:title>void QGLShaderProgram::setAttributeArray(const char *<db:emphasis>name</db:emphasis>, const QVector3D *<db:emphasis>values</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stride</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeArray(const char *name, const QVector3D *values, int stride)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets an array of 3D vertex <db:code role="parameter">values</db:code> on the attribute called <db:code role="parameter">name</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on <db:code role="parameter">name</db:code>. Otherwise the value specified with <db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">name</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-8">
<db:title>void QGLShaderProgram::setAttributeArray(const char *<db:emphasis>name</db:emphasis>, const QVector4D *<db:emphasis>values</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector4D *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stride</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeArray(const char *name, const QVector4D *values, int stride)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets an array of 4D vertex <db:code role="parameter">values</db:code> on the attribute called <db:code role="parameter">name</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The array will become active when <db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on <db:code role="parameter">name</db:code>. Otherwise the value specified with <db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">name</db:code> will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeArray-9">
<db:title>[since 4.7] void QGLShaderProgram::setAttributeArray(const char *<db:emphasis>name</db:emphasis>, GLenum <db:emphasis>type</db:emphasis>, const void *<db:emphasis>values</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLenum</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>tupleSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stride</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeArray(const char *name, GLenum type, const void *values, int tupleSize, int stride)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets an array of vertex <db:code role="parameter">values</db:code> on the attribute called <db:code role="parameter">name</db:code> in this shader program. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in <db:code role="parameter">values</db:code>.</db:para>
<db:para>The <db:code role="parameter">type</db:code> indicates the type of elements in the <db:code role="parameter">values</db:code> array, usually <db:code>GL_FLOAT</db:code>, <db:code>GL_UNSIGNED_BYTE</db:code>, etc. The <db:code role="parameter">tupleSize</db:code> indicates the number of components per vertex: 1, 2, 3, or 4.</db:para>
<db:para>The array will become active when <db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">name</db:code>. Otherwise the value specified with <db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">name</db:code> will be used.</db:para>
<db:para>The <db:link xlink:href="qglshaderprogram.xml#setAttributeBuffer">setAttributeBuffer</db:link>() function can be used to set the attribute array to an offset within a vertex buffer.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#disableAttributeArray">disableAttributeArray</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeBuffer">setAttributeBuffer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeBuffer">
<db:title>[since 4.7] void QGLShaderProgram::setAttributeBuffer(int <db:emphasis>location</db:emphasis>, GLenum <db:emphasis>type</db:emphasis>, int <db:emphasis>offset</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeBuffer</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLenum</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>tupleSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stride</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeBuffer(int location, GLenum type, int offset, int tupleSize, int stride)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets an array of vertex values on the attribute at <db:code role="parameter">location</db:code> in this shader program, starting at a specific <db:code role="parameter">offset</db:code> in the currently bound vertex buffer. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in the value array.</db:para>
<db:para>The <db:code role="parameter">type</db:code> indicates the type of elements in the vertex value array, usually <db:code>GL_FLOAT</db:code>, <db:code>GL_UNSIGNED_BYTE</db:code>, etc. The <db:code role="parameter">tupleSize</db:code> indicates the number of components per vertex: 1, 2, 3, or 4.</db:para>
<db:para>The array will become active when <db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">location</db:code>. Otherwise the value specified with <db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">location</db:code> will be used.</db:para>
<db:note>
<db:para>Normalization will be enabled. If this is not desired, call glVertexAttribPointer directly though QGLFunctions.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeBuffer-1">
<db:title>[since 4.7] void QGLShaderProgram::setAttributeBuffer(const char *<db:emphasis>name</db:emphasis>, GLenum <db:emphasis>type</db:emphasis>, int <db:emphasis>offset</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>, int <db:emphasis>stride</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeBuffer</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLenum</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>tupleSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stride</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeBuffer(const char *name, GLenum type, int offset, int tupleSize, int stride)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets an array of vertex values on the attribute called <db:code role="parameter">name</db:code> in this shader program, starting at a specific <db:code role="parameter">offset</db:code> in the currently bound vertex buffer. The <db:code role="parameter">stride</db:code> indicates the number of bytes between vertices. A default <db:code role="parameter">stride</db:code> value of zero indicates that the vertices are densely packed in the value array.</db:para>
<db:para>The <db:code role="parameter">type</db:code> indicates the type of elements in the vertex value array, usually <db:code>GL_FLOAT</db:code>, <db:code>GL_UNSIGNED_BYTE</db:code>, etc. The <db:code role="parameter">tupleSize</db:code> indicates the number of components per vertex: 1, 2, 3, or 4.</db:para>
<db:para>The array will become active when <db:link xlink:href="qglshaderprogram.xml#enableAttributeArray">enableAttributeArray</db:link>() is called on the <db:code role="parameter">name</db:code>. Otherwise the value specified with <db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>() for <db:code role="parameter">name</db:code> will be used.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeArray">setAttributeArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue">
<db:title>void QGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(int location, GLfloat value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-1">
<db:title>void QGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(int location, GLfloat x, GLfloat y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to the 2D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-2">
<db:title>void QGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>z</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(int location, GLfloat x, GLfloat y, GLfloat z)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to the 3D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-3">
<db:title>void QGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>, GLfloat <db:emphasis>w</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>z</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to the 4D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>, <db:code role="parameter">w</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-4">
<db:title>void QGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, const QVector2D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector2D &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(int location, const QVector2D &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-5">
<db:title>void QGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, const QVector3D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(int location, const QVector3D &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-6">
<db:title>void QGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, const QVector4D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector4D &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(int location, const QVector4D &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-7">
<db:title>void QGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, const QColor &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(int location, const QColor &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-8">
<db:title>void QGLShaderProgram::setAttributeValue(int <db:emphasis>location</db:emphasis>, const GLfloat *<db:emphasis>values</db:emphasis>, int <db:emphasis>columns</db:emphasis>, int <db:emphasis>rows</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLfloat *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columns</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rows</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(int location, const GLfloat *values, int columns, int rows)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the attribute at <db:code role="parameter">location</db:code> in the current context to the contents of <db:code role="parameter">values</db:code>, which contains <db:code role="parameter">columns</db:code> elements, each consisting of <db:code role="parameter">rows</db:code> elements. The <db:code role="parameter">rows</db:code> value should be 1, 2, 3, or 4. This function is typically used to set matrix values and column vectors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-9">
<db:title>void QGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(const char *name, GLfloat value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-10">
<db:title>void QGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(const char *name, GLfloat x, GLfloat y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to the 2D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-11">
<db:title>void QGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>z</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(const char *name, GLfloat x, GLfloat y, GLfloat z)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to the 3D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-12">
<db:title>void QGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>, GLfloat <db:emphasis>w</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>z</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">12</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(const char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to the 4D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>, <db:code role="parameter">w</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-13">
<db:title>void QGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, const QVector2D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector2D &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">13</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(const char *name, const QVector2D &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-14">
<db:title>void QGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, const QVector3D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">14</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(const char *name, const QVector3D &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-15">
<db:title>void QGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, const QVector4D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector4D &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">15</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(const char *name, const QVector4D &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-16">
<db:title>void QGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, const QColor &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">16</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(const char *name, const QColor &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeValue-17">
<db:title>void QGLShaderProgram::setAttributeValue(const char *<db:emphasis>name</db:emphasis>, const GLfloat *<db:emphasis>values</db:emphasis>, int <db:emphasis>columns</db:emphasis>, int <db:emphasis>rows</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLfloat *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columns</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rows</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">17</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeValue(const char *name, const GLfloat *values, int columns, int rows)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the attribute called <db:code role="parameter">name</db:code> in the current context to the contents of <db:code role="parameter">values</db:code>, which contains <db:code role="parameter">columns</db:code> elements, each consisting of <db:code role="parameter">rows</db:code> elements. The <db:code role="parameter">rows</db:code> value should be 1, 2, 3, or 4. This function is typically used to set matrix values and column vectors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setUniformValue">setUniformValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometryInputType">
<db:title>void QGLShaderProgram::setGeometryInputType(GLenum <db:emphasis>inputType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setGeometryInputType</db:methodname>
<db:methodparam>
<db:type>GLenum</db:type>
<db:parameter>inputType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGeometryInputType(GLenum inputType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the input type from <db:code role="parameter">inputType</db:code>.</db:para>
<db:para>This parameter takes effect the next time the program is linked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#geometryInputType">geometryInputType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometryOutputType">
<db:title>[since 4.7] void QGLShaderProgram::setGeometryOutputType(GLenum <db:emphasis>outputType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setGeometryOutputType</db:methodname>
<db:methodparam>
<db:type>GLenum</db:type>
<db:parameter>outputType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGeometryOutputType(GLenum outputType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the output type from the geometry shader, if active, to <db:code role="parameter">outputType</db:code>.</db:para>
<db:para>This parameter takes effect the next time the program is linked.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#geometryOutputType">geometryOutputType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometryOutputVertexCount">
<db:title>[since 4.7] void QGLShaderProgram::setGeometryOutputVertexCount(int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setGeometryOutputVertexCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGeometryOutputVertexCount(int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum number of vertices the current geometry shader program will produce, if active, to <db:code role="parameter">count</db:code>.</db:para>
<db:para>This parameter takes effect the next time the program is linked.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#geometryOutputVertexCount">geometryOutputVertexCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, GLfloat value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-1">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, GLint <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLint</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, GLint value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-36">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">36</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to the red, green, blue, and alpha components of <db:code role="parameter">color</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-37">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">37</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QPoint &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable associated with <db:code role="parameter">name</db:code> in the current context to the x and y coordinates of <db:code role="parameter">point</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-38">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">38</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable associated with <db:code role="parameter">name</db:code> in the current context to the x and y coordinates of <db:code role="parameter">point</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-39">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">39</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable associated with <db:code role="parameter">name</db:code> in the current context to the width and height of the given <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-40">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QSizeF &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSizeF &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">40</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QSizeF &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable associated with <db:code role="parameter">name</db:code> in the current context to the width and height of the given <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-41">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix2x2 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix2x2 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">41</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QMatrix2x2 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 2x2 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-42">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix2x3 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix2x3 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">42</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QMatrix2x3 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 2x3 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-43">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix2x4 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix2x4 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">43</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QMatrix2x4 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 2x4 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-44">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix3x2 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix3x2 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">44</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QMatrix3x2 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 3x2 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-45">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix3x3 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix3x3 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">45</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QMatrix3x3 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 3x3 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-46">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix3x4 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix3x4 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">46</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QMatrix3x4 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 3x4 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-47">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix4x2 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x2 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">47</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QMatrix4x2 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 4x2 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-48">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix4x3 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x3 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">48</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QMatrix4x3 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 4x3 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-49">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">49</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QMatrix4x4 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 4x4 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-50">
<db:title>[since 4.7] void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const GLfloat[2][2] <db:emphasis>value</db:emphasis> = 2)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLfloat[2][2]</db:type>
<db:parameter>value</db:parameter>
<db:initializer>2</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">50</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const GLfloat[2][2] value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 2x2 matrix <db:code role="parameter">value</db:code>. The matrix elements must be specified in column-major order.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-51">
<db:title>[since 4.7] void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const GLfloat[3][3] <db:emphasis>value</db:emphasis> = 3)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLfloat[3][3]</db:type>
<db:parameter>value</db:parameter>
<db:initializer>3</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">51</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const GLfloat[3][3] value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 3x3 matrix <db:code role="parameter">value</db:code>. The matrix elements must be specified in column-major order.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-52">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const GLfloat[4][4] <db:emphasis>value</db:emphasis> = 4)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLfloat[4][4]</db:type>
<db:parameter>value</db:parameter>
<db:initializer>4</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">52</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const GLfloat[4][4] value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 4x4 matrix <db:code role="parameter">value</db:code>. The matrix elements must be specified in column-major order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-53">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QTransform &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">53</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QTransform &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to a 3x3 transformation matrix <db:code role="parameter">value</db:code> that is specified as a <db:link xlink:href="qtransform.xml">QTransform</db:link> value.</db:para>
<db:para>To set a <db:link xlink:href="qtransform.xml">QTransform</db:link> value as a 4x4 matrix in a shader, use <db:code>setUniformValue(name, QMatrix4x4(value))</db:code>.</db:para>
</db:section>
<db:section xml:id="setUniformValue-2">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, GLuint <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLuint</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, GLuint value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>. This function should be used when setting sampler values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-3">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, GLfloat x, GLfloat y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the 2D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-4">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>z</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, GLfloat x, GLfloat y, GLfloat z)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the 3D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-5">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>, GLfloat <db:emphasis>w</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>z</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the 4D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>, <db:code role="parameter">w</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-6">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QVector2D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector2D &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QVector2D &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-7">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QVector3D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QVector3D &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-8">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QVector4D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector4D &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QVector4D &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-9">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the red, green, blue, and alpha components of <db:code role="parameter">color</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-10">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QPoint &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the x and y coordinates of <db:code role="parameter">point</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-11">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the x and y coordinates of <db:code role="parameter">point</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-12">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">12</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the width and height of the given <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-13">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QSizeF &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSizeF &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">13</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QSizeF &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to the width and height of the given <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-14">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix2x2 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix2x2 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">14</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QMatrix2x2 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 2x2 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-15">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix2x3 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix2x3 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">15</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QMatrix2x3 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 2x3 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-16">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix2x4 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix2x4 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">16</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QMatrix2x4 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 2x4 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-17">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix3x2 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix3x2 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">17</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QMatrix3x2 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 3x2 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-18">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix3x3 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix3x3 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">18</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QMatrix3x3 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 3x3 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-19">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix3x4 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix3x4 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">19</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QMatrix3x4 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 3x4 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-20">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix4x2 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x2 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">20</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QMatrix4x2 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 4x2 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-21">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix4x3 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x3 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">21</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QMatrix4x3 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 4x3 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-22">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QMatrix4x4 &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">22</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QMatrix4x4 &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 4x4 matrix <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-23">
<db:title>[since 4.7] void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const GLfloat[2][2] <db:emphasis>value</db:emphasis> = 2)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLfloat[2][2]</db:type>
<db:parameter>value</db:parameter>
<db:initializer>2</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">23</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const GLfloat[2][2] value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 2x2 matrix <db:code role="parameter">value</db:code>. The matrix elements must be specified in column-major order.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-24">
<db:title>[since 4.7] void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const GLfloat[3][3] <db:emphasis>value</db:emphasis> = 3)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLfloat[3][3]</db:type>
<db:parameter>value</db:parameter>
<db:initializer>3</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">24</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const GLfloat[3][3] value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 3x3 matrix <db:code role="parameter">value</db:code>. The matrix elements must be specified in column-major order.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-25">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const GLfloat[4][4] <db:emphasis>value</db:emphasis> = 4)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLfloat[4][4]</db:type>
<db:parameter>value</db:parameter>
<db:initializer>4</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">25</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const GLfloat[4][4] value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 4x4 matrix <db:code role="parameter">value</db:code>. The matrix elements must be specified in column-major order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-26">
<db:title>void QGLShaderProgram::setUniformValue(int <db:emphasis>location</db:emphasis>, const QTransform &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTransform &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">26</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(int location, const QTransform &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable at <db:code role="parameter">location</db:code> in the current context to a 3x3 transformation matrix <db:code role="parameter">value</db:code> that is specified as a <db:link xlink:href="qtransform.xml">QTransform</db:link> value.</db:para>
<db:para>To set a <db:link xlink:href="qtransform.xml">QTransform</db:link> value as a 4x4 matrix in a shader, use <db:code>setUniformValue(location, QMatrix4x4(value))</db:code>.</db:para>
</db:section>
<db:section xml:id="setUniformValue-27">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">27</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, GLfloat value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-28">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, GLint <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLint</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">28</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, GLint value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-29">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, GLuint <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLuint</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">29</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, GLuint value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>. This function should be used when setting sampler values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-30">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">30</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, GLfloat x, GLfloat y)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to the 2D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-31">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>z</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">31</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, GLfloat x, GLfloat y, GLfloat z)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to the 3D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-32">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, GLfloat <db:emphasis>x</db:emphasis>, GLfloat <db:emphasis>y</db:emphasis>, GLfloat <db:emphasis>z</db:emphasis>, GLfloat <db:emphasis>w</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>z</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLfloat</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">32</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to the 4D vector (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>, <db:code role="parameter">w</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-33">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QVector2D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector2D &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">33</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QVector2D &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-34">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QVector3D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">34</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QVector3D &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValue-35">
<db:title>void QGLShaderProgram::setUniformValue(const char *<db:emphasis>name</db:emphasis>, const QVector4D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector4D &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">35</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValue(const char *name, const QVector4D &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable called <db:code role="parameter">name</db:code> in the current context to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const GLfloat *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLfloat *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>tupleSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const GLfloat *values, int count, int tupleSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> elements of <db:code role="parameter">values</db:code>. Each element has <db:code role="parameter">tupleSize</db:code> components. The <db:code role="parameter">tupleSize</db:code> must be 1, 2, 3, or 4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-1">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const GLint *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLint *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const GLint *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-2">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const GLuint *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLuint *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const GLuint *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> elements of <db:code role="parameter">values</db:code>. This overload should be used when setting an array of sampler values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-3">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QVector2D *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector2D *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const QVector2D *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 2D vector elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-4">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QVector3D *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const QVector3D *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 3D vector elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-5">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QVector4D *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector4D *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const QVector4D *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 4D vector elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-6">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix2x2 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix2x2 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const QMatrix2x2 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 2x2 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-7">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix2x3 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix2x3 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const QMatrix2x3 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 2x3 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-8">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix2x4 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix2x4 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const QMatrix2x4 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 2x4 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-9">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix3x2 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix3x2 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const QMatrix3x2 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 3x2 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-10">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix3x3 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix3x3 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const QMatrix3x3 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 3x3 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-11">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix3x4 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix3x4 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const QMatrix3x4 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 3x4 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-12">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix4x2 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x2 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">12</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const QMatrix4x2 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 4x2 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-13">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix4x3 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x3 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">13</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const QMatrix4x3 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 4x3 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-14">
<db:title>void QGLShaderProgram::setUniformValueArray(int <db:emphasis>location</db:emphasis>, const QMatrix4x4 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>location</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">14</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(int location, const QMatrix4x4 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the uniform variable array at <db:code role="parameter">location</db:code> in the current context to the <db:code role="parameter">count</db:code> 4x4 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-15">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const GLfloat *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>, int <db:emphasis>tupleSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLfloat *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>tupleSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">15</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const GLfloat *values, int count, int tupleSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> elements of <db:code role="parameter">values</db:code>. Each element has <db:code role="parameter">tupleSize</db:code> components. The <db:code role="parameter">tupleSize</db:code> must be 1, 2, 3, or 4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-16">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const GLint *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLint *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">16</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const GLint *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-17">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const GLuint *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const GLuint *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">17</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const GLuint *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> elements of <db:code role="parameter">values</db:code>. This overload should be used when setting an array of sampler values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-18">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QVector2D *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector2D *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">18</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const QVector2D *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 2D vector elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-19">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QVector3D *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">19</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const QVector3D *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 3D vector elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-20">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QVector4D *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector4D *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">20</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const QVector4D *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 4D vector elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-21">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix2x2 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix2x2 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">21</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const QMatrix2x2 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 2x2 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-22">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix2x3 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix2x3 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">22</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const QMatrix2x3 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 2x3 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-23">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix2x4 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix2x4 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">23</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const QMatrix2x4 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 2x4 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-24">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix3x2 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix3x2 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">24</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const QMatrix3x2 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 3x2 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-25">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix3x3 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix3x3 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">25</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const QMatrix3x3 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 3x3 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-26">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix3x4 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix3x4 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">26</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const QMatrix3x4 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 3x4 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-27">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix4x2 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x2 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">27</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const QMatrix4x2 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 4x2 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-28">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix4x3 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x3 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">28</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const QMatrix4x3 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 4x3 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniformValueArray-29">
<db:title>void QGLShaderProgram::setUniformValueArray(const char *<db:emphasis>name</db:emphasis>, const QMatrix4x4 *<db:emphasis>values</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniformValueArray</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMatrix4x4 *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">29</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniformValueArray(const char *name, const QMatrix4x4 *values, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the uniform variable array called <db:code role="parameter">name</db:code> in the current context to the <db:code role="parameter">count</db:code> 4x4 matrix elements of <db:code role="parameter">values</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#setAttributeValue">setAttributeValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shaders">
<db:title>QList&lt;QGLShader *&gt; QGLShaderProgram::shaders() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGLShader *&gt;</db:type>
<db:methodname>shaders</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGLShader *&gt; shaders() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all shaders that have been added to this shader program using <db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#addShader">addShader</db:link>()</db:member>
<db:member><db:link xlink:href="qglshaderprogram.xml#removeShader">removeShader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uniformLocation">
<db:title>int QGLShaderProgram::uniformLocation(const char *<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>uniformLocation</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int uniformLocation(const char *name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the location of the uniform variable <db:code role="parameter">name</db:code> within this shader program's parameter list. Returns -1 if <db:code role="parameter">name</db:code> is not a valid uniform variable for this shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#attributeLocation">attributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uniformLocation-1">
<db:title>int QGLShaderProgram::uniformLocation(const QByteArray &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>uniformLocation</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int uniformLocation(const QByteArray &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the location of the uniform variable <db:code role="parameter">name</db:code> within this shader program's parameter list. Returns -1 if <db:code role="parameter">name</db:code> is not a valid uniform variable for this shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#attributeLocation">attributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uniformLocation-2">
<db:title>int QGLShaderProgram::uniformLocation(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>uniformLocation</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">int uniformLocation(const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the location of the uniform variable <db:code role="parameter">name</db:code> within this shader program's parameter list. Returns -1 if <db:code role="parameter">name</db:code> is not a valid uniform variable for this shader program.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglshaderprogram.xml#attributeLocation">attributeLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
