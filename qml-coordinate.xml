<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>coordinate QML Value Type</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The coordinate type represents and stores a geographic position.</db:para>
<db:para>This type was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtPositioning 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>coordinate is part of <db:simplelist><db:member>qml-QtPositioning5-basictypes</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This type is a QML representation of <db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link> and represents a geographic position in the form of <db:link xlink:href="qml-coordinate.xml#latitude">latitude</db:link>, <db:link xlink:href="qml-coordinate.xml#longitude">longitude</db:link> and <db:link xlink:href="qml-coordinate.xml#altitude">altitude</db:link> attributes. The <db:link xlink:href="qml-coordinate.xml#latitude">latitude</db:link> attribute specifies the number of decimal degrees above and below the equator. A positive latitude indicates the Northern Hemisphere and a negative latitude indicates the Southern Hemisphere. The <db:link xlink:href="qml-coordinate.xml#longitude">longitude</db:link> attribute specifies the number of decimal degrees east and west. A positive longitude indicates the Eastern Hemisphere and a negative longitude indicates the Western Hemisphere. The <db:link xlink:href="qml-coordinate.xml#altitude">altitude</db:link> attribute specifies the number of meters above sea level. Together, these attributes specify a 3-dimensional position anywhere on or near the Earth's surface.</db:para>
<db:para>The <db:link xlink:href="qml-geoshape.xml#isvalid">isValid</db:link> attribute can be used to test if a coordinate is valid. A coordinate is considered valid if it has a valid latitude and longitude. A valid altitude is not required. The latitude must be between -90 and 90 inclusive and the longitude must be between -180 and 180 inclusive.</db:para>
<db:para>The <db:code>coordinate</db:code> type is used by many other types in the Qt Location module, for specifying the position of an object on a Map, the current position of a device and many other tasks. They also feature a number of important utility methods that make otherwise complex calculations simple to use, such as <db:link xlink:href="qml-coordinate.xml#atdistanceandazimuth">atDistanceAndAzimuth</db:link>().</db:para>
<db:section xml:id="accuracy">
<db:title>Accuracy</db:title>
<db:para>The latitude, longitude and altitude attributes stored in the coordinate type are represented as doubles, giving them approximately 16 decimal digits of precision â€“ enough to specify micrometers. The calculations performed in coordinate's methods such as <db:link xlink:href="qml-coordinate.xml#azimuthto">azimuthTo</db:link>() and <db:link xlink:href="qml-coordinate.xml#distanceto">distanceTo</db:link>() also use doubles for all intermediate values, but the inherent inaccuracies in their spherical Earth model dominate the amount of error in their output.</db:para>
</db:section>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:para>Use properties of type <db:link xlink:href="qml-variant.xml" role="deprecated">variant</db:link> to store a <db:code>coordinate</db:code>. To create a <db:code>coordinate</db:code> use one of the methods described below. In all cases, specifying the <db:link xlink:href="qml-coordinate.xml#altitude">altitude</db:link> attribute is optional.</db:para>
<db:para>To create a <db:code>coordinate</db:code> value, use the <db:link xlink:href="qml-coordinate.xml">QtPositioning.coordinate()</db:link> function:</db:para>
<db:programlisting language="qml">import QtPositioning 5.2

Location { coordinate: QtPositioning.coordinate(-27.5, 153.1) }
</db:programlisting>
<db:para>or as separate <db:link xlink:href="qml-coordinate.xml#latitude">latitude</db:link>, <db:link xlink:href="qml-coordinate.xml#longitude">longitude</db:link> and <db:link xlink:href="qml-coordinate.xml#altitude">altitude</db:link> components:</db:para>
<db:programlisting language="qml">Location {
    coordinate {
        latitude: -27.5
        longitude: 153.1
    }
}
</db:programlisting>
<db:para>When integrating with C++, note that any <db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link> value passed into QML from C++ is automatically converted into a <db:code>coordinate</db:code> value, and vice-versa.</db:para>
</db:section>
<db:section xml:id="properties">
<db:title>Properties</db:title>
<db:section xml:id="latitude">
<db:title>latitude</db:title>
<db:programlisting language="cpp">real latitude
</db:programlisting>
<db:para>This property holds the latitude value of the geographical position (decimal degrees). A positive latitude indicates the Northern Hemisphere, and a negative latitude indicates the Southern Hemisphere. If the property has not been set, its default value is NaN.</db:para>
<db:para>For more details see the <db:link xlink:href="qgeocoordinate.xml#latitude">QGeoCoordinate::latitude</db:link> property</db:para>
</db:section>
<db:section xml:id="longitude">
<db:title>longitude</db:title>
<db:programlisting language="cpp">real longitude
</db:programlisting>
<db:para>This property holds the longitude value of the geographical position (decimal degrees). A positive longitude indicates the Eastern Hemisphere, and a negative longitude indicates the Western Hemisphere If the property has not been set, its default value is NaN.</db:para>
<db:para>For more details see the <db:link xlink:href="qgeocoordinate.xml#longitude">QGeoCoordinate::longitude</db:link> property</db:para>
</db:section>
<db:section xml:id="altitude">
<db:title>altitude</db:title>
<db:programlisting language="cpp">real altitude
</db:programlisting>
<db:para>This property holds the altitude value (meters above sea level). If the property has not been set, its default value is NaN.</db:para>
<db:para>For more details see the <db:link xlink:href="qgeocoordinate.xml#altitude">QGeoCoordinate::altitude</db:link> property</db:para>
</db:section>
<db:section xml:id="isvalid">
<db:title>isValid</db:title>
<db:programlisting language="cpp">bool isValid
</db:programlisting>
<db:para>This property holds the current validity of the coordinate. Coordinates are considered valid if they have been set with a valid latitude and longitude (altitude is not required).</db:para>
<db:para>The latitude must be between -90 to 90 inclusive to be considered valid, and the longitude must be between -180 to 180 inclusive to be considered valid.</db:para>
<db:para>This is a read-only property.</db:para>
</db:section>
</db:section>
<db:section xml:id="methods">
<db:title>Methods</db:title>
<db:section xml:id="distanceto">
<db:title>distanceTo()</db:title>
<db:programlisting language="cpp">real distanceTo(coordinate other)
</db:programlisting>
<db:para>Returns the distance (in meters) from this coordinate to the coordinate specified by <db:code role="parameter">other</db:code>. Altitude is not used in the calculation.</db:para>
<db:para>This calculation returns the great-circle distance between the two coordinates, with an assumption that the Earth is spherical for the purpose of this calculation.</db:para>
</db:section>
<db:section xml:id="azimuthto">
<db:title>azimuthTo()</db:title>
<db:programlisting language="cpp">real azimuth(coordinate other)
</db:programlisting>
<db:para>Returns the azimuth (or bearing) in degrees from this coordinate to the coordinate specified by <db:code role="parameter">other</db:code>. Altitude is not used in the calculation.</db:para>
<db:para>There is an assumption that the Earth is spherical for the purpose of this calculation.</db:para>
</db:section>
<db:section xml:id="atdistanceandazimuth">
<db:title>atDistanceAndAzimuth()</db:title>
<db:programlisting language="cpp">coordinate atDistanceAndAzimuth(real distance, real azimuth)
</db:programlisting>
<db:para>Returns the coordinate that is reached by traveling <db:code role="parameter">distance</db:code> metres from this coordinate at <db:code role="parameter">azimuth</db:code> degrees along a great-circle.</db:para>
<db:para>There is an assumption that the Earth is spherical for the purpose of this calculation.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
