<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt's foreach Keyword</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt's foreach keyword.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="foreach-keyword"/>
<db:section xml:id="the-foreach-keyword">
<db:title>The foreach Keyword</db:title>
<db:note>
<db:para>The foreach keyword was introduced before the C++11 range-based loops existed. New code should prefer C++11 range-based loops.</db:para>
</db:note>
<db:para>The foreach keyword is a Qt-specific addition to the C++ language, and is implemented using the preprocessor.</db:para>
<db:para>Its syntax is: foreach (<db:emphasis>variable</db:emphasis>, <db:emphasis>container</db:emphasis>) <db:emphasis>statement</db:emphasis>. For example, here's how to use foreach to iterate over a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;:</db:para>
<db:programlisting language="cpp">QList&amp;lt;QString&amp;gt; values;
...
QString str;
foreach (str, values)
    qDebug() &amp;lt;&amp;lt; str;
</db:programlisting>
<db:para>The foreach code is significantly shorter than the equivalent code that uses iterators:</db:para>
<db:programlisting language="cpp">QList&amp;lt;QString&amp;gt; values;
...
QListIterator&amp;lt;QString&amp;gt; i(values);
while (i.hasNext()) {
    QString s = i.next();
    qDebug() &amp;lt;&amp;lt; s;
}
</db:programlisting>
<db:para>Unless the data type contains a comma (e.g., std::pair&lt;int, int&gt;), the variable used for iteration can be defined within the foreach statement:</db:para>
<db:programlisting language="cpp">QList&amp;lt;QString&amp;gt; values;
...
foreach (const QString &amp;amp;str, values)
    qDebug() &amp;lt;&amp;lt; str;
</db:programlisting>
<db:para>And like any other C++ loop construct, you can use braces around the body of a foreach loop, and you can use break to leave the loop:</db:para>
<db:programlisting language="cpp">QList&amp;lt;QString&amp;gt; values;
...
foreach (const QString &amp;amp;str, values) {
    if (str.isEmpty())
        break;
    qDebug() &amp;lt;&amp;lt; str;
}
</db:programlisting>
<db:para>With <db:link xlink:href="qmap.xml">QMap</db:link> and <db:link xlink:href="qhash.xml#qhash">QHash</db:link>, foreach accesses the value component of the (key, value) pairs automatically, so you should not call values() on the container (it would generate an unnecessary copy, see below). If you want to iterate over both the keys and the values, you can use iterators (which are faster), or you can obtain the keys, and use them to get the values too:</db:para>
<db:programlisting language="cpp">QMap&amp;lt;QString, int&amp;gt; map;
...
foreach (const QString &amp;amp;str, map.keys())
    qDebug() &amp;lt;&amp;lt; str &amp;lt;&amp;lt; ':' &amp;lt;&amp;lt; map.value(str);
</db:programlisting>
<db:para>For a multi-valued map:</db:para>
<db:programlisting language="cpp">QMultiMap&amp;lt;QString, int&amp;gt; map;
...
foreach (const QString &amp;amp;str, map.uniqueKeys()) {
    foreach (int i, map.values(str))
        qDebug() &amp;lt;&amp;lt; str &amp;lt;&amp;lt; ':' &amp;lt;&amp;lt; i;
}
</db:programlisting>
<db:para>Qt automatically takes a copy of the container when it enters a foreach loop. If you modify the container as you are iterating, that won't affect the loop. (If you do not modify the container, the copy still takes place, but thanks to <db:link xlink:href="implicit-sharing.xml">implicit sharing</db:link> copying a container is very fast.)</db:para>
<db:para>Since foreach creates a copy of the container, using a non-const reference for the variable does not allow you to modify the original container. It only affects the copy, which is probably not what you want.</db:para>
<db:para>An alternative to Qt's foreach loop is the range-based for that is part of C++11 and newer. However, keep in mind that the range-based for might force a Qt container to <db:link xlink:href="implicit-sharing.xml">detach</db:link>, whereas foreach would not. But using foreach always copies the container, which is usually not cheap for STL containers. If in doubt, prefer foreach for Qt containers, and range based for for STL ones.</db:para>
<db:para>You can remove the availability of the Qt's foreach loop by defining the QT_NO_FOREACH macro.</db:para>
</db:section>
</db:article>
