<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSctpSocket Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link> class provides an SCTP socket.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSctpSocket</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtcpsocket.xml" xlink:role="class">QTcpSocket</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSctpSocket is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>SCTP (Stream Control Transmission Protocol) is a transport layer protocol serving in a similar role as the popular protocols TCP and UDP. Like UDP, SCTP is message-oriented, but it ensures reliable, in-sequence transport of messages with congestion control like TCP.</db:para>
<db:para>SCTP is connection-oriented protocol, which provides the complete simultaneous transmission of multiple data streams between endpoints. This multi-streaming allows data to be delivered by independent channels, so that if there is data loss in one stream, delivery will not be affected for the other streams.</db:para>
<db:para>Being message-oriented, SCTP transports a sequence of messages, rather than transporting an unbroken stream of bytes as does TCP. Like in UDP, in SCTP a sender sends a message in one operation, and that exact message is passed to the receiving application process in one operation. But unlike UDP, the delivery is guaranteed.</db:para>
<db:para>It also supports multi-homing, meaning that a connected endpoint can have alternate IP addresses associated with it in order to route around network failure or changing conditions.</db:para>
<db:para><db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link> is a convenience subclass of <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> that allows you to emulate TCP data stream over SCTP or establish an SCTP connection for reliable datagram service.</db:para>
<db:para><db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link> can operate in one of two possible modes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Continuous byte stream (TCP emulation).</db:para>
</db:listitem>
<db:listitem>
<db:para>Multi-streamed datagram mode.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To set a continuous byte stream mode, instantiate <db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link> and call <db:link xlink:href="qsctpsocket.xml#setMaximumChannelCount">setMaximumChannelCount</db:link>() with a negative value. This gives the ability to use <db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link> as a regular buffered <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link>. You can call <db:link xlink:href="qabstractsocket.xml#connectToHost">connectToHost</db:link>() to initiate connection with endpoint, <db:link xlink:href="qiodevice.xml#write">write</db:link>() to transmit and <db:link xlink:href="qiodevice.xml#read">read</db:link>() to receive data from the peer, but you cannot distinguish message boundaries.</db:para>
<db:para>By default, <db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link> operates in datagram mode. Before connecting, call <db:link xlink:href="qsctpsocket.xml#setMaximumChannelCount">setMaximumChannelCount</db:link>() to set the maximum number of channels that the application is prepared to support. This number is a parameter negotiated with the remote endpoint and its value can be bounded by the operating system. The default value of 0 indicates to use the peer's value. If both endpoints have default values, then number of connection channels is system-dependent. After establishing a connection, you can fetch the actual number of channels by calling <db:link xlink:href="qiodevice.xml#readChannelCount">readChannelCount</db:link>() and <db:link xlink:href="qiodevice.xml#writeChannelCount">writeChannelCount</db:link>().</db:para>
<db:programlisting language="cpp">QSctpSocket *socket = new QSctpSocket(this);

socket-&amp;gt;setMaxChannelCount(16);
socket-&amp;gt;connectToHost(QHostAddress::LocalHost, 1973);

if (socket-&amp;gt;waitForConnected(1000)) {
    int inputChannels = socket-&amp;gt;readChannelCount();
    int outputChannels = socket-&amp;gt;writeChannelCount();

    ....
}
</db:programlisting>
<db:para>In datagram mode, <db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link> performs the buffering of datagrams independently for each channel. You can queue a datagram to the buffer of the current channel by calling <db:link xlink:href="qsctpsocket.xml#writeDatagram">writeDatagram</db:link>() and read a pending datagram by calling <db:link xlink:href="qsctpsocket.xml#readDatagram">readDatagram</db:link>() respectively.</db:para>
<db:para>Using the standard <db:link xlink:href="qiodevice.xml">QIODevice</db:link> functions <db:link xlink:href="qiodevice.xml#read">read</db:link>(), <db:link xlink:href="qiodevice.xml#readLine">readLine</db:link>(), <db:link xlink:href="qiodevice.xml#write">write</db:link>(), etc. is allowed in datagram mode with the same limitations as in continuous byte stream mode.</db:para>
<db:note>
<db:para>This class is not supported on the Windows platform.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsctpserver.xml">QSctpServer</db:link></db:member>
<db:member><db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link></db:member>
<db:member><db:link xlink:href="qabstractsocket.xml">QAbstractSocket</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSctpSocket">
<db:title>[explicit] QSctpSocket::QSctpSocket(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSctpSocket</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSctpSocket(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link> object in state UnconnectedState.</db:para>
<db:para>Sets the datagram operation mode. The <db:code role="parameter">parent</db:code> argument is passed to <db:link xlink:href="qobject.xml">QObject</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractsocket.xml#socketType">socketType</db:link>()</db:member>
<db:member><db:link xlink:href="qsctpsocket.xml#setMaximumChannelCount">setMaximumChannelCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QSctpSocket">
<db:title>[virtual] QSctpSocket::~QSctpSocket()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSctpSocket</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSctpSocket()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the socket, closing the connection if necessary.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsctpsocket.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="close">
<db:title>[override virtual] void QSctpSocket::close()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>close</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void close() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractsocket.xml#close" role="function">QAbstractSocket::close()</db:link>.</db:para>
</db:section>
<db:section xml:id="disconnectFromHost">
<db:title>[override virtual] void QSctpSocket::disconnectFromHost()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>disconnectFromHost</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void disconnectFromHost() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractsocket.xml#disconnectFromHost" role="function">QAbstractSocket::disconnectFromHost()</db:link>.</db:para>
</db:section>
<db:section xml:id="isInDatagramMode">
<db:title>bool QSctpSocket::isInDatagramMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isInDatagramMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isInDatagramMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the socket is running in datagram mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsctpsocket.xml#setMaximumChannelCount">setMaximumChannelCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumChannelCount">
<db:title>int QSctpSocket::maximumChannelCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maximumChannelCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int maximumChannelCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum number of channels that <db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link> is able to support.</db:para>
<db:para>A value of 0 (the default) means that the number of connection channels would be set by the remote endpoint.</db:para>
<db:para>Returns -1 if <db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link> is running in continuous byte stream mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsctpsocket.xml#setMaximumChannelCount">setMaximumChannelCount</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#readChannelCount">readChannelCount</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#writeChannelCount">writeChannelCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readData">
<db:title>[override virtual protected] qint64 QSctpSocket::readData(char *<db:emphasis>data</db:emphasis>, qint64 <db:emphasis>maxSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>qint64</db:type>
<db:methodname>readData</db:methodname>
<db:methodparam>
<db:type>char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>maxSize</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 readData(char *data, qint64 maxSize) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractsocket.xml#readData" role="function">QAbstractSocket::readData(char *data, qint64 maxSize)</db:link>.</db:para>
</db:section>
<db:section xml:id="readDatagram">
<db:title>QNetworkDatagram QSctpSocket::readDatagram()</db:title>
<db:methodsynopsis>
<db:type>QNetworkDatagram</db:type>
<db:methodname>readDatagram</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkDatagram readDatagram()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a datagram from the buffer of the current read channel, and returns it as a <db:link xlink:href="qnetworkdatagram.xml">QNetworkDatagram</db:link> object, along with the sender's host address and port. If possible, this function will also try to determine the datagram's destination address, port, and the number of hop counts at reception time.</db:para>
<db:para>On failure, returns a <db:link xlink:href="qnetworkdatagram.xml">QNetworkDatagram</db:link> that reports <db:link xlink:href="qnetworkdatagram.xml#isValid">not valid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsctpsocket.xml#writeDatagram">writeDatagram</db:link>()</db:member>
<db:member><db:link xlink:href="qsctpsocket.xml#isInDatagramMode">isInDatagramMode</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#currentReadChannel">currentReadChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readLineData">
<db:title>[override virtual protected] qint64 QSctpSocket::readLineData(char *<db:emphasis>data</db:emphasis>, qint64 <db:emphasis>maxlen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>qint64</db:type>
<db:methodname>readLineData</db:methodname>
<db:methodparam>
<db:type>char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>maxlen</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 readLineData(char *data, qint64 maxlen) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractsocket.xml#readLineData" role="function">QAbstractSocket::readLineData(char *data, qint64 maxlen)</db:link>.</db:para>
</db:section>
<db:section xml:id="setMaximumChannelCount">
<db:title>void QSctpSocket::setMaximumChannelCount(int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumChannelCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumChannelCount(int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum number of channels that the application is prepared to support in datagram mode, to <db:code role="parameter">count</db:code>. If <db:code role="parameter">count</db:code> is 0, endpoint's value for maximum number of channels is used. Negative <db:code role="parameter">count</db:code> sets a continuous byte stream mode.</db:para>
<db:para>Call this method only when <db:link xlink:href="qsctpsocket.xml">QSctpSocket</db:link> is in UnconnectedState.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsctpsocket.xml#maximumChannelCount">maximumChannelCount</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#readChannelCount">readChannelCount</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#writeChannelCount">writeChannelCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeDatagram">
<db:title>bool QSctpSocket::writeDatagram(const QNetworkDatagram &amp;<db:emphasis>datagram</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>writeDatagram</db:methodname>
<db:methodparam>
<db:type>const QNetworkDatagram &amp;</db:type>
<db:parameter>datagram</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool writeDatagram(const QNetworkDatagram &amp;datagram)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes a <db:code role="parameter">datagram</db:code> to the buffer of the current write channel. Returns true on success; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsctpsocket.xml#readDatagram">readDatagram</db:link>()</db:member>
<db:member><db:link xlink:href="qsctpsocket.xml#isInDatagramMode">isInDatagramMode</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#currentWriteChannel">currentWriteChannel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
