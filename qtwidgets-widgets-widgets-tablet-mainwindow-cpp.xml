<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Tablet Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to use a Wacom tablet in Qt applications.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;mainwindow.h&quot;
#include &quot;tabletcanvas.h&quot;

MainWindow::MainWindow(TabletCanvas *canvas)
  : m_canvas(canvas), m_colorDialog(nullptr)
{
    createMenus();
    setWindowTitle(tr(&quot;Tablet Example&quot;));
    setCentralWidget(m_canvas);
    QCoreApplication::setAttribute(Qt::AA_CompressHighFrequencyEvents);
}

void MainWindow::setBrushColor()
{
    if (!m_colorDialog) {
        m_colorDialog = new QColorDialog(this);
        m_colorDialog-&amp;gt;setModal(false);
        m_colorDialog-&amp;gt;setCurrentColor(m_canvas-&amp;gt;color());
        connect(m_colorDialog, &amp;amp;QColorDialog::colorSelected, m_canvas, &amp;amp;TabletCanvas::setColor);
    }
    m_colorDialog-&amp;gt;setVisible(true);
}

void MainWindow::setAlphaValuator(QAction *action)
{
    m_canvas-&amp;gt;setAlphaChannelValuator(action-&amp;gt;data().value&amp;lt;TabletCanvas::Valuator&amp;gt;());
}

void MainWindow::setLineWidthValuator(QAction *action)
{
    m_canvas-&amp;gt;setLineWidthType(action-&amp;gt;data().value&amp;lt;TabletCanvas::Valuator&amp;gt;());
}

void MainWindow::setSaturationValuator(QAction *action)
{
    m_canvas-&amp;gt;setColorSaturationValuator(action-&amp;gt;data().value&amp;lt;TabletCanvas::Valuator&amp;gt;());
}

void MainWindow::setEventCompression(bool compress)
{
    QCoreApplication::setAttribute(Qt::AA_CompressTabletEvents, compress);
}

bool MainWindow::save()
{
    QString path = QDir::currentPath() + &quot;/untitled.png&quot;;
    QString fileName = QFileDialog::getSaveFileName(this, tr(&quot;Save Picture&quot;),
                             path);
    bool success = m_canvas-&amp;gt;saveImage(fileName);
    if (!success)
        QMessageBox::information(this, &quot;Error Saving Picture&quot;,
                                 &quot;Could not save the image&quot;);
    return success;
}

void MainWindow::load()
{
    QString fileName = QFileDialog::getOpenFileName(this, tr(&quot;Open Picture&quot;),
                                                    QDir::currentPath());

    if (!m_canvas-&amp;gt;loadImage(fileName))
        QMessageBox::information(this, &quot;Error Opening Picture&quot;,
                                 &quot;Could not open picture&quot;);
}

void MainWindow::clear()
{
    if (QMessageBox::question(this, tr(&quot;Save changes&quot;), tr(&quot;Do you want to save your changes?&quot;),
                              QMessageBox::Save | QMessageBox::Discard | QMessageBox::Cancel,
                              QMessageBox::Save) != QMessageBox::Save || save())
        m_canvas-&amp;gt;clear();
}

void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About Tablet Example&quot;),
                       tr(&quot;This example shows how to use a graphics drawing tablet in Qt.&quot;));
}

void MainWindow::createMenus()
{
    QMenu *fileMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;File&quot;));
    fileMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Open...&quot;), this, &amp;amp;MainWindow::load, QKeySequence::Open);
    fileMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Save As...&quot;), this, &amp;amp;MainWindow::save, QKeySequence::SaveAs);
    fileMenu-&amp;gt;addAction(tr(&quot;&amp;amp;New&quot;), this, &amp;amp;MainWindow::clear, QKeySequence::New);
    fileMenu-&amp;gt;addAction(tr(&quot;E&amp;amp;xit&quot;), this, &amp;amp;MainWindow::close, QKeySequence::Quit);

    QMenu *brushMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Brush&quot;));
    brushMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Brush Color...&quot;), this, &amp;amp;MainWindow::setBrushColor, tr(&quot;Ctrl+B&quot;));

    QMenu *tabletMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Tablet&quot;));
    QMenu *lineWidthMenu = tabletMenu-&amp;gt;addMenu(tr(&quot;&amp;amp;Line Width&quot;));

    QAction *lineWidthPressureAction = lineWidthMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Pressure&quot;));
    lineWidthPressureAction-&amp;gt;setData(TabletCanvas::PressureValuator);
    lineWidthPressureAction-&amp;gt;setCheckable(true);
    lineWidthPressureAction-&amp;gt;setChecked(true);

    QAction *lineWidthTiltAction = lineWidthMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Tilt&quot;));
    lineWidthTiltAction-&amp;gt;setData(TabletCanvas::TiltValuator);
    lineWidthTiltAction-&amp;gt;setCheckable(true);

    QAction *lineWidthFixedAction = lineWidthMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Fixed&quot;));
    lineWidthFixedAction-&amp;gt;setData(TabletCanvas::NoValuator);
    lineWidthFixedAction-&amp;gt;setCheckable(true);

    QActionGroup *lineWidthGroup = new QActionGroup(this);
    lineWidthGroup-&amp;gt;addAction(lineWidthPressureAction);
    lineWidthGroup-&amp;gt;addAction(lineWidthTiltAction);
    lineWidthGroup-&amp;gt;addAction(lineWidthFixedAction);
    connect(lineWidthGroup, &amp;amp;QActionGroup::triggered, this,
            &amp;amp;MainWindow::setLineWidthValuator);

    QMenu *alphaChannelMenu = tabletMenu-&amp;gt;addMenu(tr(&quot;&amp;amp;Alpha Channel&quot;));
    QAction *alphaChannelPressureAction = alphaChannelMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Pressure&quot;));
    alphaChannelPressureAction-&amp;gt;setData(TabletCanvas::PressureValuator);
    alphaChannelPressureAction-&amp;gt;setCheckable(true);

    QAction *alphaChannelTangentialPressureAction = alphaChannelMenu-&amp;gt;addAction(tr(&quot;T&amp;amp;angential Pressure&quot;));
    alphaChannelTangentialPressureAction-&amp;gt;setData(TabletCanvas::TangentialPressureValuator);
    alphaChannelTangentialPressureAction-&amp;gt;setCheckable(true);
    alphaChannelTangentialPressureAction-&amp;gt;setChecked(true);

    QAction *alphaChannelTiltAction = alphaChannelMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Tilt&quot;));
    alphaChannelTiltAction-&amp;gt;setData(TabletCanvas::TiltValuator);
    alphaChannelTiltAction-&amp;gt;setCheckable(true);

    QAction *noAlphaChannelAction = alphaChannelMenu-&amp;gt;addAction(tr(&quot;No Alpha Channel&quot;));
    noAlphaChannelAction-&amp;gt;setData(TabletCanvas::NoValuator);
    noAlphaChannelAction-&amp;gt;setCheckable(true);

    QActionGroup *alphaChannelGroup = new QActionGroup(this);
    alphaChannelGroup-&amp;gt;addAction(alphaChannelPressureAction);
    alphaChannelGroup-&amp;gt;addAction(alphaChannelTangentialPressureAction);
    alphaChannelGroup-&amp;gt;addAction(alphaChannelTiltAction);
    alphaChannelGroup-&amp;gt;addAction(noAlphaChannelAction);
    connect(alphaChannelGroup, &amp;amp;QActionGroup::triggered,
            this, &amp;amp;MainWindow::setAlphaValuator);

    QMenu *colorSaturationMenu = tabletMenu-&amp;gt;addMenu(tr(&quot;&amp;amp;Color Saturation&quot;));

    QAction *colorSaturationVTiltAction = colorSaturationMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Vertical Tilt&quot;));
    colorSaturationVTiltAction-&amp;gt;setData(TabletCanvas::VTiltValuator);
    colorSaturationVTiltAction-&amp;gt;setCheckable(true);

    QAction *colorSaturationHTiltAction = colorSaturationMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Horizontal Tilt&quot;));
    colorSaturationHTiltAction-&amp;gt;setData(TabletCanvas::HTiltValuator);
    colorSaturationHTiltAction-&amp;gt;setCheckable(true);

    QAction *colorSaturationPressureAction = colorSaturationMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Pressure&quot;));
    colorSaturationPressureAction-&amp;gt;setData(TabletCanvas::PressureValuator);
    colorSaturationPressureAction-&amp;gt;setCheckable(true);

    QAction *noColorSaturationAction = colorSaturationMenu-&amp;gt;addAction(tr(&quot;&amp;amp;No Color Saturation&quot;));
    noColorSaturationAction-&amp;gt;setData(TabletCanvas::NoValuator);
    noColorSaturationAction-&amp;gt;setCheckable(true);
    noColorSaturationAction-&amp;gt;setChecked(true);

    QActionGroup *colorSaturationGroup = new QActionGroup(this);
    colorSaturationGroup-&amp;gt;addAction(colorSaturationVTiltAction);
    colorSaturationGroup-&amp;gt;addAction(colorSaturationHTiltAction);
    colorSaturationGroup-&amp;gt;addAction(colorSaturationPressureAction);
    colorSaturationGroup-&amp;gt;addAction(noColorSaturationAction);
    connect(colorSaturationGroup, &amp;amp;QActionGroup::triggered,
            this, &amp;amp;MainWindow::setSaturationValuator);

    QAction *compressAction = tabletMenu-&amp;gt;addAction(tr(&quot;Co&amp;amp;mpress events&quot;));
    compressAction-&amp;gt;setCheckable(true);
    connect(compressAction, &amp;amp;QAction::toggled, this, &amp;amp;MainWindow::setEventCompression);

    QMenu *helpMenu = menuBar()-&amp;gt;addMenu(&quot;&amp;amp;Help&quot;);
    helpMenu-&amp;gt;addAction(tr(&quot;A&amp;amp;bout&quot;), this, &amp;amp;MainWindow::about);
    helpMenu-&amp;gt;addAction(tr(&quot;About &amp;amp;Qt&quot;), qApp, &amp;amp;QApplication::aboutQt);
}

</db:programlisting>
</db:article>
