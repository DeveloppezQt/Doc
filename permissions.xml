<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Application Permissions</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Managing application permissions.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Many features of today's devices and operating systems can have significant privacy, security, and performance implications if misused. It's therefore increasingly common for platforms to require explicit consent from the user before accessing these features.</db:para>
<db:para>The Qt permission APIs allow the application to check or request permission for such features in a cross platform manner.</db:para>
<db:section xml:id="usage">
<db:title>Usage</db:title>
<db:para>A feature that commonly requires user consent is access to the microphone of the device. An application for recording voice memos would perhaps look something like this initially:</db:para>
<db:programlisting language="cpp">void VoiceMemoWidget::onRecordingInitiated()
{
    m_microphone-&gt;startRecording();
}
</db:programlisting>
<db:para>To ensure this application works well on platforms that require user consent for microphone access we would extend it like this:</db:para>
<db:programlisting language="cpp">void VoiceMemoWidget::onRecordingInitiated()
{
    QMicrophonePermission microphonePermission;
    switch (qApp-&gt;checkPermission(microphonePermission)) {
    case Qt::PermissionStatus::Undetermined:
        qApp-&gt;requestPermission(microphonePermission, this,
                    &amp;VoiceMemoWidget::onRecordingInitiated);
        return;
    case Qt::PermissionStatus::Denied:
        m_permissionInstructionsDialog-&gt;show();
        return;
    case Qt::PermissionStatus::Granted:
        m_microphone-&gt;startRecording();
    }
}
</db:programlisting>
<db:para>We first check if we already know the status of the microphone permission. If we don't we initiate a permission request to determine the current status, which will potentially ask the user for consent. We connect the result of the request to the slot we're already in, so that we get another chance at evaluating the permission status.</db:para>
<db:para>Once the permission status is known, either because we had been granted or denied permission at an earlier time, or after getting the result back from the request we just initiated, we redirect the user to a dialog explaining why we can not record voice memos at this time (if the permission was denied), or proceed to using the microphone (if permission was granted).</db:para>
<db:note>
<db:para>On macOS and iOS permissions can currently only be requested for GUI applications.</db:para>
</db:note>
<db:section xml:id="declaring-permissions">
<db:title>Declaring Permissions</db:title>
<db:para>Some platforms require that the permissions you request are declared up front at build time.</db:para>
<db:section xml:id="apple-platforms">
<db:title>Apple platforms</db:title>
<db:anchor xml:id="apple-usage-description"/>
<db:para>Each permission you request must be accompanied by a so called <db:emphasis>usage description</db:emphasis> string in the application's <db:link xlink:href="">Info.plist</db:link> file, describing why the application needs to access the given permission. For example:</db:para>
<db:programlisting language="cpp" role="bad">&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;
&lt;string&gt;The microphone is used to record voice memos.&lt;/string&gt;
</db:programlisting>
<db:para>The relevant usage description keys are described in the documentation for each permission type.</db:para>
<db:para>To ensure the relevant permission backend is included with your application, please <db:link xlink:href="">point the build system to your custom Info.plist</db:link>.</db:para>
</db:section>
<db:section xml:id="android">
<db:title>Android</db:title>
<db:anchor xml:id="android-uses-permission"/>
<db:para>Each permission you request must be accompanied by a uses-permission entry in the application's AndroidManifest.xml file. For example:</db:para>
<db:programlisting language="cpp" role="bad">&lt;manifest ...&gt;
    &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot;/&gt;
&lt;/manifest&gt;
</db:programlisting>
<db:para>To ensure the relevant permission backend is included with your application, please <db:link xlink:href="cmake-target-property-qt-android-package-source-dir.xml">point the build system to your custom AndroidManifest.xml</db:link>.</db:para>
<db:para>The relevant permission names are described in the documentation for each permission type.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="available-permissions">
<db:title>Available Permissions</db:title>
<db:para>The following permissions types are available:</db:para>
<db:variablelist role="permissions">
<db:varlistentry>
<db:term><db:link xlink:href="qbluetoothpermission.xml" xlink:role="class">QBluetoothPermission</db:link></db:term>
<db:listitem>
<db:para>Access Bluetooth peripherals.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcalendarpermission.xml" xlink:role="class">QCalendarPermission</db:link></db:term>
<db:listitem>
<db:para>Access the user's calendar.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcamerapermission.xml" xlink:role="class">QCameraPermission</db:link></db:term>
<db:listitem>
<db:para>Access the camera for taking pictures or videos.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcontactspermission.xml" xlink:role="class">QContactsPermission</db:link></db:term>
<db:listitem>
<db:para>Access the user's contacts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlocationpermission.xml" xlink:role="class">QLocationPermission</db:link></db:term>
<db:listitem>
<db:para>Access the user's location.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmicrophonepermission.xml" xlink:role="class">QMicrophonePermission</db:link></db:term>
<db:listitem>
<db:para>Access the microphone for monitoring or recording sound.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="best-practices">
<db:title>Best Practices</db:title>
<db:para>To ensure the best possible user experience for the end user we recommend adopting the following best practices for managing application permissions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Request the minimal set of permissions needed. For example, if you only need access to the microphone, do <db:emphasis>not</db:emphasis> request camera permission just in case. Use the properties of individual permission types to limit the permission scope even further, for example <db:link xlink:href="qcontactspermission.xml#setAccessMode">QContactsPermission::setAccessMode</db:link>() to request read only access.</db:para>
</db:listitem>
<db:listitem>
<db:para>Request permissions in response to specific actions by the user. For example, defer requesting microphone permission until the user presses the button to record audio. Associating the permission request to a specific action gives the user a clearer context of why the permission is needed. Do <db:emphasis>not</db:emphasis> request all needed permission on startup.</db:para>
</db:listitem>
<db:listitem>
<db:para>Present extra context and explanation if needed. Sometimes the action by the user is not enough context. Consider presenting an explanation-dialog after the user has initiated the action, but before requesting the permission, so the user is aware of what's about to happen when the system permission dialog subsequently pops up.</db:para>
</db:listitem>
<db:listitem>
<db:para>Be transparent and explicit about why permissions are needed. In explanation dialogs and usage descriptions, be transparent about why the particular permission is needed for your application to provide a specific feature, so users can make informed decisions.</db:para>
</db:listitem>
<db:listitem>
<db:para>Account for denied permissions. The permissions you request may be denied for various reasons. You should always account for this situation, by gracefully degrading the experience of your application, and presenting clear explanations the user about the situation.</db:para>
</db:listitem>
<db:listitem>
<db:para>Never request permissions from a library. The request of permissions should be done as close as possible to the user, where the information needed to make good decisions on the points above is available. Libraries can check permissions, to ensure they have the prerequisites for doing their work, but if the permission is undetermined or denied this should be reflected through the library's API, so that the application in turn can request the necessary permissions.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Information Property List Files</db:link></db:member>
<db:member><db:link xlink:href="https://doc.qt.io/qtcreator/creator-deploying-android.html#editing-manifest-files">Qt Creator: Editing Manifest Files</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
