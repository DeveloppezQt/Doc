<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNearFieldShareTarget Class</db:title>
<db:productname>QtNfc</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt NFC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnearfieldsharetarget.xml">QNearFieldShareTarget</db:link> class transfers data to remote device over NFC.</db:para>
<db:para>This class was introduced in Qt 5.3.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNearFieldShareTarget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += nfc</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNearFieldShareTarget is part of <db:simplelist><db:member>connectivity-nfc</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qnearfieldsharetarget.xml">QNearFieldShareTarget</db:link> class can be used for sharing NDEF message or files to a remote NFC enabled device supporting the same protocol.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnearfieldsharemanager.xml">QNearFieldShareManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QNearFieldShareTarget">
<db:title>[virtual] QNearFieldShareTarget::~QNearFieldShareTarget()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QNearFieldShareTarget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QNearFieldShareTarget()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the near field share target.</db:para>
</db:section>
<db:section xml:id="cancel">
<db:title>void QNearFieldShareTarget::cancel()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cancel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cancel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Cancel the data or file sharing in progress.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>void QNearFieldShareTarget::error(QNearFieldShareManager::ShareError <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>error</db:methodname>
<db:methodparam>
<db:type>QNearFieldShareManager::ShareError</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void error(QNearFieldShareManager::ShareError error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever an <db:code role="parameter">error</db:code> occurs during transfer.</db:para>
</db:section>
<db:section xml:id="isShareInProgress">
<db:title>bool QNearFieldShareTarget::isShareInProgress() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isShareInProgress</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isShareInProgress() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if data or file sharing is in progress, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="share">
<db:title>bool QNearFieldShareTarget::share(const QNdefMessage &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>share</db:methodname>
<db:methodparam>
<db:type>const QNdefMessage &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool share(const QNdefMessage &amp;message)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Share the NDEF <db:code role="parameter">message</db:code> via the share target. This method starts sharing asynchronously and returns immediately. The method returns true if the request is accepted, otherwise returns false. Sharing is completed when the <db:link xlink:href="qnearfieldsharetarget.xml#shareFinished">shareFinished</db:link>() signal is emitted.</db:para>
</db:section>
<db:section xml:id="share-1">
<db:title>bool QNearFieldShareTarget::share(const QList&lt;QFileInfo&gt; &amp;<db:emphasis>files</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>share</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QFileInfo&gt; &amp;</db:type>
<db:parameter>files</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool share(const QList&lt;QFileInfo&gt; &amp;files)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Share the <db:code role="parameter">files</db:code> via the share target. This method starts sharing asynchronously and returns immediately. The method returns true if the request is accepted, otherwise returns false. Sharing is completed when the <db:link xlink:href="qnearfieldsharetarget.xml#shareFinished">shareFinished</db:link>() signal is emitted.</db:para>
</db:section>
<db:section xml:id="shareError">
<db:title>QNearFieldShareManager::ShareError QNearFieldShareTarget::shareError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNearFieldShareManager::ShareError</db:type>
<db:methodname>shareError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNearFieldShareManager::ShareError shareError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the error code of the error that occurred.</db:para>
</db:section>
<db:section xml:id="shareFinished">
<db:title>void QNearFieldShareTarget::shareFinished()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>shareFinished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void shareFinished()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a data or file transfer has completed successfully.</db:para>
</db:section>
<db:section xml:id="shareModes">
<db:title>QNearFieldShareManager::ShareModes QNearFieldShareTarget::shareModes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNearFieldShareManager::ShareModes</db:type>
<db:methodname>shareModes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNearFieldShareManager::ShareModes shareModes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the share mode supported by the share target.</db:para>
</db:section>
</db:section>
</db:article>
