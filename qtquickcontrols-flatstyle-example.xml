<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Controls - Flat Style</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A QML app using Qt Quick Controls 2 and a QML plugin with customized controls.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Flat</db:emphasis> Style shows how to integrate customized controls into Qt Quick Designer. The example uses a pure QML plugin to define constants in a singleton. For the declarative parts of the UI, <db:code>.ui.qml</db:code> files are used. These can be edited visually in Qt Quick Designer.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-flatstyle.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="qml-plugin">
<db:title>QML Plugin</db:title>
<db:para>The example contains a plugin called Theme. The plugin consists of a QML file <db:code>Theme.qml</db:code> and a <db:code>qmldir</db:code> file. The plugin is located in the imports subdirectory and added as a resource. To ensure the plugin is found by QML, we add the import directory to the import paths of the engine in <db:code>main.cpp</db:code>.</db:para>
<db:programlisting language="cpp">...
engine.addImportPath(&quot;:/imports&quot;);
...
</db:programlisting>
<db:para>To ensure the code model and Qt Quick Designer can find the plugin, we add the following line to <db:emphasis>flatstyle.pro</db:emphasis>.</db:para>
<db:programlisting language="cpp">QML_IMPORT_PATH = $$PWD/imports
</db:programlisting>
<db:para>All colors, font parameters, and size constants that are used in this example are defined as properties in the singleton called <db:emphasis>Theme.qml</db:emphasis>. Usually such attribute values are defined as constants as they are not suppose to change at run time. In this example, we allow the user to change some attributes like the main color, the size parameter, and some font parameters while the application is running.</db:para>
<db:para>Defining these attribute values in a singleton makes it easy to maintain and change them. This pattern makes it easy to implement theming.</db:para>
</db:section>
<db:section xml:id="implementing-custom-controls">
<db:title>Implementing Custom Controls</db:title>
<db:para>The plugin also contains a style for a couple of controls that implement a custom look and feel. This style is located in <db:code>Flat</db:code> and is set as the style for the application in <db:code>qtquickcontrols2.conf</db:code>.</db:para>
<db:para>The example uses the states of a Qt Quick Item to implement the different states of a control. This has the advantage that we can define the custom look in Qt Quick Designer and we can easily verify the different states of a control. To edit the indicator of a switch in Qt Quick Designer we can open Switch.qml and then enter the implementation of the indicator called <db:code>switchHandle</db:code> using the combo box on the top next to the combo box for the open documents.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-flatstyle-creator.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The application itself is just a simple form that allows the user to adjust a couple of parameters of the custom controls. The user can choose another main color, set the font to bold or underline, and increase the size of the controls by toggling a switch.</db:para>
<db:para><db:emphasis>MainForm.ui.qml</db:emphasis> is just the pure declarative definition of the form, while <db:emphasis>flatstyle.qml</db:emphasis> instantiates the form and implements the logic.</db:para>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="flatstyle/Flat/Button.qml">flatstyle/Flat/Button.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="flatstyle/Flat/CheckBox.qml">flatstyle/Flat/CheckBox.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="flatstyle/Flat/Switch.qml">flatstyle/Flat/Switch.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="flatstyle/MainForm.ui.qml">flatstyle/MainForm.ui.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="flatstyle/flatstyle.pro">flatstyle/flatstyle.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="flatstyle/flatstyle.qml">flatstyle/flatstyle.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="flatstyle/imports/Theme/Theme.qml">flatstyle/imports/Theme/Theme.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="flatstyle/imports/Theme/qmldir">flatstyle/imports/Theme/qmldir</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="flatstyle/main.cpp">flatstyle/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="flatstyle/qtquickcontrols2.conf">flatstyle/qtquickcontrols2.conf</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
