<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNdefRecord Class</db:title>
<db:productname>QtNfc</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt NFC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link> class provides an NFC NDEF record.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNdefRecord</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += nfc</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qndefnfcsmartposterrecord.xml" xlink:role="class">QNdefNfcSmartPosterRecord</db:link>, <db:link xlink:href="qndefnfctextrecord.xml" xlink:role="class">QNdefNfcTextRecord</db:link>, and <db:link xlink:href="qndefnfcurirecord.xml" xlink:role="class">QNdefNfcUriRecord</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNdefRecord is part of <db:simplelist><db:member>connectivity-nfc</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link> and derived classes are used to parse the contents of <db:link xlink:href="qndefmessage.xml">NDEF messages</db:link> and create new NDEF messages.</db:para>
<db:para>Use <db:link xlink:href="qndefrecord.xml#typeNameFormat">typeNameFormat</db:link>() and <db:link xlink:href="qndefrecord.xml#setTypeNameFormat">setTypeNameFormat</db:link>() to get and set the type name format of the NDEF record.</db:para>
<db:para>Use <db:link xlink:href="qndefrecord.xml#type">type</db:link>() and <db:link xlink:href="qndefrecord.xml#setType">setType</db:link>() to get and set the type of the NDEF record.</db:para>
<db:para>Use <db:link xlink:href="qndefrecord.xml#id">id</db:link>() and <db:link xlink:href="qndefrecord.xml#setId">setId</db:link>() to get and set the id of the NDEF record.</db:para>
<db:para>Use <db:link xlink:href="qndefrecord.xml#payload">payload</db:link>() and <db:link xlink:href="qndefrecord.xml#setPayload">setPayload</db:link>() to get and set the NDEF record payload. <db:link xlink:href="qndefrecord.xml#isEmpty">isEmpty</db:link>() can be used to test if the payload is empty.</db:para>
<db:para><db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link> is an implicitly shared class. This means you can efficiently convert between <db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link> and specialized record classes. The isRecordType() template function can be used to test if a conversion is possible. The following example shows how to test if a <db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link> is an NFC RTD Text record and extract the text information from it.</db:para>
<db:programlisting language="cpp">if (record.isRecordType&lt;QNdefNfcTextRecord&gt;()) {
    QNdefNfcTextRecord textRecord(record);

    qDebug() &lt;&lt; textRecord.text();
}
</db:programlisting>
<db:section xml:id="creating-specialized-ndef-record-classes">
<db:title>Creating Specialized NDEF Record Classes</db:title>
<db:para>Specialized NDEF record classes can be easily created with the <db:link xlink:href="qndefrecord.xml#Q_DECLARE_NDEF_RECORD">Q_DECLARE_NDEF_RECORD</db:link>() and <db:link xlink:href="qndefrecord.xml#Q_DECLARE_ISRECORDTYPE_FOR_NDEF_RECORD">Q_DECLARE_ISRECORDTYPE_FOR_NDEF_RECORD</db:link>() macros. The following example shows the class declaration of the hypothetical <db:emphasis>example.com:f</db:emphasis> record type that encapsulates a single int property foo.</db:para>
<db:programlisting language="cpp">class ExampleComF : public QNdefRecord
{
public:
    Q_DECLARE_NDEF_RECORD(ExampleComF, QNdefRecord::ExternalRtd, &quot;example.com:f&quot;,
                          QByteArray(sizeof(int), char(0)))

    int foo() const;
    void setFoo(int v);
};

Q_DECLARE_ISRECORDTYPE_FOR_NDEF_RECORD(ExampleComF, QNdefRecord::ExternalRtd, &quot;example.com:f&quot;)
</db:programlisting>
<db:para>The developer only needs to provide implementations for the <db:code>foo()</db:code> and <db:code>setFoo()</db:code> functions that parse and set the contents of the NDEF record's payload.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="TypeNameFormat-enum">
<db:title>enum QNdefRecord::TypeNameFormat</db:title>
<db:para>This enum describes the type name format of an NDEF record.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link></db:emphasis>::Empty</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
<db:td>
<db:para>An empty NDEF record, the record does not contain a payload</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link></db:emphasis>::NfcRtd</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>The NDEF record type is defined by an NFC RTD Specification</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link></db:emphasis>::Mime</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>The NDEF record type follows the construct described in RFC 2046</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link></db:emphasis>::Uri</db:code></db:para>
</db:td>
<db:td><db:code>0x03</db:code></db:td>
<db:td>
<db:para>The NDEF record type follows the construct described in RFC 3986</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link></db:emphasis>::ExternalRtd</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>The NDEF record type follows the construct for external type names described the NFC RTD Specification</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link></db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0x05</db:code></db:td>
<db:td>
<db:para>The type of the record is unknown and should be treated similar to content with MIME type 'application/octet-stream' without further context</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNdefRecord">
<db:title>QNdefRecord::QNdefRecord()</db:title>
<db:para>Constructs a new empty NDEF record.</db:para>
</db:section>
<db:section xml:id="QNdefRecord-1">
<db:title>QNdefRecord::QNdefRecord(const QNdefRecord &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a new NDEF record that is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNdefRecord">
<db:title>[noexcept] QNdefRecord::~QNdefRecord()</db:title>
<db:para>Destroys the NDEF record.</db:para>
</db:section>
<db:section xml:id="id">
<db:title>QByteArray QNdefRecord::id() const</db:title>
<db:para>Returns the id of the NDEF record.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndefrecord.xml#setId">setId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QNdefRecord::isEmpty() const</db:title>
<db:para>Returns true if the NDEF record contains an empty payload; otherwise return false.</db:para>
<db:para>This is equivalent to calling <db:code>payload().isEmpty()</db:code>.</db:para>
</db:section>
<db:section xml:id="payload">
<db:title>QByteArray QNdefRecord::payload() const</db:title>
<db:para>Returns the payload of the NDEF record.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndefrecord.xml#setPayload">setPayload</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setId">
<db:title>void QNdefRecord::setId(const QByteArray &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:para>Sets the id of the NDEF record to <db:code role="parameter">id</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndefrecord.xml#id">id</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPayload">
<db:title>void QNdefRecord::setPayload(const QByteArray &amp;<db:emphasis>payload</db:emphasis>)</db:title>
<db:para>Sets the payload of the NDEF record to <db:code role="parameter">payload</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndefrecord.xml#payload">payload</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setType">
<db:title>void QNdefRecord::setType(const QByteArray &amp;<db:emphasis>type</db:emphasis>)</db:title>
<db:para>Sets the type of the NDEF record to <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndefrecord.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTypeNameFormat">
<db:title>void QNdefRecord::setTypeNameFormat(QNdefRecord::TypeNameFormat <db:emphasis>typeNameFormat</db:emphasis>)</db:title>
<db:para>Sets the type name format of the NDEF record to <db:code role="parameter">typeNameFormat</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndefrecord.xml#typeNameFormat">typeNameFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>QByteArray QNdefRecord::type() const</db:title>
<db:para>Returns the type of the NDEF record.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndefrecord.xml#setType">setType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="typeNameFormat">
<db:title>QNdefRecord::TypeNameFormat QNdefRecord::typeNameFormat() const</db:title>
<db:para>Returns the type name format of the NDEF record.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndefrecord.xml#setTypeNameFormat">setTypeNameFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QNdefRecord::operator!=(const QNdefRecord &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this NDEF record does not equal <db:code role="parameter">other</db:code>; otherwise return false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QNdefRecord &amp;QNdefRecord::operator=(const QNdefRecord &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns this NDEF record to <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QNdefRecord::operator==(const QNdefRecord &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> and this NDEF record are the same.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_DECLARE_ISRECORDTYPE_FOR_NDEF_RECORD">
<db:title>Q_DECLARE_ISRECORDTYPE_FOR_NDEF_RECORD(<db:emphasis>className</db:emphasis>, <db:emphasis>typeNameFormat</db:emphasis>, <db:emphasis>type</db:emphasis>)</db:title>
<db:para>This macro declares a template specialization for the QNdefRecord::isRecordType() function.</db:para>
<db:para>This macro should be used in the header file directly after the definition of a specialized NDEF record class.</db:para>
<db:para><db:code role="parameter">className</db:code> is the name of the specialized class, <db:code role="parameter">typeNameFormat</db:code> is the appropriate <db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::TypeNameFormat</db:link> for the custom type and <db:code role="parameter">type</db:code> is the type without the NID or NSS prefixes. That is <db:emphasis>example.com:f</db:emphasis> not <db:emphasis>urn:nfc:ext:example.com:f</db:emphasis>.</db:para>
<db:para>See the section on <db:link xlink:href="qndefrecord.xml#creating-specialized-ndef-record-classes">Creating specialized NDEF record classes</db:link> for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndefrecord.xml#Q_DECLARE_NDEF_RECORD">Q_DECLARE_NDEF_RECORD</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECLARE_NDEF_RECORD">
<db:title>Q_DECLARE_NDEF_RECORD(<db:emphasis>className</db:emphasis>, <db:emphasis>typeNameFormat</db:emphasis>, <db:emphasis>type</db:emphasis>, <db:emphasis>initialPayload</db:emphasis>)</db:title>
<db:para>This macro declares default and copy constructors for specialized NDEF record classes.</db:para>
<db:para><db:code role="parameter">className</db:code> is the name of the specialized class, <db:code role="parameter">typeNameFormat</db:code> is the appropriate <db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::TypeNameFormat</db:link> for the custom type and <db:code role="parameter">type</db:code> is the type without the NID or NSS prefixes. That is <db:emphasis>example.com:f</db:emphasis> not <db:emphasis>urn:nfc:ext:example.com:f</db:emphasis>. <db:code role="parameter">initialPayload</db:code> is the initial payload of an empty record, it must be a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> or a type that can be implicitly converted into a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>See the section on <db:link xlink:href="qndefrecord.xml#creating-specialized-ndef-record-classes">Creating specialized NDEF record classes</db:link> for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndefrecord.xml#Q_DECLARE_ISRECORDTYPE_FOR_NDEF_RECORD">Q_DECLARE_ISRECORDTYPE_FOR_NDEF_RECORD</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
