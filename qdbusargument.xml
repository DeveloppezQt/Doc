<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDBusArgument Class</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt D-Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> class is used to marshall and demarshall D-Bus arguments.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusArgument</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS DBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::DBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class is used to send arguments over D-Bus to remote applications and to receive them back. D-Bus offers an extensible type system, based on a few primitive types and associations of them. See the <db:link xlink:href="qdbustypesystem.xml">Qt D-Bus Type System</db:link> page for more information on the type system.</db:para>
<db:para><db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> is the central class in the Qt D-Bus type system, providing functions to marshall and demarshall the primitive types. The compound types are then created by association of one or more of the primitive types in arrays, dictionaries or structures.</db:para>
<db:para>The following example illustrates how a structure containing an integer and a string can be constructed using the <db:link xlink:href="qdbustypesystem.xml">Qt D-Bus type system</db:link>:</db:para>
<db:programlisting language="cpp">struct MyStructure
{
    int count;
    QString name;

    // ...
};
Q_DECLARE_METATYPE(MyStructure)

// Marshall the MyStructure data into a D-Bus argument
QDBusArgument &amp;amp;operator&amp;lt;&amp;lt;(QDBusArgument &amp;amp;argument, const MyStructure &amp;amp;myStruct)
{
    argument.beginStructure();
    argument &amp;lt;&amp;lt; myStruct.count &amp;lt;&amp;lt; myStruct.name;
    argument.endStructure();
    return argument;
}

// Retrieve the MyStructure data from the D-Bus argument
const QDBusArgument &amp;amp;operator&amp;gt;&amp;gt;(const QDBusArgument &amp;amp;argument, MyStructure &amp;amp;myStruct)
{
    argument.beginStructure();
    argument &amp;gt;&amp;gt; myStruct.count &amp;gt;&amp;gt; myStruct.name;
    argument.endStructure();
    return argument;
}
</db:programlisting>
<db:para>The type has to be registered with <db:link xlink:href="qdbusargument.xml#qDBusRegisterMetaType">qDBusRegisterMetaType</db:link>() before it can be used with <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link>. Therefore, somewhere in your program, you should add the following code:</db:para>
<db:programlisting language="cpp">qDBusRegisterMetaType&amp;lt;MyStructure&amp;gt;();
</db:programlisting>
<db:para>Once registered, a type can be used in outgoing method calls (placed with <db:link xlink:href="qdbusabstractinterface.xml#call-1">QDBusAbstractInterface::call</db:link>()), signal emissions from registered objects or in incoming calls from remote applications.</db:para>
<db:para>It is important to note that the <db:code>operator&lt;&lt;</db:code> and <db:code>operator&gt;&gt;</db:code> streaming functions must always produce the same number of entries in case of structures, both in reading and in writing (marshalling and demarshalling), otherwise calls and signals may start to silently fail.</db:para>
<db:para>The following example illustrates this wrong usage in context of a class that may contain invalid data:</db:para>
<db:programlisting language="cpp">//bad code
    // Wrongly marshall the MyTime data into a D-Bus argument
    QDBusArgument &amp;amp;operator&amp;lt;&amp;lt;(QDBusArgument &amp;amp;argument, const MyTime &amp;amp;mytime)
    {
        argument.beginStructure();
        if (mytime.isValid)
            argument &amp;lt;&amp;lt; true &amp;lt;&amp;lt; mytime.hour
                     &amp;lt;&amp;lt; mytime.minute &amp;lt;&amp;lt; mytime.second;
        else
            argument &amp;lt;&amp;lt; false;
        argument.endStructure();
        return argument;
    }
</db:programlisting>
<db:para>In this example, both the <db:code>operator&lt;&lt;</db:code> and the <db:code>operator&gt;&gt;</db:code> functions may produce a different number of reads/writes. This can confuse the Qt D-Bus type system and should be avoided.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusabstractinterface.xml">QDBusAbstractInterface</db:link></db:member>
<db:member><db:link xlink:href="qdbustypesystem.xml">The Qt D-Bus type system</db:link></db:member>
<db:member><db:link xlink:href="usingadaptors.xml">Using Adaptors</db:link></db:member>
<db:member><db:link xlink:href="qdbusargument.xml#qdbus_cast">qdbus_cast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ElementType-enum">
<db:title>enum QDBusArgument::ElementType</db:title>
<db:enumsynopsis>
<db:enumname>ElementType</db:enumname>
<db:enumitem>
<db:enumidentifier>BasicType</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>VariantType</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ArrayType</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StructureType</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MapType</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MapEntryType</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownType</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the type of element held by the argument.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link></db:emphasis>::BasicType</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A basic element, which is understood by <db:link xlink:href="qvariant.xml">QVariant</db:link>. The following types are considered basic: bool, byte, short, ushort, int, uint, qint64, quint64, double, <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, <db:link xlink:href="qdbusobjectpath.xml">QDBusObjectPath</db:link>, <db:link xlink:href="qdbussignature.xml">QDBusSignature</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link></db:emphasis>::VariantType</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The variant element (<db:link xlink:href="qdbusvariant.xml">QDBusVariant</db:link>)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link></db:emphasis>::ArrayType</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An array element, usually represented by <db:link xlink:href="qlist.xml">QList</db:link>&lt;T&gt;. Note: <db:link xlink:href="qbytearray.xml">QByteArray</db:link> and associative maps are not considered arrays, even if the D-Bus protocol transports them as such.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link></db:emphasis>::StructureType</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>A custom type represented by a structure, like <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, <db:link xlink:href="qpoint.xml">QPoint</db:link>, etc.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link></db:emphasis>::MapType</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>An associative container, like <db:link xlink:href="qmap.xml">QMap</db:link>&lt;Key, Value&gt; or <db:link xlink:href="qhash.xml#qhash">QHash</db:link>&lt;Key, Value&gt;</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link></db:emphasis>::MapEntryType</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>One entry in an associative container: both the key and the value form one map-entry type.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link></db:emphasis>::UnknownType</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>The type is unknown or we have reached the end of the list.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#currentType">currentType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDBusArgument">
<db:title>QDBusArgument::QDBusArgument()</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusArgument</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> argument.</db:para>
<db:para>An empty <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> object does not allow either reading or writing to be performed.</db:para>
</db:section>
<db:section xml:id="QDBusArgument-1">
<db:title>QDBusArgument::QDBusArgument(const QDBusArgument &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusArgument</db:methodname>
<db:methodparam>
<db:type>const QDBusArgument &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument(const QDBusArgument &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of the <db:code role="parameter">other</db:code> <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> object.</db:para>
<db:para>Both objects will therefore contain the same state from this point forward. QDBusArguments are explicitly shared and, therefore, any modification to either copy will affect the other one too.</db:para>
</db:section>
<db:section xml:id="dtor.QDBusArgument">
<db:title>QDBusArgument::~QDBusArgument()</db:title>
<db:destructorsynopsis>
<db:methodname>~QDBusArgument</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDBusArgument()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Disposes of the resources associated with this <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> object.</db:para>
</db:section>
<db:section xml:id="asVariant">
<db:title>QVariant QDBusArgument::asVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>asVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant asVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current argument in the form of a <db:link xlink:href="qvariant.xml">QVariant</db:link>. Basic types will be decoded and returned in the <db:link xlink:href="qvariant.xml">QVariant</db:link>, but for complex types, this function will return a <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> object in the <db:link xlink:href="qvariant.xml">QVariant</db:link>. It is the caller's responsibility to decode the argument (for example, by calling asVariant() in it).</db:para>
<db:para>For example, if the current argument is an INT32, this function will return a <db:link xlink:href="qvariant.xml">QVariant</db:link> with an argument of type <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link>. For an array of INT32, it will return a <db:link xlink:href="qvariant.xml">QVariant</db:link> containing a <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link>.</db:para>
<db:para>If an error occurs or if there are no more arguments to decode (i.e., we are at the end of the argument list), this function will return an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#atEnd">atEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="atEnd">
<db:title>bool QDBusArgument::atEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>atEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool atEnd() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if there are no more elements to be extracted from this <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link>. This function is usually used in <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> objects returned from <db:link xlink:href="qdbusargument.xml#beginMap-2">beginMap</db:link>() and <db:link xlink:href="qdbusargument.xml#beginArray-2">beginArray</db:link>().</db:para>
</db:section>
<db:section xml:id="beginArray-1">
<db:title>void QDBusArgument::beginArray(QMetaType <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>beginArray</db:methodname>
<db:methodparam>
<db:type>QMetaType</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginArray(QMetaType id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens a new D-Bus array suitable for appending elements of meta-type <db:code role="parameter">id</db:code>.</db:para>
<db:para>This function is used usually in <db:code>operator&lt;&lt;</db:code> streaming operators, as in the following example:</db:para>
<db:programlisting language="cpp">// Append an array of MyElement types
QDBusArgument &amp;amp;operator&amp;lt;&amp;lt;(QDBusArgument &amp;amp;argument, const MyArray &amp;amp;myArray)
{
    argument.beginArray(qMetaTypeId&amp;lt;MyElement&amp;gt;());
    for (const auto &amp;amp;element : myArray)
        argument &amp;lt;&amp;lt; element;
    argument.endArray();
    return argument;
}
</db:programlisting>
<db:para>If the type you want to marshall is a <db:link xlink:href="qlist.xml">QList</db:link> or any of the Qt's <db:link xlink:href="containers.xml">Container Classes</db:link> that take one template parameter, you need not declare an <db:code>operator&lt;&lt;</db:code> function for it, since Qt D-Bus provides generic templates to do the job of marshalling the data. The same applies for STL's sequence containers, such as <db:code>std::list</db:code>, <db:code>std::vector</db:code>, etc.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#endArray">endArray</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginStructure">beginStructure</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginMap-2">beginMap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginArray-2">
<db:title>void QDBusArgument::beginArray() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>beginArray</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginArray() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Recurses into the D-Bus array to allow extraction of the array elements.</db:para>
<db:para>This function is used usually in <db:code>operator&gt;&gt;</db:code> streaming operators, as in the following example:</db:para>
<db:programlisting language="cpp">// Extract a MyArray array of MyElement elements
const QDBusArgument &amp;amp;operator&amp;gt;&amp;gt;(const QDBusArgument &amp;amp;argument, MyArray &amp;amp;myArray)
{
    argument.beginArray();
    myArray.clear();

    while (!argument.atEnd()) {
        MyElement element;
        argument &amp;gt;&amp;gt; element;
        myArray.append(element);
    }

    argument.endArray();
    return argument;
}
</db:programlisting>
<db:para>If the type you want to demarshall is a <db:link xlink:href="qlist.xml">QList</db:link> or any of the Qt's <db:link xlink:href="containers.xml">Container Classes</db:link> that take one template parameter, you need not declare an <db:code>operator&gt;&gt;</db:code> function for it, since Qt D-Bus provides generic templates to do the job of demarshalling the data. The same applies for STL's sequence containers, such as <db:code>std::list</db:code>, <db:code>std::vector</db:code>, etc.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#atEnd">atEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginStructure">beginStructure</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginMap-2">beginMap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginMap-1">
<db:title>void QDBusArgument::beginMap(QMetaType <db:emphasis>keyMetaType</db:emphasis>, QMetaType <db:emphasis>valueMetaType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>beginMap</db:methodname>
<db:methodparam>
<db:type>QMetaType</db:type>
<db:parameter>keyMetaType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMetaType</db:type>
<db:parameter>valueMetaType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginMap(QMetaType keyMetaType, QMetaType valueMetaType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens a new D-Bus map suitable for appending elements. Maps are containers that associate one entry (the key) to another (the value), such as Qt's <db:link xlink:href="qmap.xml">QMap</db:link> or <db:link xlink:href="qhash.xml#qhash">QHash</db:link>. The ids of the map's key and value meta types must be passed in <db:code role="parameter">keyMetaType</db:code> and <db:code role="parameter">valueMetaType</db:code> respectively.</db:para>
<db:para>This function is used usually in <db:code>operator&lt;&lt;</db:code> streaming operators, as in the following example:</db:para>
<db:programlisting language="cpp">// Append a dictionary that associates ints to MyValue types
QDBusArgument &amp;amp;operator&amp;lt;&amp;lt;(QDBusArgument &amp;amp;argument, const MyDictionary &amp;amp;myDict)
{
    argument.beginMap(QMetaType::fromType&amp;lt;int&amp;gt;(), QMetaType::fromType&amp;lt;MyValue&amp;gt;());
    MyDictionary::const_iterator i;
    for (i = myDict.cbegin(); i != myDict.cend(); ++i) {
        argument.beginMapEntry();
        argument &amp;lt;&amp;lt; i.key() &amp;lt;&amp;lt; i.value();
        argument.endMapEntry();
    }
    argument.endMap();
    return argument;
}
</db:programlisting>
<db:para>You usually don't need to provide an <db:code>operator&lt;&lt;</db:code> or <db:code>operator&gt;&gt;</db:code> function for associative containers such as <db:link xlink:href="qhash.xml#qhash">QHash</db:link> or std::map, since Qt D-Bus provides generic templates to do the job of marshalling the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#endMap">endMap</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginStructure">beginStructure</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginArray-2">beginArray</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginMapEntry">beginMapEntry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginMap-2">
<db:title>void QDBusArgument::beginMap() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>beginMap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginMap() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Recurses into the D-Bus map to allow extraction of the map's elements.</db:para>
<db:para>This function is used usually in <db:code>operator&gt;&gt;</db:code> streaming operators, as in the following example:</db:para>
<db:programlisting language="cpp">// Extract a MyDictionary map that associates integers to MyElement items
const QDBusArgument &amp;amp;operator&amp;gt;&amp;gt;(const QDBusArgument &amp;amp;argument, MyDictionary &amp;amp;myDict)
{
    argument.beginMap();
    myDict.clear();

    while (!argument.atEnd()) {
        int key;
        MyElement value;
        argument.beginMapEntry();
        argument &amp;gt;&amp;gt; key &amp;gt;&amp;gt; value;
        argument.endMapEntry();
        myDict.insert(key, value);
    }

    argument.endMap();
    return argument;
}
</db:programlisting>
<db:para>If the type you want to demarshall is a <db:link xlink:href="qmap.xml">QMap</db:link> or <db:link xlink:href="qhash.xml#qhash">QHash</db:link>, you need not declare an <db:code>operator&gt;&gt;</db:code> function for it, since Qt D-Bus provides generic templates to do the job of demarshalling the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#endMap">endMap</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginStructure">beginStructure</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginArray-2">beginArray</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginMapEntry">beginMapEntry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginMapEntry">
<db:title>void QDBusArgument::beginMapEntry()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>beginMapEntry</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginMapEntry()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens a D-Bus map entry suitable for appending the key and value entries. This function is only valid when a map has been opened with <db:link xlink:href="qdbusargument.xml#beginMap-2">beginMap</db:link>().</db:para>
<db:para>See <db:link xlink:href="qdbusargument.xml#beginMap-2">beginMap</db:link>() for an example of usage of this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#endMapEntry">endMapEntry</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginMap-2">beginMap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginMapEntry-1">
<db:title>void QDBusArgument::beginMapEntry() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>beginMapEntry</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginMapEntry() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Recurses into the D-Bus map entry to allow extraction of the key and value pair.</db:para>
<db:para>See <db:link xlink:href="qdbusargument.xml#beginMap-2">beginMap</db:link>() for an example of how this function is usually used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#endMapEntry">endMapEntry</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginMap-2">beginMap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginStructure">
<db:title>void QDBusArgument::beginStructure()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>beginStructure</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginStructure()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens a new D-Bus structure suitable for appending new arguments.</db:para>
<db:para>This function is used usually in <db:code>operator&lt;&lt;</db:code> streaming operators, as in the following example:</db:para>
<db:programlisting language="cpp">QDBusArgument &amp;amp;operator&amp;lt;&amp;lt;(QDBusArgument &amp;amp;argument, const MyStructure &amp;amp;myStruct)
{
    argument.beginStructure();
    argument &amp;lt;&amp;lt; myStruct.member1 &amp;lt;&amp;lt; myStruct.member2;
    argument.endStructure();
    return argument;
}
</db:programlisting>
<db:para>Structures can contain other structures, so the following code is also valid:</db:para>
<db:programlisting language="cpp">QDBusArgument &amp;amp;operator&amp;lt;&amp;lt;(QDBusArgument &amp;amp;argument, const MyStructure &amp;amp;myStruct)
{
    argument.beginStructure();
    argument &amp;lt;&amp;lt; myStruct.member1 &amp;lt;&amp;lt; myStruct.member2;

    argument.beginStructure();
    argument &amp;lt;&amp;lt; myStruct.member3.subMember1 &amp;lt;&amp;lt; myStruct.member3.subMember2;
    argument.endStructure();

    argument &amp;lt;&amp;lt; myStruct.member4;
    argument.endStructure();
    return argument;
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#endStructure">endStructure</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginArray-2">beginArray</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginMap-2">beginMap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginStructure-1">
<db:title>void QDBusArgument::beginStructure() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>beginStructure</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginStructure() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens a D-Bus structure suitable for extracting elements.</db:para>
<db:para>This function is used usually in <db:code>operator&gt;&gt;</db:code> streaming operators, as in the following example:</db:para>
<db:programlisting language="cpp">const QDBusArgument &amp;amp;operator&amp;gt;&amp;gt;(const QDBusArgument &amp;amp;argument, MyStructure &amp;amp;myStruct)
{
    argument.beginStructure();
    argument &amp;gt;&amp;gt; myStruct.member1 &amp;gt;&amp;gt; myStruct.member2 &amp;gt;&amp;gt; myStruct.member3;
    argument.endStructure();
    return argument;
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#endStructure">endStructure</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginArray-2">beginArray</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#beginMap-2">beginMap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentType">
<db:title>QDBusArgument::ElementType QDBusArgument::currentType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDBusArgument::ElementType</db:type>
<db:methodname>currentType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument::ElementType currentType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the classification of the current element type. If an error decoding the type occurs or if we're at the end of the argument, this function returns <db:link xlink:href="qdbusargument.xml#ElementType-enum">QDBusArgument::UnknownType</db:link>.</db:para>
<db:para>This function only makes sense when demarshalling arguments. If it is used while marshalling, it will always return <db:link xlink:href="qdbusargument.xml#ElementType-enum">UnknownType</db:link>.</db:para>
</db:section>
<db:section xml:id="endArray">
<db:title>void QDBusArgument::endArray()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>endArray</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void endArray()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes a D-Bus array opened with <db:link xlink:href="qdbusargument.xml#beginArray-2">beginArray</db:link>(). This function must be called same number of times that <db:link xlink:href="qdbusargument.xml#beginArray-2">beginArray</db:link>() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#beginArray-2">beginArray</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#endStructure">endStructure</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#endMap">endMap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endArray-1">
<db:title>void QDBusArgument::endArray() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>endArray</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void endArray() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes the D-Bus array and allow extracting of the next element after the array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#beginArray-2">beginArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endMap">
<db:title>void QDBusArgument::endMap()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>endMap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void endMap()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes a D-Bus map opened with <db:link xlink:href="qdbusargument.xml#beginMap-2">beginMap</db:link>(). This function must be called same number of times that <db:link xlink:href="qdbusargument.xml#beginMap-2">beginMap</db:link>() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#beginMap-2">beginMap</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#endStructure">endStructure</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#endArray">endArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endMap-1">
<db:title>void QDBusArgument::endMap() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>endMap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void endMap() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes the D-Bus map and allow extracting of the next element after the map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#beginMap-2">beginMap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endMapEntry">
<db:title>void QDBusArgument::endMapEntry()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>endMapEntry</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void endMapEntry()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes a D-Bus map entry opened with <db:link xlink:href="qdbusargument.xml#beginMapEntry">beginMapEntry</db:link>(). This function must be called same number of times that <db:link xlink:href="qdbusargument.xml#beginMapEntry">beginMapEntry</db:link>() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#beginMapEntry">beginMapEntry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endMapEntry-1">
<db:title>void QDBusArgument::endMapEntry() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>endMapEntry</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void endMapEntry() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes the D-Bus map entry and allow extracting of the next element on the map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#beginMapEntry">beginMapEntry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endStructure">
<db:title>void QDBusArgument::endStructure()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>endStructure</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void endStructure()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes a D-Bus structure opened with <db:link xlink:href="qdbusargument.xml#beginStructure">beginStructure</db:link>(). This function must be called same number of times that <db:link xlink:href="qdbusargument.xml#beginStructure">beginStructure</db:link>() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#beginStructure">beginStructure</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#endArray">endArray</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusargument.xml#endMap">endMap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endStructure-1">
<db:title>void QDBusArgument::endStructure() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>endStructure</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void endStructure() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes the D-Bus structure and allow extracting of the next element after the structure.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusargument.xml#beginStructure">beginStructure</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QDBusArgument::swap(QDBusArgument &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QDBusArgument &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QDBusArgument &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> instance with <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDBusArgument &amp;QDBusArgument::operator&lt;&lt;(uchar <db:emphasis>arg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusArgument &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>uchar</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument &amp; operator&lt;&lt;(uchar arg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends the primitive value <db:code role="parameter">arg</db:code> of type <db:code>BYTE</db:code> to the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDBusArgument &amp;QDBusArgument::operator&lt;&lt;(bool <db:emphasis>arg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusArgument &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument &amp; operator&lt;&lt;(bool arg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the primitive value <db:code role="parameter">arg</db:code> of type <db:code>BOOLEAN</db:code> to the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-2">
<db:title>QDBusArgument &amp;QDBusArgument::operator&lt;&lt;(short <db:emphasis>arg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusArgument &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>short</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument &amp; operator&lt;&lt;(short arg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the primitive value <db:code role="parameter">arg</db:code> of type <db:code>INT16</db:code> to the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-3">
<db:title>QDBusArgument &amp;QDBusArgument::operator&lt;&lt;(ushort <db:emphasis>arg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusArgument &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>ushort</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument &amp; operator&lt;&lt;(ushort arg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the primitive value <db:code role="parameter">arg</db:code> of type <db:code>UINT16</db:code> to the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-4">
<db:title>QDBusArgument &amp;QDBusArgument::operator&lt;&lt;(int <db:emphasis>arg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusArgument &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument &amp; operator&lt;&lt;(int arg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the primitive value <db:code role="parameter">arg</db:code> of type <db:code>INT32</db:code> to the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-5">
<db:title>QDBusArgument &amp;QDBusArgument::operator&lt;&lt;(uint <db:emphasis>arg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusArgument &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument &amp; operator&lt;&lt;(uint arg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the primitive value <db:code role="parameter">arg</db:code> of type <db:code>UINT32</db:code> to the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-6">
<db:title>QDBusArgument &amp;QDBusArgument::operator&lt;&lt;(qlonglong <db:emphasis>arg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusArgument &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>qlonglong</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument &amp; operator&lt;&lt;(qlonglong arg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the primitive value <db:code role="parameter">arg</db:code> of type <db:code>INT64</db:code> to the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-7">
<db:title>QDBusArgument &amp;QDBusArgument::operator&lt;&lt;(qulonglong <db:emphasis>arg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusArgument &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>qulonglong</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument &amp; operator&lt;&lt;(qulonglong arg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the primitive value <db:code role="parameter">arg</db:code> of type <db:code>UINT64</db:code> to the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-8">
<db:title>QDBusArgument &amp;QDBusArgument::operator&lt;&lt;(double <db:emphasis>arg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusArgument &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument &amp; operator&lt;&lt;(double arg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the primitive value <db:code role="parameter">arg</db:code> of type <db:code>DOUBLE</db:code> (double-precision floating-point) to the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-9">
<db:title>QDBusArgument &amp;QDBusArgument::operator&lt;&lt;(const QString &amp;<db:emphasis>arg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusArgument &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument &amp; operator&lt;&lt;(const QString &amp;arg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the primitive value <db:code role="parameter">arg</db:code> of type <db:code>STRING</db:code> (Unicode character string) to the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-10">
<db:title>QDBusArgument &amp;QDBusArgument::operator&lt;&lt;(const QDBusVariant &amp;<db:emphasis>arg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusArgument &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QDBusVariant &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument &amp; operator&lt;&lt;(const QDBusVariant &amp;arg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the primitive value <db:code role="parameter">arg</db:code> of type <db:code>VARIANT</db:code> to the D-Bus stream.</db:para>
<db:para>A D-Bus variant type can contain any type, including other variants. It is similar to the Qt <db:link xlink:href="qvariant.xml">QVariant</db:link> type.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-11">
<db:title>QDBusArgument &amp;QDBusArgument::operator&lt;&lt;(const QStringList &amp;<db:emphasis>arg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusArgument &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument &amp; operator&lt;&lt;(const QStringList &amp;arg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the <db:link xlink:href="qstringlist.xml">QStringList</db:link> given by <db:code role="parameter">arg</db:code> as <db:code>ARRAY of STRING</db:code> to the D-Bus stream.</db:para>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> and <db:link xlink:href="qbytearray.xml">QByteArray</db:link> are the only two non-primitive types that are supported directly by <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> because of their widespread usage in Qt applications.</db:para>
<db:para>Other arrays are supported through compound types in Qt D-Bus.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-12">
<db:title>QDBusArgument &amp;QDBusArgument::operator&lt;&lt;(const QByteArray &amp;<db:emphasis>arg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusArgument &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">12</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument &amp; operator&lt;&lt;(const QByteArray &amp;arg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> given by <db:code role="parameter">arg</db:code> as <db:code>ARRAY of BYTE</db:code> to the D-Bus stream.</db:para>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> and <db:link xlink:href="qbytearray.xml">QByteArray</db:link> are the only two non-primitive types that are supported directly by <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> because of their widespread usage in Qt applications.</db:para>
<db:para>Other arrays are supported through compound types in Qt D-Bus.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QDBusArgument &amp;QDBusArgument::operator=(const QDBusArgument &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusArgument &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDBusArgument &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusArgument &amp; operator=(const QDBusArgument &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies the <db:code role="parameter">other</db:code> <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> object into this one.</db:para>
<db:para>Both objects will therefore contain the same state from this point forward. QDBusArguments are explicitly shared and, therefore, any modification to either copy will affect the other one too.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>const QDBusArgument &amp;QDBusArgument::operator&gt;&gt;(uchar &amp;<db:emphasis>arg</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QDBusArgument &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>uchar &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusArgument &amp; operator&gt;&gt;(uchar &amp;arg) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Extracts one D-BUS primitive argument of type <db:code>BYTE</db:code> from the D-BUS stream and puts it into <db:code role="parameter">arg</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>const QDBusArgument &amp;QDBusArgument::operator&gt;&gt;(bool &amp;<db:emphasis>arg</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QDBusArgument &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>bool &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusArgument &amp; operator&gt;&gt;(bool &amp;arg) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Extracts one D-Bus primitive argument of type <db:code>BOOLEAN</db:code> from the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-2">
<db:title>const QDBusArgument &amp;QDBusArgument::operator&gt;&gt;(short &amp;<db:emphasis>arg</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QDBusArgument &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>short &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusArgument &amp; operator&gt;&gt;(short &amp;arg) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Extracts one D-Bus primitive argument of type <db:code>INT16</db:code> from the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-3">
<db:title>const QDBusArgument &amp;QDBusArgument::operator&gt;&gt;(ushort &amp;<db:emphasis>arg</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QDBusArgument &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>ushort &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusArgument &amp; operator&gt;&gt;(ushort &amp;arg) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Extracts one D-Bus primitive argument of type <db:code>UINT16</db:code> from the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-4">
<db:title>const QDBusArgument &amp;QDBusArgument::operator&gt;&gt;(int &amp;<db:emphasis>arg</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QDBusArgument &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>int &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusArgument &amp; operator&gt;&gt;(int &amp;arg) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Extracts one D-Bus primitive argument of type <db:code>INT32</db:code> from the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-5">
<db:title>const QDBusArgument &amp;QDBusArgument::operator&gt;&gt;(uint &amp;<db:emphasis>arg</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QDBusArgument &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>uint &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusArgument &amp; operator&gt;&gt;(uint &amp;arg) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Extracts one D-Bus primitive argument of type <db:code>UINT32</db:code> from the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-6">
<db:title>const QDBusArgument &amp;QDBusArgument::operator&gt;&gt;(qlonglong &amp;<db:emphasis>arg</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QDBusArgument &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>qlonglong &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusArgument &amp; operator&gt;&gt;(qlonglong &amp;arg) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Extracts one D-Bus primitive argument of type <db:code>INT64</db:code> from the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-7">
<db:title>const QDBusArgument &amp;QDBusArgument::operator&gt;&gt;(qulonglong &amp;<db:emphasis>arg</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QDBusArgument &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>qulonglong &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusArgument &amp; operator&gt;&gt;(qulonglong &amp;arg) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Extracts one D-Bus primitive argument of type <db:code>UINT64</db:code> from the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-8">
<db:title>const QDBusArgument &amp;QDBusArgument::operator&gt;&gt;(double &amp;<db:emphasis>arg</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QDBusArgument &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>double &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusArgument &amp; operator&gt;&gt;(double &amp;arg) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Extracts one D-Bus primitive argument of type <db:code>DOUBLE</db:code> (double-precision floating point) from the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-9">
<db:title>const QDBusArgument &amp;QDBusArgument::operator&gt;&gt;(QString &amp;<db:emphasis>arg</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QDBusArgument &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QString &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusArgument &amp; operator&gt;&gt;(QString &amp;arg) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Extracts one D-Bus primitive argument of type <db:code>STRING</db:code> (Unicode character string) from the D-Bus stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-10">
<db:title>const QDBusArgument &amp;QDBusArgument::operator&gt;&gt;(QDBusVariant &amp;<db:emphasis>arg</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QDBusArgument &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDBusVariant &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusArgument &amp; operator&gt;&gt;(QDBusVariant &amp;arg) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Extracts one D-Bus primitive argument of type <db:code>VARIANT</db:code> from the D-Bus stream.</db:para>
<db:para>A D-Bus variant type can contain any type, including other variants. It is similar to the Qt <db:link xlink:href="qvariant.xml">QVariant</db:link> type.</db:para>
<db:para>In case the variant contains a type not directly supported by <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link>, the value of the returned <db:link xlink:href="qdbusvariant.xml">QDBusVariant</db:link> will contain another <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link>. It is your responsibility to further demarshall it into another type.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-11">
<db:title>const QDBusArgument &amp;QDBusArgument::operator&gt;&gt;(QStringList &amp;<db:emphasis>arg</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QDBusArgument &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QStringList &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusArgument &amp; operator&gt;&gt;(QStringList &amp;arg) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Extracts an array of strings from the D-Bus stream and return it as a <db:link xlink:href="qstringlist.xml">QStringList</db:link>.</db:para>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> and <db:link xlink:href="qbytearray.xml">QByteArray</db:link> are the only two non-primitive types that are supported directly by <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> because of their widespread usage in Qt applications.</db:para>
<db:para>Other arrays are supported through compound types in Qt D-Bus.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-12">
<db:title>const QDBusArgument &amp;QDBusArgument::operator&gt;&gt;(QByteArray &amp;<db:emphasis>arg</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QDBusArgument &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QByteArray &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">12</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusArgument &amp; operator&gt;&gt;(QByteArray &amp;arg) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Extracts an array of bytes from the D-Bus stream and return it as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> and <db:link xlink:href="qbytearray.xml">QByteArray</db:link> are the only two non-primitive types that are supported directly by <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> because of their widespread usage in Qt applications.</db:para>
<db:para>Other arrays are supported through compound types in Qt D-Bus.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qDBusRegisterMetaType">
<db:title>QMetaType qDBusRegisterMetaType()</db:title>
<db:methodsynopsis>
<db:type>QMetaType</db:type>
<db:methodname>qDBusRegisterMetaType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaType qDBusRegisterMetaType()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers <db:code>T</db:code> with the <db:link xlink:href="qdbustypesystem.xml">Qt D-Bus Type System</db:link> and the Qt <db:link xlink:href="qmetatype.xml">meta-type system</db:link>, if it's not already registered.</db:para>
<db:para>To register a type, it must be declared as a meta-type with the <db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>() macro, and then registered as in the following example:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QDBusMetaType&amp;gt;

qDBusRegisterMetaType&amp;lt;MyClass&amp;gt;();
</db:programlisting>
<db:para>If <db:code>T</db:code> isn't one of Qt's <db:link xlink:href="containers.xml">container classes</db:link>, the <db:code>operator&lt;&lt;</db:code> and <db:code>operator&gt;&gt;</db:code> streaming operators between <db:code>T</db:code> and <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> must be already declared. See the <db:link xlink:href="qdbustypesystem.xml">Qt D-Bus Type System</db:link> page for more information on how to declare such types.</db:para>
<db:para>This function returns the Qt meta type id for the type (the same value that is returned from <db:link xlink:href="qmetatype.xml#qRegisterMetaType-3">qRegisterMetaType</db:link>()).</db:para>
<db:note>
<db:para>The feature that a <db:code>T</db:code> inheriting a streamable type (including the containers <db:link xlink:href="qlist.xml">QList</db:link>, <db:link xlink:href="qhash.xml#qhash">QHash</db:link> or <db:link xlink:href="qmap.xml">QMap</db:link>) can be streamed without providing custom <db:code>operator&lt;&lt;</db:code> and <db:code>operator&gt;&gt;</db:code> is deprecated as of Qt 5.7, because it ignores everything in <db:code>T</db:code> except the base class. There is no diagnostic. You should always provide these operators for all types you wish to stream and not rely on Qt-provided stream operators for base classes.</db:para>
</db:note>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbustypesystem.xml">Qt D-Bus Type System</db:link></db:member>
<db:member><db:link xlink:href="qmetatype.xml#qRegisterMetaType-3">qRegisterMetaType</db:link>()</db:member>
<db:member><db:link xlink:href="qmetatype.xml">QMetaType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qdbus_cast">
<db:title>T qdbus_cast(const QDBusArgument &amp;<db:emphasis>arg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>T</db:type>
<db:methodname>qdbus_cast</db:methodname>
<db:methodparam>
<db:type>const QDBusArgument &amp;</db:type>
<db:parameter>arg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T qdbus_cast(const QDBusArgument &amp;arg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to demarshall the contents of <db:code role="parameter">arg</db:code> into the type <db:code>T</db:code>. For example:</db:para>
<db:programlisting language="cpp">MyType item = qdbus_cast&amp;lt;Type&amp;gt;(argument);
</db:programlisting>
<db:para>Note that it is equivalent to the following:</db:para>
<db:programlisting language="cpp">MyType item;
argument &amp;gt;&amp;gt; item;
</db:programlisting>
</db:section>
</db:section>
</db:article>
