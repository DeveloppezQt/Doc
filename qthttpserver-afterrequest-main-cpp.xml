<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>AfterRequest Example</db:title>
<db:productname>QtHttpServer</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Lightweight HTTP Server Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Example of the usage of <db:code>afterRequest()</db:code>.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2020 Mikhail Svetkin &amp;lt;mikhail.svetkin@gmail.com&amp;gt;
// Copyright (C) 2018 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

#include &amp;lt;QtCore&amp;gt;
#include &amp;lt;QtHttpServer&amp;gt;

int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);

    QHttpServer httpServer;
    httpServer.route(&quot;/&quot;, []() {
        return &quot;Hello world&quot;;
    });

    httpServer.afterRequest([](QHttpServerResponse &amp;amp;&amp;amp;resp) {
        resp.setHeader(&quot;Server&quot;, &quot;Super server!&quot;);
        return std::move(resp);
    });

    const auto port = httpServer.listen(QHostAddress::Any);
    if (!port) {
        qDebug() &amp;lt;&amp;lt; QCoreApplication::translate(
                &quot;QHttpServerExample&quot;, &quot;Server failed to listen on a port.&quot;);
        return 0;
    }

    qDebug() &amp;lt;&amp;lt; QCoreApplication::translate(
            &quot;QHttpServerExample&quot;, &quot;Running on http://127.0.0.1:%1/ (Press CTRL+C to quit)&quot;).arg(port);

    return app.exec();
}

</db:programlisting>
</db:article>
