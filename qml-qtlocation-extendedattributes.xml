<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ExtendedAttributes QML Type</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qml-qtlocation-extendedattributes.xml">ExtendedAttributes</db:link> type holds additional data about a <db:link xlink:href="qml-qtlocation-place.xml">Place</db:link>.</db:para>
<db:para>This type was introduced in Qt Location 5.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtLocation 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt Location 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In C++:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qqmlpropertymap.xml">QQmlPropertyMap</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ExtendedAttributes is part of <db:simplelist><db:member>qml-QtLocation5-places</db:member><db:member>qml-QtLocation5-places-data</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-extendedattributes.xml">ExtendedAttributes</db:link> type is a map of <db:link xlink:href="qml-qtlocation-placeattribute.xml">PlaceAttributes</db:link>. To access attributes in the map use the <db:link xlink:href="qml-qtlocation-extendedattributes.xml#keys-method">keys</db:link>() method to get the list of keys stored in the map and use the <db:code>[]</db:code> operator to access the <db:link xlink:href="qml-qtlocation-placeattribute.xml">PlaceAttribute</db:link> items.</db:para>
<db:para>The following are standard keys that are defined by the API. <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> implementations are free to define additional keys. Custom keys should be qualified by a unique prefix to avoid clashes.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>key</db:para>
</db:th>
<db:th>
<db:para>description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>openingHours</db:para>
</db:td>
<db:td>
<db:para>The trading hours of the place</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>payment</db:para>
</db:td>
<db:td>
<db:para>The types of payment the place accepts, for example visa, mastercard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>x_provider</db:para>
</db:td>
<db:td>
<db:para>The name of the provider that a place is sourced from</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>x_id_&lt;provider&gt; (for example x_id_here)</db:para>
</db:td>
<db:td>
<db:para>An alternative identifier which identifies the place from the perspective of the specified provider.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Some plugins may not support attributes at all, others may only support a certain set, others still may support a dynamically changing set of attributes over time or even allow attributes to be arbitrarily defined by the client application. The attributes could also vary on a place by place basis, for example one place may have opening hours while another does not. Consult the <db:link xlink:href="qtlocation-index.xml#plugin-references-and-parameters">plugin references</db:link> for details.</db:para>
<db:para>Some attributes may not be intended to be readable by end users, the label field of such attributes is empty to indicate this fact.</db:para>
<db:note>
<db:para><db:link xlink:href="qml-qtlocation-extendedattributes.xml">ExtendedAttributes</db:link> instances are only ever used in the context of <db:link xlink:href="qml-qtlocation-place.xml">Place</db:link>s. It is not possible to create an <db:link xlink:href="qml-qtlocation-extendedattributes.xml">ExtendedAttributes</db:link> instance directly or re-assign a <db:link xlink:href="qml-qtlocation-place.xml">Place</db:link>'s <db:link xlink:href="qml-qtlocation-extendedattributes.xml">ExtendedAttributes</db:link> property. Modification of <db:link xlink:href="qml-qtlocation-extendedattributes.xml">ExtendedAttributes</db:link> can only be accomplished via Javascript.</db:para>
</db:note>
<db:para>The following example shows how to access all <db:link xlink:href="qml-qtlocation-placeattribute.xml">PlaceAttributes</db:link> and print them to the console:</db:para>
<db:programlisting language="qml">import QtPositioning 5.5
import QtLocation 5.6

function printExtendedAttributes(extendedAttributes) {
    var keys = extendedAttributes.keys();
    for (var i = 0; i &lt; keys.length; ++i) {
        var key = keys[i];
        if (extendedAttributes[key].label !== &quot;&quot;)
            console.log(extendedAttributes[key].label + &quot;: &quot; + extendedAttributes[key].text);
    }
}
</db:programlisting>
<db:para>The following example shows how to assign and modify an attribute:</db:para>
<db:programlisting language="qml">    //assign a new attribute to a place
    var smokingAttrib = Qt.createQmlObject('import QtLocation 5.3; PlaceAttribute {}', place);
    smokingAttrib.label = &quot;Smoking Allowed&quot;
    smokingAttrib.text = &quot;No&quot;
    place.extendedAttributes.smoking = smokingAttrib;

    //modify an existing attribute
    place.extendedAttributes.smoking.text = &quot;Yes&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-placeattribute.xml">PlaceAttribute</db:link></db:member>
<db:member><db:link xlink:href="qqmlpropertymap.xml">QQmlPropertyMap</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="valueChanged-signal">
<db:title>void valueChanged(string <db:emphasis>key</db:emphasis>, variant <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This signal is emitted when the set of attributes changes. <db:code role="parameter">key</db:code> is the key corresponding to the <db:code role="parameter">value</db:code> that was changed.</db:para>
<db:para>The corresponding handler is <db:code>onValueChanged</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onValueChanged</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="keys-method">
<db:title>variant keys()</db:title>
<db:para>Returns an array of place attribute keys currently stored in the map.</db:para>
</db:section>
</db:section>
</db:article>
