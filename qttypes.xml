<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QtTypes&gt; - Qt Type Declarations</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The &lt;QtTypes&gt; header file includes Qt fundamental type declarations.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtTypes</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The header file declares several type definitions that guarantee a specified bit-size on all platforms supported by Qt for various basic types, for example <db:link xlink:href="qttypes.xml#qint8-typedef">qint8</db:link> which is a signed char guaranteed to be 8-bit on all platforms supported by Qt. The header file also declares the <db:link xlink:href="qttypes.xml#qlonglong-typedef">qlonglong</db:link> type definition for long long int.</db:para>
<db:para>Several convenience type definitions are declared: <db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link> for double or float, <db:link xlink:href="qttypes.xml#uchar-typedef">uchar</db:link> for unsigned char, <db:link xlink:href="qttypes.xml#uint-typedef">uint</db:link> for unsigned int, <db:link xlink:href="qttypes.xml#ulong-typedef">ulong</db:link> for unsigned long and <db:link xlink:href="qttypes.xml#ushort-typedef">ushort</db:link> for unsigned short.</db:para>
<db:para>The header also provides series of macros that make it possible to print some Qt type aliases (qsizetype, qintptr, etc.) via a formatted output facility such as printf() or <db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>() without raising formatting warnings and without the need of a type cast.</db:para>
</db:section>
<db:section xml:id="type-documentation">
<db:title>Type Documentation</db:title>
<db:section xml:id="qint8-typedef">
<db:title>qint8</db:title>
<db:typedefsynopsis>
<db:typedefname>qint8</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for signed char. This type is guaranteed to be 8-bit on all platforms supported by Qt.</db:para>
</db:section>
<db:section xml:id="qint16-typedef">
<db:title>qint16</db:title>
<db:typedefsynopsis>
<db:typedefname>qint16</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for signed short. This type is guaranteed to be 16-bit on all platforms supported by Qt.</db:para>
</db:section>
<db:section xml:id="qint32-typedef">
<db:title>qint32</db:title>
<db:typedefsynopsis>
<db:typedefname>qint32</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for signed int. This type is guaranteed to be 32-bit on all platforms supported by Qt.</db:para>
</db:section>
<db:section xml:id="qint64-typedef">
<db:title>qint64</db:title>
<db:typedefsynopsis>
<db:typedefname>qint64</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for long long int. This type is guaranteed to be 64-bit on all platforms supported by Qt.</db:para>
<db:para>Literals of this type can be created using the <db:link xlink:href="qttypes.xml#Q_INT64_C">Q_INT64_C</db:link>() macro:</db:para>
<db:programlisting language="cpp">qint64 value = Q_INT64_C(932838457459459);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#Q_INT64_C">Q_INT64_C</db:link>()</db:member>
<db:member><db:link xlink:href="qttypes.xml#quint64-typedef">quint64</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#qlonglong-typedef">qlonglong</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qint128-typedef">
<db:title>[since 6.6] qint128</db:title>
<db:typedefsynopsis>
<db:typedefname>qint128</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for __int128 on platforms that support it (Qt defines the macro <db:link xlink:href="qttypes.xml#QT_SUPPORTS_INT128">QT_SUPPORTS_INT128</db:link> if this is the case).</db:para>
<db:para>Literals of this type can be created using the <db:link xlink:href="qttypes.xml#Q_INT128_C">Q_INT128_C</db:link>() macro.</db:para>
<db:para>This typedef was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_C">Q_INT128_C</db:link>()</db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_MIN">Q_INT128_MIN</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_MAX">Q_INT128_MAX</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#quint128-typedef">quint128</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#QT_SUPPORTS_INT128">QT_SUPPORTS_INT128</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qintptr-typedef">
<db:title>qintptr</db:title>
<db:typedefsynopsis>
<db:typedefname>qintptr</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Integral type for representing pointers in a signed integer (useful for hashing, etc.).</db:para>
<db:para>Typedef for either qint32 or qint64. This type is guaranteed to be the same size as a pointer on all platforms supported by Qt. On a system with 32-bit pointers, qintptr is a typedef for qint32; on a system with 64-bit pointers, qintptr is a typedef for qint64.</db:para>
<db:para>Note that qintptr is signed. Use quintptr for unsigned values.</db:para>
<db:para>In order to print values of this type by using formatted-output facilities such as printf(), <db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qstring.xml#asprintf">QString::asprintf</db:link>() and so on, you can use the PRIdQINTPTR and PRIiQINTPTR macros as format specifiers. They will both print the value as a base 10 number.</db:para>
<db:programlisting language="cpp">qintptr p = 123;
printf(&quot;The pointer is %&quot; PRIdQINTPTR &quot;\n&quot;, p);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#qptrdiff-typedef">qptrdiff</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#qint32-typedef">qint32</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qlonglong-typedef">
<db:title>qlonglong</db:title>
<db:typedefsynopsis>
<db:typedefname>qlonglong</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for long long int (__int64 on Windows). This is the same as <db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#qulonglong-typedef">qulonglong</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qptrdiff-typedef">
<db:title>qptrdiff</db:title>
<db:typedefsynopsis>
<db:typedefname>qptrdiff</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Integral type for representing pointer differences.</db:para>
<db:para>Typedef for either qint32 or qint64. This type is guaranteed to be the same size as a pointer on all platforms supported by Qt. On a system with 32-bit pointers, quintptr is a typedef for quint32; on a system with 64-bit pointers, quintptr is a typedef for quint64.</db:para>
<db:para>Note that qptrdiff is signed. Use quintptr for unsigned values.</db:para>
<db:para>In order to print values of this type by using formatted-output facilities such as printf(), <db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qstring.xml#asprintf">QString::asprintf</db:link>() and so on, you can use the PRIdQPTRDIFF and PRIiQPTRDIFF macros as format specifiers. They will both print the value as a base 10 number.</db:para>
<db:programlisting language="cpp">qptrdiff d = 123;
printf(&quot;The difference is %&quot; PRIdQPTRDIFF &quot;\n&quot;, d);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#quintptr-typedef">quintptr</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#qint32-typedef">qint32</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qreal-typedef">
<db:title>qreal</db:title>
<db:typedefsynopsis>
<db:typedefname>qreal</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for double unless Qt is configured with the -qreal float option.</db:para>
</db:section>
<db:section xml:id="qsizetype-typedef">
<db:title>[alias] qsizetype</db:title>
<db:typedefsynopsis>
<db:typedefname>qsizetype</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Integral type providing Posix' ssize_t for all platforms.</db:para>
<db:para>This type is guaranteed to be the same size as a size_t on all platforms supported by Qt.</db:para>
<db:para>Note that qsizetype is signed. Use size_t for unsigned values.</db:para>
<db:para>In order to print values of this type by using formatted-output facilities such as printf(), <db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qstring.xml#asprintf">QString::asprintf</db:link>() and so on, you can use the PRIdQSIZETYPE and PRIiQSIZETYPE macros as format specifiers. They will both print the value as a base 10 number.</db:para>
<db:programlisting language="cpp">qsizetype s = 123;
printf(&quot;The size is %&quot; PRIdQSIZETYPE &quot;\n&quot;, s);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#qptrdiff-typedef">qptrdiff</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quint8-typedef">
<db:title>quint8</db:title>
<db:typedefsynopsis>
<db:typedefname>quint8</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for unsigned char. This type is guaranteed to be 8-bit on all platforms supported by Qt.</db:para>
</db:section>
<db:section xml:id="quint16-typedef">
<db:title>quint16</db:title>
<db:typedefsynopsis>
<db:typedefname>quint16</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for unsigned short. This type is guaranteed to be 16-bit on all platforms supported by Qt.</db:para>
</db:section>
<db:section xml:id="quint32-typedef">
<db:title>quint32</db:title>
<db:typedefsynopsis>
<db:typedefname>quint32</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for unsigned int. This type is guaranteed to be 32-bit on all platforms supported by Qt.</db:para>
</db:section>
<db:section xml:id="quint64-typedef">
<db:title>quint64</db:title>
<db:typedefsynopsis>
<db:typedefname>quint64</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for unsigned long long int. This type is guaranteed to be 64-bit on all platforms supported by Qt.</db:para>
<db:para>Literals of this type can be created using the <db:link xlink:href="qttypes.xml#Q_UINT64_C">Q_UINT64_C</db:link>() macro:</db:para>
<db:programlisting language="cpp">quint64 value = Q_UINT64_C(932838457459459);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#Q_UINT64_C">Q_UINT64_C</db:link>()</db:member>
<db:member><db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#qulonglong-typedef">qulonglong</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quint128-typedef">
<db:title>[since 6.6] quint128</db:title>
<db:typedefsynopsis>
<db:typedefname>quint128</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for unsigned __int128 on platforms that support it (Qt defines the macro <db:link xlink:href="qttypes.xml#QT_SUPPORTS_INT128">QT_SUPPORTS_INT128</db:link> if this is the case).</db:para>
<db:para>Literals of this type can be created using the <db:link xlink:href="qttypes.xml#Q_UINT128_C">Q_UINT128_C</db:link>() macro.</db:para>
<db:para>This typedef was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#Q_UINT128_C">Q_UINT128_C</db:link>()</db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_UINT128_MAX">Q_UINT128_MAX</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#qint128-typedef">qint128</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#QT_SUPPORTS_INT128">QT_SUPPORTS_INT128</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quintptr-typedef">
<db:title>quintptr</db:title>
<db:typedefsynopsis>
<db:typedefname>quintptr</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Integral type for representing pointers in an unsigned integer (useful for hashing, etc.).</db:para>
<db:para>Typedef for either quint32 or quint64. This type is guaranteed to be the same size as a pointer on all platforms supported by Qt. On a system with 32-bit pointers, quintptr is a typedef for quint32; on a system with 64-bit pointers, quintptr is a typedef for quint64.</db:para>
<db:para>Note that quintptr is unsigned. Use qptrdiff for signed values.</db:para>
<db:para>In order to print values of this type by using formatted-output facilities such as printf(), <db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qstring.xml#asprintf">QString::asprintf</db:link>() and so on, you can use the following macros as format specifiers:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>PRIuQUINTPTR: prints the value as a base 10 number.</db:para>
</db:listitem>
<db:listitem>
<db:para>PRIoQUINTPTR: prints the value as a base 8 number.</db:para>
</db:listitem>
<db:listitem>
<db:para>PRIxQUINTPTR: prints the value as a base 16 number, using lowercase a-f letters.</db:para>
</db:listitem>
<db:listitem>
<db:para>PRIXQUINTPTR: prints the value as a base 16 number, using uppercase A-F letters.</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">quintptr p = 123u;
printf(&quot;The pointer value is 0x%&quot; PRIXQUINTPTR &quot;\n&quot;, p);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#qptrdiff-typedef">qptrdiff</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#quint32-typedef">quint32</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#quint64-typedef">quint64</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qulonglong-typedef">
<db:title>qulonglong</db:title>
<db:typedefsynopsis>
<db:typedefname>qulonglong</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Typedef for unsigned long long int (unsigned __int64 on Windows). This is the same as <db:link xlink:href="qttypes.xml#quint64-typedef">quint64</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#quint64-typedef">quint64</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#qlonglong-typedef">qlonglong</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uchar-typedef">
<db:title>uchar</db:title>
<db:typedefsynopsis>
<db:typedefname>uchar</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Convenience typedef for unsigned char.</db:para>
</db:section>
<db:section xml:id="uint-typedef">
<db:title>uint</db:title>
<db:typedefsynopsis>
<db:typedefname>uint</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Convenience typedef for unsigned int.</db:para>
</db:section>
<db:section xml:id="ulong-typedef">
<db:title>ulong</db:title>
<db:typedefsynopsis>
<db:typedefname>ulong</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Convenience typedef for unsigned long.</db:para>
</db:section>
<db:section xml:id="ushort-typedef">
<db:title>ushort</db:title>
<db:typedefsynopsis>
<db:typedefname>ushort</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Convenience typedef for unsigned short.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="PRIdQINTPTR">
<db:title>[since 6.2] PRIdQINTPTR</db:title>
<db:bridgehead renderas="sect2" xml:id="PRIiQINTPTR">[since 6.2] PRIiQINTPTR</db:bridgehead>
<db:para>See <db:link xlink:href="qttypes.xml#qintptr-typedef">qintptr</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="PRIXQUINTPTR">
<db:title>[since 6.2] PRIXQUINTPTR</db:title>
<db:bridgehead renderas="sect2" xml:id="PRIoQUINTPTR">[since 6.2] PRIoQUINTPTR</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="PRIuQUINTPTR">[since 6.2] PRIuQUINTPTR</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="PRIxQUINTPTRx">[since 6.2] PRIxQUINTPTR</db:bridgehead>
<db:para>See quintptr.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="PRIdQPTRDIFF">
<db:title>[since 6.2] PRIdQPTRDIFF</db:title>
<db:bridgehead renderas="sect2" xml:id="PRIiQPTRDIFF">[since 6.2] PRIiQPTRDIFF</db:bridgehead>
<db:para>See qptrdiff.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="PRIdQSIZETYPE">
<db:title>[since 6.2] PRIdQSIZETYPE</db:title>
<db:bridgehead renderas="sect2" xml:id="PRIiQSIZETYPE">[since 6.2] PRIiQSIZETYPE</db:bridgehead>
<db:para>See qsizetype.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="PRIXQUINTPTR">
<db:title>[since 6.2] PRIXQUINTPTR</db:title>
<db:methodsynopsis>
<db:methodname>PRIXQUINTPTR</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">PRIXQUINTPTR</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="PRIdQINTPTR">
<db:title>[since 6.2] PRIdQINTPTR</db:title>
<db:methodsynopsis>
<db:methodname>PRIdQINTPTR</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">PRIdQINTPTR</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="PRIdQPTRDIFF">
<db:title>[since 6.2] PRIdQPTRDIFF</db:title>
<db:methodsynopsis>
<db:methodname>PRIdQPTRDIFF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">PRIdQPTRDIFF</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="PRIdQSIZETYPE">
<db:title>[since 6.2] PRIdQSIZETYPE</db:title>
<db:methodsynopsis>
<db:methodname>PRIdQSIZETYPE</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">PRIdQSIZETYPE</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="PRIiQINTPTR">
<db:title>[since 6.2] PRIiQINTPTR</db:title>
<db:methodsynopsis>
<db:methodname>PRIiQINTPTR</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">PRIiQINTPTR</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="PRIiQPTRDIFF">
<db:title>[since 6.2] PRIiQPTRDIFF</db:title>
<db:methodsynopsis>
<db:methodname>PRIiQPTRDIFF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">PRIiQPTRDIFF</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="PRIiQSIZETYPE">
<db:title>[since 6.2] PRIiQSIZETYPE</db:title>
<db:methodsynopsis>
<db:methodname>PRIiQSIZETYPE</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">PRIiQSIZETYPE</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="PRIoQUINTPTR">
<db:title>[since 6.2] PRIoQUINTPTR</db:title>
<db:methodsynopsis>
<db:methodname>PRIoQUINTPTR</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">PRIoQUINTPTR</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="PRIuQUINTPTR">
<db:title>[since 6.2] PRIuQUINTPTR</db:title>
<db:methodsynopsis>
<db:methodname>PRIuQUINTPTR</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">PRIuQUINTPTR</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="PRIxQUINTPTRx">
<db:title>[since 6.2] PRIxQUINTPTR</db:title>
<db:methodsynopsis>
<db:methodname>PRIxQUINTPTR</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">PRIxQUINTPTR</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="QT_SUPPORTS_INT128">
<db:title>[since 6.6] QT_SUPPORTS_INT128</db:title>
<db:methodsynopsis>
<db:methodname>QT_SUPPORTS_INT128</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QT_SUPPORTS_INT128</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Qt defines this macro as well as the <db:link xlink:href="qttypes.xml#qint128-typedef">qint128</db:link> and <db:link xlink:href="qttypes.xml#quint128-typedef">quint128</db:link> types if the platform has support for 128-bit integer types.</db:para>
<db:para>This macro was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#qint128-typedef">qint128</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#quint128-typedef">quint128</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_C">Q_INT128_C</db:link>()</db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_UINT128_C">Q_UINT128_C</db:link>()</db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_MIN">Q_INT128_MIN</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_MAX">Q_INT128_MAX</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_UINT128_MAX">Q_UINT128_MAX</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_INT128_C">
<db:title>[since 6.6] qint128 Q_INT128_C(<db:emphasis>literal</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_INT128_C</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>literal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">qint128 Q_INT128_C(literal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Wraps the signed 128-bit integer <db:code role="parameter">literal</db:code> in a platform-independent way.</db:para>
<db:note>
<db:para>Unlike <db:link xlink:href="qttypes.xml#Q_INT64_C">Q_INT64_C</db:link>(), this macro is only available in C++, not in C. This is because compilers do not provide these literals as built-ins and C does not have support for user-defined literals.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#qint128-typedef">qint128</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_UINT128_C">Q_UINT128_C</db:link>()</db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_MIN">Q_INT128_MIN</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_MAX">Q_INT128_MAX</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_INT64_C">Q_INT64_C</db:link>()</db:member>
<db:member><db:link xlink:href="qttypes.xml#QT_SUPPORTS_INT128">QT_SUPPORTS_INT128</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_INT128_MAX">
<db:title>[since 6.6] Q_INT128_MAX</db:title>
<db:methodsynopsis>
<db:methodname>Q_INT128_MAX</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_INT128_MAX</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro expands to a compile-time constant representing the maximum value representable in a <db:link xlink:href="qttypes.xml#qint128-typedef">qint128</db:link>.</db:para>
<db:para>This macro is available in both C++ and C modes.</db:para>
<db:para>This macro was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_MIN">Q_INT128_MIN</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_UINT128_MAX">Q_UINT128_MAX</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#qint128-typedef">qint128</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_C">Q_INT128_C</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#QT_SUPPORTS_INT128">QT_SUPPORTS_INT128</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_INT128_MIN">
<db:title>[since 6.6] Q_INT128_MIN</db:title>
<db:methodsynopsis>
<db:methodname>Q_INT128_MIN</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_INT128_MIN</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro expands to a compile-time constant representing the minimum value representable in a <db:link xlink:href="qttypes.xml#qint128-typedef">qint128</db:link>.</db:para>
<db:para>This macro is available in both C++ and C modes.</db:para>
<db:para>This macro was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_MAX">Q_INT128_MAX</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#qint128-typedef">qint128</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_C">Q_INT128_C</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#QT_SUPPORTS_INT128">QT_SUPPORTS_INT128</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_INT64_C">
<db:title>qint64 Q_INT64_C(<db:emphasis>literal</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_INT64_C</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>literal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 Q_INT64_C(literal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Wraps the signed 64-bit integer <db:code role="parameter">literal</db:code> in a platform-independent way.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">qint64 value = Q_INT64_C(932838457459459);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_UINT64_C">Q_UINT64_C</db:link>()</db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_C">Q_INT128_C</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_UINT128_C">
<db:title>[since 6.6] quint128 Q_UINT128_C(<db:emphasis>literal</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_UINT128_C</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>literal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">quint128 Q_UINT128_C(literal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Wraps the unsigned 128-bit integer <db:code role="parameter">literal</db:code> in a platform-independent way.</db:para>
<db:note>
<db:para>Unlike <db:link xlink:href="qttypes.xml#Q_UINT64_C">Q_UINT64_C</db:link>(), this macro is only available in C++, not in C. This is because compilers do not provide these literals as built-ins and C does not have support for user-defined literals.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#quint128-typedef">quint128</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_C">Q_INT128_C</db:link>()</db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_UINT128_MAX">Q_UINT128_MAX</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_UINT64_C">Q_UINT64_C</db:link>()</db:member>
<db:member><db:link xlink:href="qttypes.xml#QT_SUPPORTS_INT128">QT_SUPPORTS_INT128</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_UINT128_MAX">
<db:title>[since 6.6] Q_UINT128_MAX</db:title>
<db:methodsynopsis>
<db:methodname>Q_UINT128_MAX</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_UINT128_MAX</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro expands to a compile-time constant representing the maximum value representable in a <db:link xlink:href="qttypes.xml#quint128-typedef">quint128</db:link>.</db:para>
<db:para>This macro is available in both C++ and C modes.</db:para>
<db:para>The minimum of <db:link xlink:href="qttypes.xml#quint128-typedef">quint128</db:link> is 0 (zero), so a Q_UINT128_MIN is neither needed nor provided.</db:para>
<db:para>This macro was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#Q_INT128_MAX">Q_INT128_MAX</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#quint128-typedef">quint128</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_UINT128_C">Q_UINT128_C</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#QT_SUPPORTS_INT128">QT_SUPPORTS_INT128</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_UINT64_C">
<db:title>quint64 Q_UINT64_C(<db:emphasis>literal</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_UINT64_C</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>literal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">quint64 Q_UINT64_C(literal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Wraps the unsigned 64-bit integer <db:code role="parameter">literal</db:code> in a platform-independent way.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">quint64 value = Q_UINT64_C(932838457459459);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#quint64-typedef">quint64</db:link></db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_INT64_C">Q_INT64_C</db:link>()</db:member>
<db:member><db:link xlink:href="qttypes.xml#Q_UINT128_C">Q_UINT128_C</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
