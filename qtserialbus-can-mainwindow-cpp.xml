<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>CAN Bus example</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example sends and receives CAN bus frames.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the QtSerialBus module.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;mainwindow.h&quot;
#include &quot;ui_mainwindow.h&quot;
#include &quot;connectdialog.h&quot;

#include &lt;QCanBus&gt;
#include &lt;QCanBusFrame&gt;
#include &lt;QCloseEvent&gt;
#include &lt;QtDebug&gt;
#include &lt;QTimer&gt;

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    m_ui(new Ui::MainWindow),
    m_canDevice(nullptr)
{
    m_ui-&gt;setupUi(this);

    m_connectDialog = new ConnectDialog;

    m_status = new QLabel;
    m_ui-&gt;statusBar-&gt;addWidget(m_status);

    m_ui-&gt;sendMessagesBox-&gt;setEnabled(false);

    initActionsConnections();
    QTimer::singleShot(50, m_connectDialog, &amp;ConnectDialog::show);

    connect(m_ui-&gt;sendButton, &amp;QPushButton::clicked, this, &amp;MainWindow::sendMessage);
}

MainWindow::~MainWindow()
{
    delete m_canDevice;

    delete m_connectDialog;
    delete m_ui;
}

void MainWindow::showStatusMessage(const QString &amp;message)
{
    m_status-&gt;setText(message);
}

void MainWindow::initActionsConnections()
{
    m_ui-&gt;actionConnect-&gt;setEnabled(true);
    m_ui-&gt;actionDisconnect-&gt;setEnabled(false);
    m_ui-&gt;actionQuit-&gt;setEnabled(true);

    connect(m_ui-&gt;actionConnect, &amp;QAction::triggered, m_connectDialog, &amp;ConnectDialog::show);
    connect(m_connectDialog, &amp;QDialog::accepted, this, &amp;MainWindow::connectDevice);
    connect(m_ui-&gt;actionDisconnect, &amp;QAction::triggered, this, &amp;MainWindow::disconnectDevice);
    connect(m_ui-&gt;actionQuit, &amp;QAction::triggered, this, &amp;QWidget::close);
    connect(m_ui-&gt;actionAboutQt, &amp;QAction::triggered, qApp, &amp;QApplication::aboutQt);
    connect(m_ui-&gt;actionClearLog, &amp;QAction::triggered, m_ui-&gt;receivedMessagesEdit, &amp;QTextEdit::clear);
}

void MainWindow::receiveError(QCanBusDevice::CanBusError error) const
{
    switch (error) {
    case QCanBusDevice::ReadError:
    case QCanBusDevice::WriteError:
    case QCanBusDevice::ConnectionError:
    case QCanBusDevice::ConfigurationError:
    case QCanBusDevice::UnknownError:
        qWarning() &lt;&lt; m_canDevice-&gt;errorString();
    default:
        break;
    }
}

void MainWindow::connectDevice()
{
    const ConnectDialog::Settings p = m_connectDialog-&gt;settings();

    QString errorString;
    m_canDevice = QCanBus::instance()-&gt;createDevice(p.backendName, p.deviceInterfaceName,
                                                    &amp;errorString);
    if (!m_canDevice) {
        showStatusMessage(tr(&quot;Error creating device '%1', reason: '%2'&quot;)
                          .arg(p.backendName).arg(errorString));
        return;
    }

    connect(m_canDevice, &amp;QCanBusDevice::errorOccurred,
            this, &amp;MainWindow::receiveError);
    connect(m_canDevice, &amp;QCanBusDevice::framesReceived,
            this, &amp;MainWindow::checkMessages);
    connect(m_canDevice, &amp;QCanBusDevice::framesWritten,
            this, &amp;MainWindow::framesWritten);

    if (p.useConfigurationEnabled) {
        foreach (const ConnectDialog::ConfigurationItem &amp;item, p.configurations)
            m_canDevice-&gt;setConfigurationParameter(item.first, item.second);
    }

    if (!m_canDevice-&gt;connectDevice()) {
        showStatusMessage(tr(&quot;Connection error: %1&quot;).arg(m_canDevice-&gt;errorString()));

        delete m_canDevice;
        m_canDevice = nullptr;
    } else {
        m_ui-&gt;actionConnect-&gt;setEnabled(false);
        m_ui-&gt;actionDisconnect-&gt;setEnabled(true);

        m_ui-&gt;sendMessagesBox-&gt;setEnabled(true);

        QVariant bitRate = m_canDevice-&gt;configurationParameter(QCanBusDevice::BitRateKey);
        if (bitRate.isValid()) {
            showStatusMessage(tr(&quot;Backend: %1, connected to %2 at %3 kBit/s&quot;)
                    .arg(p.backendName).arg(p.deviceInterfaceName)
                    .arg(bitRate.toInt() / 1000));
        } else {
            showStatusMessage(tr(&quot;Backend: %1, connected to %2&quot;)
                    .arg(p.backendName).arg(p.deviceInterfaceName));
        }
    }
}

void MainWindow::disconnectDevice()
{
    if (!m_canDevice)
        return;

    m_canDevice-&gt;disconnectDevice();
    delete m_canDevice;
    m_canDevice = nullptr;

    m_ui-&gt;actionConnect-&gt;setEnabled(true);
    m_ui-&gt;actionDisconnect-&gt;setEnabled(false);

    m_ui-&gt;sendMessagesBox-&gt;setEnabled(false);

    showStatusMessage(tr(&quot;Disconnected&quot;));
}

void MainWindow::framesWritten(qint64 count)
{
    qDebug() &lt;&lt; &quot;Number of frames written:&quot; &lt;&lt; count;
}

void MainWindow::closeEvent(QCloseEvent *event)
{
    m_connectDialog-&gt;close();
    event-&gt;accept();
}

void MainWindow::checkMessages()
{
    if (!m_canDevice)
        return;

    while (m_canDevice-&gt;framesAvailable()) {
        const QCanBusFrame frame = m_canDevice-&gt;readFrame();

        QString view;
        if (frame.frameType() == QCanBusFrame::ErrorFrame)
            interpretError(view, frame);
        else
            view = frame.toString();

        const QString time = QString::fromLatin1(&quot;%1.%2  &quot;)
                .arg(frame.timeStamp().seconds(), 10, 10, QLatin1Char(' '))
                .arg(frame.timeStamp().microSeconds() / 100, 4, 10, QLatin1Char('0'));

        m_ui-&gt;receivedMessagesEdit-&gt;append(time + view);
    }
}

static QByteArray dataFromHex(const QString &amp;hex)
{
    QByteArray line = hex.toLatin1();
    line.replace(' ', QByteArray());
    return QByteArray::fromHex(line);
}

void MainWindow::sendMessage() const
{
    if (!m_canDevice)
        return;

    QByteArray writings = dataFromHex(m_ui-&gt;lineEdit-&gt;displayText());

    QCanBusFrame frame;
    const int maxPayload = m_ui-&gt;fdBox-&gt;checkState() ? 64 : 8;
    writings.truncate(maxPayload);
    frame.setPayload(writings);

    qint32 id = m_ui-&gt;idEdit-&gt;displayText().toInt(nullptr, 16);
    if (!m_ui-&gt;effBox-&gt;checkState() &amp;&amp; id &gt; 2047) //11 bits
        id = 2047;

    frame.setFrameId(id);
    frame.setExtendedFrameFormat(m_ui-&gt;effBox-&gt;checkState());
    frame.setFlexibleDataRateFormat(m_ui-&gt;fdBox-&gt;checkState());

    if (m_ui-&gt;remoteFrame-&gt;isChecked())
        frame.setFrameType(QCanBusFrame::RemoteRequestFrame);
    else if (m_ui-&gt;errorFrame-&gt;isChecked())
        frame.setFrameType(QCanBusFrame::ErrorFrame);
    else
        frame.setFrameType(QCanBusFrame::DataFrame);

    m_canDevice-&gt;writeFrame(frame);
}

void MainWindow::interpretError(QString &amp;view, const QCanBusFrame &amp;frame)
{
    if (!m_canDevice)
        return;

    view = m_canDevice-&gt;interpretErrorFrame(frame);
}

</db:programlisting>
</db:article>
