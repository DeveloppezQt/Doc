<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextBlockFormat Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link> class provides formatting information for blocks of text in a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextBlockFormat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtextformat.xml" xlink:role="class">QTextFormat</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextBlockFormat is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A document is composed of a list of blocks, represented by <db:link xlink:href="qtextblock.xml">QTextBlock</db:link> objects. Each block can contain an item of some kind, such as a paragraph of text, a table, a list, or an image. Every block has an associated <db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link> that specifies its characteristics.</db:para>
<db:para>To cater for left-to-right and right-to-left languages you can set a block's direction with <db:link xlink:href="qtextformat.xml#setLayoutDirection">setLayoutDirection</db:link>(). Paragraph alignment is set with <db:link xlink:href="qtextblockformat.xml#setAlignment">setAlignment</db:link>(). Margins are controlled by <db:link xlink:href="qtextblockformat.xml#setTopMargin">setTopMargin</db:link>(), <db:link xlink:href="qtextblockformat.xml#setBottomMargin">setBottomMargin</db:link>(), <db:link xlink:href="qtextblockformat.xml#setLeftMargin">setLeftMargin</db:link>(), <db:link xlink:href="qtextblockformat.xml#setRightMargin">setRightMargin</db:link>(). Overall indentation is set with <db:link xlink:href="qtextblockformat.xml#setIndent">setIndent</db:link>(), the indentation of the first line with <db:link xlink:href="qtextblockformat.xml#setTextIndent">setTextIndent</db:link>().</db:para>
<db:para>Line spacing is set with <db:link xlink:href="qtextblockformat.xml#setLineHeight">setLineHeight</db:link>() and retrieved via <db:link xlink:href="qtextblockformat.xml#lineHeight-1">lineHeight</db:link>() and <db:link xlink:href="qtextblockformat.xml#lineHeightType">lineHeightType</db:link>(). The types of line spacing available are in the <db:link xlink:href="qtextblockformat.xml#LineHeightTypes-enum">LineHeightTypes</db:link> enum.</db:para>
<db:para>Line breaking can be enabled and disabled with <db:link xlink:href="qtextblockformat.xml#setNonBreakableLines">setNonBreakableLines</db:link>().</db:para>
<db:para>The brush used to paint the paragraph's background is set with <db:link xlink:href="qtextformat.xml#setBackground">setBackground</db:link>(), and other aspects of the text's appearance can be customized by using the <db:link xlink:href="qtextformat.xml#setProperty">setProperty</db:link>() function with the <db:code>OutlinePen</db:code>, <db:code>ForegroundBrush</db:code>, and <db:code>BackgroundBrush</db:code> <db:link xlink:href="qtextformat.xml#Property-enum">QTextFormat::Property</db:link> values.</db:para>
<db:para>If a text block is part of a list, it can also have a list format that is accessible with the listFormat() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml">QTextBlock</db:link></db:member>
<db:member><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="LineHeightTypes-enum">
<db:title>enum QTextBlockFormat::LineHeightTypes</db:title>
<db:enumsynopsis>
<db:enumname>LineHeightTypes</db:enumname>
<db:enumitem>
<db:enumidentifier>SingleHeight</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ProportionalHeight</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FixedHeight</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MinimumHeight</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LineDistanceHeight</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the various types of line spacing support paragraphs can have.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link></db:emphasis>::SingleHeight</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This is the default line height: single spacing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link></db:emphasis>::ProportionalHeight</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This sets the spacing proportional to the line (in percentage). For example, set to 200 for double spacing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link></db:emphasis>::FixedHeight</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This sets the line height to a fixed line height (in pixels).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link></db:emphasis>::MinimumHeight</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>This sets the minimum line height (in pixels).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link></db:emphasis>::LineDistanceHeight</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>This adds the specified height between lines (in pixels).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#lineHeight-1">lineHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#lineHeightType">lineHeightType</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setLineHeight">setLineHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="MarkerType-enum">
<db:title>enum QTextBlockFormat::MarkerType</db:title>
<db:enumsynopsis>
<db:enumname>MarkerType</db:enumname>
<db:enumitem>
<db:enumidentifier>NoMarker</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Unchecked</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Checked</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the types of markers a list item can have. If a list item (a paragraph for which <db:link xlink:href="qtextblock.xml#textList">QTextBlock::textList</db:link>() returns the list) has a marker, it is rendered instead of the normal bullet. In this way, checkable list items can be mixed with plain list items in the same list, overriding the type of bullet specified by the <db:link xlink:href="qtextlistformat.xml#style">QTextListFormat::style</db:link>() for the entire list.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link></db:emphasis>::<db:emphasis role="bold">MarkerType</db:emphasis>::NoMarker</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This is the default: the list item's bullet will be shown.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link></db:emphasis>::<db:emphasis role="bold">MarkerType</db:emphasis>::Unchecked</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Instead of the list item's bullet, an unchecked checkbox will be shown.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link></db:emphasis>::<db:emphasis role="bold">MarkerType</db:emphasis>::Checked</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Instead of the list item's bullet, a checked checkbox will be shown.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In the future, this may be extended to specify other types of paragraph decorations.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlistformat.xml#style">QTextListFormat::style</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextBlockFormat">
<db:title>QTextBlockFormat::QTextBlockFormat()</db:title>
<db:constructorsynopsis>
<db:methodname>QTextBlockFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBlockFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link>.</db:para>
</db:section>
<db:section xml:id="alignment">
<db:title>Qt::Alignment QTextBlockFormat::alignment() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::Alignment</db:type>
<db:methodname>alignment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Alignment alignment() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paragraph's alignment.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#setAlignment">setAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bottomMargin">
<db:title>qreal QTextBlockFormat::bottomMargin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>bottomMargin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal bottomMargin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paragraph's bottom margin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#setBottomMargin">setBottomMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#topMargin">topMargin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="headingLevel">
<db:title>int QTextBlockFormat::headingLevel() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>headingLevel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int headingLevel() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paragraph's heading level if it is a heading, or 0 if not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#setHeadingLevel">setHeadingLevel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indent">
<db:title>int QTextBlockFormat::indent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paragraph's indent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#setIndent">setIndent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QTextBlockFormat::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this block format is valid; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="leftMargin">
<db:title>qreal QTextBlockFormat::leftMargin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>leftMargin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal leftMargin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paragraph's left margin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#setLeftMargin">setLeftMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#rightMargin">rightMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#indent">indent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineHeight">
<db:title>qreal QTextBlockFormat::lineHeight(qreal <db:emphasis>scriptLineHeight</db:emphasis>, qreal <db:emphasis>scaling</db:emphasis> = 1.0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>lineHeight</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>scriptLineHeight</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>scaling</db:parameter>
<db:initializer>1.0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal lineHeight(qreal scriptLineHeight, qreal scaling) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the height of the lines in the paragraph based on the height of the script line given by <db:code role="parameter">scriptLineHeight</db:code> and the specified <db:code role="parameter">scaling</db:code> factor.</db:para>
<db:para>The value that is returned is also dependent on the given LineHeightType of the paragraph as well as the LineHeight setting that has been set for the paragraph.</db:para>
<db:para>The scaling is needed for heights that include a fixed number of pixels, to scale them appropriately for printing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#LineHeightTypes-enum">LineHeightTypes</db:link></db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setLineHeight">setLineHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#lineHeightType">lineHeightType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineHeight-1">
<db:title>qreal QTextBlockFormat::lineHeight() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>lineHeight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal lineHeight() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This returns the LineHeight property for the paragraph.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#LineHeightTypes-enum">LineHeightTypes</db:link></db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setLineHeight">setLineHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#lineHeightType">lineHeightType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineHeightType">
<db:title>int QTextBlockFormat::lineHeightType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>lineHeightType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int lineHeightType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This returns the LineHeightType property of the paragraph.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#LineHeightTypes-enum">LineHeightTypes</db:link></db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setLineHeight">setLineHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#lineHeight-1">lineHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="marker">
<db:title>QTextBlockFormat::MarkerType QTextBlockFormat::marker() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextBlockFormat::MarkerType</db:type>
<db:methodname>marker</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBlockFormat::MarkerType marker() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paragraph's marker if one has been set, or <db:code>NoMarker</db:code> if not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#setMarker">setMarker</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nonBreakableLines">
<db:title>bool QTextBlockFormat::nonBreakableLines() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>nonBreakableLines</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool nonBreakableLines() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the lines in the paragraph are non-breakable; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#setNonBreakableLines">setNonBreakableLines</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pageBreakPolicy">
<db:title>QTextFormat::PageBreakFlags QTextBlockFormat::pageBreakPolicy() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextFormat::PageBreakFlags</db:type>
<db:methodname>pageBreakPolicy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextFormat::PageBreakFlags pageBreakPolicy() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the currently set page break policy for the paragraph. The default is <db:link xlink:href="qtextformat.xml#PageBreakFlag-enum">QTextFormat::PageBreak_Auto</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#setPageBreakPolicy">setPageBreakPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rightMargin">
<db:title>qreal QTextBlockFormat::rightMargin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>rightMargin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal rightMargin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paragraph's right margin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#setRightMargin">setRightMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#leftMargin">leftMargin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAlignment">
<db:title>void QTextBlockFormat::setAlignment(Qt::Alignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAlignment</db:methodname>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAlignment(Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the paragraph's <db:code role="parameter">alignment</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#alignment">alignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBottomMargin">
<db:title>void QTextBlockFormat::setBottomMargin(qreal <db:emphasis>margin</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBottomMargin</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>margin</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBottomMargin(qreal margin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the paragraph's bottom <db:code role="parameter">margin</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#bottomMargin">bottomMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setTopMargin">setTopMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setLeftMargin">setLeftMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setRightMargin">setRightMargin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeadingLevel">
<db:title>void QTextBlockFormat::setHeadingLevel(int <db:emphasis>level</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHeadingLevel</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>level</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHeadingLevel(int level)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the paragraph's heading <db:code role="parameter">level</db:code>, where 1 is the highest-level heading type (usually with the largest possible heading font size), and increasing values are progressively deeper into the document (and usually with smaller font sizes). For example when reading an HTML H1 tag, the heading level is set to 1. Setting the heading level does not automatically change the font size; however <db:link xlink:href="qtextdocumentfragment.xml#fromHtml">QTextDocumentFragment::fromHtml</db:link>() sets both the heading level and the font size simultaneously.</db:para>
<db:para>If the paragraph is not a heading, the level should be set to 0 (the default).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#headingLevel">headingLevel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIndent">
<db:title>void QTextBlockFormat::setIndent(int <db:emphasis>indentation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setIndent</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>indentation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setIndent(int indentation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the paragraph's <db:code role="parameter">indentation</db:code>. Margins are set independently of indentation with <db:link xlink:href="qtextblockformat.xml#setLeftMargin">setLeftMargin</db:link>() and <db:link xlink:href="qtextblockformat.xml#setTextIndent">setTextIndent</db:link>(). The <db:code role="parameter">indentation</db:code> is an integer that is multiplied with the document-wide standard indent, resulting in the actual indent of the paragraph.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#indent">indent</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#indentWidth-prop">QTextDocument::indentWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLeftMargin">
<db:title>void QTextBlockFormat::setLeftMargin(qreal <db:emphasis>margin</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLeftMargin</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>margin</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLeftMargin(qreal margin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the paragraph's left <db:code role="parameter">margin</db:code>. Indentation can be applied separately with <db:link xlink:href="qtextblockformat.xml#setIndent">setIndent</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#leftMargin">leftMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setRightMargin">setRightMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setTopMargin">setTopMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setBottomMargin">setBottomMargin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLineHeight">
<db:title>void QTextBlockFormat::setLineHeight(qreal <db:emphasis>height</db:emphasis>, int <db:emphasis>heightType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLineHeight</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>heightType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLineHeight(qreal height, int heightType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the line height for the paragraph to the value given by <db:code role="parameter">height</db:code> which is dependent on <db:code role="parameter">heightType</db:code> in the way described by the <db:link xlink:href="qtextblockformat.xml#LineHeightTypes-enum">LineHeightTypes</db:link> enum.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#LineHeightTypes-enum">LineHeightTypes</db:link></db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#lineHeight-1">lineHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#lineHeightType">lineHeightType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMarker">
<db:title>void QTextBlockFormat::setMarker(QTextBlockFormat::MarkerType <db:emphasis>marker</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMarker</db:methodname>
<db:methodparam>
<db:type>QTextBlockFormat::MarkerType</db:type>
<db:parameter>marker</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMarker(QTextBlockFormat::MarkerType marker)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the type of adornment that should be rendered alongside the paragraph to <db:code role="parameter">marker</db:code>. For example, a list item can be adorned with a checkbox, either checked or unchecked, as a replacement for its bullet. The default is <db:code>NoMarker</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#marker">marker</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNonBreakableLines">
<db:title>void QTextBlockFormat::setNonBreakableLines(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNonBreakableLines</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNonBreakableLines(bool b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">b</db:code> is true, the lines in the paragraph are treated as non-breakable; otherwise they are breakable.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#nonBreakableLines">nonBreakableLines</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPageBreakPolicy">
<db:title>void QTextBlockFormat::setPageBreakPolicy(QTextFormat::PageBreakFlags <db:emphasis>policy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPageBreakPolicy</db:methodname>
<db:methodparam>
<db:type>QTextFormat::PageBreakFlags</db:type>
<db:parameter>policy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPageBreakPolicy(QTextFormat::PageBreakFlags policy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the page break policy for the paragraph to <db:code role="parameter">policy</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#pageBreakPolicy">pageBreakPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRightMargin">
<db:title>void QTextBlockFormat::setRightMargin(qreal <db:emphasis>margin</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRightMargin</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>margin</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRightMargin(qreal margin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the paragraph's right <db:code role="parameter">margin</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#rightMargin">rightMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setLeftMargin">setLeftMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setTopMargin">setTopMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setBottomMargin">setBottomMargin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabPositions">
<db:title>void QTextBlockFormat::setTabPositions(const QList&lt;QTextOption::Tab&gt; &amp;<db:emphasis>tabs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTabPositions</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QTextOption::Tab&gt; &amp;</db:type>
<db:parameter>tabs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTabPositions(const QList&lt;QTextOption::Tab&gt; &amp;tabs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the tab positions for the text block to those specified by <db:code role="parameter">tabs</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#tabPositions">tabPositions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextIndent">
<db:title>void QTextBlockFormat::setTextIndent(qreal <db:emphasis>indent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTextIndent</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>indent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTextIndent(qreal indent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">indent</db:code> for the first line in the block. This allows the first line of a paragraph to be indented differently to the other lines, enhancing the readability of the text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#textIndent">textIndent</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setLeftMargin">setLeftMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setRightMargin">setRightMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setTopMargin">setTopMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setBottomMargin">setBottomMargin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTopMargin">
<db:title>void QTextBlockFormat::setTopMargin(qreal <db:emphasis>margin</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTopMargin</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>margin</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTopMargin(qreal margin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the paragraph's top <db:code role="parameter">margin</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#topMargin">topMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setBottomMargin">setBottomMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setLeftMargin">setLeftMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#setRightMargin">setRightMargin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabPositions">
<db:title>QList&lt;QTextOption::Tab&gt; QTextBlockFormat::tabPositions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QTextOption::Tab&gt;</db:type>
<db:methodname>tabPositions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QTextOption::Tab&gt; tabPositions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of tab positions defined for the text block.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#setTabPositions">setTabPositions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textIndent">
<db:title>qreal QTextBlockFormat::textIndent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>textIndent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal textIndent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paragraph's text indent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#setTextIndent">setTextIndent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="topMargin">
<db:title>qreal QTextBlockFormat::topMargin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>topMargin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal topMargin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paragraph's top margin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblockformat.xml#setTopMargin">setTopMargin</db:link>()</db:member>
<db:member><db:link xlink:href="qtextblockformat.xml#bottomMargin">bottomMargin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
