<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Relating Things</db:title>
<db:productname>QDoc</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="17-qdoc-commands-thread.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Thread Support"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="19-qdoc-commands-grouping.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Grouping Things"/></db:extendedlink>
<db:abstract>
<db:para>QDoc Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>QDoc Manual</db:para>
<db:para>The relating commands are for specifying how one documented element relates to another documented element. Some examples:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>This function is an overload of another function.</db:para>
</db:listitem>
<db:listitem>
<db:para>This function is a reimplementation of another function.</db:para>
</db:listitem>
<db:listitem>
<db:para>This typedef is <db:emphasis>related</db:emphasis> to some class or header file.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>There is also a command for documenting that a QML type inherits some other QML type.</db:para>
<db:section xml:id="commands">
<db:title>Commands</db:title>
<db:anchor xml:id="inherits-command"/>
<db:section xml:id="inherits">
<db:title>\inherits</db:title>
<db:para>The \inherits command is for documenting that one QML type inherits some other QML type. It must be included in the inheriting element's <db:link xlink:href="13-qdoc-commands-topics.xml#qmltype-command">\qmltype</db:link> comment. The argument is the name of the inherited QML type.</db:para>
<db:programlisting language="cpp">/ *!
    \qmltype PauseAnimation
    \instantiates QDeclarativePauseAnimation
    \ingroup qml-animation-transition
    \since 4.7
    \inherits Animation
    \brief The PauseAnimation element provides a pause for an animation.

    When used in a SequentialAnimation, PauseAnimation is a step
    when nothing happens, for a specified duration.

    A 500ms animation sequence, with a 100ms pause between two animations:

    SequentialAnimation {
        NumberAnimation { ... duration: 200 }
        PauseAnimation { duration: 100 }
        NumberAnimation { ... duration: 200 }
    }

    \sa {QML Animation and Transitions}, {declarative/animation/basics}{Animation basics example}
* /
</db:programlisting>
<db:para>QDoc includes this line on the reference page for the <db:link xlink:href="qml-qtquick-pauseanimation.xml">PauseAnimation</db:link> element:</db:para>
<db:blockquote><db:para>Inherits <db:link xlink:href="qml-qtquick-animation.xml">Animation</db:link></db:para>
</db:blockquote>
<db:anchor xml:id="overload-command"/>
</db:section>
<db:section xml:id="overload">
<db:title>\overload</db:title>
<db:para>The \overload command is for indicating that a function is a secondary overload of its name.</db:para>
<db:para>The command must stand on its own line.</db:para>
<db:para>For a function name that is overloaded (except constructors), QDoc expects one primary version of the function, and all the others marked with the <db:emphasis role="bold">\overload command</db:emphasis>. The primary version should be fully documented. Each overload can have whatever extra documentation you want to add for just that overloaded version.</db:para>
<db:para>You can include the function name plus '()' as a parameter to the <db:emphasis role="bold">\overload</db:emphasis> command, which will include a standard <db:emphasis>This function overloads...</db:emphasis> line of text with a link to the documentation for the primary version of the function.</db:para>
<db:programlisting language="cpp">/ *!
    \overload addAction()

    This convenience function creates a new action with an
    \a icon and some \a text. The function adds the newly
    created action to the menu's list of actions, and
    returns it.

    \sa QWidget::addAction()
* /
QAction *QMenu::addAction(const QIcon &amp;amp;icon, const QString &amp;amp;text)
{
    QAction *ret = new QAction(icon, text, this);
    addAction(ret);
    return ret;
}
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:bridgehead renderas="sect3">&lt;a href=&quot;http://doc.qt.io/qt-5/qaction.html&quot;&gt;QAction&lt;/a&gt;
        * QMenu::addAction ( const QIcon &amp; &lt;i&gt;icon&lt;/i&gt;,
        const QString &amp; &lt;i&gt;text&lt;/i&gt; )
        </db:bridgehead><db:para>This function overloads <db:link xlink:href="">addAction()</db:link></db:para>
<db:para>This convenience function creates a new action with an <db:emphasis>icon</db:emphasis> and some <db:emphasis>text</db:emphasis>. The function adds the newly created action to the menu's list of actions, and returns it.</db:para>
<db:para>See also <db:link xlink:href="">QWidget::addAction</db:link>().</db:para>
</db:blockquote>
<db:para>If you don't include the function name with the <db:emphasis role="bold">\overload</db:emphasis> command, then instead of the &quot;This function overloads...&quot; line with the link to the documentation for the primary version, you get the old standard line:</db:para>
<db:blockquote><db:para>This is an overloaded member function, provided for convenience.</db:para>
</db:blockquote>
<db:para>.</db:para>
<db:anchor xml:id="reimp-command"/>
</db:section>
<db:section xml:id="reimp">
<db:title>\reimp</db:title>
<db:para>The \reimp command is for indicating that a function is a reimplementation of a virtual function.</db:para>
<db:para>The command must stand on its own line.</db:para>
<db:para>QDoc will omit the reimplemented function from the class reference.</db:para>
<db:programlisting language="cpp">/ *!
    \reimp
* /
void QToolButton::nextCheckState()
{
    Q_D(QToolButton);
    if (!d-&amp;gt;defaultAction)
        QAbstractButton::nextCheckState();
    else
        d-&amp;gt;defaultAction-&amp;gt;trigger();
}
</db:programlisting>
<db:para>This function will not be included in the documentation. Instead, a link to the base function QAbstractButton::nextCheckState() will appear in the documentation.</db:para>
<db:anchor xml:id="relates-command"/>
</db:section>
<db:section xml:id="relates">
<db:title>\relates</db:title>
<db:para>The \relates command is for including the documentation of a global element to some class or header file. The argument is a class name or header file.</db:para>
<db:programlisting language="cpp">/ *!
    \relates QChar

    Reads a char from the stream \a in into char \a chr.

    \sa {Format of the QDataStream operators}
* /
QDataStream &amp;amp;operator&amp;gt;&amp;gt;(QDataStream &amp;amp;in, QChar &amp;amp;chr)
{
    quint16 u;
    in &amp;gt;&amp;gt; u;
    chr.unicode() = ushort(u);
    return in;
}
</db:programlisting>
<db:para>The documentation for this function will be included on the reference page for class QChar.</db:para>
</db:section>
</db:section>
</db:article>
