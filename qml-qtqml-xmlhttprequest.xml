<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>XMLHttpRequest QML Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Object for sending requests to a server.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The XMLHttpRequest object allows scripts to perform HTTP client functionality, such as submitting form data or loading data asynchronously from a server.</db:para>
<db:para>The XMLHttpRequest API is a partial implementation of the <db:link xlink:href="https://www.w3.org/TR/2014/WD-XMLHttpRequest-20140130/">W3C XHR Level 1 standard</db:link> with the following exception:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>It does not enforce the same origin policy.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="sending-requests">
<db:title>Sending requests</db:title>
<db:para>Use the following steps to send a request using the XMLHttpRequest API:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Create a XMLHttpRequest object.</db:para>
</db:listitem>
<db:listitem>
<db:para>Assign a callback function to the <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#onreadystatechange-prop">onreadystatechange</db:link> signal handler.</db:para>
</db:listitem>
<db:listitem>
<db:para>Call <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#open-method">open</db:link>() with the appropriate HTTP method and URL to request.</db:para>
</db:listitem>
<db:listitem>
<db:para>Call <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#send-method">send</db:link>()</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The callback function handles the HTTP response for a request. It's a good practice to check if the <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#readyState-prop">readyState</db:link> is DONE in the handler, before you use one of the following methods to read the response:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#response-prop">response</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#responseText-prop">responseText</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#responseXML-prop">responseXML</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The following example demonstrates how to send a request and read the response:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Layouts
import QtQuick.Controls
import &quot;request.js&quot; as XHR

ApplicationWindow {
      width: 640
      height: 640
      visible: true

      ColumnLayout {
           anchors.fill: parent

           RowLayout {
               Layout.fillWidth: true

               TextField {
                   id: urlTextField
                   text: &quot;https://www.example.com/index.html&quot;
                   Layout.fillWidth: true
               }
               Button {
                   text: qsTr(&quot;Send!&quot;)
                   onClicked: XHR.sendRequest(urlTextField.text, function(response) {
                       statusTextField.text = response.status;
                       let isPlainText = response.contentType.length === 0

                       contentTypeTextField.text = isPlainText ? &quot;text&quot; : response.contentType;

                       if (isPlainText)
                           contentTextArea.text = response.content;
                   });
               }
           }

           GridLayout {
               columns: 2

               Layout.fillWidth: true

               Label {
                   text: qsTr(&quot;Status code&quot;)

                   Layout.fillWidth: true
               }
               Label {
                   text: qsTr(&quot;Response type&quot;)

                   Layout.fillWidth: true
               }
               TextField {
                    id: statusTextField

                    Layout.fillWidth: true
               }
               TextField {
                    id: contentTypeTextField

                    Layout.fillWidth: true
               }
           }
           Flickable {
               clip: true
               contentWidth: contentTextArea.width
               contentHeight: contentTextArea.height
               Text {
                    id: contentTextArea
               }

               Layout.fillWidth: true
               Layout.fillHeight: true
               ScrollBar.vertical: ScrollBar {}
               ScrollBar.horizontal: ScrollBar {}
           }
      }
}

</db:programlisting>
<db:para>The earlier snippet connects the button's clicked signal to an external sendRequest function. A resource URL is passed as the first argument, and a callback function to handle UI updates is passed as the second. The sendRequest function, which exists in an external request.js file, can be implemented like this:</db:para>
<db:programlisting language="cpp">function sendRequest(url, callback)
{
    let request = new XMLHttpRequest();

    request.onreadystatechange = function() {
        if (request.readyState === XMLHttpRequest.DONE) {
            let response = {
                status : request.status,
                headers : request.getAllResponseHeaders(),
                contentType : request.responseType,
                content : request.response
            };

            callback(response);
        }
    }

    request.open(&quot;GET&quot;, url);
    request.send();
}
</db:programlisting>
<db:para>The earlier snippet follows the four simple steps mentioned at the beginning. It instantiates the XMLHttpRequest object first, and assigns a callback function to handle the response. It also calls <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#open-method">open</db:link>() with an HTTP method and URL, before it sends the request to the server. Notice that the second argument to sendRequest is called at the end of <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#onreadystatechange-prop">onreadystatechange</db:link>, in order to handle UI updates based on the HTTP response.</db:para>
<db:para>Set the QML_XHR_DUMP environment variable to 1 if you want to debug a request. This will log the following information:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Method type (GET or POST), URL, and body of sent requests.</db:para>
</db:listitem>
<db:listitem>
<db:para>URL and body of responses received.</db:para>
</db:listitem>
<db:listitem>
<db:para>Network error, if any.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="accessing-local-files">
<db:title>Accessing local files</db:title>
<db:para>By default, you cannot use the XMLHttpRequest object to read files from your local file system. If you wish to use this feature to access local files, you can set the following environment variables to 1.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QML_XHR_ALLOW_FILE_READ</db:para>
</db:listitem>
<db:listitem>
<db:para>QML_XHR_ALLOW_FILE_WRITE</db:para>
</db:listitem>
</db:itemizedlist>
<db:warning>
<db:para>Use this feature only if you know that the application runs trusted QML and JavaScript code.</db:para>
</db:warning>
</db:section>
<db:section xml:id="responsexml-document">
<db:title>responseXML document</db:title>
<db:para>The responseXML XML DOM tree currently supported by QML is a reduced subset of the <db:link xlink:href="http://www.w3.org/TR/DOM-Level-3-Core/">DOM Level 3 Core</db:link> API supported in a web browser. The following objects and properties are supported by the QML implementation:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:emphasis role="bold">Node</db:emphasis></db:para>
</db:th>
<db:th>
<db:para><db:emphasis role="bold">Document</db:emphasis></db:para>
</db:th>
<db:th>
<db:para><db:emphasis role="bold">Element</db:emphasis></db:para>
</db:th>
<db:th>
<db:para><db:emphasis role="bold">Attr</db:emphasis></db:para>
</db:th>
<db:th>
<db:para><db:emphasis role="bold">CharacterData</db:emphasis></db:para>
</db:th>
<db:th>
<db:para><db:emphasis role="bold">Text</db:emphasis></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>nodeName</db:para>
</db:listitem>
<db:listitem>
<db:para>nodeValue</db:para>
</db:listitem>
<db:listitem>
<db:para>nodeType</db:para>
</db:listitem>
<db:listitem>
<db:para>parentNode</db:para>
</db:listitem>
<db:listitem>
<db:para>childNodes</db:para>
</db:listitem>
<db:listitem>
<db:para>firstChild</db:para>
</db:listitem>
<db:listitem>
<db:para>lastChild</db:para>
</db:listitem>
<db:listitem>
<db:para>previousSibling</db:para>
</db:listitem>
<db:listitem>
<db:para>nextSibling</db:para>
</db:listitem>
<db:listitem>
<db:para>attributes</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>xmlVersion</db:para>
</db:listitem>
<db:listitem>
<db:para>xmlEncoding</db:para>
</db:listitem>
<db:listitem>
<db:para>xmlStandalone</db:para>
</db:listitem>
<db:listitem>
<db:para>documentElement</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>tagName</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>name</db:para>
</db:listitem>
<db:listitem>
<db:para>value</db:para>
</db:listitem>
<db:listitem>
<db:para>ownerElement</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>data</db:para>
</db:listitem>
<db:listitem>
<db:para>length</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>isElementContentWhitespace</db:para>
</db:listitem>
<db:listitem>
<db:para>wholeText</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="onreadystatechange-prop">
<db:title>onreadystatechange : function</db:title>
<db:fieldsynopsis>
<db:type>function</db:type>
<db:varname>onreadystatechange</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Choose a callback function you want to get invoked whenever the <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#readyState-prop">readyState</db:link> of the XMLHttpRequest object changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#readyState-prop">readyState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readyState-prop">
<db:title>[read-only] readyState : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>readyState</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Indicates the current state of the XMLHttpRequest object.</db:para>
<db:para>The value can be one of the following:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>XMLHttpRequest.UNSENT</db:para>
</db:td>
<db:td>
<db:para>The request is not initialized, which is the state before calling <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#open-method">open</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>XMLHttpRequest.OPENED</db:para>
</db:td>
<db:td>
<db:para>The request is initialized, meaning <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#open-method">open</db:link>() was previously called, but no further progress.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>XMLHttpRequest.HEADERS_RECEIVED</db:para>
</db:td>
<db:td>
<db:para>Received a reply from the sever, but the request is not fully processed yet.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>XMLHttpRequest.LOADING</db:para>
</db:td>
<db:td>
<db:para>Downloading data from the server.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>XMLHttpRequest.DONE</db:para>
</db:td>
<db:td>
<db:para>Finished processing the request.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#onreadystatechange-prop">onreadystatechange</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="response-prop">
<db:title>[read-only] response : var</db:title>
<db:fieldsynopsis>
<db:type>var</db:type>
<db:varname>response</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns either a String, an ArrayBuffer, or a Document, depending on the <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#responseType-prop">responseType</db:link> of the last request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#responseType-prop">responseType</db:link></db:member>
<db:member><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#responseText-prop">responseText</db:link></db:member>
<db:member><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#responseXML-prop">responseXML</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="responseText-prop">
<db:title>[read-only] responseText : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>responseText</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns a String containing the data received from the last response.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#responseXML-prop">responseXML</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="responseType-prop">
<db:title>responseType : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>responseType</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns a String describing the content type of the last response received.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If the response type is &quot;text&quot; or an empty String, the response content is a UTF-16 encoded String.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the response type is &quot;arraybuffer&quot;, it means that the response content is an ArrayBuffer containing binary data.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the response type is &quot;json&quot;, the response content should be a JSON Document.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the response type is &quot;document&quot;, it means that the response content is an XML Document, which can be safely read with the <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#responseXML-prop">responseXML</db:link> property.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#response-prop">response</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="responseURL-prop">
<db:title>[read-only, since 6.6] responseURL : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>responseURL</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the url that was used to retrieve the response data, after any redirects have occurred.</db:para>
<db:para>This property was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="responseXML-prop">
<db:title>[read-only] responseXML : var</db:title>
<db:fieldsynopsis>
<db:type>var</db:type>
<db:varname>responseXML</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns either a Document, or null, if the response content cannot be parsed as XML or HTML. See the <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#responsexml-document">responseXML document</db:link> section for more information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#responseText-prop">responseText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>status</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the status code for the last response received.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#statusText-prop">statusText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="statusText-prop">
<db:title>[read-only] statusText : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>statusText</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns a String that has the status message associated with the status code for the last response received.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#status-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="abort-method">
<db:title>void abort()</db:title>
<db:para>Cancels the current request.</db:para>
<db:para>It changes the <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#readyState-prop">readyState</db:link> property to be XMLHttpRequest.UNSENT and emits the readystatechange signal.</db:para>
</db:section>
<db:section xml:id="getAllResponseHeaders-method">
<db:title>string getAllResponseHeaders()</db:title>
<db:para>Returns a String of headers received from the last response.</db:para>
<db:para>The following is an example response header:</db:para>
<db:programlisting language="cpp">content-encoding: gzip
content-type: text/html; charset=UTF-8
date: Mon, 06 Feb 2023 09:00:08 GMT
expires: Mon, 13 Feb 2023 09:00:08 GMT
last-modified: Thu, 17 Oct 2019 07:18:26 GMT
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#getResponseHeader-method">getResponseHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getResponseHeader-method">
<db:title>string getResponseHeader(<db:emphasis>headerName</db:emphasis>)</db:title>
<db:para>Returns either the <db:code role="parameter">headerName</db:code> value from the last response, or an empty String, if the <db:code role="parameter">headerName</db:code> is missing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-xmlhttprequest.xml#getAllResponseHeaders-method">getAllResponseHeaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open-method">
<db:title>void open(<db:emphasis>method</db:emphasis>, <db:emphasis>url</db:emphasis>, <db:emphasis>async</db:emphasis>)</db:title>
<db:para>Specify the HTTP <db:code role="parameter">method</db:code> you want the request to use, as well as the <db:code role="parameter">url</db:code> you wish to request. You should make sure to always call this function before <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#send-method">send</db:link>(). An optional third parameter <db:code role="parameter">async</db:code> can be used to decide whether the request should be asynchronous or not. The default value is true.</db:para>
<db:para>Emits the readystatechange signal, which calls the <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#onreadystatechange-prop">onreadystatechange</db:link> handler with the <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#readyState-prop">readyState</db:link> property set to XMLHttpRequest.OPENED.</db:para>
</db:section>
<db:section xml:id="overrideMimeType-method">
<db:title>[since 6.6] void overrideMimeType(<db:emphasis>mime</db:emphasis>)</db:title>
<db:para>Forces the XMLHttpRequest to interpret the data received in the next HTTP response, as if it had the MIME type <db:code role="parameter">mime</db:code>, rather than the one provided by the server.</db:para>
<db:para>This method was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="send-method">
<db:title>void send(<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Sends the request to the server. You can use the optional argument <db:code role="parameter">data</db:code> to add extra data to the body of the request. This can be useful for POST requests, where you typically want the request to contain extra data.</db:para>
<db:para>The <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#readyState-prop">readyState</db:link> property is updated once a response has been received from the server, and while the response is being processed. It will first be set to HEADERS_RECEIVED, then to LOADING, and finally DONE, once the response has been fully processed. The readystatechange signal is emitted every time <db:link xlink:href="qml-qtqml-xmlhttprequest.xml#readyState-prop">readyState</db:link> is updated.</db:para>
</db:section>
<db:section xml:id="setRequestHeader-method">
<db:title>void setRequestHeader(<db:emphasis>header</db:emphasis>, <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Adds a new header to the next request you wish to send. This is a key-value pair, which has the name <db:code role="parameter">header</db:code> and the corresponding <db:code role="parameter">value</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
