<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QThreadStorage Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QThreadStorage</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> class provides per-thread data storage.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QThreadStorage</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QThreadStorage is part of <db:simplelist><db:member>thread</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> is a template class that provides per-thread data storage.</db:para>
<db:para>The setLocalData() function stores a single thread-specific value for the calling thread. The data can be accessed later using localData().</db:para>
<db:para>The hasLocalData() function allows the programmer to determine if data has previously been set using the setLocalData() function. This is also useful for lazy initializiation.</db:para>
<db:para>If T is a pointer type, <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> takes ownership of the data (which must be created on the heap with new) and deletes it when the thread exits, either normally or via termination.</db:para>
<db:para>For example, the following code uses <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> to store a single cache for each thread that calls the cacheObject() and removeFromCache() functions. The cache is automatically deleted when the calling thread exits.</db:para>
<db:programlisting language="cpp">QThreadStorage&lt;QCache&lt;QString, SomeClass&gt; &gt; caches;

void cacheObject(const QString &amp;key, SomeClass *object)
{
    caches.localData().insert(key, object);
}

void removeFromCache(const QString &amp;key)
{
    if (!caches.hasLocalData())
        return;

    caches.localData().remove(key);
}
</db:programlisting>
<db:section xml:id="caveats">
<db:title>Caveats</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> destructor does not delete per-thread data. <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> only deletes per-thread data when the thread exits or when setLocalData() is called multiple times.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> can be used to store data for the main() thread. <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> deletes all data set for the main() thread when <db:link xlink:href="qapplication.xml">QApplication</db:link> is destroyed, regardless of whether or not the main() thread has actually finished.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qthread.xml">QThread</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
