<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QThreadStorage Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QThreadStorage</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> class provides per-thread data storage.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QThreadStorage</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QThreadStorage is part of <db:simplelist><db:member>thread</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> is a template class that provides per-thread data storage.</db:para>
<db:para>The <db:link xlink:href="qthreadstorage.xml#setLocalData">setLocalData</db:link>() function stores a single thread-specific value for the calling thread. The data can be accessed later using <db:link xlink:href="qthreadstorage.xml#localData">localData</db:link>().</db:para>
<db:para>The <db:link xlink:href="qthreadstorage.xml#hasLocalData">hasLocalData</db:link>() function allows the programmer to determine if data has previously been set using the <db:link xlink:href="qthreadstorage.xml#setLocalData">setLocalData</db:link>() function. This is also useful for lazy initializiation.</db:para>
<db:para>If T is a pointer type, <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> takes ownership of the data (which must be created on the heap with new) and deletes it when the thread exits, either normally or via termination.</db:para>
<db:para>For example, the following code uses <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> to store a single cache for each thread that calls the cacheObject() and removeFromCache() functions. The cache is automatically deleted when the calling thread exits.</db:para>
<db:programlisting language="cpp">QThreadStorage&amp;lt;QCache&amp;lt;QString, SomeClass&amp;gt; &amp;gt; caches;

void cacheObject(const QString &amp;amp;key, SomeClass *object)
{
    caches.localData().insert(key, object);
}

void removeFromCache(const QString &amp;amp;key)
{
    if (!caches.hasLocalData())
        return;

    caches.localData().remove(key);
}
</db:programlisting>
<db:section xml:id="caveats">
<db:title>Caveats</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> destructor does not delete per-thread data. <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> only deletes per-thread data when the thread exits or when <db:link xlink:href="qthreadstorage.xml#setLocalData">setLocalData</db:link>() is called multiple times.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> can be used to store data for the main() thread. <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> deletes all data set for the main() thread when <db:link xlink:href="qapplication.xml">QApplication</db:link> is destroyed, regardless of whether or not the main() thread has actually finished.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qthread.xml">QThread</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QThreadStorage-1">
<db:title>QThreadStorage::QThreadStorage()</db:title>
<db:constructorsynopsis>
<db:methodname>QThreadStorage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QThreadStorage()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new per-thread data storage object.</db:para>
</db:section>
<db:section xml:id="dtor.QThreadStorage">
<db:title>QThreadStorage::~QThreadStorage()</db:title>
<db:destructorsynopsis>
<db:methodname>~QThreadStorage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QThreadStorage()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the per-thread data storage object.</db:para>
<db:para>Note: The per-thread data stored is not deleted. Any data left in <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> is leaked. Make sure that all threads using <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> have exited before deleting the <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qthreadstorage.xml#hasLocalData">hasLocalData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasLocalData">
<db:title>bool QThreadStorage::hasLocalData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasLocalData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasLocalData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If T is a pointer type, returns true if the calling thread has non-zero data available.</db:para>
<db:para>If T is a value type, returns whether the data has already been constructed by calling <db:link xlink:href="qthreadstorage.xml#setLocalData">setLocalData</db:link> or <db:link xlink:href="qthreadstorage.xml#localData">localData</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qthreadstorage.xml#localData">localData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localData">
<db:title>T &amp;QThreadStorage::localData()</db:title>
<db:methodsynopsis>
<db:type>T &amp;</db:type>
<db:methodname>localData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; localData()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the data that was set by the calling thread.</db:para>
<db:para>If no data has been set, this will create a default constructed instance of type T.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qthreadstorage.xml#setLocalData">setLocalData</db:link>()</db:member>
<db:member><db:link xlink:href="qthreadstorage.xml#hasLocalData">hasLocalData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localData-1">
<db:title>T QThreadStorage::localData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T</db:type>
<db:methodname>localData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">T localData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a copy of the data that was set by the calling thread.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qthreadstorage.xml#hasLocalData">hasLocalData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLocalData">
<db:title>void QThreadStorage::setLocalData(T <db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLocalData</db:methodname>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLocalData(T data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the local data for the calling thread to <db:code role="parameter">data</db:code>. It can be accessed later using the <db:link xlink:href="qthreadstorage.xml#localData">localData</db:link>() functions.</db:para>
<db:para>If T is a pointer type, <db:link xlink:href="qthreadstorage.xml">QThreadStorage</db:link> takes ownership of the data and deletes it automatically either when the thread exits (either normally or via termination) or when setLocalData() is called again.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qthreadstorage.xml#localData">localData</db:link>()</db:member>
<db:member><db:link xlink:href="qthreadstorage.xml#hasLocalData">hasLocalData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
