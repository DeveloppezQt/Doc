<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractOAuthReplyHandler Class</db:title>
<db:productname>QtNetworkAuth</db:productname>
<db:edition>Qt Network Authorization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Network Authorization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Handles replies to OAuth authentication requests.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractOAuthReplyHandler</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS NetworkAuth)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::NetworkAuth)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += networkauth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractOAuthReplyHandler is part of <db:simplelist><db:member>oauth</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qabstractoauthreplyhandler.xml">QAbstractOAuthReplyHandler</db:link> class handles the answers to all OAuth authentication requests. This class is designed as a base whose subclasses implement custom behavior in the <db:link xlink:href="qabstractoauthreplyhandler.xml#callback">callback</db:link>() and <db:link xlink:href="qabstractoauthreplyhandler.xml#networkReplyFinished">networkReplyFinished</db:link>() methods.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractOAuthReplyHandler">
<db:title>[explicit] QAbstractOAuthReplyHandler::QAbstractOAuthReplyHandler(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractOAuthReplyHandler</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractOAuthReplyHandler(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a reply handler as a child of <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractOAuthReplyHandler">
<db:title>[virtual] QAbstractOAuthReplyHandler::~QAbstractOAuthReplyHandler()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractOAuthReplyHandler</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractOAuthReplyHandler()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the reply handler.</db:para>
</db:section>
<db:section xml:id="callback">
<db:title>[pure virtual] QString QAbstractOAuthReplyHandler::callback() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>callback</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString callback() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an absolute URI that the server will redirect the resource owner back to when the Resource Owner Authorization step is completed. If the client is unable to receive callbacks or a callback URI has been established via other means, the parameter value <db:emphasis role="bold">must</db:emphasis> be set to &quot;oob&quot; (all lower-case), to indicate an out-of-band configuration.</db:para>
<db:para>Derived classes should implement this function to provide the expected callback type.</db:para>
</db:section>
<db:section xml:id="callbackDataReceived">
<db:title>void QAbstractOAuthReplyHandler::callbackDataReceived(const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>callbackDataReceived</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void callbackDataReceived(const QByteArray &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a callback request is received: <db:code role="parameter">data</db:code> contains the information before parsing.</db:para>
</db:section>
<db:section xml:id="callbackReceived">
<db:title>void QAbstractOAuthReplyHandler::callbackReceived(const QVariantMap &amp;<db:emphasis>values</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>callbackReceived</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void callbackReceived(const QVariantMap &amp;values)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the reply from the server is received, with <db:code role="parameter">values</db:code> containing the token credentials and any additional information the server may have returned. When this signal is emitted, the authorization process is complete.</db:para>
</db:section>
<db:section xml:id="networkReplyFinished">
<db:title>[pure virtual] void QAbstractOAuthReplyHandler::networkReplyFinished(QNetworkReply *<db:emphasis>reply</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>networkReplyFinished</db:methodname>
<db:methodparam>
<db:type>QNetworkReply *</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void networkReplyFinished(QNetworkReply *reply) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>After the server determines whether the request is valid this function will be called. Reimplement it to get the data received from the server wrapped in <db:code role="parameter">reply</db:code>. <db:code role="parameter">reply</db:code> will be automatically deleted using <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>(), it thus must not be stored beyond the scope of this function.</db:para>
</db:section>
<db:section xml:id="replyDataReceived">
<db:title>void QAbstractOAuthReplyHandler::replyDataReceived(const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replyDataReceived</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void replyDataReceived(const QByteArray &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an HTTP request finishes and the data is available. <db:code role="parameter">data</db:code> contains the response before parsing.</db:para>
</db:section>
<db:section xml:id="tokensReceived">
<db:title>void QAbstractOAuthReplyHandler::tokensReceived(const QVariantMap &amp;<db:emphasis>tokens</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>tokensReceived</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>tokens</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void tokensReceived(const QVariantMap &amp;tokens)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when new <db:code role="parameter">tokens</db:code> are received from the server.</db:para>
</db:section>
</db:section>
</db:article>
