<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Q3DScatter Class</db:title>
<db:productname>QtDataVis3D</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link> class provides methods for rendering 3D scatter graphs.</db:para>
<db:para>This class was introduced in QtDataVisualization 1.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Q3DScatter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtDataVisualization 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS DataVisualization)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::DataVisualization)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += datavisualization</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstract3dgraph.xml" xlink:role="class">QAbstract3DGraph</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class enables developers to render scatter graphs in 3D and to view them by rotating the scene freely. Rotation is done by holding down the right mouse button and moving the mouse. Zooming is done by mouse wheel. Selection, if enabled, is done by left mouse button. The scene can be reset to default camera view by clicking mouse wheel. In touch devices rotation is done by tap-and-move, selection by tap-and-hold and zoom by pinch.</db:para>
<db:para>If no axes are set explicitly to <db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link>, temporary default axes with no labels are created. These default axes can be modified via axis accessors, but as soon any axis is set explicitly for the orientation, the default axis for that orientation is destroyed.</db:para>
<db:para><db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link> supports more than one series visible at the same time.</db:para>
<db:section xml:id="how-to-construct-a-minimal-q3dscatter-graph">
<db:title>How to construct a minimal Q3DScatter graph</db:title>
<db:para>First, construct <db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link>. Since we are running the graph as top level window in this example, we need to clear the <db:code>Qt::FramelessWindowHint</db:code> flag, which gets set by default:</db:para>
<db:programlisting language="cpp">Q3DScatter scatter;
scatter.setFlags(scatter.flags() ^ Qt::FramelessWindowHint);
</db:programlisting>
<db:para>Now <db:link xlink:href="q3dscatter.xml">Q3DScatter</db:link> is ready to receive data to be rendered. Add one series of 3 <db:link xlink:href="qvector3d.xml">QVector3D</db:link> items:</db:para>
<db:programlisting language="cpp">QScatter3DSeries *series = new QScatter3DSeries;
QScatterDataArray data;
data &amp;lt;&amp;lt; QVector3D(0.5f, 0.5f, 0.5f) &amp;lt;&amp;lt; QVector3D(-0.3f, -0.5f, -0.4f) &amp;lt;&amp;lt; QVector3D(0.0f, -0.3f, 0.2f);
series-&amp;gt;dataProxy()-&amp;gt;addItems(data);
scatter.addSeries(series);
</db:programlisting>
<db:para>Finally you will need to set it visible:</db:para>
<db:programlisting language="cpp">scatter.show();
</db:programlisting>
<db:para>The complete code needed to create and display this graph is:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QtDataVisualization&amp;gt;

int main(int argc, char **argv)
{
    qputenv(&quot;QSG_RHI_BACKEND&quot;, &quot;opengl&quot;);
    QGuiApplication app(argc, argv);

    Q3DScatter scatter;
    scatter.setFlags(scatter.flags() ^ Qt::FramelessWindowHint);
    QScatter3DSeries *series = new QScatter3DSeries;
    QScatterDataArray data;
    data &amp;lt;&amp;lt; QVector3D(0.5f, 0.5f, 0.5f) &amp;lt;&amp;lt; QVector3D(-0.3f, -0.5f, -0.4f) &amp;lt;&amp;lt; QVector3D(0.0f, -0.3f, 0.2f);
    series-&amp;gt;dataProxy()-&amp;gt;addItems(data);
    scatter.addSeries(series);
    scatter.show();

    return app.exec();
}
</db:programlisting>
<db:para>And this is what those few lines of code produce:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/q3dscatter-minimal.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The scene can be rotated, zoomed into, and an item can be selected to view its position, but no other interaction is included in this minimal code example. You can learn more by familiarizing yourself with the examples provided, like the <db:link xlink:href="qtdatavis3d-scatter-example.xml">Scatter Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dbars.xml">Q3DBars</db:link></db:member>
<db:member><db:link xlink:href="q3dsurface.xml">Q3DSurface</db:link></db:member>
<db:member><db:link xlink:href="qtdatavisualization-module.xml">Qt Data Visualization C++ Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="axisX-prop">
<db:title>axisX : QValue3DAxis*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QValue3DAxis*</db:type>
<db:varname>axisX</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">axisX</db:synopsisinfo>
<db:synopsisinfo role="setter">setAxisX</db:synopsisinfo>
<db:synopsisinfo role="notifier">axisXChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the active x-axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvalue3daxis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis role="bold">axisX</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="q3dscatter.xml#setAxisX">setAxisX</db:link></db:emphasis>(<db:type><db:link xlink:href="qvalue3daxis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">axisXChanged</db:emphasis>(<db:type><db:link xlink:href="qvalue3daxis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="axisY-prop">
<db:title>axisY : QValue3DAxis*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QValue3DAxis*</db:type>
<db:varname>axisY</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">axisY</db:synopsisinfo>
<db:synopsisinfo role="setter">setAxisY</db:synopsisinfo>
<db:synopsisinfo role="notifier">axisYChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the active y-axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvalue3daxis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis role="bold">axisY</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="q3dscatter.xml#setAxisY">setAxisY</db:link></db:emphasis>(<db:type><db:link xlink:href="qvalue3daxis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">axisYChanged</db:emphasis>(<db:type><db:link xlink:href="qvalue3daxis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="axisZ-prop">
<db:title>axisZ : QValue3DAxis*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QValue3DAxis*</db:type>
<db:varname>axisZ</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">axisZ</db:synopsisinfo>
<db:synopsisinfo role="setter">setAxisZ</db:synopsisinfo>
<db:synopsisinfo role="notifier">axisZChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the active z-axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvalue3daxis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="q3dscatter.xml#axisZ">axisZ</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="q3dscatter.xml#setAxisZ">setAxisZ</db:link></db:emphasis>(<db:type><db:link xlink:href="qvalue3daxis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">axisZChanged</db:emphasis>(<db:type><db:link xlink:href="qvalue3daxis.xml">QValue3DAxis</db:link></db:type> *<db:emphasis>axis</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="selectedSeries-prop">
<db:title>[read-only] selectedSeries : QScatter3DSeries* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QScatter3DSeries*</db:type>
<db:varname>selectedSeries</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">selectedSeries</db:synopsisinfo>
<db:synopsisinfo role="notifier">selectedSeriesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the selected series or null.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qscatter3dseries.xml">QScatter3DSeries</db:link></db:type> *<db:emphasis role="bold">selectedSeries</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">selectedSeriesChanged</db:emphasis>(<db:type><db:link xlink:href="qscatter3dseries.xml">QScatter3DSeries</db:link></db:type> *<db:emphasis>series</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="Q3DScatter">
<db:title>[explicit] Q3DScatter::Q3DScatter(const QSurfaceFormat *<db:emphasis>format</db:emphasis> = nullptr, QWindow *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>Q3DScatter</db:methodname>
<db:methodparam>
<db:type>const QSurfaceFormat *</db:type>
<db:parameter>format</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">Q3DScatter(const QSurfaceFormat *format, QWindow *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new 3D scatter graph with optional <db:code role="parameter">parent</db:code> window and surface <db:code role="parameter">format</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.Q3DScatter">
<db:title>[virtual] Q3DScatter::~Q3DScatter()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~Q3DScatter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~Q3DScatter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the 3D scatter graph.</db:para>
</db:section>
<db:section xml:id="addAxis">
<db:title>void Q3DScatter::addAxis(QValue3DAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addAxis</db:methodname>
<db:methodparam>
<db:type>QValue3DAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addAxis(QValue3DAxis *axis)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">axis</db:code> to the graph. The axes added via addAxis are not yet taken to use, addAxis is simply used to give the ownership of the <db:code role="parameter">axis</db:code> to the graph. The <db:code role="parameter">axis</db:code> must not be null or added to another graph.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dscatter.xml#releaseAxis">releaseAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dscatter.xml#setAxisX">setAxisX</db:link>()</db:member>
<db:member><db:link xlink:href="q3dscatter.xml#setAxisY">setAxisY</db:link>()</db:member>
<db:member><db:link xlink:href="q3dscatter.xml#setAxisZ">setAxisZ</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSeries">
<db:title>void Q3DScatter::addSeries(QScatter3DSeries *<db:emphasis>series</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addSeries</db:methodname>
<db:methodparam>
<db:type>QScatter3DSeries *</db:type>
<db:parameter>series</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addSeries(QScatter3DSeries *series)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the <db:code role="parameter">series</db:code> to the graph. A graph can contain multiple series, but has only one set of axes. If the newly added series has specified a selected item, it will be highlighted and any existing selection will be cleared. Only one added series can have an active selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#hasSeries">QAbstract3DGraph::hasSeries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="axes">
<db:title>QList&lt;QValue3DAxis *&gt; Q3DScatter::axes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QValue3DAxis *&gt;</db:type>
<db:methodname>axes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QValue3DAxis *&gt; axes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of all added axes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dscatter.xml#addAxis">addAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="axisZ">
<db:title>QValue3DAxis *Q3DScatter::axisZ() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QValue3DAxis *</db:type>
<db:methodname>axisZ</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">axisZ</db:synopsisinfo>
<db:synopsisinfo role="signature">QValue3DAxis * axisZ() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the used z-axis.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="q3dscatter.xml#axisZ-prop">axisZ</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dscatter.xml#setAxisZ">setAxisZ</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="releaseAxis">
<db:title>void Q3DScatter::releaseAxis(QValue3DAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>releaseAxis</db:methodname>
<db:methodparam>
<db:type>QValue3DAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void releaseAxis(QValue3DAxis *axis)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the ownership of the <db:code role="parameter">axis</db:code> back to the caller, if it is added to this graph. If the released <db:code role="parameter">axis</db:code> is in use, a new default axis will be created and set active.</db:para>
<db:para>If the default axis is released and added back later, it behaves as any other axis would.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dscatter.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dscatter.xml#setAxisX">setAxisX</db:link>()</db:member>
<db:member><db:link xlink:href="q3dscatter.xml#setAxisY">setAxisY</db:link>()</db:member>
<db:member><db:link xlink:href="q3dscatter.xml#setAxisZ">setAxisZ</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeSeries">
<db:title>void Q3DScatter::removeSeries(QScatter3DSeries *<db:emphasis>series</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeSeries</db:methodname>
<db:methodparam>
<db:type>QScatter3DSeries *</db:type>
<db:parameter>series</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeSeries(QScatter3DSeries *series)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the <db:code role="parameter">series</db:code> from the graph.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#hasSeries">QAbstract3DGraph::hasSeries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="seriesList">
<db:title>QList&lt;QScatter3DSeries *&gt; Q3DScatter::seriesList() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QScatter3DSeries *&gt;</db:type>
<db:methodname>seriesList</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QScatter3DSeries *&gt; seriesList() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of series added to this graph.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#hasSeries">QAbstract3DGraph::hasSeries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAxisX">
<db:title>void Q3DScatter::setAxisX(QValue3DAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAxisX</db:methodname>
<db:methodparam>
<db:type>QValue3DAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">axisX</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAxisX(QValue3DAxis *axis)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">axis</db:code> as the active x-axis. Implicitly calls <db:link xlink:href="q3dscatter.xml#addAxis">addAxis</db:link>() to transfer the ownership of the axis to this graph.</db:para>
<db:para>If <db:code role="parameter">axis</db:code> is null, a temporary default axis with no labels and an automatically adjusting range is created. This temporary axis is destroyed if another axis is set explicitly to the same orientation.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="q3dscatter.xml#axisX-prop">axisX</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dscatter.xml#axisX-prop">axisX</db:link>()</db:member>
<db:member><db:link xlink:href="q3dscatter.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dscatter.xml#releaseAxis">releaseAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAxisY">
<db:title>void Q3DScatter::setAxisY(QValue3DAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAxisY</db:methodname>
<db:methodparam>
<db:type>QValue3DAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">axisY</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAxisY(QValue3DAxis *axis)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">axis</db:code> as the active y-axis. Implicitly calls <db:link xlink:href="q3dscatter.xml#addAxis">addAxis</db:link>() to transfer the ownership of the axis to this graph.</db:para>
<db:para>If <db:code role="parameter">axis</db:code> is null, a temporary default axis with no labels and an automatically adjusting range is created. This temporary axis is destroyed if another axis is set explicitly to the same orientation.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="q3dscatter.xml#axisY-prop">axisY</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dscatter.xml#axisY-prop">axisY</db:link>()</db:member>
<db:member><db:link xlink:href="q3dscatter.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dscatter.xml#releaseAxis">releaseAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAxisZ">
<db:title>void Q3DScatter::setAxisZ(QValue3DAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAxisZ</db:methodname>
<db:methodparam>
<db:type>QValue3DAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">axisZ</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAxisZ(QValue3DAxis *axis)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">axis</db:code> as the active z-axis. Implicitly calls <db:link xlink:href="q3dscatter.xml#addAxis">addAxis</db:link>() to transfer the ownership of the axis to this graph.</db:para>
<db:para>If <db:code role="parameter">axis</db:code> is null, a temporary default axis with no labels and an automatically adjusting range is created. This temporary axis is destroyed if another axis is set explicitly to the same orientation.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="q3dscatter.xml#axisZ-prop">axisZ</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="q3dscatter.xml#axisZ">axisZ</db:link>()</db:member>
<db:member><db:link xlink:href="q3dscatter.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="q3dscatter.xml#releaseAxis">releaseAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
