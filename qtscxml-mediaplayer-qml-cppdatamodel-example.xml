<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt SCXML Media Player QML Example (C++ Data Model)</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Scxml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Sends data to and receives it from a C++ data model.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/mediaplayer.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Media Player QML Example (C++ Data Model)</db:emphasis> demonstrates how to access data from a C++ data model. The data model enables writing C++ code for <db:emphasis>expr</db:emphasis> attributes and <db:code>&lt;script&gt;</db:code> elements. The <db:emphasis>data part</db:emphasis> of the data model is backed by a subclass of <db:link xlink:href="qscxmlcppdatamodel.xml">QScxmlCppDataModel</db:link>, for which the Qt SCXML compiler (<db:code>qscxmlc</db:code>) generates the dispatch methods.</db:para>
<db:para>The UI is created using Qt Quick.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="using-the-c-data-model">
<db:title>Using the C++ Data Model</db:title>
<db:para>We specify the data model as a value of the <db:emphasis>datamodel</db:emphasis> attribute of the <db:code>&lt;scxml&gt;</db:code> element in the SCXML file:</db:para>
<db:programlisting language="cpp">&lt;!-- enable-qt-mode: yes --&gt;
&lt;scxml
    xmlns=&quot;http://www.w3.org/2005/07/scxml&quot;
    version=&quot;1.0&quot;
    name=&quot;MediaPlayerStateMachine&quot;
    initial=&quot;stopped&quot;
    datamodel=&quot;cplusplus:TheDataModel:thedatamodel.h&quot;
</db:programlisting>
<db:para>The format of the <db:emphasis>datamodel</db:emphasis> attribute is: <db:code>cplusplus:&lt;class-name&gt;:&lt;classdef-header&gt;</db:code>. Therefore, we need a file called <db:emphasis>thedatamodel.h</db:emphasis> that contains a subclass of <db:link xlink:href="qscxmlcppdatamodel.xml">QScxmlCppDataModel</db:link>:</db:para>
<db:programlisting language="cpp">#include &quot;qscxmlcppdatamodel.h&quot;

class TheDataModel: public QScxmlCppDataModel
{
    Q_OBJECT
    Q_SCXML_DATAMODEL

</db:programlisting>
<db:para><db:link xlink:href="qscxmlcppdatamodel.xml">QScxmlCppDataModel</db:link> derives from <db:link xlink:href="qobject.xml">QObject</db:link>, so we add the <db:code>Q_OBJECT</db:code> macro in the private section of the definition, right after the opening bracket. We then place the <db:code>Q_SCXML_DATAMODEL</db:code> macro after <db:code>Q_OBJECT</db:code>. The macro expands to the declaration of virtual methods, the implementation of which is generated by the Qt SCXML compiler.</db:para>
<db:para>In the SCXML file, we specify C++ statements in the <db:code>&lt;script&gt;</db:code> element and use the <db:emphasis>expr</db:emphasis> attribute to access the data model:</db:para>
<db:programlisting language="cpp">    &lt;state id=&quot;stopped&quot;&gt;
        &lt;transition event=&quot;tap&quot; cond=&quot;isValidMedia()&quot; target=&quot;playing&quot;/&gt;
    &lt;/state&gt;

    &lt;state id=&quot;playing&quot;&gt;
        &lt;onentry&gt;
            &lt;script&gt;
                media = eventData().value(QStringLiteral(&quot;media&quot;)).toString();
            &lt;/script&gt;
            &lt;send type=&quot;qt:signal&quot; event=&quot;playbackStarted&quot;&gt;
                &lt;param name=&quot;media&quot; expr=&quot;media&quot;/&gt;
            &lt;/send&gt;
        &lt;/onentry&gt;

        &lt;onexit&gt;
            &lt;send type=&quot;qt:signal&quot; event=&quot;playbackStopped&quot;&gt;
                &lt;param name=&quot;media&quot; expr=&quot;media&quot;/&gt;
            &lt;/send&gt;
        &lt;/onexit&gt;

        &lt;transition event=&quot;tap&quot; cond=&quot;!isValidMedia() || media == eventData().value(QStringLiteral(&quot;media&quot;))&quot; target=&quot;stopped&quot;/&gt;
        &lt;transition event=&quot;tap&quot; cond=&quot;isValidMedia() &amp;amp;&amp;amp; media != eventData().value(QStringLiteral(&quot;media&quot;))&quot; target=&quot;playing&quot;/&gt;
    &lt;/state&gt;
</db:programlisting>
<db:para>The Qt SCXML compiler generates the various <db:code>evaluateTo</db:code> methods and converts the expressions and scripts into lambdas inside those methods in <db:emphasis>mediaplayer-cppdatamodel.cpp</db:emphasis>:</db:para>
<db:programlisting language="cpp">bool TheDataModel::evaluateToBool(QScxmlExecutableContent::EvaluatorId id, bool *ok) {
....
    return [this]()-&gt;bool{ return isValidMedia(); }();
....
}

QVariant TheDataModel::evaluateToVariant(QScxmlExecutableContent::EvaluatorId id, bool *ok) {
....
        return [this]()-&gt;QVariant{ return media; }();
....
}

void TheDataModel::evaluateToVoid(QScxmlExecutableContent::EvaluatorId id, bool *ok) {
....
        [this]()-&gt;void{ media = eventData().value(QStringLiteral(&quot;media&quot;)).toString(); }();
....
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="mediaplayer-qml-cppdatamodel/mediaplayer-cppdatamodel.scxml">mediaplayer-qml-cppdatamodel/mediaplayer-cppdatamodel.scxml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mediaplayer-qml-cppdatamodel/mediaplayer-qml-cppdatamodel.cpp">mediaplayer-qml-cppdatamodel/mediaplayer-qml-cppdatamodel.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mediaplayer-qml-cppdatamodel/mediaplayer-qml-cppdatamodel.pro">mediaplayer-qml-cppdatamodel/mediaplayer-qml-cppdatamodel.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mediaplayer-qml-cppdatamodel/mediaplayer-qml-cppdatamodel.qml">mediaplayer-qml-cppdatamodel/mediaplayer-qml-cppdatamodel.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mediaplayer-qml-cppdatamodel/mediaplayer-qml-cppdatamodel.qrc">mediaplayer-qml-cppdatamodel/mediaplayer-qml-cppdatamodel.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mediaplayer-qml-cppdatamodel/thedatamodel.cpp">mediaplayer-qml-cppdatamodel/thedatamodel.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mediaplayer-qml-cppdatamodel/thedatamodel.h">mediaplayer-qml-cppdatamodel/thedatamodel.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
