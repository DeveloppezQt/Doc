<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QtSensorGestures Plugins</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Explains how to develop recognizer plugins with QtSensorGestures.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>The QtSensorGestures recognizer plugins are the way to create your own sensor gestures.</db:para>
<db:para>Creating software to recognize motion gestures using sensors is a huge subject not covered here.</db:para>
<db:para>The <db:link xlink:href="qsensorgesture.xml">QSensorGesture</db:link> API does not limit usage to any of the common classification methods of gesture recognition, such as Hidden Markov Models, Neural Networks, Dynamic Time Warping, or even the ad-hoc heuristic recognizers of Qt's built-in sensor gesture recognizers. It's basically a signaling system for lower level gesture recogition methods and algorithms to communicate to the higher level applications.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>The steps for creating a sensor gesture plugin are as follows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Sub-class from <db:link xlink:href="qsensorgestureplugininterface.xml">QSensorGesturePluginInterface</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Sub-class from <db:link xlink:href="qsensorgesturerecognizer.xml">QSensorGestureRecognizer</db:link> and implement gesture recognizer logic using <db:link xlink:href="qtsensors-module.xml">QtSensors</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Create an instance of that recognizer in the derived <db:link xlink:href="qsensorgestureplugininterface.xml">QSensorGesturePluginInterface</db:link> class, and call <db:link xlink:href="qsensorgesturemanager.xml#registerSensorGestureRecognizer">QSensorGestureManager::registerSensorGestureRecognizer</db:link>(sRec); in your registerRecognizers() function. <db:link xlink:href="qsensorgesturemanager.xml">QSensorGestureManager</db:link> will retain ownership of the recognizer object.</db:para>
<db:para>This is the class in which the gesture recognizer system should be implemented from.</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">MySensorGestureRecognizer::MySensorGestureRecognizer(QObject *parent)
    : QSensorGestureRecognizer(parent)
{
}

MySensorGestureRecognizer::~MySensorGestureRecognizer()
{
}

bool MySensorGestureRecognizer::start()
{
    Q_EMIT mySignal();
    return true;
}

bool MySensorGestureRecognizer::stop()
{
    return true;
}

bool MySensorGestureRecognizer::isActive()
{
    return true;
}

void  MySensorGestureRecognizer::create()
{
}

QString MySensorGestureRecognizer::id() const
{
    return QString(&quot;QtSensors.mygestures&quot;);
}

MySensorGesturePlugin::MySensorGesturePlugin(){}
MySensorGesturePlugin::~MySensorGesturePlugin(){}

QList &amp;lt;QSensorGestureRecognizer *&amp;gt;  MySensorGesturePlugin::createRecognizers()
{
    QList &amp;lt;QSensorGestureRecognizer *&amp;gt;  recognizers;
    MySensorGestureRecognizer *recognizer = new MySensorGestureRecognizer(this);
    recognizers.append(recognizer);

    return recognizers;
}

QStringList MySensorGesturePlugin::supportedIds() const
{
       return QStringList() &amp;lt;&amp;lt; &quot;QtSensors.mygestures&quot;;
}
</db:programlisting>
<db:section xml:id="recognizer-classes">
<db:title>Recognizer Classes</db:title>
<db:para>If you are making sensorgestures available through the QtSensorGestures API, these are the classes to subclass.</db:para>
<db:variablelist role="sensorgestures_recognizer">
<db:varlistentry>
<db:term><db:link xlink:href="qsensorgestureplugininterface.xml" xlink:role="class">QSensorGesturePluginInterface</db:link></db:term>
<db:listitem>
<db:para>The QSensorGesturePluginInterface class is the pure virtual interface to sensor gesture plugins.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsensorgesturerecognizer.xml" xlink:role="class">QSensorGestureRecognizer</db:link></db:term>
<db:listitem>
<db:para>The QSensorGestureRecognizer class is the base class for a sensor gesture recognizer.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:anchor xml:id="qt-sensor-gestures"/>
<db:section xml:id="recognizer-plugins">
<db:title>Recognizer Plugins</db:title>
<db:para>The Sensor Gesture Recognizers that come with Qt are made using an ad-hoc heuristic approach. The user cannot define their own gestures, and must learn how to perform and accommodate the pre-defined gestures herein.</db:para>
<db:para>A developer may use any method, including computationally- and training-intensive well- known classifiers, to produce gesture recognizers. There are currently no classes in Qt for gesture training, nor is it possible for the user to define his own sensor-based motion gestures.</db:para>
<db:para>A procedure for writing ad-hoc recognizers might include:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Obtain and gather output from the accelerometer through <db:code>QAccelerometerReading</db:code> of a gesture being performed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use various methods and constraints on the accelerometer data to recognize the various states:</db:para>
<db:orderedlist numeration="lowerroman">
<db:listitem>
<db:para>Initial &quot;listening&quot; state for a gesture</db:para>
</db:listitem>
<db:listitem>
<db:para>Start of a possible gesture, moving into a &quot;detecting&quot; state</db:para>
</db:listitem>
<db:listitem>
<db:para>End of a possible gesture, moving into a &quot;recognizing&quot; state</db:para>
</db:listitem>
<db:listitem>
<db:para>and finally, if it is recognized, the &quot;recognized&quot; state, or if not recognized, move back to the &quot;listening&quot; state.</db:para>
</db:listitem>
</db:orderedlist>
</db:listitem>
<db:listitem>
<db:para>Test procedure to make sure it is easy to perform, and will not produce too many false positive recognitions, or collisions if used with other gestures. Meaning that gestures performed get recognized as another gesture instead.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Below you will find a list of included plugins and their signals.</db:para>
<db:para>For the ShakeGestures plugin:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Recognizer Id</db:para>
</db:td>
<db:td>
<db:para>Signals</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtsensors-module.xml">QtSensors</db:link>.shake</db:para>
</db:td>
<db:td>
<db:para>shake</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For the QtSensorGestures plugin:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Recognizer Id</db:para>
</db:td>
<db:td>
<db:para>Signals</db:para>
</db:td>
<db:td>
<db:para>Description</db:para>
</db:td>
<db:td>
<db:para>Images</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtsensors-module.xml">QtSensors</db:link>.cover</db:para>
</db:td>
<db:td>
<db:para>cover</db:para>
</db:td>
<db:td>
<db:para>Hand covers up phone display for one second, when it's face up, using the Proximity and Orientation sensors.</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensorgesture-cover.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtsensors-module.xml">QtSensors</db:link>.doubletap</db:para>
</db:td>
<db:td>
<db:para>doubletap</db:para>
</db:td>
<db:td>
<db:para>Double tap of finger on phone, using the DoubleTap sensor.</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensorgesture-doubletap.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtsensors-module.xml">QtSensors</db:link>.hover</db:para>
</db:td>
<db:td>
<db:para>hover</db:para>
</db:td>
<db:td>
<db:para>Hand hovers about 4 cm above the phone for more than 1 second, then is removed when face up, using the IR Proximity sensor.</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensorgesture-hover.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtsensors-module.xml">QtSensors</db:link>.pickup</db:para>
</db:td>
<db:td>
<db:para>pickup</db:para>
</db:td>
<db:td>
<db:para>Phone is resting face up on a flat curface, and is then picked up and brought up into viewing position. Uses the Accelerometer sensor.</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensorgesture-faceup.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtsensors-module.xml">QtSensors</db:link>.shake2</db:para>
</db:td>
<db:td>
<db:para>shakeLeft, shakeRight, shakeUp, shakeDown</db:para>
</db:td>
<db:td>
<db:para>Shake phone in a certain direction, using the Accelerometer sensor.</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensorgesture-shake.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtsensors-module.xml">QtSensors</db:link>.slam</db:para>
</db:td>
<db:td>
<db:para>slam</db:para>
</db:td>
<db:td>
<db:para>Phone is held in a top up position with a side facing forward for a moment. Swing it quickly with a downward motion like it is being used to point at something with the top corner. Uses the Accelerometer and Orientation sensors.</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensorgesture-slam_1.png"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensorgesture-slam_2.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtsensors-module.xml">QtSensors</db:link>.turnover</db:para>
</db:td>
<db:td>
<db:para>turnover</db:para>
</db:td>
<db:td>
<db:para>Phone is turned face down and placed on a surface, using Proximity and Orientation sensors.</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensorgesture-facedown.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtsensors-module.xml">QtSensors</db:link>.twist</db:para>
</db:td>
<db:td>
<db:para>twistLeft, twistRight</db:para>
</db:td>
<db:td>
<db:para>Phone is held face up and then twisted left or right (left side up or right side up) and back, using the Accelerometer and Orientation sensors.</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensorgesture-twist.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtsensors-module.xml">QtSensors</db:link>.whip</db:para>
</db:td>
<db:td>
<db:para>whip</db:para>
</db:td>
<db:td>
<db:para>Move phone quickly down and then back up. Uses the Accelerometer and Orientation sensors.</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensorgesture-whip.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
</db:section>
</db:article>
