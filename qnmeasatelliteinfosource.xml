<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNmeaSatelliteInfoSource Class</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnmeasatelliteinfosource.xml">QNmeaSatelliteInfoSource</db:link> class provides satellite information using an NMEA data source.</db:para>
<db:para>This class was introduced in Qt 6.2.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNmeaSatelliteInfoSource</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Positioning)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Positioning)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += positioning</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgeosatelliteinfosource.xml" xlink:role="class">QGeoSatelliteInfoSource</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNmeaSatelliteInfoSource is part of <db:simplelist><db:member>QtPositioning-positioning</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>NMEA is a commonly used protocol for the specification of one's global position at a certain point in time. The <db:link xlink:href="qnmeasatelliteinfosource.xml">QNmeaSatelliteInfoSource</db:link> class reads NMEA data and uses it to provide information about satellites in view and satellites in use in form of lists of <db:link xlink:href="qgeosatelliteinfo.xml">QGeoSatelliteInfo</db:link> objects.</db:para>
<db:para>A <db:link xlink:href="qnmeasatelliteinfosource.xml">QNmeaSatelliteInfoSource</db:link> instance operates in either <db:link xlink:href="qnmeasatelliteinfosource.xml#UpdateMode-enum">RealTimeMode</db:link> or <db:link xlink:href="qnmeasatelliteinfosource.xml#UpdateMode-enum">SimulationMode</db:link>. These modes allow NMEA data to be read from either a live source of data, or replayed for simulation purposes from previously recorded NMEA data.</db:para>
<db:para>The source of NMEA data is set via <db:link xlink:href="qnmeasatelliteinfosource.xml#setDevice">setDevice</db:link>().</db:para>
<db:para>Use <db:link xlink:href="qnmeasatelliteinfosource.xml#startUpdates">startUpdates</db:link>() to start receiving regular satellite information updates and <db:link xlink:href="qnmeasatelliteinfosource.xml#stopUpdates">stopUpdates</db:link>() to stop these updates. If you only require updates occasionally, you can call <db:link xlink:href="qnmeasatelliteinfosource.xml#requestUpdate">requestUpdate</db:link>() to request a single update of both satellites in view and satellites in use.</db:para>
<db:para>The information about satellites in view is received via the <db:link xlink:href="qgeosatelliteinfosource.xml#satellitesInViewUpdated">satellitesInViewUpdated</db:link>() signal.</db:para>
<db:para>The information about satellites in use is received via the <db:link xlink:href="qgeosatelliteinfosource.xml#satellitesInUseUpdated">satellitesInUseUpdated</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SatelliteInfoParseStatus-enum">
<db:title>enum QNmeaSatelliteInfoSource::SatelliteInfoParseStatus</db:title>
<db:enumsynopsis>
<db:enumname>SatelliteInfoParseStatus</db:enumname>
<db:enumitem>
<db:enumidentifier>NotParsed</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PartiallyParsed</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FullyParsed</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Defines the parse status of satellite information. The satellite information can be split into multiple sentences, and we need to parse all of them.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnmeasatelliteinfosource.xml">QNmeaSatelliteInfoSource</db:link></db:emphasis>::NotParsed</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The data does not contain information about satellites.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnmeasatelliteinfosource.xml">QNmeaSatelliteInfoSource</db:link></db:emphasis>::PartiallyParsed</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A valid satellite information is received and parsed, but it's not complete, so we need to wait for another NMEA sentence.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnmeasatelliteinfosource.xml">QNmeaSatelliteInfoSource</db:link></db:emphasis>::FullyParsed</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Satellite information was fully collected and parsed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="UpdateMode-enum">
<db:title>enum QNmeaSatelliteInfoSource::UpdateMode</db:title>
<db:enumsynopsis>
<db:enumname>UpdateMode</db:enumname>
<db:enumitem>
<db:enumidentifier>RealTimeMode</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SimulationMode</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Defines the available update modes.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnmeasatelliteinfosource.xml">QNmeaSatelliteInfoSource</db:link></db:emphasis>::<db:emphasis role="bold">UpdateMode</db:emphasis>::RealTimeMode</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Satellite information is read and distributed from the data source as it becomes available. Use this mode if you are using a live source of NMEA data (for example a GPS hardware device).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnmeasatelliteinfosource.xml">QNmeaSatelliteInfoSource</db:link></db:emphasis>::<db:emphasis role="bold">UpdateMode</db:emphasis>::SimulationMode</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Satellite information is read and distributed from the data source at the given rate. The rate is determined by the <db:link xlink:href="qnmeasatelliteinfosource.xml#SimulationUpdateInterval-var">SimulationUpdateInterval</db:link> parameter. Use this mode if the data source contains previously recorded NMEA data and you want to replay the data for simulation purposes.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNmeaSatelliteInfoSource">
<db:title>[explicit] QNmeaSatelliteInfoSource::QNmeaSatelliteInfoSource(QNmeaSatelliteInfoSource::UpdateMode <db:emphasis>mode</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QNmeaSatelliteInfoSource</db:methodname>
<db:methodparam>
<db:type>QNmeaSatelliteInfoSource::UpdateMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QNmeaSatelliteInfoSource(QNmeaSatelliteInfoSource::UpdateMode mode, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qnmeasatelliteinfosource.xml">QNmeaSatelliteInfoSource</db:link> instance with the given <db:code role="parameter">parent</db:code> and <db:code role="parameter">mode</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNmeaSatelliteInfoSource">
<db:title>[override virtual] QNmeaSatelliteInfoSource::~QNmeaSatelliteInfoSource()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QNmeaSatelliteInfoSource</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QNmeaSatelliteInfoSource() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the satellite information source.</db:para>
</db:section>
<db:section xml:id="backendProperty">
<db:title>[override virtual] QVariant QNmeaSatelliteInfoSource::backendProperty(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>backendProperty</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant backendProperty(const QString &amp;name) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgeosatelliteinfosource.xml#backendProperty" role="function">QGeoSatelliteInfoSource::backendProperty(const QString &amp;name) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnmeasatelliteinfosource.xml#setBackendProperty">setBackendProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="device">
<db:title>QIODevice *QNmeaSatelliteInfoSource::device() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QIODevice *</db:type>
<db:methodname>device</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * device() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the NMEA data source.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnmeasatelliteinfosource.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>[override virtual] QGeoSatelliteInfoSource::Error QNmeaSatelliteInfoSource::error() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QGeoSatelliteInfoSource::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoSatelliteInfoSource::Error error() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgeosatelliteinfosource.xml#error" role="function">QGeoSatelliteInfoSource::error() const</db:link>.</db:para>
</db:section>
<db:section xml:id="minimumUpdateInterval">
<db:title>[override virtual] int QNmeaSatelliteInfoSource::minimumUpdateInterval() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>minimumUpdateInterval</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int minimumUpdateInterval() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qgeosatelliteinfosource.xml#minimumUpdateInterval-prop" role="property">QGeoSatelliteInfoSource::minimumUpdateInterval</db:link>.</db:para>
</db:section>
<db:section xml:id="parseSatelliteInfoFromNmea">
<db:title>[virtual protected] QNmeaSatelliteInfoSource::SatelliteInfoParseStatus QNmeaSatelliteInfoSource::parseSatelliteInfoFromNmea(const char *<db:emphasis>data</db:emphasis>, int <db:emphasis>size</db:emphasis>, QList&lt;QGeoSatelliteInfo&gt; &amp;<db:emphasis>infos</db:emphasis>, QGeoSatelliteInfo::SatelliteSystem &amp;<db:emphasis>system</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QNmeaSatelliteInfoSource::SatelliteInfoParseStatus</db:type>
<db:methodname>parseSatelliteInfoFromNmea</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QList&lt;QGeoSatelliteInfo&gt; &amp;</db:type>
<db:parameter>infos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGeoSatelliteInfo::SatelliteSystem &amp;</db:type>
<db:parameter>system</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNmeaSatelliteInfoSource::SatelliteInfoParseStatus parseSatelliteInfoFromNmea(const char *data, int size, QList&lt;QGeoSatelliteInfo&gt; &amp;infos, QGeoSatelliteInfo::SatelliteSystem &amp;system)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Parses an NMEA sentence string to extract the information about satellites in view.</db:para>
<db:para>The default implementation will parse standard NMEA $GPGSV sentences. This method should be reimplemented in a subclass whenever the need to deal with non-standard NMEA sentences arises.</db:para>
<db:para>The parser reads <db:code role="parameter">size</db:code> bytes from <db:code role="parameter">data</db:code> and uses that information to fill <db:code role="parameter">infos</db:code> list.</db:para>
<db:para>Returns <db:link xlink:href="qnmeasatelliteinfosource.xml#SatelliteInfoParseStatus-enum">SatelliteInfoParseStatus</db:link> with parse result. Modifies <db:code role="parameter">infos</db:code> list in case <db:link xlink:href="qnmeasatelliteinfosource.xml#SatelliteInfoParseStatus-enum">PartiallyParsed</db:link> or <db:link xlink:href="qnmeasatelliteinfosource.xml#SatelliteInfoParseStatus-enum">FullyParsed</db:link> is returned. Also sets the <db:code role="parameter">system</db:code> to correct satellite system type. This is required to determine the system type in case there are no satellites in view.</db:para>
</db:section>
<db:section xml:id="parseSatellitesInUseFromNmea">
<db:title>[virtual protected] QGeoSatelliteInfo::SatelliteSystem QNmeaSatelliteInfoSource::parseSatellitesInUseFromNmea(const char *<db:emphasis>data</db:emphasis>, int <db:emphasis>size</db:emphasis>, QList&lt;int&gt; &amp;<db:emphasis>pnrsInUse</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QGeoSatelliteInfo::SatelliteSystem</db:type>
<db:methodname>parseSatellitesInUseFromNmea</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QList&lt;int&gt; &amp;</db:type>
<db:parameter>pnrsInUse</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoSatelliteInfo::SatelliteSystem parseSatellitesInUseFromNmea(const char *data, int size, QList&lt;int&gt; &amp;pnrsInUse)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Parses an NMEA sentence string to extract the IDs of satelites in use.</db:para>
<db:para>The default implementation will parse standard NMEA $GPGSA sentences. This method should be reimplemented in a subclass whenever the need to deal with non-standard NMEA sentences arises.</db:para>
<db:para>The parser reads <db:code role="parameter">size</db:code> bytes from <db:code role="parameter">data</db:code> and uses that information to fill <db:code role="parameter">pnrsInUse</db:code> list.</db:para>
<db:para>Returns system type if the sentence was successfully parsed, otherwise returns <db:link xlink:href="qgeosatelliteinfo.xml#SatelliteSystem-enum">QGeoSatelliteInfo::Undefined</db:link> and should not modifiy <db:code role="parameter">pnrsInUse</db:code>.</db:para>
</db:section>
<db:section xml:id="requestUpdate">
<db:title>[override virtual] void QNmeaSatelliteInfoSource::requestUpdate(int <db:emphasis>msec</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>requestUpdate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msec</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestUpdate(int msec) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgeosatelliteinfosource.xml#requestUpdate" role="function">QGeoSatelliteInfoSource::requestUpdate(int timeout)</db:link>.</db:para>
</db:section>
<db:section xml:id="setBackendProperty">
<db:title>[override virtual] bool QNmeaSatelliteInfoSource::setBackendProperty(const QString &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setBackendProperty</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setBackendProperty(const QString &amp;name, const QVariant &amp;value) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgeosatelliteinfosource.xml#setBackendProperty" role="function">QGeoSatelliteInfoSource::setBackendProperty(const QString &amp;name, const QVariant &amp;value)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnmeasatelliteinfosource.xml#backendProperty">backendProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevice">
<db:title>void QNmeaSatelliteInfoSource::setDevice(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDevice</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDevice(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the NMEA data source to <db:code role="parameter">device</db:code>. If the device is not open, it will be opened in QIODevice::ReadOnly mode.</db:para>
<db:para>The source device can only be set once and must be set before calling <db:link xlink:href="qnmeasatelliteinfosource.xml#startUpdates">startUpdates</db:link>() or <db:link xlink:href="qnmeasatelliteinfosource.xml#requestUpdate">requestUpdate</db:link>().</db:para>
<db:note>
<db:para>The <db:code role="parameter">device</db:code> must emit <db:link xlink:href="qiodevice.xml#readyRead">QIODevice::readyRead</db:link>() for the source to be notified when data is available for reading. <db:link xlink:href="qnmeasatelliteinfosource.xml">QNmeaSatelliteInfoSource</db:link> does not assume the ownership of the device, and hence does not deallocate it upon destruction.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnmeasatelliteinfosource.xml#device">device</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUpdateInterval">
<db:title>[override virtual] void QNmeaSatelliteInfoSource::setUpdateInterval(int <db:emphasis>msec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setUpdateInterval</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msec</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUpdateInterval(int msec) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qgeosatelliteinfosource.xml#updateInterval-prop" role="property">QGeoSatelliteInfoSource::updateInterval</db:link>.</db:para>
</db:section>
<db:section xml:id="startUpdates">
<db:title>[override virtual] void QNmeaSatelliteInfoSource::startUpdates()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>startUpdates</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void startUpdates() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgeosatelliteinfosource.xml#startUpdates" role="function">QGeoSatelliteInfoSource::startUpdates()</db:link>.</db:para>
</db:section>
<db:section xml:id="stopUpdates">
<db:title>[override virtual] void QNmeaSatelliteInfoSource::stopUpdates()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>stopUpdates</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stopUpdates() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgeosatelliteinfosource.xml#stopUpdates" role="function">QGeoSatelliteInfoSource::stopUpdates()</db:link>.</db:para>
</db:section>
<db:section xml:id="updateMode">
<db:title>QNmeaSatelliteInfoSource::UpdateMode QNmeaSatelliteInfoSource::updateMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNmeaSatelliteInfoSource::UpdateMode</db:type>
<db:methodname>updateMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNmeaSatelliteInfoSource::UpdateMode updateMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the update mode.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="SimulationUpdateInterval-var">
<db:title>QString QNmeaSatelliteInfoSource::SimulationUpdateInterval</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:varname>SimulationUpdateInterval</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This variable holds the backend property name for data read rate in the <db:link xlink:href="qnmeasatelliteinfosource.xml#UpdateMode-enum">SimulationMode</db:link>. The value for this property is the integer number representing the amount of milliseconds between the subsequent reads. Use this parameter in the <db:link xlink:href="qnmeasatelliteinfosource.xml#setBackendProperty">setBackendProperty</db:link>() and <db:link xlink:href="qnmeasatelliteinfosource.xml#backendProperty">backendProperty</db:link>() methods.</db:para>
<db:note>
<db:para>This property is different from the interval that can be set via <db:link xlink:href="qnmeasatelliteinfosource.xml#setUpdateInterval">setUpdateInterval</db:link>(). The value set via <db:link xlink:href="qnmeasatelliteinfosource.xml#setUpdateInterval">setUpdateInterval</db:link>() denotes an interval for the user notification, while this parameter specifies the internal frequency of reading the data from source file. It means that one can have multiple (or none) reads during the <db:link xlink:href="qgeosatelliteinfosource.xml#updateInterval-prop">updateInterval</db:link>() period.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
