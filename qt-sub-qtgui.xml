<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Namespace</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt GUI Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="convertFromPlainText">
<db:title>QString Qt::convertFromPlainText(const QString &amp;<db:emphasis>plain</db:emphasis>, Qt::WhiteSpaceMode <db:emphasis>mode</db:emphasis> = WhiteSpacePre)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>convertFromPlainText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>plain</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WhiteSpaceMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>WhiteSpacePre</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString convertFromPlainText(const QString &amp;plain, Qt::WhiteSpaceMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the plain text string <db:code role="parameter">plain</db:code> to an HTML-formatted paragraph while preserving most of its look.</db:para>
<db:para><db:code role="parameter">mode</db:code> defines how whitespace is handled.</db:para>
<db:para>This function is defined in the <db:code>&lt;QTextDocument&gt;</db:code> header file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toHtmlEscaped">QString::toHtmlEscaped</db:link>()</db:member>
<db:member><db:link xlink:href="qt-sub-qtgui.xml#mightBeRichText">mightBeRichText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mightBeRichText">
<db:title>bool Qt::mightBeRichText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>mightBeRichText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool mightBeRichText(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the string <db:code role="parameter">text</db:code> is likely to be rich text; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function uses a fast and therefore simple heuristic. It mainly checks whether there is something that looks like a tag before the first line break. Although the result may be correct for common cases, there is no guarantee.</db:para>
<db:para>This function is defined in the <db:code>&lt;QTextDocument&gt;</db:code> header file.</db:para>
</db:section>
</db:section>
</db:article>
