<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDirIterator Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdiriterator.xml">QDirIterator</db:link> class provides an iterator for directory entrylists.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDirIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDirIterator is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>You can use <db:link xlink:href="qdiriterator.xml">QDirIterator</db:link> to navigate entries of a directory one at a time. It is similar to <db:link xlink:href="qdir.xml#entryList">QDir::entryList</db:link>() and <db:link xlink:href="qdir.xml#entryInfoList">QDir::entryInfoList</db:link>(), but because it lists entries one at a time instead of all at once, it scales better and is more suitable for large directories. It also supports listing directory contents recursively, and following symbolic links. Unlike <db:link xlink:href="qdir.xml#entryList">QDir::entryList</db:link>(), <db:link xlink:href="qdiriterator.xml">QDirIterator</db:link> does not support sorting.</db:para>
<db:para>The <db:link xlink:href="qdiriterator.xml">QDirIterator</db:link> constructor takes a <db:link xlink:href="qdir.xml">QDir</db:link> or a directory as argument. After construction, the iterator is located before the first directory entry. Here's how to iterate over all the entries sequentially:</db:para>
<db:programlisting language="cpp">QDirIterator it(&quot;/etc&quot;, QDirIterator::Subdirectories);
while (it.hasNext()) {
    QString dir = it.next();
    qDebug() &lt;&lt; dir;
    // /etc/.
    // /etc/..
    // /etc/X11
    // /etc/X11/fs
    // ...
}
</db:programlisting>
<db:para>Here's how to find and read all files filtered by name, recursively:</db:para>
<db:programlisting language="cpp">QDirIterator it(&quot;/sys&quot;, QStringList() &lt;&lt; &quot;scaling_cur_freq&quot;, QDir::NoFilter, QDirIterator::Subdirectories);
while (it.hasNext()) {
    QFile f(it.next());
    f.open(QIODevice::ReadOnly);
    qDebug() &lt;&lt; f.fileName() &lt;&lt; f.readAll().trimmed().toDouble() / 1000 &lt;&lt; &quot;MHz&quot;;
}
</db:programlisting>
<db:para>The <db:link xlink:href="qdiriterator.xml#next">next</db:link>() and <db:link xlink:href="qdiriterator.xml#nextFileInfo">nextFileInfo</db:link>() functions advance the iterator and return the path or the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> of the next directory entry. You can also call <db:link xlink:href="qdiriterator.xml#filePath">filePath</db:link>() or <db:link xlink:href="qdiriterator.xml#fileInfo">fileInfo</db:link>() to get the current file path or <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> without first advancing the iterator. The <db:link xlink:href="qdiriterator.xml#fileName">fileName</db:link>() function returns only the name of the file, similar to how <db:link xlink:href="qdir.xml#entryList">QDir::entryList</db:link>() works.</db:para>
<db:para>Unlike Qt's container iterators, <db:link xlink:href="qdiriterator.xml">QDirIterator</db:link> is uni-directional (i.e., you cannot iterate directories in reverse order) and does not allow random access.</db:para>
<db:note>
<db:para>This class is deprecated and may be removed in a Qt release. Use <db:link xlink:href="qdirlisting.xml">QDirListing</db:link> instead.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
<db:member><db:link xlink:href="qdir.xml#entryList">QDir::entryList</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="IteratorFlag-enum">
<db:title>enum QDirIterator::IteratorFlag</db:title>
<db:bridgehead renderas="sect2">flags QDirIterator::IteratorFlags</db:bridgehead>
<db:para>This enum describes flags that you can combine to configure the behavior of <db:link xlink:href="qdiriterator.xml">QDirIterator</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdiriterator.xml">QDirIterator</db:link></db:emphasis>::NoIteratorFlags</db:code></db:para>
</db:td>
<db:td><db:code>0x0</db:code></db:td>
<db:td>
<db:para>The default value, representing no flags. The iterator will return entries for the assigned path.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdiriterator.xml">QDirIterator</db:link></db:emphasis>::Subdirectories</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>List entries inside all subdirectories as well.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdiriterator.xml">QDirIterator</db:link></db:emphasis>::FollowSymlinks</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>When combined with Subdirectories, this flag enables iterating through all subdirectories of the assigned path, following all symbolic links. Symbolic link loops (e.g., &quot;link&quot; =&gt; &quot;.&quot; or &quot;link&quot; =&gt; &quot;..&quot;) are automatically detected and ignored.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>IteratorFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;IteratorFlag&gt;. </db:code>It stores an OR combination of <db:code>IteratorFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDirIterator">
<db:title>QDirIterator::QDirIterator(const QDir &amp;<db:emphasis>dir</db:emphasis>, QDirIterator::IteratorFlags <db:emphasis>flags</db:emphasis> = NoIteratorFlags)</db:title>
<db:para>Constructs a <db:link xlink:href="qdiriterator.xml">QDirIterator</db:link> that can iterate over <db:code role="parameter">dir</db:code>'s entrylist, using <db:code role="parameter">dir</db:code>'s name filters and regular filters. You can pass options via <db:code role="parameter">flags</db:code> to decide how the directory should be iterated.</db:para>
<db:para>By default, <db:code role="parameter">flags</db:code> is <db:link xlink:href="qdiriterator.xml#IteratorFlag-enum">NoIteratorFlags</db:link>, which provides the same behavior as in <db:link xlink:href="qdir.xml#entryList">QDir::entryList</db:link>().</db:para>
<db:para>The sorting in <db:code role="parameter">dir</db:code> is ignored.</db:para>
<db:note>
<db:para>To list symlinks that point to non existing files, <db:link xlink:href="qdir.xml#Filter-enum">QDir::System</db:link> must be passed to the flags.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdiriterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#next">next</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#IteratorFlag-enum">IteratorFlags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDirIterator-1">
<db:title>QDirIterator::QDirIterator(const QString &amp;<db:emphasis>path</db:emphasis>, QDirIterator::IteratorFlags <db:emphasis>flags</db:emphasis> = NoIteratorFlags)</db:title>
<db:para>Constructs a <db:link xlink:href="qdiriterator.xml">QDirIterator</db:link> that can iterate over <db:code role="parameter">path</db:code>. You can pass options via <db:code role="parameter">flags</db:code> to decide how the directory should be iterated.</db:para>
<db:para>By default, <db:code role="parameter">flags</db:code> is <db:link xlink:href="qdiriterator.xml#IteratorFlag-enum">NoIteratorFlags</db:link>, which provides the same behavior as in <db:link xlink:href="qdir.xml#entryList">QDir::entryList</db:link>().</db:para>
<db:note>
<db:para>To list symlinks that point to non existing files, <db:link xlink:href="qdir.xml#Filter-enum">QDir::System</db:link> must be passed to the flags.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdiriterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#next">next</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#IteratorFlag-enum">IteratorFlags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDirIterator-2">
<db:title>QDirIterator::QDirIterator(const QString &amp;<db:emphasis>path</db:emphasis>, QDir::Filters <db:emphasis>filters</db:emphasis>, QDirIterator::IteratorFlags <db:emphasis>flags</db:emphasis> = NoIteratorFlags)</db:title>
<db:para>Constructs a <db:link xlink:href="qdiriterator.xml">QDirIterator</db:link> that can iterate over <db:code role="parameter">path</db:code>, with no name filtering and <db:code role="parameter">filters</db:code> for entry filtering. You can pass options via <db:code role="parameter">flags</db:code> to decide how the directory should be iterated.</db:para>
<db:para>By default, <db:code role="parameter">filters</db:code> is <db:link xlink:href="qdir.xml#Filter-enum">QDir::NoFilter</db:link>, and <db:code role="parameter">flags</db:code> is <db:link xlink:href="qdiriterator.xml#IteratorFlag-enum">NoIteratorFlags</db:link>, which provides the same behavior as in <db:link xlink:href="qdir.xml#entryList">QDir::entryList</db:link>().</db:para>
<db:note>
<db:para>To list symlinks that point to non existing files, <db:link xlink:href="qdir.xml#Filter-enum">QDir::System</db:link> must be passed to the flags.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdiriterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#next">next</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#IteratorFlag-enum">IteratorFlags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDirIterator-3">
<db:title>QDirIterator::QDirIterator(const QString &amp;<db:emphasis>path</db:emphasis>, const QStringList &amp;<db:emphasis>nameFilters</db:emphasis>, QDir::Filters <db:emphasis>filters</db:emphasis> = QDir::NoFilter, QDirIterator::IteratorFlags <db:emphasis>flags</db:emphasis> = NoIteratorFlags)</db:title>
<db:para>Constructs a <db:link xlink:href="qdiriterator.xml">QDirIterator</db:link> that can iterate over <db:code role="parameter">path</db:code>, using <db:code role="parameter">nameFilters</db:code> and <db:code role="parameter">filters</db:code>. You can pass options via <db:code role="parameter">flags</db:code> to decide how the directory should be iterated.</db:para>
<db:para>By default, <db:code role="parameter">flags</db:code> is <db:link xlink:href="qdiriterator.xml#IteratorFlag-enum">NoIteratorFlags</db:link>, which provides the same behavior as <db:link xlink:href="qdir.xml#entryList">QDir::entryList</db:link>().</db:para>
<db:para>For example, the following iterator could be used to iterate over audio files:</db:para>
<db:programlisting language="cpp">QDirIterator audioFileIt(audioPath, {&quot;*.mp3&quot;, &quot;*.wav&quot;}, QDir::Files);
</db:programlisting>
<db:note>
<db:para>To list symlinks that point to non existing files, <db:link xlink:href="qdir.xml#Filter-enum">QDir::System</db:link> must be passed to the flags.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdiriterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#next">next</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#IteratorFlag-enum">IteratorFlags</db:link></db:member>
<db:member><db:link xlink:href="qdir.xml#setNameFilters">QDir::setNameFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QDirIterator">
<db:title>[noexcept] QDirIterator::~QDirIterator()</db:title>
<db:para>Destroys the <db:link xlink:href="qdiriterator.xml">QDirIterator</db:link>.</db:para>
</db:section>
<db:section xml:id="fileInfo">
<db:title>QFileInfo QDirIterator::fileInfo() const</db:title>
<db:para>Returns a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> for the current directory entry.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdiriterator.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#fileName">fileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QDirIterator::fileName() const</db:title>
<db:para>Returns the file name for the current directory entry, without the path prepended.</db:para>
<db:para>This function is convenient when iterating a single directory. When using the <db:link xlink:href="qdiriterator.xml#IteratorFlag-enum">QDirIterator::Subdirectories</db:link> flag, you can use <db:link xlink:href="qdiriterator.xml#filePath">filePath</db:link>() to get the full path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdiriterator.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#fileInfo">fileInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filePath">
<db:title>QString QDirIterator::filePath() const</db:title>
<db:para>Returns the full file path for the current directory entry.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdiriterator.xml#fileInfo">fileInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#fileName">fileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasNext">
<db:title>bool QDirIterator::hasNext() const</db:title>
<db:para>Returns true if there is at least one more entry in the directory; otherwise, false is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdiriterator.xml#next">next</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#nextFileInfo">nextFileInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#fileInfo">fileInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="next">
<db:title>QString QDirIterator::next()</db:title>
<db:para>Advances the iterator to the next entry, and returns the file path of this new entry. You should first check <db:link xlink:href="qdiriterator.xml#hasNext">hasNext</db:link>() before using this method, to avoid unexpected results.</db:para>
<db:para>You can call <db:link xlink:href="qdiriterator.xml#fileName">fileName</db:link>() or <db:link xlink:href="qdiriterator.xml#filePath">filePath</db:link>() to get the current entry's file name or path, or <db:link xlink:href="qdiriterator.xml#fileInfo">fileInfo</db:link>() to get a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> for the current entry.</db:para>
<db:para>Call <db:link xlink:href="qdiriterator.xml#nextFileInfo">nextFileInfo</db:link>() instead of next() if you're interested in the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdiriterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#nextFileInfo">nextFileInfo</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#fileInfo">fileInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nextFileInfo">
<db:title>[since 6.3] QFileInfo QDirIterator::nextFileInfo()</db:title>
<db:para>Advances the iterator to the next entry, and returns the file info of this new entry. You should first check <db:link xlink:href="qdiriterator.xml#hasNext">hasNext</db:link>() before using this method, to avoid unexpected results.</db:para>
<db:para>You can call <db:link xlink:href="qdiriterator.xml#fileName">fileName</db:link>() or <db:link xlink:href="qdiriterator.xml#filePath">filePath</db:link>() to get the current entry's file name or path, or <db:link xlink:href="qdiriterator.xml#fileInfo">fileInfo</db:link>() to get a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> for the current entry.</db:para>
<db:para>Call <db:link xlink:href="qdiriterator.xml#next">next</db:link>() instead of nextFileInfo() when all you need is the <db:link xlink:href="qdiriterator.xml#filePath">filePath</db:link>().</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdiriterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#filePath">filePath</db:link>()</db:member>
<db:member><db:link xlink:href="qdiriterator.xml#fileInfo">fileInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="path">
<db:title>QString QDirIterator::path() const</db:title>
<db:para>Returns the base directory of the iterator.</db:para>
</db:section>
</db:section>
</db:article>
