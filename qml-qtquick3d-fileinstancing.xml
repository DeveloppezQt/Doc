<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>FileInstancing QML Type</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Allows reading instance tables from file.</db:para>
<db:para>This type was introduced in Qt 6.2.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Instancing</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtquick3d-fileinstancing.xml">FileInstancing</db:link> type makes it possible to read instance tables from files.</db:para>
<db:para>There are two supported file formats: XML, and a Qt-specific binary format. The binary file format uses the same layout as the table that is uploaded to the GPU, so it can be directly mapped to memory. The <db:link xlink:href="qtquick3d-tool-instancer.xml">instancer</db:link> tool converts from XML to the binary format.</db:para>
<db:para>This is an example of the XML file format:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&amp;gt;
&amp;lt;InstanceTable&amp;gt;
  &amp;lt;Instance position=&quot;0 200 0&quot;  scale=&quot;0.75 0.75 0.75&quot; custom=&quot;20 20&quot; color=&quot;#ffcf7f&quot;/&amp;gt;
  &amp;lt;Instance position=&quot;0 -100 0&quot; scale=&quot;0.5 0.5 0.5&quot; color=&quot;red&quot;/&amp;gt;
  &amp;lt;Instance position=&quot;0 -200 0&quot; eulerRotation=&quot;0 0 60&quot; color=&quot;darkred&quot; custom=&quot;10 40 0 0&quot;/&amp;gt;
&amp;lt;/InstanceTable&amp;gt;
</db:programlisting>
<db:para>In order to be valid, the XML file must have a top-level <db:code>InstanceTable</db:code> element. Each instance is represented by an <db:code>Instance</db:code> element inside the <db:code>InstanceTable</db:code>. Unknown elements are silently ignored.</db:para>
<db:para>An <db:code>Instance</db:code> element can have a number of attributes. <db:code>color</db:code> attributes are specified by the normal Qt SVG color names, or by hexadecimal notation. <db:code>vector3d</db:code> and {vector4d} attributes are specified by a string of space-separated numbers, where missing trailing numbers indicate zeroes. The following attributes are supported:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>name</db:para>
</db:th>
<db:th>
<db:para>type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>position</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>vector3d</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>scale</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>vector3d</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>eulerRotation</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>vector3d</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>quaternion</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>vector4d</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>custom</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>vector4d</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>color</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>color</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Unknown attributes are silently ignored.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="instanceCount-prop">
<db:title>[since 6.3] instanceCount : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>instanceCount</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This read-only property contains the number of instances in the instance table.</db:para>
<db:para>This property was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>source</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the location of an XML or binary file containing the instance data.</db:para>
<db:para>If the file name has a &quot;.bin&quot; extension, it is assumed to refer to a binary file. Otherwise it is assumed to refer to an XML file. If an XML file <db:emphasis>foo.xml</db:emphasis> is specified, and the file <db:emphasis>foo.xml.bin</db:emphasis> exists, the binary file <db:emphasis>foo.xml.bin</db:emphasis> will be loaded instead.</db:para>
</db:section>
</db:section>
</db:article>
