<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaContent Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link> class provides access to the resources relating to a media content.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaContent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaContent is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_playback</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmediacontent.xml">QMediaContent</db:link> is used within the multimedia framework as the logical handle to media content. A <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link> object is composed of one or more <db:link xlink:href="qmediaresource.xml">QMediaResource</db:link>s where each resource provides the URL and format information of a different encoding of the content.</db:para>
<db:para>A non-null <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link> will always have a primary or canonical reference to the content available through the <db:link xlink:href="qmediacontent.xml#canonicalUrl">canonicalUrl</db:link>() or <db:link xlink:href="qmediacontent.xml#canonicalResource">canonicalResource</db:link>() methods, any additional resources are optional.</db:para>
<db:para>Alternatively <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link> can represent a playlist and contain a pointer to a valid <db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link> object. In this case URL is optional and can either be empty or point to the playlist URL.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaContent">
<db:title>QMediaContent::QMediaContent()</db:title>
<db:para>Constructs a null <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link>.</db:para>
</db:section>
<db:section xml:id="QMediaContent-2">
<db:title>QMediaContent::QMediaContent(const QMediaResource &amp;<db:emphasis>resource</db:emphasis>)</db:title>
<db:para>Constructs a media content with <db:code role="parameter">resource</db:code> providing a reference to the content.</db:para>
</db:section>
<db:section xml:id="QMediaContent-3">
<db:title>QMediaContent::QMediaContent(const QMediaResourceList &amp;<db:emphasis>resources</db:emphasis>)</db:title>
<db:para>Constructs a media content with <db:code role="parameter">resources</db:code> providing a reference to the content.</db:para>
</db:section>
<db:section xml:id="QMediaContent-4">
<db:title>QMediaContent::QMediaContent(const QNetworkRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:para>Constructs a media content with <db:code role="parameter">request</db:code> providing a reference to the content.</db:para>
<db:para>This constructor can be used to reference media content via network protocols such as HTTP. This may include additional information required to obtain the resource, such as Cookies or HTTP headers.</db:para>
</db:section>
<db:section xml:id="QMediaContent-5">
<db:title>QMediaContent::QMediaContent(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:para>Constructs a media content with <db:code role="parameter">url</db:code> providing a reference to the content.</db:para>
</db:section>
<db:section xml:id="QMediaContent-6">
<db:title>QMediaContent::QMediaContent(QMediaPlaylist *<db:emphasis>playlist</db:emphasis>, const QUrl &amp;<db:emphasis>contentUrl</db:emphasis> = QUrl(), bool <db:emphasis>takeOwnership</db:emphasis> = false)</db:title>
<db:para>Constructs a media content with <db:code role="parameter">playlist</db:code>.</db:para>
<db:para><db:code role="parameter">contentUrl</db:code> of a playlist is an optional parameter and can be empty.</db:para>
<db:para>Set <db:code role="parameter">takeOwnership</db:code> to true if you want <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link> to take ownership of the playlist. <db:code role="parameter">takeOwnership</db:code> is set to false by default.</db:para>
</db:section>
<db:section xml:id="QMediaContent-1">
<db:title>QMediaContent::QMediaContent(const QMediaContent &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of the media content <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMediaContent">
<db:title>[noexcept] QMediaContent::~QMediaContent()</db:title>
<db:para>Destroys the media content object.</db:para>
</db:section>
<db:section xml:id="canonicalRequest">
<db:title>QNetworkRequest QMediaContent::canonicalRequest() const</db:title>
<db:para>Returns a <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> that represents that canonical resource for this media content.</db:para>
</db:section>
<db:section xml:id="canonicalResource">
<db:title>QMediaResource QMediaContent::canonicalResource() const</db:title>
<db:para>Returns a <db:link xlink:href="qmediaresource.xml">QMediaResource</db:link> that represents that canonical resource for this media content.</db:para>
</db:section>
<db:section xml:id="canonicalUrl">
<db:title>QUrl QMediaContent::canonicalUrl() const</db:title>
<db:para>Returns a <db:link xlink:href="qurl.xml">QUrl</db:link> that represents that canonical resource for this media content.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QMediaContent::isNull() const</db:title>
<db:para>Returns true if this media content is null (uninitialized); false otherwise.</db:para>
</db:section>
<db:section xml:id="playlist">
<db:title>QMediaPlaylist *QMediaContent::playlist() const</db:title>
<db:para>Returns a playlist for this media content or 0 if this <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link> is not a playlist.</db:para>
</db:section>
<db:section xml:id="resources">
<db:title>QMediaResourceList QMediaContent::resources() const</db:title>
<db:para>Returns a list of alternative resources for this media content. The first item in this list is always the canonical resource.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QMediaContent::operator!=(const QMediaContent &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> is not equivalent to this media content; false otherwise.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QMediaContent &amp;QMediaContent::operator=(const QMediaContent &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the value of <db:code role="parameter">other</db:code> to this media content.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QMediaContent::operator==(const QMediaContent &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> is equivalent to this media content; false otherwise.</db:para>
</db:section>
</db:section>
</db:article>
