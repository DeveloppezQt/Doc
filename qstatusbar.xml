<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStatusBar Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstatusbar.xml">QStatusBar</db:link> class provides a horizontal bar suitable for presenting status information.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStatusBar</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStatusBar is part of <db:simplelist><db:member>mainwindow-classes</db:member><db:member>helpsystem</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Each status indicator falls into one of three categories:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>Temporary</db:emphasis> - briefly occupies most of the status bar. Used to explain tool tip texts or menu entries, for example.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>Normal</db:emphasis> - occupies part of the status bar and may be hidden by temporary messages. Used to display the page and line number in a word processor, for example.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>Permanent</db:emphasis> - is never hidden. Used for important mode indications, for example, some applications put a Caps Lock indicator in the status bar.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qstatusbar.xml">QStatusBar</db:link> lets you display all three types of indicators.</db:para>
<db:para>Typically, a request for the status bar functionality occurs in relation to a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> object. <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> provides a main application window, with a menu bar, tool bars, dock widgets <db:emphasis>and</db:emphasis> a status bar around a large central widget. The status bar can be retrieved using the <db:link xlink:href="qmainwindow.xml#statusBar">QMainWindow::statusBar</db:link>() function, and replaced using the <db:link xlink:href="qmainwindow.xml#setStatusBar">QMainWindow::setStatusBar</db:link>() function.</db:para>
<db:para>Use the <db:link xlink:href="qstatusbar.xml#showMessage">showMessage</db:link>() slot to display a <db:emphasis>temporary</db:emphasis> message:</db:para>
<db:programlisting language="cpp">statusBar()-&amp;gt;showMessage(tr(&quot;Ready&quot;));
</db:programlisting>
<db:para>To remove a temporary message, use the <db:link xlink:href="qstatusbar.xml#clearMessage">clearMessage</db:link>() slot, or set a time limit when calling <db:link xlink:href="qstatusbar.xml#showMessage">showMessage</db:link>(). For example:</db:para>
<db:programlisting language="cpp">statusBar()-&amp;gt;showMessage(tr(&quot;Ready&quot;), 2000);
</db:programlisting>
<db:para>Use the <db:link xlink:href="qstatusbar.xml#currentMessage">currentMessage</db:link>() function to retrieve the temporary message currently shown. The <db:link xlink:href="qstatusbar.xml">QStatusBar</db:link> class also provide the <db:link xlink:href="qstatusbar.xml#messageChanged">messageChanged</db:link>() signal which is emitted whenever the temporary status message changes.</db:para>
<db:anchor xml:id="permanent-message"/>
<db:para><db:emphasis>Normal</db:emphasis> and <db:emphasis>Permanent</db:emphasis> messages are displayed by creating a small widget (<db:link xlink:href="qlabel.xml">QLabel</db:link>, <db:link xlink:href="qprogressbar.xml">QProgressBar</db:link> or even <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link>) and then adding it to the status bar using the <db:link xlink:href="qstatusbar.xml#addWidget">addWidget</db:link>() or the <db:link xlink:href="qstatusbar.xml#addPermanentWidget">addPermanentWidget</db:link>() function. Use the <db:link xlink:href="qstatusbar.xml#removeWidget">removeWidget</db:link>() function to remove such messages from the status bar.</db:para>
<db:programlisting language="cpp">statusBar()-&amp;gt;addWidget(new MyReadWriteIndication);
</db:programlisting>
<db:para>By default <db:link xlink:href="qstatusbar.xml">QStatusBar</db:link> provides a <db:link xlink:href="qsizegrip.xml">QSizeGrip</db:link> in the lower-right corner. You can disable it using the <db:link xlink:href="qstatusbar.xml#sizeGripEnabled-prop">setSizeGripEnabled</db:link>() function. Use the <db:link xlink:href="qstatusbar.xml#sizeGripEnabled-prop">isSizeGripEnabled</db:link>() function to determine the current status of the size grip.</db:para>
<db:mediaobject>
<db:alt>A status bar shown in the Fusion widget style</db:alt>
<db:imageobject>
<db:imagedata fileref="images/fusion-statusbar-sizegrip.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmainwindow.xml">QMainWindow</db:link></db:member>
<db:member><db:link xlink:href="qstatustipevent.xml">QStatusTipEvent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="sizeGripEnabled-prop">
<db:title>sizeGripEnabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>sizeGripEnabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isSizeGripEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setSizeGripEnabled</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the <db:link xlink:href="qsizegrip.xml">QSizeGrip</db:link> in the bottom-right corner of the status bar is enabled</db:para>
<db:para>The size grip is enabled by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isSizeGripEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSizeGripEnabled</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStatusBar">
<db:title>[explicit] QStatusBar::QStatusBar(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QStatusBar</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QStatusBar(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a status bar with a size grip and the given <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatusbar.xml#sizeGripEnabled-prop">setSizeGripEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QStatusBar">
<db:title>[virtual] QStatusBar::~QStatusBar()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QStatusBar</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QStatusBar()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this status bar and frees any allocated resources and child widgets.</db:para>
</db:section>
<db:section xml:id="addPermanentWidget">
<db:title>void QStatusBar::addPermanentWidget(QWidget *<db:emphasis>widget</db:emphasis>, int <db:emphasis>stretch</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addPermanentWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addPermanentWidget(QWidget *widget, int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given <db:code role="parameter">widget</db:code> permanently to this status bar, reparenting the widget if it isn't already a child of this <db:link xlink:href="qstatusbar.xml">QStatusBar</db:link> object. The <db:code role="parameter">stretch</db:code> parameter is used to compute a suitable size for the given <db:code role="parameter">widget</db:code> as the status bar grows and shrinks. The default stretch factor is 0, i.e giving the widget a minimum of space.</db:para>
<db:para>Permanently means that the widget may not be obscured by temporary messages. It is is located at the far right of the status bar.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatusbar.xml#insertPermanentWidget">insertPermanentWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#removeWidget">removeWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#addWidget">addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addWidget">
<db:title>void QStatusBar::addWidget(QWidget *<db:emphasis>widget</db:emphasis>, int <db:emphasis>stretch</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addWidget(QWidget *widget, int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given <db:code role="parameter">widget</db:code> to this status bar, reparenting the widget if it isn't already a child of this <db:link xlink:href="qstatusbar.xml">QStatusBar</db:link> object. The <db:code role="parameter">stretch</db:code> parameter is used to compute a suitable size for the given <db:code role="parameter">widget</db:code> as the status bar grows and shrinks. The default stretch factor is 0, i.e giving the widget a minimum of space.</db:para>
<db:para>The widget is located to the far left of the first permanent widget (see <db:link xlink:href="qstatusbar.xml#addPermanentWidget">addPermanentWidget</db:link>()) and may be obscured by temporary messages.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatusbar.xml#insertWidget">insertWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#removeWidget">removeWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#addPermanentWidget">addPermanentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearMessage">
<db:title>void QStatusBar::clearMessage()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearMessage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearMessage()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes any temporary message being shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatusbar.xml#currentMessage">currentMessage</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#showMessage">showMessage</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#removeWidget">removeWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentMessage">
<db:title>QString QStatusBar::currentMessage() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>currentMessage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString currentMessage() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the temporary message currently shown, or an empty string if there is no such message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatusbar.xml#showMessage">showMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QStatusBar::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hideOrShow">
<db:title>[protected] void QStatusBar::hideOrShow()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hideOrShow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hideOrShow()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Ensures that the right widgets are visible.</db:para>
<db:para>Used by the <db:link xlink:href="qstatusbar.xml#showMessage">showMessage</db:link>() and <db:link xlink:href="qstatusbar.xml#clearMessage">clearMessage</db:link>() functions.</db:para>
</db:section>
<db:section xml:id="insertPermanentWidget">
<db:title>int QStatusBar::insertPermanentWidget(int <db:emphasis>index</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>, int <db:emphasis>stretch</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>insertPermanentWidget</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int insertPermanentWidget(int index, QWidget *widget, int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the given <db:code role="parameter">widget</db:code> at the given <db:code role="parameter">index</db:code> permanently to this status bar, reparenting the widget if it isn't already a child of this <db:link xlink:href="qstatusbar.xml">QStatusBar</db:link> object. If <db:code role="parameter">index</db:code> is out of range, the widget is appended (in which case it is the actual index of the widget that is returned).</db:para>
<db:para>The <db:code role="parameter">stretch</db:code> parameter is used to compute a suitable size for the given <db:code role="parameter">widget</db:code> as the status bar grows and shrinks. The default stretch factor is 0, i.e giving the widget a minimum of space.</db:para>
<db:para>Permanently means that the widget may not be obscured by temporary messages. It is is located at the far right of the status bar.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatusbar.xml#addPermanentWidget">addPermanentWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#removeWidget">removeWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#addWidget">addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertWidget">
<db:title>int QStatusBar::insertWidget(int <db:emphasis>index</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>, int <db:emphasis>stretch</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>insertWidget</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int insertWidget(int index, QWidget *widget, int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the given <db:code role="parameter">widget</db:code> at the given <db:code role="parameter">index</db:code> to this status bar, reparenting the widget if it isn't already a child of this <db:link xlink:href="qstatusbar.xml">QStatusBar</db:link> object. If <db:code role="parameter">index</db:code> is out of range, the widget is appended (in which case it is the actual index of the widget that is returned).</db:para>
<db:para>The <db:code role="parameter">stretch</db:code> parameter is used to compute a suitable size for the given <db:code role="parameter">widget</db:code> as the status bar grows and shrinks. The default stretch factor is 0, i.e giving the widget a minimum of space.</db:para>
<db:para>The widget is located to the far left of the first permanent widget (see <db:link xlink:href="qstatusbar.xml#addPermanentWidget">addPermanentWidget</db:link>()) and may be obscured by temporary messages.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatusbar.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#removeWidget">removeWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#addPermanentWidget">addPermanentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="messageChanged">
<db:title>void QStatusBar::messageChanged(const QString &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>messageChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void messageChanged(const QString &amp;message)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the temporary status message changes. The new temporary message is passed in the <db:code role="parameter">message</db:code> parameter which is a null-string when the message has been removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatusbar.xml#showMessage">showMessage</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#clearMessage">clearMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QStatusBar::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
<db:para>Shows the temporary message, if appropriate, in response to the paint <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="reformat">
<db:title>[protected] void QStatusBar::reformat()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reformat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reformat()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the status bar's appearance to account for item changes.</db:para>
<db:para>Special subclasses may need this function, but geometry management will usually take care of any necessary rearrangements.</db:para>
</db:section>
<db:section xml:id="removeWidget">
<db:title>void QStatusBar::removeWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeWidget(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the specified <db:code role="parameter">widget</db:code> from the status bar.</db:para>
<db:note>
<db:para>This function does not delete the widget but <db:emphasis>hides</db:emphasis> it. To add the widget again, you must call both the <db:link xlink:href="qstatusbar.xml#addWidget">addWidget</db:link>() and <db:link xlink:href="qwidget.xml#show">show</db:link>() functions.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatusbar.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#addPermanentWidget">addPermanentWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#clearMessage">clearMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QStatusBar::resizeEvent(QResizeEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeEvent</db:methodname>
<db:methodparam>
<db:type>QResizeEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeEvent(QResizeEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QStatusBar::showEvent(<db:emphasis>QShowEvent *</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>showEvent</db:methodname>
<db:methodparam>
<db:type>QShowEvent *</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showEvent(QShowEvent *) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="showMessage">
<db:title>void QStatusBar::showMessage(const QString &amp;<db:emphasis>message</db:emphasis>, int <db:emphasis>timeout</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>showMessage</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>timeout</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showMessage(const QString &amp;message, int timeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Hides the normal status indications and displays the given <db:code role="parameter">message</db:code> for the specified number of milli-seconds (<db:code role="parameter">timeout</db:code>). If <db:code role="parameter">timeout</db:code> is 0 (default), the <db:code role="parameter">message</db:code> remains displayed until the <db:link xlink:href="qstatusbar.xml#clearMessage">clearMessage</db:link>() slot is called or until the showMessage() slot is called again to change the message.</db:para>
<db:para>Note that showMessage() is called to show temporary explanations of tool tip texts, so passing a <db:code role="parameter">timeout</db:code> of 0 is not sufficient to display a <db:link xlink:href="qstatusbar.xml#permanent-message">permanent message</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatusbar.xml#messageChanged">messageChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#currentMessage">currentMessage</db:link>()</db:member>
<db:member><db:link xlink:href="qstatusbar.xml#clearMessage">clearMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
