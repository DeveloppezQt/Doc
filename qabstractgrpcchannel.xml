<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractGrpcChannel Class</db:title>
<db:productname>QtGrpc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GRPC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractgrpcchannel.xml">QAbstractGrpcChannel</db:link> class is an interface that represents common gRPC channel functionality.</db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractGrpcChannel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Grpc)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Grpc)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgrpchttp2channel.xml" xlink:role="class">QGrpcHttp2Channel</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Implement this interface to create your own custom channel for gRPC transportation. We provide the <db:link xlink:href="qgrpchttp2channel.xml">QGrpcHttp2Channel</db:link>, which is a fully featured implementation of the <db:link xlink:href="qabstractgrpcchannel.xml">QAbstractGrpcChannel</db:link> for HTTP/2 communication.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="addInterceptorManager">
<db:title>void QAbstractGrpcChannel::addInterceptorManager(const QGrpcClientInterceptorManager &amp;<db:emphasis>manager</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addInterceptorManager</db:methodname>
<db:methodparam>
<db:type>const QGrpcClientInterceptorManager &amp;</db:type>
<db:parameter>manager</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addInterceptorManager(const QGrpcClientInterceptorManager &amp;manager)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the interceptor <db:code role="parameter">manager</db:code> for the channel.</db:para>
</db:section>
<db:section xml:id="call-1">
<db:title>[pure virtual protected, since 6.7] void QAbstractGrpcChannel::call(std::shared_ptr&lt;QGrpcChannelOperation&gt; <db:emphasis>channelOperation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>call</db:methodname>
<db:methodparam>
<db:type>std::shared_ptr&lt;QGrpcChannelOperation&gt;</db:type>
<db:parameter>channelOperation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void call(std::shared_ptr&lt;QGrpcChannelOperation&gt; channelOperation) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This pure virtual function is called by public QAbstractGrpcChannel::call method when making unary gRPC call. The <db:code role="parameter">channelOperation</db:code> is the pointer to a channel side <db:link xlink:href="qgrpcchanneloperation.xml">QGrpcChannelOperation</db:link> primitive that is connected with <db:link xlink:href="qgrpccallreply.xml">QGrpcCallReply</db:link> primitive, that is used in <db:link xlink:href="qabstractgrpcclient.xml">QAbstractGrpcClient</db:link> implementations.</db:para>
<db:para>The function should implement the channel-side logic of unary call. The implementation must be asynchronous and must not block the thread where the function was called.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="serializer">
<db:title>[pure virtual] std::shared_ptr&lt;QAbstractProtobufSerializer&gt; QAbstractGrpcChannel::serializer() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>std::shared_ptr&lt;QAbstractProtobufSerializer&gt;</db:type>
<db:methodname>serializer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::shared_ptr&lt;QAbstractProtobufSerializer&gt; serializer() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This pure virtual function shall return a shared pointer to <db:link xlink:href="qabstractprotobufserializer.xml">QAbstractProtobufSerializer</db:link>.</db:para>
<db:para>This function is called to obtain the <db:link xlink:href="qabstractprotobufserializer.xml">QAbstractProtobufSerializer</db:link> used to perform serialization and deserialization of the message.</db:para>
</db:section>
<db:section xml:id="startBidirStream-1">
<db:title>[pure virtual protected, since 6.7] void QAbstractGrpcChannel::startBidirStream(std::shared_ptr&lt;QGrpcChannelOperation&gt; <db:emphasis>channelOperation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>startBidirStream</db:methodname>
<db:methodparam>
<db:type>std::shared_ptr&lt;QGrpcChannelOperation&gt;</db:type>
<db:parameter>channelOperation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void startBidirStream(std::shared_ptr&lt;QGrpcChannelOperation&gt; channelOperation) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This pure virtual function that the starts of the bidirectional stream. The <db:code role="parameter">channelOperation</db:code> is the pointer to a channel side <db:link xlink:href="qgrpcchanneloperation.xml">QGrpcChannelOperation</db:link> primitive that is connected with <db:link xlink:href="qgrpcbidirstream.xml">QGrpcBidirStream</db:link> primitive, that is used in <db:link xlink:href="qabstractgrpcclient.xml">QAbstractGrpcClient</db:link>.</db:para>
<db:para>The function should implement the channel-side logic of bidirectional stream. The implementation must be asynchronous and must not block the thread where the function was called.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="startClientStream-1">
<db:title>[pure virtual protected, since 6.7] void QAbstractGrpcChannel::startClientStream(std::shared_ptr&lt;QGrpcChannelOperation&gt; <db:emphasis>channelOperation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>startClientStream</db:methodname>
<db:methodparam>
<db:type>std::shared_ptr&lt;QGrpcChannelOperation&gt;</db:type>
<db:parameter>channelOperation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void startClientStream(std::shared_ptr&lt;QGrpcChannelOperation&gt; channelOperation) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This pure virtual function that the starts of the client-side stream. The <db:code role="parameter">channelOperation</db:code> is the pointer to a channel side <db:link xlink:href="qgrpcchanneloperation.xml">QGrpcChannelOperation</db:link> primitive that is connected with <db:link xlink:href="qgrpcclientstream.xml">QGrpcClientStream</db:link> primitive, that is used in <db:link xlink:href="qabstractgrpcclient.xml">QAbstractGrpcClient</db:link>.</db:para>
<db:para>The function should implement the channel-side logic of client-side stream. The implementation must be asynchronous and must not block the thread where the function was called.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="startServerStream-1">
<db:title>[pure virtual protected, since 6.7] void QAbstractGrpcChannel::startServerStream(std::shared_ptr&lt;QGrpcChannelOperation&gt; <db:emphasis>channelOperation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>startServerStream</db:methodname>
<db:methodparam>
<db:type>std::shared_ptr&lt;QGrpcChannelOperation&gt;</db:type>
<db:parameter>channelOperation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void startServerStream(std::shared_ptr&lt;QGrpcChannelOperation&gt; channelOperation) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This pure virtual function that the starts of the server-side stream. The <db:code role="parameter">channelOperation</db:code> is the pointer to a channel side <db:link xlink:href="qgrpcchanneloperation.xml">QGrpcChannelOperation</db:link> primitive that is connected with <db:link xlink:href="qgrpcserverstream.xml">QGrpcServerStream</db:link> primitive, that is used in <db:link xlink:href="qabstractgrpcclient.xml">QAbstractGrpcClient</db:link> implementations.</db:para>
<db:para>The function should implement the channel-side logic of server-side stream. The implementation must be asynchronous and must not block the thread where the function was called.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
</db:section>
</db:article>
