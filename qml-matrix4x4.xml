<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>matrix4x4 QML Value Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A matrix4x4 type is a 4-row and 4-column matrix.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:code>matrix4x4</db:code> type has sixteen values, each accessible via the properties <db:code>m11</db:code> through <db:code>m44</db:code> in QML (in row/column order). Values of this type can be composed with the Qt.matrix4x4() function. Each attribute in a matrix4x4 is stored as a real (single-precision on ARM, double-precision on x86).</db:para>
<db:para>The matrix4x4 type has the following idempotent functions which can be invoked in QML:</db:para>
<db:informaltable style="generic" width="70%">
<db:thead>
<db:tr>
<db:th>
<db:para>Function Signature</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
<db:th>
<db:para>Example</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>matrix4x4 times(matrix4x4 other)</db:para>
</db:td>
<db:td>
<db:para>Returns the matrix4x4 result of multiplying <db:code>this</db:code> matrix4x4 with the <db:code>other</db:code> matrix4x4</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.matrix4x4(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);
var b = Qt.matrix4x4(4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19);
var c = a.times(b);
console.log(c.toString());
// QMatrix4x4(120, 130, 140, 150, 280, 306, 332, 358, 440, 482,
//524, 566, 600, 658, 716, 774)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector4d times(vector4d vector)</db:para>
</db:td>
<db:td>
<db:para>Returns the vector4d result of transforming the <db:code>vector</db:code> according to <db:code>this</db:code> matrix4x4 with the matrix applied pre-vector</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.matrix4x4(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);
var b = Qt.vector4d(5,6,7,8);
var c = a.times(b);
console.log(c.toString()); // QVector4D(70, 174, 278, 382)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector3d times(vector3d vector)</db:para>
</db:td>
<db:td>
<db:para>Returns the vector3d result of transforming the <db:code>vector</db:code> according to <db:code>this</db:code> matrix4x4 with the matrix applied pre-vector</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.matrix4x4(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);
var b = Qt.vector3d(5,6,7);
var c = a.times(b);
console.log(c.toString()); // QVector3D(0.155556, 0.437037, 0.718518)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>matrix4x4 times(real factor)</db:para>
</db:td>
<db:td>
<db:para>Returns the matrix4x4 result of multiplying <db:code>this</db:code> matrix4x4 with the scalar <db:code>factor</db:code></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.matrix4x4(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);
var b = 4.48;
var c = a.times(b);
console.log(c.toString());
// QMatrix4x4(4.48, 8.96, 13.44, 17.92, 22.4, 26.88, 31.36, 35.84,
// 40.32, 44.8, 49.28, 53.76, 58.24, 62.72, 67.2, 71.68)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>matrix4x4 plus(matrix4x4 other)</db:para>
</db:td>
<db:td>
<db:para>Returns the matrix4x4 result of the addition of <db:code>this</db:code> matrix4x4 with the <db:code>other</db:code> matrix4x4</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.matrix4x4(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);
var b = Qt.matrix4x4(5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20);
var c = a.plus(b);
console.log(c.toString());
// QMatrix4x4(6, 8, 10, 12, 14, 16, 18, 20, 22,
// 24, 26, 28, 30, 32, 34, 36)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>matrix4x4 minus(matrix4x4 other)</db:para>
</db:td>
<db:td>
<db:para>Returns the matrix4x4 result of the subtraction of <db:code>other</db:code> matrix4x4 from <db:code>this</db:code> matrix4x4</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.matrix4x4(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);
var b = Qt.matrix4x4(5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20);
var c = a.minus(b);
console.log(c.toString());
// QMatrix4x4(-4, -4, -4, -4, -4, -4, -4, -4, -4,
// -4, -4, -4, -4, -4, -4, -4)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector4d row(int which)</db:para>
</db:td>
<db:td>
<db:para>Returns the vector4d row of <db:code>this</db:code> specified by <db:code>which</db:code>. Note: the <db:code>which</db:code> is 0-based access into the matrix.</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.matrix4x4(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);
var b = Qt.vector4d(a.m21, a.m22, a.m23, a.m24);
var c = a.row(2); // zero based access!  so not equal to b
console.log(b.toString() + &quot; &quot; + c.toString());
// QVector4D(5, 6, 7, 8) QVector4D(9, 10, 11, 12)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector4d column(int which)</db:para>
</db:td>
<db:td>
<db:para>Returns the vector4d column of <db:code>this</db:code> specified by <db:code>which</db:code>. Note: the <db:code>which</db:code> is 0-based access into the matrix.</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.matrix4x4(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);
var b = Qt.vector4d(a.m12, a.m22, a.m32, a.m42);
var c = a.column(2); // zero based access!  so not equal to b
console.log(b.toString() + &quot; &quot; + c.toString());
// QVector4D(2, 6, 10, 14) QVector4D(3, 7, 11, 15)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>real determinant()</db:para>
</db:td>
<db:td>
<db:para>Returns the determinant of <db:code>this</db:code> matrix4x4</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.matrix4x4(1,0,0,0,0,2,0,0,0,0,3,0,100,200,300,1);
var b = a.determinant();
console.log(b); // 6
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>matrix4x4 inverted()</db:para>
</db:td>
<db:td>
<db:para>Returns the inverse of <db:code>this</db:code> matrix4x4 if it exists, else the identity matrix.</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.matrix4x4(1,0,0,0,0,2,0,0,0,0,3,0,100,200,300,1);
var b = a.inverted();
console.log(b.toString());
// QMatrix4x4(1, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.333333, 0, -100,
// -100, -100, 1)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>matrix4x4 transposed()</db:para>
</db:td>
<db:td>
<db:para>Returns the transpose of <db:code>this</db:code> matrix4x4</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.matrix4x4(1,0,0,0,0,2,0,0,0,0,3,0,100,200,300,1);
var b = a.transposed();
console.log(b.toString());
// QMatrix4x4(1, 0, 0, 100, 0, 2, 0, 200, 0, 0, 3, 300, 0, 0, 0, 1)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>bool fuzzyEquals(matrix4x4 other, real epsilon)</db:para>
</db:td>
<db:td>
<db:para>Returns true if <db:code>this</db:code> matrix4x4 is approximately equal to the <db:code>other</db:code> matrix4x4. The approximation will be true if each attribute of <db:code>this</db:code> is within <db:code>epsilon</db:code> of the respective attribute of <db:code>other</db:code>. Note that <db:code>epsilon</db:code> is an optional argument, the default <db:code>epsilon</db:code> is 0.00001.</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.matrix4x4(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);
var b = Qt.matrix4x4(1.0001,2.0001,3.0002,4.0003,5.0001,6.0002,
                     7.0002,8.0004, 9.0001,10.0003,
                     11.0003,12.0004,13.0001,
                     14.0002,15.0003,16.0004);
var c = a.fuzzyEquals(b);        // default epsilon
var d = a.fuzzyEquals(b, 0.005); // supplied epsilon
console.log(c + &quot; &quot; + d); // false true
            </db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This basic type is provided by the <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> import.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-typesystem-basictypes.xml">QML Basic Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
