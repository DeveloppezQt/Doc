<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QPlainTextEdit Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> class provides a widget that is used to edit and display plain text.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPlainTextEdit</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractscrollarea.xml" xlink:role="class">QAbstractScrollArea</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPlainTextEdit is part of <db:simplelist><db:member>richtext-processing</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section xml:id="introduction-and-concepts">
<db:title>Introduction and Concepts</db:title>
<db:para><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> is an advanced viewer/editor supporting plain text. It is optimized to handle large documents and to respond quickly to user input.</db:para>
<db:para>QPlainText uses very much the same technology and concepts as <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>, but is optimized for plain text handling.</db:para>
<db:para><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> works on paragraphs and characters. A paragraph is a formatted string which is word-wrapped to fit into the width of the widget. By default when reading plain text, one newline signifies a paragraph. A document consists of zero or more paragraphs. Paragraphs are separated by hard line breaks. Each character within a paragraph has its own attributes, for example, font and color.</db:para>
<db:para>The shape of the mouse cursor on a <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> is <db:link xlink:href="qt.xml#CursorShape-enum">Qt::IBeamCursor</db:link> by default. It can be changed through the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>()'s cursor property.</db:para>
</db:section>
<db:section xml:id="using-qplaintextedit-as-a-display-widget">
<db:title>Using QPlainTextEdit as a Display Widget</db:title>
<db:para>The text is set or replaced using <db:link xlink:href="qplaintextedit.xml#setPlainText">setPlainText</db:link>() which deletes the existing text and replaces it with the text passed to <db:link xlink:href="qplaintextedit.xml#setPlainText">setPlainText</db:link>().</db:para>
<db:para>Text can be inserted using the <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> class or using the convenience functions <db:link xlink:href="qplaintextedit.xml#insertPlainText">insertPlainText</db:link>(), <db:link xlink:href="qplaintextedit.xml#appendPlainText">appendPlainText</db:link>() or <db:link xlink:href="qplaintextedit.xml#paste">paste</db:link>().</db:para>
<db:para>By default, the text edit wraps words at whitespace to fit within the text edit widget. The setLineWrapMode() function is used to specify the kind of line wrap you want, <db:link xlink:href="qplaintextedit.xml#LineWrapMode-enum">WidgetWidth</db:link> or <db:link xlink:href="qplaintextedit.xml#LineWrapMode-enum">NoWrap</db:link> if you don't want any wrapping. If you use word wrap to the widget's width <db:link xlink:href="qplaintextedit.xml#LineWrapMode-enum">WidgetWidth</db:link>, you can specify whether to break on whitespace or anywhere with setWordWrapMode().</db:para>
<db:para>The <db:link xlink:href="qplaintextedit.xml#find">find</db:link>() function can be used to find and select a given string within the text.</db:para>
<db:para>If you want to limit the total number of paragraphs in a <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link>, as it is for example useful in a log viewer, then you can use the maximumBlockCount property. The combination of setMaximumBlockCount() and <db:link xlink:href="qplaintextedit.xml#appendPlainText">appendPlainText</db:link>() turns <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> into an efficient viewer for log text. The scrolling can be reduced with the centerOnScroll() property, making the log viewer even faster. Text can be formatted in a limited way, either using a syntax highlighter (see below), or by appending html-formatted text with <db:link xlink:href="qplaintextedit.xml#appendHtml">appendHtml</db:link>(). While <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> does not support complex rich text rendering with tables and floats, it does support limited paragraph-based formatting that you may need in a log viewer.</db:para>
<db:section xml:id="read-only-key-bindings">
<db:title>Read-only Key Bindings</db:title>
<db:para>When <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> is used read-only the key bindings are limited to navigation, and text may only be selected with the mouse:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Keypresses</db:para>
</db:th>
<db:th>
<db:para>Action</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ArrowType-enum">Qt::UpArrow</db:link></db:para>
</db:td>
<db:td>
<db:para>Moves one line up.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ArrowType-enum">Qt::DownArrow</db:link></db:para>
</db:td>
<db:td>
<db:para>Moves one line down.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ArrowType-enum">Qt::LeftArrow</db:link></db:para>
</db:td>
<db:td>
<db:para>Moves one character to the left.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ArrowType-enum">Qt::RightArrow</db:link></db:para>
</db:td>
<db:td>
<db:para>Moves one character to the right.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PageUp</db:para>
</db:td>
<db:td>
<db:para>Moves one (viewport) page up.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PageDown</db:para>
</db:td>
<db:td>
<db:para>Moves one (viewport) page down.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Home</db:para>
</db:td>
<db:td>
<db:para>Moves to the beginning of the text.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>End</db:para>
</db:td>
<db:td>
<db:para>Moves to the end of the text.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Alt+Wheel</db:para>
</db:td>
<db:td>
<db:para>Scrolls the page horizontally (the Wheel is the mouse wheel).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Wheel</db:para>
</db:td>
<db:td>
<db:para>Zooms the text.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+A</db:para>
</db:td>
<db:td>
<db:para>Selects all text.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="using-qplaintextedit-as-an-editor">
<db:title>Using QPlainTextEdit as an Editor</db:title>
<db:para>All the information about using <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> as a display widget also applies here.</db:para>
<db:para>Selection of text is handled by the <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> class, which provides functionality for creating selections, retrieving the text contents or deleting selections. You can retrieve the object that corresponds with the user-visible cursor using the <db:link xlink:href="qplaintextedit.xml#textCursor">textCursor</db:link>() method. If you want to set a selection in <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> just create one on a <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> object and then make that cursor the visible cursor using setCursor(). The selection can be copied to the clipboard with <db:link xlink:href="qplaintextedit.xml#copy">copy</db:link>(), or cut to the clipboard with <db:link xlink:href="qplaintextedit.xml#cut">cut</db:link>(). The entire text can be selected using <db:link xlink:href="qplaintextedit.xml#selectAll">selectAll</db:link>().</db:para>
<db:para><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> holds a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> object which can be retrieved using the <db:link xlink:href="qplaintextedit.xml#document">document</db:link>() method. You can also set your own document object using <db:link xlink:href="qplaintextedit.xml#setDocument">setDocument</db:link>(). <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> emits a <db:link xlink:href="qplaintextedit.xml#textChanged">textChanged</db:link>() signal if the text changes and it also provides a isModified() function which will return true if the text has been modified since it was either loaded or since the last call to setModified with false as argument. In addition it provides methods for undo and redo.</db:para>
<db:section xml:id="syntax-highlighting">
<db:title>Syntax Highlighting</db:title>
<db:para>Just like <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>, <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> works together with <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link>.</db:para>
</db:section>
<db:section xml:id="editing-key-bindings">
<db:title>Editing Key Bindings</db:title>
<db:para>The list of key bindings which are implemented for editing:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Keypresses</db:para>
</db:th>
<db:th>
<db:para>Action</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Backspace</db:para>
</db:td>
<db:td>
<db:para>Deletes the character to the left of the cursor.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Delete</db:para>
</db:td>
<db:td>
<db:para>Deletes the character to the right of the cursor.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+C</db:para>
</db:td>
<db:td>
<db:para>Copy the selected text to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Insert</db:para>
</db:td>
<db:td>
<db:para>Copy the selected text to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+K</db:para>
</db:td>
<db:td>
<db:para>Deletes to the end of the line.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+V</db:para>
</db:td>
<db:td>
<db:para>Pastes the clipboard text into text edit.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Shift+Insert</db:para>
</db:td>
<db:td>
<db:para>Pastes the clipboard text into text edit.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+X</db:para>
</db:td>
<db:td>
<db:para>Deletes the selected text and copies it to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Shift+Delete</db:para>
</db:td>
<db:td>
<db:para>Deletes the selected text and copies it to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Z</db:para>
</db:td>
<db:td>
<db:para>Undoes the last operation.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Y</db:para>
</db:td>
<db:td>
<db:para>Redoes the last operation.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LeftArrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one character to the left.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+LeftArrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one word to the left.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>RightArrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one character to the right.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+RightArrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one word to the right.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>UpArrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one line up.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+UpArrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one word up.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DownArrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one line down.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Down Arrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one word down.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PageUp</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one page up.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PageDown</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one page down.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Home</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor to the beginning of the line.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Home</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor to the beginning of the text.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>End</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor to the end of the line.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+End</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor to the end of the text.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Alt+Wheel</db:para>
</db:td>
<db:td>
<db:para>Scrolls the page horizontally (the Wheel is the mouse wheel).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Wheel</db:para>
</db:td>
<db:td>
<db:para>Zooms the text.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>To select (mark) text hold down the Shift key whilst pressing one of the movement keystrokes, for example, <db:emphasis>Shift+Right Arrow</db:emphasis> will select the character to the right, and <db:emphasis>Shift+Ctrl+Right Arrow</db:emphasis> will select the word to the right, etc.</db:para>
</db:section>
</db:section>
<db:section xml:id="differences-to-qtextedit">
<db:title>Differences to QTextEdit</db:title>
<db:para><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> is a thin class, implemented by using most of the technology that is behind <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> and <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>. Its performance benefits over <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> stem mostly from using a different and simplified text layout called <db:link xlink:href="qplaintextdocumentlayout.xml">QPlainTextDocumentLayout</db:link> on the text document (see <db:link xlink:href="qtextdocument.xml#setDocumentLayout">QTextDocument::setDocumentLayout</db:link>()). The plain text document layout does not support tables nor embedded frames, and <db:emphasis>replaces a pixel-exact height calculation with a line-by-line respectively paragraph-by-paragraph scrolling approach</db:emphasis>. This makes it possible to handle significantly larger documents, and still resize the editor with line wrap enabled in real time. It also makes for a fast log viewer (see setMaximumBlockCount()).</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:member>
<db:member><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-application-example.xml">Application Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-codeeditor-example.xml">Code Editor Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-richtext-syntaxhighlighter-example.xml">Syntax Highlighter Example</db:link></db:member>
<db:member><db:link xlink:href="richtext.xml">Rich Text Processing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="LineWrapMode-enum">
<db:title>enum QPlainTextEdit::LineWrapMode</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link></db:emphasis>::NoWrap</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link></db:emphasis>::WidgetWidth</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPlainTextEdit">
<db:title>[explicit] QPlainTextEdit::QPlainTextEdit(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs an empty <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QPlainTextEdit-1">
<db:title>[explicit] QPlainTextEdit::QPlainTextEdit(const QString &amp;<db:emphasis>text</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> with parent <db:code role="parameter">parent</db:code>. The text edit will display the plain text <db:code role="parameter">text</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPlainTextEdit">
<db:title>[virtual noexcept] QPlainTextEdit::~QPlainTextEdit()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="anchorAt">
<db:title>[since 4.7] QString QPlainTextEdit::anchorAt(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Returns the reference of the anchor at position <db:code role="parameter">pos</db:code>, or an empty string if no anchor exists at that point.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
</db:section>
<db:section xml:id="appendHtml">
<db:title>void QPlainTextEdit::appendHtml(const QString &amp;<db:emphasis>html</db:emphasis>)</db:title>
<db:para>Appends a new paragraph with <db:code role="parameter">html</db:code> to the end of the text edit.</db:para>
<db:para><db:link xlink:href="qplaintextedit.xml#appendPlainText">appendPlainText</db:link>()</db:para>
</db:section>
<db:section xml:id="appendPlainText">
<db:title>void QPlainTextEdit::appendPlainText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Appends a new paragraph with <db:code role="parameter">text</db:code> to the end of the text edit.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#appendHtml">appendHtml</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockBoundingGeometry">
<db:title>[protected] QRectF QPlainTextEdit::blockBoundingGeometry(const QTextBlock &amp;<db:emphasis>block</db:emphasis>) const</db:title>
<db:para>Returns the bounding rectangle of the text <db:code role="parameter">block</db:code> in content coordinates. Translate the rectangle with the <db:link xlink:href="qplaintextedit.xml#contentOffset">contentOffset</db:link>() to get visual coordinates on the viewport.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#firstVisibleBlock">firstVisibleBlock</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#blockBoundingRect">blockBoundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockBoundingRect">
<db:title>[protected] QRectF QPlainTextEdit::blockBoundingRect(const QTextBlock &amp;<db:emphasis>block</db:emphasis>) const</db:title>
<db:para>Returns the bounding rectangle of the text <db:code role="parameter">block</db:code> in the block's own coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#blockBoundingGeometry">blockBoundingGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockCountChanged">
<db:title>void QPlainTextEdit::blockCountChanged(int <db:emphasis>newBlockCount</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the block count changes. The new block count is passed in <db:code role="parameter">newBlockCount</db:code>.</db:para>
</db:section>
<db:section xml:id="canInsertFromMimeData">
<db:title>[virtual protected] bool QPlainTextEdit::canInsertFromMimeData(const QMimeData *<db:emphasis>source</db:emphasis>) const</db:title>
<db:para>This function returns <db:code>true</db:code> if the contents of the MIME data object, specified by <db:code role="parameter">source</db:code>, can be decoded and inserted into the document. It is called for example when during a drag operation the mouse enters this widget and it is necessary to determine whether it is possible to accept the drag.</db:para>
</db:section>
<db:section xml:id="canPaste">
<db:title>bool QPlainTextEdit::canPaste() const</db:title>
<db:para>Returns whether text can be pasted from the clipboard into the textedit.</db:para>
</db:section>
<db:section xml:id="centerCursor">
<db:title>void QPlainTextEdit::centerCursor()</db:title>
<db:para>Scrolls the document in order to center the cursor vertically.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#ensureCursorVisible">ensureCursorVisible</db:link>()</db:member>
<db:member>centerOnScroll</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QPlainTextEdit::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#changeEvent" role="function">QFrame::changeEvent(QEvent *ev)</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QPlainTextEdit::clear()</db:title>
<db:para>Deletes all the text in the text edit.</db:para>
<db:para>Note that the undo/redo history is cleared by this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#cut">cut</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#setPlainText">setPlainText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentOffset">
<db:title>[protected] QPointF QPlainTextEdit::contentOffset() const</db:title>
<db:para>Returns the content's origin in viewport coordinates.</db:para>
<db:para>The origin of the content of a plain text edit is always the top left corner of the first visible text block. The content offset is different from (0,0) when the text has been scrolled horizontally, or when the first visible block has been scrolled partially off the screen, i.e. the visible text does not start with the first line of the first visible block, or when the first visible block is the very first block and the editor displays a margin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#firstVisibleBlock">firstVisibleBlock</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractscrollarea.xml#horizontalScrollBar">horizontalScrollBar</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractscrollarea.xml#verticalScrollBar">verticalScrollBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QPlainTextEdit::contextMenuEvent(QContextMenuEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#contextMenuEvent" role="function">QAbstractScrollArea::contextMenuEvent(QContextMenuEvent *e)</db:link>.</db:para>
<db:para>Shows the standard context menu created with <db:link xlink:href="qplaintextedit.xml#createStandardContextMenu">createStandardContextMenu</db:link>().</db:para>
<db:para>If you do not want the text edit to have a context menu, you can set its contextMenuPolicy to <db:link xlink:href="qt.xml#ContextMenuPolicy-enum">Qt::NoContextMenu</db:link>. If you want to customize the context menu, reimplement this function. If you want to extend the standard context menu, reimplement this function, call <db:link xlink:href="qplaintextedit.xml#createStandardContextMenu">createStandardContextMenu</db:link>() and extend the menu returned.</db:para>
<db:para>Information about the event is passed in the <db:code role="parameter">event</db:code> object.</db:para>
<db:programlisting language="cpp">void MyQPlainTextEdit::contextMenuEvent(QContextMenuEvent *event)
{
    QMenu *menu = createStandardContextMenu();
    menu-&gt;addAction(tr(&quot;My Menu Item&quot;));
    //...
    menu-&gt;exec(event-&gt;globalPos());
    delete menu;
}
</db:programlisting>
</db:section>
<db:section xml:id="copy">
<db:title>void QPlainTextEdit::copy()</db:title>
<db:para>Copies any selected text to the clipboard.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#copyAvailable">copyAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copyAvailable">
<db:title>void QPlainTextEdit::copyAvailable(bool <db:emphasis>yes</db:emphasis>)</db:title>
<db:para>This signal is emitted when text is selected or de-selected in the text edit.</db:para>
<db:para>When text is selected this signal will be emitted with <db:code role="parameter">yes</db:code> set to true. If no text has been selected or if the selected text is de-selected this signal is emitted with <db:code role="parameter">yes</db:code> set to false.</db:para>
<db:para>If <db:code role="parameter">yes</db:code> is true then <db:link xlink:href="qplaintextedit.xml#copy">copy</db:link>() can be used to copy the selection to the clipboard. If <db:code role="parameter">yes</db:code> is false then <db:link xlink:href="qplaintextedit.xml#copy">copy</db:link>() does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#selectionChanged">selectionChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createMimeDataFromSelection">
<db:title>[virtual protected] QMimeData *QPlainTextEdit::createMimeDataFromSelection() const</db:title>
<db:para>This function returns a new MIME data object to represent the contents of the text edit's current selection. It is called when the selection needs to be encapsulated into a new <db:link xlink:href="qmimedata.xml">QMimeData</db:link> object; for example, when a drag and drop operation is started, or when data is copied to the clipboard.</db:para>
<db:para>If you reimplement this function, note that the ownership of the returned <db:link xlink:href="qmimedata.xml">QMimeData</db:link> object is passed to the caller. The selection can be retrieved by using the <db:link xlink:href="qplaintextedit.xml#textCursor">textCursor</db:link>() function.</db:para>
</db:section>
<db:section xml:id="createStandardContextMenu">
<db:title>QMenu *QPlainTextEdit::createStandardContextMenu()</db:title>
<db:para>This function creates the standard context menu which is shown when the user clicks on the line edit with the right mouse button. It is called from the default <db:link xlink:href="qplaintextedit.xml#contextMenuEvent">contextMenuEvent</db:link>() handler. The popup menu's ownership is transferred to the caller.</db:para>
</db:section>
<db:section xml:id="currentCharFormat">
<db:title>QTextCharFormat QPlainTextEdit::currentCharFormat() const</db:title>
<db:para>Returns the char format that is used when inserting new text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#setCurrentCharFormat">setCurrentCharFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorForPosition">
<db:title>QTextCursor QPlainTextEdit::cursorForPosition(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>returns a <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> at position <db:code role="parameter">pos</db:code> (in viewport coordinates).</db:para>
</db:section>
<db:section xml:id="cursorPositionChanged">
<db:title>void QPlainTextEdit::cursorPositionChanged()</db:title>
<db:para>This signal is emitted whenever the position of the cursor changed.</db:para>
</db:section>
<db:section xml:id="cursorRect">
<db:title>QRect QPlainTextEdit::cursorRect() const</db:title>
<db:para>returns a rectangle (in viewport coordinates) that includes the cursor of the text edit.</db:para>
</db:section>
<db:section xml:id="cursorRect-1">
<db:title>QRect QPlainTextEdit::cursorRect(const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>) const</db:title>
<db:para>returns a rectangle (in viewport coordinates) that includes the <db:code role="parameter">cursor</db:code>.</db:para>
</db:section>
<db:section xml:id="cut">
<db:title>void QPlainTextEdit::cut()</db:title>
<db:para>Copies the selected text to the clipboard and deletes it from the text edit.</db:para>
<db:para>If there is no selected text nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#copy">copy</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#paste">paste</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="document">
<db:title>QTextDocument *QPlainTextEdit::document() const</db:title>
<db:para>Returns a pointer to the underlying document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#setDocument">setDocument</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[override virtual protected] void QPlainTextEdit::dragEnterEvent(QDragEnterEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragEnterEvent" role="function">QAbstractScrollArea::dragEnterEvent(QDragEnterEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[override virtual protected] void QPlainTextEdit::dragLeaveEvent(QDragLeaveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragLeaveEvent" role="function">QAbstractScrollArea::dragLeaveEvent(QDragLeaveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[override virtual protected] void QPlainTextEdit::dragMoveEvent(QDragMoveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragMoveEvent" role="function">QAbstractScrollArea::dragMoveEvent(QDragMoveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QPlainTextEdit::dropEvent(QDropEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dropEvent" role="function">QAbstractScrollArea::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="ensureCursorVisible">
<db:title>void QPlainTextEdit::ensureCursorVisible()</db:title>
<db:para>Ensures that the cursor is visible by scrolling the text edit if necessary.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#centerCursor">centerCursor</db:link>()</db:member>
<db:member>centerOnScroll</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extraSelections">
<db:title>QList&lt;QTextEdit::ExtraSelection&gt; QPlainTextEdit::extraSelections() const</db:title>
<db:para>Returns previously set extra selections.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#setExtraSelections">setExtraSelections</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="find">
<db:title>bool QPlainTextEdit::find(const QString &amp;<db:emphasis>exp</db:emphasis>, QTextDocument::FindFlags <db:emphasis>options</db:emphasis> = 0)</db:title>
<db:para>Finds the next occurrence of the string, <db:code role="parameter">exp</db:code>, using the given <db:code role="parameter">options</db:code>. Returns <db:code>true</db:code> if <db:code role="parameter">exp</db:code> was found and changes the cursor to select the match; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="find-1">
<db:title>[since 5.3] bool QPlainTextEdit::find(const QRegExp &amp;<db:emphasis>exp</db:emphasis>, QTextDocument::FindFlags <db:emphasis>options</db:emphasis> = 0)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Finds the next occurrence, matching the regular expression, <db:code role="parameter">exp</db:code>, using the given <db:code role="parameter">options</db:code>. The <db:link xlink:href="qtextdocument.xml#FindFlag-enum">QTextDocument::FindCaseSensitively</db:link> option is ignored for this overload, use <db:link xlink:href="qregexp.xml#caseSensitivity">QRegExp::caseSensitivity</db:link> instead.</db:para>
<db:para>Returns <db:code>true</db:code> if a match was found and changes the cursor to select the match; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="firstVisibleBlock">
<db:title>[protected] QTextBlock QPlainTextEdit::firstVisibleBlock() const</db:title>
<db:para>Returns the first visible block.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#blockBoundingRect">blockBoundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QPlainTextEdit::focusInEvent(QFocusEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusNextPrevChild">
<db:title>[override virtual protected] bool QPlainTextEdit::focusNextPrevChild(bool <db:emphasis>next</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusNextPrevChild" role="function">QWidget::focusNextPrevChild(bool next)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QPlainTextEdit::focusOutEvent(QFocusEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="getPaintContext">
<db:title>[protected] QAbstractTextDocumentLayout::PaintContext QPlainTextEdit::getPaintContext() const</db:title>
<db:para>Returns the paint context for the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>(), useful only when reimplementing <db:link xlink:href="qplaintextedit.xml#paintEvent">paintEvent</db:link>().</db:para>
</db:section>
<db:section xml:id="inputMethodEvent">
<db:title>[override virtual protected] void QPlainTextEdit::inputMethodEvent(QInputMethodEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodEvent" role="function">QWidget::inputMethodEvent(QInputMethodEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="inputMethodQuery">
<db:title>[override virtual] QVariant QPlainTextEdit::inputMethodQuery(Qt::InputMethodQuery <db:emphasis>property</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodQuery" role="function">QWidget::inputMethodQuery(Qt::InputMethodQuery query) const</db:link>.</db:para>
</db:section>
<db:section xml:id="insertFromMimeData">
<db:title>[virtual protected] void QPlainTextEdit::insertFromMimeData(const QMimeData *<db:emphasis>source</db:emphasis>)</db:title>
<db:para>This function inserts the contents of the MIME data object, specified by <db:code role="parameter">source</db:code>, into the text edit at the current cursor position. It is called whenever text is inserted as the result of a clipboard paste operation, or when the text edit accepts data from a drag and drop operation.</db:para>
</db:section>
<db:section xml:id="insertPlainText">
<db:title>void QPlainTextEdit::insertPlainText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Convenience slot that inserts <db:code role="parameter">text</db:code> at the current cursor position.</db:para>
<db:para>It is equivalent to</db:para>
<db:programlisting language="cpp">edit-&gt;textCursor().insertText(text);
</db:programlisting>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QPlainTextEdit::keyPressEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#keyPressEvent" role="function">QAbstractScrollArea::keyPressEvent(QKeyEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[override virtual protected] void QPlainTextEdit::keyReleaseEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyReleaseEvent" role="function">QWidget::keyReleaseEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="loadResource">
<db:title>[virtual] QVariant QPlainTextEdit::loadResource(int <db:emphasis>type</db:emphasis>, const QUrl &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Loads the resource specified by the given <db:code role="parameter">type</db:code> and <db:code role="parameter">name</db:code>.</db:para>
<db:para>This function is an extension of <db:link xlink:href="qtextdocument.xml#loadResource">QTextDocument::loadResource</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#loadResource">QTextDocument::loadResource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mergeCurrentCharFormat">
<db:title>void QPlainTextEdit::mergeCurrentCharFormat(const QTextCharFormat &amp;<db:emphasis>modifier</db:emphasis>)</db:title>
<db:para>Merges the properties specified in <db:code role="parameter">modifier</db:code> into the current character format by calling <db:link xlink:href="qtextcursor.xml#mergeCharFormat">QTextCursor::mergeCharFormat</db:link> on the editor's cursor. If the editor has a selection then the properties of <db:code role="parameter">modifier</db:code> are directly applied to the selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#mergeCharFormat">QTextCursor::mergeCharFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modificationChanged">
<db:title>void QPlainTextEdit::modificationChanged(bool <db:emphasis>changed</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the content of the document changes in a way that affects the modification state. If <db:code role="parameter">changed</db:code> is true, the document has been modified; otherwise it is false.</db:para>
<db:para>For example, calling setModified(false) on a document and then inserting text causes the signal to get emitted. If you undo that operation, causing the document to return to its original unmodified state, the signal will get emitted again.</db:para>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[override virtual protected] void QPlainTextEdit::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseDoubleClickEvent" role="function">QAbstractScrollArea::mouseDoubleClickEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QPlainTextEdit::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseMoveEvent" role="function">QAbstractScrollArea::mouseMoveEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QPlainTextEdit::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mousePressEvent" role="function">QAbstractScrollArea::mousePressEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QPlainTextEdit::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseReleaseEvent" role="function">QAbstractScrollArea::mouseReleaseEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="moveCursor">
<db:title>void QPlainTextEdit::moveCursor(QTextCursor::MoveOperation <db:emphasis>operation</db:emphasis>, QTextCursor::MoveMode <db:emphasis>mode</db:emphasis> = QTextCursor::MoveAnchor)</db:title>
<db:para>Moves the cursor by performing the given <db:code role="parameter">operation</db:code>.</db:para>
<db:para>If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qtextcursor.xml#MoveMode-enum">QTextCursor::KeepAnchor</db:link>, the cursor selects the text it moves over. This is the same effect that the user achieves when they hold down the Shift key and move the cursor with the cursor keys.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#movePosition">QTextCursor::movePosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QPlainTextEdit::paintEvent(QPaintEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#paintEvent" role="function">QAbstractScrollArea::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paste">
<db:title>void QPlainTextEdit::paste()</db:title>
<db:para>Pastes the text from the clipboard into the text edit at the current cursor position.</db:para>
<db:para>If there is no text in the clipboard nothing happens.</db:para>
<db:para>To change the behavior of this function, i.e. to modify what <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> can paste and how it is being pasted, reimplement the virtual <db:link xlink:href="qplaintextedit.xml#canInsertFromMimeData">canInsertFromMimeData</db:link>() and <db:link xlink:href="qplaintextedit.xml#insertFromMimeData">insertFromMimeData</db:link>() functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#cut">cut</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#copy">copy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="print">
<db:title>void QPlainTextEdit::print(QPagedPaintDevice *<db:emphasis>printer</db:emphasis>) const</db:title>
<db:para>Convenience function to print the text edit's document to the given <db:code role="parameter">printer</db:code>. This is equivalent to calling the print method on the document directly except that this function also supports <db:link xlink:href="qprinter.xml#PrintRange-enum">QPrinter::Selection</db:link> as print range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#print">QTextDocument::print</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redo">
<db:title>void QPlainTextEdit::redo()</db:title>
<db:para>Redoes the last operation.</db:para>
<db:para>If there is no operation to redo, i.e. there is no redo step in the undo/redo history, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#undo">undo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redoAvailable">
<db:title>void QPlainTextEdit::redoAvailable(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever redo operations become available (<db:code role="parameter">available</db:code> is true) or unavailable (<db:code role="parameter">available</db:code> is false).</db:para>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QPlainTextEdit::resizeEvent(QResizeEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#resizeEvent" role="function">QAbstractScrollArea::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="scrollContentsBy">
<db:title>[override virtual protected] void QPlainTextEdit::scrollContentsBy(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#scrollContentsBy" role="function">QAbstractScrollArea::scrollContentsBy(int dx, int dy)</db:link>.</db:para>
</db:section>
<db:section xml:id="selectAll">
<db:title>void QPlainTextEdit::selectAll()</db:title>
<db:para>Selects all text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#copy">copy</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#cut">cut</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#textCursor">textCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionChanged">
<db:title>void QPlainTextEdit::selectionChanged()</db:title>
<db:para>This signal is emitted whenever the selection changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#copyAvailable">copyAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentCharFormat">
<db:title>void QPlainTextEdit::setCurrentCharFormat(const QTextCharFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Sets the char format that is be used when inserting new text to <db:code role="parameter">format</db:code> by calling <db:link xlink:href="qtextcursor.xml#setCharFormat">QTextCursor::setCharFormat</db:link>() on the editor's cursor. If the editor has a selection then the char format is directly applied to the selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#currentCharFormat">currentCharFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDocument">
<db:title>void QPlainTextEdit::setDocument(QTextDocument *<db:emphasis>document</db:emphasis>)</db:title>
<db:para>Makes <db:code role="parameter">document</db:code> the new document of the text editor.</db:para>
<db:para>The parent <db:link xlink:href="qobject.xml">QObject</db:link> of the provided document remains the owner of the object. If the current document is a child of the text editor, then it is deleted.</db:para>
<db:para>The document must have a document layout that inherits <db:link xlink:href="qplaintextdocumentlayout.xml">QPlainTextDocumentLayout</db:link> (see <db:link xlink:href="qtextdocument.xml#setDocumentLayout">QTextDocument::setDocumentLayout</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#document">document</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setExtraSelections">
<db:title>void QPlainTextEdit::setExtraSelections(const QList&lt;QTextEdit::ExtraSelection&gt; &amp;<db:emphasis>selections</db:emphasis>)</db:title>
<db:para>This function allows temporarily marking certain regions in the document with a given color, specified as <db:code role="parameter">selections</db:code>. This can be useful for example in a programming editor to mark a whole line of text with a given background color to indicate the existence of a breakpoint.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextedit-extraselection.xml">QTextEdit::ExtraSelection</db:link></db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#extraSelections">extraSelections</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPlainText">
<db:title>void QPlainTextEdit::setPlainText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Changes the text of the text edit to the string <db:code role="parameter">text</db:code>. Any previous text is removed.</db:para>
<db:para><db:code role="parameter">text</db:code> is interpreted as plain text.</db:para>
<db:para>Note that the undo/redo history is cleared by this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">toText()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextCursor">
<db:title>void QPlainTextEdit::setTextCursor(const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:para>Sets the visible <db:code role="parameter">cursor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#textCursor">textCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QPlainTextEdit::showEvent(<db:emphasis>QShowEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="textChanged">
<db:title>void QPlainTextEdit::textChanged()</db:title>
<db:para>This signal is emitted whenever the document's content changes; for example, when text is inserted or deleted, or when formatting is applied.</db:para>
</db:section>
<db:section xml:id="textCursor">
<db:title>QTextCursor QPlainTextEdit::textCursor() const</db:title>
<db:para>Returns a copy of the <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> that represents the currently visible cursor. Note that changes on the returned cursor do not affect <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link>'s cursor; use <db:link xlink:href="qplaintextedit.xml#setTextCursor">setTextCursor</db:link>() to update the visible cursor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#setTextCursor">setTextCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toPlainText">
<db:title>QString QPlainTextEdit::toPlainText() const</db:title>
<db:para>Returns the text of the text edit as plain text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#setPlainText">QPlainTextEdit::setPlainText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undo">
<db:title>void QPlainTextEdit::undo()</db:title>
<db:para>Undoes the last operation.</db:para>
<db:para>If there is no operation to undo, i.e. there is no undo step in the undo/redo history, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#redo">redo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undoAvailable">
<db:title>void QPlainTextEdit::undoAvailable(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever undo operations become available (<db:code role="parameter">available</db:code> is true) or unavailable (<db:code role="parameter">available</db:code> is false).</db:para>
</db:section>
<db:section xml:id="updateRequest">
<db:title>void QPlainTextEdit::updateRequest(const QRect &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:para>This signal is emitted when the text document needs an update of the specified <db:code role="parameter">rect</db:code>. If the text is scrolled, <db:code role="parameter">rect</db:code> will cover the entire viewport area. If the text is scrolled vertically, <db:code role="parameter">dy</db:code> carries the amount of pixels the viewport was scrolled.</db:para>
<db:para>The purpose of the signal is to support extra widgets in plain text edit subclasses that e.g. show line numbers, breakpoints, or other extra information.</db:para>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QPlainTextEdit::wheelEvent(QWheelEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#wheelEvent" role="function">QAbstractScrollArea::wheelEvent(QWheelEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="zoomIn">
<db:title>void QPlainTextEdit::zoomIn(int <db:emphasis>range</db:emphasis> = 1)</db:title>
<db:para>Zooms in on the text by making the base font size <db:code role="parameter">range</db:code> points larger and recalculating all font sizes to be the new size. This does not change the size of any images.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#zoomOut">zoomOut</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="zoomOut">
<db:title>void QPlainTextEdit::zoomOut(int <db:emphasis>range</db:emphasis> = 1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Zooms out on the text by making the base font size <db:code role="parameter">range</db:code> points smaller and recalculating all font sizes to be the new size. This does not change the size of any images.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#zoomIn">zoomIn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
