<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPlainTextEdit Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> class provides a widget that is used to edit and display plain text.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPlainTextEdit</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractscrollarea.xml" xlink:role="class">QAbstractScrollArea</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPlainTextEdit is part of <db:simplelist><db:member>richtext-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section xml:id="introduction-and-concepts">
<db:title>Introduction and Concepts</db:title>
<db:para><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> is an advanced viewer/editor supporting plain text. It is optimized to handle large documents and to respond quickly to user input.</db:para>
<db:para>QPlainText uses very much the same technology and concepts as <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>, but is optimized for plain text handling.</db:para>
<db:para><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> works on paragraphs and characters. A paragraph is a formatted string which is word-wrapped to fit into the width of the widget. By default when reading plain text, one newline signifies a paragraph. A document consists of zero or more paragraphs. Paragraphs are separated by hard line breaks. Each character within a paragraph has its own attributes, for example, font and color.</db:para>
<db:para>The shape of the mouse cursor on a <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> is <db:link xlink:href="qt.xml#CursorShape-enum">Qt::IBeamCursor</db:link> by default. It can be changed through the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>()'s cursor property.</db:para>
</db:section>
<db:section xml:id="using-qplaintextedit-as-a-display-widget">
<db:title>Using QPlainTextEdit as a Display Widget</db:title>
<db:para>The text is set or replaced using <db:link xlink:href="qplaintextedit.xml#setPlainText">setPlainText</db:link>() which deletes the existing text and replaces it with the text passed to <db:link xlink:href="qplaintextedit.xml#setPlainText">setPlainText</db:link>().</db:para>
<db:para>Text can be inserted using the <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> class or using the convenience functions <db:link xlink:href="qplaintextedit.xml#insertPlainText">insertPlainText</db:link>(), <db:link xlink:href="qplaintextedit.xml#appendPlainText">appendPlainText</db:link>() or <db:link xlink:href="qplaintextedit.xml#paste">paste</db:link>().</db:para>
<db:para>By default, the text edit wraps words at whitespace to fit within the text edit widget. The <db:link xlink:href="qplaintextedit.xml#lineWrapMode-prop">setLineWrapMode</db:link>() function is used to specify the kind of line wrap you want, <db:link xlink:href="qplaintextedit.xml#LineWrapMode-enum">WidgetWidth</db:link> or <db:link xlink:href="qplaintextedit.xml#LineWrapMode-enum">NoWrap</db:link> if you don't want any wrapping. If you use word wrap to the widget's width <db:link xlink:href="qplaintextedit.xml#LineWrapMode-enum">WidgetWidth</db:link>, you can specify whether to break on whitespace or anywhere with <db:link xlink:href="qplaintextedit.xml#wordWrapMode-prop">setWordWrapMode</db:link>().</db:para>
<db:para>The <db:link xlink:href="qplaintextedit.xml#find">find</db:link>() function can be used to find and select a given string within the text.</db:para>
<db:para>If you want to limit the total number of paragraphs in a <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link>, as it is for example useful in a log viewer, then you can use the <db:link xlink:href="qplaintextedit.xml#maximumBlockCount-prop">maximumBlockCount</db:link> property. The combination of <db:link xlink:href="qplaintextedit.xml#maximumBlockCount-prop">setMaximumBlockCount</db:link>() and <db:link xlink:href="qplaintextedit.xml#appendPlainText">appendPlainText</db:link>() turns <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> into an efficient viewer for log text. The scrolling can be reduced with the <db:link xlink:href="qplaintextedit.xml#centerOnScroll-prop">centerOnScroll</db:link>() property, making the log viewer even faster. Text can be formatted in a limited way, either using a syntax highlighter (see below), or by appending html-formatted text with <db:link xlink:href="qplaintextedit.xml#appendHtml">appendHtml</db:link>(). While <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> does not support complex rich text rendering with tables and floats, it does support limited paragraph-based formatting that you may need in a log viewer.</db:para>
<db:section xml:id="read-only-key-bindings">
<db:title>Read-only Key Bindings</db:title>
<db:para>When <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> is used read-only the key bindings are limited to navigation, and text may only be selected with the mouse:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Keypresses</db:para>
</db:th>
<db:th>
<db:para>Action</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ArrowType-enum">Qt::UpArrow</db:link></db:para>
</db:td>
<db:td>
<db:para>Moves one line up.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ArrowType-enum">Qt::DownArrow</db:link></db:para>
</db:td>
<db:td>
<db:para>Moves one line down.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ArrowType-enum">Qt::LeftArrow</db:link></db:para>
</db:td>
<db:td>
<db:para>Moves one character to the left.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ArrowType-enum">Qt::RightArrow</db:link></db:para>
</db:td>
<db:td>
<db:para>Moves one character to the right.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PageUp</db:para>
</db:td>
<db:td>
<db:para>Moves one (viewport) page up.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PageDown</db:para>
</db:td>
<db:td>
<db:para>Moves one (viewport) page down.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Home</db:para>
</db:td>
<db:td>
<db:para>Moves to the beginning of the text.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>End</db:para>
</db:td>
<db:td>
<db:para>Moves to the end of the text.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Alt+Wheel</db:para>
</db:td>
<db:td>
<db:para>Scrolls the page horizontally (the Wheel is the mouse wheel).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Wheel</db:para>
</db:td>
<db:td>
<db:para>Zooms the text.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+A</db:para>
</db:td>
<db:td>
<db:para>Selects all text.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="using-qplaintextedit-as-an-editor">
<db:title>Using QPlainTextEdit as an Editor</db:title>
<db:para>All the information about using <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> as a display widget also applies here.</db:para>
<db:para>Selection of text is handled by the <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> class, which provides functionality for creating selections, retrieving the text contents or deleting selections. You can retrieve the object that corresponds with the user-visible cursor using the <db:link xlink:href="qplaintextedit.xml#textCursor">textCursor</db:link>() method. If you want to set a selection in <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> just create one on a <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> object and then make that cursor the visible cursor using <db:link xlink:href="qwidget.xml#cursor-prop">setCursor</db:link>(). The selection can be copied to the clipboard with <db:link xlink:href="qplaintextedit.xml#copy">copy</db:link>(), or cut to the clipboard with <db:link xlink:href="qplaintextedit.xml#cut">cut</db:link>(). The entire text can be selected using <db:link xlink:href="qplaintextedit.xml#selectAll">selectAll</db:link>().</db:para>
<db:para><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> holds a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> object which can be retrieved using the <db:link xlink:href="qplaintextedit.xml#document">document</db:link>() method. You can also set your own document object using <db:link xlink:href="qplaintextedit.xml#setDocument">setDocument</db:link>(). <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> emits a <db:link xlink:href="qplaintextedit.xml#textChanged">textChanged</db:link>() signal if the text changes and it also provides a isModified() function which will return true if the text has been modified since it was either loaded or since the last call to setModified with false as argument. In addition it provides methods for undo and redo.</db:para>
<db:section xml:id="syntax-highlighting">
<db:title>Syntax Highlighting</db:title>
<db:para>Just like <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>, <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> works together with <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link>.</db:para>
</db:section>
<db:section xml:id="editing-key-bindings">
<db:title>Editing Key Bindings</db:title>
<db:para>The list of key bindings which are implemented for editing:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Keypresses</db:para>
</db:th>
<db:th>
<db:para>Action</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Backspace</db:para>
</db:td>
<db:td>
<db:para>Deletes the character to the left of the cursor.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Delete</db:para>
</db:td>
<db:td>
<db:para>Deletes the character to the right of the cursor.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+C</db:para>
</db:td>
<db:td>
<db:para>Copy the selected text to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Insert</db:para>
</db:td>
<db:td>
<db:para>Copy the selected text to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+K</db:para>
</db:td>
<db:td>
<db:para>Deletes to the end of the line.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+V</db:para>
</db:td>
<db:td>
<db:para>Pastes the clipboard text into text edit.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Shift+Insert</db:para>
</db:td>
<db:td>
<db:para>Pastes the clipboard text into text edit.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+X</db:para>
</db:td>
<db:td>
<db:para>Deletes the selected text and copies it to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Shift+Delete</db:para>
</db:td>
<db:td>
<db:para>Deletes the selected text and copies it to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Z</db:para>
</db:td>
<db:td>
<db:para>Undoes the last operation.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Y</db:para>
</db:td>
<db:td>
<db:para>Redoes the last operation.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LeftArrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one character to the left.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+LeftArrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one word to the left.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>RightArrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one character to the right.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+RightArrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one word to the right.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>UpArrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one line up.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+UpArrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one word up.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DownArrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one line down.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Down Arrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one word down.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PageUp</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one page up.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PageDown</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one page down.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Home</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor to the beginning of the line.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Home</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor to the beginning of the text.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>End</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor to the end of the line.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+End</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor to the end of the text.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Alt+Wheel</db:para>
</db:td>
<db:td>
<db:para>Scrolls the page horizontally (the Wheel is the mouse wheel).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Wheel</db:para>
</db:td>
<db:td>
<db:para>Zooms the text.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>To select (mark) text hold down the Shift key whilst pressing one of the movement keystrokes, for example, <db:emphasis>Shift+Right Arrow</db:emphasis> will select the character to the right, and <db:emphasis>Shift+Ctrl+Right Arrow</db:emphasis> will select the word to the right, etc.</db:para>
</db:section>
</db:section>
<db:section xml:id="differences-to-qtextedit">
<db:title>Differences to QTextEdit</db:title>
<db:para><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> is a thin class, implemented by using most of the technology that is behind <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> and <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>. Its performance benefits over <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> stem mostly from using a different and simplified text layout called <db:link xlink:href="qplaintextdocumentlayout.xml">QPlainTextDocumentLayout</db:link> on the text document (see <db:link xlink:href="qtextdocument.xml#setDocumentLayout">QTextDocument::setDocumentLayout</db:link>()). The plain text document layout does not support tables nor embedded frames, and <db:emphasis>replaces a pixel-exact height calculation with a line-by-line respectively paragraph-by-paragraph scrolling approach</db:emphasis>. This makes it possible to handle significantly larger documents, and still resize the editor with line wrap enabled in real time. It also makes for a fast log viewer (see <db:link xlink:href="qplaintextedit.xml#maximumBlockCount-prop">setMaximumBlockCount</db:link>()).</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:member>
<db:member><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-application-example.xml">Application Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-codeeditor-example.xml">Code Editor Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-richtext-syntaxhighlighter-example.xml">Syntax Highlighter Example</db:link></db:member>
<db:member><db:link xlink:href="richtext.xml">Rich Text Processing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="LineWrapMode-enum">
<db:title>enum QPlainTextEdit::LineWrapMode</db:title>
<db:enumsynopsis>
<db:enumname>LineWrapMode</db:enumname>
<db:enumitem>
<db:enumidentifier>NoWrap</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WidgetWidth</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link></db:emphasis>::NoWrap</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link></db:emphasis>::WidgetWidth</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="backgroundVisible-prop">
<db:title>backgroundVisible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>backgroundVisible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">backgroundVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setBackgroundVisible</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the palette background is visible outside the document area</db:para>
<db:para>If set to true, the plain text edit paints the palette background on the viewport area not covered by the text document. Otherwise, if set to false, it won't. The feature makes it possible for the user to visually distinguish between the area of the document, painted with the base color of the palette, and the empty area not covered by any document.</db:para>
<db:para>The default is false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">backgroundVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBackgroundVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="blockCount-prop">
<db:title>[read-only] blockCount : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>blockCount</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">blockCount</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of text blocks in the document.</db:para>
<db:para>By default, in an empty document, this property contains a value of 1.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">blockCount</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="centerOnScroll-prop">
<db:title>centerOnScroll : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>centerOnScroll</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">centerOnScroll</db:synopsisinfo>
<db:synopsisinfo role="setter">setCenterOnScroll</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the cursor should be centered on screen</db:para>
<db:para>If set to true, the plain text edit scrolls the document vertically to make the cursor visible at the center of the viewport. This also allows the text edit to scroll below the end of the document. Otherwise, if set to false, the plain text edit scrolls the smallest amount possible to ensure the cursor is visible. The same algorithm is applied to any new line appended through <db:link xlink:href="qplaintextedit.xml#appendPlainText">appendPlainText</db:link>().</db:para>
<db:para>The default is false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">centerOnScroll</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCenterOnScroll</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#centerCursor">centerCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#ensureCursorVisible">ensureCursorVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorWidth-prop">
<db:title>cursorWidth : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>cursorWidth</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cursorWidth</db:synopsisinfo>
<db:synopsisinfo role="setter">setCursorWidth</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property specifies the width of the cursor in pixels. The default value is 1.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">cursorWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCursorWidth</db:emphasis>(<db:type>int</db:type> <db:emphasis>width</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="documentTitle-prop">
<db:title>documentTitle : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>documentTitle</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">documentTitle</db:synopsisinfo>
<db:synopsisinfo role="setter">setDocumentTitle</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the title of the document parsed from the text.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">documentTitle</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDocumentTitle</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>title</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="lineWrapMode-prop">
<db:title>lineWrapMode : LineWrapMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>LineWrapMode</db:type>
<db:varname>lineWrapMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">lineWrapMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setLineWrapMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the line wrap mode</db:para>
<db:para>The default mode is <db:link xlink:href="qplaintextedit.xml#LineWrapMode-enum">WidgetWidth</db:link> which causes words to be wrapped at the right edge of the text edit. Wrapping occurs at whitespace, keeping whole words intact. If you want wrapping to occur within words use <db:link xlink:href="qplaintextedit.xml#wordWrapMode-prop">setWordWrapMode</db:link>().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qplaintextedit.xml#LineWrapMode-enum">QPlainTextEdit::LineWrapMode</db:link></db:type> <db:emphasis role="bold">lineWrapMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLineWrapMode</db:emphasis>(<db:type><db:link xlink:href="qplaintextedit.xml#LineWrapMode-enum">QPlainTextEdit::LineWrapMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maximumBlockCount-prop">
<db:title>maximumBlockCount : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>maximumBlockCount</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maximumBlockCount</db:synopsisinfo>
<db:synopsisinfo role="setter">setMaximumBlockCount</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the limit for blocks in the document.</db:para>
<db:para>Specifies the maximum number of blocks the document may have. If there are more blocks in the document that specified with this property blocks are removed from the beginning of the document.</db:para>
<db:para>A negative or zero value specifies that the document may contain an unlimited amount of blocks.</db:para>
<db:para>The default value is 0.</db:para>
<db:para>Note that setting this property will apply the limit immediately to the document contents. Setting this property also disables the undo redo history.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maximumBlockCount</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximumBlockCount</db:emphasis>(<db:type>int</db:type> <db:emphasis>maximum</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="overwriteMode-prop">
<db:title>overwriteMode : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>overwriteMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">overwriteMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setOverwriteMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether text entered by the user will overwrite existing text</db:para>
<db:para>As with many text editors, the plain text editor widget can be configured to insert or overwrite existing text with new text entered by the user.</db:para>
<db:para>If this property is true, existing text is overwritten, character-for-character by new text; otherwise, text is inserted at the cursor position, displacing existing text.</db:para>
<db:para>By default, this property is false (new text does not overwrite existing text).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">overwriteMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOverwriteMode</db:emphasis>(<db:type>bool</db:type> <db:emphasis>overwrite</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="placeholderText-prop">
<db:title>[since 5.3] placeholderText : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>placeholderText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">placeholderText</db:synopsisinfo>
<db:synopsisinfo role="setter">setPlaceholderText</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the editor placeholder text</db:para>
<db:para>Setting this property makes the editor display a grayed-out placeholder text as long as the <db:link xlink:href="qplaintextedit.xml#document">document</db:link>() is empty.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>This property was introduced in Qt 5.3.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">placeholderText</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPlaceholderText</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>placeholderText</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#document">document</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="plainText-prop">
<db:title>plainText : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>plainText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">toPlainText</db:synopsisinfo>
<db:synopsisinfo role="setter">setPlainText</db:synopsisinfo>
<db:synopsisinfo role="notifier">textChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property gets and sets the plain text editor's contents. The previous contents are removed and undo/redo history is reset when this property is set. <db:link xlink:href="qplaintextedit.xml#currentCharFormat">currentCharFormat</db:link>() is also reset, unless <db:link xlink:href="qplaintextedit.xml#textCursor">textCursor</db:link>() is already at the beginning of the document.</db:para>
<db:para>By default, for an editor with no contents, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qplaintextedit.xml#toPlainText">toPlainText</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qplaintextedit.xml#setPlainText">setPlainText</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>text</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qplaintextedit.xml#textChanged">textChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="readOnly-prop">
<db:title>readOnly : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>readOnly</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isReadOnly</db:synopsisinfo>
<db:synopsisinfo role="setter">setReadOnly</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the text edit is read-only</db:para>
<db:para>In a read-only text edit the user can only navigate through the text and select text; modifying the text is not possible.</db:para>
<db:para>This property's default is false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isReadOnly</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setReadOnly</db:emphasis>(<db:type>bool</db:type> <db:emphasis>ro</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="tabChangesFocus-prop">
<db:title>tabChangesFocus : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>tabChangesFocus</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">tabChangesFocus</db:synopsisinfo>
<db:synopsisinfo role="setter">setTabChangesFocus</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether <db:guilabel>Tab</db:guilabel> changes focus or is accepted as input</db:para>
<db:para>In some occasions text edits should not allow the user to input tabulators or change indentation using the <db:guilabel>Tab</db:guilabel> key, as this breaks the focus chain. The default is false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">tabChangesFocus</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTabChangesFocus</db:emphasis>(<db:type>bool</db:type> <db:emphasis>b</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="tabStopDistance-prop">
<db:title>[since 5.10] tabStopDistance : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>tabStopDistance</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">tabStopDistance</db:synopsisinfo>
<db:synopsisinfo role="setter">setTabStopDistance</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the tab stop distance in pixels</db:para>
<db:para>By default, this property contains a value of 80.</db:para>
<db:para>This property was introduced in Qt 5.10.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">tabStopDistance</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTabStopDistance</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>distance</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="textInteractionFlags-prop">
<db:title>textInteractionFlags : Qt::TextInteractionFlags</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::TextInteractionFlags</db:type>
<db:varname>textInteractionFlags</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">textInteractionFlags</db:synopsisinfo>
<db:synopsisinfo role="setter">setTextInteractionFlags</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies how the label should interact with user input if it displays text.</db:para>
<db:para>If the flags contain either <db:link xlink:href="qt.xml#TextInteractionFlag-enum">Qt::LinksAccessibleByKeyboard</db:link> or <db:link xlink:href="qt.xml#TextInteractionFlag-enum">Qt::TextSelectableByKeyboard</db:link> then the focus policy is also automatically set to <db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::ClickFocus</db:link>.</db:para>
<db:para>The default value depends on whether the <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> is read-only or editable.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#TextInteractionFlag-enum">Qt::TextInteractionFlags</db:link></db:type> <db:emphasis role="bold">textInteractionFlags</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextInteractionFlags</db:emphasis>(<db:type><db:link xlink:href="qt.xml#TextInteractionFlag-enum">Qt::TextInteractionFlags</db:link></db:type> <db:emphasis>flags</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="undoRedoEnabled-prop">
<db:title>undoRedoEnabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>undoRedoEnabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isUndoRedoEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setUndoRedoEnabled</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether undo and redo are enabled</db:para>
<db:para>Users are only able to undo or redo actions if this property is true, and if there is an action that can be undone (or redone).</db:para>
<db:para>By default, this property is true.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isUndoRedoEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUndoRedoEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="wordWrapMode-prop">
<db:title>wordWrapMode : QTextOption::WrapMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QTextOption::WrapMode</db:type>
<db:varname>wordWrapMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">wordWrapMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setWordWrapMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the mode <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> will use when wrapping text by words</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qtextoption.xml#WrapMode-enum">QTextOption::WrapAtWordBoundaryOrAnywhere</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtextoption.xml#WrapMode-enum">QTextOption::WrapMode</db:link></db:type> <db:emphasis role="bold">wordWrapMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWordWrapMode</db:emphasis>(<db:type><db:link xlink:href="qtextoption.xml#WrapMode-enum">QTextOption::WrapMode</db:link></db:type> <db:emphasis>policy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextoption.xml#WrapMode-enum">QTextOption::WrapMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPlainTextEdit">
<db:title>[explicit] QPlainTextEdit::QPlainTextEdit(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QPlainTextEdit</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlainTextEdit(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QPlainTextEdit-1">
<db:title>[explicit] QPlainTextEdit::QPlainTextEdit(const QString &amp;<db:emphasis>text</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QPlainTextEdit</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlainTextEdit(const QString &amp;text, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> with parent <db:code role="parameter">parent</db:code>. The text edit will display the plain text <db:code role="parameter">text</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPlainTextEdit">
<db:title>[virtual] QPlainTextEdit::~QPlainTextEdit()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPlainTextEdit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPlainTextEdit()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="anchorAt">
<db:title>[since 4.7] QString QPlainTextEdit::anchorAt(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>anchorAt</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString anchorAt(const QPoint &amp;pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the reference of the anchor at position <db:code role="parameter">pos</db:code>, or an empty string if no anchor exists at that point.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
</db:section>
<db:section xml:id="appendHtml">
<db:title>void QPlainTextEdit::appendHtml(const QString &amp;<db:emphasis>html</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendHtml</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>html</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendHtml(const QString &amp;html)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends a new paragraph with <db:code role="parameter">html</db:code> to the end of the text edit.</db:para>
<db:para><db:link xlink:href="qplaintextedit.xml#appendPlainText">appendPlainText</db:link>()</db:para>
</db:section>
<db:section xml:id="appendPlainText">
<db:title>void QPlainTextEdit::appendPlainText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendPlainText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendPlainText(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends a new paragraph with <db:code role="parameter">text</db:code> to the end of the text edit.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#appendHtml">appendHtml</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockBoundingGeometry">
<db:title>[protected] QRectF QPlainTextEdit::blockBoundingGeometry(const QTextBlock &amp;<db:emphasis>block</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>blockBoundingGeometry</db:methodname>
<db:methodparam>
<db:type>const QTextBlock &amp;</db:type>
<db:parameter>block</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF blockBoundingGeometry(const QTextBlock &amp;block) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding rectangle of the text <db:code role="parameter">block</db:code> in content coordinates. Translate the rectangle with the <db:link xlink:href="qplaintextedit.xml#contentOffset">contentOffset</db:link>() to get visual coordinates on the viewport.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#firstVisibleBlock">firstVisibleBlock</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#blockBoundingRect">blockBoundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockBoundingRect">
<db:title>[protected] QRectF QPlainTextEdit::blockBoundingRect(const QTextBlock &amp;<db:emphasis>block</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>blockBoundingRect</db:methodname>
<db:methodparam>
<db:type>const QTextBlock &amp;</db:type>
<db:parameter>block</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF blockBoundingRect(const QTextBlock &amp;block) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding rectangle of the text <db:code role="parameter">block</db:code> in the block's own coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#blockBoundingGeometry">blockBoundingGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockCountChanged">
<db:title>void QPlainTextEdit::blockCountChanged(int <db:emphasis>newBlockCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>blockCountChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>newBlockCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void blockCountChanged(int newBlockCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the block count changes. The new block count is passed in <db:code role="parameter">newBlockCount</db:code>.</db:para>
</db:section>
<db:section xml:id="canInsertFromMimeData">
<db:title>[virtual protected] bool QPlainTextEdit::canInsertFromMimeData(const QMimeData *<db:emphasis>source</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canInsertFromMimeData</db:methodname>
<db:methodparam>
<db:type>const QMimeData *</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canInsertFromMimeData(const QMimeData *source) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns true if the contents of the MIME data object, specified by <db:code role="parameter">source</db:code>, can be decoded and inserted into the document. It is called for example when during a drag operation the mouse enters this widget and it is necessary to determine whether it is possible to accept the drag.</db:para>
</db:section>
<db:section xml:id="canPaste">
<db:title>bool QPlainTextEdit::canPaste() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canPaste</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canPaste() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether text can be pasted from the clipboard into the textedit.</db:para>
</db:section>
<db:section xml:id="centerCursor">
<db:title>void QPlainTextEdit::centerCursor()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>centerCursor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void centerCursor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scrolls the document in order to center the cursor vertically.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#ensureCursorVisible">ensureCursorVisible</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#centerOnScroll-prop">centerOnScroll</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QPlainTextEdit::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>changeEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changeEvent(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qframe.xml#changeEvent" role="function">QFrame::changeEvent(QEvent *ev)</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QPlainTextEdit::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deletes all the text in the text edit.</db:para>
<db:para>Notes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The undo/redo history is also cleared.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qplaintextedit.xml#currentCharFormat">currentCharFormat</db:link>() is reset, unless <db:link xlink:href="qplaintextedit.xml#textCursor">textCursor</db:link>() is already at the beginning of the document.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#cut">cut</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#setPlainText">setPlainText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentOffset">
<db:title>[protected] QPointF QPlainTextEdit::contentOffset() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>contentOffset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF contentOffset() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the content's origin in viewport coordinates.</db:para>
<db:para>The origin of the content of a plain text edit is always the top left corner of the first visible text block. The content offset is different from (0,0) when the text has been scrolled horizontally, or when the first visible block has been scrolled partially off the screen, i.e. the visible text does not start with the first line of the first visible block, or when the first visible block is the very first block and the editor displays a margin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#firstVisibleBlock">firstVisibleBlock</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractscrollarea.xml#horizontalScrollBar">horizontalScrollBar</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractscrollarea.xml#verticalScrollBar">verticalScrollBar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QPlainTextEdit::contextMenuEvent(QContextMenuEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>contextMenuEvent</db:methodname>
<db:methodparam>
<db:type>QContextMenuEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void contextMenuEvent(QContextMenuEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#contextMenuEvent" role="function">QAbstractScrollArea::contextMenuEvent(QContextMenuEvent *e)</db:link>.</db:para>
<db:para>Shows the standard context menu created with <db:link xlink:href="qplaintextedit.xml#createStandardContextMenu">createStandardContextMenu</db:link>().</db:para>
<db:para>If you do not want the text edit to have a context menu, you can set its <db:link xlink:href="qwidget.xml#contextMenuPolicy-prop">contextMenuPolicy</db:link> to <db:link xlink:href="qt.xml#ContextMenuPolicy-enum">Qt::NoContextMenu</db:link>. If you want to customize the context menu, reimplement this function. If you want to extend the standard context menu, reimplement this function, call <db:link xlink:href="qplaintextedit.xml#createStandardContextMenu">createStandardContextMenu</db:link>() and extend the menu returned.</db:para>
<db:para>Information about the event is passed in the <db:code role="parameter">event</db:code> object.</db:para>
<db:programlisting language="cpp">void MyQPlainTextEdit::contextMenuEvent(QContextMenuEvent *event)
{
    QMenu *menu = createStandardContextMenu();
    menu-&amp;gt;addAction(tr(&quot;My Menu Item&quot;));
    //...
    menu-&amp;gt;exec(event-&amp;gt;globalPos());
    delete menu;
}
</db:programlisting>
</db:section>
<db:section xml:id="copy">
<db:title>void QPlainTextEdit::copy()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>copy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void copy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies any selected text to the clipboard.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#copyAvailable">copyAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copyAvailable">
<db:title>void QPlainTextEdit::copyAvailable(bool <db:emphasis>yes</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>copyAvailable</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>yes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void copyAvailable(bool yes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when text is selected or de-selected in the text edit.</db:para>
<db:para>When text is selected this signal will be emitted with <db:code role="parameter">yes</db:code> set to true. If no text has been selected or if the selected text is de-selected this signal is emitted with <db:code role="parameter">yes</db:code> set to false.</db:para>
<db:para>If <db:code role="parameter">yes</db:code> is true then <db:link xlink:href="qplaintextedit.xml#copy">copy</db:link>() can be used to copy the selection to the clipboard. If <db:code role="parameter">yes</db:code> is false then <db:link xlink:href="qplaintextedit.xml#copy">copy</db:link>() does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#selectionChanged">selectionChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createMimeDataFromSelection">
<db:title>[virtual protected] QMimeData *QPlainTextEdit::createMimeDataFromSelection() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QMimeData *</db:type>
<db:methodname>createMimeDataFromSelection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMimeData * createMimeDataFromSelection() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns a new MIME data object to represent the contents of the text edit's current selection. It is called when the selection needs to be encapsulated into a new <db:link xlink:href="qmimedata.xml">QMimeData</db:link> object; for example, when a drag and drop operation is started, or when data is copied to the clipboard.</db:para>
<db:para>If you reimplement this function, note that the ownership of the returned <db:link xlink:href="qmimedata.xml">QMimeData</db:link> object is passed to the caller. The selection can be retrieved by using the <db:link xlink:href="qplaintextedit.xml#textCursor">textCursor</db:link>() function.</db:para>
</db:section>
<db:section xml:id="createStandardContextMenu">
<db:title>QMenu *QPlainTextEdit::createStandardContextMenu()</db:title>
<db:methodsynopsis>
<db:type>QMenu *</db:type>
<db:methodname>createStandardContextMenu</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMenu * createStandardContextMenu()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function creates the standard context menu which is shown when the user clicks on the text edit with the right mouse button. It is called from the default <db:link xlink:href="qplaintextedit.xml#contextMenuEvent">contextMenuEvent</db:link>() handler. The popup menu's ownership is transferred to the caller.</db:para>
<db:para>We recommend that you use the createStandardContextMenu(<db:link xlink:href="qpoint.xml">QPoint</db:link>) version instead which will enable the actions that are sensitive to where the user clicked.</db:para>
</db:section>
<db:section xml:id="createStandardContextMenu-1">
<db:title>[since 5.5] QMenu *QPlainTextEdit::createStandardContextMenu(const QPoint &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMenu *</db:type>
<db:methodname>createStandardContextMenu</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMenu * createStandardContextMenu(const QPoint &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function creates the standard context menu which is shown when the user clicks on the text edit with the right mouse button. It is called from the default <db:link xlink:href="qplaintextedit.xml#contextMenuEvent">contextMenuEvent</db:link>() handler and it takes the <db:code role="parameter">position</db:code> in document coordinates where the mouse click was. This can enable actions that are sensitive to the position where the user clicked. The popup menu's ownership is transferred to the caller.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="currentCharFormat">
<db:title>QTextCharFormat QPlainTextEdit::currentCharFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextCharFormat</db:type>
<db:methodname>currentCharFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCharFormat currentCharFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the char format that is used when inserting new text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#setCurrentCharFormat">setCurrentCharFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorForPosition">
<db:title>QTextCursor QPlainTextEdit::cursorForPosition(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextCursor</db:type>
<db:methodname>cursorForPosition</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCursor cursorForPosition(const QPoint &amp;pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>returns a <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> at position <db:code role="parameter">pos</db:code> (in viewport coordinates).</db:para>
</db:section>
<db:section xml:id="cursorPositionChanged">
<db:title>void QPlainTextEdit::cursorPositionChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cursorPositionChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cursorPositionChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the position of the cursor changed.</db:para>
</db:section>
<db:section xml:id="cursorRect">
<db:title>QRect QPlainTextEdit::cursorRect(const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>cursorRect</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect cursorRect(const QTextCursor &amp;cursor) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>returns a rectangle (in viewport coordinates) that includes the <db:code role="parameter">cursor</db:code>.</db:para>
</db:section>
<db:section xml:id="cursorRect-1">
<db:title>QRect QPlainTextEdit::cursorRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>cursorRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect cursorRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>returns a rectangle (in viewport coordinates) that includes the cursor of the text edit.</db:para>
</db:section>
<db:section xml:id="cut">
<db:title>void QPlainTextEdit::cut()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cut</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cut()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies the selected text to the clipboard and deletes it from the text edit.</db:para>
<db:para>If there is no selected text nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#copy">copy</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#paste">paste</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="document">
<db:title>QTextDocument *QPlainTextEdit::document() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextDocument *</db:type>
<db:methodname>document</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextDocument * document() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the underlying document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#setDocument">setDocument</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[override virtual protected] void QPlainTextEdit::dragEnterEvent(QDragEnterEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragEnterEvent</db:methodname>
<db:methodparam>
<db:type>QDragEnterEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragEnterEvent(QDragEnterEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragEnterEvent" role="function">QAbstractScrollArea::dragEnterEvent(QDragEnterEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[override virtual protected] void QPlainTextEdit::dragLeaveEvent(QDragLeaveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragLeaveEvent</db:methodname>
<db:methodparam>
<db:type>QDragLeaveEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragLeaveEvent(QDragLeaveEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragLeaveEvent" role="function">QAbstractScrollArea::dragLeaveEvent(QDragLeaveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[override virtual protected] void QPlainTextEdit::dragMoveEvent(QDragMoveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragMoveEvent</db:methodname>
<db:methodparam>
<db:type>QDragMoveEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragMoveEvent(QDragMoveEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragMoveEvent" role="function">QAbstractScrollArea::dragMoveEvent(QDragMoveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QPlainTextEdit::dropEvent(QDropEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dropEvent</db:methodname>
<db:methodparam>
<db:type>QDropEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dropEvent(QDropEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dropEvent" role="function">QAbstractScrollArea::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="ensureCursorVisible">
<db:title>void QPlainTextEdit::ensureCursorVisible()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ensureCursorVisible</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void ensureCursorVisible()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Ensures that the cursor is visible by scrolling the text edit if necessary.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#centerCursor">centerCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#centerOnScroll-prop">centerOnScroll</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extraSelections">
<db:title>QList&lt;QTextEdit::ExtraSelection&gt; QPlainTextEdit::extraSelections() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QTextEdit::ExtraSelection&gt;</db:type>
<db:methodname>extraSelections</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QTextEdit::ExtraSelection&gt; extraSelections() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns previously set extra selections.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#setExtraSelections">setExtraSelections</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="find">
<db:title>bool QPlainTextEdit::find(const QString &amp;<db:emphasis>exp</db:emphasis>, QTextDocument::FindFlags <db:emphasis>options</db:emphasis> = QTextDocument::FindFlags())</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>find</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>exp</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextDocument::FindFlags</db:type>
<db:parameter>options</db:parameter>
<db:initializer>QTextDocument::FindFlags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool find(const QString &amp;exp, QTextDocument::FindFlags options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Finds the next occurrence of the string, <db:code role="parameter">exp</db:code>, using the given <db:code role="parameter">options</db:code>. Returns true if <db:code role="parameter">exp</db:code> was found and changes the cursor to select the match; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="find-1">
<db:title>[since 5.3] bool QPlainTextEdit::find(const QRegExp &amp;<db:emphasis>exp</db:emphasis>, QTextDocument::FindFlags <db:emphasis>options</db:emphasis> = QTextDocument::FindFlags())</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>find</db:methodname>
<db:methodparam>
<db:type>const QRegExp &amp;</db:type>
<db:parameter>exp</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextDocument::FindFlags</db:type>
<db:parameter>options</db:parameter>
<db:initializer>QTextDocument::FindFlags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool find(const QRegExp &amp;exp, QTextDocument::FindFlags options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Finds the next occurrence, matching the regular expression, <db:code role="parameter">exp</db:code>, using the given <db:code role="parameter">options</db:code>. The <db:link xlink:href="qtextdocument.xml#FindFlag-enum">QTextDocument::FindCaseSensitively</db:link> option is ignored for this overload, use <db:link xlink:href="qregexp.xml#caseSensitivity">QRegExp::caseSensitivity</db:link> instead.</db:para>
<db:para>Returns true if a match was found and changes the cursor to select the match; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="find-2">
<db:title>[since 5.13] bool QPlainTextEdit::find(const QRegularExpression &amp;<db:emphasis>exp</db:emphasis>, QTextDocument::FindFlags <db:emphasis>options</db:emphasis> = QTextDocument::FindFlags())</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>find</db:methodname>
<db:methodparam>
<db:type>const QRegularExpression &amp;</db:type>
<db:parameter>exp</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextDocument::FindFlags</db:type>
<db:parameter>options</db:parameter>
<db:initializer>QTextDocument::FindFlags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool find(const QRegularExpression &amp;exp, QTextDocument::FindFlags options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Finds the next occurrence, matching the regular expression, <db:code role="parameter">exp</db:code>, using the given <db:code role="parameter">options</db:code>. The <db:link xlink:href="qtextdocument.xml#FindFlag-enum">QTextDocument::FindCaseSensitively</db:link> option is ignored for this overload, use <db:link xlink:href="qregularexpression.xml#PatternOption-enum">QRegularExpression::CaseInsensitiveOption</db:link> instead.</db:para>
<db:para>Returns true if a match was found and changes the cursor to select the match; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
</db:section>
<db:section xml:id="firstVisibleBlock">
<db:title>[protected] QTextBlock QPlainTextEdit::firstVisibleBlock() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextBlock</db:type>
<db:methodname>firstVisibleBlock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBlock firstVisibleBlock() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the first visible block.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#blockBoundingRect">blockBoundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QPlainTextEdit::focusInEvent(QFocusEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusInEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusInEvent(QFocusEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusNextPrevChild">
<db:title>[override virtual protected] bool QPlainTextEdit::focusNextPrevChild(bool <db:emphasis>next</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>focusNextPrevChild</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>next</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool focusNextPrevChild(bool next) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusNextPrevChild" role="function">QWidget::focusNextPrevChild(bool next)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QPlainTextEdit::focusOutEvent(QFocusEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusOutEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusOutEvent(QFocusEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="getPaintContext">
<db:title>[protected] QAbstractTextDocumentLayout::PaintContext QPlainTextEdit::getPaintContext() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractTextDocumentLayout::PaintContext</db:type>
<db:methodname>getPaintContext</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractTextDocumentLayout::PaintContext getPaintContext() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paint context for the <db:link xlink:href="qabstractscrollarea.xml#viewport">viewport</db:link>(), useful only when reimplementing <db:link xlink:href="qplaintextedit.xml#paintEvent">paintEvent</db:link>().</db:para>
</db:section>
<db:section xml:id="inputMethodEvent">
<db:title>[override virtual protected] void QPlainTextEdit::inputMethodEvent(QInputMethodEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>inputMethodEvent</db:methodname>
<db:methodparam>
<db:type>QInputMethodEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void inputMethodEvent(QInputMethodEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodEvent" role="function">QWidget::inputMethodEvent(QInputMethodEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="inputMethodQuery">
<db:title>[override virtual] QVariant QPlainTextEdit::inputMethodQuery(Qt::InputMethodQuery <db:emphasis>property</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>inputMethodQuery</db:methodname>
<db:methodparam>
<db:type>Qt::InputMethodQuery</db:type>
<db:parameter>property</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant inputMethodQuery(Qt::InputMethodQuery property) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodQuery" role="function">QWidget::inputMethodQuery(Qt::InputMethodQuery query) const</db:link>.</db:para>
</db:section>
<db:section xml:id="insertFromMimeData">
<db:title>[virtual protected] void QPlainTextEdit::insertFromMimeData(const QMimeData *<db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>insertFromMimeData</db:methodname>
<db:methodparam>
<db:type>const QMimeData *</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertFromMimeData(const QMimeData *source)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function inserts the contents of the MIME data object, specified by <db:code role="parameter">source</db:code>, into the text edit at the current cursor position. It is called whenever text is inserted as the result of a clipboard paste operation, or when the text edit accepts data from a drag and drop operation.</db:para>
</db:section>
<db:section xml:id="insertPlainText">
<db:title>void QPlainTextEdit::insertPlainText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertPlainText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertPlainText(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience slot that inserts <db:code role="parameter">text</db:code> at the current cursor position.</db:para>
<db:para>It is equivalent to</db:para>
<db:programlisting language="cpp">edit-&amp;gt;textCursor().insertText(text);
</db:programlisting>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QPlainTextEdit::keyPressEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyPressEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyPressEvent(QKeyEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#keyPressEvent" role="function">QAbstractScrollArea::keyPressEvent(QKeyEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[override virtual protected] void QPlainTextEdit::keyReleaseEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyReleaseEvent(QKeyEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyReleaseEvent" role="function">QWidget::keyReleaseEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="loadResource">
<db:title>[virtual] QVariant QPlainTextEdit::loadResource(int <db:emphasis>type</db:emphasis>, const QUrl &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>loadResource</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant loadResource(int type, const QUrl &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the resource specified by the given <db:code role="parameter">type</db:code> and <db:code role="parameter">name</db:code>.</db:para>
<db:para>This function is an extension of <db:link xlink:href="qtextdocument.xml#loadResource">QTextDocument::loadResource</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#loadResource">QTextDocument::loadResource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mergeCurrentCharFormat">
<db:title>void QPlainTextEdit::mergeCurrentCharFormat(const QTextCharFormat &amp;<db:emphasis>modifier</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mergeCurrentCharFormat</db:methodname>
<db:methodparam>
<db:type>const QTextCharFormat &amp;</db:type>
<db:parameter>modifier</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mergeCurrentCharFormat(const QTextCharFormat &amp;modifier)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Merges the properties specified in <db:code role="parameter">modifier</db:code> into the current character format by calling <db:link xlink:href="qtextcursor.xml#mergeCharFormat">QTextCursor::mergeCharFormat</db:link> on the editor's cursor. If the editor has a selection then the properties of <db:code role="parameter">modifier</db:code> are directly applied to the selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#mergeCharFormat">QTextCursor::mergeCharFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modificationChanged">
<db:title>void QPlainTextEdit::modificationChanged(bool <db:emphasis>changed</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>modificationChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>changed</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void modificationChanged(bool changed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the content of the document changes in a way that affects the modification state. If <db:code role="parameter">changed</db:code> is true, the document has been modified; otherwise it is false.</db:para>
<db:para>For example, calling setModified(false) on a document and then inserting text causes the signal to get emitted. If you undo that operation, causing the document to return to its original unmodified state, the signal will get emitted again.</db:para>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[override virtual protected] void QPlainTextEdit::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseDoubleClickEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseDoubleClickEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseDoubleClickEvent" role="function">QAbstractScrollArea::mouseDoubleClickEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QPlainTextEdit::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseMoveEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseMoveEvent" role="function">QAbstractScrollArea::mouseMoveEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QPlainTextEdit::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mousePressEvent" role="function">QAbstractScrollArea::mousePressEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QPlainTextEdit::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseReleaseEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseReleaseEvent" role="function">QAbstractScrollArea::mouseReleaseEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="moveCursor">
<db:title>void QPlainTextEdit::moveCursor(QTextCursor::MoveOperation <db:emphasis>operation</db:emphasis>, QTextCursor::MoveMode <db:emphasis>mode</db:emphasis> = QTextCursor::MoveAnchor)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>moveCursor</db:methodname>
<db:methodparam>
<db:type>QTextCursor::MoveOperation</db:type>
<db:parameter>operation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextCursor::MoveMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>QTextCursor::MoveAnchor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveCursor(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the cursor by performing the given <db:code role="parameter">operation</db:code>.</db:para>
<db:para>If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qtextcursor.xml#MoveMode-enum">QTextCursor::KeepAnchor</db:link>, the cursor selects the text it moves over. This is the same effect that the user achieves when they hold down the Shift key and move the cursor with the cursor keys.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml#movePosition">QTextCursor::movePosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QPlainTextEdit::paintEvent(QPaintEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#paintEvent" role="function">QAbstractScrollArea::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paste">
<db:title>void QPlainTextEdit::paste()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>paste</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paste()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Pastes the text from the clipboard into the text edit at the current cursor position.</db:para>
<db:para>If there is no text in the clipboard nothing happens.</db:para>
<db:para>To change the behavior of this function, i.e. to modify what <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> can paste and how it is being pasted, reimplement the virtual <db:link xlink:href="qplaintextedit.xml#canInsertFromMimeData">canInsertFromMimeData</db:link>() and <db:link xlink:href="qplaintextedit.xml#insertFromMimeData">insertFromMimeData</db:link>() functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#cut">cut</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#copy">copy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="print">
<db:title>void QPlainTextEdit::print(QPagedPaintDevice *<db:emphasis>printer</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>print</db:methodname>
<db:methodparam>
<db:type>QPagedPaintDevice *</db:type>
<db:parameter>printer</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void print(QPagedPaintDevice *printer) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to print the text edit's document to the given <db:code role="parameter">printer</db:code>. This is equivalent to calling the print method on the document directly except that this function also supports <db:link xlink:href="qprinter.xml#PrintRange-enum">QPrinter::Selection</db:link> as print range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#print">QTextDocument::print</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redo">
<db:title>void QPlainTextEdit::redo()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>redo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void redo()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Redoes the last operation.</db:para>
<db:para>If there is no operation to redo, i.e. there is no redo step in the undo/redo history, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#undo">undo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redoAvailable">
<db:title>void QPlainTextEdit::redoAvailable(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>redoAvailable</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>available</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void redoAvailable(bool available)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever redo operations become available (<db:code role="parameter">available</db:code> is true) or unavailable (<db:code role="parameter">available</db:code> is false).</db:para>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QPlainTextEdit::resizeEvent(QResizeEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeEvent</db:methodname>
<db:methodparam>
<db:type>QResizeEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeEvent(QResizeEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#resizeEvent" role="function">QAbstractScrollArea::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="scrollContentsBy">
<db:title>[override virtual protected] void QPlainTextEdit::scrollContentsBy(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>scrollContentsBy</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scrollContentsBy(int dx, int dy) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#scrollContentsBy" role="function">QAbstractScrollArea::scrollContentsBy(int dx, int dy)</db:link>.</db:para>
</db:section>
<db:section xml:id="selectAll">
<db:title>void QPlainTextEdit::selectAll()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectAll</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectAll()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Selects all text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#copy">copy</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#cut">cut</db:link>()</db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#textCursor">textCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionChanged">
<db:title>void QPlainTextEdit::selectionChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectionChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectionChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the selection changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#copyAvailable">copyAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentCharFormat">
<db:title>void QPlainTextEdit::setCurrentCharFormat(const QTextCharFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCurrentCharFormat</db:methodname>
<db:methodparam>
<db:type>const QTextCharFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCurrentCharFormat(const QTextCharFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the char format that is be used when inserting new text to <db:code role="parameter">format</db:code> by calling <db:link xlink:href="qtextcursor.xml#setCharFormat">QTextCursor::setCharFormat</db:link>() on the editor's cursor. If the editor has a selection then the char format is directly applied to the selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#currentCharFormat">currentCharFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDocument">
<db:title>void QPlainTextEdit::setDocument(QTextDocument *<db:emphasis>document</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDocument</db:methodname>
<db:methodparam>
<db:type>QTextDocument *</db:type>
<db:parameter>document</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDocument(QTextDocument *document)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes <db:code role="parameter">document</db:code> the new document of the text editor.</db:para>
<db:para>The parent <db:link xlink:href="qobject.xml">QObject</db:link> of the provided document remains the owner of the object. If the current document is a child of the text editor, then it is deleted.</db:para>
<db:para>The document must have a document layout that inherits <db:link xlink:href="qplaintextdocumentlayout.xml">QPlainTextDocumentLayout</db:link> (see <db:link xlink:href="qtextdocument.xml#setDocumentLayout">QTextDocument::setDocumentLayout</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#document">document</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setExtraSelections">
<db:title>void QPlainTextEdit::setExtraSelections(const QList&lt;QTextEdit::ExtraSelection&gt; &amp;<db:emphasis>selections</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setExtraSelections</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QTextEdit::ExtraSelection&gt; &amp;</db:type>
<db:parameter>selections</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setExtraSelections(const QList&lt;QTextEdit::ExtraSelection&gt; &amp;selections)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function allows temporarily marking certain regions in the document with a given color, specified as <db:code role="parameter">selections</db:code>. This can be useful for example in a programming editor to mark a whole line of text with a given background color to indicate the existence of a breakpoint.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextedit-extraselection.xml">QTextEdit::ExtraSelection</db:link></db:member>
<db:member><db:link xlink:href="qplaintextedit.xml#extraSelections">extraSelections</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPlainText">
<db:title>void QPlainTextEdit::setPlainText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPlainText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">plainText</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPlainText(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the text of the text edit to the string <db:code role="parameter">text</db:code>. Any previous text is removed.</db:para>
<db:para><db:code role="parameter">text</db:code> is interpreted as plain text.</db:para>
<db:para>Notes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The undo/redo history is also cleared.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qplaintextedit.xml#currentCharFormat">currentCharFormat</db:link>() is reset, unless <db:link xlink:href="qplaintextedit.xml#textCursor">textCursor</db:link>() is already at the beginning of the document.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qplaintextedit.xml#plainText-prop">plainText</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#toPlainText">toPlainText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextCursor">
<db:title>void QPlainTextEdit::setTextCursor(const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTextCursor</db:methodname>
<db:methodparam>
<db:type>const QTextCursor &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTextCursor(const QTextCursor &amp;cursor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the visible <db:code role="parameter">cursor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#textCursor">textCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QPlainTextEdit::showEvent(<db:emphasis>QShowEvent *</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>showEvent</db:methodname>
<db:methodparam>
<db:type>QShowEvent *</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showEvent(QShowEvent *) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="textChanged">
<db:title>void QPlainTextEdit::textChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>textChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">plainText</db:synopsisinfo>
<db:synopsisinfo role="signature">void textChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the document's content changes; for example, when text is inserted or deleted, or when formatting is applied.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qplaintextedit.xml#plainText-prop">plainText</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="textCursor">
<db:title>QTextCursor QPlainTextEdit::textCursor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextCursor</db:type>
<db:methodname>textCursor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCursor textCursor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of the <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> that represents the currently visible cursor. Note that changes on the returned cursor do not affect <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link>'s cursor; use <db:link xlink:href="qplaintextedit.xml#setTextCursor">setTextCursor</db:link>() to update the visible cursor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#setTextCursor">setTextCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toPlainText">
<db:title>QString QPlainTextEdit::toPlainText() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toPlainText</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">plainText</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toPlainText() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text of the text edit as plain text.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qplaintextedit.xml#plainText-prop">plainText</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#setPlainText">QPlainTextEdit::setPlainText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undo">
<db:title>void QPlainTextEdit::undo()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>undo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void undo()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Undoes the last operation.</db:para>
<db:para>If there is no operation to undo, i.e. there is no undo step in the undo/redo history, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#redo">redo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undoAvailable">
<db:title>void QPlainTextEdit::undoAvailable(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>undoAvailable</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>available</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void undoAvailable(bool available)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever undo operations become available (<db:code role="parameter">available</db:code> is true) or unavailable (<db:code role="parameter">available</db:code> is false).</db:para>
</db:section>
<db:section xml:id="updateRequest">
<db:title>void QPlainTextEdit::updateRequest(const QRect &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>updateRequest</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateRequest(const QRect &amp;rect, int dy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the text document needs an update of the specified <db:code role="parameter">rect</db:code>. If the text is scrolled, <db:code role="parameter">rect</db:code> will cover the entire viewport area. If the text is scrolled vertically, <db:code role="parameter">dy</db:code> carries the amount of pixels the viewport was scrolled.</db:para>
<db:para>The purpose of the signal is to support extra widgets in plain text edit subclasses that e.g. show line numbers, breakpoints, or other extra information.</db:para>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QPlainTextEdit::wheelEvent(QWheelEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>wheelEvent</db:methodname>
<db:methodparam>
<db:type>QWheelEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void wheelEvent(QWheelEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#wheelEvent" role="function">QAbstractScrollArea::wheelEvent(QWheelEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="zoomIn">
<db:title>void QPlainTextEdit::zoomIn(int <db:emphasis>range</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>zoomIn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>range</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void zoomIn(int range)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Zooms in on the text by making the base font size <db:code role="parameter">range</db:code> points larger and recalculating all font sizes to be the new size. This does not change the size of any images.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#zoomOut">zoomOut</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="zoomOut">
<db:title>void QPlainTextEdit::zoomOut(int <db:emphasis>range</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>zoomOut</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>range</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void zoomOut(int range)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Zooms out on the text by making the base font size <db:code role="parameter">range</db:code> points smaller and recalculating all font sizes to be the new size. This does not change the size of any images.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaintextedit.xml#zoomIn">zoomIn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QPlainTextEdit</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-property-documentation">
<db:title>Obsolete Property Documentation</db:title>
<db:section xml:id="tabStopWidth-prop">
<db:title>tabStopWidth : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>tabStopWidth</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">tabStopWidth</db:synopsisinfo>
<db:synopsisinfo role="setter">setTabStopWidth</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This property holds the tab stop width in pixels in Qt 5.10. Use <db:link xlink:href="qplaintextedit.xml#tabStopDistance-prop">tabStopDistance</db:link> instead.</db:para>
<db:para>By default, this property contains a value of 80.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">tabStopWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTabStopWidth</db:emphasis>(<db:type>int</db:type> <db:emphasis>width</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:section>
</db:article>
