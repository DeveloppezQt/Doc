<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Blocking Master Example</db:title>
<db:productname>QtSerialPort</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Port Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to use the synchronous API of <db:link xlink:href="qserialport.xml">QSerialPort</db:link> in a worker thread.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2012 Denis Shienkov &amp;lt;denis.shienkov@gmail.com&amp;gt;
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtSerialPort module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;dialog.h&quot;

#include &amp;lt;QComboBox&amp;gt;
#include &amp;lt;QGridLayout&amp;gt;
#include &amp;lt;QLabel&amp;gt;
#include &amp;lt;QLineEdit&amp;gt;
#include &amp;lt;QPushButton&amp;gt;
#include &amp;lt;QSerialPortInfo&amp;gt;
#include &amp;lt;QSpinBox&amp;gt;

Dialog::Dialog(QWidget *parent) :
    QDialog(parent),
    m_serialPortLabel(new QLabel(tr(&quot;Serial port:&quot;))),
    m_serialPortComboBox(new QComboBox),
    m_waitResponseLabel(new QLabel(tr(&quot;Wait response, msec:&quot;))),
    m_waitResponseSpinBox(new QSpinBox),
    m_requestLabel(new QLabel(tr(&quot;Request:&quot;))),
    m_requestLineEdit(new QLineEdit(tr(&quot;Who are you?&quot;))),
    m_trafficLabel(new QLabel(tr(&quot;No traffic.&quot;))),
    m_statusLabel(new QLabel(tr(&quot;Status: Not running.&quot;))),
    m_runButton(new QPushButton(tr(&quot;Start&quot;)))
{
    const auto infos = QSerialPortInfo::availablePorts();
    for (const QSerialPortInfo &amp;amp;info : infos)
        m_serialPortComboBox-&amp;gt;addItem(info.portName());

    m_waitResponseSpinBox-&amp;gt;setRange(0, 10000);
    m_waitResponseSpinBox-&amp;gt;setValue(1000);

    auto mainLayout = new QGridLayout;
    mainLayout-&amp;gt;addWidget(m_serialPortLabel, 0, 0);
    mainLayout-&amp;gt;addWidget(m_serialPortComboBox, 0, 1);
    mainLayout-&amp;gt;addWidget(m_waitResponseLabel, 1, 0);
    mainLayout-&amp;gt;addWidget(m_waitResponseSpinBox, 1, 1);
    mainLayout-&amp;gt;addWidget(m_runButton, 0, 2, 2, 1);
    mainLayout-&amp;gt;addWidget(m_requestLabel, 2, 0);
    mainLayout-&amp;gt;addWidget(m_requestLineEdit, 2, 1, 1, 3);
    mainLayout-&amp;gt;addWidget(m_trafficLabel, 3, 0, 1, 4);
    mainLayout-&amp;gt;addWidget(m_statusLabel, 4, 0, 1, 5);
    setLayout(mainLayout);

    setWindowTitle(tr(&quot;Blocking Master&quot;));
    m_serialPortComboBox-&amp;gt;setFocus();

    connect(m_runButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Dialog::transaction);
    connect(&amp;amp;m_thread, &amp;amp;MasterThread::response, this, &amp;amp;Dialog::showResponse);
    connect(&amp;amp;m_thread, &amp;amp;MasterThread::error, this, &amp;amp;Dialog::processError);
    connect(&amp;amp;m_thread, &amp;amp;MasterThread::timeout, this, &amp;amp;Dialog::processTimeout);
}

void Dialog::transaction()
{
    setControlsEnabled(false);
    m_statusLabel-&amp;gt;setText(tr(&quot;Status: Running, connected to port %1.&quot;)
                           .arg(m_serialPortComboBox-&amp;gt;currentText()));
    m_thread.transaction(m_serialPortComboBox-&amp;gt;currentText(),
                         m_waitResponseSpinBox-&amp;gt;value(),
                         m_requestLineEdit-&amp;gt;text());
}

void Dialog::showResponse(const QString &amp;amp;s)
{
    setControlsEnabled(true);
    m_trafficLabel-&amp;gt;setText(tr(&quot;Traffic, transaction #%1:&quot;
                               &quot;\n\r-request: %2&quot;
                               &quot;\n\r-response: %3&quot;)
                            .arg(++m_transactionCount)
                            .arg(m_requestLineEdit-&amp;gt;text())
                            .arg(s));
}

void Dialog::processError(const QString &amp;amp;s)
{
    setControlsEnabled(true);
    m_statusLabel-&amp;gt;setText(tr(&quot;Status: Not running, %1.&quot;).arg(s));
    m_trafficLabel-&amp;gt;setText(tr(&quot;No traffic.&quot;));
}

void Dialog::processTimeout(const QString &amp;amp;s)
{
    setControlsEnabled(true);
    m_statusLabel-&amp;gt;setText(tr(&quot;Status: Running, %1.&quot;).arg(s));
    m_trafficLabel-&amp;gt;setText(tr(&quot;No traffic.&quot;));
}

void Dialog::setControlsEnabled(bool enable)
{
    m_runButton-&amp;gt;setEnabled(enable);
    m_serialPortComboBox-&amp;gt;setEnabled(enable);
    m_waitResponseSpinBox-&amp;gt;setEnabled(enable);
    m_requestLineEdit-&amp;gt;setEnabled(enable);
}

</db:programlisting>
</db:article>
