<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Image Formats</db:title>
<db:productname>QtImageFormats</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Image Formats Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Image Formats module provides support for extra image file formats.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The core Qt Gui library by default supports reading and writing image files of the most common file formats: <db:code>PNG</db:code>, <db:code>JPEG</db:code>, <db:code>BMP</db:code>, <db:code>GIF</db:code> and a few more, ref. <db:link xlink:href="qimage.xml#reading-and-writing-image-files">Reading and Writing Image Files</db:link>. The Qt Image Formats add-on module provides optional support for other image file formats.</db:para>
<db:para>The file format support is provided transparently, through plugins for Qt's image I/O system. As such, this module provides no API of its own. Instead, the functionality is accessed in the same way as other image I/O in Qt: through <db:link xlink:href="qimage.xml#load">QImage::load</db:link>() and <db:link xlink:href="qimage.xml#save">QImage::save</db:link>(). Or, for more detailed control, through <db:link xlink:href="qimagereader.xml">QImageReader</db:link> and <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>.</db:para>
<db:section xml:id="the-image-i-o-plugins">
<db:title>The Image I/O Plugins</db:title>
<db:para>The actual coding and decoding of the file format is done by a codec library. The codec can be Qt or third party code. In case of a third party codec, the build process will look for it among the system libraries. If not found, it may fall back on using a bundled copy (in <db:code>src/3rdparty</db:code>).</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
<db:th>
<db:para>Support</db:para>
</db:th>
<db:th>
<db:para>3rd Party Codec</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>DDS</db:para>
</db:td>
<db:td>
<db:para>Direct Draw Surface</db:para>
</db:td>
<db:td>
<db:para>Read/write</db:para>
</db:td>
<db:td>
<db:para>No</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ICNS</db:para>
</db:td>
<db:td>
<db:para>Apple Icon Image</db:para>
</db:td>
<db:td>
<db:para>Read/write</db:para>
</db:td>
<db:td>
<db:para>No</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>JP2</db:para>
</db:td>
<db:td>
<db:para>Joint Photographic Experts Group 2000</db:para>
</db:td>
<db:td>
<db:para>Read/write</db:para>
</db:td>
<db:td>
<db:para>Yes (bundled, unmaintained)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MNG</db:para>
</db:td>
<db:td>
<db:para>Multiple-image Network Graphics</db:para>
</db:td>
<db:td>
<db:para>Read</db:para>
</db:td>
<db:td>
<db:para>Yes (bundled, unmaintained)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TGA</db:para>
</db:td>
<db:td>
<db:para>Truevision Graphics Adapter</db:para>
</db:td>
<db:td>
<db:para>Read</db:para>
</db:td>
<db:td>
<db:para>No</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>TIFF</db:para>
</db:td>
<db:td>
<db:para>Tagged Image File Format</db:para>
</db:td>
<db:td>
<db:para>Read/write</db:para>
</db:td>
<db:td>
<db:para>Yes (bundled)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>WBMP</db:para>
</db:td>
<db:td>
<db:para>Wireless Bitmap</db:para>
</db:td>
<db:td>
<db:para>Read/write</db:para>
</db:td>
<db:td>
<db:para>No</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>WEBP</db:para>
</db:td>
<db:td>
<db:para>WebP</db:para>
</db:td>
<db:td>
<db:para>Read/write</db:para>
</db:td>
<db:td>
<db:para>Yes (bundled)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Some bundled third party codecs are not maintained anymore. They are provided for manual builds only, and not used as a fallback in case system libraries are unavailable.</db:para>
</db:note>
<db:section xml:id="deployment">
<db:title>Deployment</db:title>
<db:para>When built, the Qt Image Formats plugins are located as dynamic libraries in the runtime plugin directory (typically <db:code>plugins/imageformats</db:code>), together with the default image format plugins. They may be deployed to the target system in the same way as other plugins, see the <db:link xlink:href="deployment-plugins.xml">Deploying Plugins</db:link> documentation.</db:para>
</db:section>
<db:section xml:id="security-considerations">
<db:title>Security considerations</db:title>
<db:para>Since these file formats are more rarely used, the codecs may be less thoroughly debugged against potential security holes. As always, care should be taken when creating applications that may be used to decode uncontrolled data files.</db:para>
</db:section>
</db:section>
</db:article>
