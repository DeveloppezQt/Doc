<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Widgets</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A module which provides a set of C++ technologies for building user interfaces.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The <db:link xlink:href="qtwidgets-module.xml">Qt Widgets Module</db:link> provides a set of UI elements to create classic desktop-style user interfaces. See the <db:link xlink:href="topics-ui.xml">User Interfaces</db:link> overview for more information on using widgets.</db:para>
<db:section xml:id="widgets">
<db:title>Widgets</db:title>
<db:para>Widgets are the primary elements for creating user interfaces in Qt. <db:link xlink:href="widget-classes.xml#the-widget-classes">Widgets</db:link> can display data and status information, receive user input, and provide a container for other widgets that should be grouped together. A widget that is not embedded in a parent widget is called a <db:link xlink:href="application-windows.xml">window</db:link>.</db:para>
<db:mediaobject>
<db:alt>A parent widget containing various child widgets.</db:alt>
<db:imageobject>
<db:imagedata fileref="images/parent-child-widgets.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qwidget.xml">QWidget</db:link> class provides the basic capability to render to the screen, and to handle user input events. All UI elements that Qt provides are either subclasses of <db:link xlink:href="qwidget.xml">QWidget</db:link>, or are used in connection with a <db:link xlink:href="qwidget.xml">QWidget</db:link> subclass. Creating custom widgets is done by subclassing <db:link xlink:href="qwidget.xml">QWidget</db:link> or a suitable subclass and reimplementing the virtual event handlers.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="application-windows.xml">Window and Dialog Widgets</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="mainwindow.xml">Application Main Window</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs.xml">Dialog Windows</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="focus.xml">Keyboard Focus in Widgets</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="styles">
<db:title>Styles</db:title>
<db:para><db:link xlink:href="style-reference.xml">Styles</db:link> draw on behalf of widgets and encapsulate the look and feel of a GUI. Qt's built-in widgets use the <db:link xlink:href="qstyle.xml">QStyle</db:link> class to perform nearly all of their drawing, ensuring that they look exactly like the equivalent native widgets.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsvista-tabwidget.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-tabwidget.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/macos-tabwidget.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:link xlink:href="stylesheet.xml">Qt Style Sheets</db:link> are a powerful mechanism that allows you to customize the appearance of widgets, in addition to what is already possible by subclassing <db:link xlink:href="qstyle.xml">QStyle</db:link>.</db:para>
</db:section>
<db:section xml:id="layouts">
<db:title>Layouts</db:title>
<db:para><db:link xlink:href="layout.xml">Layouts</db:link> are an elegant and flexible way to automatically arrange child widgets within their container. Each widget reports its size requirements to the layout through the <db:link xlink:href="qwidget.xml#sizeHint-prop">sizeHint</db:link> and <db:link xlink:href="qwidget.xml#sizePolicy-prop">sizePolicy</db:link> properties, and the layout distributes the available space accordingly.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qgridlayout-with-5-children.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qformlayout-with-6-children.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:link xlink:href="qtdesigner-index.xml">Qt Designer</db:link> is a powerful tool for interactively creating and arranging widgets in layouts.</db:para>
</db:section>
<db:section xml:id="model-view-classes">
<db:title>Model/View Classes</db:title>
<db:para>The <db:link xlink:href="model-view-programming.xml">model/view</db:link> architecture provides classes that manage the way data is presented to the user. Data-driven applications which use lists and tables are structured to separate the data and view using models, views, and delegates.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/windows-treeview.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="graphics-view">
<db:title>Graphics View</db:title>
<db:para>The <db:link xlink:href="graphicsview.xml">Graphics View Framework</db:link> is for managing and interacting with a large number of custom-made 2D graphical items, and a view widget for visualizing the items, with support for zooming and rotation.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicsview-items.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="using-the-module">
<db:title>Using the Module</db:title>
<db:para>Using a Qt module's C++ API requires linking against the module library, either directly or through other dependencies. Several build tools have dedicated support for this, including <db:link xlink:href="https://cmake.org/cmake/help/latest/">CMake</db:link> and <db:link xlink:href="qmake-manual.xml">qmake</db:link>.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Use the find_package() command to locate the needed module component in the Qt6 package:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Widgets)
target_link_libraries(mytarget PRIVATE Qt6::Widgets)
</db:programlisting>
<db:para>For more details, see the <db:link xlink:href="cmake-manual.xml">Build with CMake</db:link> overview.</db:para>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>To configure the module for building with qmake, add the module as a value of the QT variable in the project's .pro file:</db:para>
<db:programlisting language="cpp">QT += widgets
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="articles-and-guides">
<db:title>Articles and Guides</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="widgets-tutorial.xml">Widgets Tutorial</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwidgets-tutorials-notepad-example.xml">Getting Started Programming with Qt Widgets</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qtcreator/creator-writing-program.html">Creating a Qt Widget Based Application</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="modelview.xml">Model/View Tutorial</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="examples-widgets.xml">Qt Widgets Examples</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="layout.xml#layout-examples">Layout Examples</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="examples-widgets-tools.xml">Tools Examples</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="api-reference">
<db:title>API Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtwidgets-module.xml">Qt Widgets C++ Classes</db:link></db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="widget-classes.xml#basic-widget-classes">Basic Widget Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widget-classes.xml#advanced-widget-classes">Advanced Widget Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widget-classes.xml#abstract-widget-classes">Abstract Widget Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widget-classes.xml#organizer-widget-classes">Organizer Widget Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widget-classes.xml#graphics-view-classes">Graphics View Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="model-view-programming.xml#model-view-classes">Model/View Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widget-classes.xml#main-window-and-related-classes">Main Window and Related Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widget-classes.xml#widget-appearance-and-style-related-classes">Widget Appearance and Style Related Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widget-classes.xml#layout-classes">Layout Classes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="stylesheet-reference.xml">Qt Style Sheets Reference</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="module-evolution">
<db:title>Module Evolution</db:title>
<db:para><db:link xlink:href="widgets-changes-qt6.xml">Changes to Qt Widgets</db:link> lists important changes in the module API and functionality that were done for the Qt 6 series of Qt.</db:para>
</db:section>
<db:section xml:id="licenses">
<db:title>Licenses</db:title>
<db:para>The Qt Widgets module is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under free software licenses: The <db:link xlink:href="http://www.gnu.org/licenses/lgpl-3.0.html">GNU Lesser General Public License, version 3</db:link>, or the <db:link xlink:href="http://www.gnu.org/licenses/gpl-2.0.html">GNU General Public License, version 2</db:link>. See <db:link xlink:href="licensing.xml">Qt Licensing</db:link> for further details.</db:para>
</db:section>
</db:article>
