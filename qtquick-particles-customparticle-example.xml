<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Particles Examples - CustomParticle</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This is a collection of examples using <db:link xlink:href="qml-qtquick-particles-customparticle.xml">CustomParticle</db:link> in the QML particle system.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-customparticle-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This is a collection of small QML examples relating to using <db:link xlink:href="qml-qtquick-particles-customparticle.xml">CustomParticle</db:link> in the particle system. Each example is a small QML file emphasizing a different way to use <db:link xlink:href="qml-qtquick-particles-customparticle.xml">CustomParticle</db:link>.</db:para>
<db:para>Blur Particles adds a blur effect to the particles, which increases over the particle's life time. It uses a custom vertex shader:</db:para>
<db:programlisting language="qml">vertexShader:&quot;
    uniform lowp float qt_Opacity;
    varying lowp float fFade;
    varying lowp float fBlur;

    void main() {
        defaultMain();
        highp float t = (qt_Timestamp - qt_ParticleData.x) / qt_ParticleData.y;
        highp float fadeIn = min(t * 10., 1.);
        highp float fadeOut = 1. - max(0., min((t - 0.75) * 4., 1.));

        fFade = fadeIn * fadeOut * qt_Opacity;
        fBlur = max(0.2 * t, t * qt_ParticleR);
    }
&quot;
</db:programlisting>
<db:para>to propagate life time simulation to a custom fragment shader:</db:para>
<db:programlisting language="qml">fragmentShader: &quot;
    uniform sampler2D source;
    uniform sampler2D blurred;
    varying highp vec2 qt_TexCoord0;
    varying highp float fBlur;
    varying highp float fFade;
    void main() {
        gl_FragColor = mix(texture2D(source, qt_TexCoord0), texture2D(blurred, qt_TexCoord0), min(1.0,fBlur*3.0)) * fFade;
    }&quot;
</db:programlisting>
<db:para>which has access to both the normal image sampler and a blurred sampler, the image plus a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.</db:para>
<db:para>Fragment Shader just uses the particle system as a vertex delivery system.</db:para>
<db:programlisting language="qml">fragmentShader: &quot;
    varying highp vec2 fPos;
    varying lowp float fFade;
    varying highp vec2 qt_TexCoord0;
    void main() {//*2 because this generates dark colors mostly
        highp vec2 circlePos = qt_TexCoord0*2.0 - vec2(1.0,1.0);
        highp float dist = length(circlePos);
        highp float circleFactor = max(min(1.0 - dist, 1.0), 0.0);
        gl_FragColor = vec4(fPos.x*2.0 - fPos.y, fPos.y*2.0 - fPos.x, fPos.x*fPos.y*2.0, 0.0) * circleFactor * fFade;
    }&quot;
</db:programlisting>
<db:para>Image Colors uses <db:link xlink:href="qml-qtquick-particles-customparticle.xml">CustomParticle</db:link> to assign colors to particles based on their location in a picture. The vertex shader,</db:para>
<db:programlisting language="qml">vertexShader:&quot;
    uniform highp float maxWidth;
    uniform highp float maxHeight;
    varying highp vec2 fTex2;
    varying lowp float fFade;
    uniform lowp float qt_Opacity;

    void main() {

        fTex2 = vec2(qt_ParticlePos.x, qt_ParticlePos.y);
        //Uncomment this next line for each particle to use full texture, instead of the solid color at the center of the particle.
        //fTex2 = fTex2 + ((- qt_ParticleData.z / 2. + qt_ParticleData.z) * qt_ParticleTex); //Adjusts size so it's like a chunk of image.
        fTex2 = fTex2 / vec2(maxWidth, maxHeight);
        highp float t = (qt_Timestamp - qt_ParticleData.x) / qt_ParticleData.y;
        fFade = min(t*4., (1.-t*t)*.75) * qt_Opacity;
        defaultMain();
    }
&quot;
</db:programlisting>
<db:para>passes along the starting position for each vertex to the fragment shader,</db:para>
<db:programlisting language="qml">fragmentShader: &quot;
    uniform sampler2D particleTexture;
    uniform sampler2D pictureTexture;
    varying highp vec2 qt_TexCoord0;
    varying highp vec2 fTex2;
    varying lowp float fFade;
    void main() {
        gl_FragColor = texture2D(pictureTexture, fTex2) * texture2D(particleTexture, qt_TexCoord0).w * fFade;
}&quot;
</db:programlisting>
<db:para>which uses it to determine the color for that particle.</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="particles/customparticle/content/blurparticles.qml">particles/customparticle/content/blurparticles.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="particles/customparticle/content/fragmentshader.qml">particles/customparticle/content/fragmentshader.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="particles/customparticle/content/imagecolors.qml">particles/customparticle/content/imagecolors.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="particles/customparticle/customparticle.pro">particles/customparticle/customparticle.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="particles/customparticle/customparticle.qml">particles/customparticle/customparticle.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="particles/customparticle/customparticle.qmlproject">particles/customparticle/customparticle.qmlproject</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="particles/customparticle/customparticle.qrc">particles/customparticle/customparticle.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="particles/customparticle/main.cpp">particles/customparticle/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
