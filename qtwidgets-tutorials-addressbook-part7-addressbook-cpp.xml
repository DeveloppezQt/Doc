<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Part 7 - Additional Features</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Widgets Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;
#include &quot;addressbook.h&quot;

AddressBook::AddressBook(QWidget *parent)
    : QWidget(parent)
{
    QLabel *nameLabel = new QLabel(tr(&quot;Name:&quot;));
    nameLine = new QLineEdit;
    nameLine-&gt;setReadOnly(true);

    QLabel *addressLabel = new QLabel(tr(&quot;Address:&quot;));
    addressText = new QTextEdit;
    addressText-&gt;setReadOnly(true);

    addButton = new QPushButton(tr(&quot;&amp;Add&quot;));

    editButton = new QPushButton(tr(&quot;&amp;Edit&quot;));
    editButton-&gt;setEnabled(false);
    removeButton = new QPushButton(tr(&quot;&amp;Remove&quot;));
    removeButton-&gt;setEnabled(false);
    findButton = new QPushButton(tr(&quot;&amp;Find&quot;));
    findButton-&gt;setEnabled(false);
    submitButton = new QPushButton(tr(&quot;&amp;Submit&quot;));
    submitButton-&gt;hide();
    cancelButton = new QPushButton(tr(&quot;&amp;Cancel&quot;));
    cancelButton-&gt;hide();

    nextButton = new QPushButton(tr(&quot;&amp;Next&quot;));
    nextButton-&gt;setEnabled(false);
    previousButton = new QPushButton(tr(&quot;&amp;Previous&quot;));
    previousButton-&gt;setEnabled(false);

    loadButton = new QPushButton(tr(&quot;&amp;Load...&quot;));
    loadButton-&gt;setToolTip(tr(&quot;Load contacts from a file&quot;));
    saveButton = new QPushButton(tr(&quot;&amp;Save...&quot;));
    saveButton-&gt;setToolTip(tr(&quot;Save contacts to a file&quot;));
    saveButton-&gt;setEnabled(false);

    exportButton = new QPushButton(tr(&quot;E&amp;xport&quot;));
    exportButton-&gt;setToolTip(tr(&quot;Export as vCard&quot;));
    exportButton-&gt;setEnabled(false);

    dialog = new FindDialog(this);

    connect(addButton, SIGNAL(clicked()), this, SLOT(addContact()));
    connect(submitButton, SIGNAL(clicked()), this, SLOT(submitContact()));
    connect(editButton, SIGNAL(clicked()), this, SLOT(editContact()));
    connect(cancelButton, SIGNAL(clicked()), this, SLOT(cancel()));
    connect(removeButton, SIGNAL(clicked()), this, SLOT(removeContact()));
    connect(findButton, SIGNAL(clicked()), this, SLOT(findContact()));
    connect(nextButton, SIGNAL(clicked()), this, SLOT(next()));
    connect(previousButton, SIGNAL(clicked()), this, SLOT(previous()));
    connect(loadButton, SIGNAL(clicked()), this, SLOT(loadFromFile()));
    connect(saveButton, SIGNAL(clicked()), this, SLOT(saveToFile()));
    connect(exportButton, SIGNAL(clicked()), this, SLOT(exportAsVCard()));

    QVBoxLayout *buttonLayout1 = new QVBoxLayout;
    buttonLayout1-&gt;addWidget(addButton);
    buttonLayout1-&gt;addWidget(editButton);
    buttonLayout1-&gt;addWidget(removeButton);
    buttonLayout1-&gt;addWidget(findButton);
    buttonLayout1-&gt;addWidget(submitButton);
    buttonLayout1-&gt;addWidget(cancelButton);
    buttonLayout1-&gt;addWidget(loadButton);
    buttonLayout1-&gt;addWidget(saveButton);
    buttonLayout1-&gt;addWidget(exportButton);
    buttonLayout1-&gt;addStretch();

    QHBoxLayout *buttonLayout2 = new QHBoxLayout;
    buttonLayout2-&gt;addWidget(previousButton);
    buttonLayout2-&gt;addWidget(nextButton);

    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&gt;addWidget(nameLabel, 0, 0);
    mainLayout-&gt;addWidget(nameLine, 0, 1);
    mainLayout-&gt;addWidget(addressLabel, 1, 0, Qt::AlignTop);
    mainLayout-&gt;addWidget(addressText, 1, 1);
    mainLayout-&gt;addLayout(buttonLayout1, 1, 2);
    mainLayout-&gt;addLayout(buttonLayout2, 2, 1);

    setLayout(mainLayout);
    setWindowTitle(tr(&quot;Simple Address Book&quot;));
}

void AddressBook::addContact()
{
    oldName = nameLine-&gt;text();
    oldAddress = addressText-&gt;toPlainText();

    nameLine-&gt;clear();
    addressText-&gt;clear();

    updateInterface(AddingMode);
}

void AddressBook::editContact()
{
    oldName = nameLine-&gt;text();
    oldAddress = addressText-&gt;toPlainText();

    updateInterface(EditingMode);
}

void AddressBook::submitContact()
{
    QString name = nameLine-&gt;text();
    QString address = addressText-&gt;toPlainText();

    if (name.isEmpty() || address.isEmpty()) {
        QMessageBox::information(this, tr(&quot;Empty Field&quot;),
            tr(&quot;Please enter a name and address.&quot;));
        return;
    }

    if (currentMode == AddingMode) {

        if (!contacts.contains(name)) {
            contacts.insert(name, address);
            QMessageBox::information(this, tr(&quot;Add Successful&quot;),
                tr(&quot;\&quot;%1\&quot; has been added to your address book.&quot;).arg(name));
        } else {
            QMessageBox::information(this, tr(&quot;Add Unsuccessful&quot;),
                tr(&quot;Sorry, \&quot;%1\&quot; is already in your address book.&quot;).arg(name));
        }
    } else if (currentMode == EditingMode) {

        if (oldName != name) {
            if (!contacts.contains(name)) {
                QMessageBox::information(this, tr(&quot;Edit Successful&quot;),
                    tr(&quot;\&quot;%1\&quot; has been edited in your address book.&quot;).arg(oldName));
                contacts.remove(oldName);
                contacts.insert(name, address);
            } else {
                QMessageBox::information(this, tr(&quot;Edit Unsuccessful&quot;),
                    tr(&quot;Sorry, \&quot;%1\&quot; is already in your address book.&quot;).arg(name));
            }
        } else if (oldAddress != address) {
            QMessageBox::information(this, tr(&quot;Edit Successful&quot;),
                tr(&quot;\&quot;%1\&quot; has been edited in your address book.&quot;).arg(name));
            contacts[name] = address;
        }
    }

    updateInterface(NavigationMode);
}

void AddressBook::cancel()
{
    nameLine-&gt;setText(oldName);
    addressText-&gt;setText(oldAddress);
    updateInterface(NavigationMode);
}

void AddressBook::removeContact()
{
    QString name = nameLine-&gt;text();
    QString address = addressText-&gt;toPlainText();

    if (contacts.contains(name)) {

        int button = QMessageBox::question(this,
            tr(&quot;Confirm Remove&quot;),
            tr(&quot;Are you sure you want to remove \&quot;%1\&quot;?&quot;).arg(name),
            QMessageBox::Yes | QMessageBox::No);

        if (button == QMessageBox::Yes) {

            previous();
            contacts.remove(name);

            QMessageBox::information(this, tr(&quot;Remove Successful&quot;),
                tr(&quot;\&quot;%1\&quot; has been removed from your address book.&quot;).arg(name));
        }
    }

    updateInterface(NavigationMode);
}

void AddressBook::next()
{
    QString name = nameLine-&gt;text();
    QMap&lt;QString, QString&gt;::iterator i = contacts.find(name);

    if (i != contacts.end())
        i++;

    if (i == contacts.end())
        i = contacts.begin();

    nameLine-&gt;setText(i.key());
    addressText-&gt;setText(i.value());
}

void AddressBook::previous()
{
    QString name = nameLine-&gt;text();
    QMap&lt;QString, QString&gt;::iterator i = contacts.find(name);

    if (i == contacts.end()) {
        nameLine-&gt;clear();
        addressText-&gt;clear();
        return;
    }

    if (i == contacts.begin())
        i = contacts.end();

    i--;
    nameLine-&gt;setText(i.key());
    addressText-&gt;setText(i.value());
}

void AddressBook::findContact()
{
    dialog-&gt;show();

    if (dialog-&gt;exec() == 1) {
        QString contactName = dialog-&gt;getFindText();

        if (contacts.contains(contactName)) {
            nameLine-&gt;setText(contactName);
            addressText-&gt;setText(contacts.value(contactName));
        } else {
            QMessageBox::information(this, tr(&quot;Contact Not Found&quot;),
                tr(&quot;Sorry, \&quot;%1\&quot; is not in your address book.&quot;).arg(contactName));
            return;
        }
    }

    updateInterface(NavigationMode);
}
void AddressBook::updateInterface(Mode mode)
{
    currentMode = mode;

    switch (currentMode) {

    case AddingMode:
    case EditingMode:

        nameLine-&gt;setReadOnly(false);
        nameLine-&gt;setFocus(Qt::OtherFocusReason);
        addressText-&gt;setReadOnly(false);

        addButton-&gt;setEnabled(false);
        editButton-&gt;setEnabled(false);
        removeButton-&gt;setEnabled(false);

        nextButton-&gt;setEnabled(false);
        previousButton-&gt;setEnabled(false);

        submitButton-&gt;show();
        cancelButton-&gt;show();

        loadButton-&gt;setEnabled(false);
        saveButton-&gt;setEnabled(false);
        exportButton-&gt;setEnabled(false);
        break;

    case NavigationMode:

        if (contacts.isEmpty()) {
            nameLine-&gt;clear();
            addressText-&gt;clear();
        }

        nameLine-&gt;setReadOnly(true);
        addressText-&gt;setReadOnly(true);
        addButton-&gt;setEnabled(true);

        int number = contacts.size();
        editButton-&gt;setEnabled(number &gt;= 1);
        removeButton-&gt;setEnabled(number &gt;= 1);
        findButton-&gt;setEnabled(number &gt; 2);
        nextButton-&gt;setEnabled(number &gt; 1);
        previousButton-&gt;setEnabled(number &gt; 1);

        submitButton-&gt;hide();
        cancelButton-&gt;hide();

        exportButton-&gt;setEnabled(number &gt;= 1);

        loadButton-&gt;setEnabled(true);
        saveButton-&gt;setEnabled(number &gt;= 1);
        break;
    }
}

void AddressBook::saveToFile()
{
    QString fileName = QFileDialog::getSaveFileName(this,
        tr(&quot;Save Address Book&quot;), &quot;&quot;,
        tr(&quot;Address Book (*.abk);;All Files (*)&quot;));

    if (fileName.isEmpty())
        return;
    else {
        QFile file(fileName);

        if (!file.open(QIODevice::WriteOnly)) {
            QMessageBox::information(this, tr(&quot;Unable to open file&quot;),
                file.errorString());
            return;
        }

        QDataStream out(&amp;file);
        out.setVersion(QDataStream::Qt_4_3);
        out &lt;&lt; contacts;
    }

    updateInterface(NavigationMode);
}

void AddressBook::loadFromFile()
{
    QString fileName = QFileDialog::getOpenFileName(this,
        tr(&quot;Open Address Book&quot;), &quot;&quot;,
        tr(&quot;Address Book (*.abk);;All Files (*)&quot;));

    if (fileName.isEmpty())
        return;
    else {
        QFile file(fileName);

        if (!file.open(QIODevice::ReadOnly)) {
            QMessageBox::information(this, tr(&quot;Unable to open file&quot;),
                file.errorString());
            return;
        }

        QDataStream in(&amp;file);
        in.setVersion(QDataStream::Qt_4_3);
        contacts.empty();   // empty existing contacts
        in &gt;&gt; contacts;

        QMap&lt;QString, QString&gt;::iterator i = contacts.begin();
        nameLine-&gt;setText(i.key());
        addressText-&gt;setText(i.value());
    }

    updateInterface(NavigationMode);
}

void AddressBook::exportAsVCard()
{
    QString name = nameLine-&gt;text();
    QString address = addressText-&gt;toPlainText();
    QString firstName;
    QString lastName;
    QStringList nameList;

    int index = name.indexOf(&quot; &quot;);

    if (index != -1) {
        nameList = name.split(QRegExp(&quot;\\s+&quot;), QString::SkipEmptyParts);
        firstName = nameList.first();
        lastName = nameList.last();
    } else {
        firstName = name;
        lastName = &quot;&quot;;
    }

    QString fileName = QFileDialog::getSaveFileName(this,
        tr(&quot;Export Contact&quot;), &quot;&quot;,
        tr(&quot;vCard Files (*.vcf);;All Files (*)&quot;));

    if (fileName.isEmpty())
        return;

    QFile file(fileName);

    if (!file.open(QIODevice::WriteOnly)) {
        QMessageBox::information(this, tr(&quot;Unable to open file&quot;),
            file.errorString());
        return;
    }

    QTextStream out(&amp;file);

    out &lt;&lt; &quot;BEGIN:VCARD&quot; &lt;&lt; &quot;\n&quot;;
    out &lt;&lt; &quot;VERSION:2.1&quot; &lt;&lt; &quot;\n&quot;;
    out &lt;&lt; &quot;N:&quot; &lt;&lt; lastName &lt;&lt; &quot;;&quot; &lt;&lt; firstName &lt;&lt; &quot;\n&quot;;

    if (!nameList.isEmpty())
       out &lt;&lt; &quot;FN:&quot; &lt;&lt; nameList.join(' ') &lt;&lt; &quot;\n&quot;;
    else
       out &lt;&lt; &quot;FN:&quot; &lt;&lt; firstName &lt;&lt; &quot;\n&quot;;

    address.replace(&quot;;&quot;, &quot;\\;&quot;, Qt::CaseInsensitive);
    address.replace(&quot;\n&quot;, &quot;;&quot;, Qt::CaseInsensitive);
    address.replace(&quot;,&quot;, &quot; &quot;, Qt::CaseInsensitive);

    out &lt;&lt; &quot;ADR;HOME:;&quot; &lt;&lt; address &lt;&lt; &quot;\n&quot;;
    out &lt;&lt; &quot;END:VCARD&quot; &lt;&lt; &quot;\n&quot;;

    QMessageBox::information(this, tr(&quot;Export Successful&quot;),
        tr(&quot;\&quot;%1\&quot; has been exported as a vCard.&quot;).arg(name));
}

</db:programlisting>
</db:article>
