<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractVideoBuffer Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractvideobuffer.xml">QAbstractVideoBuffer</db:link> class is an abstraction for video data.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractVideoBuffer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractplanarvideobuffer.xml" xlink:role="class">QAbstractPlanarVideoBuffer</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractVideoBuffer is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_video</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> class makes use of a <db:link xlink:href="qabstractvideobuffer.xml">QAbstractVideoBuffer</db:link> internally to reference a buffer of video data. Quite often video data buffers may reside in video memory rather than system memory, and this class provides an abstraction of the location.</db:para>
<db:para>In addition, creating a subclass of <db:link xlink:href="qabstractvideobuffer.xml">QAbstractVideoBuffer</db:link> will allow you to construct video frames from preallocated or static buffers, in cases where the <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> constructors taking a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> or a <db:link xlink:href="qimage.xml">QImage</db:link> do not suffice. This may be necessary when implementing a new hardware accelerated video system, for example.</db:para>
<db:para>The contents of a buffer can be accessed by mapping the buffer to memory using the <db:link xlink:href="qabstractvideobuffer.xml#map">map</db:link>() function, which returns a pointer to memory containing the contents of the video buffer. The memory returned by <db:link xlink:href="qabstractvideobuffer.xml#map">map</db:link>() is released by calling the <db:link xlink:href="qabstractvideobuffer.xml#unmap">unmap</db:link>() function.</db:para>
<db:para>The <db:link xlink:href="qabstractvideobuffer.xml#handle">handle</db:link>() of a buffer may also be used to manipulate its contents using type specific APIs. The type of a buffer's handle is given by the <db:link xlink:href="qabstractvideobuffer.xml#handleType">handleType</db:link>() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="HandleType-enum">
<db:title>enum QAbstractVideoBuffer::HandleType</db:title>
<db:enumsynopsis>
<db:enumname>HandleType</db:enumname>
<db:enumitem>
<db:enumidentifier>NoHandle</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>GLTextureHandle</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>XvShmImageHandle</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CoreImageHandle</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>QPixmapHandle</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EGLImageHandle</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UserHandle</db:enumidentifier>
<db:enumvalue>1000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Identifies the type of a video buffers handle.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideobuffer.xml">QAbstractVideoBuffer</db:link></db:emphasis>::NoHandle</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The buffer has no handle, its data can only be accessed by mapping the buffer.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideobuffer.xml">QAbstractVideoBuffer</db:link></db:emphasis>::GLTextureHandle</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The handle of the buffer is an OpenGL texture ID.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideobuffer.xml">QAbstractVideoBuffer</db:link></db:emphasis>::XvShmImageHandle</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The handle contains pointer to shared memory XVideo image.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideobuffer.xml">QAbstractVideoBuffer</db:link></db:emphasis>::CoreImageHandle</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The handle contains pointer to macOS CIImage.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideobuffer.xml">QAbstractVideoBuffer</db:link></db:emphasis>::QPixmapHandle</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The handle of the buffer is a <db:link xlink:href="qpixmap.xml">QPixmap</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideobuffer.xml">QAbstractVideoBuffer</db:link></db:emphasis>::EGLImageHandle</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The handle of the buffer is an EGLImageKHR.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideobuffer.xml">QAbstractVideoBuffer</db:link></db:emphasis>::UserHandle</db:code></db:para>
</db:td>
<db:td><db:code>1000</db:code></db:td>
<db:td>
<db:para>Start value for user defined handle types.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideobuffer.xml#handleType">handleType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="MapMode-enum">
<db:title>enum QAbstractVideoBuffer::MapMode</db:title>
<db:enumsynopsis>
<db:enumname>MapMode</db:enumname>
<db:enumitem>
<db:enumidentifier>NotMapped</db:enumidentifier>
<db:enumvalue>0x00</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadOnly</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WriteOnly</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadWrite</db:enumidentifier>
<db:enumvalue>ReadOnly | WriteOnly</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Enumerates how a video buffer's data is mapped to system memory.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideobuffer.xml">QAbstractVideoBuffer</db:link></db:emphasis>::NotMapped</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
<db:td>
<db:para>The video buffer is not mapped to memory.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideobuffer.xml">QAbstractVideoBuffer</db:link></db:emphasis>::ReadOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>The mapped memory is populated with data from the video buffer when mapped, but the content of the mapped memory may be discarded when unmapped.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideobuffer.xml">QAbstractVideoBuffer</db:link></db:emphasis>::WriteOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>The mapped memory is uninitialized when mapped, but the possibly modified content will be used to populate the video buffer when unmapped.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideobuffer.xml">QAbstractVideoBuffer</db:link></db:emphasis>::ReadWrite</db:code></db:para>
</db:td>
<db:td><db:code>ReadOnly | WriteOnly</db:code></db:td>
<db:td>
<db:para>The mapped memory is populated with data from the video buffer, and the video buffer is repopulated with the content of the mapped memory when it is unmapped.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideobuffer.xml#mapMode">mapMode</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractvideobuffer.xml#map">map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractVideoBuffer">
<db:title>QAbstractVideoBuffer::QAbstractVideoBuffer(QAbstractVideoBuffer::HandleType <db:emphasis>type</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractVideoBuffer</db:methodname>
<db:methodparam>
<db:type>QAbstractVideoBuffer::HandleType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractVideoBuffer(QAbstractVideoBuffer::HandleType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an abstract video buffer of the given <db:code role="parameter">type</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractVideoBuffer">
<db:title>[virtual] QAbstractVideoBuffer::~QAbstractVideoBuffer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractVideoBuffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractVideoBuffer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys an abstract video buffer.</db:para>
</db:section>
<db:section xml:id="handle">
<db:title>[virtual] QVariant QAbstractVideoBuffer::handle() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>handle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant handle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a type specific handle to the data buffer.</db:para>
<db:para>The type of the handle is given by <db:link xlink:href="qabstractvideobuffer.xml#handleType">handleType</db:link>() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideobuffer.xml#handleType">handleType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="handleType">
<db:title>QAbstractVideoBuffer::HandleType QAbstractVideoBuffer::handleType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractVideoBuffer::HandleType</db:type>
<db:methodname>handleType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractVideoBuffer::HandleType handleType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of a video buffer's handle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideobuffer.xml#handle">handle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="map">
<db:title>[pure virtual] uchar *QAbstractVideoBuffer::map(QAbstractVideoBuffer::MapMode <db:emphasis>mode</db:emphasis>, int *<db:emphasis>numBytes</db:emphasis>, int *<db:emphasis>bytesPerLine</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>uchar *</db:type>
<db:methodname>map</db:methodname>
<db:methodparam>
<db:type>QAbstractVideoBuffer::MapMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>numBytes</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>bytesPerLine</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uchar * map(QAbstractVideoBuffer::MapMode mode, int *numBytes, int *bytesPerLine) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the contents of a video buffer to memory.</db:para>
<db:para>In some cases the video buffer might be stored in video memory or otherwise inaccessible memory, so it is necessary to map the buffer before accessing the pixel data. This may involve copying the contents around, so avoid mapping and unmapping unless required.</db:para>
<db:para>The map <db:code role="parameter">mode</db:code> indicates whether the contents of the mapped memory should be read from and/or written to the buffer. If the map mode includes the <db:code>QAbstractVideoBuffer::ReadOnly</db:code> flag the mapped memory will be populated with the content of the buffer when initially mapped. If the map mode includes the <db:code>QAbstractVideoBuffer::WriteOnly</db:code> flag the content of the possibly modified mapped memory will be written back to the buffer when unmapped.</db:para>
<db:para>When access to the data is no longer needed be sure to call the <db:link xlink:href="qabstractvideobuffer.xml#unmap">unmap</db:link>() function to release the mapped memory and possibly update the buffer contents.</db:para>
<db:para>Returns a pointer to the mapped memory region, or a null pointer if the mapping failed. The size in bytes of the mapped memory region is returned in <db:code role="parameter">numBytes</db:code>, and the line stride in <db:code role="parameter">bytesPerLine</db:code>.</db:para>
<db:note>
<db:para>Writing to memory that is mapped as read-only is undefined, and may result in changes to shared data or crashes.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideobuffer.xml#unmap">unmap</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractvideobuffer.xml#mapMode">mapMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapMode">
<db:title>[pure virtual] QAbstractVideoBuffer::MapMode QAbstractVideoBuffer::mapMode() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QAbstractVideoBuffer::MapMode</db:type>
<db:methodname>mapMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractVideoBuffer::MapMode mapMode() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the mode a video buffer is mapped in.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideobuffer.xml#map">map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapPlanes">
<db:title>[since 5.4] int QAbstractVideoBuffer::mapPlanes(QAbstractVideoBuffer::MapMode <db:emphasis>mode</db:emphasis>, int *<db:emphasis>numBytes</db:emphasis>, int[4] <db:emphasis>bytesPerLine</db:emphasis> = 4, uchar *[4] <db:emphasis>data</db:emphasis> = 4)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>mapPlanes</db:methodname>
<db:methodparam>
<db:type>QAbstractVideoBuffer::MapMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>numBytes</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int[4]</db:type>
<db:parameter>bytesPerLine</db:parameter>
<db:initializer>4</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>uchar *[4]</db:type>
<db:parameter>data</db:parameter>
<db:initializer>4</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int mapPlanes(QAbstractVideoBuffer::MapMode mode, int *numBytes, int[4] bytesPerLine, uchar *[4] data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Independently maps the planes of a video buffer to memory.</db:para>
<db:para>The map <db:code role="parameter">mode</db:code> indicates whether the contents of the mapped memory should be read from and/or written to the buffer. If the map mode includes the <db:code>QAbstractVideoBuffer::ReadOnly</db:code> flag the mapped memory will be populated with the content of the buffer when initially mapped. If the map mode includes the <db:code>QAbstractVideoBuffer::WriteOnly</db:code> flag the content of the possibly modified mapped memory will be written back to the buffer when unmapped.</db:para>
<db:para>When access to the data is no longer needed be sure to call the <db:link xlink:href="qabstractvideobuffer.xml#unmap">unmap</db:link>() function to release the mapped memory and possibly update the buffer contents.</db:para>
<db:para>Returns the number of planes in the mapped video data. For each plane the line stride of that plane will be returned in <db:code role="parameter">bytesPerLine</db:code>, and a pointer to the plane data will be returned in <db:code role="parameter">data</db:code>. The accumulative size of the mapped data is returned in <db:code role="parameter">numBytes</db:code>.</db:para>
<db:para>Not all buffer implementations will map more than the first plane, if this returns a single plane for a planar format the additional planes will have to be calculated from the line stride of the first plane and the frame height. Mapping a buffer with <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> will do this for you.</db:para>
<db:para>To implement this function create a derivative of <db:link xlink:href="qabstractplanarvideobuffer.xml">QAbstractPlanarVideoBuffer</db:link> and implement its map function instance instead.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="release">
<db:title>[virtual] void QAbstractVideoBuffer::release()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>release</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void release()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the video buffer.</db:para>
<db:para><db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> calls QAbstractVideoBuffer::release when the buffer is not used any more and can be destroyed or returned to the buffer pool.</db:para>
<db:para>The default implementation deletes the buffer instance.</db:para>
</db:section>
<db:section xml:id="unmap">
<db:title>[pure virtual] void QAbstractVideoBuffer::unmap()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>unmap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unmap() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the memory mapped by the <db:link xlink:href="qabstractvideobuffer.xml#map">map</db:link>() function.</db:para>
<db:para>If the <db:link xlink:href="qabstractvideobuffer.xml#MapMode-enum">MapMode</db:link> included the <db:code>QAbstractVideoBuffer::WriteOnly</db:code> flag this will write the current content of the mapped memory back to the video frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideobuffer.xml#map">map</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
