<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Weather Forecast Example</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt Quick Shapes example demonstrating different ways to uses shapes in an application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-weatherforecast-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example is designed to look like a weather forecast app for Europe. It demonstrates a few different ways the <db:link xlink:href="qtquick-shapes-qmlmodule.xml">QtQuick.Shapes</db:link> API might be useful in an application, and how different properties can affect the quality and performance of the rendering.</db:para>
<db:para>All graphics in the example originated as <db:code>.svg</db:code> files which were converted to QML using the <db:link xlink:href="qtqml-tooling-svgtoqml.xml">svgtoqml</db:link> tool.</db:para>
<db:section xml:id="different-types-of-shapes">
<db:title>Different Types of Shapes</db:title>
<db:para>The <db:link xlink:href="qtquick-shapes-qmlmodule.xml">QtQuick.Shapes</db:link> module provides APIs to render vector graphics in a Qt Quick application. This is an alternative to using a raster <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> for 2D graphics and is useful if the target size of the image is not known up front. With an <db:link xlink:href="qml-qtquick-image.xml">Image</db:link>, the rasterized pixmap is precreated at a specific size and scaling the image will either add or subtract information. This will result in pixelation or blurring, depending on whether its <db:code>smooth</db:code> property is set.</db:para>
<db:para>With <db:link xlink:href="qtquick-shapes-qmlmodule.xml">QtQuick.Shapes</db:link> the shapes are described mathematically, as a set of curves and line segments, and thus they can be scaled arbitrarily without introducing artifacts.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-weatherforecast-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In the Weather Forecast example, there are three main uses of shapes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>User interface icons, such as weather symbols and the cog wheel on the &quot;Settings&quot; button.</db:para>
</db:listitem>
<db:listitem>
<db:para>The overview map of Europe.</db:para>
</db:listitem>
<db:listitem>
<db:para>Country name labels visible when zooming into the map.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="user-interface-icons">
<db:title>User Interface Icons</db:title>
<db:para>While using appropriately sized raster images for icons is usually preferred for performance reasons, it may be inconvenient if the same application is targeting many different screen sizes. In order for the icons to look crisp on all screens, you have to pregenerate a large set of different sizes. <db:link xlink:href="qtquick-shapes-qmlmodule.xml">QtQuick.Shapes</db:link> makes it possible for the application to do this adaptation at runtime, by including the icons as shapes and rendering them at a size appropriate for the current screen size.</db:para>
<db:para>When running the Weather Forecast example on a desktop system, this can be seen by making the application window larger or smaller. The weather symbols adapt to the window size without reducing quality.</db:para>
<db:para>In addition, animated effects, such as zooms, can be added without quality loss. This can be seen by hovering over the weather symbols.</db:para>
<db:para>So for any use case where the target size is unknown, or the number of possibilities is so large that creating specific pixmaps for all would be impractical, using shapes for icons can be useful and worth the performance cost of rasterizing the shapes at runtime.</db:para>
</db:section>
<db:section xml:id="map-of-europe">
<db:title>Map of Europe</db:title>
<db:para>The Weather Forecast example also uses a vectorized map of Europe. This makes it easy to create effects such as zooming into the map when we want to emphasize a specific country. In addition, since each country is a separate sub-shape, we can apply different fills and strokes to them independently.</db:para>
<db:para>Click on the map to zoom into a country. The scale will be adjusted so that the country shape fills the window and the fill color will be slightly darker.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/zoomed.png"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para>The weather symbols on the zoomed map are the same assets as in the original view, but at a much larger size.</db:para>
</db:note>
</db:section>
<db:section xml:id="country-name-labels">
<db:title>Country Name Labels</db:title>
<db:para>When zooming on a country, its name appears across the country shape. This label is also created with <db:link xlink:href="qtquick-shapes-qmlmodule.xml">QtQuick.Shapes</db:link>, by using the <db:link xlink:href="qml-qtquick-pathtext.xml">PathText</db:link> component type which converts a string into renderable shape.</db:para>
<db:para>This is not the typical way to create text labels in Qt Quick. For most purposes, using the <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> element is the most efficient and convenient approach. However, there are certain visualization effects supported by <db:link xlink:href="qtquick-shapes-qmlmodule.xml">QtQuick.Shapes</db:link> which is not supported by the regular <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> element. Fill gradients is one such effect.</db:para>
<db:programlisting language="qml">                        ShapePath {
                            strokeColor:  &quot;transparent&quot;
                            strokeWidth: 1
                            joinStyle: ShapePath.RoundJoin
                            fillRule: ShapePath.WindingFill

                            fillGradient: RadialGradient {
                                centerX: textShape.width / 2
                                centerY: textShape.height / 2
                                centerRadius: textShape.width / 2
                                focalX: centerX; focalY: centerY
                                GradientStop { position: 0; color: &quot;#b0ab9d7f&quot; }
                                GradientStop { position: 1; color: &quot;#5cab9d7f&quot; }
                            }
                            PathText {
                                id: textPath
                                text: textLayer.label
                                font.family: workSansRegular.font.family
                                font.pixelSize: 64
                            }
                        }
</db:programlisting>
<db:para>To illustrate this, the Weather Forecast example applies a subtle radial gradient to the opacity of the country labels, making them seem to blend into the map on the edges.</db:para>
</db:section>
</db:section>
<db:section xml:id="different-types-of-renderers">
<db:title>Different Types of Renderers</db:title>
<db:para>The Weather Forecast example illustrates multiple different use cases for <db:link xlink:href="qtquick-shapes-qmlmodule.xml">QtQuick.Shapes</db:link>. In addition, it can be used to see the upsides and downsides of the different renderers the module supports.</db:para>
<db:para>Click on the cog wheel in the upper left corner to open a settings panel, where different approaches to rasterization can be selected.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/settings.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qtquick-shapes-qmlmodule.xml">QtQuick.Shapes</db:link> supports two different renderers, selectable using the <db:link xlink:href="qml-qtquick-shapes-shape.xml#preferredRendererType-prop">preferredRendererType</db:link> property. The preferred renderer in the example is <db:code>CurveRenderer</db:code>. This supports hardware-accelerated curves and built-in antialiasing. It is not the default renderer in <db:link xlink:href="qtquick-shapes-qmlmodule.xml">QtQuick.Shapes</db:link>, but in the example it is automatically selected on startup.</db:para>
<db:para>The default renderer in Qt Quick Shapes is the <db:code>GeometryRenderer</db:code>. This flattens the curves of the shape into very small straight lines and draws the shape as a polygon. Redrawing the shape is more efficient than with the <db:code>CurveRenderer</db:code>, but at certain scales, the fact that curves are approximated by lines will be visible.</db:para>
<db:para>In addition, the <db:code>GeometryRenderer</db:code> does not support antialiasing, so you will typically want to enable multi-sampling when using it. This can be done by rendering the shapes into layers and enabling multi-sampling on these. Since we will render the shapes into off-screen buffers in this mode, it consumes additional graphics memory as well as an additional rendering pass for each shape.</db:para>
<db:programlisting language="qml">        layer.enabled: msaaCheckBox.checked
        layer.samples: 4
</db:programlisting>
<db:para>The settings panel also provides the option to use the <db:code>GeometryRenderer</db:code> together with 4x multi-sampling, so that the quality of this can be compared to the built-in antialiasing of the <db:code>CurveRenderer</db:code>.</db:para>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Qt Creator: Tutorial: Build and run</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/quickshapes/weatherforecast?h=6.8">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
