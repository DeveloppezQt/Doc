<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickFramebufferObject Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link> class is a convenience class for integrating OpenGL rendering using a framebuffer object (FBO) with Qt Quick.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickFramebufferObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquickitem.xml" xlink:role="class">QQuickItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:warning>
<db:para>This class is only functional when Qt Quick is rendering via OpenGL. It is not compatible with other graphics APIs, such as Vulkan or Metal. It should be treated as a legacy class that is only present in order to enable Qt 5 applications to function without source compatibility breaks as long as they tie themselves to OpenGL.</db:para>
</db:warning>
<db:para>On most platforms, the rendering will occur on a <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">dedicated thread</db:link>. For this reason, the <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link> class enforces a strict separation between the item implementation and the FBO rendering. All item logic, such as properties and UI-related helper functions needed by QML should be located in a <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link> class subclass. Everything that relates to rendering must be located in the <db:link xlink:href="qquickframebufferobject-renderer.xml">QQuickFramebufferObject::Renderer</db:link> class.</db:para>
<db:para>To avoid race conditions and read/write issues from two threads it is important that the renderer and the item never read or write shared variables. Communication between the item and the renderer should primarily happen via the <db:link xlink:href="qquickframebufferobject-renderer.xml#synchronize">QQuickFramebufferObject::Renderer::synchronize</db:link>() function. This function will be called on the render thread while the GUI thread is blocked.</db:para>
<db:para>Using queued connections or events for communication between item and renderer is also possible.</db:para>
<db:para>Both the Renderer and the FBO are memory managed internally.</db:para>
<db:para>To render into the FBO, the user should subclass the Renderer class and reimplement its <db:link xlink:href="qquickframebufferobject-renderer.xml#render">Renderer::render</db:link>() function. The Renderer subclass is returned from <db:link xlink:href="qquickframebufferobject.xml#createRenderer">createRenderer</db:link>().</db:para>
<db:para>The size of the FBO will by default adapt to the size of the item. If a fixed size is preferred, set <db:link xlink:href="qquickframebufferobject.xml#textureFollowsItemSize-prop">textureFollowsItemSize</db:link> to <db:code>false</db:code> and return a texture of your choosing from <db:link xlink:href="qquickframebufferobject-renderer.xml#createFramebufferObject">QQuickFramebufferObject::Renderer::createFramebufferObject</db:link>().</db:para>
<db:para>Starting Qt 5.4, the <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link> class is a <db:link xlink:href="qsgtextureprovider.xml">texture provider</db:link> and can be used directly in <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffects</db:link> and other classes that consume texture providers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">Scene Graph and Rendering</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="mirrorVertically-prop">
<db:title>mirrorVertically : bool</db:title>
<db:para>This property controls if the size of the FBO's contents should be mirrored vertically when drawing. This allows easy integration of third-party rendering code that does not follow the standard expectations.</db:para>
<db:para>The default value is <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">mirrorVertically</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMirrorVertically</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">mirrorVerticallyChanged</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="textureFollowsItemSize-prop">
<db:title>textureFollowsItemSize : bool</db:title>
<db:para>This property controls if the size of the FBO's texture should follow the dimensions of the <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link> item. When this property is false, the FBO will be created once the first time it is displayed. If it is set to true, the FBO will be recreated every time the dimensions of the item change.</db:para>
<db:para>The default value is <db:code>true</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">textureFollowsItemSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextureFollowsItemSize</db:emphasis>(<db:type>bool</db:type> <db:emphasis>follows</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">textureFollowsItemSizeChanged</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickFramebufferObject">
<db:title>QQuickFramebufferObject::QQuickFramebufferObject(QQuickItem *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link> with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="createRenderer">
<db:title>[pure virtual] QQuickFramebufferObject::Renderer *QQuickFramebufferObject::createRenderer() const</db:title>
<db:para>Reimplement this function to create a renderer used to render into the FBO.</db:para>
<db:para>This function will be called on the rendering thread while the GUI thread is blocked.</db:para>
</db:section>
<db:section xml:id="isTextureProvider">
<db:title>[override virtual] bool QQuickFramebufferObject::isTextureProvider() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qquickitem.xml#isTextureProvider" role="function">QQuickItem::isTextureProvider() const</db:link>.</db:para>
</db:section>
<db:section xml:id="releaseResources">
<db:title>[override virtual] void QQuickFramebufferObject::releaseResources()</db:title>
<db:para>Reimplements: <db:link xlink:href="qquickitem.xml#releaseResources" role="function">QQuickItem::releaseResources()</db:link>.</db:para>
</db:section>
<db:section xml:id="textureProvider">
<db:title>[override virtual] QSGTextureProvider *QQuickFramebufferObject::textureProvider() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qquickitem.xml#textureProvider" role="function">QQuickItem::textureProvider() const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
