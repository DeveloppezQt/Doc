<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QQuickFramebufferObject Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link> class is a convenience class for integrating OpenGL rendering using a framebuffer object (FBO) with Qt Quick.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickFramebufferObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquickitem.xml" xlink:role="class">QQuickItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>On most platforms, the rendering will occur on a <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">dedicated thread</db:link>. For this reason, the <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link> class enforces a strict separation between the item implementation and the FBO rendering. All item logic, such as properties and UI-related helper functions needed by QML should be located in a <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link> class subclass. Everything that relates to rendering must be located in the <db:link xlink:href="qquickframebufferobject-renderer.xml">QQuickFramebufferObject::Renderer</db:link> class.</db:para>
<db:para>To avoid race conditions and read/write issues from two threads it is important that the renderer and the item never read or write shared variables. Communication between the item and the renderer should primarily happen via the <db:link xlink:href="qquickframebufferobject-renderer.xml#synchronize">QQuickFramebufferObject::Renderer::synchronize</db:link>() function. This function will be called on the render thread while the GUI thread is blocked.</db:para>
<db:para>Using queued connections or events for communication between item and renderer is also possible.</db:para>
<db:para>Both the Renderer and the FBO are memory managed internally.</db:para>
<db:para>To render into the FBO, the user should subclass the Renderer class and reimplement its <db:link xlink:href="qquickframebufferobject-renderer.xml#render">Renderer::render</db:link>() function. The Renderer subclass is returned from <db:link xlink:href="qquickframebufferobject.xml#createRenderer">createRenderer</db:link>().</db:para>
<db:para>The size of the FBO will by default adapt to the size of the item. If a fixed size is preferred, set textureFollowsItemSize to <db:code>false</db:code> and return a texture of your choosing from <db:link xlink:href="qquickframebufferobject-renderer.xml#createFramebufferObject">QQuickFramebufferObject::Renderer::createFramebufferObject</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-scenegraph-textureinsgnode-example.xml">Scene Graph - Rendering FBOs</db:link></db:member>
<db:member><db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">Scene Graph and Rendering</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickFramebufferObject">
<db:title>QQuickFramebufferObject::QQuickFramebufferObject(QQuickItem *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a new <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link> with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="createRenderer">
<db:title>[pure virtual] QQuickFramebufferObject::Renderer *QQuickFramebufferObject::createRenderer() const</db:title>
<db:para>Reimplement this function to create a renderer used to render into the FBO.</db:para>
<db:para>This function will be called on the rendering thread while the GUI thread is blocked.</db:para>
</db:section>
</db:section>
</db:article>
