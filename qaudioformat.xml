<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAudioFormat Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> class stores audio stream parameter information.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAudioFormat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Multimedia)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Multimedia)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAudioFormat is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_audio</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An audio format specifies how data in a raw audio stream is arranged. For example, how the stream is to be interpreted.</db:para>
<db:para><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> contains parameters that specify how the audio sample data is arranged. These are the frequency, the number of channels, and the sample format. The following table describes these in more detail.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Parameter</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Sample Rate</db:para>
</db:td>
<db:td>
<db:para>Samples per second of audio data in Hertz.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Number of channels</db:para>
</db:td>
<db:td>
<db:para>The number of audio channels (typically one for mono or two for stereo). These are the amount of consecutive samples that together form one frame in the stream</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Sample format</db:para>
</db:td>
<db:td>
<db:para>The format of the audio samples in the stream</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This class is used in conjunction with <db:link xlink:href="qaudiosource.xml">QAudioSource</db:link> or <db:link xlink:href="qaudiosink.xml">QAudioSink</db:link> to allow you to specify the parameters of the audio stream being read or written, or with <db:link xlink:href="qaudiobuffer.xml">QAudioBuffer</db:link> when dealing with samples in memory.</db:para>
<db:para>You can obtain audio formats compatible with the audio device used through functions in <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link>. This class also lets you query available parameter values for a device, so that you can set the parameters yourself. See the <db:link xlink:href="qaudiodevice.xml">QAudioDevice</db:link> class description for details. You need to know the format of the audio streams you wish to play or record.</db:para>
<db:para>Samples for all channels will be interleaved. One sample for each channel for the same instant in time is referred to as a frame in Qt Multimedia (and other places).</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AudioChannelPosition-enum">
<db:title>enum QAudioFormat::AudioChannelPosition</db:title>
<db:enumsynopsis>
<db:enumname>AudioChannelPosition</db:enumname>
<db:enumitem>
<db:enumidentifier>UnknownPosition</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrontLeft</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrontRight</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrontCenter</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LFE</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BackLeft</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BackRight</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrontLeftOfCenter</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FrontRightOfCenter</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BackCenter</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SideLeft</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SideRight</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TopCenter</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TopFrontLeft</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TopFrontCenter</db:enumidentifier>
<db:enumvalue>14</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TopFrontRight</db:enumidentifier>
<db:enumvalue>15</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TopBackLeft</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TopBackCenter</db:enumidentifier>
<db:enumvalue>17</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TopBackRight</db:enumidentifier>
<db:enumvalue>18</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LFE2</db:enumidentifier>
<db:enumvalue>19</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TopSideLeft</db:enumidentifier>
<db:enumvalue>20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TopSideRight</db:enumidentifier>
<db:enumvalue>21</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BottomFrontCenter</db:enumidentifier>
<db:enumvalue>22</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BottomFrontLeft</db:enumidentifier>
<db:enumvalue>23</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BottomFrontRight</db:enumidentifier>
<db:enumvalue>24</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Describes the possible audio channel positions. These follow the standard definition used in the 22.2 surround sound configuration.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::UnknownPosition</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Unknown position</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::FrontLeft</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::FrontRight</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::FrontCenter</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::LFE</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Low Frequency Effect channel (Subwoofer)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::BackLeft</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::BackRight</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::FrontLeftOfCenter</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::FrontRightOfCenter</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::BackCenter</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::LFE2</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::SideLeft</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::SideRight</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::TopFrontLeft</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::TopFrontRight</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::TopFrontCenter</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::TopCenter</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::TopBackLeft</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::TopBackRight</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::TopSideLeft</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::TopSideRight</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::TopBackCenter</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::BottomFrontCenter</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::BottomFrontLeft</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::BottomFrontRight</db:code></db:para>
</db:td>
<db:td><db:code>24</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ChannelConfig-enum">
<db:title>enum QAudioFormat::ChannelConfig</db:title>
<db:enumsynopsis>
<db:enumname>ChannelConfig</db:enumname>
<db:enumitem>
<db:enumidentifier>ChannelConfigUnknown</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChannelConfigMono</db:enumidentifier>
<db:enumvalue>QtPrivate::channelConfig(FrontCenter)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChannelConfigStereo</db:enumidentifier>
<db:enumvalue>QtPrivate::channelConfig(FrontLeft, FrontRight)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChannelConfig2Dot1</db:enumidentifier>
<db:enumvalue>QtPrivate::channelConfig(FrontLeft, FrontRight, LFE)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChannelConfig3Dot0</db:enumidentifier>
<db:enumvalue>QtPrivate::channelConfig(FrontLeft, FrontRight, FrontCenter)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChannelConfig3Dot1</db:enumidentifier>
<db:enumvalue>QtPrivate::channelConfig(FrontLeft, FrontRight, FrontCenter, LFE)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChannelConfigSurround5Dot0</db:enumidentifier>
<db:enumvalue>QtPrivate::channelConfig(FrontLeft, FrontRight, FrontCenter, BackLeft, BackRight)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChannelConfigSurround5Dot1</db:enumidentifier>
<db:enumvalue>QtPrivate::channelConfig(FrontLeft, FrontRight, FrontCenter, LFE, BackLeft, BackRight)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChannelConfigSurround7Dot0</db:enumidentifier>
<db:enumvalue>QtPrivate::channelConfig(FrontLeft, FrontRight, FrontCenter, BackLeft, BackRight, SideLeft, SideRight)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChannelConfigSurround7Dot1</db:enumidentifier>
<db:enumvalue>QtPrivate::channelConfig(FrontLeft, FrontRight, FrontCenter, LFE, BackLeft, BackRight, SideLeft, SideRight)</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes a standardized audio channel layout. The most common configurations are Mono, Stereo, 2.1 (stereo plus low frequency), 5.1 surround, and 7.1 surround configurations.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::ChannelConfigUnknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The channel configuration is not known.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::ChannelConfigMono</db:code></db:para>
</db:td>
<db:td><db:code>QtPrivate::channelConfig(FrontCenter)</db:code></db:td>
<db:td>
<db:para>The audio has one Center channel.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::ChannelConfigStereo</db:code></db:para>
</db:td>
<db:td><db:code>QtPrivate::channelConfig(FrontLeft, FrontRight)</db:code></db:td>
<db:td>
<db:para>The audio has two channels, Left and Right.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::ChannelConfig2Dot1</db:code></db:para>
</db:td>
<db:td><db:code>QtPrivate::channelConfig(FrontLeft, FrontRight, LFE)</db:code></db:td>
<db:td>
<db:para>The audio has three channels, Left, Right and LFE (low frequency effect).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::ChannelConfig3Dot0</db:code></db:para>
</db:td>
<db:td><db:code>QtPrivate::channelConfig(FrontLeft, FrontRight, FrontCenter)</db:code></db:td>
<db:td>
<db:para>The audio has three channels, Left, Right, and Center.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::ChannelConfig3Dot1</db:code></db:para>
</db:td>
<db:td><db:code>QtPrivate::channelConfig(FrontLeft, FrontRight, FrontCenter, LFE)</db:code></db:td>
<db:td>
<db:para>The audio has four channels, Left, Right, Center, and LFE (low frequency effect).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::ChannelConfigSurround5Dot0</db:code></db:para>
</db:td>
<db:td><db:code>QtPrivate::channelConfig(FrontLeft, FrontRight, FrontCenter, BackLeft, BackRight)</db:code></db:td>
<db:td>
<db:para>The audio has five channels, Left, Right, Center, <db:link xlink:href="qaudioformat.xml#AudioChannelPosition-enum">BackLeft</db:link>, and <db:link xlink:href="qaudioformat.xml#AudioChannelPosition-enum">BackRight</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::ChannelConfigSurround5Dot1</db:code></db:para>
</db:td>
<db:td><db:code>QtPrivate::channelConfig(FrontLeft, FrontRight, FrontCenter, LFE, BackLeft, BackRight)</db:code></db:td>
<db:td>
<db:para>The audio has 6 channels, Left, Right, Center, LFE, <db:link xlink:href="qaudioformat.xml#AudioChannelPosition-enum">BackLeft</db:link>, and <db:link xlink:href="qaudioformat.xml#AudioChannelPosition-enum">BackRight</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::ChannelConfigSurround7Dot0</db:code></db:para>
</db:td>
<db:td><db:code>QtPrivate::channelConfig(FrontLeft, FrontRight, FrontCenter, BackLeft, BackRight, SideLeft, SideRight)</db:code></db:td>
<db:td>
<db:para>The audio has 7 channels, Left, Right, Center, <db:link xlink:href="qaudioformat.xml#AudioChannelPosition-enum">BackLeft</db:link>, <db:link xlink:href="qaudioformat.xml#AudioChannelPosition-enum">BackRight</db:link>, <db:link xlink:href="qaudioformat.xml#AudioChannelPosition-enum">SideLeft</db:link>, and <db:link xlink:href="qaudioformat.xml#AudioChannelPosition-enum">SideRight</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::ChannelConfigSurround7Dot1</db:code></db:para>
</db:td>
<db:td><db:code>QtPrivate::channelConfig(FrontLeft, FrontRight, FrontCenter, LFE, BackLeft, BackRight, SideLeft, SideRight)</db:code></db:td>
<db:td>
<db:para>The audio has 8 channels, Left, Right, Center, LFE, <db:link xlink:href="qaudioformat.xml#AudioChannelPosition-enum">BackLeft</db:link>, <db:link xlink:href="qaudioformat.xml#AudioChannelPosition-enum">BackRight</db:link>, <db:link xlink:href="qaudioformat.xml#AudioChannelPosition-enum">SideLeft</db:link>, and <db:link xlink:href="qaudioformat.xml#AudioChannelPosition-enum">SideRight</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="SampleFormat-enum">
<db:title>enum QAudioFormat::SampleFormat</db:title>
<db:enumsynopsis>
<db:enumname>SampleFormat</db:enumname>
<db:enumitem>
<db:enumidentifier>Unknown</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UInt8</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Int16</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Int32</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Float</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NSampleFormats</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Qt will always expect and use samples in the endianness of the host platform. When processing audio data from external sources yourself, ensure you convert them to the correct endianness before writing them to a <db:link xlink:href="qaudiosink.xml">QAudioSink</db:link> or <db:link xlink:href="qaudiobuffer.xml">QAudioBuffer</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Not Set</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::UInt8</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Samples are 8 bit unsigned integers</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::Int16</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Samples are 16 bit signed integers</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::Int32</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Samples are 32 bit signed integers</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::Float</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Samples are floats</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAudioFormat">
<db:title>[default] QAudioFormat::QAudioFormat()</db:title>
<db:constructorsynopsis>
<db:methodname>QAudioFormat</db:methodname>
<db:void/>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioFormat() = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new audio format.</db:para>
<db:para>Values are initialized as follows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qaudioformat.xml#sampleRate">sampleRate</db:link>() = 0</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaudioformat.xml#channelCount">channelCount</db:link>() = 0</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaudioformat.xml#sampleFormat">sampleFormat</db:link>() = <db:link xlink:href="qaudioformat.xml#SampleFormat-enum">QAudioFormat::Unknown</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="QAudioFormat-1">
<db:title>[default] QAudioFormat::QAudioFormat(const QAudioFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAudioFormat</db:methodname>
<db:methodparam>
<db:type>const QAudioFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioFormat(const QAudioFormat &amp;other) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a new audio format using <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAudioFormat">
<db:title>[default] QAudioFormat::~QAudioFormat()</db:title>
<db:destructorsynopsis>
<db:methodname>~QAudioFormat</db:methodname>
<db:void/>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAudioFormat() = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroy this audio format.</db:para>
</db:section>
<db:section xml:id="bytesForDuration">
<db:title>qint32 QAudioFormat::bytesForDuration(qint64 <db:emphasis>microseconds</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint32</db:type>
<db:methodname>bytesForDuration</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>microseconds</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint32 bytesForDuration(qint64 microseconds) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of bytes required for this audio format for <db:code role="parameter">microseconds</db:code>.</db:para>
<db:para>Returns 0 if this format is not valid.</db:para>
<db:para>Note that some rounding may occur if <db:code role="parameter">microseconds</db:code> is not an exact fraction of the <db:link xlink:href="qaudioformat.xml#sampleRate">sampleRate</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#durationForBytes">durationForBytes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bytesForFrames">
<db:title>qint32 QAudioFormat::bytesForFrames(qint32 <db:emphasis>frameCount</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint32</db:type>
<db:methodname>bytesForFrames</db:methodname>
<db:methodparam>
<db:type>qint32</db:type>
<db:parameter>frameCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint32 bytesForFrames(qint32 frameCount) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of bytes required for <db:code role="parameter">frameCount</db:code> frames of this format.</db:para>
<db:para>Returns 0 if this format is not valid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#bytesForDuration">bytesForDuration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bytesPerFrame">
<db:title>[constexpr] int QAudioFormat::bytesPerFrame() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>bytesPerFrame</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int bytesPerFrame() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of bytes required to represent one frame (a sample in each channel) in this format.</db:para>
<db:para>Returns 0 if this format is invalid.</db:para>
</db:section>
<db:section xml:id="bytesPerSample">
<db:title>[constexpr] int QAudioFormat::bytesPerSample() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>bytesPerSample</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int bytesPerSample() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of bytes required to represent one sample in this format.</db:para>
<db:para>Returns 0 if this format is invalid.</db:para>
</db:section>
<db:section xml:id="channelConfig">
<db:title>[static constexpr] QAudioFormat::ChannelConfig QAudioFormat::channelConfig(Args... <db:emphasis>channels</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QAudioFormat::ChannelConfig</db:type>
<db:methodname>channelConfig</db:methodname>
<db:methodparam>
<db:type>Args...</db:type>
<db:parameter>channels</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioFormat::ChannelConfig channelConfig(Args... channels)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current channel configuration for the given <db:code role="parameter">channels</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#setChannelConfig">setChannelConfig</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="channelConfig-1">
<db:title>[constexpr] QAudioFormat::ChannelConfig QAudioFormat::channelConfig() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAudioFormat::ChannelConfig</db:type>
<db:methodname>channelConfig</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioFormat::ChannelConfig channelConfig() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current channel configuration.</db:para>
</db:section>
<db:section xml:id="channelCount">
<db:title>[constexpr] int QAudioFormat::channelCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>channelCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int channelCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current channel count value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#setChannelCount">setChannelCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="channelOffset">
<db:title>int QAudioFormat::channelOffset(QAudioFormat::AudioChannelPosition <db:emphasis>channel</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>channelOffset</db:methodname>
<db:methodparam>
<db:type>QAudioFormat::AudioChannelPosition</db:type>
<db:parameter>channel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int channelOffset(QAudioFormat::AudioChannelPosition channel) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of a certain audio <db:code role="parameter">channel</db:code> inside an audio frame for the given format. Returns -1 if the channel does not exist for this format or the channel configuration is unknown.</db:para>
</db:section>
<db:section xml:id="defaultChannelConfigForChannelCount">
<db:title>[static] QAudioFormat::ChannelConfig QAudioFormat::defaultChannelConfigForChannelCount(int <db:emphasis>channelCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QAudioFormat::ChannelConfig</db:type>
<db:methodname>defaultChannelConfigForChannelCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>channelCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioFormat::ChannelConfig defaultChannelConfigForChannelCount(int channelCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a default channel configuration for <db:code role="parameter">channelCount</db:code>.</db:para>
<db:para>Default configurations are defined for up to 8 channels, and correspond to standard Mono, Stereo and Surround configurations. For higher channel counts, this simply uses the first <db:code role="parameter">channelCount</db:code> audio channels defined in <db:link xlink:href="qaudioformat.xml#AudioChannelPosition-enum">QAudioFormat::AudioChannelPosition</db:link>.</db:para>
</db:section>
<db:section xml:id="durationForBytes">
<db:title>qint64 QAudioFormat::durationForBytes(qint32 <db:emphasis>bytes</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>durationForBytes</db:methodname>
<db:methodparam>
<db:type>qint32</db:type>
<db:parameter>bytes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 durationForBytes(qint32 bytes) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of microseconds represented by <db:code role="parameter">bytes</db:code> in this format.</db:para>
<db:para>Returns 0 if this format is not valid.</db:para>
<db:para>Note that some rounding may occur if <db:code role="parameter">bytes</db:code> is not an exact multiple of the number of bytes per frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#bytesForDuration">bytesForDuration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="durationForFrames">
<db:title>qint64 QAudioFormat::durationForFrames(qint32 <db:emphasis>frameCount</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>durationForFrames</db:methodname>
<db:methodparam>
<db:type>qint32</db:type>
<db:parameter>frameCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 durationForFrames(qint32 frameCount) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the number of microseconds represented by <db:code role="parameter">frameCount</db:code> frames in this format.</db:para>
</db:section>
<db:section xml:id="framesForBytes">
<db:title>qint32 QAudioFormat::framesForBytes(qint32 <db:emphasis>byteCount</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint32</db:type>
<db:methodname>framesForBytes</db:methodname>
<db:methodparam>
<db:type>qint32</db:type>
<db:parameter>byteCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint32 framesForBytes(qint32 byteCount) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of frames represented by <db:code role="parameter">byteCount</db:code> in this format.</db:para>
<db:para>Note that some rounding may occur if <db:code role="parameter">byteCount</db:code> is not an exact multiple of the number of bytes per frame.</db:para>
<db:para>Each frame has one sample per channel.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#framesForDuration">framesForDuration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="framesForDuration">
<db:title>qint32 QAudioFormat::framesForDuration(qint64 <db:emphasis>microseconds</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint32</db:type>
<db:methodname>framesForDuration</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>microseconds</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint32 framesForDuration(qint64 microseconds) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of frames required to represent <db:code role="parameter">microseconds</db:code> in this format.</db:para>
<db:para>Note that some rounding may occur if <db:code role="parameter">microseconds</db:code> is not an exact fraction of the <db:link xlink:href="qaudioformat.xml#sampleRate">sampleRate</db:link>().</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>[constexpr] bool QAudioFormat::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if all of the parameters are valid.</db:para>
</db:section>
<db:section xml:id="normalizedSampleValue">
<db:title>float QAudioFormat::normalizedSampleValue(const void *<db:emphasis>sample</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>normalizedSampleValue</db:methodname>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>sample</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float normalizedSampleValue(const void *sample) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Normalizes the <db:code role="parameter">sample</db:code> value to a number between -1 and 1. The method depends on the QaudioFormat.</db:para>
</db:section>
<db:section xml:id="sampleFormat">
<db:title>[constexpr] QAudioFormat::SampleFormat QAudioFormat::sampleFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAudioFormat::SampleFormat</db:type>
<db:methodname>sampleFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioFormat::SampleFormat sampleFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current sample format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#setSampleFormat">setSampleFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sampleRate">
<db:title>[constexpr] int QAudioFormat::sampleRate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>sampleRate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int sampleRate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current sample rate in Hertz.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#setSampleRate">setSampleRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setChannelConfig">
<db:title>void QAudioFormat::setChannelConfig(QAudioFormat::ChannelConfig <db:emphasis>config</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setChannelConfig</db:methodname>
<db:methodparam>
<db:type>QAudioFormat::ChannelConfig</db:type>
<db:parameter>config</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setChannelConfig(QAudioFormat::ChannelConfig config)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the channel configuration to <db:code role="parameter">config</db:code>.</db:para>
<db:para>Sets the channel configuration of the audio format to one of the standard audio channel configurations.</db:para>
<db:note>
<db:para>that this will also modify the channel count.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#channelConfig-1">channelConfig</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setChannelCount">
<db:title>[constexpr] void QAudioFormat::setChannelCount(int <db:emphasis>channels</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setChannelCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>channels</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setChannelCount(int channels)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the channel count to <db:code role="parameter">channels</db:code>. Setting this also sets the channel config to <db:link xlink:href="qaudioformat.xml#ChannelConfig-enum">ChannelConfigUnknown</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#channelCount">channelCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSampleFormat">
<db:title>[constexpr] void QAudioFormat::setSampleFormat(QAudioFormat::SampleFormat <db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSampleFormat</db:methodname>
<db:methodparam>
<db:type>QAudioFormat::SampleFormat</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSampleFormat(QAudioFormat::SampleFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the sample format to <db:code role="parameter">format</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#sampleFormat">sampleFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qaudioformat.xml#SampleFormat-enum">QAudioFormat::SampleFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSampleRate">
<db:title>[constexpr] void QAudioFormat::setSampleRate(int <db:emphasis>samplerate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSampleRate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>samplerate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSampleRate(int samplerate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the sample rate to <db:code role="parameter">samplerate</db:code> in Hertz.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#sampleRate">sampleRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QAudioFormat &amp;<db:emphasis>a</db:emphasis>, const QAudioFormat &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QAudioFormat &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QAudioFormat &amp;</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QAudioFormat &amp;a, const QAudioFormat &amp;b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if audio format <db:code role="parameter">a</db:code> is not equal to <db:code role="parameter">b</db:code>, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QAudioFormat &amp;<db:emphasis>a</db:emphasis>, const QAudioFormat &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QAudioFormat &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QAudioFormat &amp;</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QAudioFormat &amp;a, const QAudioFormat &amp;b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if audio format <db:code role="parameter">a</db:code> is equal to <db:code role="parameter">b</db:code>, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
