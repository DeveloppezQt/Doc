<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAudioFormat Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> class stores audio stream parameter information.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAudioFormat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAudioFormat is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_audio</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An audio format specifies how data in an audio stream is arranged, i.e, how the stream is to be interpreted. The encoding itself is specified by the <db:link xlink:href="qaudioformat.xml#codec">codec</db:link>() used for the stream.</db:para>
<db:para>In addition to the encoding, <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> contains other parameters that further specify how the audio sample data is arranged. These are the frequency, the number of channels, the sample size, the sample type, and the byte order. The following table describes these in more detail.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Parameter</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Sample Rate</db:para>
</db:td>
<db:td>
<db:para>Samples per second of audio data in Hertz.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Number of channels</db:para>
</db:td>
<db:td>
<db:para>The number of audio channels (typically one for mono or two for stereo)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Sample size</db:para>
</db:td>
<db:td>
<db:para>How much data is stored in each sample (typically 8 or 16 bits)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Sample type</db:para>
</db:td>
<db:td>
<db:para>Numerical representation of sample (typically signed integer, unsigned integer or float)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Byte order</db:para>
</db:td>
<db:td>
<db:para>Byte ordering of sample (typically little endian, big endian)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This class is typically used in conjunction with <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link> or <db:link xlink:href="qaudiooutput.xml">QAudioOutput</db:link> to allow you to specify the parameters of the audio stream being read or written, or with <db:link xlink:href="qaudiobuffer.xml">QAudioBuffer</db:link> when dealing with samples in memory.</db:para>
<db:para>You can obtain audio formats compatible with the audio device used through functions in <db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link>. This class also lets you query available parameter values for a device, so that you can set the parameters yourself. See the <db:link xlink:href="qaudiodeviceinfo.xml">QAudioDeviceInfo</db:link> class description for details. You need to know the format of the audio streams you wish to play or record.</db:para>
<db:para>In the common case of interleaved linear PCM data, the codec will be &quot;audio/pcm&quot;, and the samples for all channels will be interleaved. One sample for each channel for the same instant in time is referred to as a frame in Qt Multimedia (and other places).</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Endian-enum">
<db:title>enum QAudioFormat::Endian</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::BigEndian</db:code></db:para>
</db:td>
<db:td><db:code>QSysInfo::BigEndian</db:code></db:td>
<db:td>
<db:para>Samples are big endian byte order</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::LittleEndian</db:code></db:para>
</db:td>
<db:td><db:code>QSysInfo::LittleEndian</db:code></db:td>
<db:td>
<db:para>Samples are little endian byte order</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="SampleType-enum">
<db:title>enum QAudioFormat::SampleType</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Not Set</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::SignedInt</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Samples are signed integers</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::UnSignedInt</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Samples are unsigned intergers</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link></db:emphasis>::Float</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Samples are floats</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAudioFormat">
<db:title>QAudioFormat::QAudioFormat()</db:title>
<db:para>Construct a new audio format.</db:para>
<db:para>Values are initialized as follows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qaudioformat.xml#sampleRate">sampleRate</db:link>() = -1</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaudioformat.xml#channelCount">channelCount</db:link>() = -1</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaudioformat.xml#sampleSize">sampleSize</db:link>() = -1</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaudioformat.xml#byteOrder">byteOrder</db:link>() = <db:link xlink:href="qaudioformat.xml#Endian-enum">QAudioFormat::Endian</db:link>(<db:link xlink:href="qsysinfo.xml#Endian-enum">QSysInfo::ByteOrder</db:link>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaudioformat.xml#sampleType">sampleType</db:link>() = <db:link xlink:href="qaudioformat.xml#SampleType-enum">QAudioFormat::Unknown</db:link> <db:code>codec()</db:code> = &quot;&quot;</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="QAudioFormat-1">
<db:title>QAudioFormat::QAudioFormat(const QAudioFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Construct a new audio format using <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAudioFormat">
<db:title>[noexcept] QAudioFormat::~QAudioFormat()</db:title>
<db:para>Destroy this audio format.</db:para>
</db:section>
<db:section xml:id="byteOrder">
<db:title>QAudioFormat::Endian QAudioFormat::byteOrder() const</db:title>
<db:para>Returns the current byteOrder value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#setByteOrder">setByteOrder</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bytesForDuration">
<db:title>qint32 QAudioFormat::bytesForDuration(qint64 <db:emphasis>duration</db:emphasis>) const</db:title>
<db:para>Returns the number of bytes required for this audio format for <db:code role="parameter">duration</db:code> microseconds.</db:para>
<db:para>Returns 0 if this format is not valid.</db:para>
<db:para>Note that some rounding may occur if <db:code role="parameter">duration</db:code> is not an exact fraction of the <db:link xlink:href="qaudioformat.xml#sampleRate">sampleRate</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#durationForBytes">durationForBytes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bytesForFrames">
<db:title>qint32 QAudioFormat::bytesForFrames(qint32 <db:emphasis>frameCount</db:emphasis>) const</db:title>
<db:para>Returns the number of bytes required for <db:code role="parameter">frameCount</db:code> frames of this format.</db:para>
<db:para>Returns 0 if this format is not valid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#bytesForDuration">bytesForDuration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bytesPerFrame">
<db:title>int QAudioFormat::bytesPerFrame() const</db:title>
<db:para>Returns the number of bytes required to represent one frame (a sample in each channel) in this format.</db:para>
<db:para>Returns 0 if this format is invalid.</db:para>
</db:section>
<db:section xml:id="channelCount">
<db:title>int QAudioFormat::channelCount() const</db:title>
<db:para>Returns the current channel count value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#setChannelCount">setChannelCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="codec">
<db:title>QString QAudioFormat::codec() const</db:title>
<db:para>Returns the current codec identifier.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#setCodec">setCodec</db:link>()</db:member>
<db:member><db:link xlink:href="qaudiodeviceinfo.xml#supportedCodecs">QAudioDeviceInfo::supportedCodecs</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="durationForBytes">
<db:title>qint64 QAudioFormat::durationForBytes(qint32 <db:emphasis>bytes</db:emphasis>) const</db:title>
<db:para>Returns the number of microseconds represented by <db:code role="parameter">bytes</db:code> in this format.</db:para>
<db:para>Returns 0 if this format is not valid.</db:para>
<db:para>Note that some rounding may occur if <db:code role="parameter">bytes</db:code> is not an exact multiple of the number of bytes per frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#bytesForDuration">bytesForDuration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="durationForFrames">
<db:title>qint64 QAudioFormat::durationForFrames(qint32 <db:emphasis>frameCount</db:emphasis>) const</db:title>
<db:para>Return the number of microseconds represented by <db:code role="parameter">frameCount</db:code> frames in this format.</db:para>
</db:section>
<db:section xml:id="framesForBytes">
<db:title>qint32 QAudioFormat::framesForBytes(qint32 <db:emphasis>byteCount</db:emphasis>) const</db:title>
<db:para>Returns the number of frames represented by <db:code role="parameter">byteCount</db:code> in this format.</db:para>
<db:para>Note that some rounding may occur if <db:code role="parameter">byteCount</db:code> is not an exact multiple of the number of bytes per frame.</db:para>
<db:para>Each frame has one sample per channel.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#framesForDuration">framesForDuration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="framesForDuration">
<db:title>qint32 QAudioFormat::framesForDuration(qint64 <db:emphasis>duration</db:emphasis>) const</db:title>
<db:para>Returns the number of frames required to represent <db:code role="parameter">duration</db:code> microseconds in this format.</db:para>
<db:para>Note that some rounding may occur if <db:code role="parameter">duration</db:code> is not an exact fraction of the <db:link xlink:href="qaudioformat.xml#sampleRate">sampleRate</db:link>().</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QAudioFormat::isValid() const</db:title>
<db:para>Returns true if all of the parameters are valid.</db:para>
</db:section>
<db:section xml:id="sampleRate">
<db:title>int QAudioFormat::sampleRate() const</db:title>
<db:para>Returns the current sample rate in Hertz.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#setSampleRate">setSampleRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sampleSize">
<db:title>int QAudioFormat::sampleSize() const</db:title>
<db:para>Returns the current sample size value, in bits.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#setSampleSize">setSampleSize</db:link>()</db:member>
<db:member><db:link xlink:href="qaudioformat.xml#bytesPerFrame">bytesPerFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sampleType">
<db:title>QAudioFormat::SampleType QAudioFormat::sampleType() const</db:title>
<db:para>Returns the current <db:link xlink:href="qaudioformat.xml#SampleType-enum">SampleType</db:link> value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#setSampleType">setSampleType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setByteOrder">
<db:title>void QAudioFormat::setByteOrder(QAudioFormat::Endian <db:emphasis>byteOrder</db:emphasis>)</db:title>
<db:para>Sets the <db:link xlink:href="qaudioformat.xml#byteOrder">byteOrder</db:link> to <db:code role="parameter">byteOrder</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#byteOrder">byteOrder</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setChannelCount">
<db:title>void QAudioFormat::setChannelCount(int <db:emphasis>channels</db:emphasis>)</db:title>
<db:para>Sets the channel count to <db:code role="parameter">channels</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#channelCount">channelCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCodec">
<db:title>void QAudioFormat::setCodec(const QString &amp;<db:emphasis>codec</db:emphasis>)</db:title>
<db:para>Sets the codec to <db:code role="parameter">codec</db:code>.</db:para>
<db:para>The parameter to this function should be one of the types reported by the <db:link xlink:href="qaudiodeviceinfo.xml#supportedCodecs">QAudioDeviceInfo::supportedCodecs</db:link>() function for the audio device you are working with.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#codec">codec</db:link>()</db:member>
<db:member><db:link xlink:href="qaudiodeviceinfo.xml#supportedCodecs">QAudioDeviceInfo::supportedCodecs</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSampleRate">
<db:title>void QAudioFormat::setSampleRate(int <db:emphasis>samplerate</db:emphasis>)</db:title>
<db:para>Sets the sample rate to <db:code role="parameter">samplerate</db:code> Hertz.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#sampleRate">sampleRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSampleSize">
<db:title>void QAudioFormat::setSampleSize(int <db:emphasis>sampleSize</db:emphasis>)</db:title>
<db:para>Sets the sample size to the <db:code role="parameter">sampleSize</db:code> specified, in bits.</db:para>
<db:para>This is typically 8 or 16, but some systems may support higher sample sizes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#sampleSize">sampleSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSampleType">
<db:title>void QAudioFormat::setSampleType(QAudioFormat::SampleType <db:emphasis>sampleType</db:emphasis>)</db:title>
<db:para>Sets the <db:link xlink:href="qaudioformat.xml#sampleType">sampleType</db:link> to <db:code role="parameter">sampleType</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioformat.xml#sampleType">sampleType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QAudioFormat::operator!=(const QAudioFormat &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> is not equal to the <db:code role="parameter">other</db:code> <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link>; otherwise returns false.</db:para>
<db:para>All elements of <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> are used for the comparison.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QAudioFormat &amp;QAudioFormat::operator=(const QAudioFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> implementation.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QAudioFormat::operator==(const QAudioFormat &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> is equal to the <db:code role="parameter">other</db:code> <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link>; otherwise returns false.</db:para>
<db:para>All elements of <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> are used for the comparison.</db:para>
</db:section>
</db:section>
</db:article>
