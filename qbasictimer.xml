<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBasicTimer Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbasictimer.xml">QBasicTimer</db:link> class provides timer events for objects.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBasicTimer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QBasicTimer is part of <db:simplelist><db:member><db:link xlink:href="events.xml">Event Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This is a fast, lightweight, and low-level class used by Qt internally. We recommend using the higher-level <db:link xlink:href="qtimer.xml">QTimer</db:link> class rather than this class if you want to use timers in your applications. Note that this timer is a repeating timer that will send subsequent timer events unless the <db:link xlink:href="qbasictimer.xml#stop">stop</db:link>() function is called.</db:para>
<db:para>To use this class, create a <db:link xlink:href="qbasictimer.xml">QBasicTimer</db:link>, and call its start() function with a timeout interval and with a pointer to a <db:link xlink:href="qobject.xml">QObject</db:link> subclass. When the timer times out it will send a timer event to the <db:link xlink:href="qobject.xml">QObject</db:link> subclass. The timer can be stopped at any time using <db:link xlink:href="qbasictimer.xml#stop">stop</db:link>(). <db:link xlink:href="qbasictimer.xml#isActive">isActive</db:link>() returns true for a timer that is running; i.e. it has been started, has not reached the timeout time, and has not been stopped. The timer's ID can be retrieved using <db:link xlink:href="qbasictimer.xml#timerId">timerId</db:link>().</db:para>
<db:para>Objects of this class cannot be copied, but can be moved, so you can maintain a list of basic timers by holding them in container that supports move-only types, e.g. std::vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml">QTimer</db:link></db:member>
<db:member><db:link xlink:href="qtimerevent.xml">QTimerEvent</db:link></db:member>
<db:member><db:link xlink:href="qobject.xml#timerEvent">QObject::timerEvent</db:link>()</db:member>
<db:member><db:link xlink:href="timers.xml">Timers</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-painting-affine-example.xml">Affine Transformations</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBasicTimer-1">
<db:title>[constexpr] QBasicTimer::QBasicTimer()</db:title>
<db:constructorsynopsis>
<db:methodname>QBasicTimer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QBasicTimer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a basic timer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbasictimer.xml#start" role="deprecated">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBasicTimer-2">
<db:title>QBasicTimer::QBasicTimer(QBasicTimer &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QBasicTimer</db:methodname>
<db:methodparam>
<db:type>QBasicTimer &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QBasicTimer(QBasicTimer &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a basic timer from <db:code role="parameter">other</db:code>, which is left <db:link xlink:href="qbasictimer.xml#isActive">inactive</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbasictimer.xml#isActive">isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qbasictimer.xml#swap">swap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QBasicTimer">
<db:title>QBasicTimer::~QBasicTimer()</db:title>
<db:destructorsynopsis>
<db:methodname>~QBasicTimer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QBasicTimer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the basic timer.</db:para>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QBasicTimer::isActive() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isActive</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isActive() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the timer is running and has not been stopped; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbasictimer.xml#start" role="deprecated">start</db:link>()</db:member>
<db:member><db:link xlink:href="qbasictimer.xml#stop">stop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start-2">
<db:title>[since 6.5] void QBasicTimer::start(std::chrono::milliseconds <db:emphasis>duration</db:emphasis>, QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>start</db:methodname>
<db:methodparam>
<db:type>std::chrono::milliseconds</db:type>
<db:parameter>duration</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void start(std::chrono::milliseconds duration, QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts (or restarts) the timer with a <db:code role="parameter">duration</db:code> timeout. The timer will be a <db:link xlink:href="qt.xml#TimerType-enum">Qt::CoarseTimer</db:link>. See <db:link xlink:href="qt.xml#TimerType-enum">Qt::TimerType</db:link> for information on the different timer types.</db:para>
<db:para>The given <db:code role="parameter">object</db:code> will receive timer events.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbasictimer.xml#stop">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qbasictimer.xml#isActive">isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#timerEvent">QObject::timerEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimerType-enum">Qt::CoarseTimer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start-3">
<db:title>[since 6.5] void QBasicTimer::start(std::chrono::milliseconds <db:emphasis>duration</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis>, QObject *<db:emphasis>obj</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>start</db:methodname>
<db:methodparam>
<db:type>std::chrono::milliseconds</db:type>
<db:parameter>duration</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>timerType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void start(std::chrono::milliseconds duration, Qt::TimerType timerType, QObject *obj)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts (or restarts) the timer with a <db:code role="parameter">duration</db:code> timeout and the given <db:code role="parameter">timerType</db:code>. See <db:link xlink:href="qt.xml#TimerType-enum">Qt::TimerType</db:link> for information on the different timer types.</db:para>
<db:para><db:code role="parameter">obj</db:code> will receive timer events.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbasictimer.xml#stop">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qbasictimer.xml#isActive">isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#timerEvent">QObject::timerEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimerType-enum">Qt::TimerType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop">
<db:title>void QBasicTimer::stop()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops the timer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbasictimer.xml#start" role="deprecated">start</db:link>()</db:member>
<db:member><db:link xlink:href="qbasictimer.xml#isActive">isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QBasicTimer::swap(QBasicTimer &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QBasicTimer &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QBasicTimer &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the timer <db:code role="parameter">other</db:code> with this timer. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="timerId">
<db:title>int QBasicTimer::timerId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>timerId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int timerId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the timer's ID.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimerevent.xml#timerId">QTimerEvent::timerId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QBasicTimer &amp;QBasicTimer::operator=(QBasicTimer &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QBasicTimer &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QBasicTimer &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QBasicTimer &amp; operator=(QBasicTimer &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this basic timer. The timer previously represented by this basic timer is stopped. <db:code role="parameter">other</db:code> is left as <db:link xlink:href="qbasictimer.xml#isActive">inactive</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbasictimer.xml#stop">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qbasictimer.xml#isActive">isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qbasictimer.xml#swap">swap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="swap-1">
<db:title>void swap(QBasicTimer &amp;<db:emphasis>lhs</db:emphasis>, QBasicTimer &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QBasicTimer &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBasicTimer &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QBasicTimer &amp;lhs, QBasicTimer &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the timer <db:code role="parameter">lhs</db:code> with <db:code role="parameter">rhs</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QBasicTimer</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qbasictimer.xml">QBasicTimer</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="start">
<db:title>void QBasicTimer::start(int <db:emphasis>msec</db:emphasis>, QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>start</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msec</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void start(int msec, QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use chrono overload instead.</db:para>
</db:section>
<db:section xml:id="start-1">
<db:title>void QBasicTimer::start(int <db:emphasis>msec</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis>, QObject *<db:emphasis>obj</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>start</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msec</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimerType</db:type>
<db:parameter>timerType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void start(int msec, Qt::TimerType timerType, QObject *obj)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Use chrono overload instead.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
