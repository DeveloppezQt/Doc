<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QXmlDefaultHandler Class</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmldefaulthandler.xml">QXmlDefaultHandler</db:link> class provides a default implementation of all the XML handler classes.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlDefaultHandler</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qxmlcontenthandler.xml" xlink:role="class">QXmlContentHandler</db:link>, <db:link xlink:href="qxmlerrorhandler.xml" xlink:role="class">QXmlErrorHandler</db:link>, <db:link xlink:href="qxmldtdhandler.xml" xlink:role="class">QXmlDTDHandler</db:link>, <db:link xlink:href="qxmlentityresolver.xml" xlink:role="class">QXmlEntityResolver</db:link>, <db:link xlink:href="qxmllexicalhandler.xml" xlink:role="class">QXmlLexicalHandler</db:link>, and <db:link xlink:href="qxmldeclhandler.xml" xlink:role="class">QXmlDeclHandler</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlDefaultHandler is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class gathers together the features of the specialized handler classes, making it a convenient starting point when implementing custom handlers for subclasses of <db:link xlink:href="qxmlreader.xml">QXmlReader</db:link>, particularly <db:link xlink:href="qxmlsimplereader.xml">QXmlSimpleReader</db:link>. The virtual functions from each of the base classes are reimplemented in this class, providing sensible default behavior for many common cases. By subclassing this class, and overriding these functions, you can concentrate on implementing the parts of the handler relevant to your application.</db:para>
<db:para>The XML reader must be told which handler to use for different kinds of events during parsing. This means that, although <db:link xlink:href="qxmldefaulthandler.xml">QXmlDefaultHandler</db:link> provides default implementations of functions inherited from all its base classes, we can still use specialized handlers for particular kinds of events.</db:para>
<db:para>For example, <db:link xlink:href="qxmldefaulthandler.xml">QXmlDefaultHandler</db:link> subclasses both <db:link xlink:href="qxmlcontenthandler.xml">QXmlContentHandler</db:link> and <db:link xlink:href="qxmlerrorhandler.xml">QXmlErrorHandler</db:link>, so by subclassing it we can use the same handler for both of the following reader functions:</db:para>
<db:programlisting language="cpp">    xmlReader.setContentHandler(handler);
    xmlReader.setErrorHandler(handler);
</db:programlisting>
<db:para>Since the reader will inform the handler of parsing errors, it is necessary to reimplement <db:link xlink:href="qxmlerrorhandler.xml#fatalError">QXmlErrorHandler::fatalError</db:link>() if, for example, we want to stop parsing when such an error occurs:</db:para>
<db:programlisting language="cpp">bool Handler::fatalError (const QXmlParseException &amp; exception)
{
    qWarning() &lt;&lt; &quot;Fatal error on line&quot; &lt;&lt; exception.lineNumber()
               &lt;&lt; &quot;, column&quot; &lt;&lt; exception.columnNumber() &lt;&lt; &quot;:&quot;
               &lt;&lt; exception.message();

    return false;
}
</db:programlisting>
<db:para>The above function returns false, which tells the reader to stop parsing. To continue to use the same reader, it is necessary to create a new handler instance, and set up the reader to use it in the manner described above.</db:para>
<db:para>It is useful to examine some of the functions inherited by <db:link xlink:href="qxmldefaulthandler.xml">QXmlDefaultHandler</db:link>, and consider why they might be reimplemented in a custom handler. Custom handlers will typically reimplement <db:link xlink:href="qxmlcontenthandler.xml#startDocument">QXmlContentHandler::startDocument</db:link>() to prepare the handler for new content. Document elements and the text within them can be processed by reimplementing <db:link xlink:href="qxmlcontenthandler.xml#startElement">QXmlContentHandler::startElement</db:link>(), <db:link xlink:href="qxmlcontenthandler.xml#endElement">QXmlContentHandler::endElement</db:link>(), and <db:link xlink:href="qxmlcontenthandler.xml#characters">QXmlContentHandler::characters</db:link>(). You may want to reimplement <db:link xlink:href="qxmlcontenthandler.xml#endDocument">QXmlContentHandler::endDocument</db:link>() to perform some finalization or validation on the content once the document has been read completely.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmldtdhandler.xml">QXmlDTDHandler</db:link></db:member>
<db:member><db:link xlink:href="qxmldeclhandler.xml">QXmlDeclHandler</db:link></db:member>
<db:member><db:link xlink:href="qxmlcontenthandler.xml">QXmlContentHandler</db:link></db:member>
<db:member><db:link xlink:href="qxmlentityresolver.xml">QXmlEntityResolver</db:link></db:member>
<db:member><db:link xlink:href="qxmlerrorhandler.xml">QXmlErrorHandler</db:link></db:member>
<db:member><db:link xlink:href="qxmllexicalhandler.xml">QXmlLexicalHandler</db:link></db:member>
<db:member><db:link xlink:href="xml-sax.xml#introduction-to-sax2">Introduction to SAX2</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlDefaultHandler">
<db:title>QXmlDefaultHandler::QXmlDefaultHandler()</db:title>
<db:para>Constructs a handler for use with subclasses of <db:link xlink:href="qxmlreader.xml">QXmlReader</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QXmlDefaultHandler">
<db:title>[virtual noexcept] QXmlDefaultHandler::~QXmlDefaultHandler()</db:title>
<db:para>Destroys the handler.</db:para>
</db:section>
<db:section xml:id="attributeDecl">
<db:title>[override virtual] bool QXmlDefaultHandler::attributeDecl(const QString &amp;<db:emphasis>eName</db:emphasis>, const QString &amp;<db:emphasis>aName</db:emphasis>, const QString &amp;<db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>valueDefault</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmldeclhandler.xml#attributeDecl" role="function">QXmlDeclHandler::attributeDecl(const QString &amp;eName, const QString &amp;aName, const QString &amp;type, const QString &amp;valueDefault, const QString &amp;value)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="characters">
<db:title>[override virtual] bool QXmlDefaultHandler::characters(const QString &amp;<db:emphasis>ch</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlcontenthandler.xml#characters" role="function">QXmlContentHandler::characters(const QString &amp;ch)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="comment">
<db:title>[override virtual] bool QXmlDefaultHandler::comment(const QString &amp;<db:emphasis>ch</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmllexicalhandler.xml#comment" role="function">QXmlLexicalHandler::comment(const QString &amp;ch)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="endCDATA">
<db:title>[override virtual] bool QXmlDefaultHandler::endCDATA()</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmllexicalhandler.xml#endCDATA" role="function">QXmlLexicalHandler::endCDATA()</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="endDTD">
<db:title>[override virtual] bool QXmlDefaultHandler::endDTD()</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmllexicalhandler.xml#endDTD" role="function">QXmlLexicalHandler::endDTD()</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="endDocument">
<db:title>[override virtual] bool QXmlDefaultHandler::endDocument()</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlcontenthandler.xml#endDocument" role="function">QXmlContentHandler::endDocument()</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="endElement">
<db:title>[override virtual] bool QXmlDefaultHandler::endElement(const QString &amp;<db:emphasis>namespaceURI</db:emphasis>, const QString &amp;<db:emphasis>localName</db:emphasis>, const QString &amp;<db:emphasis>qName</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlcontenthandler.xml#endElement" role="function">QXmlContentHandler::endElement(const QString &amp;namespaceURI, const QString &amp;localName, const QString &amp;qName)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="endEntity">
<db:title>[override virtual] bool QXmlDefaultHandler::endEntity(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmllexicalhandler.xml#endEntity" role="function">QXmlLexicalHandler::endEntity(const QString &amp;name)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="endPrefixMapping">
<db:title>[override virtual] bool QXmlDefaultHandler::endPrefixMapping(const QString &amp;<db:emphasis>prefix</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlcontenthandler.xml#endPrefixMapping" role="function">QXmlContentHandler::endPrefixMapping(const QString &amp;prefix)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>[override virtual] bool QXmlDefaultHandler::error(const QXmlParseException &amp;<db:emphasis>exception</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlerrorhandler.xml#error" role="function">QXmlErrorHandler::error(const QXmlParseException &amp;exception)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="errorString">
<db:title>[override virtual] QString QXmlDefaultHandler::errorString() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlcontenthandler.xml#errorString" role="function">QXmlContentHandler::errorString() const</db:link>.</db:para>
<db:para>Returns the default error string.</db:para>
</db:section>
<db:section xml:id="externalEntityDecl">
<db:title>[override virtual] bool QXmlDefaultHandler::externalEntityDecl(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>publicId</db:emphasis>, const QString &amp;<db:emphasis>systemId</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmldeclhandler.xml#externalEntityDecl" role="function">QXmlDeclHandler::externalEntityDecl(const QString &amp;name, const QString &amp;publicId, const QString &amp;systemId)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="fatalError">
<db:title>[override virtual] bool QXmlDefaultHandler::fatalError(const QXmlParseException &amp;<db:emphasis>exception</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlerrorhandler.xml#fatalError" role="function">QXmlErrorHandler::fatalError(const QXmlParseException &amp;exception)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="ignorableWhitespace">
<db:title>[override virtual] bool QXmlDefaultHandler::ignorableWhitespace(const QString &amp;<db:emphasis>ch</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlcontenthandler.xml#ignorableWhitespace" role="function">QXmlContentHandler::ignorableWhitespace(const QString &amp;ch)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="internalEntityDecl">
<db:title>[override virtual] bool QXmlDefaultHandler::internalEntityDecl(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmldeclhandler.xml#internalEntityDecl" role="function">QXmlDeclHandler::internalEntityDecl(const QString &amp;name, const QString &amp;value)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="notationDecl">
<db:title>[override virtual] bool QXmlDefaultHandler::notationDecl(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>publicId</db:emphasis>, const QString &amp;<db:emphasis>systemId</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmldtdhandler.xml#notationDecl" role="function">QXmlDTDHandler::notationDecl(const QString &amp;name, const QString &amp;publicId, const QString &amp;systemId)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="processingInstruction">
<db:title>[override virtual] bool QXmlDefaultHandler::processingInstruction(const QString &amp;<db:emphasis>target</db:emphasis>, const QString &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlcontenthandler.xml#processingInstruction" role="function">QXmlContentHandler::processingInstruction(const QString &amp;target, const QString &amp;data)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="resolveEntity">
<db:title>[override virtual] bool QXmlDefaultHandler::resolveEntity(const QString &amp;<db:emphasis>publicId</db:emphasis>, const QString &amp;<db:emphasis>systemId</db:emphasis>, QXmlInputSource *&amp;<db:emphasis>ret</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlentityresolver.xml#resolveEntity" role="function">QXmlEntityResolver::resolveEntity(const QString &amp;publicId, const QString &amp;systemId, QXmlInputSource *&amp;ret)</db:link>.</db:para>
<db:para>Sets <db:code role="parameter">ret</db:code> to 0, so that the reader uses the system identifier provided in the XML document.</db:para>
</db:section>
<db:section xml:id="setDocumentLocator">
<db:title>[override virtual] void QXmlDefaultHandler::setDocumentLocator(QXmlLocator *<db:emphasis>locator</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlcontenthandler.xml#setDocumentLocator" role="function">QXmlContentHandler::setDocumentLocator(QXmlLocator *locator)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="skippedEntity">
<db:title>[override virtual] bool QXmlDefaultHandler::skippedEntity(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlcontenthandler.xml#skippedEntity" role="function">QXmlContentHandler::skippedEntity(const QString &amp;name)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="startCDATA">
<db:title>[override virtual] bool QXmlDefaultHandler::startCDATA()</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmllexicalhandler.xml#startCDATA" role="function">QXmlLexicalHandler::startCDATA()</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="startDTD">
<db:title>[override virtual] bool QXmlDefaultHandler::startDTD(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>publicId</db:emphasis>, const QString &amp;<db:emphasis>systemId</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmllexicalhandler.xml#startDTD" role="function">QXmlLexicalHandler::startDTD(const QString &amp;name, const QString &amp;publicId, const QString &amp;systemId)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="startDocument">
<db:title>[override virtual] bool QXmlDefaultHandler::startDocument()</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlcontenthandler.xml#startDocument" role="function">QXmlContentHandler::startDocument()</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="startElement">
<db:title>[override virtual] bool QXmlDefaultHandler::startElement(const QString &amp;<db:emphasis>namespaceURI</db:emphasis>, const QString &amp;<db:emphasis>localName</db:emphasis>, const QString &amp;<db:emphasis>qName</db:emphasis>, const QXmlAttributes &amp;<db:emphasis>atts</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlcontenthandler.xml#startElement" role="function">QXmlContentHandler::startElement(const QString &amp;namespaceURI, const QString &amp;localName, const QString &amp;qName, const QXmlAttributes &amp;atts)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="startEntity">
<db:title>[override virtual] bool QXmlDefaultHandler::startEntity(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmllexicalhandler.xml#startEntity" role="function">QXmlLexicalHandler::startEntity(const QString &amp;name)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="startPrefixMapping">
<db:title>[override virtual] bool QXmlDefaultHandler::startPrefixMapping(const QString &amp;<db:emphasis>prefix</db:emphasis>, const QString &amp;<db:emphasis>uri</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlcontenthandler.xml#startPrefixMapping" role="function">QXmlContentHandler::startPrefixMapping(const QString &amp;prefix, const QString &amp;uri)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="unparsedEntityDecl">
<db:title>[override virtual] bool QXmlDefaultHandler::unparsedEntityDecl(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>publicId</db:emphasis>, const QString &amp;<db:emphasis>systemId</db:emphasis>, const QString &amp;<db:emphasis>notationName</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmldtdhandler.xml#unparsedEntityDecl" role="function">QXmlDTDHandler::unparsedEntityDecl(const QString &amp;name, const QString &amp;publicId, const QString &amp;systemId, const QString &amp;notationName)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
<db:section xml:id="warning">
<db:title>[override virtual] bool QXmlDefaultHandler::warning(const QXmlParseException &amp;<db:emphasis>exception</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qxmlerrorhandler.xml#warning" role="function">QXmlErrorHandler::warning(const QXmlParseException &amp;exception)</db:link>.</db:para>
<db:para>This reimplementation does nothing.</db:para>
</db:section>
</db:section>
</db:article>
