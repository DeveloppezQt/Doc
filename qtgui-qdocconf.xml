<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qtgui.qdocconf with notes</db:title>
<db:productname>QDoc</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:abstract>
<db:para>A walkthrough of a typical qdocconf file.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This document goes through a typical Qt 5 qdocconf file. The contents is taken from Qt GUI's <db:emphasis>qtgui.qdocconf</db:emphasis> file.</db:para>
<db:para>Below you will find the full contents of qtgui.qdocconf. The subsequent section will discuss every statement in the qdocconf file.</db:para>
<db:programlisting language="cpp" role="bad">include($QT_INSTALL_DOCS/global/qt-module-defaults.qdocconf)

project                 = QtGui
description             = Qt GUI Reference Documentation
url                     = http://doc.qt.io/qt-5
version                 = $QT_VERSION

examplesinstallpath     = gui

qhp.projects            = QtGui

qhp.QtGui.file         = qtgui.qhp
qhp.QtGui.namespace           = org.qt-project.qtgui.$QT_VERSION_TAG
qhp.QtGui.virtualFolder       = qtgui
qhp.QtGui.indexTitle          = Qt GUI
qhp.QtGui.indexRoot           =

qhp.QtGui.filterAttributes    = qtgui $QT_VERSION qtrefdoc
qhp.QtGui.customFilters.Qt.name = Qtgui $QT_VERSION
qhp.QtGui.customFilters.Qt.filterAttributes = qtgui $QT_VERSION

qhp.QtGui.subprojects         = classes
qhp.QtGui.subprojects.classes.title = C++ Classes
qhp.QtGui.subprojects.classes.indexTitle = Qt GUI C++ Classes
qhp.QtGui.subprojects.classes.selectors = class fake:headerfile
qhp.QtGui.subprojects.classes.sortPages = true

tagfile                 = ../../../doc/qtgui/qtgui.tags

depends += \
    qtcore \
    qtnetwork \
    qtopengl \
    qtsvg \
    qtqml \
    qtquick \
    qtwidgets \
    qtdoc

headerdirs  += ..

sourcedirs  += .. \
               ../../../examples/gui/doc/src

excludedirs  = ../../../examples/gui/doc/src/tmp

exampledirs += ../../../examples/gui \
               snippets

imagedirs   += images \
               ../../../examples/gui/doc/images \
               ../../../doc/src/images \
</db:programlisting>
<db:programlisting language="cpp" role="bad">include($QT_INSTALL_DOCS/global/qt-module-defaults.qdocconf)
</db:programlisting>
<db:para>QDoc inherits the default templates, macros, and settings from the directory specified from the $QT_INSTALL_DOCS variable. qmake prints the value of the variable.</db:para>
<db:programlisting language="cpp" role="bad">qmake -query
</db:programlisting>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="12-0-qdoc-commands-miscellaneous.xml#include">include</db:link>.</db:para>
<db:programlisting language="cpp" role="bad">project                 = QtGui
</db:programlisting>
<db:para>The project variable sets the name of the QDoc build. This name is also used to form the index file, which, in this case, will be <db:emphasis>qtgui.index</db:emphasis>. The name of the index file doesn't adopt the uppercase letters of the project name.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="25-qdoc-configuration-derivedprojects.xml#project">project</db:link>.</db:para>
<db:programlisting language="cpp" role="bad">description             = Qt GUI Reference Documentation
</db:programlisting>
<db:para>A short description of the project concerned.</db:para>
<db:programlisting language="cpp" role="bad">url                     = http://doc.qt.io/qt-5
</db:programlisting>
<db:para>The url variable holds the base url of the project.</db:para>
<db:para>The URL is stored in the generated index file for the project. QDoc will use this as the base URL when constructing external links to content listed in the index.</db:para>
<db:note>
<db:para>QDoc omits this value when the -installdir argument is specified when running QDoc.</db:para>
</db:note>
<db:programlisting language="cpp" role="bad">examplesinstallpath     = gui
</db:programlisting>
<db:para>This examplesinstallpath variable indicates that the examples will be installed in the <db:emphasis>gui</db:emphasis> directory under the parent examples directory (for Qt, this is $QT_INSTALL_EXAMPLES).</db:para>
<db:note>
<db:para>The examplepath variable has to match the example directory specified in exampledirs.</db:para>
</db:note>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#exampledirs">exampledirs</db:link>.</db:para>
<db:programlisting language="cpp" role="bad">qhp.projects    = QtGui
qhp.QtGui.file  = qtgui.qhp
</db:programlisting>
<db:para>The following parameters are for creating a QHP file (<db:emphasis>.qhp</db:emphasis>). The <db:emphasis>qhelpgenerator</db:emphasis> program can convert the QHP file into a QCH file (<db:emphasis>.qch</db:emphasis>), which can be opened in Qt Assistant or Qt Creator.</db:para>
<db:programlisting language="cpp" role="bad">qhp.QtGui.namespace           = org.qt-project.qtgui.$QT_VERSION_TAG
</db:programlisting>
<db:para>A unique identifier which enables <db:link xlink:href="qhelpengine.xml">QHelpEngine</db:link> to retrieve the helpfile from a given link. This namespace is also used as a base url for links to the helpfile.</db:para>
<db:programlisting language="cpp" role="bad">qhp.QtGui.virtualFolder       = qtgui
</db:programlisting>
<db:para>Virtual folders group documentation together into a single location. A virtual folder will become the root directory of all files referenced in a compressed help file.</db:para>
<db:para>When two manuals are located in the same virtual folder, it is possible to refer to sections of the other manual using relative paths. The virtual folder tag is mandatory and the folder must not contain any '/'.</db:para>
<db:programlisting language="cpp" role="bad">qhp.QtGui.indexTitle          = Qt GUI
</db:programlisting>
<db:para>This is the title of the page that has the contents.</db:para>
<db:programlisting language="cpp" role="bad">qhp.QtGui.indexRoot           =
</db:programlisting>
<db:para>Specifies the title of the root (namespace) page to generate the documentation for. Typically defined as an empty string.</db:para>
<db:programlisting language="cpp" role="bad">qhp.QtGui.filterAttributes    = qtgui $QT_VERSION qtrefdoc
qhp.QtGui.customFilters.Qt.name = QtGui $QT_VERSION
qhp.QtGui.customFilters.Qt.filterAttributes = qtgui $QT_VERSION
</db:programlisting>
<db:para>The documentation set (one per QDoc project) can have any number of filter attributes assigned to it. A filter attribute is an ordinary string which can be freely chosen. Additionally, custom filters that reference above attributes can be defined. Qt Assistant will display the name of the custom filter in its <db:emphasis role="bold">Filtered by</db:emphasis> drop-down list. Only the documentation sets that have their filter attributes match the attributes of the selected custom filter will be shown.</db:para>
<db:programlisting language="cpp" role="bad">qhp.QtGui.subprojects         = classes
qhp.QtGui.subprojects.classes.title = C++ Classes
qhp.QtGui.subprojects.classes.indexTitle = Qt GUI C++ Classes
</db:programlisting>
<db:para>The subprojects specify the sections that are displayed in the table of contents for this project. In this example, the subproject, which is displayed in the Assistant's sidebar, is named &quot;C++ Classes&quot; and its index is the page titled &quot;QT GUI C++ Classes&quot;.</db:para>
<db:programlisting language="cpp" role="bad">qhp.QtGui.subprojects.classes.selectors = class fake:headerfile
</db:programlisting>
<db:para>Lists all C++ classes and header files.</db:para>
<db:para>See <db:link xlink:href="22-creating-help-project-files.xml">Creating Help Project Files</db:link> for more information.</db:para>
<db:programlisting language="cpp" role="bad">tagfile                 = ../../../doc/qtgui/qtgui.tags
</db:programlisting>
<db:para>This specifies the Doxygen tag file that needs to be written when the html is generated by QDoc.</db:para>
<db:programlisting language="cpp" role="bad">depends += \
   qtcore \
   qtnetwork \
   qtopengl \
   qtsvg \
   qtqml \
   qtquick \
   qtwidgets \
   qtdoc
</db:programlisting>
<db:para>Specifies the modules QDoc needs to load for generating output for Qt GUI. QDoc loads the index files for all modules listed in the depends statement in order to enable linking to pages in these modules.</db:para>
<db:programlisting language="cpp" role="bad">headerdirs  += ..
</db:programlisting>
<db:para>Add the parent directory to the list of directories containing the header files associated with the <db:emphasis>.cpp</db:emphasis> source files.</db:para>
<db:programlisting language="cpp" role="bad">sourcedirs  += .. \
               ../../../examples/gui/doc/src
</db:programlisting>
<db:para>Add the specified directories to the list of directories containing the <db:emphasis>.cpp</db:emphasis> and <db:emphasis>.qdoc</db:emphasis> files used in the documentation.</db:para>
<db:programlisting language="cpp" role="bad">excludedirs  = ../../../examples/gui/doc/src/tmp
</db:programlisting>
<db:para>The excludedirs variable is for listing directories that should not be processed by qdoc, even if the same directories are included by the sourcedirs or headerdirs variables.</db:para>
<db:para>When executed, QDoc will ignore the directories listed. <db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#excludefiles">excludefiles</db:link>.</db:para>
<db:programlisting language="cpp" role="bad">exampledirs += ../../../examples/gui \
               snippets
</db:programlisting>
<db:para><db:emphasis role="bold">See also</db:emphasis>: <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#examples">examples</db:link>, <db:link xlink:href="qtgui-qdocconf.xml">examplesinstallpath</db:link>.</db:para>
<db:para>Add the two directories specified to the list of directories containing the source code of the example files.</db:para>
<db:para>If QDoc encounters both exampledirs and examples, it will look first in the examples directory. QDoc will accept the first matching file it finds. QDoc will search in the directories specified, not in their subdirectories.</db:para>
<db:programlisting language="cpp" role="bad">imagedirs   += images \
               ../../../examples/gui/doc/images \
               ../../../doc/src/images \
</db:programlisting>
<db:para>Add the directories specified above to the list of directories where the images can be found.</db:para>
</db:article>
