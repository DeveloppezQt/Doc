<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDebug Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdebug.xml">QDebug</db:link> class provides an output stream for debugging information.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDebug</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qiodevicebase.xml" xlink:role="class">QIODeviceBase</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDebug is part of <db:simplelist><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdebug.xml">QDebug</db:link> is used whenever the developer needs to write out debugging or tracing information to a device, file, string or console.</db:para>
<db:section xml:id="basic-use">
<db:title>Basic Use</db:title>
<db:para>In the common case, it is useful to call the <db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>() function to obtain a default <db:link xlink:href="qdebug.xml">QDebug</db:link> object to use for writing debugging information.</db:para>
<db:programlisting language="cpp">    qDebug() &lt;&lt; &quot;Date:&quot; &lt;&lt; QDate::currentDate();
    qDebug() &lt;&lt; &quot;Types:&quot; &lt;&lt; QString(&quot;String&quot;) &lt;&lt; QChar('x') &lt;&lt; QRect(0, 10, 50, 40);
    qDebug() &lt;&lt; &quot;Custom coordinate type:&quot; &lt;&lt; coordinate;
</db:programlisting>
<db:para>This constructs a <db:link xlink:href="qdebug.xml">QDebug</db:link> object using the constructor that accepts a <db:link xlink:href="qtlogging.xml#QtMsgType-enum">QtMsgType</db:link> value of <db:link xlink:href="qtlogging.xml#QtMsgType-enum">QtDebugMsg</db:link>. Similarly, the <db:link xlink:href="qtlogging.xml#qWarning">qWarning</db:link>(), <db:link xlink:href="qtlogging.xml#qCritical">qCritical</db:link>() and <db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>() functions also return <db:link xlink:href="qdebug.xml">QDebug</db:link> objects for the corresponding message types.</db:para>
<db:para>The class also provides several constructors for other situations, including a constructor that accepts a <db:link xlink:href="qfile.xml">QFile</db:link> or any other <db:link xlink:href="qiodevice.xml">QIODevice</db:link> subclass that is used to write debugging information to files and other devices. The constructor that accepts a <db:link xlink:href="qstring.xml">QString</db:link> is used to write to a string for display or serialization.</db:para>
</db:section>
<db:section xml:id="formatting-options">
<db:title>Formatting Options</db:title>
<db:para><db:link xlink:href="qdebug.xml">QDebug</db:link> formats output so that it's easily readable. It automatically adds spaces between arguments, and adds quotes around <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, <db:link xlink:href="qchar.xml">QChar</db:link> arguments.</db:para>
<db:para>You can tweak these options through the <db:link xlink:href="qdebug.xml#space">space</db:link>(), <db:link xlink:href="qdebug.xml#nospace">nospace</db:link>() and <db:link xlink:href="qdebug.xml#quote">quote</db:link>(), <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() methods. Furthermore, <db:link xlink:href="qtextstream.xml#qtextstream-manipulators">QTextStream manipulators</db:link> can be piped into a <db:link xlink:href="qdebug.xml">QDebug</db:link> stream.</db:para>
<db:para><db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link> limits changes to the formatting to the current scope. <db:link xlink:href="qdebug.xml#resetFormat">resetFormat</db:link>() resets the options to the default ones.</db:para>
</db:section>
<db:section xml:id="writing-custom-types-to-a-stream">
<db:title>Writing Custom Types to a Stream</db:title>
<db:para>Many standard types can be written to <db:link xlink:href="qdebug.xml">QDebug</db:link> objects, and Qt provides support for most Qt value types. To add support for custom types, you need to implement a streaming operator, as in the following example:</db:para>
<db:programlisting language="cpp">QDebug operator&lt;&lt;(QDebug debug, const Coordinate &amp;c)
{
    QDebugStateSaver saver(debug);
    debug.nospace() &lt;&lt; '(' &lt;&lt; c.x() &lt;&lt; &quot;, &quot; &lt;&lt; c.y() &lt;&lt; ')';

    return debug;
}
</db:programlisting>
<db:para>This is described in the <db:link xlink:href="">Debugging Techniques</db:link> and <db:link xlink:href="custom-types.xml#making-the-type-printable">Creating Custom Qt Types</db:link> documents.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="VerbosityLevel-enum">
<db:title>enum QDebug::VerbosityLevel</db:title>
<db:para>This enum describes the range of verbosity levels.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdebug.xml">QDebug</db:link></db:emphasis>::MinimumVerbosity</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdebug.xml">QDebug</db:link></db:emphasis>::DefaultVerbosity</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdebug.xml">QDebug</db:link></db:emphasis>::MaximumVerbosity</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#verbosity">verbosity</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#setVerbosity">setVerbosity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="operator-lt-lt-15">
<db:title>[since 6.5] QDebug &amp;QDebug::operator&lt;&lt;(const std::basic_string&lt;Char, Args...&gt; &amp;<db:emphasis>s</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-lt-lt-24">[since 6.5] QDebug &amp;QDebug::operator&lt;&lt;(std::basic_string_view&lt;Char, Args...&gt; <db:emphasis>s</db:emphasis>)</db:bridgehead>
<db:para>Writes the string or string-view <db:code role="parameter">s</db:code> to the stream and returns a reference to the stream.</db:para>
<db:para>These operators only participate in overload resolution if Char is one of</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>char</db:para>
</db:listitem>
<db:listitem>
<db:para>char8_t (C++20 only)</db:para>
</db:listitem>
<db:listitem>
<db:para>char16_t</db:para>
</db:listitem>
<db:listitem>
<db:para>char32_t</db:para>
</db:listitem>
<db:listitem>
<db:para>wchar_t</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-5">
<db:title>[since 6.7] QDebug &amp;QDebug::operator&lt;&lt;(T <db:emphasis>i</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-lt-lt-6">[since 6.7] QDebug &amp;QDebug::operator&lt;&lt;(T <db:emphasis>i</db:emphasis>)</db:bridgehead>
<db:para>Prints the textual representation of the 128-bit integer <db:code role="parameter">i</db:code>.</db:para>
<db:note>
<db:para>This operator is only available if Qt supports 128-bit integer types. If 128-bit integer types are available in your build, but the Qt libraries were compiled without, the operator will print a warning instead.</db:para>
</db:note>
<db:note>
<db:para>Because the operator is a function template, no implicit conversions are performed on its argument. It must be exactly qint128/quint128.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qttypes.xml#QT_SUPPORTS_INT128">QT_SUPPORTS_INT128</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDebugx">
<db:title>[explicit] QDebug::QDebug(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Constructs a debug stream that writes to the given <db:code role="parameter">device</db:code>.</db:para>
</db:section>
<db:section xml:id="QDebug-1">
<db:title>[explicit] QDebug::QDebug(QString *<db:emphasis>string</db:emphasis>)</db:title>
<db:para>Constructs a debug stream that writes to the given <db:code role="parameter">string</db:code>.</db:para>
</db:section>
<db:section xml:id="QDebug-2">
<db:title>[explicit] QDebug::QDebug(QtMsgType <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Constructs a debug stream that writes to the handler for the message type <db:code role="parameter">t</db:code>.</db:para>
</db:section>
<db:section xml:id="QDebug-3">
<db:title>QDebug::QDebug(const QDebug &amp;<db:emphasis>o</db:emphasis>)</db:title>
<db:para>Constructs a copy of the other debug stream <db:code role="parameter">o</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QDebug">
<db:title>[noexcept] QDebug::~QDebug()</db:title>
<db:para>Flushes any pending data to be written and destroys the debug stream.</db:para>
</db:section>
<db:section xml:id="autoInsertSpaces">
<db:title>bool QDebug::autoInsertSpaces() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qdebug.xml">QDebug</db:link> instance will automatically insert spaces between writes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#setAutoInsertSpaces">setAutoInsertSpaces</db:link>()</db:member>
<db:member><db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maybeQuote">
<db:title>QDebug &amp;QDebug::maybeQuote(char <db:emphasis>c</db:emphasis> = '&quot;')</db:title>
<db:para>Writes a character <db:code role="parameter">c</db:code> to the debug stream, depending on the current setting for automatic insertion of quotes, and returns a reference to the stream.</db:para>
<db:para>The default character is a double quote &quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#quote">quote</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#noquote">noquote</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maybeSpace">
<db:title>QDebug &amp;QDebug::maybeSpace()</db:title>
<db:para>Writes a space character to the debug stream, depending on the current setting for automatic insertion of spaces, and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#space">space</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#nospace">nospace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="noquote">
<db:title>QDebug &amp;QDebug::noquote()</db:title>
<db:para>Disables automatic insertion of quotation characters around <db:link xlink:href="qchar.xml">QChar</db:link>, <db:link xlink:href="qstring.xml">QString</db:link> and <db:link xlink:href="qbytearray.xml">QByteArray</db:link> contents and returns a reference to the stream.</db:para>
<db:para>When quoting is disabled, these types are printed without quotation characters and without escaping of non-printable characters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#quote">quote</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#maybeQuote">maybeQuote</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nospace">
<db:title>QDebug &amp;QDebug::nospace()</db:title>
<db:para>Disables automatic insertion of spaces and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#space">space</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#maybeSpace">maybeSpace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quote">
<db:title>QDebug &amp;QDebug::quote()</db:title>
<db:para>Enables automatic insertion of quotation characters around <db:link xlink:href="qchar.xml">QChar</db:link>, <db:link xlink:href="qstring.xml">QString</db:link> and <db:link xlink:href="qbytearray.xml">QByteArray</db:link> contents and returns a reference to the stream.</db:para>
<db:para>Quoting is enabled by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#noquote">noquote</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#maybeQuote">maybeQuote</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quoteStrings">
<db:title>[noexcept, since 6.7] bool QDebug::quoteStrings() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qdebug.xml">QDebug</db:link> instance will quote strings streamed into it (which is the default).</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link></db:member>
<db:member><db:link xlink:href="qdebug.xml#quote">quote</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#noquote">noquote</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#setQuoteStrings">setQuoteStrings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetFormat">
<db:title>QDebug &amp;QDebug::resetFormat()</db:title>
<db:para>Resets the stream formatting options, bringing it back to its original constructed state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#space">space</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#quote">quote</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAutoInsertSpaces">
<db:title>void QDebug::setAutoInsertSpaces(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:para>Enables automatic insertion of spaces between writes if <db:code role="parameter">b</db:code> is true; otherwise automatic insertion of spaces is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#autoInsertSpaces">autoInsertSpaces</db:link>()</db:member>
<db:member><db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setQuoteStrings">
<db:title>[since 6.7] void QDebug::setQuoteStrings(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:para>Enables quoting of strings streamed into this <db:link xlink:href="qdebug.xml">QDebug</db:link> instance if <db:code role="parameter">b</db:code> is true; otherwise quoting is disabled.</db:para>
<db:para>The default is to quote strings.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link></db:member>
<db:member><db:link xlink:href="qdebug.xml#quote">quote</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#noquote">noquote</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#quoteStrings">quoteStrings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerbosity">
<db:title>void QDebug::setVerbosity(int <db:emphasis>verbosityLevel</db:emphasis>)</db:title>
<db:para>Sets the verbosity of the stream to <db:code role="parameter">verbosityLevel</db:code>.</db:para>
<db:para>The allowed range is from 0 to 7. The default value is 2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#verbosity">verbosity</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#VerbosityLevel-enum">VerbosityLevel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="space">
<db:title>QDebug &amp;QDebug::space()</db:title>
<db:para>Writes a space character to the debug stream and returns a reference to the stream.</db:para>
<db:para>The stream remembers that automatic insertion of spaces is enabled for future writes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#nospace">nospace</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#maybeSpace">maybeSpace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QDebug::swap(QDebug &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this debug stream instance with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="toString">
<db:title>[static, since 6.0] QString QDebug::toString(const T &amp;<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Streams <db:code role="parameter">object</db:code> into a <db:link xlink:href="qdebug.xml">QDebug</db:link> instance that operates on a string, and then returns that string.</db:para>
<db:para>This function is useful for cases where you need the textual representation of an object for debugging, but cannot use operator&lt;&lt;. For example:</db:para>
<db:programlisting language="cpp">    QTRY_VERIFY2(list.isEmpty(), qPrintable(QString::fromLatin1(
        &quot;Expected list to be empty, but it has the following items: %1&quot;)).arg(QDebug::toString(list)));
</db:programlisting>
<db:para>The string is streamed using <db:link xlink:href="qdebug.xml#nospace">nospace</db:link>().</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="verbosity">
<db:title>int QDebug::verbosity() const</db:title>
<db:para>Returns the verbosity of the debug stream.</db:para>
<db:para>Streaming operators can check the value to decide whether verbose output is desired and print more information depending on the level. Higher values indicate that more information is desired.</db:para>
<db:para>The allowed range is from 0 to 7. The default value is 2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#setVerbosity">setVerbosity</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#VerbosityLevel-enum">VerbosityLevel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verbosity-1">
<db:title>QDebug &amp;QDebug::verbosity(int <db:emphasis>verbosityLevel</db:emphasis>)</db:title>
<db:para>Sets the verbosity of the stream to <db:code role="parameter">verbosityLevel</db:code> and returns a reference to the stream.</db:para>
<db:para>The allowed range is from 0 to 7. The default value is 2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#verbosity">verbosity</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#setVerbosity">setVerbosity</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#VerbosityLevel-enum">VerbosityLevel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>[since 6.0] QDebug &amp;QDebug::operator&lt;&lt;(QByteArrayView <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the data of the observed byte array, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
<db:para>Normally, <db:link xlink:href="qdebug.xml">QDebug</db:link> prints the data inside quotes and transforms control or non-US-ASCII characters to their C escape sequences (\xAB). This way, the output is always 7-bit clean and the string can be copied from the output and pasted back into C++ sources, if necessary.</db:para>
<db:para>To print non-printable characters without transformation, enable the <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() functionality. Note that some <db:link xlink:href="qdebug.xml">QDebug</db:link> backends might not be 8-bit clean.</db:para>
<db:para>See the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> overload for examples.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(QChar <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the character, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream. Normally, <db:link xlink:href="qdebug.xml">QDebug</db:link> prints control characters and non-US-ASCII characters as their C escape sequences or their Unicode value (\u1234). To print non-printable characters without transformation, enable the <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() functionality, but note that some <db:link xlink:href="qdebug.xml">QDebug</db:link> backends may not be 8-bit clean and may not be able to represent t.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-2">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(QLatin1StringView <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the string, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream. Normally, <db:link xlink:href="qdebug.xml">QDebug</db:link> prints the string inside quotes and transforms non-printable characters to their Unicode values (\u1234).</db:para>
<db:para>To print non-printable characters without transformation, enable the <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() functionality. Note that some <db:link xlink:href="qdebug.xml">QDebug</db:link> backends might not be 8-bit clean.</db:para>
<db:para>See the <db:link xlink:href="qstring.xml">QString</db:link> overload for examples.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-3">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(QStringView <db:emphasis>s</db:emphasis>)</db:title>
<db:para>Writes the string view, <db:code role="parameter">s</db:code>, to the stream and returns a reference to the stream. Normally, <db:link xlink:href="qdebug.xml">QDebug</db:link> prints the string inside quotes and transforms non-printable characters to their Unicode values (\u1234).</db:para>
<db:para>To print non-printable characters without transformation, enable the <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() functionality. Note that some <db:link xlink:href="qdebug.xml">QDebug</db:link> backends might not be 8-bit clean.</db:para>
<db:para>See the <db:link xlink:href="qstring.xml">QString</db:link> overload for examples.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-4">
<db:title>[since 6.0] QDebug &amp;QDebug::operator&lt;&lt;(QUtf8StringView <db:emphasis>s</db:emphasis>)</db:title>
<db:para>Writes the string view, <db:code role="parameter">s</db:code>, to the stream and returns a reference to the stream.</db:para>
<db:para>Normally, <db:link xlink:href="qdebug.xml">QDebug</db:link> prints the data inside quotes and transforms control or non-US-ASCII characters to their C escape sequences (\xAB). This way, the output is always 7-bit clean and the string can be copied from the output and pasted back into C++ sources, if necessary.</db:para>
<db:para>To print non-printable characters without transformation, enable the <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() functionality. Note that some <db:link xlink:href="qdebug.xml">QDebug</db:link> backends might not be 8-bit clean.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-7">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(bool <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the boolean value, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-8">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(char <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the character, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-9">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(char16_t <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the UTF-16 character, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-10">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(char32_t <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the UTF-32 character, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-11">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(const QByteArray &amp;<db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the byte array, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream. Normally, <db:link xlink:href="qdebug.xml">QDebug</db:link> prints the array inside quotes and transforms control or non-US-ASCII characters to their C escape sequences (\xAB). This way, the output is always 7-bit clean and the string can be copied from the output and pasted back into C++ sources, if necessary.</db:para>
<db:para>To print non-printable characters without transformation, enable the <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() functionality. Note that some <db:link xlink:href="qdebug.xml">QDebug</db:link> backends might not be 8-bit clean.</db:para>
<db:para>Output examples:</db:para>
<db:programlisting language="cpp">    QByteArray ba;

    ba = &quot;a&quot;;
    qDebug().noquote() &lt;&lt; ba;    // prints: a
    qDebug() &lt;&lt; ba;              // prints: &quot;a&quot;

    ba = &quot;\&quot;a\r\n\&quot;&quot;;
    qDebug() &lt;&lt; ba;              // prints: &quot;\&quot;a\r\n\&quot;&quot;

    ba = &quot;\033&quot;;                 // escape character
    qDebug() &lt;&lt; ba;              // prints: &quot;\x1B&quot;

    ba = &quot;\xC3\xA1&quot;;
    qDebug() &lt;&lt; ba;              // prints: &quot;\xC3\xA1&quot;

    ba = QByteArray(&quot;a\0b&quot;, 3);
    qDebug() &lt;&lt; ba               // prints: &quot;\a\x00&quot;&quot;b&quot;
</db:programlisting>
<db:para>Note how <db:link xlink:href="qdebug.xml">QDebug</db:link> needed to close and reopen the string in the way C and C++ languages concatenate string literals so that the letter 'b' is not interpreted as part of the previous hexadecimal escape sequence.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-12">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(const QString &amp;<db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the string, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream. Normally, <db:link xlink:href="qdebug.xml">QDebug</db:link> prints the string inside quotes and transforms non-printable characters to their Unicode values (\u1234).</db:para>
<db:para>To print non-printable characters without transformation, enable the <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() functionality. Note that some <db:link xlink:href="qdebug.xml">QDebug</db:link> backends might not be 8-bit clean.</db:para>
<db:para>Output examples:</db:para>
<db:programlisting language="cpp">    QString s;

    s = &quot;a&quot;;
    qDebug().noquote() &lt;&lt; s;    // prints: a
    qDebug() &lt;&lt; s;              // prints: &quot;a&quot;

    s = &quot;\&quot;a\r\n\&quot;&quot;;
    qDebug() &lt;&lt; s;              // prints: &quot;\&quot;a\r\n\&quot;&quot;

    s = &quot;\033&quot;;                 // escape character
    qDebug() &lt;&lt; s;              // prints: &quot;\u001B&quot;

    s = &quot;\u00AD&quot;;               // SOFT HYPHEN
    qDebug() &lt;&lt; s;              // prints: &quot;\u00AD&quot;

    s = &quot;\u00E1&quot;;               // LATIN SMALL LETTER A WITH ACUTE
    qDebug() &lt;&lt; s;              // prints: &quot;á&quot;

    s = &quot;a\u0301&quot;;              // &quot;a&quot; followed by COMBINING ACUTE ACCENT
    qDebug() &lt;&lt; s;              // prints: &quot;á&quot;;

    s = &quot;\u0430\u0301&quot;;         // CYRILLIC SMALL LETTER A followed by COMBINING ACUTE ACCENT
    qDebug() &lt;&lt; s;              // prints: &quot;а́&quot;
</db:programlisting>
</db:section>
<db:section xml:id="operator-lt-lt-13">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(const char *<db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the '\0'-terminated UTF-8 string, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream. The string is never quoted or escaped for the output. Note that <db:link xlink:href="qdebug.xml">QDebug</db:link> buffers internally as UTF-16 and may need to transform to 8-bit using the locale's codec in order to use some backends, which may cause garbled output (mojibake). Restricting to US-ASCII strings is recommended.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-14">
<db:title>[since 6.0] QDebug &amp;QDebug::operator&lt;&lt;(const char16_t *<db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the u'\0'-terminated UTF-16 string, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream. The string is never quoted or escaped for the output. Note that <db:link xlink:href="qdebug.xml">QDebug</db:link> buffers internally as UTF-16 and may need to transform to 8-bit using the locale's codec in order to use some backends, which may cause garbled output (mojibake). Restricting to US-ASCII strings is recommended.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-16">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(const void *<db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes a pointer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-17">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(double <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the 64-bit floating point number, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-18">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(float <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the 32-bit floating point number, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-19">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(int <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the signed integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-20">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(long <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the signed long integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-21">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(qint64 <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the signed 64-bit integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-22">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(quint64 <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes then unsigned 64-bit integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-23">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(short <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the signed short integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-25">
<db:title>[since 6.6] QDebug &amp;QDebug::operator&lt;&lt;(std::chrono::duration&lt;Rep, Period&gt; <db:emphasis>duration</db:emphasis>)</db:title>
<db:para>Prints the time duration <db:code role="parameter">duration</db:code> to the stream and returns a reference to the stream. The printed string is the numeric representation of the period followed by the time unit, similar to what the C++ Standard Library would produce with std::ostream.</db:para>
<db:para>The unit is not localized.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-26">
<db:title>[since 6.7] QDebug &amp;QDebug::operator&lt;&lt;(<db:emphasis>std::nullopt_t</db:emphasis>)</db:title>
<db:para>Writes nullopt to the stream.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-27">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(unsigned int <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes then unsigned integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-28">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(unsigned long <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes then unsigned long integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-29">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(unsigned short <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes then unsigned short integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDebug &amp;QDebug::operator=(const QDebug &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the <db:code role="parameter">other</db:code> debug stream to this stream and returns a reference to this stream.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-36">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QHash&lt;Key, T&gt; &amp;<db:emphasis>hash</db:emphasis>)</db:title>
<db:para>Writes the contents of <db:code role="parameter">hash</db:code> to <db:code role="parameter">debug</db:code>. Both Key and T need to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-37">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QList&lt;T&gt; &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:para>Writes the contents of <db:code role="parameter">list</db:code> to <db:code role="parameter">debug</db:code>. T needs to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-38">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QMap&lt;Key, T&gt; &amp;<db:emphasis>map</db:emphasis>)</db:title>
<db:para>Writes the contents of <db:code role="parameter">map</db:code> to <db:code role="parameter">debug</db:code>. Both Key and T need to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-39">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QMultiHash&lt;Key, T&gt; &amp;<db:emphasis>hash</db:emphasis>)</db:title>
<db:para>Writes the contents of <db:code role="parameter">hash</db:code> to <db:code role="parameter">debug</db:code>. Both Key and T need to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-40">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QMultiMap&lt;Key, T&gt; &amp;<db:emphasis>map</db:emphasis>)</db:title>
<db:para>Writes the contents of <db:code role="parameter">map</db:code> to <db:code role="parameter">debug</db:code>. Both Key and T need to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-41">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QSet&lt;T&gt; &amp;<db:emphasis>set</db:emphasis>)</db:title>
<db:para>Writes the contents of <db:code role="parameter">set</db:code> to <db:code role="parameter">debug</db:code>. T needs to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-42">
<db:title>[since 6.3] QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QVarLengthArray&lt;T, P&gt; &amp;<db:emphasis>array</db:emphasis>)</db:title>
<db:para>Writes the contents of <db:code role="parameter">array</db:code> to <db:code role="parameter">debug</db:code>. T needs to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-43">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const std::list&lt;T, Alloc&gt; &amp;<db:emphasis>vec</db:emphasis>)</db:title>
<db:para>Writes the contents of list <db:code role="parameter">vec</db:code> to <db:code role="parameter">debug</db:code>. T needs to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-44">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const std::map&lt;Key, T, Compare, Alloc&gt; &amp;<db:emphasis>map</db:emphasis>)</db:title>
<db:para>Writes the contents of <db:code role="parameter">map</db:code> to <db:code role="parameter">debug</db:code>. Both Key and T need to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-45">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const std::multimap&lt;Key, T, Compare, Alloc&gt; &amp;<db:emphasis>map</db:emphasis>)</db:title>
<db:para>Writes the contents of <db:code role="parameter">map</db:code> to <db:code role="parameter">debug</db:code>. Both Key and T need to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-46">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const std::pair&lt;T1, T2&gt; &amp;<db:emphasis>pair</db:emphasis>)</db:title>
<db:para>Writes the contents of <db:code role="parameter">pair</db:code> to <db:code role="parameter">debug</db:code>. Both T1 and T2 need to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-47">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const std::vector&lt;T, Alloc&gt; &amp;<db:emphasis>vec</db:emphasis>)</db:title>
<db:para>Writes the contents of vector <db:code role="parameter">vec</db:code> to <db:code role="parameter">debug</db:code>. T needs to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-34">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QContiguousCache&lt;T&gt; &amp;<db:emphasis>cache</db:emphasis>)</db:title>
<db:para>Writes the contents of <db:code role="parameter">cache</db:code> to <db:code role="parameter">debug</db:code>. T needs to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-35">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QFlags&lt;T&gt; &amp;<db:emphasis>flags</db:emphasis>)</db:title>
<db:para>Writes <db:code role="parameter">flags</db:code> to <db:code role="parameter">debug</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
