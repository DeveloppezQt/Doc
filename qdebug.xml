<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDebug Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdebug.xml">QDebug</db:link> class provides an output stream for debugging information.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDebug</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDebug is part of <db:simplelist><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdebug.xml">QDebug</db:link> is used whenever the developer needs to write out debugging or tracing information to a device, file, string or console.</db:para>
<db:section xml:id="basic-use">
<db:title>Basic Use</db:title>
<db:para>In the common case, it is useful to call the <db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>() function to obtain a default <db:link xlink:href="qdebug.xml">QDebug</db:link> object to use for writing debugging information.</db:para>
<db:programlisting language="cpp">    qDebug() &amp;lt;&amp;lt; &quot;Date:&quot; &amp;lt;&amp;lt; QDate::currentDate();
    qDebug() &amp;lt;&amp;lt; &quot;Types:&quot; &amp;lt;&amp;lt; QString(&quot;String&quot;) &amp;lt;&amp;lt; QChar('x') &amp;lt;&amp;lt; QRect(0, 10, 50, 40);
    qDebug() &amp;lt;&amp;lt; &quot;Custom coordinate type:&quot; &amp;lt;&amp;lt; coordinate;
</db:programlisting>
<db:para>This constructs a <db:link xlink:href="qdebug.xml">QDebug</db:link> object using the constructor that accepts a <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtMsgType</db:link> value of <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtDebugMsg</db:link>. Similarly, the <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>(), <db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>() and <db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>() functions also return <db:link xlink:href="qdebug.xml">QDebug</db:link> objects for the corresponding message types.</db:para>
<db:para>The class also provides several constructors for other situations, including a constructor that accepts a <db:link xlink:href="qfile.xml">QFile</db:link> or any other <db:link xlink:href="qiodevice.xml">QIODevice</db:link> subclass that is used to write debugging information to files and other devices. The constructor that accepts a <db:link xlink:href="qstring.xml">QString</db:link> is used to write to a string for display or serialization.</db:para>
</db:section>
<db:section xml:id="formatting-options">
<db:title>Formatting Options</db:title>
<db:para><db:link xlink:href="qdebug.xml">QDebug</db:link> formats output so that it's easily readable. It automatically adds spaces between arguments, and adds quotes around <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, <db:link xlink:href="qchar.xml">QChar</db:link> arguments.</db:para>
<db:para>You can tweak these options through the <db:link xlink:href="qdebug.xml#space">space</db:link>(), <db:link xlink:href="qdebug.xml#nospace">nospace</db:link>() and <db:link xlink:href="qdebug.xml#quote">quote</db:link>(), <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() methods. Furthermore, <db:link xlink:href="qtextstream.xml#qtextstream-manipulators">QTextStream manipulators</db:link> can be piped into a <db:link xlink:href="qdebug.xml">QDebug</db:link> stream.</db:para>
<db:para><db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link> limits changes to the formatting to the current scope. <db:link xlink:href="qdebug.xml#resetFormat">resetFormat</db:link>() resets the options to the default ones.</db:para>
</db:section>
<db:section xml:id="writing-custom-types-to-a-stream">
<db:title>Writing Custom Types to a Stream</db:title>
<db:para>Many standard types can be written to <db:link xlink:href="qdebug.xml">QDebug</db:link> objects, and Qt provides support for most Qt value types. To add support for custom types, you need to implement a streaming operator, as in the following example:</db:para>
<db:programlisting language="cpp">QDebug operator&amp;lt;&amp;lt;(QDebug debug, const Coordinate &amp;amp;c)
{
    QDebugStateSaver saver(debug);
    debug.nospace() &amp;lt;&amp;lt; '(' &amp;lt;&amp;lt; c.x() &amp;lt;&amp;lt; &quot;, &quot; &amp;lt;&amp;lt; c.y() &amp;lt;&amp;lt; ')';

    return debug;
}
</db:programlisting>
<db:para>This is described in the <db:link xlink:href="debug.xml">Debugging Techniques</db:link> and <db:link xlink:href="custom-types.xml#making-the-type-printable">Creating Custom Qt Types</db:link> documents.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDebugx">
<db:title>QDebug::QDebug(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDebug</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a debug stream that writes to the given <db:code role="parameter">device</db:code>.</db:para>
</db:section>
<db:section xml:id="QDebug-1">
<db:title>QDebug::QDebug(QString *<db:emphasis>string</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDebug</db:methodname>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug(QString *string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a debug stream that writes to the given <db:code role="parameter">string</db:code>.</db:para>
</db:section>
<db:section xml:id="QDebug-2">
<db:title>QDebug::QDebug(QtMsgType <db:emphasis>t</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDebug</db:methodname>
<db:methodparam>
<db:type>QtMsgType</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug(QtMsgType t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a debug stream that writes to the handler for the message type <db:code role="parameter">t</db:code>.</db:para>
</db:section>
<db:section xml:id="QDebug-3">
<db:title>QDebug::QDebug(const QDebug &amp;<db:emphasis>o</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDebug</db:methodname>
<db:methodparam>
<db:type>const QDebug &amp;</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug(const QDebug &amp;o)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of the other debug stream <db:code role="parameter">o</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QDebug">
<db:title>QDebug::~QDebug()</db:title>
<db:destructorsynopsis>
<db:methodname>~QDebug</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDebug()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Flushes any pending data to be written and destroys the debug stream.</db:para>
</db:section>
<db:section xml:id="autoInsertSpaces">
<db:title>[since 5.0] bool QDebug::autoInsertSpaces() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>autoInsertSpaces</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool autoInsertSpaces() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qdebug.xml">QDebug</db:link> instance will automatically insert spaces between writes.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#setAutoInsertSpaces">setAutoInsertSpaces</db:link>()</db:member>
<db:member><db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maybeQuote">
<db:title>[since 5.4] QDebug &amp;QDebug::maybeQuote(char <db:emphasis>c</db:emphasis> = '&quot;')</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>maybeQuote</db:methodname>
<db:methodparam>
<db:type>char</db:type>
<db:parameter>c</db:parameter>
<db:initializer>'&quot;'</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; maybeQuote(char c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes a character <db:code role="parameter">c</db:code> to the debug stream, depending on the current setting for automatic insertion of quotes, and returns a reference to the stream.</db:para>
<db:para>The default character is a double quote &quot;.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#quote">quote</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#noquote">noquote</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maybeSpace">
<db:title>QDebug &amp;QDebug::maybeSpace()</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>maybeSpace</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; maybeSpace()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes a space character to the debug stream, depending on the current setting for automatic insertion of spaces, and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#space">space</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#nospace">nospace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="noquote">
<db:title>[since 5.4] QDebug &amp;QDebug::noquote()</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>noquote</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; noquote()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disables automatic insertion of quotation characters around <db:link xlink:href="qchar.xml">QChar</db:link>, <db:link xlink:href="qstring.xml">QString</db:link> and <db:link xlink:href="qbytearray.xml">QByteArray</db:link> contents and returns a reference to the stream.</db:para>
<db:para>When quoting is disabled, these types are printed without quotation characters and without escaping of non-printable characters.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#quote">quote</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#maybeQuote">maybeQuote</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nospace">
<db:title>QDebug &amp;QDebug::nospace()</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>nospace</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; nospace()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disables automatic insertion of spaces and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#space">space</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#maybeSpace">maybeSpace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quote">
<db:title>[since 5.4] QDebug &amp;QDebug::quote()</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>quote</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; quote()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables automatic insertion of quotation characters around <db:link xlink:href="qchar.xml">QChar</db:link>, <db:link xlink:href="qstring.xml">QString</db:link> and <db:link xlink:href="qbytearray.xml">QByteArray</db:link> contents and returns a reference to the stream.</db:para>
<db:para>Quoting is enabled by default.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#noquote">noquote</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#maybeQuote">maybeQuote</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetFormat">
<db:title>[since 5.4] QDebug &amp;QDebug::resetFormat()</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>resetFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; resetFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the stream formatting options, bringing it back to its original constructed state.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#space">space</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#quote">quote</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAutoInsertSpaces">
<db:title>[since 5.0] void QDebug::setAutoInsertSpaces(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAutoInsertSpaces</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAutoInsertSpaces(bool b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables automatic insertion of spaces between writes if <db:code role="parameter">b</db:code> is true; otherwise automatic insertion of spaces is disabled.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#autoInsertSpaces">autoInsertSpaces</db:link>()</db:member>
<db:member><db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerbosity">
<db:title>[since 5.6] void QDebug::setVerbosity(int <db:emphasis>verbosityLevel</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVerbosity</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>verbosityLevel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVerbosity(int verbosityLevel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the verbosity of the stream to <db:code role="parameter">verbosityLevel</db:code>.</db:para>
<db:para>The allowed range is from 0 to 7. The default value is 2.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#verbosity">verbosity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="space">
<db:title>QDebug &amp;QDebug::space()</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>space</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; space()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes a space character to the debug stream and returns a reference to the stream.</db:para>
<db:para>The stream remembers that automatic insertion of spaces is enabled for future writes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#nospace">nospace</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#maybeSpace">maybeSpace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QDebug::swap(QDebug &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QDebug &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QDebug &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this debug stream instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="verbosity">
<db:title>[since 5.6] int QDebug::verbosity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>verbosity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int verbosity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the verbosity of the debug stream.</db:para>
<db:para>Streaming operators can check the value to decide whether verbose output is desired and print more information depending on the level. Higher values indicate that more information is desired.</db:para>
<db:para>The allowed range is from 0 to 7. The default value is 2.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#setVerbosity">setVerbosity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(QChar <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(QChar t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the character, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream. Normally, <db:link xlink:href="qdebug.xml">QDebug</db:link> prints control characters and non-US-ASCII characters as their C escape sequences or their Unicode value (\u1234). To print non-printable characters without transformation, enable the <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() functionality, but note that some <db:link xlink:href="qdebug.xml">QDebug</db:link> backends may not be 8-bit clean and may not be able to represent t.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(bool <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(bool t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the boolean value, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-2">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(char <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>char</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(char t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the character, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-3">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(short <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>short</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(short t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the signed short integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-4">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(unsigned short <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>unsigned short</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(unsigned short t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes then unsigned short integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-5">
<db:title>[since 5.5] QDebug &amp;QDebug::operator&lt;&lt;(char16_t <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>char16_t</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(char16_t t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the UTF-16 character, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-6">
<db:title>[since 5.5] QDebug &amp;QDebug::operator&lt;&lt;(char32_t <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>char32_t</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(char32_t t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the UTF-32 character, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-7">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(int <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(int t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the signed integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-8">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(unsigned int <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>unsigned int</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(unsigned int t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes then unsigned integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-9">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(long <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>long</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(long t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the signed long integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-10">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(unsigned long <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>unsigned long</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(unsigned long t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes then unsigned long integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-11">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(qint64 <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(qint64 t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the signed 64-bit integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-12">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(quint64 <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>quint64</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">12</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(quint64 t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes then unsigned 64-bit integer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-13">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(float <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">13</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(float t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the 32-bit floating point number, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-14">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(double <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">14</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(double t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the 64-bit floating point number, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-15">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(const char *<db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">15</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(const char *t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the '\0'-terminated string, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream. The string is never quoted nor transformed to the output, but note that some <db:link xlink:href="qdebug.xml">QDebug</db:link> backends might not be 8-bit clean.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-16">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(const QString &amp;<db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">16</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(const QString &amp;t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the string, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream. Normally, <db:link xlink:href="qdebug.xml">QDebug</db:link> prints the string inside quotes and transforms non-printable characters to their Unicode values (\u1234).</db:para>
<db:para>To print non-printable characters without transformation, enable the <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() functionality. Note that some <db:link xlink:href="qdebug.xml">QDebug</db:link> backends might not be 8-bit clean.</db:para>
<db:para>Output examples:</db:para>
<db:programlisting language="cpp">    QString s;

    s = &quot;a&quot;;
    qDebug().noquote() &amp;lt;&amp;lt; s;    // prints: a
    qDebug() &amp;lt;&amp;lt; s;              // prints: &quot;a&quot;

    s = &quot;\&quot;a\r\n\&quot;&quot;;
    qDebug() &amp;lt;&amp;lt; s;              // prints: &quot;\&quot;a\r\n\&quot;&quot;

    s = &quot;\033&quot;;                 // escape character
    qDebug() &amp;lt;&amp;lt; s;              // prints: &quot;\u001B&quot;

    s = &quot;\u00AD&quot;;               // SOFT HYPHEN
    qDebug() &amp;lt;&amp;lt; s;              // prints: &quot;\u00AD&quot;

    s = &quot;\u00E1&quot;;               // LATIN SMALL LETTER A WITH ACUTE
    qDebug() &amp;lt;&amp;lt; s;              // prints: &quot;á&quot;

    s = &quot;a\u0301&quot;;              // &quot;a&quot; followed by COMBINING ACUTE ACCENT
    qDebug() &amp;lt;&amp;lt; s;              // prints: &quot;á&quot;;

    s = &quot;\u0430\u0301&quot;;         // CYRILLIC SMALL LETTER A followed by COMBINING ACUTE ACCENT
    qDebug() &amp;lt;&amp;lt; s;              // prints: &quot;а́&quot;
</db:programlisting>
</db:section>
<db:section xml:id="operator-lt-lt-17">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(const QStringRef &amp;<db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QStringRef &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">17</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(const QStringRef &amp;t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the string, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream. Normally, <db:link xlink:href="qdebug.xml">QDebug</db:link> prints the string inside quotes and transforms non-printable characters to their Unicode values (\u1234).</db:para>
<db:para>To print non-printable characters without transformation, enable the <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() functionality. Note that some <db:link xlink:href="qdebug.xml">QDebug</db:link> backends might not be 8-bit clean.</db:para>
<db:para>See the <db:link xlink:href="qstring.xml">QString</db:link> overload for examples.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-18">
<db:title>[since 5.10] QDebug &amp;QDebug::operator&lt;&lt;(QStringView <db:emphasis>s</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">18</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(QStringView s)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the string view, <db:code role="parameter">s</db:code>, to the stream and returns a reference to the stream. Normally, <db:link xlink:href="qdebug.xml">QDebug</db:link> prints the string inside quotes and transforms non-printable characters to their Unicode values (\u1234).</db:para>
<db:para>To print non-printable characters without transformation, enable the <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() functionality. Note that some <db:link xlink:href="qdebug.xml">QDebug</db:link> backends might not be 8-bit clean.</db:para>
<db:para>See the <db:link xlink:href="qstring.xml">QString</db:link> overload for examples.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-19">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(QLatin1String <db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">19</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(QLatin1String t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the string, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream. Normally, <db:link xlink:href="qdebug.xml">QDebug</db:link> prints the string inside quotes and transforms non-printable characters to their Unicode values (\u1234).</db:para>
<db:para>To print non-printable characters without transformation, enable the <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() functionality. Note that some <db:link xlink:href="qdebug.xml">QDebug</db:link> backends might not be 8-bit clean.</db:para>
<db:para>See the <db:link xlink:href="qstring.xml">QString</db:link> overload for examples.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-20">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(const QByteArray &amp;<db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">20</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(const QByteArray &amp;t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the byte array, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream. Normally, <db:link xlink:href="qdebug.xml">QDebug</db:link> prints the array inside quotes and transforms control or non-US-ASCII characters to their C escape sequences (\xAB). This way, the output is always 7-bit clean and the string can be copied from the output and pasted back into C++ sources, if necessary.</db:para>
<db:para>To print non-printable characters without transformation, enable the <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() functionality. Note that some <db:link xlink:href="qdebug.xml">QDebug</db:link> backends might not be 8-bit clean.</db:para>
<db:para>Output examples:</db:para>
<db:programlisting language="cpp">    QByteArray ba;

    ba = &quot;a&quot;;
    qDebug().noquote() &amp;lt;&amp;lt; ba;    // prints: a
    qDebug() &amp;lt;&amp;lt; ba;              // prints: &quot;a&quot;

    ba = &quot;\&quot;a\r\n\&quot;&quot;;
    qDebug() &amp;lt;&amp;lt; ba;              // prints: &quot;\&quot;a\r\n\&quot;&quot;

    ba = &quot;\033&quot;;                 // escape character
    qDebug() &amp;lt;&amp;lt; ba;              // prints: &quot;\x1B&quot;

    ba = &quot;\xC3\xA1&quot;;
    qDebug() &amp;lt;&amp;lt; ba;              // prints: &quot;\xC3\xA1&quot;

    ba = QByteArray(&quot;a\0b&quot;, 3);
    qDebug() &amp;lt;&amp;lt; ba               // prints: &quot;\a\x00&quot;&quot;b&quot;
</db:programlisting>
<db:para>Note how <db:link xlink:href="qdebug.xml">QDebug</db:link> needed to close and reopen the string in the way C and C++ languages concatenate string literals so that the letter 'b' is not interpreted as part of the previous hexadecimal escape sequence.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-21">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(const void *<db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">21</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator&lt;&lt;(const void *t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes a pointer, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDebug &amp;QDebug::operator=(const QDebug &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDebug &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug &amp; operator=(const QDebug &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the <db:code role="parameter">other</db:code> debug stream to this stream and returns a reference to this stream.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-25">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QList&lt;T&gt; &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;T&gt; &amp;</db:type>
<db:parameter>list</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">25</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const QList&lt;T&gt; &amp;list)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the contents of <db:code role="parameter">list</db:code> to <db:code role="parameter">debug</db:code>. T needs to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-26">
<db:title>[since 5.7] QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const std::list&lt;T, Alloc&gt; &amp;<db:emphasis>vec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const std::list&lt;T, Alloc&gt; &amp;</db:type>
<db:parameter>vec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">26</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const std::list&lt;T, Alloc&gt; &amp;vec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the contents of list <db:code role="parameter">vec</db:code> to <db:code role="parameter">debug</db:code>. T needs to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-27">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QVector&lt;T&gt; &amp;<db:emphasis>vec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector&lt;T&gt; &amp;</db:type>
<db:parameter>vec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">27</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const QVector&lt;T&gt; &amp;vec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the contents of vector <db:code role="parameter">vec</db:code> to <db:code role="parameter">debug</db:code>. T needs to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-28">
<db:title>[since 5.7] QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const std::vector&lt;T, Alloc&gt; &amp;<db:emphasis>vec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const std::vector&lt;T, Alloc&gt; &amp;</db:type>
<db:parameter>vec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">28</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const std::vector&lt;T, Alloc&gt; &amp;vec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the contents of vector <db:code role="parameter">vec</db:code> to <db:code role="parameter">debug</db:code>. T needs to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-29">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QSet&lt;T&gt; &amp;<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSet&lt;T&gt; &amp;</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">29</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const QSet&lt;T&gt; &amp;set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the contents of <db:code role="parameter">set</db:code> to <db:code role="parameter">debug</db:code>. T needs to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-30">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QMap&lt;Key, T&gt; &amp;<db:emphasis>map</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMap&lt;Key, T&gt; &amp;</db:type>
<db:parameter>map</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">30</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const QMap&lt;Key, T&gt; &amp;map)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the contents of <db:code role="parameter">map</db:code> to <db:code role="parameter">debug</db:code>. Both Key and T need to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-31">
<db:title>[since 5.7] QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const std::map&lt;Key, T, Compare, Alloc&gt; &amp;<db:emphasis>map</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const std::map&lt;Key, T, Compare, Alloc&gt; &amp;</db:type>
<db:parameter>map</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">31</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const std::map&lt;Key, T, Compare, Alloc&gt; &amp;map)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the contents of <db:code role="parameter">map</db:code> to <db:code role="parameter">debug</db:code>. Both Key and T need to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-32">
<db:title>[since 5.7] QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const std::multimap&lt;Key, T, Compare, Alloc&gt; &amp;<db:emphasis>map</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const std::multimap&lt;Key, T, Compare, Alloc&gt; &amp;</db:type>
<db:parameter>map</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">32</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const std::multimap&lt;Key, T, Compare, Alloc&gt; &amp;map)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the contents of <db:code role="parameter">map</db:code> to <db:code role="parameter">debug</db:code>. Both Key and T need to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-33">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QHash&lt;Key, T&gt; &amp;<db:emphasis>hash</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHash&lt;Key, T&gt; &amp;</db:type>
<db:parameter>hash</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">33</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const QHash&lt;Key, T&gt; &amp;hash)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the contents of <db:code role="parameter">hash</db:code> to <db:code role="parameter">debug</db:code>. Both Key and T need to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-34">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QPair&lt;T1, T2&gt; &amp;<db:emphasis>pair</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>pair</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">34</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const QPair&lt;T1, T2&gt; &amp;pair)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the contents of <db:code role="parameter">pair</db:code> to <db:code role="parameter">debug</db:code>. Both T1 and T2 need to support streaming into <db:link xlink:href="qdebug.xml">QDebug</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-35">
<db:title>[since 4.7] QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QFlags&lt;T&gt; &amp;<db:emphasis>flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QFlags&lt;T&gt; &amp;</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">35</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const QFlags&lt;T&gt; &amp;flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes <db:code role="parameter">flags</db:code> to <db:code role="parameter">debug</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
</db:section>
</db:section>
</db:article>
