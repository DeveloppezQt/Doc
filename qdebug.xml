<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDebug Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdebug.xml">QDebug</db:link> class provides an output stream for debugging information.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDebug</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDebug is part of <db:simplelist><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdebug.xml">QDebug</db:link> is used whenever the developer needs to write out debugging or tracing information to a device, file, string or console.</db:para>
<db:section xml:id="basic-use">
<db:title>Basic Use</db:title>
<db:para>In the common case, it is useful to call the <db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>() function to obtain a default <db:link xlink:href="qdebug.xml">QDebug</db:link> object to use for writing debugging information.</db:para>
<db:programlisting language="cpp">    qDebug() &lt;&lt; &quot;Date:&quot; &lt;&lt; QDate::currentDate();
    qDebug() &lt;&lt; &quot;Types:&quot; &lt;&lt; QString(&quot;String&quot;) &lt;&lt; QChar('x') &lt;&lt; QRect(0, 10, 50, 40);
    qDebug() &lt;&lt; &quot;Custom coordinate type:&quot; &lt;&lt; coordinate;
</db:programlisting>
<db:para>This constructs a <db:link xlink:href="qdebug.xml">QDebug</db:link> object using the constructor that accepts a <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtMsgType</db:link> value of <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtDebugMsg</db:link>. Similarly, the <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>(), <db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>() and <db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>() functions also return <db:link xlink:href="qdebug.xml">QDebug</db:link> objects for the corresponding message types.</db:para>
<db:para>The class also provides several constructors for other situations, including a constructor that accepts a <db:link xlink:href="qfile.xml">QFile</db:link> or any other <db:link xlink:href="qiodevice.xml">QIODevice</db:link> subclass that is used to write debugging information to files and other devices. The constructor that accepts a <db:link xlink:href="qstring.xml">QString</db:link> is used to write to a string for display or serialization.</db:para>
</db:section>
<db:section xml:id="formatting-options">
<db:title>Formatting Options</db:title>
<db:para><db:link xlink:href="qdebug.xml">QDebug</db:link> formats output so that it's easily readable. It automatically adds spaces between arguments, and adds quotes around <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, <db:link xlink:href="qchar.xml">QChar</db:link> arguments.</db:para>
<db:para>You can tweak these options through the <db:link xlink:href="qdebug.xml#space">space</db:link>(), <db:link xlink:href="qdebug.xml#nospace">nospace</db:link>() and <db:link xlink:href="qdebug.xml#quote">quote</db:link>(), <db:link xlink:href="qdebug.xml#noquote">noquote</db:link>() methods. Furthermore, <db:link xlink:href="qtextstream.xml">QTextStream manipulators</db:link> can be piped into a <db:link xlink:href="qdebug.xml">QDebug</db:link> stream.</db:para>
<db:para><db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link> limits changes to the formatting to the current scope. <db:link xlink:href="qdebug.xml#resetFormat">resetFormat</db:link>() resets the options to the default ones.</db:para>
</db:section>
<db:section xml:id="writing-custom-types-to-a-stream">
<db:title>Writing Custom Types to a Stream</db:title>
<db:para>Many standard types can be written to <db:link xlink:href="qdebug.xml">QDebug</db:link> objects, and Qt provides support for most Qt value types. To add support for custom types, you need to implement a streaming operator, as in the following example:</db:para>
<db:programlisting language="cpp">QDebug operator&lt;&lt;(QDebug dbg, const Coordinate &amp;c)
{
    dbg.nospace() &lt;&lt; &quot;(&quot; &lt;&lt; c.x() &lt;&lt; &quot;, &quot; &lt;&lt; c.y() &lt;&lt; &quot;)&quot;;

    return dbg.space();
}
</db:programlisting>
<db:para>This is described in the <db:link xlink:href="">Debugging Techniques</db:link> and <db:link xlink:href="custom-types.xml#making-the-type-printable">Creating Custom Qt Types</db:link> documents.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDebugx">
<db:title>QDebug::QDebug(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Constructs a debug stream that writes to the given <db:code role="parameter">device</db:code>.</db:para>
</db:section>
<db:section xml:id="QDebug-1">
<db:title>QDebug::QDebug(QString *<db:emphasis>string</db:emphasis>)</db:title>
<db:para>Constructs a debug stream that writes to the given <db:code role="parameter">string</db:code>.</db:para>
</db:section>
<db:section xml:id="QDebug-2">
<db:title>QDebug::QDebug(QtMsgType <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Constructs a debug stream that writes to the handler for the message type specified by <db:code role="parameter">type</db:code>.</db:para>
</db:section>
<db:section xml:id="QDebug-3">
<db:title>QDebug::QDebug(const QDebug &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of the <db:code role="parameter">other</db:code> debug stream.</db:para>
</db:section>
<db:section xml:id="dtor.QDebug">
<db:title>[noexcept] QDebug::~QDebug()</db:title>
<db:para>Flushes any pending data to be written and destroys the debug stream.</db:para>
</db:section>
<db:section xml:id="autoInsertSpaces">
<db:title>[since 5.0] bool QDebug::autoInsertSpaces() const</db:title>
<db:para>Returns <db:code>true</db:code> if this <db:link xlink:href="qdebug.xml">QDebug</db:link> instance will automatically insert spaces between writes.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#setAutoInsertSpaces">setAutoInsertSpaces</db:link>()</db:member>
<db:member><db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maybeQuote">
<db:title>[since 5.4] QDebug &amp;QDebug::maybeQuote(char <db:emphasis>c</db:emphasis> = '&quot;')</db:title>
<db:para>Writes a character <db:code role="parameter">c</db:code> to the debug stream, depending on the current setting for automatic insertion of quotes, and returns a reference to the stream.</db:para>
<db:para>The default character is a double quote <db:code>&quot;</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#quote">quote</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#noquote">noquote</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maybeSpace">
<db:title>QDebug &amp;QDebug::maybeSpace()</db:title>
<db:para>Writes a space character to the debug stream, depending on the current setting for automatic insertion of spaces, and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#space">space</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#nospace">nospace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="noquote">
<db:title>[since 5.4] QDebug &amp;QDebug::noquote()</db:title>
<db:para>Disables automatic insertion of quotation characters around <db:link xlink:href="qchar.xml">QChar</db:link>, <db:link xlink:href="qstring.xml">QString</db:link> and <db:link xlink:href="qbytearray.xml">QByteArray</db:link> contents and returns a reference to the stream.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#quote">quote</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#maybeQuote">maybeQuote</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nospace">
<db:title>QDebug &amp;QDebug::nospace()</db:title>
<db:para>Disables automatic insertion of spaces and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#space">space</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#maybeSpace">maybeSpace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quote">
<db:title>[since 5.4] QDebug &amp;QDebug::quote()</db:title>
<db:para>Enables automatic insertion of quotation characters around <db:link xlink:href="qchar.xml">QChar</db:link>, <db:link xlink:href="qstring.xml">QString</db:link> and <db:link xlink:href="qbytearray.xml">QByteArray</db:link> contents and returns a reference to the stream.</db:para>
<db:para>Quoting is enabled by default.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#noquote">noquote</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#maybeQuote">maybeQuote</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetFormat">
<db:title>[since 5.4] QDebug &amp;QDebug::resetFormat()</db:title>
<db:para>Resets the stream formatting options, bringing it back to its original constructed state.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#space">space</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#quote">quote</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAutoInsertSpaces">
<db:title>[since 5.0] void QDebug::setAutoInsertSpaces(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:para>Enables automatic insertion of spaces between writes if <db:code role="parameter">b</db:code> is true; otherwise automatic insertion of spaces is disabled.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#autoInsertSpaces">autoInsertSpaces</db:link>()</db:member>
<db:member><db:link xlink:href="qdebugstatesaver.xml">QDebugStateSaver</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="space">
<db:title>QDebug &amp;QDebug::space()</db:title>
<db:para>Writes a space character to the debug stream and returns a reference to the stream.</db:para>
<db:para>The stream remembers that automatic insertion of spaces is enabled for future writes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdebug.xml#nospace">nospace</db:link>()</db:member>
<db:member><db:link xlink:href="qdebug.xml#maybeSpace">maybeSpace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QDebug::swap(QDebug &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this debug stream instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(bool <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the boolean value, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(char <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Writes the character, <db:code role="parameter">t</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-2">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(const QByteArray &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:para>Writes the byte array, <db:code role="parameter">b</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-3">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(const QString &amp;<db:emphasis>s</db:emphasis>)</db:title>
<db:para>Writes the string, <db:code role="parameter">s</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-4">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(const char *<db:emphasis>s</db:emphasis>)</db:title>
<db:para>Writes the '\0'-terminated string, <db:code role="parameter">s</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-5">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(const void *<db:emphasis>p</db:emphasis>)</db:title>
<db:para>Writes a pointer, <db:code role="parameter">p</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-6">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(double <db:emphasis>f</db:emphasis>)</db:title>
<db:para>Writes the 64-bit floating point number, <db:code role="parameter">f</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-7">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(float <db:emphasis>f</db:emphasis>)</db:title>
<db:para>Writes the 32-bit floating point number, <db:code role="parameter">f</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-8">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Writes the signed integer, <db:code role="parameter">i</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-9">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(long <db:emphasis>l</db:emphasis>)</db:title>
<db:para>Writes the signed long integer, <db:code role="parameter">l</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-10">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(qint64 <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Writes the signed 64-bit integer, <db:code role="parameter">i</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-11">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(quint64 <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Writes then unsigned 64-bit integer, <db:code role="parameter">i</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-12">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(short <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Writes the signed short integer, <db:code role="parameter">i</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-13">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(unsigned int <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Writes then unsigned integer, <db:code role="parameter">i</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-14">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(unsigned long <db:emphasis>l</db:emphasis>)</db:title>
<db:para>Writes then unsigned long integer, <db:code role="parameter">l</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-15">
<db:title>QDebug &amp;QDebug::operator&lt;&lt;(unsigned short <db:emphasis>i</db:emphasis>)</db:title>
<db:para>Writes then unsigned short integer, <db:code role="parameter">i</db:code>, to the stream and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDebug &amp;QDebug::operator=(const QDebug &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the <db:code role="parameter">other</db:code> debug stream to this stream and returns a reference to this stream.</db:para>
</db:section>
</db:section>
</db:article>
