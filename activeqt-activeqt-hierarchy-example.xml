<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Hierarchy Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The Hierarchy example is shows how to write an in-process ActiveX control. The control is a <db:link xlink:href="qwidget.xml">QWidget</db:link> subclass with child widgets that are accessible as sub-types.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">class QParentWidget : public QWidget
{
    Q_OBJECT
    Q_CLASSINFO(&quot;ClassID&quot;, &quot;{d574a747-8016-46db-a07c-b2b4854ee75c}&quot;);
    Q_CLASSINFO(&quot;InterfaceID&quot;, &quot;{4a30719d-d9c2-4659-9d16-67378209f822}&quot;);
    Q_CLASSINFO(&quot;EventsID&quot;, &quot;{4a30719d-d9c2-4659-9d16-67378209f823}&quot;);
public:
    QParentWidget(QWidget *parent = 0);

    QSize sizeHint() const;

public slots:
    void createSubWidget( const QString &amp;name );

    QSubWidget *subWidget( const QString &amp;name );

private:
    QVBoxLayout *vbox;
};
</db:programlisting>
<db:para>The <db:code>QParentWidget</db:code> class provides slots to create a widget with a name, and to return a pointer to a named widget. The class declaration uses <db:code>Q_CLASSINFO()</db:code> to provide the COM identifiers for this class.</db:para>
<db:programlisting language="cpp">QParentWidget::QParentWidget(QWidget *parent)
: QWidget(parent)
{
    vbox = new QVBoxLayout(this);
}

</db:programlisting>
<db:para>The constructor of <db:code>QParentWidget</db:code> creates a vertical box layout. New child widgets are automatically added to the layout.</db:para>
<db:programlisting language="cpp">void QParentWidget::createSubWidget(const QString &amp;name)
{
    QSubWidget *sw = new QSubWidget(this, name);
    vbox-&gt;addWidget(sw);
    sw-&gt;setLabel(name);
    sw-&gt;show();
}

</db:programlisting>
<db:para>The <db:code>createSubWidget</db:code> slot creates a new <db:code>QSubWidget</db:code> with the name provided in the parameter, and sets the label to that name. The widget is also shown explicitly.</db:para>
<db:programlisting language="cpp">QSubWidget *QParentWidget::subWidget(const QString &amp;name)
{
    return findChild&lt;QSubWidget*&gt;(name);
}

</db:programlisting>
<db:para>The <db:code>subWidget</db:code> slot uses the <db:code>QObject::child()</db:code> function and returns the first child of type <db:code>QSubWidget</db:code> that has the requested name.</db:para>
<db:programlisting language="cpp">class QSubWidget : public QWidget
{
    Q_OBJECT
    Q_PROPERTY( QString label READ label WRITE setLabel )

    Q_CLASSINFO(&quot;ClassID&quot;, &quot;{850652f4-8f71-4f69-b745-bce241ccdc30}&quot;);
    Q_CLASSINFO(&quot;InterfaceID&quot;, &quot;{2d76cc2f-3488-417a-83d6-debff88b3c3f}&quot;);
    Q_CLASSINFO(&quot;ToSuperClass&quot;, &quot;QSubWidget&quot;);

public:
    QSubWidget(QWidget *parent = 0, const QString &amp;name = QString());

    void setLabel( const QString &amp;text );
    QString label() const;

    QSize sizeHint() const;

protected:
    void paintEvent( QPaintEvent *e );

private:
    QString lbl;
};
</db:programlisting>
<db:para>The <db:code>QSubWidget</db:code> class has a single string-property <db:code>label</db:code>, and implements the paintEvent to draw the label. The class uses again <db:code>Q_CLASSINFO</db:code> to provide the COM identifiers, and also sets the <db:emphasis>ToSuperClass</db:emphasis> attribute to <db:emphasis>QSubWidget</db:emphasis>, to ensure that only no slots of any superclasses (i.e. <db:link xlink:href="qwidget.xml">QWidget</db:link>) are exposed.</db:para>
<db:programlisting language="cpp">QSubWidget::QSubWidget(QWidget *parent, const QString &amp;name)
: QWidget(parent)
{
    setObjectName(name);
}

void QSubWidget::setLabel(const QString &amp;text)
{
    lbl = text;
    setObjectName(text);
    update();
}

QString QSubWidget::label() const
{
    return lbl;
}

QSize QSubWidget::sizeHint() const
{
    QFontMetrics fm(font());
    return QSize(fm.width(lbl), fm.height());
}

void QSubWidget::paintEvent(QPaintEvent *)
{
    QPainter painter(this);
    painter.setPen(palette().text().color());
    painter.drawText(rect(), Qt::AlignCenter, lbl);
}
</db:programlisting>
<db:para>The implementation of the <db:code>QSubWidget</db:code> class is self-explanatory.</db:para>
<db:programlisting language="cpp">#include &quot;objects.h&quot;
#include &lt;QAxFactory&gt;

QAXFACTORY_BEGIN(&quot;{9e626211-be62-4d18-9483-9419358fbb03}&quot;, &quot;{75c276de-1df5-451f-a004-e4fa1a587df1}&quot;)
    QAXCLASS(QParentWidget)
    QAXTYPE(QSubWidget)
QAXFACTORY_END()
</db:programlisting>
<db:para>The classes are then exported using a <db:link xlink:href="qaxfactory.xml">QAxFactory</db:link>. <db:code>QParentWidget</db:code> is exported as a full class (which can be created ), while <db:code>QSubWidget</db:code> is only exported as a type, which can only be created indirectly through APIs of <db:code>QParentWidget</db:code>.</db:para>
<db:para>To build the example you must first build the <db:link xlink:href="qaxserver-module.xml">QAxServer</db:link> library. Then run qmake and your make tool in <db:code>activeqt/hierarchy</db:code>.</db:para>
<db:para>The <db:link xlink:href="qaxserver-demo-hierarchy.xml">demonstration</db:link> requires your WebBrowser to support ActiveX controls, and scripting to be enabled.</db:para>
<db:programlisting language="cpp">&lt;script language=&quot;javascript&quot;&gt;
function createSubWidget( form )
{
    ParentWidget.createSubWidget( form.nameEdit.value );
}

function renameSubWidget( form )
{
    var SubWidget = ParentWidget.subWidget( form.nameEdit.value );
    if ( !SubWidget ) {
        alert( &quot;No such widget &quot; + form.nameEdit.value + &quot;!&quot; );
        return;
    }
    SubWidget.label = form.labelEdit.value;
    form.nameEdit.value = SubWidget.label;
}

function setFont( form )
{
    ParentWidget.font = form.fontEdit.value;
}
&lt;/script&gt;

&lt;p&gt;
This widget can have many children!
&lt;/p&gt;
&lt;object ID=&quot;ParentWidget&quot; CLASSID=&quot;CLSID:d574a747-8016-46db-a07c-b2b4854ee75c&quot;
CODEBASE=&quot;http://www.qt-project.org/demos/hierarchy.cab&quot;&gt;
[Object not available! Did you forget to build and register the server?]
&lt;/object&gt;&lt;br /&gt;
&lt;form&gt;
&lt;input type=&quot;edit&quot; ID=&quot;nameEdit&quot; value=&quot;&amp;lt;enter object name&amp;gt;&quot; /&gt;
&lt;input type=&quot;button&quot; value=&quot;Create&quot; onClick=&quot;createSubWidget(this.form)&quot; /&gt;
&lt;input type=&quot;edit&quot; ID=&quot;labelEdit&quot; /&gt;
&lt;input type=&quot;button&quot; value=&quot;Rename&quot; onClick=&quot;renameSubWidget(this.form)&quot; /&gt;
&lt;br /&gt;
&lt;input type=&quot;edit&quot; ID=&quot;fontEdit&quot; value=&quot;MS Sans Serif&quot; /&gt;
&lt;input type=&quot;button&quot; value = &quot;Set Font&quot; onClick=&quot;setFont(this.form)&quot; /&gt;
&lt;/form&gt;
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="activeqt/hierarchy/hierarchy.pro">activeqt/hierarchy/hierarchy.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/hierarchy/main.cpp">activeqt/hierarchy/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/hierarchy/objects.cpp">activeqt/hierarchy/objects.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/hierarchy/objects.h">activeqt/hierarchy/objects.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
