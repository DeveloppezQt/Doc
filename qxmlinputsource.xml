<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlInputSource Class</db:title>
<db:productname>QtCore5Compat</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 5 Core Compatibility APIs Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlinputsource.xml">QXmlInputSource</db:link> class provides the input data for the <db:link xlink:href="qxmlreader.xml">QXmlReader</db:link> subclasses.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlInputSource</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core5Compat)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core5Compat)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core5compat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlInputSource is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>All subclasses of <db:link xlink:href="qxmlreader.xml">QXmlReader</db:link> read the input XML document from this class.</db:para>
<db:para>This class recognizes the encoding of the data by reading the encoding declaration in the XML file if it finds one, and reading the data using the corresponding encoding. If it does not find an encoding declaration, then it assumes that the data is either in UTF-8 or UTF-16, depending on whether it can find a byte-order mark.</db:para>
<db:para>There are two ways to populate the input source with data: you can construct it with a QIODevice* so that the input source reads the data from that device. Or you can set the data explicitly with one of the <db:link xlink:href="qxmlinputsource.xml#setData">setData</db:link>() functions.</db:para>
<db:para>Usually you either construct a <db:link xlink:href="qxmlinputsource.xml">QXmlInputSource</db:link> that works on a QIODevice* or you construct an empty <db:link xlink:href="qxmlinputsource.xml">QXmlInputSource</db:link> and set the data with <db:link xlink:href="qxmlinputsource.xml#setData">setData</db:link>(). There are only rare occasions where you would want to mix both methods.</db:para>
<db:para>The <db:link xlink:href="qxmlreader.xml">QXmlReader</db:link> subclasses use the <db:link xlink:href="qxmlinputsource.xml#next">next</db:link>() function to read the input character by character. If you want to start from the beginning again, use <db:link xlink:href="qxmlinputsource.xml#reset">reset</db:link>().</db:para>
<db:para>The functions <db:link xlink:href="qxmlinputsource.xml#data">data</db:link>() and <db:link xlink:href="qxmlinputsource.xml#fetchData">fetchData</db:link>() are useful if you want to do something with the data other than parsing, e.g. displaying the raw XML file. The benefit of using the QXmlInputClass in such cases is that it tries to use the correct encoding.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlreader.xml">QXmlReader</db:link></db:member>
<db:member><db:link xlink:href="qxmlsimplereader.xml">QXmlSimpleReader</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlInputSource">
<db:title>QXmlInputSource::QXmlInputSource()</db:title>
<db:para>Constructs an input source which contains no data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlinputsource.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QXmlInputSource-1">
<db:title>[explicit] QXmlInputSource::QXmlInputSource(QIODevice *<db:emphasis>dev</db:emphasis>)</db:title>
<db:para>Constructs an input source and gets the data from device <db:code role="parameter">dev</db:code>. If <db:code role="parameter">dev</db:code> is not open, it is opened in read-only mode. If <db:code role="parameter">dev</db:code> is 0 or it is not possible to read from the device, the input source will contain no data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlinputsource.xml#setData">setData</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlinputsource.xml#fetchData">fetchData</db:link>()</db:member>
<db:member>QIODevice</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QXmlInputSource">
<db:title>[virtual noexcept] QXmlInputSource::~QXmlInputSource()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[virtual] QString QXmlInputSource::data() const</db:title>
<db:para>Returns the data the input source contains or an empty string if the input source does not contain any data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlinputsource.xml#setData">setData</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlinputsource.xml#QXmlInputSource">QXmlInputSource</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlinputsource.xml#fetchData">fetchData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fetchData">
<db:title>[virtual] void QXmlInputSource::fetchData()</db:title>
<db:para>This function reads more data from the device that was set during construction. If the input source already contained data, this function deletes that data first.</db:para>
<db:para>This object contains no data after a call to this function if the object was constructed without a device to read data from or if this function was not able to get more data from the device.</db:para>
<db:para>There are two occasions where a fetch is done implicitly by another function call: during construction (so that the object starts out with some initial data where available), and during a call to <db:link xlink:href="qxmlinputsource.xml#next">next</db:link>() (if the data had run out).</db:para>
<db:para>You don't normally need to use this function if you use <db:link xlink:href="qxmlinputsource.xml#next">next</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlinputsource.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlinputsource.xml#next">next</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlinputsource.xml#QXmlInputSource">QXmlInputSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromRawData">
<db:title>[virtual protected] QString QXmlInputSource::fromRawData(const QByteArray &amp;<db:emphasis>data</db:emphasis>, bool <db:emphasis>beginning</db:emphasis> = false)</db:title>
<db:para>This function reads the XML file from <db:code role="parameter">data</db:code> and tries to recognize the encoding. It converts the raw data <db:code role="parameter">data</db:code> into a QString and returns it. It tries its best to get the correct encoding for the XML file.</db:para>
<db:para>If <db:code role="parameter">beginning</db:code> is true, this function assumes that the data starts at the beginning of a new XML document and looks for an encoding declaration. If <db:code role="parameter">beginning</db:code> is false, it converts the raw data using the encoding determined from prior calls.</db:para>
</db:section>
<db:section xml:id="next">
<db:title>[virtual] QChar QXmlInputSource::next()</db:title>
<db:para>Returns the next character of the input source. If this function reaches the end of available data, it returns QXmlInputSource::EndOfData. If you call next() after that, it tries to fetch more data by calling <db:link xlink:href="qxmlinputsource.xml#fetchData">fetchData</db:link>(). If the <db:link xlink:href="qxmlinputsource.xml#fetchData">fetchData</db:link>() call results in new data, this function returns the first character of that data; otherwise it returns QXmlInputSource::EndOfDocument.</db:para>
<db:para>Readers, such as <db:link xlink:href="qxmlsimplereader.xml">QXmlSimpleReader</db:link>, will assume that the end of the XML document has been reached if the this function returns QXmlInputSource::EndOfDocument, and will check that the supplied input is well-formed. Therefore, when reimplementing this function, it is important to ensure that this behavior is duplicated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlinputsource.xml#reset">reset</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlinputsource.xml#fetchData">fetchData</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlsimplereader.xml#parse">QXmlSimpleReader::parse</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlsimplereader.xml#parseContinue">QXmlSimpleReader::parseContinue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reset">
<db:title>[virtual] void QXmlInputSource::reset()</db:title>
<db:para>This function sets the position used by <db:link xlink:href="qxmlinputsource.xml#next">next</db:link>() to the beginning of the data returned by <db:link xlink:href="qxmlinputsource.xml#data">data</db:link>(). This is useful if you want to use the input source for more than one parse.</db:para>
<db:note>
<db:para>In the case that the underlying data source is a QIODevice, the current position in the device is not automatically set to the start of input. Call QIODevice::seek(0) on the device to do this.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlinputsource.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>[virtual] void QXmlInputSource::setData(const QString &amp;<db:emphasis>dat</db:emphasis>)</db:title>
<db:para>Sets the data of the input source to <db:code role="parameter">dat</db:code>.</db:para>
<db:para>If the input source already contains data, this function deletes that data first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlinputsource.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData-1">
<db:title>[virtual] void QXmlInputSource::setData(const QByteArray &amp;<db:emphasis>dat</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>The data <db:code role="parameter">dat</db:code> is passed through the correct text-codec, before it is set.</db:para>
</db:section>
</db:section>
</db:article>
