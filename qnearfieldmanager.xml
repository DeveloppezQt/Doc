<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNearFieldManager Class</db:title>
<db:productname>QtNfc</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt NFC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnearfieldmanager.xml">QNearFieldManager</db:link> class provides access to notifications for NFC events.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNearFieldManager</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Nfc)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Nfc)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += nfc</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNearFieldManager is part of <db:simplelist><db:member>connectivity-nfc</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>NFC Forum devices support two modes of communications. The first mode, peer-to-peer communications, is used to communicate between two NFC Forum devices. The second mode, master/slave communications, is used to communicate between an NFC Forum device and an NFC Forum Tag or Contactless Card. The <db:link xlink:href="qnearfieldmanager.xml#targetDetected">targetDetected</db:link>() signal is emitted when a target device enters communications range. Communications can be initiated from the slot connected to this signal.</db:para>
<db:para>NFC Forum devices generally operate as the master in master/slave communications. Some devices are also capable of operating as the slave, so called Card Emulation mode. In this mode the local NFC device emulates a NFC Forum Tag or Contactless Card.</db:para>
<db:para>Applications can connect to the <db:link xlink:href="qnearfieldmanager.xml#targetDetected">targetDetected</db:link>() and <db:link xlink:href="qnearfieldmanager.xml#targetLost">targetLost</db:link>() signals to get notified when an NFC Forum Tag enters or leaves proximity. Before these signals are emitted target detection must be started with the <db:link xlink:href="qnearfieldmanager.xml#startTargetDetection">startTargetDetection</db:link>() function. Target detection can be stopped with the <db:link xlink:href="qnearfieldmanager.xml#stopTargetDetection">stopTargetDetection</db:link>() function. When the target is no longer required the target should be deleted as other applications may be blocked from accessing the target.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AdapterState-enum">
<db:title>[since 5.12] enum QNearFieldManager::AdapterState</db:title>
<db:enumsynopsis>
<db:enumname>AdapterState</db:enumname>
<db:enumitem>
<db:enumidentifier>Offline</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TurningOn</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Online</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TurningOff</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the different states a NFC adapter can have.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldmanager.xml">QNearFieldManager</db:link></db:emphasis>::<db:emphasis role="bold">AdapterState</db:emphasis>::Offline</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The nfc adapter is offline.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldmanager.xml">QNearFieldManager</db:link></db:emphasis>::<db:emphasis role="bold">AdapterState</db:emphasis>::TurningOn</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The nfc adapter is turning on.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldmanager.xml">QNearFieldManager</db:link></db:emphasis>::<db:emphasis role="bold">AdapterState</db:emphasis>::Online</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The nfc adapter is online.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldmanager.xml">QNearFieldManager</db:link></db:emphasis>::<db:emphasis role="bold">AdapterState</db:emphasis>::TurningOff</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The nfc adapter is turning off.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.12.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNearFieldManager">
<db:title>[explicit] QNearFieldManager::QNearFieldManager(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QNearFieldManager</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QNearFieldManager(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new near field manager with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNearFieldManager">
<db:title>[virtual] QNearFieldManager::~QNearFieldManager()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QNearFieldManager</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QNearFieldManager()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the near field manager.</db:para>
</db:section>
<db:section xml:id="adapterStateChanged">
<db:title>[since 5.12] void QNearFieldManager::adapterStateChanged(QNearFieldManager::AdapterState <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>adapterStateChanged</db:methodname>
<db:methodparam>
<db:type>QNearFieldManager::AdapterState</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void adapterStateChanged(QNearFieldManager::AdapterState state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the <db:code role="parameter">state</db:code> of the NFC adapter changed.</db:para>
<db:note>
<db:para>Currently, this signal is only emitted on Android.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="isEnabled">
<db:title>[since 6.2] bool QNearFieldManager::isEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the device has a NFC adapter and it is turned on; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnearfieldmanager.xml#isSupported">isSupported</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSupported">
<db:title>[since 5.12] bool QNearFieldManager::isSupported(QNearFieldTarget::AccessMethod <db:emphasis>accessMethod</db:emphasis> = QNearFieldTarget::AnyAccess) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSupported</db:methodname>
<db:methodparam>
<db:type>QNearFieldTarget::AccessMethod</db:type>
<db:parameter>accessMethod</db:parameter>
<db:initializer>QNearFieldTarget::AnyAccess</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSupported(QNearFieldTarget::AccessMethod accessMethod) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the underlying device has a NFC adapter; otherwise returns <db:code>false</db:code>. If an <db:code role="parameter">accessMethod</db:code> is given, the function returns <db:code>true</db:code> only if the NFC adapter supports the given <db:code role="parameter">accessMethod</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnearfieldmanager.xml#isEnabled">isEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUserInformation">
<db:title>[since 6.2] void QNearFieldManager::setUserInformation(const QString &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUserInformation</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUserInformation(const QString &amp;message)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the message shown to the user by the system. If the target detection is running the <db:code role="parameter">message</db:code> will be updated immediately and can be used as a progress message. The last message set before a call to <db:link xlink:href="qnearfieldmanager.xml#startTargetDetection">startTargetDetection</db:link>() without an error message is used as a success message. If the target detection is not running the <db:code role="parameter">message</db:code> will be used as the initial message when the next detection is started. By default no message is shown to the user.</db:para>
<db:note>
<db:para>Currently, this function only has an effect on iOS because a popup is shown by the system during the scan. On iOS, this <db:code role="parameter">message</db:code> is mapped to the alert message which is shown upon successful completion of the scan. Other platforms will ignore <db:code role="parameter">message</db:code>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnearfieldmanager.xml#startTargetDetection">startTargetDetection</db:link>()</db:member>
<db:member><db:link xlink:href="qnearfieldmanager.xml#stopTargetDetection">stopTargetDetection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startTargetDetection">
<db:title>bool QNearFieldManager::startTargetDetection(QNearFieldTarget::AccessMethod <db:emphasis>accessMethod</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>startTargetDetection</db:methodname>
<db:methodparam>
<db:type>QNearFieldTarget::AccessMethod</db:type>
<db:parameter>accessMethod</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool startTargetDetection(QNearFieldTarget::AccessMethod accessMethod)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts detecting targets and returns <db:code>true</db:code> if target detection is successfully started; otherwise returns <db:code>false</db:code>. Causes the <db:link xlink:href="qnearfieldmanager.xml#targetDetected">targetDetected</db:link>() signal to be emitted when a target is within proximity. Only tags with the given <db:code role="parameter">accessMethod</db:code> will be delivered. Active detection continues until <db:link xlink:href="qnearfieldmanager.xml#stopTargetDetection">stopTargetDetection</db:link>() has been called.</db:para>
<db:para>To detect targets with a different <db:code role="parameter">accessMethod</db:code>, <db:link xlink:href="qnearfieldmanager.xml#stopTargetDetection">stopTargetDetection</db:link>() must be called first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnearfieldmanager.xml#stopTargetDetection">stopTargetDetection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stopTargetDetection">
<db:title>void QNearFieldManager::stopTargetDetection(const QString &amp;<db:emphasis>errorMessage</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stopTargetDetection</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>errorMessage</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stopTargetDetection(const QString &amp;errorMessage)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops detecting targets. The <db:link xlink:href="qnearfieldmanager.xml#targetDetected">targetDetected</db:link>() signal will no longer be emitted until another call to <db:link xlink:href="qnearfieldmanager.xml#startTargetDetection">startTargetDetection</db:link>() is made. Targets detected before are still valid.</db:para>
<db:para>If an <db:code role="parameter">errorMessage</db:code> is provided, this is a hint to the system that the goal, the application had, was not reached. The <db:code role="parameter">errorMessage</db:code> and a matching error icon are shown to the user. Calling this function with an empty <db:code role="parameter">errorMessage</db:code>, implies a successful operation end; otherwise an <db:code role="parameter">errorMessage</db:code> should be passed to this function.</db:para>
<db:note>
<db:para>Currently, <db:code role="parameter">errorMessage</db:code> only has an effect on iOS because a popup is shown by the system during the scan where the <db:code role="parameter">errorMessage</db:code> is visible. Other platforms will ignore this parameter.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnearfieldmanager.xml#setUserInformation">setUserInformation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="targetDetected">
<db:title>void QNearFieldManager::targetDetected(QNearFieldTarget *<db:emphasis>target</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>targetDetected</db:methodname>
<db:methodparam>
<db:type>QNearFieldTarget *</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void targetDetected(QNearFieldTarget *target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a target is detected. The <db:code role="parameter">target</db:code> parameter represents the detected target.</db:para>
<db:para>This signal will be emitted for all detected targets.</db:para>
<db:para><db:link xlink:href="qnearfieldmanager.xml">QNearFieldManager</db:link> maintains ownership of <db:code role="parameter">target</db:code>, however, it will not be destroyed until the <db:link xlink:href="qnearfieldmanager.xml">QNearFieldManager</db:link> destructor is called. Ownership may be transferred by calling <db:link xlink:href="qobject.xml#setParent">setParent</db:link>().</db:para>
<db:para>Do not delete <db:code role="parameter">target</db:code> from the slot connected to this signal, instead call <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>().</db:para>
<db:note>
<db:para>that if <db:code role="parameter">target</db:code> is deleted before it moves out of proximity the <db:link xlink:href="qnearfieldmanager.xml#targetLost">targetLost</db:link>() signal will not be emitted.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnearfieldmanager.xml#targetLost">targetLost</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="targetDetectionStopped">
<db:title>[since 6.2] void QNearFieldManager::targetDetectionStopped()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>targetDetectionStopped</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void targetDetectionStopped()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the target detection is stopped.</db:para>
<db:note>
<db:para>Mostly this signal is emitted when <db:link xlink:href="qnearfieldmanager.xml#stopTargetDetection">stopTargetDetection</db:link>() has been called. Additionally the user is able to stop the detection on iOS within a popup shown by the system during the scan, which also leads to emitting this signal.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="targetLost">
<db:title>void QNearFieldManager::targetLost(QNearFieldTarget *<db:emphasis>target</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>targetLost</db:methodname>
<db:methodparam>
<db:type>QNearFieldTarget *</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void targetLost(QNearFieldTarget *target)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a target moves out of proximity. The <db:code role="parameter">target</db:code> parameter represents the lost target.</db:para>
<db:para>Do not delete <db:code role="parameter">target</db:code> from the slot connected to this signal, instead use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnearfieldtarget.xml#disconnected">QNearFieldTarget::disconnected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
