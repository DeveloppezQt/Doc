<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Configure Options</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Configuring Qt's compile options.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:code>configure</db:code> is a command-line tool which determines how to build Qt for a particular platform. Configure can exclude a feature in Qt as well as determine how Qt builds and deploys applications onto host platforms. This page discusses some of the configure options, but for the full list of options, enter the command <db:code>configure -h</db:code>. Configure should be run from the main Qt source directory.</db:para>
<db:para>Unless stated otherwise, the commands in this page are for the Linux platforms. On macOS and on Windows, the <db:code>PATH</db:code> and directory structure are different, therefore the commands will vary. Also, on Windows systems, the configure script is called <db:emphasis>configure.bat</db:emphasis>.</db:para>
<db:para>After running <db:code>configure</db:code>, build the sources with the <db:code>make</db:code> tool belonging to the chosen toolchain.</db:para>
<db:section xml:id="source-build-and-install-directories">
<db:title>Source, Build, and Install Directories</db:title>
<db:para>The <db:emphasis>source</db:emphasis> directory contains the source code that is obtained from the source package or git repository. The <db:emphasis>build</db:emphasis> directory is where the build-related files such as Makefiles, object files, and other intermediate files are stored. The <db:emphasis>install</db:emphasis> directory is where the binaries and libraries are installed, for use either by the system or by the application.</db:para>
<db:para>It is recommended to keep these directories separate by shadow-building and using the <db:code>-prefix</db:code> option. This enables you to keep the Qt <db:emphasis>source</db:emphasis> tree clean from the build artifacts and binaries, which are stored in a separate directory. This method is very convenient if you want to have multiple builds from the same source tree, but for different configurations. To shadow-build, run <db:code>configure</db:code> from a separate directory:</db:para>
<db:programlisting language="cpp" role="bad">mkdir ~/qt-build
cd ~/qt-build
~/qt-source/configure -prefix /opt/Qt5.9
qmake
</db:programlisting>
<db:para>Configuring with the <db:code>-prefix</db:code> option means that the Qt binaries and libraries are installed into another directory, which is <db:code>/opt/Qt5.9</db:code> in this case. Running <db:code>qmake</db:code> generates the Makefiles in the <db:emphasis>~/qt-build</db:emphasis> directory and not in the <db:emphasis>source</db:emphasis> directory. After the Makefiles are in place, run the following commands to build the Qt binaries and libraries, and install them:</db:para>
<db:programlisting language="cpp" role="bad">make
make install
</db:programlisting>
</db:section>
<db:section xml:id="modules-and-features">
<db:title>Modules and Features</db:title>
<db:para>Qt consists of different <db:link xlink:href="qtmodules.xml">modules</db:link> whose sources can be found in different directories inside the top-level source directory. Users can explicitly exclude specific top-level directories to limit build times. Furthermore, each Qt module might have features that can also be explicitly enabled or disabled.</db:para>
<db:section xml:id="excluding-qt-modules">
<db:title>Excluding Qt Modules</db:title>
<db:para>Configure's <db:code>-skip</db:code> option allows top-level source directories to be excluded from the Qt build. Note that many directories contain multiple Qt modules. For example, to exclude Qt NFC and Qt Bluetooth from the Qt build, provide <db:code>-skip qtconnectivity</db:code> as the argument to configure.</db:para>
<db:programlisting language="cpp">./configure -skip qtconnectivity
</db:programlisting>
</db:section>
<db:section xml:id="including-or-excluding-features">
<db:title>Including or Excluding Features</db:title>
<db:para>The <db:code>-feature-</db:code><db:emphasis>&lt;feature&gt;</db:emphasis> and <db:code>-no-feature-</db:code><db:emphasis>&lt;feature&gt;</db:emphasis> options include and exclude specific features, respectively.</db:para>
<db:para>For example, to disable <db:link xlink:href="accessible.xml">Accessibility</db:link>, provide <db:code>-no-feature-accessibility</db:code> as the argument:</db:para>
<db:programlisting language="cpp">./configure -no-feature-accessibility
</db:programlisting>
<db:para>Use <db:code>configure -list-features</db:code> to show a list of all available features on the command line. Note that features can depend on other features, so disabling a feature might have side-effects on other features.</db:para>
<db:para>The <db:link xlink:href="https://doc.qt.io/QtForDeviceCreation/qt-configuration-tool.html">Qt Configuration Tool</db:link> that is part of <db:link xlink:href="http://doc.qt.io/QtForDeviceCreation">Qt for Device Creation</db:link> allows the tweaking of features and dependencies through a convenient user interface.</db:para>
</db:section>
</db:section>
<db:section xml:id="third-party-libraries">
<db:title>Third-Party Libraries</db:title>
<db:para>The Qt source packages include third-party libraries. To set whether Qt should use the system's versions of the libraries or to use the bundled version, pass either <db:code>-system</db:code> or <db:code>-qt</db:code> before the name of the library to configure.</db:para>
<db:para>The table below summarizes the third-party options:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Library Name</db:para>
</db:th>
<db:th>
<db:para>Bundled in Qt</db:para>
</db:th>
<db:th>
<db:para>Installed in System</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>zlib</db:para>
</db:td>
<db:td>
<db:para><db:code>-qt-zlib</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>-system-zlib</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>libjpeg</db:para>
</db:td>
<db:td>
<db:para><db:code>-qt-libjpeg</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>-system-libjpeg</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>libpng</db:para>
</db:td>
<db:td>
<db:para><db:code>-qt-libpng</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>-system-libpng</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>xcb</db:para>
</db:td>
<db:td>
<db:para><db:code>-qt-xcb</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>-system-xcb</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>freetype</db:para>
</db:td>
<db:td>
<db:para><db:code>-qt-freetype</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>-system-freetype</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PCRE</db:para>
</db:td>
<db:td>
<db:para><db:code>-qt-pcre</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>-system-pcre</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>HarfBuzz-NG</db:para>
</db:td>
<db:td>
<db:para><db:code>-qt-harfbuzz</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>-system-harfbuzz</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>It is also possible to disable support for these libraries by using <db:code>-no</db:code> instead of <db:code>-qt</db:code>. For example, to use the system's xcb library and disable zlib support, enter the following:</db:para>
<db:programlisting language="cpp">./configure -no-zlib -qt-libjpeg -qt-libpng -system-xcb
</db:programlisting>
<db:para>For a full list of options, consult the help with <db:code>configure -help</db:code>.</db:para>
</db:section>
<db:section xml:id="compiler-options">
<db:title>Compiler Options</db:title>
<db:para>The <db:code>-platform</db:code> option sets the host platform and the compiler for building the Qt sources. The list of supported platforms and compilers is found in the <db:link xlink:href="supported-platforms.xml">supported platforms</db:link> page while the full list is available in <db:emphasis>qtbase/mkspecs</db:emphasis> directory.</db:para>
<db:para>For example, on Ubuntu Linux systems, Qt can be compiled by several compilers such as clang or g++:</db:para>
<db:programlisting language="cpp">./configure -platform linux-clang
./configure -platform linux-g++
./configure -platform linux-g++-32
</db:programlisting>
<db:para>For <db:link xlink:href="windows.xml">Windows</db:link> machines, either MinGW or Visual Studio toolchains can be used to compile Qt.</db:para>
<db:programlisting language="cpp">configure.bat -platform win32-g++
configure.bat -platform win32-msvc
</db:programlisting>
<db:para>Afterwards, the generated Makefiles will use the appropriate compiler commands.</db:para>
</db:section>
<db:section xml:id="cross-compilation-options">
<db:title>Cross-Compilation Options</db:title>
<db:para>To configure Qt for cross-platform development and deployment, the development toolchain for the target platform needs to be set up. This set up varies among the <db:link xlink:href="supported-platforms.xml">Supported Platforms</db:link>.</db:para>
<db:para>Common options are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>-xplatform</db:code> - the target platform. Valid xplatform options are the same as the <db:code>-platform</db:code> options which are found in <db:emphasis>qtbase/mkspecs</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-device</db:code> - a specific device or chipsets. The list of devices that configure is compatible with are found in <db:emphasis>qtbase/mkspecs/devices</db:emphasis>. For more information, visit the <db:link xlink:href="http://wiki.qt.io/Category:Devices">Devices</db:link> Wiki page.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>-device-option</db:code> - sets additional qmake variables. For example, <db:code>-device-option CROSS_COMPILE=</db:code><db:emphasis>&lt;path-to-toolchain&gt;</db:emphasis> provides the environment variable, <db:code>CROSS_COMPILE</db:code>, as needed by certain devices.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Toolchains for non-desktop targets often come with a so-called <db:emphasis>sysroot</db:emphasis> which Qt needs to be configured against.</db:para>
</db:note>
<db:section xml:id="specific-options-for-platforms">
<db:title>Specific Options for Platforms</db:title>
<db:para>The following pages provide guidelines on how to configure Qt for specific platform development:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://wiki.qt.io/Qt5ForAndroidBuilding">Building Qt 5 for Android</db:link> Wiki page</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="ios-building-from-source.xml">Qt for iOS - Building from Source</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="winrt-support.xml#building-from-source">Qt for UWP - Building from Source</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="configure-linux-device.xml">Configure an Embedded Linux Device</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://wiki.qt.io/Qt_RaspberryPi">Qt for Raspberry Pi</db:link> - a community-driven site for Raspberry devices</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://wiki.qt.io/Category:Devices">Devices</db:link> - a list of other devices and chipsets</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="opengl-options-for-windows">
<db:title>OpenGL Options for Windows</db:title>
<db:para>On Windows, Qt can be configured with the system OpenGL or with <db:link xlink:href="https://chromium.googlesource.com/angle/angle/+/master/README.md">ANGLE</db:link>. By default, Qt is configured to use dynamic OpenGL. This means that it tries to use system OpenGL and falls back to ANGLE, which is bundled with Qt and depends on the DirectX SDK, if native OpenGL does not work. ANGLE enables running Qt applications that depend on OpenGL, without installing the latest OpenGL drivers. If ANGLE also fails, Qt will fall back to software rendering, which is the slowest but most safe of the rendering methods.</db:para>
<db:para>The <db:code>-opengl</db:code> option can be used to configure Qt to use the OpenGL in the target system, a different version of OpenGL ES (with or without ANGLE), or dynamically switch between the available OpenGL implementations.</db:para>
<db:programlisting language="cpp">configure.bat -opengl dynamic
</db:programlisting>
<db:para>With the <db:code>dynamic</db:code> option, Qt will try to use native OpenGL first. If that fails, it will fall back to ANGLE and finally to software rendering in case of ANGLE failing as well.</db:para>
<db:programlisting language="cpp">configure.bat -opengl desktop
</db:programlisting>
<db:para>With the <db:code>desktop</db:code> option, Qt uses the OpenGL installed on Windows, requiring that the OpenGL in the target Windows machine is compatible with the application. The <db:code>-opengl</db:code> option accepts two versions of OpenGL ES, <db:code>es2</db:code> for OpenGL ES 2.0 or <db:code>es1</db:code> for OpenGL ES Common Profile.</db:para>
<db:programlisting language="cpp">configure.bat -opengl es2
</db:programlisting>
<db:para>You can also use <db:code>-opengl dynamic</db:code>, which enable applications to dynamically switch between the available options at runtime. For more details about the benefits of using dynamic GL-switching, see <db:link xlink:href="windows-requirements.xml#graphics-drivers">Graphics Drivers</db:link>.</db:para>
</db:section>
<db:section xml:id="developer-builds">
<db:title>Developer Builds</db:title>
<db:para>The <db:code>-developer-build</db:code> option is not meant for shipping applications, but can be used for developing Qt. Such a build contains more exported symbols than a standard build and compiles with a higher warning level.</db:para>
</db:section>
</db:article>
