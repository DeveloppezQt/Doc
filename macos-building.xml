<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for macOS - Building from Source</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to install Qt on macOS.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="requirements">
<db:title>Requirements</db:title>
<db:para>Building Qt requires a macOS platform SDK and corresponding toolchain to be installed on the system. You can get this by installing the Xcode, as described in <db:link xlink:href="macos.xml#build-environment">Qt for macOS#Build Environment</db:link>.</db:para>
<db:para>You should always use the exact same Xcode and SDK version as listed in the <db:link xlink:href="macos.xml#supported-versions">Qt for macOS#Supported Versions</db:link>, to ensure that Qt has been tested in the configuration you're building.</db:para>
<db:para>In addition to Xcode, you will need to make sure you have the following dependencies in your path PATH.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>CMake (&gt;=3.16, &gt;= 3.18.4 for Ninja Multi-Config, &gt;= 3.21.1 for static Qt builds)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://ninja-build.org">Ninja</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you want to build Qt WebEngine or Qt PDF, you will need the following additional dependencies:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Python html5lib</db:para>
</db:listitem>
<db:listitem>
<db:para>Bison, Flex</db:para>
</db:listitem>
<db:listitem>
<db:para>Gperf</db:para>
</db:listitem>
<db:listitem>
<db:para>Node.js version 8 or later (version 12 recommended)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="qdoc-dependencies">
<db:title>QDoc Dependencies</db:title>
<db:para>QDoc uses Clang to parse C++ code. If you wish to build QDoc manually, refer to <db:link xlink:href="">Installing Clang for QDoc</db:link> for specific build requirements.</db:para>
</db:section>
</db:section>
<db:section xml:id="steps-for-building">
<db:title>Steps for Building</db:title>
<db:para>The following instructions describe how to build Qt from the source package. You can download the Qt sources from the <db:link xlink:href="http://qt.io/download">Downloads</db:link> page. For more information, visit the <db:link xlink:href="gettingstarted.xml">Getting Started with Qt</db:link> page.</db:para>
<db:section xml:id="step-1-unpack-the-archive">
<db:title>Step 1: Unpack the Archive</db:title>
<db:para>Unpack the archive if you have not done so already. For example, if you have the qt-everywhere-opensource-src-%VERSION%.tar.gz package, type the following commands at a command line prompt:</db:para>
<db:programlisting language="cpp">cd /tmp
gunzip qt-everywhere-opensource-src-%VERSION%.tar.gz        # uncompress the archive
tar xvf qt-everywhere-opensource-src-%VERSION%.tar          # unpack it
</db:programlisting>
<db:para>This creates the directory /tmp/qt-everywhere-opensource-src-%VERSION% containing the files from the archive.</db:para>
</db:section>
<db:section xml:id="step-2-build-the-qt-library">
<db:title>Step 2: Build the Qt Library</db:title>
<db:para>To configure the Qt library for your machine type, run the ./configure script in the package directory.</db:para>
<db:programlisting language="cpp">cd /tmp/qt-everywhere-opensource-src-%VERSION%
./configure
</db:programlisting>
<db:para>By default, Qt is configured for installation in the /usr/local/Qt-%VERSION% directory, but this can be changed by using the -prefix option.</db:para>
<db:para>By default, Qt is built as a framework, but you can built it as a set of dynamic libraries (dylibs) by specifying the -no-framework option.</db:para>
<db:para>As described in <db:link xlink:href="macos.xml#architectures">Qt for macOS#Architectures</db:link>, Qt will build for the architecture of your development machine by default. To configure a universal build of Qt with support for both x86_64 and arm64, add the following argument:</db:para>
<db:programlisting language="cpp">./configure -- -DCMAKE_OSX_ARCHITECTURES=&quot;x86_64;arm64&quot;
</db:programlisting>
<db:para>Qt can also be configured to be built with debugging symbols. This process is described in detail in the <db:link xlink:href="debug.xml">Debugging Techniques</db:link> document.</db:para>
<db:para>The <db:link xlink:href="configure-options.xml">Configure Options</db:link> page contains more information about the configure options.</db:para>
<db:para>To create the library and compile all the examples and tools, type:</db:para>
<db:programlisting language="cpp">cmake --build . --parallel
</db:programlisting>
<db:para>If -prefix is outside the build directory, you need to install the library, examples, and tools in the appropriate place. To do this, type:</db:para>
<db:programlisting language="cpp">cmake --install .
</db:programlisting>
<db:para>This command requires that you have administrator access on your machine.</db:para>
</db:section>
<db:section xml:id="step-3-set-the-environment-variables">
<db:title>Step 3: Set the Environment Variables</db:title>
<db:para>In order to use Qt, some environment variables need to be extended.</db:para>
<db:programlisting language="cpp">PATH               - to locate qmake, moc and other Qt tools
</db:programlisting>
<db:para>This is done like this:</db:para>
<db:para>In .profile (if your shell is bash), or .zshenv (for zsh) add the following lines:</db:para>
<db:programlisting language="cpp">PATH=/usr/local/Qt-%VERSION%/bin:$PATH
export PATH
</db:programlisting>
<db:para>In .login (in case your shell is csh or tcsh), add the following line:</db:para>
<db:programlisting language="cpp">setenv PATH /usr/local/Qt-%VERSION%/bin:$PATH
</db:programlisting>
<db:para>If you use a different shell, please modify your environment variables accordingly.</db:para>
<db:para><db:emphasis role="bold">Qt is now installed.</db:emphasis></db:para>
</db:section>
</db:section>
</db:article>
