<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for macOS - Building from Source</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to install Qt on macOS.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="requirements">
<db:title>Requirements</db:title>
<db:para>Qt requires a macOS platform SDK and corresponding toolchain to be installed on the system. You can get this by installing the Xcode command line tools:</db:para>
<db:programlisting language="cpp">xcode-select --install
</db:programlisting>
<db:para>Or by downloading and installing <db:link xlink:href="https://developer.apple.com/xcode/">Xcode</db:link>.</db:para>
<db:section xml:id="compiler-versions">
<db:title>Compiler Versions</db:title>
<db:para>Qt for macOS is tested and compatible with several versions of GCC (GNU Compiler Collection) and Clang (as available from Xcode). For a list of tested configurations, refer to the <db:emphasis>Reference Configuration</db:emphasis> section of the <db:link xlink:href="supported-platforms.xml#reference-configurations">supported platforms</db:link> page.</db:para>
</db:section>
</db:section>
<db:section xml:id="qdoc-dependencies">
<db:title>QDoc Dependencies</db:title>
<db:para>Since version 5.11, <db:link xlink:href="qdoc-index.xml">QDoc</db:link> uses Clang to parse C++ code. If you wish to build QDoc manually, refer to <db:link xlink:href="qdoc-guide-clang.xml">Installing Clang for QDoc</db:link> for specific build requirements.</db:para>
</db:section>
<db:section xml:id="steps-for-building">
<db:title>Steps for Building</db:title>
<db:para>The following instructions describe how to build Qt from the source package. You can download the Qt 5 sources from the <db:link xlink:href="http://qt.io/download">Downloads</db:link> page. For more information, visit the <db:link xlink:href="gettingstarted.xml">Getting Started with Qt</db:link> page.</db:para>
<db:section xml:id="step-1-install-the-license-file-commercially-licensed-qt-only">
<db:title>Step 1: Install the License File (Commercially Licensed Qt Only)</db:title>
<db:para>If you use Qt with a commercial license, the Qt tools look for a local license file. If you are using a binary installer or the commercial Qt Creator, your licenses are automatically fetched and stored in your local user profile ($HOME/Library/Application Support/Qt/qtlicenses.ini file).</db:para>
<db:para>If you do not use any binary installer or Qt Creator, you can download the respective license file from your <db:link xlink:href="https://account.qt.io/">Qt Account</db:link> Web portal and save it to your user profile as $HOME/.qt-license. If you prefer a different location or file name, you need to set the QT_LICENSE_FILE environment variable to the respective file path.</db:para>
</db:section>
<db:section xml:id="step-2-unpack-the-archive">
<db:title>Step 2: Unpack the Archive</db:title>
<db:para>Unpack the archive if you have not done so already. For example, if you have the qt-everywhere-opensource-src-%VERSION%.tar.gz package, type the following commands at a command line prompt:</db:para>
<db:programlisting language="cpp">cd /tmp
gunzip qt-everywhere-opensource-src-%VERSION%.tar.gz        # uncompress the archive
tar xvf qt-everywhere-opensource-src-%VERSION%.tar          # unpack it
</db:programlisting>
<db:para>This creates the directory /tmp/qt-everywhere-opensource-src-%VERSION% containing the files from the archive.</db:para>
</db:section>
<db:section xml:id="step-3-build-the-qt-library">
<db:title>Step 3: Build the Qt Library</db:title>
<db:para>To configure the Qt library for your machine type, run the ./configure script in the package directory.</db:para>
<db:para>By default, Qt is configured for installation in the /usr/local/Qt-%VERSION% directory, but this can be changed by using the -prefix option.</db:para>
<db:programlisting language="cpp">cd /tmp/qt-everywhere-opensource-src-%VERSION%
./configure
</db:programlisting>
<db:para>By default, Qt is built as a framework, but you can built it as a set of dynamic libraries (dylibs) by specifying the -no-framework option.</db:para>
<db:para>Qt can also be configured to be built with debugging symbols. This process is described in detail in the <db:link xlink:href="debug.xml">Debugging Techniques</db:link> document.</db:para>
<db:para>The <db:link xlink:href="configure-options.xml">Configure Options</db:link> page contains more information about the configure options.</db:para>
<db:para>To create the library and compile all the examples and tools, type:</db:para>
<db:programlisting language="cpp">make
</db:programlisting>
<db:para>If -prefix is outside the build directory, you need to install the library, examples, and tools in the appropriate place. To do this, type:</db:para>
<db:programlisting language="cpp">sudo make -j1 install
</db:programlisting>
<db:para>This command requires that you have administrator access on your machine.</db:para>
<db:note>
<db:para>There is a potential race condition when running make install with multiple jobs. It is best to only run one make job (-j1) for the install.</db:para>
</db:note>
</db:section>
<db:section xml:id="step-4-set-the-environment-variables">
<db:title>Step 4: Set the Environment Variables</db:title>
<db:para>In order to use Qt, some environment variables need to be extended.</db:para>
<db:programlisting language="cpp">PATH               - to locate qmake, moc and other Qt tools
</db:programlisting>
<db:para>This is done like this:</db:para>
<db:para>In .profile (if your shell is bash), add the following lines:</db:para>
<db:programlisting language="cpp">PATH=/usr/local/Qt-%VERSION%/bin:$PATH
export PATH
</db:programlisting>
<db:para>In .login (in case your shell is csh or tcsh), add the following line:</db:para>
<db:programlisting language="cpp">setenv PATH /usr/local/Qt-%VERSION%/bin:$PATH
</db:programlisting>
<db:para>If you use a different shell, please modify your environment variables accordingly.</db:para>
<db:para><db:emphasis role="bold">That's all. Qt is now installed.</db:emphasis></db:para>
</db:section>
</db:section>
<db:section xml:id="limitations">
<db:title>Limitations</db:title>
<db:section xml:id="fink">
<db:title>Fink</db:title>
<db:para>If you have installed the Qt for X11 package from <db:link xlink:href="http://www.finkproject.org/">Fink</db:link>, it will set the QMAKESPEC environment variable to darwin-g++. This will cause problems when you build the Qt for macOS package. To fix this, simply unset your QMAKESPEC or set it to macx-g++ before you run configure. To get a fresh Qt distribution, run make confclean on the command-line.</db:para>
</db:section>
</db:section>
</db:article>
