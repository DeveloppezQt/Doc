<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSizePolicy Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link> class is a layout attribute describing horizontal and vertical resizing policy.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSizePolicy</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSizePolicy is part of <db:simplelist><db:member>geomanagement</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The size policy of a widget is an expression of its willingness to be resized in various ways, and affects how the widget is treated by the <db:link xlink:href="layout.xml">layout engine</db:link>. Each widget returns a <db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link> that describes the horizontal and vertical resizing policy it prefers when being laid out. You can change this for a specific widget by changing its <db:link xlink:href="qwidget.xml#sizePolicy-prop">QWidget::sizePolicy</db:link> property.</db:para>
<db:para><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link> contains two independent <db:link xlink:href="qsizepolicy.xml#Policy-enum">QSizePolicy::Policy</db:link> values and two stretch factors; one describes the widgets's horizontal size policy, and the other describes its vertical size policy. It also contains a flag to indicate whether the height and width of its preferred size are related.</db:para>
<db:para>The horizontal and vertical policies can be set in the constructor, and altered using the <db:link xlink:href="qsizepolicy.xml#setHorizontalPolicy">setHorizontalPolicy</db:link>() and <db:link xlink:href="qsizepolicy.xml#setVerticalPolicy">setVerticalPolicy</db:link>() functions. The stretch factors can be set using the <db:link xlink:href="qsizepolicy.xml#setHorizontalStretch">setHorizontalStretch</db:link>() and <db:link xlink:href="qsizepolicy.xml#setVerticalStretch">setVerticalStretch</db:link>() functions. The flag indicating whether the widget's <db:link xlink:href="qwidget.xml#sizeHint-prop">sizeHint</db:link>() is width-dependent (such as a menu bar or a word-wrapping label) can be set using the <db:link xlink:href="qsizepolicy.xml#setHeightForWidth">setHeightForWidth</db:link>() function.</db:para>
<db:para>The current size policies and stretch factors be retrieved using the <db:link xlink:href="qsizepolicy.xml#horizontalPolicy">horizontalPolicy</db:link>(), <db:link xlink:href="qsizepolicy.xml#verticalPolicy">verticalPolicy</db:link>(), <db:link xlink:href="qsizepolicy.xml#horizontalStretch">horizontalStretch</db:link>() and <db:link xlink:href="qsizepolicy.xml#verticalStretch">verticalStretch</db:link>() functions. Alternatively, use the <db:link xlink:href="qsizepolicy.xml#transpose">transpose</db:link>() function to swap the horizontal and vertical policies and stretches. The <db:link xlink:href="qsizepolicy.xml#hasHeightForWidth">hasHeightForWidth</db:link>() function returns the current status of the flag indicating the size hint dependencies.</db:para>
<db:para>Use the <db:link xlink:href="qsizepolicy.xml#expandingDirections">expandingDirections</db:link>() function to determine whether the associated widget can make use of more space than its <db:link xlink:href="qwidget.xml#sizeHint-prop">sizeHint</db:link>() function indicates, as well as find out in which directions it can expand.</db:para>
<db:para>Finally, the <db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link> class provides operators comparing this size policy to a given policy, as well as a <db:link xlink:href="qvariant.xml">QVariant</db:link> operator storing this <db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link> as a <db:link xlink:href="qvariant.xml">QVariant</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml">QSize</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml#sizeHint-prop">QWidget::sizeHint</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#sizePolicy-prop">QWidget::sizePolicy</db:link></db:member>
<db:member><db:link xlink:href="qlayoutitem.xml#sizeHint">QLayoutItem::sizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ControlType-enum">
<db:title>enum QSizePolicy::ControlType</db:title>
<db:bridgehead renderas="sect2">flags QSizePolicy::ControlTypes</db:bridgehead>
<db:enumsynopsis>
<db:enumname>ControlType</db:enumname>
<db:enumitem>
<db:enumidentifier>DefaultType</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ButtonBox</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CheckBox</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ComboBox</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Frame</db:enumidentifier>
<db:enumvalue>0x00000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>GroupBox</db:enumidentifier>
<db:enumvalue>0x00000020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Label</db:enumidentifier>
<db:enumvalue>0x00000040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Line</db:enumidentifier>
<db:enumvalue>0x00000080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LineEdit</db:enumidentifier>
<db:enumvalue>0x00000100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PushButton</db:enumidentifier>
<db:enumvalue>0x00000200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RadioButton</db:enumidentifier>
<db:enumvalue>0x00000400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Slider</db:enumidentifier>
<db:enumvalue>0x00000800</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SpinBox</db:enumidentifier>
<db:enumvalue>0x00001000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TabWidget</db:enumidentifier>
<db:enumvalue>0x00002000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ToolButton</db:enumidentifier>
<db:enumvalue>0x00004000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QSizePolicy::ControlTypes</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum specifies the different types of widgets in terms of layout interaction:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::DefaultType</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>The default type, when none is specified.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::ButtonBox</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qdialogbuttonbox.xml">QDialogButtonBox</db:link> instance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::CheckBox</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link> instance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::ComboBox</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qcombobox.xml">QComboBox</db:link> instance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::Frame</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qframe.xml">QFrame</db:link> instance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::GroupBox</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> instance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::Label</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qlabel.xml">QLabel</db:link> instance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::Line</db:code></db:para>
</db:td>
<db:td><db:code>0x00000080</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qframe.xml">QFrame</db:link> instance with <db:link xlink:href="qframe.xml#Shape-enum">QFrame::HLine</db:link> or <db:link xlink:href="qframe.xml#Shape-enum">QFrame::VLine</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::LineEdit</db:code></db:para>
</db:td>
<db:td><db:code>0x00000100</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> instance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::PushButton</db:code></db:para>
</db:td>
<db:td><db:code>0x00000200</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> instance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::RadioButton</db:code></db:para>
</db:td>
<db:td><db:code>0x00000400</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qradiobutton.xml">QRadioButton</db:link> instance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::Slider</db:code></db:para>
</db:td>
<db:td><db:code>0x00000800</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link> instance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::SpinBox</db:code></db:para>
</db:td>
<db:td><db:code>0x00001000</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link> instance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::TabWidget</db:code></db:para>
</db:td>
<db:td><db:code>0x00002000</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> instance.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::ToolButton</db:code></db:para>
</db:td>
<db:td><db:code>0x00004000</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qtoolbutton.xml">QToolButton</db:link> instance.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ControlTypes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ControlType&gt;. </db:code>It stores an OR combination of <db:code>ControlType</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#setControlType">setControlType</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#controlType">controlType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Policy-enum">
<db:title>enum QSizePolicy::Policy</db:title>
<db:enumsynopsis>
<db:enumname>Policy</db:enumname>
<db:enumitem>
<db:enumidentifier>Fixed</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Minimum</db:enumidentifier>
<db:enumvalue>GrowFlag</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Maximum</db:enumidentifier>
<db:enumvalue>ShrinkFlag</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Preferred</db:enumidentifier>
<db:enumvalue>GrowFlag | ShrinkFlag</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MinimumExpanding</db:enumidentifier>
<db:enumvalue>GrowFlag | ExpandFlag</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Expanding</db:enumidentifier>
<db:enumvalue>GrowFlag | ShrinkFlag | ExpandFlag</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ignored</db:enumidentifier>
<db:enumvalue>ShrinkFlag | GrowFlag | IgnoreFlag</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the various per-dimension sizing types used when constructing a <db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::Fixed</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qwidget.xml#sizeHint-prop">QWidget::sizeHint</db:link>() is the only acceptable alternative, so the widget can never grow or shrink (e.g. the vertical direction of a push button).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::Minimum</db:code></db:para>
</db:td>
<db:td><db:code>GrowFlag</db:code></db:td>
<db:td>
<db:para>The sizeHint() is minimal, and sufficient. The widget can be expanded, but there is no advantage to it being larger (e.g. the horizontal direction of a push button). It cannot be smaller than the size provided by sizeHint().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::Maximum</db:code></db:para>
</db:td>
<db:td><db:code>ShrinkFlag</db:code></db:td>
<db:td>
<db:para>The sizeHint() is a maximum. The widget can be shrunk any amount without detriment if other widgets need the space (e.g. a separator line). It cannot be larger than the size provided by sizeHint().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::Preferred</db:code></db:para>
</db:td>
<db:td><db:code>GrowFlag | ShrinkFlag</db:code></db:td>
<db:td>
<db:para>The sizeHint() is best, but the widget can be shrunk and still be useful. The widget can be expanded, but there is no advantage to it being larger than sizeHint() (the default <db:link xlink:href="qwidget.xml">QWidget</db:link> policy).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::Expanding</db:code></db:para>
</db:td>
<db:td><db:code>GrowFlag | ShrinkFlag | ExpandFlag</db:code></db:td>
<db:td>
<db:para>The sizeHint() is a sensible size, but the widget can be shrunk and still be useful. The widget can make use of extra space, so it should get as much space as possible (e.g. the horizontal direction of a horizontal slider).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::MinimumExpanding</db:code></db:para>
</db:td>
<db:td><db:code>GrowFlag | ExpandFlag</db:code></db:td>
<db:td>
<db:para>The sizeHint() is minimal, and sufficient. The widget can make use of extra space, so it should get as much space as possible (e.g. the horizontal direction of a horizontal slider).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::Ignored</db:code></db:para>
</db:td>
<db:td><db:code>ShrinkFlag | GrowFlag | IgnoreFlag</db:code></db:td>
<db:td>
<db:para>The sizeHint() is ignored. The widget will get as much space as possible.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#PolicyFlag-enum">PolicyFlag</db:link></db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#setHorizontalPolicy">setHorizontalPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#setVerticalPolicy">setVerticalPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="PolicyFlag-enum">
<db:title>enum QSizePolicy::PolicyFlag</db:title>
<db:enumsynopsis>
<db:enumname>PolicyFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>GrowFlag</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExpandFlag</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ShrinkFlag</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IgnoreFlag</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>These flags are combined together to form the various <db:link xlink:href="qsizepolicy.xml#Policy-enum">Policy</db:link> values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::GrowFlag</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The widget can grow beyond its size hint if necessary.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::ExpandFlag</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The widget should get as much space as possible.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::ShrinkFlag</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The widget can shrink below its size hint if necessary.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link></db:emphasis>::IgnoreFlag</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The widget's size hint is ignored. The widget will get as much space as possible.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#Policy-enum">Policy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSizePolicy">
<db:title>[constexpr] QSizePolicy::QSizePolicy()</db:title>
<db:constructorsynopsis>
<db:methodname>QSizePolicy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizePolicy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link> object with <db:link xlink:href="qsizepolicy.xml#Policy-enum">Fixed</db:link> as its horizontal and vertical policies.</db:para>
<db:para>The policies can be altered using the <db:link xlink:href="qsizepolicy.xml#setHorizontalPolicy">setHorizontalPolicy</db:link>() and <db:link xlink:href="qsizepolicy.xml#setVerticalPolicy">setVerticalPolicy</db:link>() functions. Use the <db:link xlink:href="qsizepolicy.xml#setHeightForWidth">setHeightForWidth</db:link>() function if the preferred height of the widget is dependent on the width of the widget (for example, a <db:link xlink:href="qlabel.xml">QLabel</db:link> with line wrapping).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#setHorizontalStretch">setHorizontalStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#setVerticalStretch">setVerticalStretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSizePolicy-1">
<db:title>[constexpr] QSizePolicy::QSizePolicy(QSizePolicy::Policy <db:emphasis>horizontal</db:emphasis>, QSizePolicy::Policy <db:emphasis>vertical</db:emphasis>, QSizePolicy::ControlType <db:emphasis>type</db:emphasis> = DefaultType)</db:title>
<db:constructorsynopsis>
<db:methodname>QSizePolicy</db:methodname>
<db:methodparam>
<db:type>QSizePolicy::Policy</db:type>
<db:parameter>horizontal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSizePolicy::Policy</db:type>
<db:parameter>vertical</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSizePolicy::ControlType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>DefaultType</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizePolicy(QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical, QSizePolicy::ControlType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link> object with the given <db:code role="parameter">horizontal</db:code> and <db:code role="parameter">vertical</db:code> policies, and the specified control <db:code role="parameter">type</db:code>.</db:para>
<db:para>Use <db:link xlink:href="qsizepolicy.xml#setHeightForWidth">setHeightForWidth</db:link>() if the preferred height of the widget is dependent on the width of the widget (for example, a <db:link xlink:href="qlabel.xml">QLabel</db:link> with line wrapping).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#setHorizontalStretch">setHorizontalStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#setVerticalStretch">setVerticalStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#controlType">controlType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="controlType">
<db:title>QSizePolicy::ControlType QSizePolicy::controlType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSizePolicy::ControlType</db:type>
<db:methodname>controlType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizePolicy::ControlType controlType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the control type associated with the widget for which this size policy applies.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#setControlType">setControlType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expandingDirections">
<db:title>[constexpr] Qt::Orientations QSizePolicy::expandingDirections() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::Orientations</db:type>
<db:methodname>expandingDirections</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Orientations expandingDirections() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether a widget can make use of more space than the <db:link xlink:href="qwidget.xml#sizeHint-prop">QWidget::sizeHint</db:link>() function indicates.</db:para>
<db:para>A value of <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> or <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link> means that the widget can grow horizontally or vertically (i.e., the horizontal or vertical policy is <db:link xlink:href="qsizepolicy.xml#Policy-enum">Expanding</db:link> or <db:link xlink:href="qsizepolicy.xml#Policy-enum">MinimumExpanding</db:link>), whereas <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> | <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link> means that it can grow in both dimensions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#horizontalPolicy">horizontalPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#verticalPolicy">verticalPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasHeightForWidth">
<db:title>[constexpr] bool QSizePolicy::hasHeightForWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasHeightForWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasHeightForWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the widget's preferred height depends on its width; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#setHeightForWidth">setHeightForWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasWidthForHeight">
<db:title>[constexpr] bool QSizePolicy::hasWidthForHeight() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasWidthForHeight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasWidthForHeight() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the widget's width depends on its height; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#setWidthForHeight">setWidthForHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalPolicy">
<db:title>[constexpr] QSizePolicy::Policy QSizePolicy::horizontalPolicy() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSizePolicy::Policy</db:type>
<db:methodname>horizontalPolicy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizePolicy::Policy horizontalPolicy() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal component of the size policy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#setHorizontalPolicy">setHorizontalPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#verticalPolicy">verticalPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#horizontalStretch">horizontalStretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalStretch">
<db:title>[constexpr] int QSizePolicy::horizontalStretch() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>horizontalStretch</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int horizontalStretch() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal stretch factor of the size policy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#setHorizontalStretch">setHorizontalStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#verticalStretch">verticalStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#horizontalPolicy">horizontalPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="retainSizeWhenHidden">
<db:title>[constexpr] bool QSizePolicy::retainSizeWhenHidden() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>retainSizeWhenHidden</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool retainSizeWhenHidden() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the layout should retain the widget's size when it is hidden. This is <db:code>false</db:code> by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#setRetainSizeWhenHidden">setRetainSizeWhenHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setControlType">
<db:title>void QSizePolicy::setControlType(QSizePolicy::ControlType <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setControlType</db:methodname>
<db:methodparam>
<db:type>QSizePolicy::ControlType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setControlType(QSizePolicy::ControlType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the control type associated with the widget for which this size policy applies to <db:code role="parameter">type</db:code>.</db:para>
<db:para>The control type specifies the type of the widget for which this size policy applies. It is used by some styles, notably QMacStyle, to insert proper spacing between widgets. For example, the macOS Aqua guidelines specify that push buttons should be separated by 12 pixels, whereas vertically stacked radio buttons only require 6 pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#controlType">controlType</db:link>()</db:member>
<db:member><db:link xlink:href="qstyle.xml#layoutSpacing">QStyle::layoutSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeightForWidth">
<db:title>[constexpr] void QSizePolicy::setHeightForWidth(bool <db:emphasis>dependent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHeightForWidth</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>dependent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHeightForWidth(bool dependent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the flag determining whether the widget's preferred height depends on its width, to <db:code role="parameter">dependent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#hasHeightForWidth">hasHeightForWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#setWidthForHeight">setWidthForHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHorizontalPolicy">
<db:title>[constexpr] void QSizePolicy::setHorizontalPolicy(QSizePolicy::Policy <db:emphasis>policy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHorizontalPolicy</db:methodname>
<db:methodparam>
<db:type>QSizePolicy::Policy</db:type>
<db:parameter>policy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHorizontalPolicy(QSizePolicy::Policy policy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the horizontal component to the given <db:code role="parameter">policy</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#horizontalPolicy">horizontalPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#setVerticalPolicy">setVerticalPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#setHorizontalStretch">setHorizontalStretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHorizontalStretch">
<db:title>[constexpr] void QSizePolicy::setHorizontalStretch(int <db:emphasis>stretchFactor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHorizontalStretch</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretchFactor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHorizontalStretch(int stretchFactor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the horizontal stretch factor of the size policy to the given <db:code role="parameter">stretchFactor</db:code>. <db:code role="parameter">stretchFactor</db:code> must be in the range [0,255].</db:para>
<db:para>When two widgets are adjacent to each other in a horizontal layout, setting the horizontal stretch factor of the widget on the left to 2 and the factor of widget on the right to 1 will ensure that the widget on the left will always be twice the size of the one on the right.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#horizontalStretch">horizontalStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#setVerticalStretch">setVerticalStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#setHorizontalPolicy">setHorizontalPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRetainSizeWhenHidden">
<db:title>[constexpr] void QSizePolicy::setRetainSizeWhenHidden(bool <db:emphasis>retainSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRetainSizeWhenHidden</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>retainSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRetainSizeWhenHidden(bool retainSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether a layout should retain the widget's size when it is hidden. If <db:code role="parameter">retainSize</db:code> is <db:code>true</db:code>, the layout will not be changed by hiding the widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#retainSizeWhenHidden">retainSizeWhenHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerticalPolicy">
<db:title>[constexpr] void QSizePolicy::setVerticalPolicy(QSizePolicy::Policy <db:emphasis>policy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVerticalPolicy</db:methodname>
<db:methodparam>
<db:type>QSizePolicy::Policy</db:type>
<db:parameter>policy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVerticalPolicy(QSizePolicy::Policy policy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the vertical component to the given <db:code role="parameter">policy</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#verticalPolicy">verticalPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#setHorizontalPolicy">setHorizontalPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#setVerticalStretch">setVerticalStretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerticalStretch">
<db:title>[constexpr] void QSizePolicy::setVerticalStretch(int <db:emphasis>stretchFactor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVerticalStretch</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretchFactor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVerticalStretch(int stretchFactor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the vertical stretch factor of the size policy to the given <db:code role="parameter">stretchFactor</db:code>. <db:code role="parameter">stretchFactor</db:code> must be in the range [0,255].</db:para>
<db:para>When two widgets are adjacent to each other in a vertical layout, setting the vertical stretch factor of the widget on the top to 2 and the factor of widget on the bottom to 1 will ensure that the widget on the top will always be twice the size of the one on the bottom.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#verticalStretch">verticalStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#setHorizontalStretch">setHorizontalStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#setVerticalPolicy">setVerticalPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWidthForHeight">
<db:title>[constexpr] void QSizePolicy::setWidthForHeight(bool <db:emphasis>dependent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWidthForHeight</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>dependent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWidthForHeight(bool dependent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the flag determining whether the widget's width depends on its height, to <db:code role="parameter">dependent</db:code>.</db:para>
<db:para>This is only supported for <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link>'s subclasses. It is not possible to have a layout with both height-for-width and width-for-height constraints at the same time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#hasWidthForHeight">hasWidthForHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#setHeightForWidth">setHeightForWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transpose">
<db:title>[constexpr] void QSizePolicy::transpose()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>transpose</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void transpose()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the horizontal and vertical policies and stretches.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#transposed">transposed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transposed">
<db:title>[constexpr] QSizePolicy QSizePolicy::transposed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSizePolicy</db:type>
<db:methodname>transposed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizePolicy transposed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a size policy object with the horizontal and vertical policies and stretches swapped.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#transpose">transpose</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verticalPolicy">
<db:title>[constexpr] QSizePolicy::Policy QSizePolicy::verticalPolicy() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSizePolicy::Policy</db:type>
<db:methodname>verticalPolicy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizePolicy::Policy verticalPolicy() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the vertical component of the size policy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#setVerticalPolicy">setVerticalPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#horizontalPolicy">horizontalPolicy</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#verticalStretch">verticalStretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verticalStretch">
<db:title>[constexpr] int QSizePolicy::verticalStretch() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>verticalStretch</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int verticalStretch() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the vertical stretch factor of the size policy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#setVerticalStretch">setVerticalStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#horizontalStretch">horizontalStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qsizepolicy.xml#verticalPolicy">verticalPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QSizePolicy::operator QVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator QVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator QVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qvariant.xml">QVariant</db:link> storing this <db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>[constexpr] bool QSizePolicy::operator!=(const QSizePolicy &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QSizePolicy &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QSizePolicy &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this policy is different from <db:code role="parameter">other</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[constexpr] bool QSizePolicy::operator==(const QSizePolicy &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QSizePolicy &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QSizePolicy &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this policy is equal to <db:code role="parameter">other</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizepolicy.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qHash">
<db:title>size_t qHash(QSizePolicy <db:emphasis>key</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>size_t</db:type>
<db:methodname>qHash</db:methodname>
<db:methodparam>
<db:type>QSizePolicy</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>size_t</db:type>
<db:parameter>seed</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">size_t qHash(QSizePolicy key, size_t seed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hash value for <db:code role="parameter">key</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QSizePolicy &amp;<db:emphasis>policy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSizePolicy &amp;</db:type>
<db:parameter>policy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QSizePolicy &amp;policy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the size <db:code role="parameter">policy</db:code> to the data stream <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QSizePolicy &amp;<db:emphasis>policy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSizePolicy &amp;</db:type>
<db:parameter>policy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QSizePolicy &amp;policy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads the size <db:code role="parameter">policy</db:code> from the data stream <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
