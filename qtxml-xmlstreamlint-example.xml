<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>XML Stream Lint Example</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A commandline tool reading from an input file and writing to the standard output file.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The XML Stream Lint example provides a simple command line utility that accepts a file name as its single argument and writes it to the standard output file.</db:para>
<db:para>The specified file is parsed using an QXmlStreamReader object and written to the standard output file using an QXmlStreamWriter object. If the file does not contain a well-formed XML document or the use of namespaces in the document is incorrect, a description of the error is printed to the standard error file and will appear in the console.</db:para>
<db:section xml:id="basic-operation">
<db:title>Basic Operation</db:title>
<db:para>The main function of the example opens the file specified by the user for input (<db:code>inputFile</db:code>), and it uses QFile to access the standard output file.</db:para>
<db:para>Reading XML is handled by an instance of the QXmlStreamReader class, which operates on the input file object; writing is handled by an instance of QXmlStreamWriter operating on the output file object:</db:para>
<db:programlisting language="cpp">    QXmlStreamReader reader(&amp;amp;inputFile);
    QXmlStreamWriter writer(&amp;amp;outputFile);
</db:programlisting>
<db:para>The work of parsing and rewriting the XML is done in a while loop, and is driven by input from the reader:</db:para>
<db:programlisting language="cpp">    while (!reader.atEnd())
    {
        reader.readNext();

        if (reader.error())
        {
            errorStream &amp;lt;&amp;lt; XmlStreamLint::tr(
                           &quot;Error: %1 in file %2 at line %3, column %4.\n&quot;).arg(
                               reader.errorString(), inputFilePath,
                               QString::number(reader.lineNumber()),
                               QString::number(reader.columnNumber()));
            return ParseFailure;
</db:programlisting>
<db:para>If more input is available, the next token from the input file is read and parsed. If an error occurred, information is written to the standard error file via a stream, and the example exits by returning a non-zero value from the main function.</db:para>
<db:programlisting language="cpp">        } else
            writer.writeCurrentToken(reader);
    }
</db:programlisting>
<db:para>For valid input, the writer is fed the current token from the reader, and this is written to the output file that was specified when it was constructed.</db:para>
<db:para>When there is no more input, the loop terminates, and the example can exit successfully.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/xml/xmlstreamlint?h=5.14">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
