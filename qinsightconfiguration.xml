<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QInsightConfiguration Class</db:title>
<db:productname>QtInsightTracker</db:productname>
<db:edition>Qt Insight Tracker | Commercial</db:edition>
<db:titleabbrev>Qt Insight Tracker Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Configuration class for the Qt Insight Tracker.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QInsightConfiguration</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS InsightTracker)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::InsightTracker)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += insighttracker</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtinsighttracker-insightconfiguration.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Use <db:link xlink:href="qinsightconfiguration.xml">QInsightConfiguration</db:link> to configure the tracker. You must make all configuration changes before enabling the tracking. The tracker reads default values from a configuration file (<db:code>qtinsight.conf</db:code>), which is searched from following the locations in a decending order:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Application's resources file.</db:para>
</db:listitem>
<db:listitem>
<db:para>Application's directory.</db:para>
</db:listitem>
<db:listitem>
<db:para>Current working directory.</db:para>
</db:listitem>
<db:listitem>
<db:para>System configuration directories as defined by <db:code role="parameter">QStandardPaths::GenericConfigLocation</db:code>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Use an environment variable <db:code>QT_INSIGHT_CONFIG</db:code> to override the used configuration file.</db:para>
<db:para>Example of a JSON configuration file:</db:para>
<db:programlisting language="cpp">{
    &quot;server&quot; : &quot;collect-insight.qt.io&quot;,
    &quot;token&quot; : &quot;00000000-0000-0000-0000-000000000000&quot;,
    &quot;device_model&quot; :  &quot;model 1&quot;,
    &quot;device_variant&quot; : &quot;a&quot;,
    &quot;device_screen_type&quot; : &quot;NON_TOUCH&quot;,
    &quot;platform&quot; : &quot;app&quot;,
    &quot;app_build&quot; : &quot;1.2.3&quot;,
    &quot;storage&quot; : &quot;SQLITE&quot;,
    &quot;storage_path&quot; : &quot;&quot;,
    &quot;sync&quot; : {
        &quot;interval&quot; : {
            &quot;seconds&quot; : 0
            &quot;minutes&quot; : 0
            &quot;hours&quot; : 1
            &quot;days&quot; : 0
            &quot;months&quot; : 0
        },
        &quot;max_batch_size&quot; : 100
    }
}
</db:programlisting>
<db:para>A <db:code>token</db:code> is used to match the data your application sends to your Qt Insight Organization and you can find your token from the <db:link xlink:href="https://insight.qt.io">Qt Insight Console</db:link>.</db:para>
<db:para>Some of the configuration items are directly linked to the <db:link xlink:href="https://docs.snowplow.io/docs/collecting-data/collecting-from-own-applications/snowplow-tracker-protocol">Snowblow Tracker Protocol</db:link>, which defines the allowed values. These include <db:link xlink:href="qinsightconfiguration.xml#setPlatform">QInsightConfiguration::setPlatform</db:link>() and <db:link xlink:href="qinsightconfiguration.xml#setDeviceScreenType">QInsightConfiguration::setDeviceScreenType</db:link>().</db:para>
<db:para><db:link xlink:href="qinsightconfiguration.xml#setStorageType">QInsightConfiguration::setStorageType</db:link>() can be used to configure the storage type, where <db:code>SQLITE</db:code> is the default value and use SQLite database to store the events before they are sent to the back-end server. If an unknown storage type is specified or it is explicitly set to an empty string, caching will be disabled. In that case the tracked data will be lost if the back-end server isn't available.</db:para>
<db:para><db:link xlink:href="qinsightconfiguration.xml#setStoragePath">QInsightConfiguration::setStoragePath</db:link>() can be used to configure the location of the storage. By default, the SQLite database is created in the application's directory.</db:para>
<db:para><db:link xlink:href="qinsightconfiguration.xml#setSyncInterval">QInsightConfiguration::setSyncInterval</db:link>() can be used to configure how often the tracked events are sent to the back-end server. The API takes the value in seconds, while the json configuration file can be configured also with more natural minutes, hours, days, and months. If sync interval is not set, events will never be sent to the backend and cached only in the local storage.</db:para>
<db:para><db:link xlink:href="qinsightconfiguration.xml#setBatchSize">QInsightConfiguration::setBatchSize</db:link> is used to minimize the overhead when sending, reading and writing to the storage. When synchronizing the cached data to back-end server, at most <db:link xlink:href="qinsightconfiguration.xml#batchSize">QInsightConfiguration::batchSize</db:link>() items will be fetched at once from the storage and sent to back-end server. This is more optimal, than fetching the data one by one. The sent data will be removed from the storage also in batches. The process repeats, until all data is sent. If one batch fails, the synchronization will stop, as the next batches will likely also fail.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QInsightConfiguration-2">
<db:title>QInsightConfiguration::QInsightConfiguration(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QInsightConfiguration</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QInsightConfiguration(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a new configuration object with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="appBuild">
<db:title>QString QInsightConfiguration::appBuild() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>appBuild</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">appBuild</db:synopsisinfo>
<db:synopsisinfo role="signature">QString appBuild() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns current application's build version.</db:para>
<db:note>
<db:para>Getter function for property appBuild. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#setAppBuild">setAppBuild</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="batchSize">
<db:title>int QInsightConfiguration::batchSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>batchSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">batchSize</db:synopsisinfo>
<db:synopsisinfo role="signature">int batchSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns current sync batch size.</db:para>
<db:note>
<db:para>Getter function for property batchSize. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#setBatchSize">setBatchSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="categories">
<db:title>QStringList QInsightConfiguration::categories()</db:title>
<db:methodsynopsis>
<db:type>QStringList</db:type>
<db:methodname>categories</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">categories</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList categories()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns currently enabled categories.</db:para>
<db:note>
<db:para>Getter function for property categories. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#setCategories">setCategories</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deviceModel">
<db:title>QString QInsightConfiguration::deviceModel() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>deviceModel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">deviceModel</db:synopsisinfo>
<db:synopsisinfo role="signature">QString deviceModel() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns current device model.</db:para>
<db:note>
<db:para>Getter function for property deviceModel. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#setDeviceModel">setDeviceModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deviceScreenType">
<db:title>QString QInsightConfiguration::deviceScreenType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>deviceScreenType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">deviceScreenType</db:synopsisinfo>
<db:synopsisinfo role="signature">QString deviceScreenType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns current screen type.</db:para>
<db:note>
<db:para>Getter function for property deviceScreenType. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#setDeviceScreenType">setDeviceScreenType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deviceVariant">
<db:title>QString QInsightConfiguration::deviceVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>deviceVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">deviceVariant</db:synopsisinfo>
<db:synopsisinfo role="signature">QString deviceVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns current device variant.</db:para>
<db:note>
<db:para>Getter function for property deviceVariant. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#setDeviceVariant">setDeviceVariant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="events">
<db:title>QStringList QInsightConfiguration::events()</db:title>
<db:methodsynopsis>
<db:type>QStringList</db:type>
<db:methodname>events</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">event</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList events()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns currently enabled events.</db:para>
<db:note>
<db:para>Getter function for property event. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#setEvents">setEvents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QInsightConfiguration::isValid()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if configuratio is valid.</db:para>
</db:section>
<db:section xml:id="load">
<db:title>bool QInsightConfiguration::load()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>load</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool load()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Load existing configurations from a file. Returns true is configuration was successfully loaded.</db:para>
</db:section>
<db:section xml:id="platform">
<db:title>QString QInsightConfiguration::platform() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>platform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">platform</db:synopsisinfo>
<db:synopsisinfo role="signature">QString platform() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns current platform.</db:para>
<db:note>
<db:para>Getter function for property platform. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#setPlatform">setPlatform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="server">
<db:title>QString QInsightConfiguration::server() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>server</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">server</db:synopsisinfo>
<db:synopsisinfo role="signature">QString server() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns current server address.</db:para>
<db:note>
<db:para>Getter function for property server. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#setServer">setServer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAppBuild">
<db:title>void QInsightConfiguration::setAppBuild(const QString &amp;<db:emphasis>appBuild</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAppBuild</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>appBuild</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">appBuild</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAppBuild(const QString &amp;appBuild)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set application's build version <db:code role="parameter">appBuild</db:code>.</db:para>
<db:note>
<db:para>Setter function for property appBuild. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#appBuild">appBuild</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBatchSize">
<db:title>void QInsightConfiguration::setBatchSize(int <db:emphasis>batchSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBatchSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>batchSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">batchSize</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBatchSize(int batchSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set sync batch size to <db:code role="parameter">batchSize</db:code>. Defines how many events are sent to network in one go.</db:para>
<db:note>
<db:para>Setter function for property batchSize. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#batchSize">batchSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCategories">
<db:title>void QInsightConfiguration::setCategories(const QStringList &amp;<db:emphasis>categories</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCategories</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>categories</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">categories</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCategories(const QStringList &amp;categories)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set list of enabled categories to <db:code role="parameter">categories</db:code>.</db:para>
<db:note>
<db:para>Setter function for property categories. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#categories">categories</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDeviceModel">
<db:title>void QInsightConfiguration::setDeviceModel(const QString &amp;<db:emphasis>deviceModel</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDeviceModel</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>deviceModel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">deviceModel</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDeviceModel(const QString &amp;deviceModel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set device model to <db:code role="parameter">deviceModel</db:code>.</db:para>
<db:note>
<db:para>Setter function for property deviceModel. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#deviceModel">deviceModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDeviceScreenType">
<db:title>void QInsightConfiguration::setDeviceScreenType(const QString &amp;<db:emphasis>deviceScreenType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDeviceScreenType</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>deviceScreenType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">deviceScreenType</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDeviceScreenType(const QString &amp;deviceScreenType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set device screen type to <db:code role="parameter">deviceScreenType</db:code>.</db:para>
<db:note>
<db:para>Setter function for property deviceScreenType. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#deviceScreenType">deviceScreenType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDeviceVariant">
<db:title>void QInsightConfiguration::setDeviceVariant(const QString &amp;<db:emphasis>deviceVariant</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDeviceVariant</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>deviceVariant</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">deviceVariant</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDeviceVariant(const QString &amp;deviceVariant)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set device variant to <db:code role="parameter">deviceVariant</db:code>.</db:para>
<db:note>
<db:para>Setter function for property deviceVariant. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#deviceVariant">deviceVariant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEvents">
<db:title>void QInsightConfiguration::setEvents(const QStringList &amp;<db:emphasis>events</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEvents</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>events</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">event</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEvents(const QStringList &amp;events)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set list of enabled events to <db:code role="parameter">events</db:code>.</db:para>
<db:note>
<db:para>Setter function for property event. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#events">events</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPlatform">
<db:title>void QInsightConfiguration::setPlatform(const QString &amp;<db:emphasis>platform</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPlatform</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>platform</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">platform</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPlatform(const QString &amp;platform)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set platform to <db:code role="parameter">platform</db:code></db:para>
<db:note>
<db:para>Setter function for property platform. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#platform">platform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setServer">
<db:title>void QInsightConfiguration::setServer(const QString &amp;<db:emphasis>server</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setServer</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>server</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">server</db:synopsisinfo>
<db:synopsisinfo role="signature">void setServer(const QString &amp;server)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set server address to <db:code role="parameter">server</db:code>.</db:para>
<db:note>
<db:para>Setter function for property server. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#server">server</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStoragePath">
<db:title>void QInsightConfiguration::setStoragePath(const QString &amp;<db:emphasis>storagePath</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStoragePath</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>storagePath</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">storagePath</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStoragePath(const QString &amp;storagePath)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set storage path to <db:code role="parameter">storagePath</db:code>.</db:para>
<db:note>
<db:para>Setter function for property storagePath. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#storagePath">storagePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStorageSize">
<db:title>void QInsightConfiguration::setStorageSize(int <db:emphasis>storageSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStorageSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>storageSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">storageSize</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStorageSize(int storageSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set storage size to <db:code role="parameter">storageSize</db:code>.</db:para>
<db:note>
<db:para>Setter function for property storageSize. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#storageSize">storageSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStorageType">
<db:title>void QInsightConfiguration::setStorageType(const QString &amp;<db:emphasis>storageType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStorageType</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>storageType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">storageType</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStorageType(const QString &amp;storageType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set storage type to <db:code role="parameter">storageType</db:code>.</db:para>
<db:note>
<db:para>Setter function for property storageType. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#storageType">storageType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSyncInterval">
<db:title>void QInsightConfiguration::setSyncInterval(int <db:emphasis>syncInterval</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSyncInterval</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>syncInterval</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">syncInterval</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSyncInterval(int syncInterval)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set sync interval to <db:code role="parameter">syncInterval</db:code> seconds.</db:para>
<db:note>
<db:para>Setter function for property syncInterval. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#syncInterval">syncInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setToken">
<db:title>void QInsightConfiguration::setToken(const QString &amp;<db:emphasis>token</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setToken</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>token</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">token</db:synopsisinfo>
<db:synopsisinfo role="signature">void setToken(const QString &amp;token)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set server token to <db:code role="parameter">token</db:code>.</db:para>
<db:note>
<db:para>Setter function for property token. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#token">token</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="storagePath">
<db:title>QString QInsightConfiguration::storagePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>storagePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">storagePath</db:synopsisinfo>
<db:synopsisinfo role="signature">QString storagePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns current storage path.</db:para>
<db:note>
<db:para>Getter function for property storagePath. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#setStoragePath">setStoragePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="storageSize">
<db:title>int QInsightConfiguration::storageSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>storageSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">storageSize</db:synopsisinfo>
<db:synopsisinfo role="signature">int storageSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns current storage size.</db:para>
<db:note>
<db:para>Getter function for property storageSize. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#setStorageSize">setStorageSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="storageType">
<db:title>QString QInsightConfiguration::storageType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>storageType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">storageType</db:synopsisinfo>
<db:synopsisinfo role="signature">QString storageType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns current storage type.</db:para>
<db:note>
<db:para>Getter function for property storageType. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#setStorageType">setStorageType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="syncInterval">
<db:title>int QInsightConfiguration::syncInterval() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>syncInterval</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">syncInterval</db:synopsisinfo>
<db:synopsisinfo role="signature">int syncInterval() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns current sync interval in seconds.</db:para>
<db:note>
<db:para>Getter function for property syncInterval. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#setSyncInterval">setSyncInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="token">
<db:title>QString QInsightConfiguration::token() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>token</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">token</db:synopsisinfo>
<db:synopsisinfo role="signature">QString token() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns current server token.</db:para>
<db:note>
<db:para>Getter function for property token. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinsightconfiguration.xml#setToken">setToken</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
