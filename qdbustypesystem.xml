<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The Qt D-Bus Type System</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>QtDBus Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qdbusdeclaringsignals.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Declaring Signals in D-Bus Adaptors"/></db:extendedlink>
<db:abstract>
<db:para>QtDBus Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>Using Qt D-Bus Adaptors</db:para>
<db:para>D-Bus has an extensible type system based on a few primitives and composition of the primitives in arrays and structures. Qt D-Bus implements the interface to that type system through the <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> class, allowing user programs to send and receive practically every C++ type over the bus.</db:para>
<db:section xml:id="primitive-types">
<db:title>Primitive Types</db:title>
<db:para>The primitive types are supported natively by <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> and need no special customization to be sent or received. They are listed below, along with the C++ class they relate to:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Qt type</db:para>
</db:th>
<db:th>
<db:para>D-Bus equivalent type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>uchar</db:para>
</db:td>
<db:td>
<db:para>BYTE</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>bool</db:para>
</db:td>
<db:td>
<db:para>BOOLEAN</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>short</db:para>
</db:td>
<db:td>
<db:para>INT16</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ushort</db:para>
</db:td>
<db:td>
<db:para>UINT16</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>int</db:para>
</db:td>
<db:td>
<db:para>INT32</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uint</db:para>
</db:td>
<db:td>
<db:para>UINT32</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qlonglong</db:para>
</db:td>
<db:td>
<db:para>INT64</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qulonglong</db:para>
</db:td>
<db:td>
<db:para>UINT64</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>double</db:para>
</db:td>
<db:td>
<db:para>DOUBLE</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
<db:td>
<db:para>STRING</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdbusvariant.xml">QDBusVariant</db:link></db:para>
</db:td>
<db:td>
<db:para>VARIANT</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdbusobjectpath.xml">QDBusObjectPath</db:link></db:para>
</db:td>
<db:td>
<db:para>OBJECT_PATH</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdbussignature.xml">QDBusSignature</db:link></db:para>
</db:td>
<db:td>
<db:para>SIGNATURE</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Aside from the primitive types, <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> also supports two non-primitive types natively, due to their widespread use in Qt applications: <db:link xlink:href="qstringlist.xml">QStringList</db:link> and <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
</db:section>
<db:section xml:id="compound-types">
<db:title>Compound Types</db:title>
<db:para>D-Bus specifies three types of aggregations of primitive types that allow one to create compound types. They are ARRAY, STRUCT and maps/dictionaries.</db:para>
<db:para>Arrays are sets of zero or more elements of the same type, while structures are a set of a fixed number of elements, each of any type. Maps or dictionaries are implemented as arrays of a pair of elements, so there can be zero or more elements in one map.</db:para>
</db:section>
<db:section xml:id="extending-the-type-system">
<db:title>Extending the Type System</db:title>
<db:para>In order to use one's own type with Qt D-Bus, the type has to be declared as a Qt meta-type with the <db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>() macro and registered with the <db:link xlink:href="qdbusargument.xml#qDBusRegisterMetaType">qDBusRegisterMetaType</db:link>() function. The streaming operators operator&gt;&gt; and operator&lt;&lt; will be automatically found by the registration system.</db:para>
<db:para>Qt D-Bus provides template specializations for arrays and maps for use with Qt's <db:link xlink:href="topics-core.xml#container-classes">container classes</db:link>, such as <db:link xlink:href="qmap.xml">QMap</db:link> and <db:link xlink:href="qlist.xml">QList</db:link>, so it is not necessary to write the streaming operator functions for those. For other types, and specially for types implementing structures, the operators have to be explicitly implemented.</db:para>
<db:para>See the documentation for <db:link xlink:href="qdbusargument.xml">QDBusArgument</db:link> for examples for structures, arrays and maps.</db:para>
</db:section>
<db:section xml:id="the-type-system-in-use">
<db:title>The Type System in Use</db:title>
<db:para>All of the Qt D-Bus types (primitives and user-defined alike) can be used to send and receive messages of all types over the bus.</db:para>
<db:warning>
<db:para>You may not use any type that is not on the list above, including <db:code role="parameter">typedefs</db:code> to the types listed. This also includes <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qvariant.xml">QVariant</db:link>&gt; and <db:link xlink:href="qmap.xml">QMap</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>,<db:link xlink:href="qvariant.xml">QVariant</db:link>&gt;.</db:para>
</db:warning>
</db:section>
</db:article>
