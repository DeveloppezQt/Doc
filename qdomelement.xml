<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDomElement Class</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdomelement.xml">QDomElement</db:link> class represents one element in the DOM tree.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDomElement</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Xml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Xml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdomnode.xml" xlink:role="class">QDomNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDomElement is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Elements have a <db:link xlink:href="qdomelement.xml#tagName">tagName</db:link>() and zero or more attributes associated with them. The tag name can be changed with <db:link xlink:href="qdomelement.xml#setTagName">setTagName</db:link>().</db:para>
<db:para>Element attributes are represented by <db:link xlink:href="qdomattr.xml">QDomAttr</db:link> objects that can be queried using the <db:link xlink:href="qdomelement.xml#attribute">attribute</db:link>() and <db:link xlink:href="qdomelement.xml#attributeNode">attributeNode</db:link>() functions. You can set attributes with the <db:link xlink:href="qdomelement.xml#setAttribute">setAttribute</db:link>() and <db:link xlink:href="qdomelement.xml#setAttributeNode">setAttributeNode</db:link>() functions. Attributes can be removed with <db:link xlink:href="qdomelement.xml#removeAttribute">removeAttribute</db:link>(). There are namespace-aware equivalents to these functions, i.e. <db:link xlink:href="qdomelement.xml#setAttributeNS">setAttributeNS</db:link>(), <db:link xlink:href="qdomelement.xml#setAttributeNodeNS">setAttributeNodeNS</db:link>() and <db:link xlink:href="qdomelement.xml#removeAttributeNS">removeAttributeNS</db:link>().</db:para>
<db:para>If you want to access the text of a node use <db:link xlink:href="qdomelement.xml#text">text</db:link>(), e.g.</db:para>
<db:programlisting language="cpp">QDomElement e = //...
//...
QString s = e.text()
</db:programlisting>
<db:para>The <db:link xlink:href="qdomelement.xml#text">text</db:link>() function operates recursively to find the text (since not all elements contain text). If you want to find all the text in all of a node's children, iterate over the children looking for <db:link xlink:href="qdomtext.xml">QDomText</db:link> nodes, e.g.</db:para>
<db:programlisting language="cpp">QString text;
QDomElement element = doc.documentElement();
for(QDomNode n = element.firstChild(); !n.isNull(); n = n.nextSibling())
{
    QDomText t = n.toText();
    if (!t.isNull())
        text += t.data();
}
</db:programlisting>
<db:para>Note that we attempt to convert each node to a text node and use <db:link xlink:href="qdomelement.xml#text">text</db:link>() rather than using <db:link xlink:href="qdomnode.xml#firstChild">firstChild</db:link>().<db:link xlink:href="qdomnode.xml#toText">toText</db:link>().data() or n.<db:link xlink:href="qdomnode.xml#toText">toText</db:link>().data() directly on the node, because the node may not be a text element.</db:para>
<db:para>You can get a list of all the descendents of an element which have a specified tag name with <db:link xlink:href="qdomelement.xml#elementsByTagName">elementsByTagName</db:link>() or <db:link xlink:href="qdomelement.xml#elementsByTagNameNS">elementsByTagNameNS</db:link>().</db:para>
<db:para>To browse the elements of a dom document use <db:link xlink:href="qdomnode.xml#firstChildElement">firstChildElement</db:link>(), <db:link xlink:href="qdomnode.xml#lastChildElement">lastChildElement</db:link>(), <db:link xlink:href="qdomnode.xml#nextSiblingElement">nextSiblingElement</db:link>() and <db:link xlink:href="qdomnode.xml#previousSiblingElement">previousSiblingElement</db:link>(). For example, to iterate over all child elements called &quot;entry&quot; in a root element called &quot;database&quot;, you can use:</db:para>
<db:programlisting language="cpp">QDomDocument doc = // ...
QDomElement root = doc.firstChildElement(&quot;database&quot;);
QDomElement elt = root.firstChildElement(&quot;entry&quot;);
for (; !elt.isNull(); elt = elt.nextSiblingElement(&quot;entry&quot;)) {
    // ...
}
</db:programlisting>
<db:para>For further information about the Document Object Model see <db:link xlink:href="http://www.w3.org/TR/REC-DOM-Level-1/">Level 1</db:link> and <db:link xlink:href="http://www.w3.org/TR/DOM-Level-2-Core/">Level 2 Core</db:link>. For a more general introduction of the DOM implementation see the <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> documentation.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDomElement">
<db:title>QDomElement::QDomElement()</db:title>
<db:constructorsynopsis>
<db:methodname>QDomElement</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomElement()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty element. Use the <db:link xlink:href="qdomdocument.xml#createElement">QDomDocument::createElement</db:link>() function to construct elements with content.</db:para>
</db:section>
<db:section xml:id="QDomElement-1">
<db:title>QDomElement::QDomElement(const QDomElement &amp;<db:emphasis>x</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDomElement</db:methodname>
<db:methodparam>
<db:type>const QDomElement &amp;</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomElement(const QDomElement &amp;x)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">x</db:code>.</db:para>
<db:para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use <db:link xlink:href="qdomnode.xml#cloneNode">cloneNode</db:link>().</db:para>
</db:section>
<db:section xml:id="attribute">
<db:title>QString QDomElement::attribute(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>defValue</db:emphasis> = QString()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>attribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>defValue</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString attribute(const QString &amp;name, const QString &amp;defValue) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the attribute called <db:code role="parameter">name</db:code>. If the attribute does not exist <db:code role="parameter">defValue</db:code> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#setAttribute">setAttribute</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#attributeNode">attributeNode</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNode">setAttributeNode</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#attributeNS">attributeNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attributeNS">
<db:title>QString QDomElement::attributeNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>localName</db:emphasis>, const QString &amp;<db:emphasis>defValue</db:emphasis> = QString()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>attributeNS</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>nsURI</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>localName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>defValue</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString attributeNS(const QString &amp;nsURI, const QString &amp;localName, const QString &amp;defValue) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the attribute with the local name <db:code role="parameter">localName</db:code> and the namespace URI <db:code role="parameter">nsURI</db:code>. If the attribute does not exist <db:code role="parameter">defValue</db:code> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNS">setAttributeNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#attributeNodeNS">attributeNodeNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNodeNS">setAttributeNodeNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#attribute">attribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attributeNode">
<db:title>QDomAttr QDomElement::attributeNode(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDomAttr</db:type>
<db:methodname>attributeNode</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomAttr attributeNode(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qdomattr.xml">QDomAttr</db:link> object that corresponds to the attribute called <db:code role="parameter">name</db:code>. If no such attribute exists a <db:link xlink:href="qdomnode.xml#isNull">null attribute</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNode">setAttributeNode</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#attribute">attribute</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttribute">setAttribute</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#attributeNodeNS">attributeNodeNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attributeNodeNS">
<db:title>QDomAttr QDomElement::attributeNodeNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>localName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDomAttr</db:type>
<db:methodname>attributeNodeNS</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>nsURI</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>localName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomAttr attributeNodeNS(const QString &amp;nsURI, const QString &amp;localName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qdomattr.xml">QDomAttr</db:link> object that corresponds to the attribute with the local name <db:code role="parameter">localName</db:code> and the namespace URI <db:code role="parameter">nsURI</db:code>. If no such attribute exists a <db:link xlink:href="qdomnode.xml#isNull">null attribute</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNodeNS">setAttributeNodeNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNode">setAttributeNode</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#attribute">attribute</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttribute">setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attributes">
<db:title>QDomNamedNodeMap QDomElement::attributes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDomNamedNodeMap</db:type>
<db:methodname>attributes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNamedNodeMap attributes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdomnamednodemap.xml">QDomNamedNodeMap</db:link> containing all this element's attributes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#attribute">attribute</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttribute">setAttribute</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#attributeNode">attributeNode</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNode">setAttributeNode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="elementsByTagName">
<db:title>QDomNodeList QDomElement::elementsByTagName(const QString &amp;<db:emphasis>tagname</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDomNodeList</db:type>
<db:methodname>elementsByTagName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>tagname</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNodeList elementsByTagName(const QString &amp;tagname) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdomnodelist.xml">QDomNodeList</db:link> containing all descendants of this element named <db:code role="parameter">tagname</db:code> encountered during a preorder traversal of the element subtree with this element as its root. The order of the elements in the returned list is the order they are encountered during the preorder traversal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#elementsByTagNameNS">elementsByTagNameNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomdocument.xml#elementsByTagName">QDomDocument::elementsByTagName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="elementsByTagNameNS">
<db:title>QDomNodeList QDomElement::elementsByTagNameNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>localName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDomNodeList</db:type>
<db:methodname>elementsByTagNameNS</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>nsURI</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>localName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNodeList elementsByTagNameNS(const QString &amp;nsURI, const QString &amp;localName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdomnodelist.xml">QDomNodeList</db:link> containing all descendants of this element with local name <db:code role="parameter">localName</db:code> and namespace URI <db:code role="parameter">nsURI</db:code> encountered during a preorder traversal of the element subtree with this element as its root. The order of the elements in the returned list is the order they are encountered during the preorder traversal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#elementsByTagName">elementsByTagName</db:link>()</db:member>
<db:member><db:link xlink:href="qdomdocument.xml#elementsByTagNameNS">QDomDocument::elementsByTagNameNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasAttribute">
<db:title>bool QDomElement::hasAttribute(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasAttribute(const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this element has an attribute called <db:code role="parameter">name</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This function does not take the presence of namespaces into account. As a result, the specified name will be tested against fully-qualified attribute names that include any namespace prefixes that may be present.</db:para>
<db:para>Use <db:link xlink:href="qdomelement.xml#hasAttributeNS">hasAttributeNS</db:link>() to explicitly test for attributes with specific namespaces and names.</db:para>
</db:section>
<db:section xml:id="hasAttributeNS">
<db:title>bool QDomElement::hasAttributeNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>localName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasAttributeNS</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>nsURI</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>localName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasAttributeNS(const QString &amp;nsURI, const QString &amp;localName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this element has an attribute with the local name <db:code role="parameter">localName</db:code> and the namespace URI <db:code role="parameter">nsURI</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="nodeType">
<db:title>QDomNode::NodeType QDomElement::nodeType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDomNode::NodeType</db:type>
<db:methodname>nodeType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomNode::NodeType nodeType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>ElementNode</db:code>.</db:para>
</db:section>
<db:section xml:id="removeAttribute">
<db:title>void QDomElement::removeAttribute(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeAttribute(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the attribute called name <db:code role="parameter">name</db:code> from this element.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#setAttribute">setAttribute</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#attribute">attribute</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#removeAttributeNS">removeAttributeNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAttributeNS">
<db:title>void QDomElement::removeAttributeNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>localName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeAttributeNS</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>nsURI</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>localName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeAttributeNS(const QString &amp;nsURI, const QString &amp;localName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the attribute with the local name <db:code role="parameter">localName</db:code> and the namespace URI <db:code role="parameter">nsURI</db:code> from this element.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNS">setAttributeNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#attributeNS">attributeNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#removeAttribute">removeAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAttributeNode">
<db:title>QDomAttr QDomElement::removeAttributeNode(const QDomAttr &amp;<db:emphasis>oldAttr</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDomAttr</db:type>
<db:methodname>removeAttributeNode</db:methodname>
<db:methodparam>
<db:type>const QDomAttr &amp;</db:type>
<db:parameter>oldAttr</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomAttr removeAttributeNode(const QDomAttr &amp;oldAttr)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the attribute <db:code role="parameter">oldAttr</db:code> from the element and returns it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#attributeNode">attributeNode</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNode">setAttributeNode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttribute">
<db:title>void QDomElement::setAttribute(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttribute(const QString &amp;name, const QString &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds an attribute called <db:code role="parameter">name</db:code> with value <db:code role="parameter">value</db:code>. If an attribute with the same name exists, its value is replaced by <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#attribute">attribute</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNode">setAttributeNode</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNS">setAttributeNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttribute-1">
<db:title>void QDomElement::setAttribute(const QString &amp;<db:emphasis>name</db:emphasis>, qlonglong <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qlonglong</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttribute(const QString &amp;name, qlonglong value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The formatting always uses <db:link xlink:href="qlocale.xml#Language-enum">QLocale::C</db:link>.</db:para>
</db:section>
<db:section xml:id="setAttribute-2">
<db:title>void QDomElement::setAttribute(const QString &amp;<db:emphasis>name</db:emphasis>, qulonglong <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qulonglong</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttribute(const QString &amp;name, qulonglong value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The formatting always uses <db:link xlink:href="qlocale.xml#Language-enum">QLocale::C</db:link>.</db:para>
</db:section>
<db:section xml:id="setAttribute-3">
<db:title>void QDomElement::setAttribute(const QString &amp;<db:emphasis>name</db:emphasis>, int <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttribute(const QString &amp;name, int value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The formatting always uses <db:link xlink:href="qlocale.xml#Language-enum">QLocale::C</db:link>.</db:para>
</db:section>
<db:section xml:id="setAttribute-4">
<db:title>void QDomElement::setAttribute(const QString &amp;<db:emphasis>name</db:emphasis>, uint <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttribute(const QString &amp;name, uint value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The formatting always uses <db:link xlink:href="qlocale.xml#Language-enum">QLocale::C</db:link>.</db:para>
</db:section>
<db:section xml:id="setAttribute-5">
<db:title>void QDomElement::setAttribute(const QString &amp;<db:emphasis>name</db:emphasis>, float <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttribute(const QString &amp;name, float value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The formatting always uses <db:link xlink:href="qlocale.xml#Language-enum">QLocale::C</db:link>.</db:para>
</db:section>
<db:section xml:id="setAttribute-6">
<db:title>void QDomElement::setAttribute(const QString &amp;<db:emphasis>name</db:emphasis>, double <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttribute(const QString &amp;name, double value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The formatting always uses <db:link xlink:href="qlocale.xml#Language-enum">QLocale::C</db:link>.</db:para>
</db:section>
<db:section xml:id="setAttributeNS">
<db:title>void QDomElement::setAttributeNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>qName</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeNS</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>nsURI</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>qName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeNS(const QString &amp;nsURI, const QString &amp;qName, const QString &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds an attribute with the qualified name <db:code role="parameter">qName</db:code> and the namespace URI <db:code role="parameter">nsURI</db:code> with the value <db:code role="parameter">value</db:code>. If an attribute with the same local name and namespace URI exists, its prefix is replaced by the prefix of <db:code role="parameter">qName</db:code> and its value is replaced by <db:code role="parameter">value</db:code>.</db:para>
<db:para>Although <db:code role="parameter">qName</db:code> is the qualified name, the local name is used to decide if an existing attribute's value should be replaced.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#attributeNS">attributeNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNodeNS">setAttributeNodeNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttribute">setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeNS-1">
<db:title>void QDomElement::setAttributeNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>qName</db:emphasis>, int <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeNS</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>nsURI</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>qName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeNS(const QString &amp;nsURI, const QString &amp;qName, int value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setAttributeNS-2">
<db:title>void QDomElement::setAttributeNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>qName</db:emphasis>, uint <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeNS</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>nsURI</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>qName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeNS(const QString &amp;nsURI, const QString &amp;qName, uint value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setAttributeNS-3">
<db:title>void QDomElement::setAttributeNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>qName</db:emphasis>, qlonglong <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeNS</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>nsURI</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>qName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qlonglong</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeNS(const QString &amp;nsURI, const QString &amp;qName, qlonglong value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setAttributeNS-4">
<db:title>void QDomElement::setAttributeNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>qName</db:emphasis>, qulonglong <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeNS</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>nsURI</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>qName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qulonglong</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeNS(const QString &amp;nsURI, const QString &amp;qName, qulonglong value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setAttributeNS-5">
<db:title>void QDomElement::setAttributeNS(const QString &amp;<db:emphasis>nsURI</db:emphasis>, const QString &amp;<db:emphasis>qName</db:emphasis>, double <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttributeNS</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>nsURI</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>qName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttributeNS(const QString &amp;nsURI, const QString &amp;qName, double value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="setAttributeNode">
<db:title>QDomAttr QDomElement::setAttributeNode(const QDomAttr &amp;<db:emphasis>newAttr</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDomAttr</db:type>
<db:methodname>setAttributeNode</db:methodname>
<db:methodparam>
<db:type>const QDomAttr &amp;</db:type>
<db:parameter>newAttr</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomAttr setAttributeNode(const QDomAttr &amp;newAttr)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the attribute <db:code role="parameter">newAttr</db:code> to this element.</db:para>
<db:para>If the element has another attribute that has the same name as <db:code role="parameter">newAttr</db:code>, this function replaces that attribute and returns it; otherwise the function returns a <db:link xlink:href="qdomnode.xml#isNull">null attribute</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#attributeNode">attributeNode</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttribute">setAttribute</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNodeNS">setAttributeNodeNS</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttributeNodeNS">
<db:title>QDomAttr QDomElement::setAttributeNodeNS(const QDomAttr &amp;<db:emphasis>newAttr</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDomAttr</db:type>
<db:methodname>setAttributeNodeNS</db:methodname>
<db:methodparam>
<db:type>const QDomAttr &amp;</db:type>
<db:parameter>newAttr</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomAttr setAttributeNodeNS(const QDomAttr &amp;newAttr)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the attribute <db:code role="parameter">newAttr</db:code> to this element.</db:para>
<db:para>If the element has another attribute that has the same local name and namespace URI as <db:code role="parameter">newAttr</db:code>, this function replaces that attribute and returns it; otherwise the function returns a <db:link xlink:href="qdomnode.xml#isNull">null attribute</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#attributeNodeNS">attributeNodeNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNS">setAttributeNS</db:link>()</db:member>
<db:member><db:link xlink:href="qdomelement.xml#setAttributeNode">setAttributeNode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTagName">
<db:title>void QDomElement::setTagName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTagName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTagName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this element's tag name to <db:code role="parameter">name</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#tagName">tagName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tagName">
<db:title>QString QDomElement::tagName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>tagName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString tagName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the tag name of this element. For an XML element like this:</db:para>
<db:programlisting language="cpp">&amp;lt;img src=&quot;myimg.png&quot;&amp;gt;
</db:programlisting>
<db:para>the tagname would return &quot;img&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdomelement.xml#setTagName">setTagName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text">
<db:title>QString QDomElement::text() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>text</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString text() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the element's text or an empty string.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">&amp;lt;h1&amp;gt;Hello &amp;lt;b&amp;gt;Qt&amp;lt;/b&amp;gt; &amp;lt;![CDATA[&amp;lt;xml is cool&amp;gt;]]&amp;gt;&amp;lt;/h1&amp;gt;
</db:programlisting>
<db:para>The function text() of the <db:link xlink:href="qdomelement.xml">QDomElement</db:link> for the <db:code>&lt;h1&gt;</db:code> tag, will return the following text:</db:para>
<db:programlisting language="cpp">Hello Qt &amp;lt;xml is cool&amp;gt;
</db:programlisting>
<db:para>Comments are ignored by this function. It only evaluates <db:link xlink:href="qdomtext.xml">QDomText</db:link> and <db:link xlink:href="qdomcdatasection.xml">QDomCDATASection</db:link> objects.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDomElement &amp;QDomElement::operator=(const QDomElement &amp;<db:emphasis>x</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDomElement &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDomElement &amp;</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QDomElement &amp; operator=(const QDomElement &amp;x)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">x</db:code> to this DOM element.</db:para>
<db:para>The data of the copy is shared (shallow copy): modifying one node will also change the other. If you want to make a deep copy, use <db:link xlink:href="qdomnode.xml#cloneNode">cloneNode</db:link>().</db:para>
</db:section>
</db:section>
</db:article>
