<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QValue3DAxisFormatter Class</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvalue3daxisformatter.xml">QValue3DAxisFormatter</db:link> class is a base class for value axis formatters.</db:para>
<db:para>This class was introduced in QtDataVisualization 1.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QValue3DAxisFormatter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtDataVisualization 1.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlogvalue3daxisformatter.xml" xlink:role="class">QLogValue3DAxisFormatter</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtdatavisualization-valueaxis3dformatter.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlogvalue3daxisformatter.xml" xlink:role="class">QLogValue3DAxisFormatter</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class provides formatting rules for a linear value 3D axis. Subclass it if you want to implement custom value axes.</db:para>
<db:para>The base class has no public API beyond constructors and destructors. It is meant to be only used internally. However, subclasses may implement public properties as needed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxis.xml">QValue3DAxis</db:link></db:member>
<db:member><db:link xlink:href="qlogvalue3daxisformatter.xml">QLogValue3DAxisFormatter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QValue3DAxisFormatter-1">
<db:title>[explicit] QValue3DAxisFormatter::QValue3DAxisFormatter(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QValue3DAxisFormatter</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QValue3DAxisFormatter(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new value 3D axis formatter with the optional parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QValue3DAxisFormatter">
<db:title>[virtual] QValue3DAxisFormatter::~QValue3DAxisFormatter()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QValue3DAxisFormatter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QValue3DAxisFormatter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Deletes the value 3D axis formatter.</db:para>
</db:section>
<db:section xml:id="allowNegatives">
<db:title>[protected] bool QValue3DAxisFormatter::allowNegatives() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>allowNegatives</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool allowNegatives() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if negative values are valid values for the parent axis. The default implementation always returns <db:code>true</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#setAllowNegatives">setAllowNegatives</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="allowZero">
<db:title>[protected] bool QValue3DAxisFormatter::allowZero() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>allowZero</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool allowZero() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if zero is a valid value for the parent axis. The default implementation always returns <db:code>true</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#setAllowZero">setAllowZero</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="axis">
<db:title>[protected] QValue3DAxis *QValue3DAxisFormatter::axis() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QValue3DAxis *</db:type>
<db:methodname>axis</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QValue3DAxis * axis() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the parent axis. The parent axis must only be accessed in the <db:link xlink:href="qvalue3daxisformatter.xml#recalculate">recalculate</db:link>() method to maintain thread safety in environments using a threaded renderer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#recalculate">recalculate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createNewInstance">
<db:title>[virtual protected] QValue3DAxisFormatter *QValue3DAxisFormatter::createNewInstance() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QValue3DAxisFormatter *</db:type>
<db:methodname>createNewInstance</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QValue3DAxisFormatter * createNewInstance() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a new empty value 3D axis formatter. Must be reimplemented in a subclass.</db:para>
<db:para>Returns the new formatter. The renderer uses this method to cache a copy of the formatter. The ownership of the new copy is transferred to the caller.</db:para>
</db:section>
<db:section xml:id="gridPositions">
<db:title>[protected] QList&lt;float&gt; &amp;QValue3DAxisFormatter::gridPositions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;float&gt; &amp;</db:type>
<db:methodname>gridPositions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;float&gt; &amp; gridPositions() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the array of normalized grid line positions. The default array size is equal to the segment count of the parent axis plus one, but a subclassed implementation of the <db:link xlink:href="qvalue3daxisformatter.xml#recalculate">recalculate</db:link>() method may resize the array differently. The values should be between <db:code>0.0</db:code> (the minimum value) and <db:code>1.0</db:code> (the maximum value), inclusive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxis.xml#segmentCount-prop">QValue3DAxis::segmentCount</db:link></db:member>
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#recalculate">recalculate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelPositions">
<db:title>[protected] QList&lt;float&gt; &amp;QValue3DAxisFormatter::labelPositions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;float&gt; &amp;</db:type>
<db:methodname>labelPositions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;float&gt; &amp; labelPositions() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the array of normalized label positions. The default array size is equal to the segment count of the parent axis plus one, but a subclassed implementation of the <db:link xlink:href="qvalue3daxisformatter.xml#recalculate">recalculate</db:link>() method may resize the array differently. The values should be between <db:code>0.0</db:code> (the minimum value) and <db:code>1.0</db:code> (the maximum value), inclusive. By default, the label at the index zero corresponds to the minimum value of the axis.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxis.xml#segmentCount-prop">QValue3DAxis::segmentCount</db:link></db:member>
<db:member><db:link xlink:href="qabstract3daxis.xml#labels-prop">QAbstract3DAxis::labels</db:link></db:member>
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#recalculate">recalculate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelStrings">
<db:title>[protected] QStringList &amp;QValue3DAxisFormatter::labelStrings() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList &amp;</db:type>
<db:methodname>labelStrings</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList &amp; labelStrings() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the string list containing formatter label strings. The array size must be equal to the size of the label positions array, which the indexes also correspond to.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#labelPositions">labelPositions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="locale">
<db:title>[protected] QLocale QValue3DAxisFormatter::locale() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLocale</db:type>
<db:methodname>locale</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLocale locale() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current locale this formatter is using.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#setLocale">setLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="markDirty">
<db:title>[protected] void QValue3DAxisFormatter::markDirty(bool <db:emphasis>labelsChange</db:emphasis> = false)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>markDirty</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>labelsChange</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void markDirty(bool labelsChange)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Marks this formatter dirty, prompting the renderer to make a new copy of its cache on the next renderer synchronization. This method should be called by a subclass whenever the formatter is changed in a way that affects the resolved values. Set <db:code role="parameter">labelsChange</db:code> to <db:code>true</db:code> if the change requires regenerating the parent axis label strings.</db:para>
</db:section>
<db:section xml:id="populateCopy">
<db:title>[virtual protected] void QValue3DAxisFormatter::populateCopy(QValue3DAxisFormatter &amp;<db:emphasis>copy</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>populateCopy</db:methodname>
<db:methodparam>
<db:type>QValue3DAxisFormatter &amp;</db:type>
<db:parameter>copy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void populateCopy(QValue3DAxisFormatter &amp;copy) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies all the values necessary for resolving positions, values, and strings with this formatter to the <db:code role="parameter">copy</db:code> of the formatter. When reimplementing this method in a subclass, call the superclass version at some point. The renderer uses this method to cache a copy of the formatter.</db:para>
<db:para>Returns the new copy. The ownership of the new copy transfers to the caller.</db:para>
</db:section>
<db:section xml:id="positionAt">
<db:title>[virtual protected] float QValue3DAxisFormatter::positionAt(float <db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>positionAt</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float positionAt(float value) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the normalized position along the axis for the given <db:code role="parameter">value</db:code>. The returned value should be between <db:code>0.0</db:code> (the minimum value) and <db:code>1.0</db:code> (the maximum value), inclusive, if the value is within the parent axis range.</db:para>
<db:para>Reimplement this method if the position cannot be resolved by linear interpolation between the parent axis minimum and maximum values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#recalculate">recalculate</db:link>()</db:member>
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#valueAt">valueAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="recalculate">
<db:title>[virtual protected] void QValue3DAxisFormatter::recalculate()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>recalculate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void recalculate()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resizes and populates the label and grid line position arrays and the label strings array, as well as calculates any values needed to map a value to its position. The parent axis can be accessed from inside this function.</db:para>
<db:para>This method must be reimplemented in a subclass if the default array contents are not suitable.</db:para>
<db:para>See <db:link xlink:href="qvalue3daxisformatter.xml#gridPositions">gridPositions</db:link>(), <db:link xlink:href="qvalue3daxisformatter.xml#subGridPositions">subGridPositions</db:link>(), <db:link xlink:href="qvalue3daxisformatter.xml#labelPositions">labelPositions</db:link>(), and <db:link xlink:href="qvalue3daxisformatter.xml#labelStrings">labelStrings</db:link>() methods for documentation about the arrays that need to be resized and populated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#gridPositions">gridPositions</db:link>()</db:member>
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#subGridPositions">subGridPositions</db:link>()</db:member>
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#labelPositions">labelPositions</db:link>()</db:member>
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#labelStrings">labelStrings</db:link>()</db:member>
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#axis">axis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAllowNegatives">
<db:title>[protected] void QValue3DAxisFormatter::setAllowNegatives(bool <db:emphasis>allow</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAllowNegatives</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>allow</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAllowNegatives(bool allow)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Allows the parent axis to have negative values if <db:code role="parameter">allow</db:code> is <db:code>true</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#allowNegatives">allowNegatives</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAllowZero">
<db:title>[protected] void QValue3DAxisFormatter::setAllowZero(bool <db:emphasis>allow</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAllowZero</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>allow</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAllowZero(bool allow)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Allows the parent axis to have a zero value if <db:code role="parameter">allow</db:code> is <db:code>true</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#allowZero">allowZero</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLocale">
<db:title>[protected] void QValue3DAxisFormatter::setLocale(const QLocale &amp;<db:emphasis>locale</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLocale</db:methodname>
<db:methodparam>
<db:type>const QLocale &amp;</db:type>
<db:parameter>locale</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLocale(const QLocale &amp;locale)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">locale</db:code> that this formatter uses. The graph automatically sets the formatter's locale to a graph's locale whenever the parent axis is set as an active axis of the graph, the axis formatter is set to an axis attached to the graph, or the graph's locale changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#locale">locale</db:link>()</db:member>
<db:member><db:link xlink:href="qabstract3dgraph.xml#locale-prop">QAbstract3DGraph::locale</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stringForValue">
<db:title>[virtual protected] QString QValue3DAxisFormatter::stringForValue(qreal <db:emphasis>value</db:emphasis>, const QString &amp;<db:emphasis>format</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>stringForValue</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString stringForValue(qreal value, const QString &amp;format) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the formatted label string using the specified <db:code role="parameter">value</db:code> and <db:code role="parameter">format</db:code>.</db:para>
<db:para>Reimplement this method in a subclass to resolve the formatted string for a given <db:code role="parameter">value</db:code> if the default formatting rules specified for <db:link xlink:href="qvalue3daxis.xml#labelFormat-prop">QValue3DAxis::labelFormat</db:link> property are not sufficient.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#recalculate">recalculate</db:link>()</db:member>
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#labelStrings">labelStrings</db:link>()</db:member>
<db:member><db:link xlink:href="qvalue3daxis.xml#labelFormat-prop">QValue3DAxis::labelFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subGridPositions">
<db:title>[protected] QList&lt;float&gt; &amp;QValue3DAxisFormatter::subGridPositions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;float&gt; &amp;</db:type>
<db:methodname>subGridPositions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;float&gt; &amp; subGridPositions() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the array of normalized subgrid line positions. The default array size is equal to the segment count of the parent axis times the sub-segment count of the parent axis minus one, but a subclassed implementation of the <db:link xlink:href="qvalue3daxisformatter.xml#recalculate">recalculate</db:link>() method may resize the array differently. The values should be between <db:code>0.0</db:code> (the minimum value) and <db:code>1.0</db:code> (the maximum value), inclusive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxis.xml#segmentCount-prop">QValue3DAxis::segmentCount</db:link></db:member>
<db:member><db:link xlink:href="qvalue3daxis.xml#subSegmentCount-prop">QValue3DAxis::subSegmentCount</db:link></db:member>
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#recalculate">recalculate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueAt">
<db:title>[virtual protected] float QValue3DAxisFormatter::valueAt(float <db:emphasis>position</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>valueAt</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float valueAt(float position) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value at the normalized <db:code role="parameter">position</db:code> along the axis. The <db:code role="parameter">position</db:code> value should be between <db:code>0.0</db:code> (the minimum value) and <db:code>1.0</db:code> (the maximum value), inclusive, to obtain values within the parent axis range.</db:para>
<db:para>Reimplement this method if the value cannot be resolved by linear interpolation between the parent axis minimum and maximum values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#recalculate">recalculate</db:link>()</db:member>
<db:member><db:link xlink:href="qvalue3daxisformatter.xml#positionAt">positionAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
