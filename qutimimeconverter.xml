<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QUtiMimeConverter Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qutimimeconverter.xml">QUtiMimeConverter</db:link> class converts between a MIME type and a <db:link xlink:href="https://developer.apple.com/documentation/uniformtypeidentifiers">Uniform Type Identifier (UTI)</db:link> format.</db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QUtiMimeConverter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QUtiMimeConverter is part of <db:simplelist><db:member>draganddrop</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Qt's drag and drop and clipboard facilities use the MIME standard. On X11, this maps trivially to the Xdnd protocol. On Mac, although some applications use MIME to describe clipboard contents, it is more common to use Apple's UTI format.</db:para>
<db:para><db:link xlink:href="qutimimeconverter.xml">QUtiMimeConverter</db:link>'s role is to bridge the gap between MIME and UTI; By subclasses this class, one can extend Qt's drag and drop and clipboard handling to convert to and from unsupported, or proprietary, UTI formats.</db:para>
<db:para>Construct an instance of your converter implementation after instantiating <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>:</db:para>
<db:programlisting language="cpp">int main(int argc, char **argv)
{
    QGuiApplication app(argc, argv);
    JsonMimeConverter jsonConverter;
}
</db:programlisting>
<db:para>Destroying the instance will unregister the converter and remove support for the conversion. It is also valid to heap-allocate the converter instance; Qt takes ownership and will delete the converter object during <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> shut-down.</db:para>
<db:para>Qt has predefined support for the following UTIs:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>public.utf8-plain-text - converts to &quot;text/plain&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>public.utf16-plain-text - converts to &quot;text/plain&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>public.text - converts to &quot;text/plain&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>public.html - converts to &quot;text/html&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>public.url - converts to &quot;text/uri-list&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>public.file-url - converts to &quot;text/uri-list&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>public.tiff - converts to &quot;application/x-qt-image&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>public.vcard - converts to &quot;text/plain&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>com.apple.traditional-mac-plain-text - converts to &quot;text/plain&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>com.apple.pict - converts to &quot;application/x-qt-image&quot;</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When working with MIME data, Qt will iterate through all instances of <db:link xlink:href="qutimimeconverter.xml">QUtiMimeConverter</db:link> to find find an instance that can convert to, or from, a specific MIME type. It will do this by calling mimeForUti() or utiForMime() on each instance, starting with (and choosing) the last created instance first. The actual conversions will be done by using convertToMime() and convertFromMime().</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QUtiMimeConverter-1">
<db:title>QUtiMimeConverter::QUtiMimeConverter()</db:title>
<db:constructorsynopsis>
<db:methodname>QUtiMimeConverter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QUtiMimeConverter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new conversion object and adds it to the globally accessed list of available converters.</db:para>
<db:para>Call this constructor after <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> has been created.</db:para>
</db:section>
<db:section xml:id="dtor.QUtiMimeConverter">
<db:title>[virtual] QUtiMimeConverter::~QUtiMimeConverter()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QUtiMimeConverter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QUtiMimeConverter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a conversion object, removing it from the global list of available converters.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>[virtual] int QUtiMimeConverter::count(const QMimeData *<db:emphasis>mimeData</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:methodparam>
<db:type>const QMimeData *</db:type>
<db:parameter>mimeData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int count(const QMimeData *mimeData) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item count for the given <db:code role="parameter">mimeData</db:code></db:para>
</db:section>
</db:section>
</db:article>
