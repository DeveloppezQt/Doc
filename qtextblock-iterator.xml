<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>iterator Class</db:title>
<db:subtitle>QTextBlock::iterator</db:subtitle>
<db:productname>QtGui</db:productname>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextblock-iterator.xml">QTextBlock::iterator</db:link> class provides an iterator for reading the contents of a <db:link xlink:href="qtextblock.xml">QTextBlock</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>iterator is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A block consists of a sequence of text fragments. This class provides a way to iterate over these, and read their contents. It does not provide a way to modify the internal structure or contents of the block.</db:para>
<db:para>An iterator can be constructed and used to access the fragments within a text block in the following way:</db:para>
<db:programlisting language="cpp">    QTextBlock::iterator it;
    for (it = currentBlock.begin(); !(it.atEnd()); ++it) {
        QTextFragment currentFragment = it.fragment();
        if (currentFragment.isValid())
            processFragment(currentFragment);
    }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextfragment.xml">QTextFragment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="iterator">
<db:title>iterator::iterator()</db:title>
<db:para>Constructs an iterator for this text block.</db:para>
</db:section>
<db:section xml:id="iterator-1">
<db:title>iterator::iterator(const QTextBlock::iterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copy constructor. Constructs a copy of the <db:code role="parameter">other</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="atEnd">
<db:title>bool iterator::atEnd() const</db:title>
<db:para>Returns true if the current item is the last item in the text block.</db:para>
</db:section>
<db:section xml:id="fragment">
<db:title>QTextFragment iterator::fragment() const</db:title>
<db:para>Returns the text fragment the iterator currently points to.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool iterator::operator!=(const QTextBlock::iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Retuns true if this iterator is different from the <db:code role="parameter">other</db:code> iterator; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>QTextBlock::iterator &amp;iterator::operator++()</db:title>
<db:para>The prefix ++ operator (<db:code>++i</db:code>) advances the iterator to the next item in the hash and returns an iterator to the new current item.</db:para>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>QTextBlock::iterator iterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>The postfix ++ operator (<db:code>i++</db:code>) advances the iterator to the next item in the text block and returns an iterator to the old current item.</db:para>
</db:section>
<db:section xml:id="operator--">
<db:title>QTextBlock::iterator &amp;iterator::operator--()</db:title>
<db:para>The prefix – operator (<db:code>--i</db:code>) makes the preceding item current and returns an iterator pointing to the new current item.</db:para>
</db:section>
<db:section xml:id="operator---1">
<db:title>QTextBlock::iterator iterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:para>The postfix – operator (<db:code>i--</db:code>) makes the preceding item current and returns an iterator to the old current item.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool iterator::operator==(const QTextBlock::iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Retuns true if this iterator is the same as the <db:code role="parameter">other</db:code> iterator; otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
