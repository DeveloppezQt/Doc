<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Iterator Class</db:title>
<db:subtitle>QCborArray::Iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcborarray-iterator.xml">QCborArray::Iterator</db:link> class provides an STL-style non-const iterator for <db:link xlink:href="qcborarray.xml">QCborArray</db:link>.</db:para>
<db:para>This class was introduced in Qt 5.12.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.12</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Iterator is part of <db:simplelist><db:member>cbor</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcborarray-iterator.xml">QCborArray::Iterator</db:link> allows you to iterate over a <db:link xlink:href="qcborarray.xml">QCborArray</db:link> and to modify the array item associated with the iterator. If you want to iterate over a const <db:link xlink:href="qcborarray.xml">QCborArray</db:link>, use <db:link xlink:href="qcborarray-constiterator.xml">QCborArray::ConstIterator</db:link> instead. It is generally a good practice to use <db:link xlink:href="qcborarray-constiterator.xml">QCborArray::ConstIterator</db:link> on a non-const <db:link xlink:href="qcborarray.xml">QCborArray</db:link> as well, unless you need to change the <db:link xlink:href="qcborarray.xml">QCborArray</db:link> through the iterator. Const iterators are slightly faster and improve code readability.</db:para>
<db:para>Iterators are initialized by using a <db:link xlink:href="qcborarray.xml">QCborArray</db:link> function like <db:link xlink:href="qcborarray.xml#begin">QCborArray::begin</db:link>(), <db:link xlink:href="qcborarray.xml#end">QCborArray::end</db:link>(), or <db:link xlink:href="qcborarray.xml#insert">QCborArray::insert</db:link>(). Iteration is only possible after that.</db:para>
<db:para>Most <db:link xlink:href="qcborarray.xml">QCborArray</db:link> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <db:link xlink:href="qcborarray.xml">QCborArray</db:link>. One place where STL-style iterators do make sense is as arguments to <db:link xlink:href="qtalgorithms.xml">generic algorithms</db:link>.</db:para>
<db:para>Multiple iterators can be used on the same array. However, be aware that any non-const function call performed on the <db:link xlink:href="qcborarray.xml">QCborArray</db:link> will render all existing iterators undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-constiterator.xml">QCborArray::ConstIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="iterator_category-typedef">
<db:title>Iterator::iterator_category</db:title>
<db:typedefsynopsis>
<db:typedefname>iterator_category</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A synonym for <db:emphasis>std::random_access_iterator_tag</db:emphasis> indicating this iterator is a random access iterator.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool Iterator::operator==(const ConstIterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-eq-eq">bool Iterator::operator==(const Iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to the same entry in the array as this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-iterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool Iterator::operator!=(const ConstIterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-not-eq">bool Iterator::operator!=(const Iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to a different entry in the array than this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-iterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-1">
<db:title>bool Iterator::operator&lt;(const ConstIterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-lt">bool Iterator::operator&lt;(const Iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if the entry in the array pointed to by this iterator occurs before the entry pointed to by the <db:code role="parameter">other</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-1">
<db:title>bool Iterator::operator&lt;=(const ConstIterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-lt-eq">bool Iterator::operator&lt;=(const Iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if the entry in the array pointed to by this iterator occurs before or is the same entry as is pointed to by the <db:code role="parameter">other</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="operator-gt-1">
<db:title>bool Iterator::operator&gt;(const ConstIterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-gt">bool Iterator::operator&gt;(const Iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if the entry in the array pointed to by this iterator occurs after the entry pointed to by the <db:code role="parameter">other</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq-1">
<db:title>bool Iterator::operator&gt;=(const ConstIterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-gt-eq">bool Iterator::operator&gt;=(const Iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if the entry in the array pointed to by this iterator occurs after or is the same entry as is pointed to by the <db:code role="parameter">other</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="Iterator-1">
<db:title>Iterator::Iterator()</db:title>
<db:constructorsynopsis>
<db:methodname>Iterator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an uninitialized iterator.</db:para>
<db:para>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#begin">QCborArray::begin</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#end">QCborArray::end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Iterator-2">
<db:title>Iterator::Iterator(const Iterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>Iterator</db:methodname>
<db:methodparam>
<db:type>const Iterator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator(const Iterator &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Makes a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>QCborValueRef Iterator::operator*() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborValueRef</db:type>
<db:methodname>operator*</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValueRef operator*() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a modifiable reference to the current item.</db:para>
<db:para>You can change the value of an item by using operator*() on the left side of an assignment.</db:para>
<db:para>The return value is of type QCborValueRef, a helper class for <db:link xlink:href="qcborarray.xml">QCborArray</db:link> and <db:link xlink:href="qcbormap.xml">QCborMap</db:link>. When you get an object of type QCborValueRef, you can use it as if it were a reference to a <db:link xlink:href="qcborvalue.xml">QCborValue</db:link>. If you assign to it, the assignment will apply to the element in the <db:link xlink:href="qcborarray.xml">QCborArray</db:link> or <db:link xlink:href="qcbormap.xml">QCborMap</db:link> from which you got the reference.</db:para>
</db:section>
<db:section xml:id="operator-2b">
<db:title>Iterator Iterator::operator+(qsizetype <db:emphasis>j</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Iterator</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator operator+(qsizetype j) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an iterator to the item at position <db:code role="parameter">j</db:code> steps forward from this iterator. If <db:code role="parameter">j</db:code> is negative, the iterator goes backward.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-iterator.xml#operator-">operator-</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray-iterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>Iterator &amp;Iterator::operator++()</db:title>
<db:methodsynopsis>
<db:type>Iterator &amp;</db:type>
<db:methodname>operator++</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator &amp; operator++()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix ++ operator, ++it, advances the iterator to the next item in the array and returns this iterator.</db:para>
<db:para>Calling this function on <db:link xlink:href="qcborarray.xml#end">QCborArray::end</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-iterator.xml#operator--">operator--</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>Iterator Iterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>Iterator</db:type>
<db:methodname>operator++</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator operator++(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator, it++, advances the iterator to the next item in the array and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>Iterator &amp;Iterator::operator+=(qsizetype <db:emphasis>j</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>Iterator &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator &amp; operator+=(qsizetype j)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Advances the iterator by <db:code role="parameter">j</db:code> positions. If <db:code role="parameter">j</db:code> is negative, the iterator goes backward. Returns a reference to this iterator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-iterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>Iterator Iterator::operator-(qsizetype <db:emphasis>j</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Iterator</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator operator-(qsizetype j) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an iterator to the item at position <db:code role="parameter">j</db:code> steps backward from this iterator. If <db:code role="parameter">j</db:code> is negative, the iterator goes forward.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-iterator.xml#operator-2b">operator+</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray-iterator.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--1">
<db:title>qsizetype Iterator::operator-(Iterator <db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>Iterator</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype operator-(Iterator other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the offset of this iterator relative to <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator--">
<db:title>Iterator &amp;Iterator::operator--()</db:title>
<db:methodsynopsis>
<db:type>Iterator &amp;</db:type>
<db:methodname>operator--</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator &amp; operator--()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix – operator, --it, makes the preceding item current and returns this iterator.</db:para>
<db:para>Calling this function on <db:link xlink:href="qcborarray.xml#begin">QCborArray::begin</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-iterator.xml#operator-2b-2b">operator++</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator---1">
<db:title>Iterator Iterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>Iterator</db:type>
<db:methodname>operator--</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator operator--(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix – operator, it--, makes the preceding item current and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator--eq">
<db:title>Iterator &amp;Iterator::operator-=(qsizetype <db:emphasis>j</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>Iterator &amp;</db:type>
<db:methodname>operator-=</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator &amp; operator-=(qsizetype j)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes the iterator go back by <db:code role="parameter">j</db:code> positions. If <db:code role="parameter">j</db:code> is negative, the iterator goes forward. Returns a reference to this iterator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-iterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray-iterator.xml#operator-">operator-</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--gt">
<db:title>QCborValueRef *Iterator::operator-&gt;() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborValueRef *</db:type>
<db:methodname>operator-&gt;</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValueRef * operator-&gt;() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to a modifiable reference to the current item.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>Iterator &amp;Iterator::operator=(const Iterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>Iterator &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const Iterator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator &amp; operator=(const Iterator &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes this iterator a copy of <db:code role="parameter">other</db:code> and returns a reference to this iterator.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>QCborValueRef Iterator::operator[](qsizetype <db:emphasis>j</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCborValueRef</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValueRef operator[](qsizetype j)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a modifiable reference to the item at a position <db:code role="parameter">j</db:code> steps forward from the item pointed to by this iterator.</db:para>
<db:para>This function is provided to make <db:link xlink:href="qcborarray.xml">QCborArray</db:link> iterators behave like C++ pointers.</db:para>
<db:para>The return value is of type QCborValueRef, a helper class for <db:link xlink:href="qcborarray.xml">QCborArray</db:link> and <db:link xlink:href="qcbormap.xml">QCborMap</db:link>. When you get an object of type QCborValueRef, you can use it as if it were a reference to a <db:link xlink:href="qcborvalue.xml">QCborValue</db:link>. If you assign to it, the assignment will apply to the element in the <db:link xlink:href="qcborarray.xml">QCborArray</db:link> or <db:link xlink:href="qcbormap.xml">QCborMap</db:link> from which you got the reference.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
