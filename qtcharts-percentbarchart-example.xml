<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Creating Percent Bar Charts</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to create a simple percent bar chart.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:note>
<db:para>This is part of the <db:link xlink:href="qtcharts-chartsgallery-example.xml">Charts with Widgets Gallery</db:link> example.</db:para>
</db:note>
<db:para>A percent bar chart shows the data in sets as a percentage of all sets per category.</db:para>
<db:para>Creating percent bar charts is just like creating a regular <db:link xlink:href="qtcharts-barchart-example.xml">bar chart</db:link>, except that for a percent bar charts, we use the <db:link xlink:href="qpercentbarseries-qtcharts.xml">QPercentBarSeries</db:link> API instead of <db:link xlink:href="qbarseries-qtcharts.xml">QBarSeries</db:link>. Also, in the <db:link xlink:href="qtcharts-barchart-example.xml">bar chart</db:link> we used the nice numbers algorithm to make the y-axis numbering look better. With the percent bar chart there is no need for that, because the maximum y-axis value is always 100.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_percentbarchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The barsets are used in same way in all barcharts. To illustrate the difference between various barcharts, we use the same data in all examples. The data visualized by the bar chart is defined by <db:link xlink:href="qbarset-qtcharts.xml">QBarSet</db:link> instances. Here we create the sets and append data to them. The data is appended here with the &lt;&lt; operator. Alternatively the append method could be used.</db:para>
<db:programlisting language="cpp">auto set0 = new QBarSet(&quot;Jane&quot;);
auto set1 = new QBarSet(&quot;John&quot;);
auto set2 = new QBarSet(&quot;Axel&quot;);
auto set3 = new QBarSet(&quot;Mary&quot;);
auto set4 = new QBarSet(&quot;Samantha&quot;);

*set0 &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 &lt;&lt; 4 &lt;&lt; 5 &lt;&lt; 6;
*set1 &lt;&lt; 5 &lt;&lt; 0 &lt;&lt; 0 &lt;&lt; 4 &lt;&lt; 0 &lt;&lt; 7;
*set2 &lt;&lt; 3 &lt;&lt; 5 &lt;&lt; 8 &lt;&lt; 13 &lt;&lt; 8 &lt;&lt; 5;
*set3 &lt;&lt; 5 &lt;&lt; 6 &lt;&lt; 7 &lt;&lt; 3 &lt;&lt; 4 &lt;&lt; 5;
*set4 &lt;&lt; 9 &lt;&lt; 7 &lt;&lt; 5 &lt;&lt; 3 &lt;&lt; 1 &lt;&lt; 2;
</db:programlisting>
<db:para>We create the series and append the barsets to it. The series takes ownership of the barsets. The series groups the data from sets to categories. The first values of each set are grouped together in the first category, the second values in the second category etc.</db:para>
<db:programlisting language="cpp">auto series = new QPercentBarSeries;
series-&gt;append(set0);
series-&gt;append(set1);
series-&gt;append(set2);
series-&gt;append(set3);
series-&gt;append(set4);
</db:programlisting>
<db:para>Here we create the chart object and add the series to it. We set the title of the chart with setTitle, and then turn on animations of the series by calling setAnimationOptions(<db:link xlink:href="qchart-qtcharts.xml#AnimationOption-enum">QChart::SeriesAnimations</db:link>)</db:para>
<db:programlisting language="cpp">auto chart = new QChart;
chart-&gt;addSeries(series);
chart-&gt;setTitle(&quot;Simple Percent Bar Chart&quot;);
chart-&gt;setAnimationOptions(QChart::SeriesAnimations);
</db:programlisting>
<db:para>To have the categories displayed on an axis, we need to create a <db:link xlink:href="qbarcategoryaxis-qtcharts.xml">QBarCategoryAxis</db:link> first. Here we create a category axis with a list of categories and add it to the chart aligned to the bottom, acting as the x-axis. The chart takes ownership of the axis. For y-axis we use a value axis, aligned to the left-hand side.</db:para>
<db:programlisting language="cpp">QStringList categories {&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;};
auto axisX = new QBarCategoryAxis;
axisX-&gt;append(categories);
chart-&gt;addAxis(axisX, Qt::AlignBottom);
series-&gt;attachAxis(axisX);
auto axisY = new QValueAxis;
chart-&gt;addAxis(axisY, Qt::AlignLeft);
series-&gt;attachAxis(axisY);
</db:programlisting>
<db:para>We also want to show the legend. To do so, we get the legend pointer from the chart and set it to visible. We also place the legend to bottom of the chart by setting its alignment to <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignBottom</db:link>.</db:para>
<db:programlisting language="cpp">chart-&gt;legend()-&gt;setVisible(true);
chart-&gt;legend()-&gt;setAlignment(Qt::AlignBottom);
</db:programlisting>
<db:para>Finally we add the chart onto a view.</db:para>
<db:programlisting language="cpp">createDefaultChartView(chart);
</db:programlisting>
<db:para>The chart is ready to be shown.</db:para>
</db:article>
