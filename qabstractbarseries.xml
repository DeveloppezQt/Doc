<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractBarSeries Class</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractbarseries.xml">QAbstractBarSeries</db:link> class is an abstract parent class for all bar series classes.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractBarSeries</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qbarseries.xml" xlink:role="class">QBarSeries</db:link>, <db:link xlink:href="qhorizontalbarseries.xml" xlink:role="class">QHorizontalBarSeries</db:link>, <db:link xlink:href="qhorizontalpercentbarseries.xml" xlink:role="class">QHorizontalPercentBarSeries</db:link>, <db:link xlink:href="qhorizontalstackedbarseries.xml" xlink:role="class">QHorizontalStackedBarSeries</db:link>, <db:link xlink:href="qpercentbarseries.xml" xlink:role="class">QPercentBarSeries</db:link>, and <db:link xlink:href="qstackedbarseries.xml" xlink:role="class">QStackedBarSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtcharts-abstractbarseries.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractseries.xml" xlink:role="class">QAbstractSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qbarseries.xml" xlink:role="class">QBarSeries</db:link>, <db:link xlink:href="qhorizontalbarseries.xml" xlink:role="class">QHorizontalBarSeries</db:link>, <db:link xlink:href="qhorizontalpercentbarseries.xml" xlink:role="class">QHorizontalPercentBarSeries</db:link>, <db:link xlink:href="qhorizontalstackedbarseries.xml" xlink:role="class">QHorizontalStackedBarSeries</db:link>, <db:link xlink:href="qpercentbarseries.xml" xlink:role="class">QPercentBarSeries</db:link>, and <db:link xlink:href="qstackedbarseries.xml" xlink:role="class">QStackedBarSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In bar charts, bars are defined as bar sets that contain one data value for each category. The position of a bar is specified by the category and its height by the data value. Bar series that contain multiple bar sets group together bars that belong to the same category. The way the bars are displayed is determined by the subclass of this class chosen to create the bar chart.</db:para>
<db:para>If a <db:link xlink:href="qvalueaxis.xml">QValueAxis</db:link> is used instead of <db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link> for the main bar axis, the bars are grouped around the index value of the category.</db:para>
<db:para>See the <db:link xlink:href="qtcharts-chartsgallery-example.xml">Charts with Widgets Gallery</db:link> to learn how to use the <db:link xlink:href="qbarseries.xml">QBarSeries</db:link> class to create a simple bar chart.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_barchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbarset.xml">QBarSet</db:link></db:member>
<db:member><db:link xlink:href="qbarseries.xml">QBarSeries</db:link></db:member>
<db:member><db:link xlink:href="qstackedbarseries.xml">QStackedBarSeries</db:link></db:member>
<db:member><db:link xlink:href="qpercentbarseries.xml">QPercentBarSeries</db:link></db:member>
<db:member><db:link xlink:href="qhorizontalbarseries.xml">QHorizontalBarSeries</db:link></db:member>
<db:member><db:link xlink:href="qhorizontalstackedbarseries.xml">QHorizontalStackedBarSeries</db:link></db:member>
<db:member><db:link xlink:href="qhorizontalpercentbarseries.xml">QHorizontalPercentBarSeries</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="LabelsPosition-enum">
<db:title>enum QAbstractBarSeries::LabelsPosition</db:title>
<db:enumsynopsis>
<db:enumname>LabelsPosition</db:enumname>
<db:enumitem>
<db:enumidentifier>LabelsCenter</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LabelsInsideEnd</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LabelsInsideBase</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LabelsOutsideEnd</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum value describes the position of the data value labels:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml">QAbstractBarSeries</db:link></db:emphasis>::LabelsCenter</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Label is located in the center of the bar.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml">QAbstractBarSeries</db:link></db:emphasis>::LabelsInsideEnd</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Label is located inside the bar at the top.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml">QAbstractBarSeries</db:link></db:emphasis>::LabelsInsideBase</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Label is located inside the bar at the bottom.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml">QAbstractBarSeries</db:link></db:emphasis>::LabelsOutsideEnd</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Label is located outside the bar at the top.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="barWidth-prop">
<db:title>barWidth : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>barWidth</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">barWidth</db:synopsisinfo>
<db:synopsisinfo role="setter">setBarWidth</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the width of the bars of the series.</db:para>
<db:para>The unit of width is the unit of the x-axis. The minimum width for bars is zero, and negative values are treated as zero. Setting the width to zero means that the width of the bar on the screen is one pixel regardless of the scale of the x-axis. Bars wider than zero are scaled using the x-axis scale.</db:para>
<db:note>
<db:para>When used with <db:link xlink:href="qbarseries.xml">QBarSeries</db:link>, this value specifies the width of a group of bars instead of that of a single bar.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml#barWidth">barWidth</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml#setBarWidth">setBarWidth</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>width</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbarseries.xml">QBarSeries</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only] count : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">count</db:synopsisinfo>
<db:synopsisinfo role="notifier">countChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of bar sets in a bar series.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml#count">count</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml#countChanged">countChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="labelsAngle-prop">
<db:title>labelsAngle : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>labelsAngle</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">labelsAngle</db:synopsisinfo>
<db:synopsisinfo role="setter">setLabelsAngle</db:synopsisinfo>
<db:synopsisinfo role="notifier">labelsAngleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the angle of the value labels in degrees.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">labelsAngle</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLabelsAngle</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>angle</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml#labelsAngleChanged">labelsAngleChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>angle</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="labelsFormat-prop">
<db:title>labelsFormat : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>labelsFormat</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">labelsFormat</db:synopsisinfo>
<db:synopsisinfo role="setter">setLabelsFormat</db:synopsisinfo>
<db:synopsisinfo role="notifier">labelsFormatChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the format used for showing labels in a bar series.</db:para>
<db:para><db:link xlink:href="qabstractbarseries.xml">QAbstractBarSeries</db:link> supports the following format tag:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>@value</db:para>
</db:td>
<db:td>
<db:para>The value of the bar</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example, the following usage of the format tags would produce labels that show the value followed by the unit (u):</db:para>
<db:programlisting language="cpp">series-&amp;gt;setLabelsFormat(&quot;@value u&quot;);
</db:programlisting>
<db:para>By default, the labels show the value of the bar. For the percent bar series, <db:emphasis>%</db:emphasis> is added after the value. The labels are shown on the plot area, if the bars are close to each other, the labels may overlap.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">labelsFormat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLabelsFormat</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml#labelsFormatChanged">labelsFormatChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbarseries.xml#labelsVisible-prop">labelsVisible</db:link></db:member>
<db:member><db:link xlink:href="qabstractbarseries.xml#labelsPosition-prop">labelsPosition</db:link></db:member>
<db:member><db:link xlink:href="qabstractbarseries.xml#labelsPrecision-prop">labelsPrecision</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelsPosition-prop">
<db:title>labelsPosition : LabelsPosition</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>LabelsPosition</db:type>
<db:varname>labelsPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">labelsPosition</db:synopsisinfo>
<db:synopsisinfo role="setter">setLabelsPosition</db:synopsisinfo>
<db:synopsisinfo role="notifier">labelsPositionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the position of value labels.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractbarseries.xml#LabelsPosition-enum">QAbstractBarSeries::LabelsPosition</db:link></db:type> <db:emphasis role="bold">labelsPosition</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLabelsPosition</db:emphasis>(<db:type><db:link xlink:href="qabstractbarseries.xml#LabelsPosition-enum">QAbstractBarSeries::LabelsPosition</db:link></db:type> <db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml#labelsPositionChanged">labelsPositionChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qabstractbarseries.xml#LabelsPosition-enum">QAbstractBarSeries::LabelsPosition</db:link></db:type> <db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbarseries.xml#labelsVisible-prop">labelsVisible</db:link></db:member>
<db:member><db:link xlink:href="qabstractbarseries.xml#labelsFormat-prop">labelsFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelsPrecision-prop">
<db:title>labelsPrecision : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>labelsPrecision</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">labelsPrecision</db:synopsisinfo>
<db:synopsisinfo role="setter">setLabelsPrecision</db:synopsisinfo>
<db:synopsisinfo role="notifier">labelsPrecisionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum amount of significant digits shown in value labels.</db:para>
<db:para>Default value is 6.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">labelsPrecision</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLabelsPrecision</db:emphasis>(<db:type>int</db:type> <db:emphasis>precision</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml#labelsPrecisionChanged">labelsPrecisionChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>precision</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="labelsVisible-prop">
<db:title>labelsVisible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>labelsVisible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isLabelsVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setLabelsVisible</db:synopsisinfo>
<db:synopsisinfo role="notifier">labelsVisibleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the visibility of the labels in a bar series.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml#isLabelsVisible">isLabelsVisible</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml#setLabelsVisible">setLabelsVisible</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractbarseries.xml#labelsVisibleChanged">labelsVisibleChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QAbstractBarSeries">
<db:title>[virtual] QAbstractBarSeries::~QAbstractBarSeries()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractBarSeries</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractBarSeries()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Removes the abstract bar series and the bar sets owned by it.</db:para>
</db:section>
<db:section xml:id="append">
<db:title>bool QAbstractBarSeries::append(QBarSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>QBarSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool append(QBarSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a set of bars specified by <db:code role="parameter">set</db:code> to the bar series and takes ownership of it. If the set is null or it already belongs to the series, it will not be appended. Returns <db:code>true</db:code> if appending succeeded.</db:para>
</db:section>
<db:section xml:id="append-1">
<db:title>bool QAbstractBarSeries::append(const QList&lt;QBarSet *&gt; &amp;<db:emphasis>sets</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QBarSet *&gt; &amp;</db:type>
<db:parameter>sets</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool append(const QList&lt;QBarSet *&gt; &amp;sets)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a list of bar sets specified by <db:code role="parameter">sets</db:code> to a bar series and takes ownership of the sets. Returns <db:code>true</db:code> if all sets were appended successfully. If any of the sets is null or was previously appended to the series, nothing is appended and this function returns <db:code>false</db:code>. If any of the sets appears in the list more than once, nothing is appended and this function returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="barSets">
<db:title>QList&lt;QBarSet *&gt; QAbstractBarSeries::barSets() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QBarSet *&gt;</db:type>
<db:methodname>barSets</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QBarSet *&gt; barSets() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of bar sets in a bar series. Keeps the ownership of the bar sets.</db:para>
</db:section>
<db:section xml:id="barWidth">
<db:title>qreal QAbstractBarSeries::barWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>barWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">barWidth</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal barWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of the bars of the series.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstractbarseries.xml#barWidth-prop">barWidth</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbarseries.xml#setBarWidth">setBarWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="barsetsAdded">
<db:title>void QAbstractBarSeries::barsetsAdded(const QList&lt;QBarSet *&gt; &amp;<db:emphasis>sets</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>barsetsAdded</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QBarSet *&gt; &amp;</db:type>
<db:parameter>sets</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void barsetsAdded(const QList&lt;QBarSet *&gt; &amp;sets)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the bar sets specified by <db:code role="parameter">sets</db:code> are added to the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbarseries.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractbarseries.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="barsetsRemoved">
<db:title>void QAbstractBarSeries::barsetsRemoved(const QList&lt;QBarSet *&gt; &amp;<db:emphasis>sets</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>barsetsRemoved</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QBarSet *&gt; &amp;</db:type>
<db:parameter>sets</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void barsetsRemoved(const QList&lt;QBarSet *&gt; &amp;sets)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the bar sets specified by <db:code role="parameter">sets</db:code> are removed from the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbarseries.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QAbstractBarSeries::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all bar sets from the series and permanently deletes them.</db:para>
</db:section>
<db:section xml:id="clicked">
<db:title>void QAbstractBarSeries::clicked(int <db:emphasis>index</db:emphasis>, QBarSet *<db:emphasis>barset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clicked</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBarSet *</db:type>
<db:parameter>barset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clicked(int index, QBarSet *barset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user clicks the bar specified by <db:code role="parameter">index</db:code> in the bar set specified by <db:code role="parameter">barset</db:code>.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>int QAbstractBarSeries::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">count</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of bar sets in a bar series.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstractbarseries.xml#count-prop">count</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="countChanged">
<db:title>void QAbstractBarSeries::countChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>countChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">count</db:synopsisinfo>
<db:synopsisinfo role="signature">void countChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the number of bar sets is changed, for example by <db:link xlink:href="qabstractbarseries.xml#append">append</db:link>() or <db:link xlink:href="qabstractbarseries.xml#remove">remove</db:link>().</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstractbarseries.xml#count-prop">count</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="doubleClicked">
<db:title>void QAbstractBarSeries::doubleClicked(int <db:emphasis>index</db:emphasis>, QBarSet *<db:emphasis>barset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>doubleClicked</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBarSet *</db:type>
<db:parameter>barset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void doubleClicked(int index, QBarSet *barset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user double-clicks the bar specified by <db:code role="parameter">index</db:code> in the bar set specified by <db:code role="parameter">barset</db:code>.</db:para>
</db:section>
<db:section xml:id="hovered">
<db:title>void QAbstractBarSeries::hovered(bool <db:emphasis>status</db:emphasis>, int <db:emphasis>index</db:emphasis>, QBarSet *<db:emphasis>barset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hovered</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>status</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBarSet *</db:type>
<db:parameter>barset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hovered(bool status, int index, QBarSet *barset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a mouse is hovered over the bar specified by <db:code role="parameter">index</db:code> in the bar set specified by <db:code role="parameter">barset</db:code>. When the mouse moves over the bar, <db:code role="parameter">status</db:code> turns <db:code>true</db:code>, and when the mouse moves away again, it turns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="insert">
<db:title>bool QAbstractBarSeries::insert(int <db:emphasis>index</db:emphasis>, QBarSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBarSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insert(int index, QBarSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a bar set specified by <db:code role="parameter">set</db:code> to a series at the position specified by <db:code role="parameter">index</db:code> and takes ownership of the set. If the set is null or already belongs to the series, it will not be appended. Returns <db:code>true</db:code> if inserting succeeds.</db:para>
</db:section>
<db:section xml:id="isLabelsVisible">
<db:title>bool QAbstractBarSeries::isLabelsVisible() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLabelsVisible</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">labelsVisible</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLabelsVisible() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the visibility of labels.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qabstractbarseries.xml#labelsVisible-prop">labelsVisible</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="labelsAngleChanged">
<db:title>void QAbstractBarSeries::labelsAngleChanged(qreal <db:emphasis>angle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>labelsAngleChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>angle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">labelsAngle</db:synopsisinfo>
<db:synopsisinfo role="signature">void labelsAngleChanged(qreal angle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:code role="parameter">angle</db:code> of the value labels changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstractbarseries.xml#labelsAngle-prop">labelsAngle</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="labelsFormatChanged">
<db:title>void QAbstractBarSeries::labelsFormatChanged(const QString &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>labelsFormatChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">labelsFormat</db:synopsisinfo>
<db:synopsisinfo role="signature">void labelsFormatChanged(const QString &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:code role="parameter">format</db:code> of data value labels changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstractbarseries.xml#labelsFormat-prop">labelsFormat</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="labelsPositionChanged">
<db:title>void QAbstractBarSeries::labelsPositionChanged(QAbstractBarSeries::LabelsPosition <db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>labelsPositionChanged</db:methodname>
<db:methodparam>
<db:type>QAbstractBarSeries::LabelsPosition</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">labelsPosition</db:synopsisinfo>
<db:synopsisinfo role="signature">void labelsPositionChanged(QAbstractBarSeries::LabelsPosition position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:code role="parameter">position</db:code> of value labels changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstractbarseries.xml#labelsPosition-prop">labelsPosition</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="labelsPrecisionChanged">
<db:title>void QAbstractBarSeries::labelsPrecisionChanged(int <db:emphasis>precision</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>labelsPrecisionChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>precision</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">labelsPrecision</db:synopsisinfo>
<db:synopsisinfo role="signature">void labelsPrecisionChanged(int precision)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:code role="parameter">precision</db:code> of the value labels changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstractbarseries.xml#labelsPrecision-prop">labelsPrecision</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="labelsVisibleChanged">
<db:title>void QAbstractBarSeries::labelsVisibleChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>labelsVisibleChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">labelsVisible</db:synopsisinfo>
<db:synopsisinfo role="signature">void labelsVisibleChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the labels' visibility changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstractbarseries.xml#labelsVisible-prop">labelsVisible</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbarseries.xml#isLabelsVisible">isLabelsVisible</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractbarseries.xml#setLabelsVisible">setLabelsVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pressed">
<db:title>void QAbstractBarSeries::pressed(int <db:emphasis>index</db:emphasis>, QBarSet *<db:emphasis>barset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pressed</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBarSet *</db:type>
<db:parameter>barset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pressed(int index, QBarSet *barset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user clicks the bar specified by <db:code role="parameter">index</db:code> in the bar set specified by <db:code role="parameter">barset</db:code> and holds down the mouse button.</db:para>
</db:section>
<db:section xml:id="released">
<db:title>void QAbstractBarSeries::released(int <db:emphasis>index</db:emphasis>, QBarSet *<db:emphasis>barset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>released</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBarSet *</db:type>
<db:parameter>barset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void released(int index, QBarSet *barset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user releases the mouse press on the bar specified by <db:code role="parameter">index</db:code> in the bar set specified by <db:code role="parameter">barset</db:code>.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>bool QAbstractBarSeries::remove(QBarSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>QBarSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool remove(QBarSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the bar set specified by <db:code role="parameter">set</db:code> from the series and permanently deletes it if the removal succeeds. Returns <db:code>true</db:code> if the set was removed.</db:para>
</db:section>
<db:section xml:id="setBarWidth">
<db:title>void QAbstractBarSeries::setBarWidth(qreal <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBarWidth</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">barWidth</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBarWidth(qreal width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the width of the bars of the series to <db:code role="parameter">width</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qabstractbarseries.xml#barWidth-prop">barWidth</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbarseries.xml#barWidth">barWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLabelsVisible">
<db:title>void QAbstractBarSeries::setLabelsVisible(bool <db:emphasis>visible</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLabelsVisible</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>visible</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">labelsVisible</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLabelsVisible(bool visible)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the visibility of labels in a bar series to <db:code role="parameter">visible</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qabstractbarseries.xml#labelsVisible-prop">labelsVisible</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractbarseries.xml#isLabelsVisible">isLabelsVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="take">
<db:title>bool QAbstractBarSeries::take(QBarSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>take</db:methodname>
<db:methodparam>
<db:type>QBarSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool take(QBarSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Takes a single <db:code role="parameter">set</db:code> from the series. Does not delete the bar set object.</db:para>
<db:note>
<db:para>The series remains the barset's parent object. You must set the parent object to take full ownership.</db:para>
</db:note>
<db:para>Returns <db:code>true</db:code> if the take operation succeeds.</db:para>
</db:section>
</db:section>
</db:article>
