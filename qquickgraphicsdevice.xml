<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickGraphicsDevice Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link> class provides an opaque container for native graphics objects representing graphics devices or contexts.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickGraphicsDevice</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setGraphicsDevice">QQuickWindow::setGraphicsDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickGraphicsDevice">
<db:title>QQuickGraphicsDevice::QQuickGraphicsDevice()</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickGraphicsDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickGraphicsDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a default <db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link> that does not reference any native objects.</db:para>
</db:section>
<db:section xml:id="dtor.QQuickGraphicsDevice">
<db:title>QQuickGraphicsDevice::~QQuickGraphicsDevice()</db:title>
<db:destructorsynopsis>
<db:methodname>~QQuickGraphicsDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQuickGraphicsDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="fromAdapter">
<db:title>[static] QQuickGraphicsDevice QQuickGraphicsDevice::fromAdapter(quint32 <db:emphasis>adapterLuidLow</db:emphasis>, qint32 <db:emphasis>adapterLuidHigh</db:emphasis>, int <db:emphasis>featureLevel</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickGraphicsDevice</db:type>
<db:methodname>fromAdapter</db:methodname>
<db:methodparam>
<db:type>quint32</db:type>
<db:parameter>adapterLuidLow</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint32</db:type>
<db:parameter>adapterLuidHigh</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>featureLevel</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickGraphicsDevice fromAdapter(quint32 adapterLuidLow, qint32 adapterLuidHigh, int featureLevel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link> describing a DXGI adapter and D3D feature level.</db:para>
<db:para>This factory function is suitable for Direct3D 11, particularly in combination with OpenXR. <db:code role="parameter">adapterLuidLow</db:code> and <db:code role="parameter">adapterLuidHigh</db:code> together specify a LUID, while a featureLevel specifies a <db:code>D3D_FEATURE_LEVEL_</db:code> value. <db:code role="parameter">featureLevel</db:code> can be set to 0 if it is not intended to be specified, in which case the scene graph's defaults will be used.</db:para>
</db:section>
<db:section xml:id="fromDeviceAndCommandQueue">
<db:title>[static] QQuickGraphicsDevice QQuickGraphicsDevice::fromDeviceAndCommandQueue(MTLDevice *<db:emphasis>device</db:emphasis>, MTLCommandQueue *<db:emphasis>commandQueue</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickGraphicsDevice</db:type>
<db:methodname>fromDeviceAndCommandQueue</db:methodname>
<db:methodparam>
<db:type>MTLDevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>MTLCommandQueue *</db:type>
<db:parameter>commandQueue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickGraphicsDevice fromDeviceAndCommandQueue(MTLDevice *device, MTLCommandQueue *commandQueue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link> referencing an existing <db:code role="parameter">device</db:code> and <db:code role="parameter">commandQueue</db:code> object.</db:para>
<db:para>This factory function is suitable for Metal.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link> does not own any native resources, it merely contains references. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
</db:section>
<db:section xml:id="fromDeviceAndContext">
<db:title>[static] QQuickGraphicsDevice QQuickGraphicsDevice::fromDeviceAndContext(void *<db:emphasis>device</db:emphasis>, void *<db:emphasis>context</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickGraphicsDevice</db:type>
<db:methodname>fromDeviceAndContext</db:methodname>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickGraphicsDevice fromDeviceAndContext(void *device, void *context)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link> referencing a native device and context object.</db:para>
<db:para>This factory function is suitable for Direct3D 11. <db:code role="parameter">device</db:code> is expected to be a <db:code>ID3D11Device*</db:code>, <db:code role="parameter">context</db:code> is expected to be a <db:code>ID3D11DeviceContext*</db:code>.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link> does not own any native resources, it merely contains references. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
</db:section>
<db:section xml:id="fromDeviceObjects">
<db:title>[static] QQuickGraphicsDevice QQuickGraphicsDevice::fromDeviceObjects(VkPhysicalDevice <db:emphasis>physicalDevice</db:emphasis>, VkDevice <db:emphasis>device</db:emphasis>, int <db:emphasis>queueFamilyIndex</db:emphasis>, int <db:emphasis>queueIndex</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickGraphicsDevice</db:type>
<db:methodname>fromDeviceObjects</db:methodname>
<db:methodparam>
<db:type>VkPhysicalDevice</db:type>
<db:parameter>physicalDevice</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>VkDevice</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>queueFamilyIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>queueIndex</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickGraphicsDevice fromDeviceObjects(VkPhysicalDevice physicalDevice, VkDevice device, int queueFamilyIndex, int queueIndex)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link> referencing an existing <db:code role="parameter">device</db:code> object.</db:para>
<db:para>This factory function is suitable for Vulkan. <db:code role="parameter">physicalDevice</db:code>, <db:code role="parameter">device</db:code> and <db:code role="parameter">queueFamilyIndex</db:code> must always be provided. <db:code role="parameter">queueIndex</db:code> is optional since the default value of 0 is often suitable.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link> does not own any native resources, it merely contains references. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
</db:section>
<db:section xml:id="fromOpenGLContext">
<db:title>[static] QQuickGraphicsDevice QQuickGraphicsDevice::fromOpenGLContext(QOpenGLContext *<db:emphasis>context</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickGraphicsDevice</db:type>
<db:methodname>fromOpenGLContext</db:methodname>
<db:methodparam>
<db:type>QOpenGLContext *</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickGraphicsDevice fromOpenGLContext(QOpenGLContext *context)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link> referencing an existing OpenGL <db:code role="parameter">context</db:code>.</db:para>
<db:para>This factory function is suitable for OpenGL.</db:para>
<db:note>
<db:para>It is up the caller to ensure that <db:code role="parameter">context</db:code> is going to be compatible and usable with the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>. Platform-specific mismatches in the associated <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link>, or threading issues due to attempting to use <db:code role="parameter">context</db:code> on multiple threads are up to the caller to avoid.</db:para>
</db:note>
</db:section>
<db:section xml:id="fromPhysicalDevice">
<db:title>[static] QQuickGraphicsDevice QQuickGraphicsDevice::fromPhysicalDevice(VkPhysicalDevice <db:emphasis>physicalDevice</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickGraphicsDevice</db:type>
<db:methodname>fromPhysicalDevice</db:methodname>
<db:methodparam>
<db:type>VkPhysicalDevice</db:type>
<db:parameter>physicalDevice</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickGraphicsDevice fromPhysicalDevice(VkPhysicalDevice physicalDevice)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link> referencing an existing <db:code role="parameter">physicalDevice</db:code>.</db:para>
<db:para>This factory function is suitable for Vulkan, particularly in combination with OpenXR.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link> does not own any native resources, it merely contains references. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QQuickGraphicsDevice::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this is a default constructed graphics device that does not reference any native objects.</db:para>
</db:section>
</db:section>
</db:article>
