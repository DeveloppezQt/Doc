<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSysInfo Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsysinfo.xml">QSysInfo</db:link> class provides information about the system.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSysInfo</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qsysinfo.xml#Sizes-enum">WordSize</db:link> specifies the size of a pointer for the platform on which the application is compiled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsysinfo.xml#Endian-enum">ByteOrder</db:link> specifies whether the platform is big-endian or little-endian.</db:para>
</db:listitem>
<db:listitem>
<db:para>WindowsVersion specifies the version of the Windows operating system on which the application is run (Windows only)</db:para>
</db:listitem>
<db:listitem>
<db:para>MacintoshVersion specifies the version of the Macintosh operating system on which the application is run (Mac only).</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Some constants are defined only on certain platforms. You can use the preprocessor symbols <db:link xlink:href="qtglobal.xml#Q_OS_WIN">Q_OS_WIN</db:link> and <db:link xlink:href="qtglobal.xml#Q_OS_OSX">Q_OS_OSX</db:link> to test that the application is compiled under Windows or OS X.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlibraryinfo.xml">QLibraryInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Endian-enum">
<db:title>enum QSysInfo::Endian</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsysinfo.xml">QSysInfo</db:link></db:emphasis>::BigEndian</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Big-endian byte order (also called Network byte order)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsysinfo.xml">QSysInfo</db:link></db:emphasis>::LittleEndian</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Little-endian byte order</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsysinfo.xml">QSysInfo</db:link></db:emphasis>::ByteOrder</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Equals BigEndian or LittleEndian, depending on the platform's byte order.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Sizes-enum">
<db:title>enum QSysInfo::Sizes</db:title>
<db:para>This enum provides platform-specific information about the sizes of data structures used by the underlying architecture.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsysinfo.xml">QSysInfo</db:link></db:emphasis>::WordSize</db:code></db:para>
</db:td>
<db:td><db:code>(sizeof(void *)&lt;&lt;3)</db:code></db:td>
<db:td>
<db:para>The size in bits of a pointer for the platform on which the application is compiled (32 or 64).</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="buildAbi">
<db:title>[static, since 5.4] QString QSysInfo::buildAbi()</db:title>
<db:para>Returns the full architecture string that Qt was compiled for. This string is useful for identifying different, incompatible builds. For example, it can be used as an identifier to request an upgrade package from a server.</db:para>
<db:para>The values returned from this function are kept stable as follows: the mandatory components of the result will not change in future versions of Qt, but optional suffixes may be added.</db:para>
<db:para>The returned value is composed of three or more parts, separated by dashes (&quot;-&quot;). They are:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Component</db:para>
</db:th>
<db:th>
<db:para>Value</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>CPU Architecture</db:para>
</db:td>
<db:td>
<db:para>The same as <db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>(), such as &quot;arm&quot;, &quot;i386&quot;, &quot;mips&quot; or &quot;x86_64&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Endianness</db:para>
</db:td>
<db:td>
<db:para>&quot;little_endian&quot; or &quot;big_endian&quot;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Word size</db:para>
</db:td>
<db:td>
<db:para>Whether it's a 32- or 64-bit application. Possible values are: &quot;llp64&quot; (Windows 64-bit), &quot;lp64&quot; (Unix 64-bit), &quot;ilp32&quot; (32-bit)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>(Optional) ABI</db:para>
</db:td>
<db:td>
<db:para>Zero or more components identifying different ABIs possible in this architecture. Currently, Qt has optional ABI components for ARM and MIPS processors: one component is the main ABI (such as &quot;eabi&quot;, &quot;o32&quot;, &quot;n32&quot;, &quot;o64&quot;); another is whether the calling convention is using hardware floating point registers (&quot;hardfloat&quot; is present).</db:para>
<db:para>Additionally, if Qt was configured with <db:code>-qreal float</db:code>, the ABI option tag &quot;qreal_float&quot; will be present. If Qt was configured with another type as qreal, that type is present after &quot;qreal_&quot;, with all characters other than letters and digits escaped by an underscore, followed by two hex digits. For example, <db:code>-qreal long double</db:code> becomes &quot;qreal_long_20double&quot;.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buildCpuArchitecture">
<db:title>[static, since 5.4] QString QSysInfo::buildCpuArchitecture()</db:title>
<db:para>Returns the architecture of the CPU that Qt was compiled for, in text format. Note that this may not match the actual CPU that the application is running on if there's an emulation layer or if the CPU supports multiple architectures (like x86-64 processors supporting i386 applications). To detect that, use <db:link xlink:href="qsysinfo.xml#currentCpuArchitecture">currentCpuArchitecture</db:link>().</db:para>
<db:para>Values returned by this function are stable and will not change over time, so applications can rely on the returned value as an identifier, except that new CPU types may be added over time.</db:para>
<db:para>Typical returned values are (note: list not exhaustive):</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>&quot;arm&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;arm64&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;i386&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;ia64&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;mips&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;mips64&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;power&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;power64&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;sparc&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;sparcv9&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;x86_64&quot;</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildAbi">QSysInfo::buildAbi</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#currentCpuArchitecture">QSysInfo::currentCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentCpuArchitecture">
<db:title>[static, since 5.4] QString QSysInfo::currentCpuArchitecture()</db:title>
<db:para>Returns the architecture of the CPU that the application is running on, in text format. Note that this function depends on what the OS will report and may not detect the actual CPU architecture if the OS hides that information or is unable to provide it. For example, a 32-bit OS running on a 64-bit CPU is usually unable to determine the CPU is actually capable of running 64-bit programs.</db:para>
<db:para>Values returned by this function are mostly stable: an attempt will be made to ensure that they stay constant over time and match the values returned by QSysInfo::builldCpuArchitecture(). However, due to the nature of the operating system functions being used, there may be discrepancies.</db:para>
<db:para>Typical returned values are (note: list not exhaustive):</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>&quot;arm&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;arm64&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;i386&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;ia64&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;mips&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;mips64&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;power&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;power64&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;sparc&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;sparcv9&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;x86_64&quot;</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#buildAbi">QSysInfo::buildAbi</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#buildCpuArchitecture">QSysInfo::buildCpuArchitecture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="kernelType">
<db:title>[static, since 5.4] QString QSysInfo::kernelType()</db:title>
<db:para>Returns the type of the operating system kernel Qt was compiled for. It's also the kernel the application is running on, unless the host operating system is running a form of compatibility or virtualization layer.</db:para>
<db:para>Values returned by this function are stable and will not change over time, so applications can rely on the returned value as an identifier, except that new OS kernel types may be added over time.</db:para>
<db:para>On Windows, this function returns the type of Windows kernel, like &quot;wince&quot; or &quot;winnt&quot;. On Unix systems, it returns the same as the output of <db:code>uname -s</db:code> (lowercased).</db:para>
<db:para>Note that this function may return surprising values: it returns &quot;linux&quot; for all operating systems running Linux (including Android), &quot;qnx&quot; for all operating systems running QNX (including BlackBerry 10), &quot;freebsd&quot; for Debian/kFreeBSD, and &quot;darwin&quot; for OS X and iOS. For information on the type of product the application is running on, see <db:link xlink:href="qsysinfo.xml#productType">productType</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileselector.xml">QFileSelector</db:link></db:member>
<db:member><db:link xlink:href="qsysinfo.xml#kernelVersion">kernelVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#productType">productType</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#productVersion">productVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#prettyProductName">prettyProductName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="kernelVersion">
<db:title>[static, since 5.4] QString QSysInfo::kernelVersion()</db:title>
<db:para>Returns the release version of the operating system kernel. On Windows, it returns the version of the NT or CE kernel. On Unix systems, including Android, BlackBerry and OS X, it returns the same as the <db:code>uname -r</db:code> command would return.</db:para>
<db:para>If the version could not be determined, this function may return an empty string.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#kernelType">kernelType</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#productType">productType</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#productVersion">productVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#prettyProductName">prettyProductName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prettyProductName">
<db:title>[static, since 5.4] QString QSysInfo::prettyProductName()</db:title>
<db:para>Returns a prettier form of <db:link xlink:href="qsysinfo.xml#productType">productType</db:link>() and <db:link xlink:href="qsysinfo.xml#productVersion">productVersion</db:link>(), containing other tokens like the operating system type, codenames and other information. The result of this function is suitable for displaying to the user, but not for long-term storage, as the string may change with updates to Qt.</db:para>
<db:para>If <db:link xlink:href="qsysinfo.xml#productType">productType</db:link>() is &quot;unknown&quot;, this function will instead use the <db:link xlink:href="qsysinfo.xml#kernelType">kernelType</db:link>() and <db:link xlink:href="qsysinfo.xml#kernelVersion">kernelVersion</db:link>() functions.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#kernelType">kernelType</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#kernelVersion">kernelVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#productType">productType</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#productVersion">productVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="productType">
<db:title>[static, since 5.4] QString QSysInfo::productType()</db:title>
<db:para>Returns the product name of the operating system this application is running in. If the application is running on some sort of emulation or virtualization layer (such as WINE on a Unix system), this function will inspect the emulation / virtualization layer.</db:para>
<db:para>Values returned by this function are stable and will not change over time, so applications can rely on the returned value as an identifier, except that new OS types may be added over time.</db:para>
<db:para><db:emphasis role="bold">Linux and Android note</db:emphasis>: this function returns &quot;android&quot; for Linux systems running Android userspace, notably when using the Bionic library. For all other Linux systems, regardless of C library being used, it tries to determine the distribution name and returns that. If determining the distribution name failed, it returns &quot;unknown&quot;.</db:para>
<db:para><db:emphasis role="bold">BlackBerry note</db:emphasis>: this function returns &quot;blackberry&quot; for QNX systems running the BlackBerry userspace, but &quot;qnx&quot; for all other QNX-based systems.</db:para>
<db:para><db:emphasis role="bold">Darwin, OS X and iOS note</db:emphasis>: this function returns &quot;osx&quot; for OS X systems, &quot;ios&quot; for iOS systems and &quot;darwin&quot; in case the system could not be determined.</db:para>
<db:para><db:emphasis role="bold">FreeBSD note</db:emphasis>: this function returns &quot;debian&quot; for Debian/kFreeBSD and &quot;unknown&quot; otherwise.</db:para>
<db:para><db:emphasis role="bold">Windows note</db:emphasis>: this function returns &quot;winphone&quot; for builds for Windows Phone, &quot;winrt&quot; for WinRT builds, &quot;wince&quot; for Windows CE and Embedded Compact builds, and &quot;windows&quot; for normal desktop builds.</db:para>
<db:para>For other Unix-type systems, this function usually returns &quot;unknown&quot;.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileselector.xml">QFileSelector</db:link></db:member>
<db:member><db:link xlink:href="qsysinfo.xml#kernelType">kernelType</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#kernelVersion">kernelVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#productVersion">productVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#prettyProductName">prettyProductName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="productVersion">
<db:title>[static, since 5.4] QString QSysInfo::productVersion()</db:title>
<db:para>Returns the product version of the operating system in string form. If the version could not be determined, this function returns &quot;unknown&quot;.</db:para>
<db:para>It will return the Android, BlackBerry, iOS, OS X, Windows full-product versions on those systems. In particular, on OS X, iOS and Windows, the returned string is similar to the macVersion() or windowsVersion() enums.</db:para>
<db:para>On Linux systems, it will try to determine the distribution version and will return that. This is also done on Debian/kFreeBSD, so this function will return Debian version in that case.</db:para>
<db:para>In all other Unix-type systems, this function always returns &quot;unknown&quot;.</db:para>
<db:note>
<db:para>The version string returned from this function is only guaranteed to be orderable on Android, BlackBerry, OS X and iOS. On Windows, some Windows versions are text (&quot;XP&quot; and &quot;Vista&quot;, for example). On Linux, the version of the distribution may jump unexpectedly, please refer to the distribution's documentation for versioning practices.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsysinfo.xml#kernelType">kernelType</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#kernelVersion">kernelVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#productType">productType</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#prettyProductName">prettyProductName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
