<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Sub-Attaq</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows Qt's ability to combine <db:link xlink:href="animation-overview.xml">the animation framework</db:link> and <db:link xlink:href="statemachine-api.xml">the state machine framework</db:link> to create a game.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the QtCore module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//Own
#include &quot;submarine.h&quot;
#include &quot;submarine_p.h&quot;
#include &quot;torpedo.h&quot;
#include &quot;pixmapitem.h&quot;
#include &quot;graphicsscene.h&quot;
#include &quot;animationmanager.h&quot;
#include &quot;qanimationstate.h&quot;

#include &lt;QtCore/QPropertyAnimation&gt;
#include &lt;QtCore/QStateMachine&gt;
#include &lt;QtCore/QFinalState&gt;
#include &lt;QtCore/QSequentialAnimationGroup&gt;

static QAbstractAnimation *setupDestroyAnimation(SubMarine *sub)
{
    QSequentialAnimationGroup *group = new QSequentialAnimationGroup(sub);
    for (int i = 1; i &lt;= 4; ++i) {
        PixmapItem *step = new PixmapItem(QString::fromLatin1(&quot;explosion/submarine/step%1&quot;).arg(i), GraphicsScene::Big, sub);
        step-&gt;setZValue(6);
        step-&gt;setOpacity(0);
        QPropertyAnimation *anim = new QPropertyAnimation(step, &quot;opacity&quot;, group);
        anim-&gt;setDuration(100);
        anim-&gt;setEndValue(1);
    }
    AnimationManager::self()-&gt;registerAnimation(group);
    return group;
}

SubMarine::SubMarine(int type, const QString &amp;name, int points) : PixmapItem(QString(&quot;submarine&quot;), GraphicsScene::Big),
    subType(type), subName(name), subPoints(points), speed(0), direction(SubMarine::None)
{
    setZValue(5);
    setTransformOriginPoint(boundingRect().center());

    graphicsRotation = new QGraphicsRotation(this);
    graphicsRotation-&gt;setAxis(Qt::YAxis);
    graphicsRotation-&gt;setOrigin(QVector3D(size().width()/2, size().height()/2, 0));
    QList&lt;QGraphicsTransform *&gt; r;
    r.append(graphicsRotation);
    setTransformations(r);

    //We setup the state machine of the submarine
    QStateMachine *machine = new QStateMachine(this);

    //This state is when the boat is moving/rotating
    QState *moving = new QState(machine);

    //This state is when the boat is moving from left to right
    MovementState *movement = new MovementState(this, moving);

    //This state is when the boat is moving from left to right
    ReturnState *rotation = new ReturnState(this, moving);

    //This is the initial state of the moving root state
    moving-&gt;setInitialState(movement);

    movement-&gt;addTransition(this, SIGNAL(subMarineStateChanged()), moving);

    //This is the initial state of the machine
    machine-&gt;setInitialState(moving);

    //End
    QFinalState *final = new QFinalState(machine);

    //If the moving animation is finished we move to the return state
    movement-&gt;addTransition(movement, SIGNAL(animationFinished()), rotation);

    //If the return animation is finished we move to the moving state
    rotation-&gt;addTransition(rotation, SIGNAL(animationFinished()), movement);

    //This state play the destroyed animation
    QAnimationState *destroyedState = new QAnimationState(machine);
    destroyedState-&gt;setAnimation(setupDestroyAnimation(this));

    //Play a nice animation when the submarine is destroyed
    moving-&gt;addTransition(this, SIGNAL(subMarineDestroyed()), destroyedState);

    //Transition to final state when the destroyed animation is finished
    destroyedState-&gt;addTransition(destroyedState, SIGNAL(animationFinished()), final);

    //The machine has finished to be executed, then the submarine is dead
    connect(machine,SIGNAL(finished()),this, SIGNAL(subMarineExecutionFinished()));

    machine-&gt;start();
}

int SubMarine::points() const
{
    return subPoints;
}

void SubMarine::setCurrentDirection(SubMarine::Movement direction)
{
    if (this-&gt;direction == direction)
        return;
    if (direction == SubMarine::Right &amp;&amp; this-&gt;direction == SubMarine::None) {
          graphicsRotation-&gt;setAngle(180);
    }
    this-&gt;direction = direction;
}

enum SubMarine::Movement SubMarine::currentDirection() const
{
    return direction;
}

void SubMarine::setCurrentSpeed(int speed)
{
    if (speed &lt; 0 || speed &gt; 3) {
        qWarning(&quot;SubMarine::setCurrentSpeed : The speed is invalid&quot;);
    }
    this-&gt;speed = speed;
    emit subMarineStateChanged();
}

int SubMarine::currentSpeed() const
{
    return speed;
}

void SubMarine::launchTorpedo(int speed)
{
    Torpedo * torp = new Torpedo();
    GraphicsScene *scene = static_cast&lt;GraphicsScene *&gt;(this-&gt;scene());
    scene-&gt;addItem(torp);
    torp-&gt;setPos(pos());
    torp-&gt;setCurrentSpeed(speed);
    torp-&gt;launch();
}

void SubMarine::destroy()
{
    emit subMarineDestroyed();
}

int SubMarine::type() const
{
    return Type;
}

</db:programlisting>
</db:article>
