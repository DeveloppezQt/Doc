<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlListReference Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> class allows the manipulation of <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> properties.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlListReference</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> allows C++ programs to read from, and assign values to a QML list property in a simple and type-safe way. A <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> can be created by passing an object and property name or through a <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> instance. These two are equivalent:</db:para>
<db:programlisting language="cpp">QQmlListReference ref1(object, &quot;children&quot;);

QQmlProperty ref2(object, &quot;children&quot;);
QQmlListReference ref2 = qvariant_cast&lt;QQmlListReference&gt;(ref2.read());
</db:programlisting>
<db:para>Not all QML list properties support all operations. A set of methods, <db:link xlink:href="qqmllistreference.xml#canAppend">canAppend</db:link>(), <db:link xlink:href="qqmllistreference.xml#canAt">canAt</db:link>(), <db:link xlink:href="qqmllistreference.xml#canClear">canClear</db:link>() and <db:link xlink:href="qqmllistreference.xml#canCount">canCount</db:link>() allow programs to query whether an operation is supported on a given property.</db:para>
<db:para>QML list properties are type-safe. Only <db:link xlink:href="qobject.xml">QObject</db:link>'s that derive from the correct base class can be assigned to the list. The <db:link xlink:href="qqmllistreference.xml#listElementType">listElementType</db:link>() method can be used to query the <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> of the <db:link xlink:href="qobject.xml">QObject</db:link> type supported. Attempting to add objects of the incorrect type to a list property will fail.</db:para>
<db:para>Like with normal lists, when accessing a list element by index, it is the callers responsibility to ensure that it does not request an out of range element using the <db:link xlink:href="qqmllistreference.xml#count">count</db:link>() method before calling <db:link xlink:href="qqmllistreference.xml#at">at</db:link>().</db:para>
<db:para>The <db:link xlink:href="qtquick-porting-qt5.xml#qtdeclarative-module-in-qt-5">Qt Quick 1</db:link> version of this class is named QDeclarativeListReference.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlListReference">
<db:title>QQmlListReference::QQmlListReference()</db:title>
<db:para>Constructs an invalid instance.</db:para>
</db:section>
<db:section xml:id="QQmlListReference-1">
<db:title>QQmlListReference::QQmlListReference(QObject *<db:emphasis>object</db:emphasis>, const char *<db:emphasis>property</db:emphasis>, QQmlEngine *<db:emphasis>engine</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> for <db:code role="parameter">object</db:code>'s <db:code role="parameter">property</db:code>. If <db:code role="parameter">property</db:code> is not a list property, an invalid <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> is created. If <db:code role="parameter">object</db:code> is destroyed after the reference is constructed, it will automatically become invalid. That is, it is safe to hold <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> instances even after <db:code role="parameter">object</db:code> is deleted.</db:para>
<db:para>Passing <db:code role="parameter">engine</db:code> is required to access some QML created list properties. If in doubt, and an engine is available, pass it.</db:para>
</db:section>
<db:section xml:id="append">
<db:title>bool QQmlListReference::append(QObject *<db:emphasis>object</db:emphasis>) const</db:title>
<db:para>Appends <db:code role="parameter">object</db:code> to the list. Returns true if the operation succeeded, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#canAppend">canAppend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="at">
<db:title>QObject *QQmlListReference::at(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the list element at <db:code role="parameter">index</db:code>, or 0 if the operation failed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#canAt">canAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canAppend">
<db:title>bool QQmlListReference::canAppend() const</db:title>
<db:para>Returns true if the list property can be appended to, otherwise false. Returns false if the reference is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canAt">
<db:title>bool QQmlListReference::canAt() const</db:title>
<db:para>Returns true if the list property can queried by index, otherwise false. Returns false if the reference is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#at">at</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canClear">
<db:title>bool QQmlListReference::canClear() const</db:title>
<db:para>Returns true if the list property can be cleared, otherwise false. Returns false if the reference is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canCount">
<db:title>bool QQmlListReference::canCount() const</db:title>
<db:para>Returns true if the list property can be queried for its element count, otherwise false. Returns false if the reference is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>bool QQmlListReference::clear() const</db:title>
<db:para>Clears the list. Returns true if the operation succeeded, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#canClear">canClear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>int QQmlListReference::count() const</db:title>
<db:para>Returns the number of objects in the list, or 0 if the operation failed.</db:para>
</db:section>
<db:section xml:id="isManipulable">
<db:title>bool QQmlListReference::isManipulable() const</db:title>
<db:para>Return true if <db:link xlink:href="qqmllistreference.xml#at">at</db:link>(), <db:link xlink:href="qqmllistreference.xml#count">count</db:link>(), <db:link xlink:href="qqmllistreference.xml#append">append</db:link>() and <db:link xlink:href="qqmllistreference.xml#clear">clear</db:link>() are implemented, so you can manipulate the list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qqmllistreference.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qqmllistreference.xml#count">count</db:link>()</db:member>
<db:member><db:link xlink:href="qqmllistreference.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qqmllistreference.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isReadable">
<db:title>bool QQmlListReference::isReadable() const</db:title>
<db:para>Return true if <db:link xlink:href="qqmllistreference.xml#at">at</db:link>() and <db:link xlink:href="qqmllistreference.xml#count">count</db:link>() are implemented, so you can access the elements.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#isManipulable">isManipulable</db:link>()</db:member>
<db:member><db:link xlink:href="qqmllistreference.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qqmllistreference.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QQmlListReference::isValid() const</db:title>
<db:para>Returns true if the instance refers to a valid list property, otherwise false.</db:para>
</db:section>
<db:section xml:id="listElementType">
<db:title>const QMetaObject *QQmlListReference::listElementType() const</db:title>
<db:para>Returns the <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> for the elements stored in the list property. Returns 0 if the reference is invalid.</db:para>
<db:para>The <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> can be used ahead of time to determine whether a given instance can be added to a list.</db:para>
</db:section>
<db:section xml:id="object">
<db:title>QObject *QQmlListReference::object() const</db:title>
<db:para>Returns the list property's object. Returns 0 if the reference is invalid.</db:para>
</db:section>
</db:section>
</db:article>
