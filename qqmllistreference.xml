<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlListReference Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> class allows the manipulation of <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> properties.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlListReference</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> allows C++ programs to read from, and assign values to a QML list property in a simple and type-safe way. A <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> can be created by passing an object and property name or through a <db:link xlink:href="qqmlproperty.xml">QQmlProperty</db:link> instance. These two are equivalent:</db:para>
<db:programlisting language="cpp">QQmlListReference ref1(object, &quot;children&quot;);

QQmlProperty ref2(object, &quot;children&quot;);
QQmlListReference ref2 = qvariant_cast&amp;lt;QQmlListReference&amp;gt;(ref2.read());
</db:programlisting>
<db:para>Not all QML list properties support all operations. A set of methods, <db:link xlink:href="qqmllistreference.xml#canAppend">canAppend</db:link>(), <db:link xlink:href="qqmllistreference.xml#canAt">canAt</db:link>(), <db:link xlink:href="qqmllistreference.xml#canClear">canClear</db:link>() and <db:link xlink:href="qqmllistreference.xml#canCount">canCount</db:link>() allow programs to query whether an operation is supported on a given property.</db:para>
<db:para>QML list properties are type-safe. Only <db:link xlink:href="qobject.xml">QObject</db:link>'s that derive from the correct base class can be assigned to the list. The <db:link xlink:href="qqmllistreference.xml#listElementType">listElementType</db:link>() method can be used to query the <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> of the <db:link xlink:href="qobject.xml">QObject</db:link> type supported. Attempting to add objects of the incorrect type to a list property will fail.</db:para>
<db:para>Like with normal lists, when accessing a list element by index, it is the callers responsibility to ensure that it does not request an out of range element using the <db:link xlink:href="qqmllistreference.xml#count">count</db:link>() method before calling <db:link xlink:href="qqmllistreference.xml#at">at</db:link>().</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlListReference">
<db:title>QQmlListReference::QQmlListReference()</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlListReference</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlListReference()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an invalid instance.</db:para>
</db:section>
<db:section xml:id="QQmlListReference-3">
<db:title>[explicit, since 6.1] QQmlListReference::QQmlListReference(const QVariant &amp;<db:emphasis>variant</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlListReference</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>variant</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlListReference(const QVariant &amp;variant)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> from a <db:link xlink:href="qvariant.xml">QVariant</db:link> <db:code role="parameter">variant</db:code> containing a <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link>. If <db:code role="parameter">variant</db:code> does not contain a list property, an invalid <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> is created. If the object owning the list property is destroyed after the reference is constructed, it will automatically become invalid. That is, it is safe to hold <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> instances even after the object is deleted.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="QQmlListReference-4">
<db:title>QQmlListReference::QQmlListReference(QObject *<db:emphasis>object</db:emphasis>, const char *<db:emphasis>property</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlListReference</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>property</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlListReference(QObject *object, const char *property)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> for <db:code role="parameter">object</db:code>'s <db:code role="parameter">property</db:code>. If <db:code role="parameter">property</db:code> is not a list property, an invalid <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> is created. If <db:code role="parameter">object</db:code> is destroyed after the reference is constructed, it will automatically become invalid. That is, it is safe to hold <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> instances even after <db:code role="parameter">object</db:code> is deleted.</db:para>
</db:section>
<db:section xml:id="append">
<db:title>bool QQmlListReference::append(QObject *<db:emphasis>object</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool append(QObject *object) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends <db:code role="parameter">object</db:code> to the list. Returns true if the operation succeeded, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#canAppend">canAppend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="at">
<db:title>QObject *QQmlListReference::at(qsizetype <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>at</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * at(qsizetype index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list element at <db:code role="parameter">index</db:code>, or 0 if the operation failed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#canAt">canAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canAppend">
<db:title>bool QQmlListReference::canAppend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canAppend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canAppend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the list property can be appended to, otherwise false. Returns false if the reference is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canAt">
<db:title>bool QQmlListReference::canAt() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canAt</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canAt() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the list property can queried by index, otherwise false. Returns false if the reference is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#at">at</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canClear">
<db:title>bool QQmlListReference::canClear() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canClear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canClear() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the list property can be cleared, otherwise false. Returns false if the reference is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canCount">
<db:title>bool QQmlListReference::canCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the list property can be queried for its element count, otherwise false. Returns false if the reference is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canRemoveLast">
<db:title>bool QQmlListReference::canRemoveLast() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canRemoveLast</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canRemoveLast() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the last item can be removed from the list property, otherwise false. Returns false if the reference is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#removeLast">removeLast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canReplace">
<db:title>bool QQmlListReference::canReplace() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canReplace</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canReplace() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if items in the list property can be replaced, otherwise false. Returns false if the reference is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#replace">replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>bool QQmlListReference::clear() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool clear() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the list. Returns true if the operation succeeded, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#canClear">canClear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>qsizetype QQmlListReference::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of objects in the list, or 0 if the operation failed.</db:para>
</db:section>
<db:section xml:id="isManipulable">
<db:title>bool QQmlListReference::isManipulable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isManipulable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isManipulable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return true if <db:link xlink:href="qqmllistreference.xml#at">at</db:link>(), <db:link xlink:href="qqmllistreference.xml#count">count</db:link>(), <db:link xlink:href="qqmllistreference.xml#append">append</db:link>(), and either <db:link xlink:href="qqmllistreference.xml#clear">clear</db:link>() or <db:link xlink:href="qqmllistreference.xml#removeLast">removeLast</db:link>() are implemented, so you can manipulate the list.</db:para>
<db:para>Mind that <db:link xlink:href="qqmllistreference.xml#replace">replace</db:link>() and <db:link xlink:href="qqmllistreference.xml#removeLast">removeLast</db:link>() can be emulated by stashing all items and rebuilding the list using <db:link xlink:href="qqmllistreference.xml#clear">clear</db:link>() and <db:link xlink:href="qqmllistreference.xml#append">append</db:link>(). Therefore, they are not required for the list to be manipulable. Furthermore, <db:link xlink:href="qqmllistreference.xml#clear">clear</db:link>() can be emulated using <db:link xlink:href="qqmllistreference.xml#removeLast">removeLast</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#isReadable">isReadable</db:link>()</db:member>
<db:member><db:link xlink:href="qqmllistreference.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qqmllistreference.xml#count">count</db:link>()</db:member>
<db:member><db:link xlink:href="qqmllistreference.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qqmllistreference.xml#clear">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qqmllistreference.xml#replace">replace</db:link>()</db:member>
<db:member><db:link xlink:href="qqmllistreference.xml#removeLast">removeLast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isReadable">
<db:title>bool QQmlListReference::isReadable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isReadable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isReadable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return true if <db:link xlink:href="qqmllistreference.xml#at">at</db:link>() and <db:link xlink:href="qqmllistreference.xml#count">count</db:link>() are implemented, so you can access the elements.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#isManipulable">isManipulable</db:link>()</db:member>
<db:member><db:link xlink:href="qqmllistreference.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qqmllistreference.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QQmlListReference::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the instance refers to a valid list property, otherwise false.</db:para>
</db:section>
<db:section xml:id="listElementType">
<db:title>const QMetaObject *QQmlListReference::listElementType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QMetaObject *</db:type>
<db:methodname>listElementType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QMetaObject * listElementType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> for the elements stored in the list property, or <db:code>nullptr</db:code> if the reference is invalid.</db:para>
<db:para>The <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> can be used ahead of time to determine whether a given instance can be added to a list. If you didn't pass an engine on construction this may return nullptr.</db:para>
</db:section>
<db:section xml:id="object">
<db:title>QObject *QQmlListReference::object() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>object</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * object() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list property's object. Returns <db:code>nullptr</db:code> if the reference is invalid.</db:para>
</db:section>
<db:section xml:id="removeLast">
<db:title>bool QQmlListReference::removeLast() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>removeLast</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeLast() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the last item in the list. Returns true if the operation succeeded, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#canRemoveLast">canRemoveLast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace">
<db:title>bool QQmlListReference::replace(qsizetype <db:emphasis>index</db:emphasis>, QObject *<db:emphasis>object</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool replace(qsizetype index, QObject *object) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the item at <db:code role="parameter">index</db:code> in the list with <db:code role="parameter">object</db:code>. Returns true if the operation succeeded, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmllistreference.xml#canReplace">canReplace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>[since 6.2] qsizetype QQmlListReference::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of objects in the list, or 0 if the operation failed.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QQmlListReference::operator==(const QQmlListReference &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QQmlListReference &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QQmlListReference &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares this <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> to <db:code role="parameter">other</db:code>, and returns <db:code>true</db:code> if they are equal. The two are only considered equal if one was created from the other via copy assignment or copy construction.</db:para>
<db:note>
<db:para>Independently created references to the same object are not considered to be equal.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QQmlListReference</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="QQmlListReference-1">
<db:title>[since 6.1] QQmlListReference::QQmlListReference(const QVariant &amp;<db:emphasis>variant</db:emphasis>, QQmlEngine *<db:emphasis>engine</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlListReference</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>variant</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlListReference(const QVariant &amp;variant, QQmlEngine *engine)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use the constructors without <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> argument instead.</db:para>
<db:para>Constructs a <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> from a <db:link xlink:href="qvariant.xml">QVariant</db:link> <db:code role="parameter">variant</db:code> containing a <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link>. If <db:code role="parameter">variant</db:code> does not contain a list property, an invalid <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> is created. If the object owning the list property is destroyed after the reference is constructed, it will automatically become invalid. That is, it is safe to hold <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> instances even after the object is deleted.</db:para>
<db:para>The <db:code role="parameter">engine</db:code> is unused.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="QQmlListReference-2">
<db:title>QQmlListReference::QQmlListReference(QObject *<db:emphasis>object</db:emphasis>, const char *<db:emphasis>property</db:emphasis>, QQmlEngine *<db:emphasis>engine</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlListReference</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>property</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlListReference(QObject *object, const char *property, QQmlEngine *engine)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use the constructors without <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> argument instead.</db:para>
<db:para>Constructs a <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> for <db:code role="parameter">object</db:code>'s <db:code role="parameter">property</db:code>. If <db:code role="parameter">property</db:code> is not a list property, an invalid <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> is created. If <db:code role="parameter">object</db:code> is destroyed after the reference is constructed, it will automatically become invalid. That is, it is safe to hold <db:link xlink:href="qqmllistreference.xml">QQmlListReference</db:link> instances even after <db:code role="parameter">object</db:code> is deleted.</db:para>
<db:para>The <db:code role="parameter">engine</db:code> is unused.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
