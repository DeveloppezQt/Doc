<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Android Platform Notes</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-emojis.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Supporting Google Emoji Font Policy"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-runtime-licensing-notes.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Android GNU C++ Run-time Licensing"/></db:extendedlink>
<db:abstract>
<db:para>Information particular to building and running Qt applications on Android.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This page contains information particular to building and running Qt applications on Android. See <db:link xlink:href="supported-platforms.xml#android-support">Supported Android Versions</db:link> for what Android versions and API levels are supported.</db:para>
<db:section xml:id="android-development-in-qt-creator">
<db:title>Android Development in Qt Creator</db:title>
<db:para>The easiest way to develop with Qt for Android is to use <db:link xlink:href="https://doc.qt.io/qtcreator/creator-developing-android.html">Qt Creator</db:link>. When you use an <db:emphasis role="bold">Android Kit</db:emphasis> with a Qt Creator project, it builds your code in addition to some Android specific files that are required for enabling Qt on Android and generating your application bundle. Qt Creator adds these files in a subdirectory of your project called <db:emphasis role="bold">android</db:emphasis>. For more information, see <db:link xlink:href="deployment-android.xml#android-package-templates">Android Package Templates</db:link>.</db:para>
</db:section>
<db:section xml:id="application-package">
<db:title>Application Package</db:title>
<db:para>On Android, apps are distributed to devices as <db:emphasis role="bold">APK</db:emphasis> packages. For distributing apps in Google Play, a different format called <db:emphasis role="bold">AAB</db:emphasis> is used instead. For more information, see <db:link xlink:href="android-publishing-to-googleplay.xml">Publishing to Google Play</db:link>.</db:para>
<db:para>Use Qt Creator to build both <db:emphasis role="bold">APK</db:emphasis> and <db:emphasis role="bold">AAB</db:emphasis> package formats, or build them manually. For more information, see <db:link xlink:href="deployment-android.xml">Deploying an Application on Android</db:link>.</db:para>
</db:section>
<db:section xml:id="plugins-and-imports-special-considerations">
<db:title>Plugins and Imports Special Considerations</db:title>
<db:para>If an application uses plugins that depend on other modules, these modules must be listed in the application's dependencies. For more information, see <db:link xlink:href="android-deploy-qt-tool.xml#dependencies-detection">Dependencies Detection</db:link>.</db:para>
</db:section>
<db:section xml:id="qt-gui-dependency">
<db:title>Qt Gui Dependency</db:title>
<db:para>Given that Android apps typically include GUI elements, the Qt for Android plugin is built mainly to provide a GUI, so it implements the various QPA abstractions. As a result, deploying a Qt for Android app is expected to involve a dependency on <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link>. Moreover, it's worth noting that Qt Creator only supports Gradle builds and deployments, meaning that command line or shell executions are not supported out of the box.</db:para>
</db:section>
<db:section xml:id="text-special-considerations">
<db:title>Text Special Considerations</db:title>
<db:para>Because of a bug in some OpenGL drivers, the mechanism used by Qt to cache text glyphs does not work as expected on all Android devices, causing text to appear scrambled. To remedy this, a workaround is in place, but it can increase memory consumption and can also affect text rendering performance. The workaround is now used by default on all devices.</db:para>
<db:para>You can disable the workaround by setting the QT_ANDROID_DISABLE_GLYPH_CACHE_WORKAROUND environment variable to <db:emphasis>1</db:emphasis> or <db:emphasis>true</db:emphasis>. However, you should do so only after verifying that text appears correctly on all targeted devices.</db:para>
</db:section>
<db:section xml:id="opengl-special-considerations">
<db:title>OpenGL Special Considerations</db:title>
<db:para>Modern devices often support OpenGL ES 3.0 or 3.1 in addition to 2.0. To get a suitable OpenGL context, set the requested version via <db:link xlink:href="qsurfaceformat.xml#setVersion">QSurfaceFormat::setVersion</db:link>().</db:para>
<db:note>
<db:para>Using OpenGL ES 3.x features will result in the application breaking on older devices that only support 2.0.</db:para>
</db:note>
</db:section>
<db:section xml:id="assets-file-system">
<db:title>Assets File System</db:title>
<db:para>Qt for Android provides a special, virtual file system which is based on the <db:link xlink:href="https://developer.android.com/guide/topics/resources/providing-resources#OriginalFiles">Android Assets mechanism</db:link>. Files that are put under the directory (<db:link xlink:href="qmake-variable-reference.xml#android-package-source-dir">ANDROID_PACKAGE_SOURCE_DIR</db:link>/assets/) are packaged as part of your application package. These can be accessed in Qt by prefixing the paths with assets:/. For more information, see <db:link xlink:href="porting-to-android.xml">Porting Qt applications to Android</db:link>.</db:para>
</db:section>
<db:section xml:id="android-supported-architectures">
<db:title>Android Supported Architectures</db:title>
<db:para>Qt for Android currently has binaries for <db:emphasis>armv7a</db:emphasis>, <db:emphasis>arm64-v8a</db:emphasis>, <db:emphasis>x86</db:emphasis> and <db:emphasis>x86-64</db:emphasis>.</db:para>
<db:para>If you want to support several different ABIs in your application in Google Play, the recommendation is to build an Application App Bundle (AAB) containing binaries for each of the ABIs. Based on your AAB, Google Play generates optimized Application Packages (APK) for each device requesting a download.</db:para>
<db:para>For more information, see <db:link xlink:href="deployment-android.xml#building-the-android-application">Building the Android Application</db:link>.</db:para>
</db:section>
<db:section xml:id="known-issues">
<db:title>Known Issues</db:title>
<db:para>Due to a bug on some devices, when you turn off predictive text with ImhNoPredictiveText, this property is ignored and predictive text is still enabled. To work around this, set the QT_ANDROID_ENABLE_WORKAROUND_TO_DISABLE_PREDICTIVE_TEXT environment variable to 1. However, one side effect is that this environment variable can cause a problem with other keyboards such as Gboard. If you use a language like Japanese, with Gboard, only a QWERTY keyboard is displayed. This environment variable is queried each time the keyboard is displayed, so it's possible to toggle the workaround on and off, as necessary.</db:para>
</db:section>
<db:section xml:id="limitations">
<db:title>Limitations</db:title>
<db:para>Some of the Qt modules might have features that are not supported on Android or have limitations. For more information, see <db:link xlink:href="https://bugreports.qt.io/browse/QTBUG-72086">QTBUG-72086</db:link>.</db:para>
</db:section>
<db:section xml:id="frequently-asked-questions">
<db:title>Frequently Asked Questions</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Should I use QtActivity or <db:link xlink:href="https://developer.android.com/reference/android/app/Activity">Android Activity</db:link> to create a custom Activity?</db:para>
<db:para>QtActivity extends Activity and implements the logic needed to load the Qt libraries or handle events and native calls between Android and Qt. In general, extending QtActivity is needed if you are using any native calls. Otherwise, extending Activity should work.</db:para>
</db:listitem>
<db:listitem>
<db:para>Should I use QtService or <db:link xlink:href="https://developer.android.com/reference/android/app/Service">Android Service</db:link>?</db:para>
<db:para>The same reasoning as QtActivity applies here. Unless you are using features that require the Qt libraries to be loaded, like native calls.</db:para>
</db:listitem>
<db:listitem>
<db:para>Can <db:link xlink:href="https://developer.android.com/guide/components/fragments">Android Fragments</db:link> be used with Qt? What is the equivalent for Fragment in Qt?</db:para>
<db:para>Android Fragments cannot be used with Qt. However, Qt offers it's own modular components and views with QML. You can combine multiple components in one QML view. For more information, see <db:link xlink:href="qtqml-index.xml">Qt QML</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
