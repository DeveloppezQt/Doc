<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>RESTful API Server</db:title>
<db:productname>QtHttpServer</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Lightweight HTTP Server Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Example of how to create a RESTful API server using the <db:link xlink:href="qhttpserver.xml">QHttpServer</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause
#ifndef UTILS_H
#define UTILS_H

#include &amp;lt;QtCore/QFile&amp;gt;
#include &amp;lt;QtCore/QJsonArray&amp;gt;
#include &amp;lt;QtCore/QJsonObject&amp;gt;
#include &amp;lt;QtCore/QList&amp;gt;
#include &amp;lt;QtCore/QPair&amp;gt;
#include &amp;lt;QtHttpServer/QtHttpServer&amp;gt;

#include &amp;lt;optional&amp;gt;

static std::optional&amp;lt;QByteArray&amp;gt; readFileToByteArray(const QString &amp;amp;path)
{
    QFile file(path);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
        return std::nullopt;

    return file.readAll();
}

static std::optional&amp;lt;QJsonArray&amp;gt; byteArrayToJsonArray(const QByteArray &amp;amp;arr)
{
    QJsonParseError err;
    const auto json = QJsonDocument::fromJson(arr, &amp;amp;err);
    if (err.error || !json.isArray())
        return std::nullopt;
    return json.array();
}

static std::optional&amp;lt;QJsonObject&amp;gt; byteArrayToJsonObject(const QByteArray &amp;amp;arr)
{
    QJsonParseError err;
    const auto json = QJsonDocument::fromJson(arr, &amp;amp;err);
    if (err.error || !json.isObject())
        return std::nullopt;
    return json.object();
}

template&amp;lt;typename T&amp;gt;
static IdMap&amp;lt;T&amp;gt; tryLoadFromFile(const FromJsonFactory&amp;lt;T&amp;gt; &amp;amp;itemFactory, const QString &amp;amp;path)
{
    const auto maybeBytes = readFileToByteArray(path);
    if (maybeBytes) {
        const auto maybeArray = byteArrayToJsonArray(*maybeBytes);
        if (maybeArray) {
            return IdMap&amp;lt;T&amp;gt;(itemFactory, *maybeArray);
        } else {
            qDebug() &amp;lt;&amp;lt; &quot;Content of &quot; &amp;lt;&amp;lt; path &amp;lt;&amp;lt; &quot; is not json array.&quot;;
        }
    } else {
        qDebug() &amp;lt;&amp;lt; &quot;Reading file &quot; &amp;lt;&amp;lt; path &amp;lt;&amp;lt; &quot; failed.&quot;;
    }
    return IdMap&amp;lt;T&amp;gt;();
}

static QByteArray getValueFromHeader(const QList&amp;lt;QPair&amp;lt;QByteArray, QByteArray&amp;gt;&amp;gt; &amp;amp;headers,
                                     QByteArrayView headerName)
{
    for (const auto &amp;amp;[key, value] : headers) {
        if (key.compare(headerName, Qt::CaseInsensitive) == 0)
            return value;
    }
    return QByteArray();
}

static std::optional&amp;lt;QString&amp;gt; getTokenFromRequest(const QHttpServerRequest &amp;amp;request)
{
    std::optional&amp;lt;QString&amp;gt; token;
    if (auto bytes = getValueFromHeader(request.headers(), &quot;token&quot;); !bytes.isEmpty()) {
        token = bytes;
    }
    return token;
}

#endif // UTILS_H

</db:programlisting>
</db:article>
