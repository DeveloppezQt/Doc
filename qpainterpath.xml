<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPainterPath Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> class provides a container for painting operations, enabling graphical shapes to be constructed and reused.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPainterPath</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPainterPath is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A painter path is an object composed of a number of graphical building blocks, such as rectangles, ellipses, lines, and curves. Building blocks can be joined in closed subpaths, for example as a rectangle or an ellipse. A closed path has coinciding start and end points. Or they can exist independently as unclosed subpaths, such as lines and curves.</db:para>
<db:para>A <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> object can be used for filling, outlining, and clipping. To generate fillable outlines for a given painter path, use the <db:link xlink:href="qpainterpathstroker.xml">QPainterPathStroker</db:link> class. The main advantage of painter paths over normal drawing operations is that complex shapes only need to be created once; then they can be drawn many times using only calls to the <db:link xlink:href="qpainter.xml#drawPath">QPainter::drawPath</db:link>() function.</db:para>
<db:para><db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> provides a collection of functions that can be used to obtain information about the path and its elements. In addition it is possible to reverse the order of the elements using the <db:link xlink:href="qpainterpath.xml#toReversed">toReversed</db:link>() function. There are also several functions to convert this painter path object into a polygon representation.</db:para>
<db:section xml:id="composing-a-qpainterpath">
<db:title>Composing a QPainterPath</db:title>
<db:para>A <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> object can be constructed as an empty path, with a given start point, or as a copy of another <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> object. Once created, lines and curves can be added to the path using the <db:link xlink:href="qpainterpath.xml#lineTo">lineTo</db:link>(), <db:link xlink:href="qpainterpath.xml#arcTo">arcTo</db:link>(), <db:link xlink:href="qpainterpath.xml#cubicTo">cubicTo</db:link>() and <db:link xlink:href="qpainterpath.xml#quadTo">quadTo</db:link>() functions. The lines and curves stretch from the <db:link xlink:href="qpainterpath.xml#currentPosition">currentPosition</db:link>() to the position passed as argument.</db:para>
<db:para>The <db:link xlink:href="qpainterpath.xml#currentPosition">currentPosition</db:link>() of the <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> object is always the end position of the last subpath that was added (or the initial start point). Use the <db:link xlink:href="qpainterpath.xml#moveTo">moveTo</db:link>() function to move the <db:link xlink:href="qpainterpath.xml#currentPosition">currentPosition</db:link>() without adding a component. The <db:link xlink:href="qpainterpath.xml#moveTo">moveTo</db:link>() function implicitly starts a new subpath, and closes the previous one. Another way of starting a new subpath is to call the <db:link xlink:href="qpainterpath.xml#closeSubpath">closeSubpath</db:link>() function which closes the current path by adding a line from the <db:link xlink:href="qpainterpath.xml#currentPosition">currentPosition</db:link>() back to the path's start position. Note that the new path will have (0, 0) as its initial <db:link xlink:href="qpainterpath.xml#currentPosition">currentPosition</db:link>().</db:para>
<db:para><db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> class also provides several convenience functions to add closed subpaths to a painter path: <db:link xlink:href="qpainterpath.xml#addEllipse">addEllipse</db:link>(), <db:link xlink:href="qpainterpath.xml#addPath">addPath</db:link>(), <db:link xlink:href="qpainterpath.xml#addRect">addRect</db:link>(), <db:link xlink:href="qpainterpath.xml#addRegion">addRegion</db:link>() and <db:link xlink:href="qpainterpath.xml#addText">addText</db:link>(). The <db:link xlink:href="qpainterpath.xml#addPolygon">addPolygon</db:link>() function adds an <db:emphasis>unclosed</db:emphasis> subpath. In fact, these functions are all collections of <db:link xlink:href="qpainterpath.xml#moveTo">moveTo</db:link>(), <db:link xlink:href="qpainterpath.xml#lineTo">lineTo</db:link>() and <db:link xlink:href="qpainterpath.xml#cubicTo">cubicTo</db:link>() operations.</db:para>
<db:para>In addition, a path can be added to the current path using the <db:link xlink:href="qpainterpath.xml#connectPath">connectPath</db:link>() function. But note that this function will connect the last element of the current path to the first element of given one by adding a line.</db:para>
<db:para>Below is a code snippet that shows how a <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> object can be used:</db:para>
<db:informaltable style="generic" width="70%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainterpath-construction.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QPainterPath path;
path.addRect(20, 20, 60, 60);

path.moveTo(0, 0);
path.cubicTo(99, 0,  50, 50,  99, 99);
path.cubicTo(0, 99,  50, 50,  0, 0);

QPainter painter(this);
painter.fillRect(0, 0, 100, 100, Qt::white);
painter.setPen(QPen(QColor(79, 106, 25), 1, Qt::SolidLine,
                    Qt::FlatCap, Qt::MiterJoin));
painter.setBrush(QColor(122, 163, 39));

painter.drawPath(path);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The painter path is initially empty when constructed. We first add a rectangle, which is a closed subpath. Then we add two bezier curves which together form a closed subpath even though they are not closed individually. Finally we draw the entire path. The path is filled using the default fill rule, <db:link xlink:href="qt.xml#FillRule-enum">Qt::OddEvenFill</db:link>. Qt provides two methods for filling paths:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qt.xml#FillRule-enum">Qt::OddEvenFill</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qt.xml#FillRule-enum">Qt::WindingFill</db:link></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qt-fillrule-oddeven.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qt-fillrule-winding.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>See the <db:link xlink:href="qt.xml#FillRule-enum">Qt::FillRule</db:link> documentation for the definition of the rules. A painter path's currently set fill rule can be retrieved using the <db:link xlink:href="qpainterpath.xml#fillRule">fillRule</db:link>() function, and altered using the <db:link xlink:href="qpainterpath.xml#setFillRule">setFillRule</db:link>() function.</db:para>
</db:section>
<db:section xml:id="qpainterpath-information">
<db:title>QPainterPath Information</db:title>
<db:para>The <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> class provides a collection of functions that returns information about the path and its elements.</db:para>
<db:para>The <db:link xlink:href="qpainterpath.xml#currentPosition">currentPosition</db:link>() function returns the end point of the last subpath that was added (or the initial start point). The <db:link xlink:href="qpainterpath.xml#elementAt">elementAt</db:link>() function can be used to retrieve the various subpath elements, the <db:emphasis>number</db:emphasis> of elements can be retrieved using the <db:link xlink:href="qpainterpath.xml#elementCount">elementCount</db:link>() function, and the <db:link xlink:href="qpainterpath.xml#isEmpty">isEmpty</db:link>() function tells whether this <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> object contains any elements at all.</db:para>
<db:para>The <db:link xlink:href="qpainterpath.xml#controlPointRect">controlPointRect</db:link>() function returns the rectangle containing all the points and control points in this path. This function is significantly faster to compute than the exact <db:link xlink:href="qpainterpath.xml#boundingRect">boundingRect</db:link>() which returns the bounding rectangle of this painter path with floating point precision.</db:para>
<db:para>Finally, <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> provides the <db:link xlink:href="qpainterpath.xml#contains">contains</db:link>() function which can be used to determine whether a given point or rectangle is inside the path, and the <db:link xlink:href="qpainterpath.xml#intersects">intersects</db:link>() function which determines if any of the points inside a given rectangle also are inside this path.</db:para>
</db:section>
<db:section xml:id="qpainterpath-conversion">
<db:title>QPainterPath Conversion</db:title>
<db:para>For compatibility reasons, it might be required to simplify the representation of a painter path: <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> provides the <db:link xlink:href="qpainterpath.xml#toFillPolygon">toFillPolygon</db:link>(), <db:link xlink:href="qpainterpath.xml#toFillPolygons">toFillPolygons</db:link>() and <db:link xlink:href="qpainterpath.xml#toSubpathPolygons">toSubpathPolygons</db:link>() functions which convert the painter path into a polygon. The <db:link xlink:href="qpainterpath.xml#toFillPolygon">toFillPolygon</db:link>() returns the painter path as one single polygon, while the two latter functions return a list of polygons.</db:para>
<db:para>The <db:link xlink:href="qpainterpath.xml#toFillPolygons">toFillPolygons</db:link>() and <db:link xlink:href="qpainterpath.xml#toSubpathPolygons">toSubpathPolygons</db:link>() functions are provided because it is usually faster to draw several small polygons than to draw one large polygon, even though the total number of points drawn is the same. The difference between the two is the <db:emphasis>number</db:emphasis> of polygons they return: The <db:link xlink:href="qpainterpath.xml#toSubpathPolygons">toSubpathPolygons</db:link>() creates one polygon for each subpath regardless of intersecting subpaths (i.e. overlapping bounding rectangles), while the <db:link xlink:href="qpainterpath.xml#toFillPolygons">toFillPolygons</db:link>() functions creates only one polygon for overlapping subpaths.</db:para>
<db:para>The <db:link xlink:href="qpainterpath.xml#toFillPolygon">toFillPolygon</db:link>() and <db:link xlink:href="qpainterpath.xml#toFillPolygons">toFillPolygons</db:link>() functions first convert all the subpaths to polygons, then uses a rewinding technique to make sure that overlapping subpaths can be filled using the correct fill rule. Note that rewinding inserts additional lines in the polygon so the outline of the fill polygon does not match the outline of the path.</db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>Qt provides the <db:link xlink:href="qtwidgets-painting-painterpaths-example.xml">Painter Paths Example</db:link> and the <db:link xlink:href="qtwidgets-painting-deform-example.xml">Vector Deformation example</db:link> which are located in Qt's example directory.</db:para>
<db:para>The <db:link xlink:href="qtwidgets-painting-painterpaths-example.xml">Painter Paths Example</db:link> shows how painter paths can be used to build complex shapes for rendering and lets the user experiment with the filling and stroking. The <db:link xlink:href="qtwidgets-painting-deform-example.xml">Vector Deformation Example</db:link> shows how to use <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> to draw text.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qtwidgets-painting-painterpaths-example.xml">Painter Paths Example</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qtwidgets-painting-deform-example.xml">Vector Deformation Example</db:link></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainterpath-example.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainterpath-demo.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml">QPainterPathStroker</db:link></db:member>
<db:member><db:link xlink:href="qpainter.xml">QPainter</db:link></db:member>
<db:member><db:link xlink:href="qregion.xml">QRegion</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-painting-painterpaths-example.xml">Painter Paths Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ElementType-enum">
<db:title>enum QPainterPath::ElementType</db:title>
<db:para>This enum describes the types of elements used to connect vertices in subpaths.</db:para>
<db:para>Note that elements added as closed subpaths using the <db:link xlink:href="qpainterpath.xml#addEllipse">addEllipse</db:link>(), <db:link xlink:href="qpainterpath.xml#addPath">addPath</db:link>(), <db:link xlink:href="qpainterpath.xml#addPolygon">addPolygon</db:link>(), <db:link xlink:href="qpainterpath.xml#addRect">addRect</db:link>(), <db:link xlink:href="qpainterpath.xml#addRegion">addRegion</db:link>() and <db:link xlink:href="qpainterpath.xml#addText">addText</db:link>() convenience functions, is actually added to the path as a collection of separate elements using the <db:link xlink:href="qpainterpath.xml#moveTo">moveTo</db:link>(), <db:link xlink:href="qpainterpath.xml#lineTo">lineTo</db:link>() and <db:link xlink:href="qpainterpath.xml#cubicTo">cubicTo</db:link>() functions.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainterpath.xml">QPainterPath</db:link></db:emphasis>::MoveToElement</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A new subpath. See also <db:link xlink:href="qpainterpath.xml#moveTo">moveTo</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainterpath.xml">QPainterPath</db:link></db:emphasis>::LineToElement</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A line. See also <db:link xlink:href="qpainterpath.xml#lineTo">lineTo</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainterpath.xml">QPainterPath</db:link></db:emphasis>::CurveToElement</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A curve. See also <db:link xlink:href="qpainterpath.xml#cubicTo">cubicTo</db:link>() and <db:link xlink:href="qpainterpath.xml#quadTo">quadTo</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpainterpath.xml">QPainterPath</db:link></db:emphasis>::CurveToDataElement</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The extra data required to describe a curve in a CurveToElement element.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#elementAt">elementAt</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#elementCount">elementCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPainterPath">
<db:title>[noexcept] QPainterPath::QPainterPath()</db:title>
<db:para>Constructs an empty <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> object.</db:para>
</db:section>
<db:section xml:id="QPainterPath-2">
<db:title>[explicit] QPainterPath::QPainterPath(const QPointF &amp;<db:emphasis>startPoint</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> object with the given <db:code role="parameter">startPoint</db:code> as its current position.</db:para>
</db:section>
<db:section xml:id="QPainterPath-1">
<db:title>QPainterPath::QPainterPath(const QPainterPath &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> object that is a copy of the given <db:code role="parameter">path</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QPainterPath">
<db:title>[noexcept] QPainterPath::~QPainterPath()</db:title>
<db:para>Destroys this <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> object.</db:para>
</db:section>
<db:section xml:id="addEllipse">
<db:title>void QPainterPath::addEllipse(const QRectF &amp;<db:emphasis>boundingRectangle</db:emphasis>)</db:title>
<db:para>Creates an ellipse within the specified <db:code role="parameter">boundingRectangle</db:code> and adds it to the painter path as a closed subpath.</db:para>
<db:para>The ellipse is composed of a clockwise curve, starting and finishing at zero degrees (the 3 o'clock position).</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainterpath-addellipse.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QLinearGradient myGradient;
QPen myPen;
QRectF boundingRectangle;

QPainterPath myPath;
myPath.addEllipse(boundingRectangle);

QPainter painter(this);
painter.setBrush(myGradient);
painter.setPen(myPen);
painter.drawPath(myPath);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#arcTo">arcTo</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawEllipse">QPainter::drawEllipse</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#composing-a-qpainterpath">Composing a QPainterPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addEllipse-1">
<db:title>[since 4.4] void QPainterPath::addEllipse(const QPointF &amp;<db:emphasis>center</db:emphasis>, qreal <db:emphasis>rx</db:emphasis>, qreal <db:emphasis>ry</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates an ellipse positioned at <db:code role="parameter">center</db:code> with radii <db:code role="parameter">rx</db:code> and <db:code role="parameter">ry</db:code>, and adds it to the painter path as a closed subpath.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="addEllipse-2">
<db:title>void QPainterPath::addEllipse(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>width</db:emphasis>, qreal <db:emphasis>height</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates an ellipse within the bounding rectangle defined by its top-left corner at (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>, and adds it to the painter path as a closed subpath.</db:para>
</db:section>
<db:section xml:id="addPath">
<db:title>void QPainterPath::addPath(const QPainterPath &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">path</db:code> to <db:emphasis>this</db:emphasis> path as a closed subpath.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#connectPath">connectPath</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#composing-a-qpainterpath">Composing a QPainterPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addPolygon">
<db:title>void QPainterPath::addPolygon(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">polygon</db:code> to the path as an (unclosed) subpath.</db:para>
<db:para>Note that the current position after the polygon has been added, is the last point in <db:code role="parameter">polygon</db:code>. To draw a line back to the first point, use the <db:link xlink:href="qpainterpath.xml#closeSubpath">closeSubpath</db:link>() function.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainterpath-addpolygon.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QLinearGradient myGradient;
QPen myPen;
QPolygonF myPolygon;

QPainterPath myPath;
myPath.addPolygon(myPolygon);

QPainter painter(this);
painter.setBrush(myGradient);
painter.setPen(myPen);
painter.drawPath(myPath);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#lineTo">lineTo</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#composing-a-qpainterpath">Composing a QPainterPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addRect">
<db:title>void QPainterPath::addRect(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">rectangle</db:code> to this path as a closed subpath.</db:para>
<db:para>The <db:code role="parameter">rectangle</db:code> is added as a clockwise set of lines. The painter path's current position after the <db:code role="parameter">rectangle</db:code> has been added is at the top-left corner of the rectangle.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainterpath-addrectangle.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QLinearGradient myGradient;
QPen myPen;
QRectF myRectangle;

QPainterPath myPath;
myPath.addRect(myRectangle);

QPainter painter(this);
painter.setBrush(myGradient);
painter.setPen(myPen);
painter.drawPath(myPath);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#addRegion">addRegion</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#lineTo">lineTo</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#composing-a-qpainterpath">Composing a QPainterPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addRect-1">
<db:title>void QPainterPath::addRect(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>width</db:emphasis>, qreal <db:emphasis>height</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds a rectangle at position (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>, as a closed subpath.</db:para>
</db:section>
<db:section xml:id="addRegion">
<db:title>void QPainterPath::addRegion(const QRegion &amp;<db:emphasis>region</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">region</db:code> to the path by adding each rectangle in the region as a separate closed subpath.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#addRect">addRect</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#composing-a-qpainterpath">Composing a QPainterPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addRoundedRect">
<db:title>[since 4.4] void QPainterPath::addRoundedRect(const QRectF &amp;<db:emphasis>rect</db:emphasis>, qreal <db:emphasis>xRadius</db:emphasis>, qreal <db:emphasis>yRadius</db:emphasis>, Qt::SizeMode <db:emphasis>mode</db:emphasis> = Qt::AbsoluteSize)</db:title>
<db:para>Adds the given rectangle <db:code role="parameter">rect</db:code> with rounded corners to the path.</db:para>
<db:para>The <db:code role="parameter">xRadius</db:code> and <db:code role="parameter">yRadius</db:code> arguments specify the radii of the ellipses defining the corners of the rounded rectangle. When <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#SizeMode-enum">Qt::RelativeSize</db:link>, <db:code role="parameter">xRadius</db:code> and <db:code role="parameter">yRadius</db:code> are specified in percentage of half the rectangle's width and height respectively, and should be in the range 0.0 to 100.0.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#addRect">addRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addRoundedRect-1">
<db:title>[since 4.4] void QPainterPath::addRoundedRect(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>, qreal <db:emphasis>xRadius</db:emphasis>, qreal <db:emphasis>yRadius</db:emphasis>, Qt::SizeMode <db:emphasis>mode</db:emphasis> = Qt::AbsoluteSize)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds the given rectangle <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code> with rounded corners to the path.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="addText">
<db:title>void QPainterPath::addText(const QPointF &amp;<db:emphasis>point</db:emphasis>, const QFont &amp;<db:emphasis>font</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">text</db:code> to this path as a set of closed subpaths created from the <db:code role="parameter">font</db:code> supplied. The subpaths are positioned so that the left end of the text's baseline lies at the specified <db:code role="parameter">point</db:code>.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainterpath-addtext.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QLinearGradient myGradient;
QPen myPen;
QFont myFont;
QPointF baseline(x, y);

QPainterPath myPath;
myPath.addText(baseline, myFont, tr(&quot;Qt&quot;));

QPainter painter(this);
painter.setBrush(myGradient);
painter.setPen(myPen);
painter.drawPath(myPath);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml#drawText">QPainter::drawText</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#composing-a-qpainterpath">Composing a QPainterPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addText-1">
<db:title>void QPainterPath::addText(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, const QFont &amp;<db:emphasis>font</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds the given <db:code role="parameter">text</db:code> to this path as a set of closed subpaths created from the <db:code role="parameter">font</db:code> supplied. The subpaths are positioned so that the left end of the text's baseline lies at the point specified by (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
</db:section>
<db:section xml:id="angleAtPercent">
<db:title>qreal QPainterPath::angleAtPercent(qreal <db:emphasis>t</db:emphasis>) const</db:title>
<db:para>Returns the angle of the path tangent at the percentage <db:code role="parameter">t</db:code>. The argument <db:code role="parameter">t</db:code> has to be between 0 and 1.</db:para>
<db:para>Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.</db:para>
<db:para>Note that similarly to the other percent methods, the percentage measurement is not linear with regards to the length if curves are present in the path. When curves are present the percentage argument is mapped to the t parameter of the Bezier equations.</db:para>
</db:section>
<db:section xml:id="arcMoveTo">
<db:title>[since 4.2] void QPainterPath::arcMoveTo(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, qreal <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Creates a move to that lies on the arc that occupies the given <db:code role="parameter">rectangle</db:code> at <db:code role="parameter">angle</db:code>.</db:para>
<db:para>Angles are specified in degrees. Clockwise arcs can be specified using negative angles.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#moveTo">moveTo</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#arcTo">arcTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="arcMoveTo-1">
<db:title>[since 4.2] void QPainterPath::arcMoveTo(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>width</db:emphasis>, qreal <db:emphasis>height</db:emphasis>, qreal <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a move to that lies on the arc that occupies the <db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>) at <db:code role="parameter">angle</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="arcTo">
<db:title>void QPainterPath::arcTo(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, qreal <db:emphasis>startAngle</db:emphasis>, qreal <db:emphasis>sweepLength</db:emphasis>)</db:title>
<db:para>Creates an arc that occupies the given <db:code role="parameter">rectangle</db:code>, beginning at the specified <db:code role="parameter">startAngle</db:code> and extending <db:code role="parameter">sweepLength</db:code> degrees counter-clockwise.</db:para>
<db:para>Angles are specified in degrees. Clockwise arcs can be specified using negative angles.</db:para>
<db:para>Note that this function connects the starting point of the arc to the current position if they are not already connected. After the arc has been added, the current position is the last point in arc. To draw a line back to the first point, use the <db:link xlink:href="qpainterpath.xml#closeSubpath">closeSubpath</db:link>() function.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainterpath-arcto.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QLinearGradient myGradient;
QPen myPen;

QPointF center, startPoint;

QPainterPath myPath;
myPath.moveTo(center);
myPath.arcTo(boundingRect, startAngle,
             sweepLength);

QPainter painter(this);
painter.setBrush(myGradient);
painter.setPen(myPen);
painter.drawPath(myPath);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#arcMoveTo">arcMoveTo</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#addEllipse">addEllipse</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawArc">QPainter::drawArc</db:link>()</db:member>
<db:member><db:link xlink:href="qpainter.xml#drawPie">QPainter::drawPie</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#composing-a-qpainterpath">Composing a QPainterPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="arcTo-1">
<db:title>void QPainterPath::arcTo(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>width</db:emphasis>, qreal <db:emphasis>height</db:emphasis>, qreal <db:emphasis>startAngle</db:emphasis>, qreal <db:emphasis>sweepLength</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates an arc that occupies the rectangle <db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>), beginning at the specified <db:code role="parameter">startAngle</db:code> and extending <db:code role="parameter">sweepLength</db:code> degrees counter-clockwise.</db:para>
</db:section>
<db:section xml:id="boundingRect">
<db:title>QRectF QPainterPath::boundingRect() const</db:title>
<db:para>Returns the bounding rectangle of this painter path as a rectangle with floating point precision.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#controlPointRect">controlPointRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closeSubpath">
<db:title>void QPainterPath::closeSubpath()</db:title>
<db:para>Closes the current subpath by drawing a line to the beginning of the subpath, automatically starting a new path. The current point of the new path is (0, 0).</db:para>
<db:para>If the subpath does not contain any elements, this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#moveTo">moveTo</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#composing-a-qpainterpath">Composing a QPainterPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connectPath">
<db:title>void QPainterPath::connectPath(const QPainterPath &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Connects the given <db:code role="parameter">path</db:code> to <db:emphasis>this</db:emphasis> path by adding a line from the last element of this path to the first element of the given path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#addPath">addPath</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#composing-a-qpainterpath">Composing a QPainterPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>[since 4.3] bool QPainterPath::contains(const QPainterPath &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the given path <db:code role="parameter">p</db:code> is contained within the current path. Returns <db:code>false</db:code> if any edges of the current path and <db:code role="parameter">p</db:code> intersect.</db:para>
<db:para>Set operations on paths will treat the paths as areas. Non-closed paths will be treated as implicitly closed.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#intersects">intersects</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-1">
<db:title>bool QPainterPath::contains(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the given <db:code role="parameter">point</db:code> is inside the path, otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#intersects">intersects</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-2">
<db:title>bool QPainterPath::contains(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the given <db:code role="parameter">rectangle</db:code> is inside the path, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="controlPointRect">
<db:title>QRectF QPainterPath::controlPointRect() const</db:title>
<db:para>Returns the rectangle containing all the points and control points in this path.</db:para>
<db:para>This function is significantly faster to compute than the exact <db:link xlink:href="qpainterpath.xml#boundingRect">boundingRect</db:link>(), and the returned rectangle is always a superset of the rectangle returned by <db:link xlink:href="qpainterpath.xml#boundingRect">boundingRect</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cubicTo">
<db:title>void QPainterPath::cubicTo(const QPointF &amp;<db:emphasis>c1</db:emphasis>, const QPointF &amp;<db:emphasis>c2</db:emphasis>, const QPointF &amp;<db:emphasis>endPoint</db:emphasis>)</db:title>
<db:para>Adds a cubic Bezier curve between the current position and the given <db:code role="parameter">endPoint</db:code> using the control points specified by <db:code role="parameter">c1</db:code>, and <db:code role="parameter">c2</db:code>.</db:para>
<db:para>After the curve is added, the current position is updated to be at the end point of the curve.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qpainterpath-cubicto.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">QLinearGradient myGradient;
QPen myPen;

QPainterPath myPath;
myPath.cubicTo(c1, c2, endPoint);

QPainter painter(this);
painter.setBrush(myGradient);
painter.setPen(myPen);
painter.drawPath(myPath);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#quadTo">quadTo</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#composing-a-qpainterpath">Composing a QPainterPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cubicTo-1">
<db:title>void QPainterPath::cubicTo(qreal <db:emphasis>c1X</db:emphasis>, qreal <db:emphasis>c1Y</db:emphasis>, qreal <db:emphasis>c2X</db:emphasis>, qreal <db:emphasis>c2Y</db:emphasis>, qreal <db:emphasis>endPointX</db:emphasis>, qreal <db:emphasis>endPointY</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds a cubic Bezier curve between the current position and the end point (<db:code role="parameter">endPointX</db:code>, <db:code role="parameter">endPointY</db:code>) with control points specified by (<db:code role="parameter">c1X</db:code>, <db:code role="parameter">c1Y</db:code>) and (<db:code role="parameter">c2X</db:code>, <db:code role="parameter">c2Y</db:code>).</db:para>
</db:section>
<db:section xml:id="currentPosition">
<db:title>QPointF QPainterPath::currentPosition() const</db:title>
<db:para>Returns the current position of the path.</db:para>
</db:section>
<db:section xml:id="elementAt">
<db:title>QPainterPath::Element QPainterPath::elementAt(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the element at the given <db:code role="parameter">index</db:code> in the painter path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#ElementType-enum">ElementType</db:link></db:member>
<db:member><db:link xlink:href="qpainterpath.xml#elementCount">elementCount</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="elementCount">
<db:title>int QPainterPath::elementCount() const</db:title>
<db:para>Returns the number of path elements in the painter path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#ElementType-enum">ElementType</db:link></db:member>
<db:member><db:link xlink:href="qpainterpath.xml#elementAt">elementAt</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fillRule">
<db:title>Qt::FillRule QPainterPath::fillRule() const</db:title>
<db:para>Returns the painter path's currently set fill rule.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#setFillRule">setFillRule</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="intersected">
<db:title>[since 4.3] QPainterPath QPainterPath::intersected(const QPainterPath &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:para>Returns a path which is the intersection of this path's fill area and <db:code role="parameter">p</db:code>'s fill area. Bezier curves may be flattened to line segments due to numerical instability of doing bezier curve intersections.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="intersects">
<db:title>[since 4.3] bool QPainterPath::intersects(const QPainterPath &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the current path intersects at any point the given path <db:code role="parameter">p</db:code>. Also returns <db:code>true</db:code> if the current path contains or is contained by any part of <db:code role="parameter">p</db:code>.</db:para>
<db:para>Set operations on paths will treat the paths as areas. Non-closed paths will be treated as implicitly closed.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="intersects-1">
<db:title>bool QPainterPath::intersects(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if any point in the given <db:code role="parameter">rectangle</db:code> intersects the path; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>There is an intersection if any of the lines making up the rectangle crosses a part of the path or if any part of the rectangle overlaps with any area enclosed by the path. This function respects the current <db:link xlink:href="qpainterpath.xml#fillRule">fillRule</db:link> to determine what is considered inside the path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QPainterPath::isEmpty() const</db:title>
<db:para>Returns <db:code>true</db:code> if either there are no elements in this path, or if the only element is a <db:link xlink:href="qpainterpath.xml#ElementType-enum">MoveToElement</db:link>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#elementCount">elementCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="length">
<db:title>qreal QPainterPath::length() const</db:title>
<db:para>Returns the length of the current path.</db:para>
</db:section>
<db:section xml:id="lineTo">
<db:title>void QPainterPath::lineTo(const QPointF &amp;<db:emphasis>endPoint</db:emphasis>)</db:title>
<db:para>Adds a straight line from the current position to the given <db:code role="parameter">endPoint</db:code>. After the line is drawn, the current position is updated to be at the end point of the line.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#addPolygon">addPolygon</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#addRect">addRect</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#composing-a-qpainterpath">Composing a QPainterPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineTo-1">
<db:title>void QPainterPath::lineTo(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Draws a line from the current position to the point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
</db:section>
<db:section xml:id="moveTo">
<db:title>void QPainterPath::moveTo(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Moves the current point to the given <db:code role="parameter">point</db:code>, implicitly starting a new subpath and closing the previous one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#closeSubpath">closeSubpath</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#composing-a-qpainterpath">Composing a QPainterPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveTo-1">
<db:title>void QPainterPath::moveTo(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Moves the current position to (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) and starts a new subpath, implicitly closing the previous path.</db:para>
</db:section>
<db:section xml:id="percentAtLength">
<db:title>qreal QPainterPath::percentAtLength(qreal <db:emphasis>len</db:emphasis>) const</db:title>
<db:para>Returns percentage of the whole path at the specified length <db:code role="parameter">len</db:code>.</db:para>
<db:para>Note that similarly to other percent methods, the percentage measurement is not linear with regards to the length, if curves are present in the path. When curves are present the percentage argument is mapped to the t parameter of the Bezier equations.</db:para>
</db:section>
<db:section xml:id="pointAtPercent">
<db:title>QPointF QPainterPath::pointAtPercent(qreal <db:emphasis>t</db:emphasis>) const</db:title>
<db:para>Returns the point at at the percentage <db:code role="parameter">t</db:code> of the current path. The argument <db:code role="parameter">t</db:code> has to be between 0 and 1.</db:para>
<db:para>Note that similarly to other percent methods, the percentage measurement is not linear with regards to the length, if curves are present in the path. When curves are present the percentage argument is mapped to the t parameter of the Bezier equations.</db:para>
</db:section>
<db:section xml:id="quadTo">
<db:title>void QPainterPath::quadTo(const QPointF &amp;<db:emphasis>c</db:emphasis>, const QPointF &amp;<db:emphasis>endPoint</db:emphasis>)</db:title>
<db:para>Adds a quadratic Bezier curve between the current position and the given <db:code role="parameter">endPoint</db:code> with the control point specified by <db:code role="parameter">c</db:code>.</db:para>
<db:para>After the curve is added, the current point is updated to be at the end point of the curve.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#cubicTo">cubicTo</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#composing-a-qpainterpath">Composing a QPainterPath</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quadTo-1">
<db:title>void QPainterPath::quadTo(qreal <db:emphasis>cx</db:emphasis>, qreal <db:emphasis>cy</db:emphasis>, qreal <db:emphasis>endPointX</db:emphasis>, qreal <db:emphasis>endPointY</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds a quadratic Bezier curve between the current point and the endpoint (<db:code role="parameter">endPointX</db:code>, <db:code role="parameter">endPointY</db:code>) with the control point specified by (<db:code role="parameter">cx</db:code>, <db:code role="parameter">cy</db:code>).</db:para>
</db:section>
<db:section xml:id="setElementPositionAt">
<db:title>[since 4.2] void QPainterPath::setElementPositionAt(int <db:emphasis>index</db:emphasis>, qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Sets the x and y coordinate of the element at index <db:code role="parameter">index</db:code> to <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="setFillRule">
<db:title>void QPainterPath::setFillRule(Qt::FillRule <db:emphasis>fillRule</db:emphasis>)</db:title>
<db:para>Sets the fill rule of the painter path to the given <db:code role="parameter">fillRule</db:code>. Qt provides two methods for filling paths:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qt.xml#FillRule-enum">Qt::OddEvenFill</db:link> (default)</db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qt.xml#FillRule-enum">Qt::WindingFill</db:link></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qt-fillrule-oddeven.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qt-fillrule-winding.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#fillRule">fillRule</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="simplified">
<db:title>[since 4.4] QPainterPath QPainterPath::simplified() const</db:title>
<db:para>Returns a simplified version of this path. This implies merging all subpaths that intersect, and returning a path containing no intersecting edges. Consecutive parallel lines will also be merged. The simplified path will always use the default fill rule, <db:link xlink:href="qt.xml#FillRule-enum">Qt::OddEvenFill</db:link>. Bezier curves may be flattened to line segments due to numerical instability of doing bezier curve intersections.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="slopeAtPercent">
<db:title>qreal QPainterPath::slopeAtPercent(qreal <db:emphasis>t</db:emphasis>) const</db:title>
<db:para>Returns the slope of the path at the percentage <db:code role="parameter">t</db:code>. The argument <db:code role="parameter">t</db:code> has to be between 0 and 1.</db:para>
<db:para>Note that similarly to other percent methods, the percentage measurement is not linear with regards to the length, if curves are present in the path. When curves are present the percentage argument is mapped to the t parameter of the Bezier equations.</db:para>
</db:section>
<db:section xml:id="subtracted">
<db:title>[since 4.3] QPainterPath QPainterPath::subtracted(const QPainterPath &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:para>Returns a path which is <db:code role="parameter">p</db:code>'s fill area subtracted from this path's fill area.</db:para>
<db:para>Set operations on paths will treat the paths as areas. Non-closed paths will be treated as implicitly closed. Bezier curves may be flattened to line segments due to numerical instability of doing bezier curve intersections.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 4.8] void QPainterPath::swap(QPainterPath &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps painter path <db:code role="parameter">other</db:code> with this painter path. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="toFillPolygon">
<db:title>QPolygonF QPainterPath::toFillPolygon(const QTransform &amp;<db:emphasis>matrix</db:emphasis>) const</db:title>
<db:para>Converts the path into a polygon using the <db:link xlink:href="qtransform.xml">QTransform</db:link> <db:code role="parameter">matrix</db:code>, and returns the polygon.</db:para>
<db:para>The polygon is created by first converting all subpaths to polygons, then using a rewinding technique to make sure that overlapping subpaths can be filled using the correct fill rule.</db:para>
<db:para>Note that rewinding inserts addition lines in the polygon so the outline of the fill polygon does not match the outline of the path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#toSubpathPolygons">toSubpathPolygons</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#toFillPolygons">toFillPolygons</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#qpainterpath-conversion">QPainterPath Conversion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toFillPolygon-1">
<db:title>QPolygonF QPainterPath::toFillPolygon(const QMatrix &amp;<db:emphasis>matrix</db:emphasis> = QMatrix()) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="toFillPolygons">
<db:title>QList&lt;QPolygonF&gt; QPainterPath::toFillPolygons(const QTransform &amp;<db:emphasis>matrix</db:emphasis>) const</db:title>
<db:para>Converts the path into a list of polygons using the <db:link xlink:href="qtransform.xml">QTransform</db:link> <db:code role="parameter">matrix</db:code>, and returns the list.</db:para>
<db:para>The function differs from the <db:link xlink:href="qpainterpath.xml#toFillPolygon">toFillPolygon</db:link>() function in that it creates several polygons. It is provided because it is usually faster to draw several small polygons than to draw one large polygon, even though the total number of points drawn is the same.</db:para>
<db:para>The toFillPolygons() function differs from the <db:link xlink:href="qpainterpath.xml#toSubpathPolygons">toSubpathPolygons</db:link>() function in that it create only polygon for subpaths that have overlapping bounding rectangles.</db:para>
<db:para>Like the <db:link xlink:href="qpainterpath.xml#toFillPolygon">toFillPolygon</db:link>() function, this function uses a rewinding technique to make sure that overlapping subpaths can be filled using the correct fill rule. Note that rewinding inserts addition lines in the polygons so the outline of the fill polygon does not match the outline of the path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#toSubpathPolygons">toSubpathPolygons</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#toFillPolygon">toFillPolygon</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#qpainterpath-conversion">QPainterPath Conversion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toFillPolygons-1">
<db:title>QList&lt;QPolygonF&gt; QPainterPath::toFillPolygons(const QMatrix &amp;<db:emphasis>matrix</db:emphasis> = QMatrix()) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="toReversed">
<db:title>QPainterPath QPainterPath::toReversed() const</db:title>
<db:para>Creates and returns a reversed copy of the path.</db:para>
<db:para>It is the order of the elements that is reversed: If a <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> is composed by calling the <db:link xlink:href="qpainterpath.xml#moveTo">moveTo</db:link>(), <db:link xlink:href="qpainterpath.xml#lineTo">lineTo</db:link>() and <db:link xlink:href="qpainterpath.xml#cubicTo">cubicTo</db:link>() functions in the specified order, the reversed copy is composed by calling <db:link xlink:href="qpainterpath.xml#cubicTo">cubicTo</db:link>(), <db:link xlink:href="qpainterpath.xml#lineTo">lineTo</db:link>() and <db:link xlink:href="qpainterpath.xml#moveTo">moveTo</db:link>().</db:para>
</db:section>
<db:section xml:id="toSubpathPolygons">
<db:title>QList&lt;QPolygonF&gt; QPainterPath::toSubpathPolygons(const QTransform &amp;<db:emphasis>matrix</db:emphasis>) const</db:title>
<db:para>Converts the path into a list of polygons using the <db:link xlink:href="qtransform.xml">QTransform</db:link> <db:code role="parameter">matrix</db:code>, and returns the list.</db:para>
<db:para>This function creates one polygon for each subpath regardless of intersecting subpaths (i.e. overlapping bounding rectangles). To make sure that such overlapping subpaths are filled correctly, use the <db:link xlink:href="qpainterpath.xml#toFillPolygons">toFillPolygons</db:link>() function instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#toFillPolygons">toFillPolygons</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#toFillPolygon">toFillPolygon</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#qpainterpath-conversion">QPainterPath Conversion</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toSubpathPolygons-1">
<db:title>QList&lt;QPolygonF&gt; QPainterPath::toSubpathPolygons(const QMatrix &amp;<db:emphasis>matrix</db:emphasis> = QMatrix()) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="translate">
<db:title>[since 4.6] void QPainterPath::translate(qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>)</db:title>
<db:para>Translates all elements in the path by (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>).</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#translated">translated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate-1">
<db:title>[since 4.6] void QPainterPath::translate(const QPointF &amp;<db:emphasis>offset</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Translates all elements in the path by the given <db:code role="parameter">offset</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#translated">translated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translated">
<db:title>[since 4.6] QPainterPath QPainterPath::translated(qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>) const</db:title>
<db:para>Returns a copy of the path that is translated by (<db:code role="parameter">dx</db:code>, <db:code role="parameter">dy</db:code>).</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translated-1">
<db:title>[since 4.6] QPainterPath QPainterPath::translated(const QPointF &amp;<db:emphasis>offset</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a copy of the path that is translated by the given <db:code role="parameter">offset</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#translate">translate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="united">
<db:title>[since 4.3] QPainterPath QPainterPath::united(const QPainterPath &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:para>Returns a path which is the union of this path's fill area and <db:code role="parameter">p</db:code>'s fill area.</db:para>
<db:para>Set operations on paths will treat the paths as areas. Non-closed paths will be treated as implicitly closed. Bezier curves may be flattened to line segments due to numerical instability of doing bezier curve intersections.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#intersected">intersected</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#subtracted">subtracted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QPainterPath::operator!=(const QPainterPath &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this painter path differs from the given <db:code role="parameter">path</db:code>.</db:para>
<db:para>Note that comparing paths may involve a per element comparison which can be slow for complex paths.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-and">
<db:title>[since 4.5] QPainterPath QPainterPath::operator&amp;(const QPainterPath &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns the intersection of this path and the <db:code role="parameter">other</db:code> path.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#intersected">intersected</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#united">united</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator-7c">operator|</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-and-eq">
<db:title>[since 4.5] QPainterPath &amp;QPainterPath::operator&amp;=(const QPainterPath &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Intersects this path with <db:code role="parameter">other</db:code> and returns a reference to this path.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#intersected">intersected</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator-and">operator&amp;</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator-7c-eq">operator|=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b">
<db:title>[since 4.5] QPainterPath QPainterPath::operator+(const QPainterPath &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns the union of this path and the <db:code role="parameter">other</db:code> path. This function is equivalent to operator|().</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#united">united</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator-">operator-</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>[since 4.5] QPainterPath &amp;QPainterPath::operator+=(const QPainterPath &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Unites this path with <db:code role="parameter">other</db:code>, and returns a reference to this path. This is equivalent to operator|=().</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#united">united</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator-2b">operator+</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>[since 4.5] QPainterPath QPainterPath::operator-(const QPainterPath &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Subtracts the <db:code role="parameter">other</db:code> path from a copy of this path, and returns the copy.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#subtracted">subtracted</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--eq">
<db:title>[since 4.5] QPainterPath &amp;QPainterPath::operator-=(const QPainterPath &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Subtracts <db:code role="parameter">other</db:code> from this path, and returns a reference to this path.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#subtracted">subtracted</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator-">operator-</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[default, since 5.2] QPainterPath &amp;QPainterPath::operator=(QPainterPath &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QPainterPath &amp;QPainterPath::operator=(const QPainterPath &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Assigns the given <db:code role="parameter">path</db:code> to this painter path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#QPainterPath">QPainterPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QPainterPath::operator==(const QPainterPath &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this painterpath is equal to the given <db:code role="parameter">path</db:code>.</db:para>
<db:para>Note that comparing paths may involve a per element comparison which can be slow for complex paths.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c">
<db:title>[since 4.5] QPainterPath QPainterPath::operator|(const QPainterPath &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns the union of this path and the <db:code role="parameter">other</db:code> path.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#united">united</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator-7c-eq">operator|=</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#intersected">intersected</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator-and">operator&amp;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c-eq">
<db:title>[since 4.5] QPainterPath &amp;QPainterPath::operator|=(const QPainterPath &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Unites this path with <db:code role="parameter">other</db:code> and returns a reference to this path.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#united">united</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator-7c">operator|</db:link>()</db:member>
<db:member><db:link xlink:href="qpainterpath.xml#operator-and-eq">operator&amp;=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QPainterPath &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Writes the given painter <db:code role="parameter">path</db:code> to the given <db:code role="parameter">stream</db:code>, and returns a reference to the <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QPainterPath &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Reads a painter path from the given <db:code role="parameter">stream</db:code> into the specified <db:code role="parameter">path</db:code>, and returns a reference to the <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QPainterPath</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="addRoundRect">
<db:title>[deprecated] void QPainterPath::addRoundRect(const QRectF &amp;<db:emphasis>r</db:emphasis>, int <db:emphasis>xRnd</db:emphasis>, int <db:emphasis>yRnd</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Adds a rectangle <db:code role="parameter">r</db:code> with rounded corners to the path.</db:para>
<db:para>The <db:code role="parameter">xRnd</db:code> and <db:code role="parameter">yRnd</db:code> arguments specify how rounded the corners should be. 0 is angled corners, 99 is maximum roundedness.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#addRoundedRect">addRoundedRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addRoundRect-1">
<db:title>[since 4.3, deprecated] void QPainterPath::addRoundRect(const QRectF &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>roundness</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds a rounded rectangle, <db:code role="parameter">rect</db:code>, to the path.</db:para>
<db:para>The <db:code role="parameter">roundness</db:code> argument specifies uniform roundness for the rectangle. Vertical and horizontal roundness factors will be adjusted accordingly to act uniformly around both axes. Use this method if you want a rectangle equally rounded across both the X and Y axis.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#addRoundedRect">addRoundedRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addRoundRect-2">
<db:title>[since 4.3, deprecated] void QPainterPath::addRoundRect(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>width</db:emphasis>, qreal <db:emphasis>height</db:emphasis>, int <db:emphasis>roundness</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds a rounded rectangle to the path, defined by the coordinates <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> with the specified <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
<db:para>The <db:code role="parameter">roundness</db:code> argument specifies uniform roundness for the rectangle. Vertical and horizontal roundness factors will be adjusted accordingly to act uniformly around both axes. Use this method if you want a rectangle equally rounded across both the X and Y axis.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#addRoundedRect">addRoundedRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addRoundRect-3">
<db:title>[deprecated] void QPainterPath::addRoundRect(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>, int <db:emphasis>xRnd</db:emphasis>, int <db:emphasis>yRnd</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds a rectangle with rounded corners to the path. The rectangle is constructed from <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, and the width and height <db:code role="parameter">w</db:code> and <db:code role="parameter">h</db:code>.</db:para>
<db:para>The <db:code role="parameter">xRnd</db:code> and <db:code role="parameter">yRnd</db:code> arguments specify how rounded the corners should be. 0 is angled corners, 99 is maximum roundedness.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#addRoundedRect">addRoundedRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subtractedInverted">
<db:title>[since 4.3, deprecated] QPainterPath QPainterPath::subtractedInverted(const QPainterPath &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qpainterpath.xml#subtracted">subtracted</db:link>() instead.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpath.xml#subtracted">subtracted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
