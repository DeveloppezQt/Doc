<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPrintPreviewWidget Class</db:title>
<db:productname>QtPrintSupport</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Print Support Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link> class provides a widget for previewing page layouts for printer output.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPrintPreviewWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS PrintSupport)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::PrintSupport)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += printsupport</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPrintPreviewWidget is part of <db:simplelist><db:member><db:link xlink:href="printing.xml">Printer and Printing APIs</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qprintpreviewdialog.xml">QPrintPreviewDialog</db:link> uses a <db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link> internally, and the purpose of <db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link> is to make it possible to embed the preview into other widgets. It also makes it possible to build a different user interface around it than the default one provided with <db:link xlink:href="qprintpreviewdialog.xml">QPrintPreviewDialog</db:link>.</db:para>
<db:para>Using <db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link> is straightforward:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Create the <db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link></db:para>
<db:para>Construct the <db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link> either by passing in an existing <db:link xlink:href="qprinter.xml">QPrinter</db:link> object, or have <db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link> create a default constructed <db:link xlink:href="qprinter.xml">QPrinter</db:link> object for you.</db:para>
</db:listitem>
<db:listitem>
<db:para>Connect the <db:link xlink:href="qprintpreviewwidget.xml#paintRequested">paintRequested</db:link>() signal to a slot.</db:para>
<db:para>When the widget needs to generate a set of preview pages, a <db:link xlink:href="qprintpreviewwidget.xml#paintRequested">paintRequested</db:link>() signal will be emitted from the widget. Connect a slot to this signal, and draw onto the <db:link xlink:href="qprinter.xml">QPrinter</db:link> passed in as a signal parameter. Call <db:link xlink:href="qprinter.xml#newPage">QPrinter::newPage</db:link>(), to start a new page in the preview.</db:para>
</db:listitem>
</db:orderedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:member>
<db:member><db:link xlink:href="qprintdialog.xml">QPrintDialog</db:link></db:member>
<db:member><db:link xlink:href="qpagesetupdialog.xml">QPageSetupDialog</db:link></db:member>
<db:member><db:link xlink:href="qprintpreviewdialog.xml">QPrintPreviewDialog</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ViewMode-enum">
<db:title>enum QPrintPreviewWidget::ViewMode</db:title>
<db:enumsynopsis>
<db:enumname>ViewMode</db:enumname>
<db:enumitem>
<db:enumidentifier>SinglePageView</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FacingPagesView</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AllPagesView</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is used to describe the view mode of the preview widget.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link></db:emphasis>::SinglePageView</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A mode where single pages in the preview is viewed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link></db:emphasis>::FacingPagesView</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A mode where the facing pages in the preview is viewed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link></db:emphasis>::AllPagesView</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A view mode where all the pages in the preview is viewed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ZoomMode-enum">
<db:title>enum QPrintPreviewWidget::ZoomMode</db:title>
<db:enumsynopsis>
<db:enumname>ZoomMode</db:enumname>
<db:enumitem>
<db:enumidentifier>CustomZoom</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FitToWidth</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FitInView</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is used to describe zoom mode of the preview widget.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link></db:emphasis>::CustomZoom</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The zoom is set to a custom zoom value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link></db:emphasis>::FitToWidth</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This mode fits the current page to the width of the view.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link></db:emphasis>::FitInView</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This mode fits the current page inside the view.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPrintPreviewWidget">
<db:title>[explicit] QPrintPreviewWidget::QPrintPreviewWidget(QPrinter *<db:emphasis>printer</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = Qt::WindowFlags())</db:title>
<db:constructorsynopsis>
<db:methodname>QPrintPreviewWidget</db:methodname>
<db:methodparam>
<db:type>QPrinter *</db:type>
<db:parameter>printer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WindowFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::WindowFlags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPrintPreviewWidget(QPrinter *printer, QWidget *parent, Qt::WindowFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link> based on <db:code role="parameter">printer</db:code> and with <db:code role="parameter">parent</db:code> as the parent widget. The widget flags <db:code role="parameter">flags</db:code> are passed on to the <db:link xlink:href="qwidget.xml">QWidget</db:link> constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#windowFlags-prop">QWidget::setWindowFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPrintPreviewWidget-1">
<db:title>[explicit] QPrintPreviewWidget::QPrintPreviewWidget(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = Qt::WindowFlags())</db:title>
<db:constructorsynopsis>
<db:methodname>QPrintPreviewWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WindowFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::WindowFlags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPrintPreviewWidget(QWidget *parent, Qt::WindowFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This will cause <db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link> to create an internal, default constructed <db:link xlink:href="qprinter.xml">QPrinter</db:link> object, which will be used to generate the preview.</db:para>
</db:section>
<db:section xml:id="dtor.QPrintPreviewWidget">
<db:title>[virtual] QPrintPreviewWidget::~QPrintPreviewWidget()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPrintPreviewWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPrintPreviewWidget()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qprintpreviewwidget.xml">QPrintPreviewWidget</db:link>.</db:para>
</db:section>
<db:section xml:id="currentPage">
<db:title>int QPrintPreviewWidget::currentPage() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>currentPage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int currentPage() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the currently viewed page in the preview.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprintpreviewwidget.xml#setCurrentPage">setCurrentPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fitInView">
<db:title>void QPrintPreviewWidget::fitInView()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fitInView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fitInView()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience function and is the same as calling <db:code>setZoomMode(QPrintPreviewWidget::FitInView)</db:code>.</db:para>
</db:section>
<db:section xml:id="fitToWidth">
<db:title>void QPrintPreviewWidget::fitToWidth()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fitToWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fitToWidth()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience function and is the same as calling <db:code>setZoomMode(QPrintPreviewWidget::FitToWidth)</db:code>.</db:para>
</db:section>
<db:section xml:id="orientation">
<db:title>QPageLayout::Orientation QPrintPreviewWidget::orientation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPageLayout::Orientation</db:type>
<db:methodname>orientation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPageLayout::Orientation orientation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current orientation of the preview. This value is obtained from the <db:link xlink:href="qprinter.xml">QPrinter</db:link> object associated with the preview.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprintpreviewwidget.xml#setOrientation">setOrientation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pageCount">
<db:title>int QPrintPreviewWidget::pageCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>pageCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int pageCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of pages in the preview.</db:para>
</db:section>
<db:section xml:id="paintRequested">
<db:title>void QPrintPreviewWidget::paintRequested(QPrinter *<db:emphasis>printer</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>paintRequested</db:methodname>
<db:methodparam>
<db:type>QPrinter *</db:type>
<db:parameter>printer</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintRequested(QPrinter *printer)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the preview widget needs to generate a set of preview pages. <db:code role="parameter">printer</db:code> is the printer associated with this preview widget.</db:para>
</db:section>
<db:section xml:id="previewChanged">
<db:title>void QPrintPreviewWidget::previewChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>previewChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void previewChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the preview widget has changed some internal state, such as the orientation.</db:para>
</db:section>
<db:section xml:id="print">
<db:title>void QPrintPreviewWidget::print()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>print</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void print()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Prints the preview to the printer associated with the preview.</db:para>
</db:section>
<db:section xml:id="setAllPagesViewMode">
<db:title>void QPrintPreviewWidget::setAllPagesViewMode()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAllPagesViewMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAllPagesViewMode()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience function and is the same as calling <db:code>setViewMode(QPrintPreviewWidget::AllPagesView)</db:code>.</db:para>
</db:section>
<db:section xml:id="setCurrentPage">
<db:title>void QPrintPreviewWidget::setCurrentPage(int <db:emphasis>page</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCurrentPage</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>page</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCurrentPage(int page)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current page in the preview. This will cause the view to skip to the beginning of <db:code role="parameter">page</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprintpreviewwidget.xml#currentPage">currentPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFacingPagesViewMode">
<db:title>void QPrintPreviewWidget::setFacingPagesViewMode()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFacingPagesViewMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFacingPagesViewMode()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience function and is the same as calling <db:code>setViewMode(QPrintPreviewWidget::FacingPagesView)</db:code>.</db:para>
</db:section>
<db:section xml:id="setLandscapeOrientation">
<db:title>void QPrintPreviewWidget::setLandscapeOrientation()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLandscapeOrientation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLandscapeOrientation()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience function and is the same as calling <db:code>setOrientation(QPageLayout::Landscape)</db:code>.</db:para>
</db:section>
<db:section xml:id="setOrientation">
<db:title>void QPrintPreviewWidget::setOrientation(QPageLayout::Orientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOrientation</db:methodname>
<db:methodparam>
<db:type>QPageLayout::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOrientation(QPageLayout::Orientation orientation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current orientation to <db:code role="parameter">orientation</db:code>. This value will be set on the <db:link xlink:href="qprinter.xml">QPrinter</db:link> object associated with the preview.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprintpreviewwidget.xml#orientation">orientation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPortraitOrientation">
<db:title>void QPrintPreviewWidget::setPortraitOrientation()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPortraitOrientation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPortraitOrientation()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience function and is the same as calling <db:code>setOrientation(QPageLayout::Portrait)</db:code>.</db:para>
</db:section>
<db:section xml:id="setSinglePageViewMode">
<db:title>void QPrintPreviewWidget::setSinglePageViewMode()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSinglePageViewMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSinglePageViewMode()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience function and is the same as calling <db:code>setViewMode(QPrintPreviewWidget::SinglePageView)</db:code>.</db:para>
</db:section>
<db:section xml:id="setViewMode">
<db:title>void QPrintPreviewWidget::setViewMode(QPrintPreviewWidget::ViewMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setViewMode</db:methodname>
<db:methodparam>
<db:type>QPrintPreviewWidget::ViewMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setViewMode(QPrintPreviewWidget::ViewMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the view mode to <db:code role="parameter">mode</db:code>. The default view mode is <db:link xlink:href="qprintpreviewwidget.xml#ViewMode-enum">SinglePageView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprintpreviewwidget.xml#viewMode">viewMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>[override virtual] void QPrintPreviewWidget::setVisible(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setVisible</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>visible</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVisible(bool visible) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#visible-prop" role="property">QWidget::visible</db:link>.</db:para>
</db:section>
<db:section xml:id="setZoomFactor">
<db:title>void QPrintPreviewWidget::setZoomFactor(qreal <db:emphasis>factor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setZoomFactor</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setZoomFactor(qreal factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the zoom factor of the view to <db:code role="parameter">factor</db:code>. For example, a value of 1.0 indicates an unscaled view, which is approximately the size the view will have on paper. A value of 0.5 will halve the size of the view, while a value of 2.0 will double the size of the view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprintpreviewwidget.xml#zoomFactor">zoomFactor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setZoomMode">
<db:title>void QPrintPreviewWidget::setZoomMode(QPrintPreviewWidget::ZoomMode <db:emphasis>zoomMode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setZoomMode</db:methodname>
<db:methodparam>
<db:type>QPrintPreviewWidget::ZoomMode</db:type>
<db:parameter>zoomMode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setZoomMode(QPrintPreviewWidget::ZoomMode zoomMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the zoom mode to <db:code role="parameter">zoomMode</db:code>. The default zoom mode is <db:link xlink:href="qprintpreviewwidget.xml#ZoomMode-enum">FitInView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprintpreviewwidget.xml#zoomMode">zoomMode</db:link>()</db:member>
<db:member><db:link xlink:href="qprintpreviewwidget.xml#viewMode">viewMode</db:link>()</db:member>
<db:member><db:link xlink:href="qprintpreviewwidget.xml#setViewMode">setViewMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updatePreview">
<db:title>void QPrintPreviewWidget::updatePreview()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>updatePreview</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updatePreview()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function updates the preview, which causes the <db:link xlink:href="qprintpreviewwidget.xml#paintRequested">paintRequested</db:link>() signal to be emitted.</db:para>
</db:section>
<db:section xml:id="viewMode">
<db:title>QPrintPreviewWidget::ViewMode QPrintPreviewWidget::viewMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPrintPreviewWidget::ViewMode</db:type>
<db:methodname>viewMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPrintPreviewWidget::ViewMode viewMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current view mode. The default view mode is <db:link xlink:href="qprintpreviewwidget.xml#ViewMode-enum">SinglePageView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprintpreviewwidget.xml#setViewMode">setViewMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="zoomFactor">
<db:title>qreal QPrintPreviewWidget::zoomFactor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>zoomFactor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal zoomFactor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the zoom factor of the view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprintpreviewwidget.xml#setZoomFactor">setZoomFactor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="zoomIn">
<db:title>void QPrintPreviewWidget::zoomIn(qreal <db:emphasis>factor</db:emphasis> = 1.1)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>zoomIn</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>factor</db:parameter>
<db:initializer>1.1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void zoomIn(qreal factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Zooms the current view in by <db:code role="parameter">factor</db:code>. The default value for <db:code role="parameter">factor</db:code> is 1.1, which means the view will be scaled up by 10%.</db:para>
</db:section>
<db:section xml:id="zoomMode">
<db:title>QPrintPreviewWidget::ZoomMode QPrintPreviewWidget::zoomMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPrintPreviewWidget::ZoomMode</db:type>
<db:methodname>zoomMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPrintPreviewWidget::ZoomMode zoomMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current zoom mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprintpreviewwidget.xml#setZoomMode">setZoomMode</db:link>()</db:member>
<db:member><db:link xlink:href="qprintpreviewwidget.xml#viewMode">viewMode</db:link>()</db:member>
<db:member><db:link xlink:href="qprintpreviewwidget.xml#setViewMode">setViewMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="zoomOut">
<db:title>void QPrintPreviewWidget::zoomOut(qreal <db:emphasis>factor</db:emphasis> = 1.1)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>zoomOut</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>factor</db:parameter>
<db:initializer>1.1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void zoomOut(qreal factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Zooms the current view out by <db:code role="parameter">factor</db:code>. The default value for <db:code role="parameter">factor</db:code> is 1.1, which means the view will be scaled down by 10%.</db:para>
</db:section>
</db:section>
</db:article>
