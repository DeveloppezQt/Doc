<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>OpenGL Window Example</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to create a minimal <db:link xlink:href="qwindow.xml">QWindow</db:link> based application for the purpose of using OpenGL.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:alt>Screenshot of the OpenGLWindow example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/openglwindow-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para>This is a low level example of how to use <db:link xlink:href="qwindow.xml">QWindow</db:link> with OpenGL. In practice you should consider using the higher level <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> class.</db:para>
</db:note>
<db:section xml:id="openglwindow-super-class">
<db:title>OpenGLWindow Super Class</db:title>
<db:para>Our OpenGLWindow class acts as an API which is then subclassed to do the actual rendering. It has functions to make a request for render() to be called, either immediately with renderNow() or as soon as the event loop has finished processing the current batch of events with renderLater(). The OpenGLWindow subclass can either reimplement render() for OpenGL based rendering, or render(<db:link xlink:href="qpainter.xml">QPainter</db:link> *) for rendering with a <db:link xlink:href="qpainter.xml">QPainter</db:link>. Use OpenGLWindow::setAnimating(true) for render() to be called at the vertical refresh rate, assuming vertical sync is enabled in the underlying OpenGL drivers.</db:para>
<db:para>In the class that does the OpenGL rendering you will typically want to inherit from <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link>, as our OpenGLWindow does, in order to get platform independent access to OpenGL ES 2.0 functions. By inheriting from <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link> the OpenGL functions it contains will get precedence, and you will not have to worry about resolving those functions if you want your application to work with OpenGL as well as OpenGL ES 2.0.</db:para>
<db:programlisting language="cpp">class OpenGLWindow : public QWindow, protected QOpenGLFunctions
{
    Q_OBJECT
public:
    explicit OpenGLWindow(QWindow *parent = nullptr);
    ~OpenGLWindow();

    virtual void render(QPainter *painter);
    virtual void render();

    virtual void initialize();

    void setAnimating(bool animating);

public slots:
    void renderLater();
    void renderNow();

protected:
    bool event(QEvent *event) override;

    void exposeEvent(QExposeEvent *event) override;

private:
    bool m_animating = false;

    QOpenGLContext *m_context = nullptr;
    QOpenGLPaintDevice *m_device = nullptr;
};
</db:programlisting>
<db:para>The window's surface type must be set to <db:link xlink:href="qsurface.xml#SurfaceType-enum">QSurface::OpenGLSurface</db:link> to indicate that the window is to be used for OpenGL rendering and not for rendering raster content with <db:link xlink:href="qpainter.xml">QPainter</db:link> using a <db:link xlink:href="qbackingstore.xml">QBackingStore</db:link>.</db:para>
<db:programlisting language="cpp">OpenGLWindow::OpenGLWindow(QWindow *parent)
    : QWindow(parent)
{
    setSurfaceType(QWindow::OpenGLSurface);
}
</db:programlisting>
<db:para>Any OpenGL initialization needed can be done by overriding the initialize() function, which is called once before the first call to render(), with a valid current <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>. As can be seen in the following code snippet, the default render(<db:link xlink:href="qpainter.xml">QPainter</db:link> *) and initialize() implementations are empty, whereas the default render() implementation initializes a <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link> and then calls into render(<db:link xlink:href="qpainter.xml">QPainter</db:link> *).</db:para>
<db:programlisting language="cpp">void OpenGLWindow::render(QPainter *painter)
{
    Q_UNUSED(painter);
}

void OpenGLWindow::initialize()
{
}

void OpenGLWindow::render()
{
    if (!m_device)
        m_device = new QOpenGLPaintDevice;

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);

    m_device-&amp;gt;setSize(size() * devicePixelRatio());
    m_device-&amp;gt;setDevicePixelRatio(devicePixelRatio());

    QPainter painter(m_device);
    render(&amp;amp;painter);
}
</db:programlisting>
<db:para>The renderLater() function simply calls <db:link xlink:href="qwindow.xml#requestUpdate">QWindow::requestUpdate</db:link>() to schedule an update for when the system is ready to repaint.</db:para>
<db:para>We also call renderNow() when we get an expose event. The exposeEvent() is the notification to the window that its exposure, meaning visibility, on the screen has changed. When the expose event is received you can query <db:link xlink:href="qwindow.xml#isExposed">QWindow::isExposed</db:link>() to find out whether or not the window is currently exposed. Do not render to or call <db:link xlink:href="qopenglcontext.xml#swapBuffers">QOpenGLContext::swapBuffers</db:link>() on a window before it has received its first expose event, as before then its final size might be unknown, and in addition what is rendered might not even end up on the screen.</db:para>
<db:programlisting language="cpp">void OpenGLWindow::renderLater()
{
    requestUpdate();
}

bool OpenGLWindow::event(QEvent *event)
{
    switch (event-&amp;gt;type()) {
    case QEvent::UpdateRequest:
        renderNow();
        return true;
    default:
        return QWindow::event(event);
    }
}

void OpenGLWindow::exposeEvent(QExposeEvent *event)
{
    Q_UNUSED(event);

    if (isExposed())
        renderNow();
}
</db:programlisting>
<db:para>In renderNow() we return if we are not currently exposed, in which case rendering is delayed until we actually get an expose event. If we have not yet done so, we create the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> with the same <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> as was set on the OpenGLWindow, and call initialize() for the sake of the sub class, and initializeOpenGLFunctions() in order for the <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link> super class to be associated with the correct <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>. In any case we make the context current by calling <db:link xlink:href="qopenglcontext.xml#makeCurrent">QOpenGLContext::makeCurrent</db:link>(), call render() to do the actual rendering, and finally we schedule for the rendered contents to be made visible by calling <db:link xlink:href="qopenglcontext.xml#swapBuffers">QOpenGLContext::swapBuffers</db:link>() with the OpenGLWindow as parameter.</db:para>
<db:para>Once the rendering of a frame using an OpenGL context is initiated by calling <db:link xlink:href="qopenglcontext.xml#makeCurrent">QOpenGLContext::makeCurrent</db:link>(), giving the surface on which to render as a parameter, OpenGL commands can be issued. The commands can be issued either directly by including &lt;qopengl.h&gt;, which also includes the system's OpenGL headers, or as by using <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link>, which can either be inherited from for convenience, or accessed using <db:link xlink:href="qopenglcontext.xml#functions">QOpenGLContext::functions</db:link>(). <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link> gives access to all the OpenGL ES 2.0 level OpenGL calls that are not already standard in both OpenGL ES 2.0 and desktop OpenGL. For more information about the OpenGL and OpenGL ES APIs, refer to the official <db:link xlink:href="http://www.opengl.org/registry/">OpenGL Registry</db:link> and <db:link xlink:href="http://www.khronos.org/registry/gles/">Khronos OpenGL ES API Registry</db:link>.</db:para>
<db:para>If animation has been enabled with OpenGLWindow::setAnimating(true), we call renderLater() to schedule another update request.</db:para>
<db:programlisting language="cpp">void OpenGLWindow::renderNow()
{
    if (!isExposed())
        return;

    bool needsInitialize = false;

    if (!m_context) {
        m_context = new QOpenGLContext(this);
        m_context-&amp;gt;setFormat(requestedFormat());
        m_context-&amp;gt;create();

        needsInitialize = true;
    }

    m_context-&amp;gt;makeCurrent(this);

    if (needsInitialize) {
        initializeOpenGLFunctions();
        initialize();
    }

    render();

    m_context-&amp;gt;swapBuffers(this);

    if (m_animating)
        renderLater();
}
</db:programlisting>
<db:para>Enabling animation also schedules an update request as shown in the following code snippet.</db:para>
<db:programlisting language="cpp">void OpenGLWindow::setAnimating(bool animating)
{
    m_animating = animating;

    if (animating)
        renderLater();
}
</db:programlisting>
</db:section>
<db:section xml:id="example-opengl-rendering-sub-class">
<db:title>Example OpenGL Rendering Sub Class</db:title>
<db:para>Here we sub class OpenGLWindow to show how to do OpenGL to render a rotating triangle. By indirectly sub classing <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link> we gain access to all OpenGL ES 2.0 level functionality.</db:para>
<db:programlisting language="cpp">class TriangleWindow : public OpenGLWindow
{
public:
    using OpenGLWindow::OpenGLWindow;

    void initialize() override;
    void render() override;

private:
    GLint m_posAttr = 0;
    GLint m_colAttr = 0;
    GLint m_matrixUniform = 0;

    QOpenGLShaderProgram *m_program = nullptr;
    int m_frame = 0;
};
</db:programlisting>
<db:para>In our main function we initialize <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> and instantiate our TriangleOpenGLWindow. We give it a <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> specifying that we want four samples of multisample antialiasing, as well as a default geometry. Since we want to have animation we call the above mentioned setAnimating() function with an argument of true.</db:para>
<db:programlisting language="cpp">int main(int argc, char **argv)
{
    QGuiApplication app(argc, argv);

    QSurfaceFormat format;
    format.setSamples(16);

    TriangleWindow window;
    window.setFormat(format);
    window.resize(640, 480);
    window.show();

    window.setAnimating(true);

    return app.exec();
}
</db:programlisting>
<db:para>The following code snippet shows the OpenGL shader program used in this example. The vertex and fragment shaders are relatively simple, doing vertex transformation and interpolated vertex coloring.</db:para>
<db:programlisting language="cpp">static const char *vertexShaderSource =
    &quot;attribute highp vec4 posAttr;\n&quot;
    &quot;attribute lowp vec4 colAttr;\n&quot;
    &quot;varying lowp vec4 col;\n&quot;
    &quot;uniform highp mat4 matrix;\n&quot;
    &quot;void main() {\n&quot;
    &quot;   col = colAttr;\n&quot;
    &quot;   gl_Position = matrix * posAttr;\n&quot;
    &quot;}\n&quot;;

static const char *fragmentShaderSource =
    &quot;varying lowp vec4 col;\n&quot;
    &quot;void main() {\n&quot;
    &quot;   gl_FragColor = col;\n&quot;
    &quot;}\n&quot;;
</db:programlisting>
<db:para>Here is the code that loads the shaders and initializes the shader program By using <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> instead of raw OpenGL we get the convenience that strips out the highp, mediump, and lowp qualifiers on desktop OpenGL, where they are not part of the standard. We store the attribute and uniform locations in member variables to avoid having to do the location lookup each frame.</db:para>
<db:programlisting language="cpp">void TriangleWindow::initialize()
{
    m_program = new QOpenGLShaderProgram(this);
    m_program-&amp;gt;addShaderFromSourceCode(QOpenGLShader::Vertex, vertexShaderSource);
    m_program-&amp;gt;addShaderFromSourceCode(QOpenGLShader::Fragment, fragmentShaderSource);
    m_program-&amp;gt;link();
    m_posAttr = m_program-&amp;gt;attributeLocation(&quot;posAttr&quot;);
    Q_ASSERT(m_posAttr != -1);
    m_colAttr = m_program-&amp;gt;attributeLocation(&quot;colAttr&quot;);
    Q_ASSERT(m_colAttr != -1);
    m_matrixUniform = m_program-&amp;gt;uniformLocation(&quot;matrix&quot;);
    Q_ASSERT(m_matrixUniform != -1);
}
</db:programlisting>
<db:para>Finally, here is our render() function, where we use OpenGL to set up the viewport, clear the background, and render a rotating triangle.</db:para>
<db:programlisting language="cpp">void TriangleWindow::render()
{
    const qreal retinaScale = devicePixelRatio();
    glViewport(0, 0, width() * retinaScale, height() * retinaScale);

    glClear(GL_COLOR_BUFFER_BIT);

    m_program-&amp;gt;bind();

    QMatrix4x4 matrix;
    matrix.perspective(60.0f, 4.0f / 3.0f, 0.1f, 100.0f);
    matrix.translate(0, 0, -2);
    matrix.rotate(100.0f * m_frame / screen()-&amp;gt;refreshRate(), 0, 1, 0);

    m_program-&amp;gt;setUniformValue(m_matrixUniform, matrix);

    static const GLfloat vertices[] = {
         0.0f,  0.707f,
        -0.5f, -0.5f,
         0.5f, -0.5f
    };

    static const GLfloat colors[] = {
        1.0f, 0.0f, 0.0f,
        0.0f, 1.0f, 0.0f,
        0.0f, 0.0f, 1.0f
    };

    glVertexAttribPointer(m_posAttr, 2, GL_FLOAT, GL_FALSE, 0, vertices);
    glVertexAttribPointer(m_colAttr, 3, GL_FLOAT, GL_FALSE, 0, colors);

    glEnableVertexAttribArray(m_posAttr);
    glEnableVertexAttribArray(m_colAttr);

    glDrawArrays(GL_TRIANGLES, 0, 3);

    glDisableVertexAttribArray(m_colAttr);
    glDisableVertexAttribArray(m_posAttr);

    m_program-&amp;gt;release();

    ++m_frame;
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/opengl/openglwindow?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
