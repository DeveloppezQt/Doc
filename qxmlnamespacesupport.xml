<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QXmlNamespaceSupport Class</db:title>
<db:productname>QtXml</db:productname>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlnamespacesupport.xml">QXmlNamespaceSupport</db:link> class is a helper class for XML readers which want to include namespace support.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlNamespaceSupport</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlNamespaceSupport is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>You can set the prefix for the current namespace with <db:link xlink:href="qxmlnamespacesupport.xml#setPrefix">setPrefix</db:link>(), and get the list of current prefixes (or those for a given URI) with <db:link xlink:href="qxmlnamespacesupport.xml#prefixes">prefixes</db:link>(). The namespace URI is available from <db:link xlink:href="qxmlnamespacesupport.xml#uri">uri</db:link>(). Use <db:link xlink:href="qxmlnamespacesupport.xml#pushContext">pushContext</db:link>() to start a new namespace context, and <db:link xlink:href="qxmlnamespacesupport.xml#popContext">popContext</db:link>() to return to the previous namespace context. Use <db:link xlink:href="qxmlnamespacesupport.xml#splitName">splitName</db:link>() or <db:link xlink:href="qxmlnamespacesupport.xml#processName">processName</db:link>() to split a name into its prefix and local name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="xml-sax.xml#namespace-support-via-features">Namespace Support via Features</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlNamespaceSupport">
<db:title>QXmlNamespaceSupport::QXmlNamespaceSupport()</db:title>
<db:para>Constructs a <db:link xlink:href="qxmlnamespacesupport.xml">QXmlNamespaceSupport</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QXmlNamespaceSupport">
<db:title>[noexcept] QXmlNamespaceSupport::~QXmlNamespaceSupport()</db:title>
<db:para>Destroys a <db:link xlink:href="qxmlnamespacesupport.xml">QXmlNamespaceSupport</db:link>.</db:para>
</db:section>
<db:section xml:id="popContext">
<db:title>void QXmlNamespaceSupport::popContext()</db:title>
<db:para>Reverts to the previous namespace context.</db:para>
<db:para>Normally, you should pop the context at the end of each XML element. After popping the context, all namespace prefix mappings that were previously in force are restored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlnamespacesupport.xml#pushContext">pushContext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prefix">
<db:title>QString QXmlNamespaceSupport::prefix(const QString &amp;<db:emphasis>uri</db:emphasis>) const</db:title>
<db:para>Returns one of the prefixes mapped to the namespace URI <db:code role="parameter">uri</db:code>.</db:para>
<db:para>If more than one prefix is currently mapped to the same URI, this function makes an arbitrary selection; if you want all of the prefixes, use <db:link xlink:href="qxmlnamespacesupport.xml#prefixes">prefixes</db:link>() instead.</db:para>
<db:para>Note: to check for a default prefix, use the <db:link xlink:href="qxmlnamespacesupport.xml#uri">uri</db:link>() function with an argument of &quot;&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlnamespacesupport.xml#setPrefix">setPrefix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prefixes">
<db:title>QStringList QXmlNamespaceSupport::prefixes() const</db:title>
<db:para>Returns a list of all the prefixes currently declared.</db:para>
<db:para>If there is a default prefix, this function does not return it in the list; check for the default prefix using <db:link xlink:href="qxmlnamespacesupport.xml#uri">uri</db:link>() with an argument of &quot;&quot;.</db:para>
</db:section>
<db:section xml:id="prefixes-1">
<db:title>QStringList QXmlNamespaceSupport::prefixes(const QString &amp;<db:emphasis>uri</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of all prefixes currently declared for the namespace URI <db:code role="parameter">uri</db:code>.</db:para>
<db:para>The &quot;xml:&quot; prefix is included. If you only want one prefix that is mapped to the namespace URI, and you don't care which one you get, use the <db:link xlink:href="qxmlnamespacesupport.xml#prefix">prefix</db:link>() function instead.</db:para>
<db:para>Note: The empty (default) prefix is never included in this list; to check for the presence of a default namespace, call <db:link xlink:href="qxmlnamespacesupport.xml#uri">uri</db:link>() with &quot;&quot; as the argument.</db:para>
</db:section>
<db:section xml:id="processName">
<db:title>void QXmlNamespaceSupport::processName(const QString &amp;<db:emphasis>qname</db:emphasis>, bool <db:emphasis>isAttribute</db:emphasis>, QString &amp;<db:emphasis>nsuri</db:emphasis>, QString &amp;<db:emphasis>localname</db:emphasis>) const</db:title>
<db:para>Processes a raw XML 1.0 name in the current context by removing the prefix and looking it up among the prefixes currently declared.</db:para>
<db:para><db:code role="parameter">qname</db:code> is the raw XML 1.0 name to be processed. <db:code role="parameter">isAttribute</db:code> is true if the name is an attribute name.</db:para>
<db:para>This function stores the namespace URI in <db:code role="parameter">nsuri</db:code> (which will be set to an empty string if the raw name has an undeclared prefix), and stores the local name (without prefix) in <db:code role="parameter">localname</db:code> (which will be set to an empty string if no namespace is in use).</db:para>
<db:para>Note that attribute names are processed differently than element names: an unprefixed element name gets the default namespace (if any), while an unprefixed attribute name does not.</db:para>
</db:section>
<db:section xml:id="pushContext">
<db:title>void QXmlNamespaceSupport::pushContext()</db:title>
<db:para>Starts a new namespace context.</db:para>
<db:para>Normally, you should push a new context at the beginning of each XML element: the new context automatically inherits the declarations of its parent context, and it also keeps track of which declarations were made within this context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlnamespacesupport.xml#popContext">popContext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reset">
<db:title>void QXmlNamespaceSupport::reset()</db:title>
<db:para>Resets this namespace support object ready for reuse.</db:para>
</db:section>
<db:section xml:id="setPrefix">
<db:title>void QXmlNamespaceSupport::setPrefix(const QString &amp;<db:emphasis>pre</db:emphasis>, const QString &amp;<db:emphasis>uri</db:emphasis>)</db:title>
<db:para>This function declares a prefix <db:code role="parameter">pre</db:code> in the current namespace context to be the namespace URI <db:code role="parameter">uri</db:code>. The prefix remains in force until this context is popped, unless it is shadowed in a descendant context.</db:para>
<db:para>Note that there is an asymmetry in this library. <db:link xlink:href="qxmlnamespacesupport.xml#prefix">prefix</db:link>() does not return the default &quot;&quot; prefix, even if you have declared one; to check for a default prefix, you must look it up explicitly using <db:link xlink:href="qxmlnamespacesupport.xml#uri">uri</db:link>(). This asymmetry exists to make it easier to look up prefixes for attribute names, where the default prefix is not allowed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlnamespacesupport.xml#prefix">prefix</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="splitName">
<db:title>void QXmlNamespaceSupport::splitName(const QString &amp;<db:emphasis>qname</db:emphasis>, QString &amp;<db:emphasis>prefix</db:emphasis>, QString &amp;<db:emphasis>localname</db:emphasis>) const</db:title>
<db:para>Splits the name <db:code role="parameter">qname</db:code> at the ':' and returns the prefix in <db:code role="parameter">prefix</db:code> and the local name in <db:code role="parameter">localname</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlnamespacesupport.xml#processName">processName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uri">
<db:title>QString QXmlNamespaceSupport::uri(const QString &amp;<db:emphasis>prefix</db:emphasis>) const</db:title>
<db:para>Looks up the prefix <db:code role="parameter">prefix</db:code> in the current context and returns the currently-mapped namespace URI. Use the empty string (&quot;&quot;) for the default namespace.</db:para>
</db:section>
</db:section>
</db:article>
