<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Platform Notes</db:title>
<db:productname>QMake</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>QMake Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-running.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Running qmake"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-language.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="qmake Language"/></db:extendedlink>
<db:abstract>
<db:para>QMake Manual.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Many cross-platform projects can be handled by the basic qmake configuration features. However, on some platforms, it is sometimes useful, or even necessary, to take advantage of platform-specific features. qmake knows about many of these features, which can be accessed via specific variables that only take effect on the platforms where they are relevant.</db:para>
<db:section xml:id="macos-ios-tvos-and-watchos">
<db:title>macOS, iOS, tvOS, and watchOS</db:title>
<db:para>Features specific to these platforms include support for creating universal binaries, frameworks and bundles.</db:para>
<db:section xml:id="source-and-binary-packages">
<db:title>Source and Binary Packages</db:title>
<db:para>The version of qmake supplied in source packages is configured slightly differently to that supplied in binary packages in that it uses a different feature specification. Where the source package typically uses the <db:code>macx-g++</db:code> specification, the binary package is typically configured to use the <db:code>macx-xcode</db:code> specification.</db:para>
<db:para>Users of each package can override this configuration by invoking qmake with the <db:code>-spec</db:code> option (see <db:link xlink:href="qmake-running.xml">Running qmake</db:link> for more information). For example, to use qmake from a binary package to create a Makefile in a project directory, invoke the following command:</db:para>
<db:programlisting language="cpp">qmake -spec macx-g++
</db:programlisting>
</db:section>
<db:section xml:id="using-frameworks">
<db:title>Using Frameworks</db:title>
<db:para>qmake is able to automatically generate build rules for linking against frameworks in the standard framework directory on macOS, located at <db:code>/Library/Frameworks/</db:code>.</db:para>
<db:para>Directories other than the standard framework directory need to be specified to the build system, and this is achieved by appending linker options to the <db:link xlink:href="qmake-variable-reference.xml#libs">LIBS</db:link> variable, as shown in the following example:</db:para>
<db:programlisting language="cpp">LIBS += -F/path/to/framework/directory/
</db:programlisting>
<db:para>The framework itself is linked in by appending the <db:code>-framework</db:code> options and the name of the framework to the <db:link xlink:href="qmake-variable-reference.xml#libs">LIBS</db:link> variable:</db:para>
<db:programlisting language="cpp">LIBS += -framework TheFramework
</db:programlisting>
</db:section>
<db:section xml:id="creating-frameworks">
<db:title>Creating Frameworks</db:title>
<db:para>Any given library project can be configured so that the resulting library file is placed in a <db:link xlink:href="http://developer.apple.com/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/WhatAreFrameworks.html">framework</db:link>, ready for deployment. To do this, set up the project to use the <db:link xlink:href="qmake-variable-reference.xml#template"><db:code>lib</db:code> template</db:link> and add the <db:code>lib_bundle</db:code> option to the <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> variable:</db:para>
<db:programlisting language="cpp">TEMPLATE = lib
CONFIG += lib_bundle
</db:programlisting>
<db:para>The data associated with the library is specified using the <db:link xlink:href="qmake-variable-reference.xml#qmake-bundle-data">QMAKE_BUNDLE_DATA</db:link> variable. This holds items that will be installed with a library bundle, and is often used to specify a collection of header files, as in the following example:</db:para>
<db:programlisting language="cpp">FRAMEWORK_HEADERS.version = Versions
FRAMEWORK_HEADERS.files = path/to/header_one.h path/to/header_two.h
FRAMEWORK_HEADERS.path = Headers
QMAKE_BUNDLE_DATA += FRAMEWORK_HEADERS
</db:programlisting>
<db:para>You use the <db:code>FRAMEWORK_HEADERS</db:code> variable to specify the headers required by a particular framework. Appending it to the <db:code>QMAKE_BUNDLE_DATA</db:code> variable ensures that information about these headers is added to the collection of resources that will be installed with the library bundle. Also, the framework name and version are specified by the <db:link xlink:href="qmake-variable-reference.xml#qmake-framework-bundle-name">QMAKE_FRAMEWORK_BUNDLE_NAME</db:link> and <db:link xlink:href="qmake-variable-reference.xml#qmake-framework-version">QMAKE_FRAMEWORK_VERSION</db:link> variables. By default, the values used for these variables are obtained from the <db:link xlink:href="qmake-variable-reference.xml#target">TARGET</db:link> and <db:link xlink:href="qmake-variable-reference.xml#version">VERSION</db:link> variables.</db:para>
<db:para>See <db:link xlink:href="">Qt for macOS - Deployment</db:link> for more information about deploying applications and libraries.</db:para>
</db:section>
<db:section xml:id="creating-and-moving-xcode-projects">
<db:title>Creating and Moving Xcode Projects</db:title>
<db:para>On macOS, developers can generate Xcode project files from an existing qmake project file. For example:</db:para>
<db:programlisting language="cpp">qmake -spec macx-xcode project.pro
</db:programlisting>
<db:note>
<db:para>If a project is later moved on the disk, qmake must be run again to process the project file and create a new Xcode project file.</db:para>
</db:note>
</db:section>
<db:section xml:id="supporting-two-build-targets-simultaneously">
<db:title>Supporting Two Build Targets Simultaneously</db:title>
<db:para>Implementing this is currently not feasible, because the Xcode concept of Active Build Configurations is conceptually different from the qmake idea of build targets.</db:para>
<db:para>The Xcode Active Build Configurations settings are for modifying Xcode configurations, compiler flags and similar build options. Unlike Visual Studio, Xcode does not allow for the selection of specific library files based on whether debug or release build configurations are selected. The qmake debug and release settings control which library files are linked to the executable.</db:para>
<db:para>It is currently not possible to set files in Xcode configuration settings from the qmake generated Xcode project file. The way the libraries are linked in the <db:emphasis>Frameworks &amp; Libraries</db:emphasis> phase in the Xcode build system.</db:para>
<db:para>Furthermore, the selected <db:emphasis>Active Build Configuration</db:emphasis> is stored in a .pbxuser file, which is generated by Xcode on first load, not created by qmake.</db:para>
</db:section>
</db:section>
<db:section xml:id="windows">
<db:title>Windows</db:title>
<db:para>Features specific to this platform include support for Windows resource files (provided or auto-generated), creating Visual Studio project files, and handling manifest files when deploying Qt applications developed using Visual Studio 2005, or later.</db:para>
<db:section xml:id="adding-windows-resource-files">
<db:title>Adding Windows Resource Files</db:title>
<db:para>This section describes how to handle a Windows resource file with qmake to have it linked to an application executable (EXE) or dynamic link library (DLL). qmake can optionally auto-generate a suitably filled Windows resource file.</db:para>
<db:para>A linked Windows resource file may contain many elements that can be accessed by its EXE or DLL. However, the <db:link xlink:href="resources.xml">Qt resource system</db:link> should be used for accessing linked-in resources in a platform-independent way. But some standard elements of the linked Windows resource file are accessed by Windows itself. For example, in Windows explorer the version tab of the file properties is filled by resource elements. In addition, the program icon of the EXE is read from these elements. So it is good practice for a Qt created Windows EXE or DLL to use both techniques at the same time: link platform-independent resources via the <db:link xlink:href="resources.xml">Qt resource system</db:link> and add Windows specific resources via a Windows resource file.</db:para>
<db:para>Typically, a resource-definition script (.rc file) is compiled to a Windows resource file. Within the Microsoft toolchain, the RC tool generates a .res file, which can be linked with the Microsoft linker to an EXE or DLL. The MinGW toolchain uses the windres tool to generate an .o file that can be linked with the MinGW linker to an EXE or DLL.</db:para>
<db:para>The optional auto-generation of a suitably filled .rc file by qmake is triggered by setting at least one of the system variables <db:link xlink:href="qmake-variable-reference.xml#version">VERSION</db:link> and <db:link xlink:href="qmake-variable-reference.xml#rc-icons">RC_ICONS</db:link>. The generated .rc file is automatically compiled and linked. Elements that are added to the .rc file are defined by the system variables <db:link xlink:href="qmake-variable-reference.xml#qmake-target-company">QMAKE_TARGET_COMPANY</db:link>, <db:link xlink:href="qmake-variable-reference.xml#qmake-target-description">QMAKE_TARGET_DESCRIPTION</db:link>, <db:link xlink:href="qmake-variable-reference.xml#qmake-target-copyright">QMAKE_TARGET_COPYRIGHT</db:link>, <db:link xlink:href="qmake-variable-reference.xml#qmake-target-product">QMAKE_TARGET_PRODUCT</db:link>, <db:link xlink:href="qmake-variable-reference.xml#qmake-target-original-filename">QMAKE_TARGET_ORIGINAL_FILENAME</db:link>, <db:link xlink:href="qmake-variable-reference.xml#qmake-target-internalname">QMAKE_TARGET_INTERNALNAME</db:link>, <db:link xlink:href="qmake-variable-reference.xml#qmake-target-comments">QMAKE_TARGET_COMMENTS</db:link>, <db:link xlink:href="qmake-variable-reference.xml#qmake-target-trademarks">QMAKE_TARGET_TRADEMARKS</db:link>, <db:link xlink:href="qmake-variable-reference.xml#qmake-manifest">QMAKE_MANIFEST</db:link>, <db:link xlink:href="qmake-variable-reference.xml#rc-codepage">RC_CODEPAGE</db:link>, <db:link xlink:href="qmake-variable-reference.xml#rc-icons">RC_ICONS</db:link>, <db:link xlink:href="qmake-variable-reference.xml#rc-lang">RC_LANG</db:link> and <db:link xlink:href="qmake-variable-reference.xml#version">VERSION</db:link>.</db:para>
<db:para>If these elements are not sufficient, qmake has the two system variables <db:link xlink:href="qmake-variable-reference.xml#rc-file">RC_FILE</db:link> and <db:link xlink:href="qmake-variable-reference.xml#res-file">RES_FILE</db:link> that point directly to an externally created .rc or .res file. By setting one of these variables, the specified file is linked to the EXE or DLL.</db:para>
<db:note>
<db:para>The generation of the .rc file by qmake is blocked, if <db:link xlink:href="qmake-variable-reference.xml#rc-file">RC_FILE</db:link> or <db:link xlink:href="qmake-variable-reference.xml#res-file">RES_FILE</db:link> is set. In this case, no further changes are made to the given .rc file or the .res or .o file by qmake; the variables pertaining to .rc file generation have no effect.</db:para>
</db:note>
</db:section>
<db:section xml:id="creating-visual-studio-project-files">
<db:title>Creating Visual Studio Project Files</db:title>
<db:para>This section describes how to import an existing qmake project into Visual Studio. qmake is able to take a project file and create a Visual Studio project that contains all the necessary information required by the development environment. This is achieved by setting the qmake <db:link xlink:href="qmake-variable-reference.xml#template">project template</db:link> to either <db:code>vcapp</db:code> (for application projects) or <db:code>vclib</db:code> (for library projects).</db:para>
<db:para>This can also be set using a command line option, for example:</db:para>
<db:programlisting language="cpp">qmake -tp vc
</db:programlisting>
<db:para>It is possible to recursively generate <db:code>.vcproj</db:code> files in subdirectories and a <db:code>.sln</db:code> file in the main directory, by typing:</db:para>
<db:programlisting language="cpp">qmake -tp vc -r
</db:programlisting>
<db:para>Each time you update the project file, you need to run qmake to generate an updated Visual Studio project.</db:para>
<db:note>
<db:para>If you are using the Visual Studio Add-in, select <db:emphasis role="bold">Qt</db:emphasis> &gt; <db:emphasis role="bold">Import from .pro file</db:emphasis> to import <db:code>.pro</db:code> files.</db:para>
</db:note>
</db:section>
<db:section xml:id="visual-studio-manifest-files">
<db:title>Visual Studio Manifest Files</db:title>
<db:para>When deploying Qt applications built using Visual Studio 2005, or later, make sure that the manifest file that was created when the application was linked is handled correctly. This is handled automatically for projects that generate DLLs.</db:para>
<db:para>Removing manifest embedding for application executables can be done with the following assignment to the <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> variable:</db:para>
<db:programlisting language="cpp">CONFIG -= embed_manifest_exe
</db:programlisting>
<db:para>Also, the manifest embedding for DLLs can be removed with the following assignment to the <db:code>CONFIG</db:code> variable:</db:para>
<db:programlisting language="cpp">CONFIG -= embed_manifest_dll
</db:programlisting>
<db:para>This is discussed in more detail in the <db:link xlink:href="">deployment guide for Windows</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
