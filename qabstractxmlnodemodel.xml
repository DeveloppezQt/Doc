<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractXmlNodeModel Class</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> class is an abstract base class for modeling non-XML data to look like XML for <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractXmlNodeModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xmlpatterns</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qshareddata.xml" xlink:role="class">QSharedData</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsimplexmlnodemodel.xml" xlink:role="class">QSimpleXmlNodeModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractXmlNodeModel is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> specifies the interface that a node model must implement for that node model be accessible to the query engine for processing XQuery queries. A node model represents data as a structure that can be queried as if the data were XML.</db:para>
<db:para>The node model represented by a subclass of <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> is meant to be accessed by the Qt XML Patterns query engine. If the API seems a little strange in a few places, it is because the member functions are called by the query engine as it evaluates an XQuery. They aren't meant to be used programatically.</db:para>
<db:section xml:id="usage">
<db:title>Usage</db:title>
<db:para><db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> bridges the gap between the arbitrary structure of the non-XML data to be queried and the well-defined structure of XML data understood by <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link>.</db:para>
<db:para>Consider a chemistry application that reads the file <db:code>chemistryData</db:code>, which contains non-XML data that represents a chemical structure composed of molecules and atoms. The application will query this chemistry data with an XQuery it reads from file <db:code>queryFile</db:code>. We write a custom subclass of <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> (<db:code>ChemistryNodeModel</db:code>) that reads <db:code>chemistryData</db:code> and builds a data structure, perhaps composed of objects of our own classes <db:code>molecule</db:code> and <db:code>atom</db:code>. Clearly, this data structure is not XML. Our custom subclass will know how to traverse this non-XML structure and present it through the <db:link xlink:href="http://www.w3.org/TR/xpath-datamodel/">XPath Data Model interface</db:link>.</db:para>
<db:programlisting language="cpp">QFile queryFile(argv[1]);
QFile chemistryData(argv[2]);
QString moleculeName = argv[3];

QXmlQuery query;
query.setQuery(&amp;amp;queryFile, QUrl::fromLocalFile(queryFile.fileName()));

ChemistryNodeModel myNodeModel(query.namePool(), chemistryData);
QXmlNodeModelIndex startNode = myNodeModel.nodeFor(moleculeName);
query.bindVariable(&quot;queryRoot&quot;, startNode);

QFile out;
out.open(stdout, QIODevice::WriteOnly);

QXmlSerializer serializer(query, &amp;amp;out);
query.evaluateTo(&amp;amp;serializer);
</db:programlisting>
<db:para>The application first creates an instance of <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link> and calls <db:link xlink:href="qxmlquery.xml#setQuery">setQuery</db:link>() to read <db:code>queryFile</db:code> containing the XQuery we want to run. Then it creates an instance of our custom node model class, <db:code>ChemistryNodeModel</db:code>, which is a subclass of <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link>. Its constructor is called with the <db:link xlink:href="qxmlnamepool.xml">name pool</db:link> obtained from our <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link>, and with the <db:code>chemistryFile</db:code> containing the structure of molecules and atoms to be queried. The <db:link xlink:href="qxmlnamepool.xml">name pool</db:link> is required because our custom node model has the member function <db:link xlink:href="qabstractxmlnodemodel.xml#name">name</db:link>(), which returns the <db:link xlink:href="qxmlname.xml">name</db:link> of any node in the model. The <db:link xlink:href="qxmlquery.xml">query</db:link> and the custom node model must use the same name pool for constructing these <db:link xlink:href="qxmlname.xml">names</db:link>. The constructor would then read <db:code>chemistryFile</db:code> and build the custom node model structure.</db:para>
<db:para>To connect the <db:code>query</db:code> to the custom node model, we must bind a variable name used in the query to a node in the model. The variable can then be used in the query as a starting node. First, an <db:link xlink:href="qxmlnodemodelindex.xml">index</db:link> for the desired starting node is retrieved by calling <db:link xlink:href="qabstractxmlnodemodel.xml#createIndex">QAbstractXmlNodeModel::createIndex</db:link>(). Then the index is bound to a variable name, in this case <db:code>queryRoot</db:code>, by passing the name and the index to <db:link xlink:href="qxmlquery.xml#bindVariable">QXmlQuery::bindVariable</db:link>(). The query can then use a variable reference <db:code>$queryRoot</db:code> to refer to the starting node. Note that if the <db:link xlink:href="qxmlquery.xml">query</db:link> uses multiple variable references, a call to <db:link xlink:href="qxmlquery.xml#bindVariable">QXmlQuery::bindVariable</db:link>() is required to bind each different variable name to a node in the model.</db:para>
<db:para>The query is executed when the application calls one of the <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link> evaluation functions. The application uses <db:link xlink:href="qxmlquery.xml#evaluateTo">QXmlQuery::evaluateTo</db:link>(<db:link xlink:href="qabstractxmlreceiver.xml">QAbstractXmlReceiver</db:link> *), because it then uses a <db:link xlink:href="qxmlserializer.xml">serializer</db:link> to out the query result as XML to <db:code>stdout</db:code>. We could have used <db:link xlink:href="qxmlquery.xml#evaluateTo">QXmlQuery::evaluateTo</db:link>(<db:link xlink:href="qxmlresultitems.xml">QXmlResultItems</db:link> *) to get a list of result items, or <db:link xlink:href="qxmlquery.xml#evaluateTo">QXmlQuery::evaluateTo</db:link>(<db:link xlink:href="qstringlist.xml">QStringList</db:link> *) if the query evaluated to a sequence of <db:code>xs:string</db:code> values.</db:para>
<db:para>During query execution, the engine iterates over the node model using <db:link xlink:href="qabstractxmlnodemodel.xml#nextFromSimpleAxis">nextFromSimpleAxis</db:link>() to get the <db:link xlink:href="qxmlnodemodelindex.xml">index</db:link> of the next node to be visited. The engine can get the name of a node by calling <db:link xlink:href="qabstractxmlnodemodel.xml#name">name</db:link>() with the node's <db:link xlink:href="qxmlnodemodelindex.xml">index</db:link>. <db:link xlink:href="qabstractxmlnodemodel.xml#stringValue">stringValue</db:link>(), <db:link xlink:href="qabstractxmlnodemodel.xml#baseUri">baseUri</db:link>(), <db:link xlink:href="qabstractxmlnodemodel.xml#documentUri">documentUri</db:link>() and <db:link xlink:href="qabstractxmlnodemodel.xml#kind">kind</db:link>() are also called as needed with a node <db:link xlink:href="qxmlnodemodelindex.xml">index</db:link>.</db:para>
<db:para>The example demonstrates the standard pattern for using a subclass of <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> in combination with <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link> to perform an XQuery.</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Instantiate <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link> and give it the XQuery to be run;</db:para>
</db:listitem>
<db:listitem>
<db:para>Instantiate a subclass of <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> or <db:link xlink:href="qsimplexmlnodemodel.xml">QSimpleXmlNodeModel</db:link>;</db:para>
</db:listitem>
<db:listitem>
<db:para>Retrieve a <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> for the node in the model where the <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link> should start the query;</db:para>
</db:listitem>
<db:listitem>
<db:para>Use <db:link xlink:href="qxmlquery.xml#bindVariable">QXmlQuery::bindVariable</db:link>() to bind the <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> to <db:code>$variable name</db:code>;</db:para>
</db:listitem>
<db:listitem>
<db:para>Call one of the <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link> evaluation functions to run the query.</db:para>
</db:listitem>
</db:orderedlist>
</db:section>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>Because the <db:link xlink:href="http://www.w3.org/TR/xpath-datamodel/">XPath Data Model interface</db:link> presented by <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> allows <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link> to operate on non-XML data as if it were XML, implementing subclasses of <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> can involve a significant amount of work. The <db:link xlink:href="qsimplexmlnodemodel.xml">QSimpleXmlNodeModel</db:link> class is provided to simplify the implementation for many common use cases.</db:para>
</db:section>
<db:section xml:id="thread-safety">
<db:title>Thread Safety</db:title>
<db:para>Because the node model can be accessed concurrently by threads in the Qt XML Patterns module, subclasses of <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> must be written to be <db:link xlink:href="qxmlquery.xml#reentrancy-and-thread-safety">thread-safe</db:link>. Classes that simplify implementing thread-safety include <db:link xlink:href="qreadlocker.xml">QReadLocker</db:link> and <db:link xlink:href="qwritelocker.xml">QWriteLocker</db:link>.</db:para>
<db:para>See the example <db:link xlink:href="qtxmlpatterns-filetree-example.xml">File System Example</db:link> for a demonstration.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="List-typedef">
<db:title>QAbstractXmlNodeModel::List</db:title>
<db:typedefsynopsis>
<db:typedefname>List</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A <db:link xlink:href="qlist.xml">list</db:link> of <db:link xlink:href="qexplicitlyshareddatapointer.xml">smart pointers</db:link> to instances of <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Ptr-typedef">
<db:title>QAbstractXmlNodeModel::Ptr</db:title>
<db:typedefsynopsis>
<db:typedefname>Ptr</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A <db:link xlink:href="qexplicitlyshareddatapointer.xml">smart pointer</db:link> to an instance of <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="SimpleAxis-enum">
<db:title>enum QAbstractXmlNodeModel::SimpleAxis</db:title>
<db:enumsynopsis>
<db:enumname>SimpleAxis</db:enumname>
<db:enumitem>
<db:enumidentifier>Parent</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FirstChild</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PreviousSibling</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NextSibling</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Four axes that each contain one node only.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link></db:emphasis>::Parent</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The parent of the context node</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link></db:emphasis>::FirstChild</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The first child of the context node</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link></db:emphasis>::PreviousSibling</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The previous child of the context node</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link></db:emphasis>::NextSibling</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The next child of the context node</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractXmlNodeModel">
<db:title>QAbstractXmlNodeModel::QAbstractXmlNodeModel()</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractXmlNodeModel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractXmlNodeModel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Default constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractXmlNodeModel">
<db:title>[virtual] QAbstractXmlNodeModel::~QAbstractXmlNodeModel()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractXmlNodeModel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractXmlNodeModel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="attributes">
<db:title>[pure virtual protected] QVector&lt;QXmlNodeModelIndex&gt; QAbstractXmlNodeModel::attributes(const QXmlNodeModelIndex &amp;<db:emphasis>element</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVector&lt;QXmlNodeModelIndex&gt;</db:type>
<db:methodname>attributes</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>element</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector&lt;QXmlNodeModelIndex&gt; attributes(const QXmlNodeModelIndex &amp;element) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the attributes of <db:code role="parameter">element</db:code>. The caller guarantees that <db:code role="parameter">element</db:code> is an element in this node model.</db:para>
</db:section>
<db:section xml:id="baseUri">
<db:title>[pure virtual] QUrl QAbstractXmlNodeModel::baseUri(const QXmlNodeModelIndex &amp;<db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>baseUri</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl baseUri(const QXmlNodeModelIndex &amp;n) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the base URI for the node whose index is <db:code role="parameter">n</db:code>. The caller guarantees that <db:code role="parameter">n</db:code> is not <db:code>null</db:code> and that it belongs to a node in this node model.</db:para>
<db:para>The base URI of a node can be extracted using the <db:code>fn:base-uri()</db:code> function. The base URI is typically used for resolving relative URIs that appear in the node or its children. It is conformant to just return the document URI, although that might not properly reflect the underlying data.</db:para>
<db:para>This function maps to the <db:code>dm:base-uri</db:code> accessor, which returns a base URI according to the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>For document nodes, the base URI and the document URI are the same.</db:para>
</db:listitem>
<db:listitem>
<db:para>For elements, the base URI is the URI appearing in the element's <db:code>xml:base</db:code> attribute, if present, or it is resolved to the parent element's base URI.</db:para>
</db:listitem>
<db:listitem>
<db:para>Namespace nodes have no base URI.</db:para>
</db:listitem>
<db:listitem>
<db:para>The base URI for a processing instruction, comment, attribute, or text node is the base URI of the node's parent element.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The implementation guarantees to return a valid <db:link xlink:href="qurl.xml">QUrl</db:link>, or a default constructed <db:link xlink:href="qurl.xml">QUrl</db:link>. If a node has no base URI, as in the case where a comment has no parent, a default constructed <db:link xlink:href="qurl.xml">QUrl</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/xpath-datamodel/#dm-base-uri">XQuery 1.0 and XPath 2.0 Data Model (XDM), 5.2 base-uri Accessor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compareOrder">
<db:title>[pure virtual] QXmlNodeModelIndex::DocumentOrder QAbstractXmlNodeModel::compareOrder(const QXmlNodeModelIndex &amp;<db:emphasis>ni1</db:emphasis>, const QXmlNodeModelIndex &amp;<db:emphasis>ni2</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QXmlNodeModelIndex::DocumentOrder</db:type>
<db:methodname>compareOrder</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>ni1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>ni2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlNodeModelIndex::DocumentOrder compareOrder(const QXmlNodeModelIndex &amp;ni1, const QXmlNodeModelIndex &amp;ni2) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns the relative document order for the nodes indexed by <db:code role="parameter">ni1</db:code> and <db:code role="parameter">ni2</db:code>. It is used for the <db:code>Is</db:code> operator and for sorting nodes in document order.</db:para>
<db:para>The caller guarantees that <db:code role="parameter">ni1</db:code> and <db:code role="parameter">ni2</db:code> are not <db:code>null</db:code> and that both identify nodes in this node model.</db:para>
<db:para>If <db:code role="parameter">ni1</db:code> is identical to <db:code role="parameter">ni2</db:code>, <db:link xlink:href="qxmlnodemodelindex.xml#DocumentOrder-enum">QXmlNodeModelIndex::Is</db:link> is returned. If <db:code role="parameter">ni1</db:code> precedes <db:code role="parameter">ni2</db:code> in document order, <db:link xlink:href="qxmlnodemodelindex.xml#DocumentOrder-enum">QXmlNodeModelIndex::Precedes</db:link> is returned. If <db:code role="parameter">ni1</db:code> follows <db:code role="parameter">ni2</db:code> in document order, <db:link xlink:href="qxmlnodemodelindex.xml#DocumentOrder-enum">QXmlNodeModelIndex::Follows</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/xpath-datamodel/#document-order">XQuery 1.0 and XPath 2.0 Data Model (XDM), 2.4 Document Order</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createIndex">
<db:title>[protected] QXmlNodeModelIndex QAbstractXmlNodeModel::createIndex(qint64 <db:emphasis>data</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QXmlNodeModelIndex</db:type>
<db:methodname>createIndex</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlNodeModelIndex createIndex(qint64 data) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a node index with <db:code role="parameter">data</db:code> as its internal data. <db:code role="parameter">data</db:code> is not constrained.</db:para>
</db:section>
<db:section xml:id="createIndex-1">
<db:title>[protected] QXmlNodeModelIndex QAbstractXmlNodeModel::createIndex(void *<db:emphasis>pointer</db:emphasis>, qint64 <db:emphasis>additionalData</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QXmlNodeModelIndex</db:type>
<db:methodname>createIndex</db:methodname>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>pointer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>additionalData</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlNodeModelIndex createIndex(void *pointer, qint64 additionalData) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a node index with <db:code role="parameter">pointer</db:code> and <db:code role="parameter">additionalData</db:code> as its internal data.</db:para>
<db:para>What <db:code role="parameter">pointer</db:code> and <db:code role="parameter">additionalData</db:code> is, is not constrained.</db:para>
</db:section>
<db:section xml:id="createIndex-2">
<db:title>[protected] QXmlNodeModelIndex QAbstractXmlNodeModel::createIndex(qint64 <db:emphasis>data</db:emphasis>, qint64 <db:emphasis>additionalData</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QXmlNodeModelIndex</db:type>
<db:methodname>createIndex</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>additionalData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlNodeModelIndex createIndex(qint64 data, qint64 additionalData) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> containing <db:code role="parameter">data</db:code> and <db:code role="parameter">additionalData</db:code>.</db:para>
</db:section>
<db:section xml:id="documentUri">
<db:title>[pure virtual] QUrl QAbstractXmlNodeModel::documentUri(const QXmlNodeModelIndex &amp;<db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>documentUri</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl documentUri(const QXmlNodeModelIndex &amp;n) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the document URI of <db:code role="parameter">n</db:code>. The document URI identifies the resource which is the document. For example, the document could be a regular file, e.g., <db:code>file:/</db:code>, or it could be the <db:code>http://</db:code> URL of the location of a file. The document URI is used for resolving URIs and to simply know where the document is.</db:para>
<db:para>If the node model maps to a URI in a natural way, return that URI. Otherwise, return the company or product URI. The document URI can be any URI as long as its valid and absolute.</db:para>
<db:para>The caller guarantees that <db:code role="parameter">n</db:code> is not <db:code>null</db:code> and that it belongs to this <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link>.</db:para>
<db:para>This function maps to the <db:code>dm:document-uri</db:code> accessor, which returns a document URI according to the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If <db:code role="parameter">n</db:code> is a document node, return an absolute <db:link xlink:href="qurl.xml">QUrl</db:link> containing the document URI, or a default constructed <db:link xlink:href="qurl.xml">QUrl</db:link>. The latter signals that no document URI is available for the document node.</db:para>
</db:listitem>
<db:listitem>
<db:para>For all other nodes, return a default constructed <db:link xlink:href="qurl.xml">QUrl</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/xpath-datamodel/#dm-document-uri">XQuery 1.0 and XPath 2.0 Data Model (XDM), 5.4 document-uri Accessor</db:link></db:member>
<db:member><db:link xlink:href="qurl.xml#isValid">QUrl::isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qurl.xml#isRelative">QUrl::isRelative</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="elementById">
<db:title>[pure virtual] QXmlNodeModelIndex QAbstractXmlNodeModel::elementById(const QXmlName &amp;<db:emphasis>id</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QXmlNodeModelIndex</db:type>
<db:methodname>elementById</db:methodname>
<db:methodparam>
<db:type>const QXmlName &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlNodeModelIndex elementById(const QXmlName &amp;id) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of the element identified as <db:code role="parameter">id</db:code>. XQuery's <db:code>id()</db:code> function calls this function.</db:para>
<db:para>The node index returned will be the element node whose value is of type <db:code>ID</db:code> and equals <db:code role="parameter">id</db:code>, or it will be the element node that has an attribute whose typed value is of type <db:code>ID</db:code> and equals <db:code role="parameter">id</db:code>. If there is no such element, a default constructed <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> instance is returned. The implementor guarantees that if the returned node index is not null, it identifies an element.</db:para>
<db:para>It is not sufficient for an attribute or element to merely be called <db:code>id</db:code>. Its value type must also be <db:code>ID</db:code>. However, the reserved name <db:code>xml:id</db:code> is sufficient.</db:para>
<db:para>In <db:code role="parameter">id</db:code>, the <db:code>namespace URI</db:code> and the <db:code>prefix</db:code> are undefined, and the <db:code>local name</db:code> is the ID that should be looked up.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/xpath-functions/#func-id">XQuery 1.0 and XPath 2.0 Functions and Operators, 15.5.2 fn:id</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="kind">
<db:title>[pure virtual] QXmlNodeModelIndex::NodeKind QAbstractXmlNodeModel::kind(const QXmlNodeModelIndex &amp;<db:emphasis>ni</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QXmlNodeModelIndex::NodeKind</db:type>
<db:methodname>kind</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>ni</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlNodeModelIndex::NodeKind kind(const QXmlNodeModelIndex &amp;ni) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a value indicating the kind of node identified by <db:code role="parameter">ni</db:code>. The caller guarantees that <db:code role="parameter">ni</db:code> is not null and that it identifies a node in this node model. This function maps to the <db:code>dm:node-kind()</db:code> accessor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/xpath-datamodel/#dm-node-kind">XQuery 1.0 and XPath 2.0 Data Model (XDM), 5.10 node-kind Accessor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>[pure virtual] QXmlName QAbstractXmlNodeModel::name(const QXmlNodeModelIndex &amp;<db:emphasis>ni</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QXmlName</db:type>
<db:methodname>name</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>ni</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlName name(const QXmlNodeModelIndex &amp;ni) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of <db:code role="parameter">ni</db:code>. The caller guarantees that <db:code role="parameter">ni</db:code> is not <db:code>null</db:code> and that it belongs to this <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link>.</db:para>
<db:para>If a node does not have a name, e.g., comment nodes, a null <db:link xlink:href="qxmlname.xml">QXmlName</db:link> is returned. QXmlNames must be created with the instance of <db:link xlink:href="qxmlquery.xml">QXmlQuery</db:link> that is being used for evaluating queries using this <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link>.</db:para>
<db:para>This function maps to the <db:code>dm:node-name()</db:code> accessor.</db:para>
<db:para>If <db:code role="parameter">ni</db:code> is a processing instruction, a <db:link xlink:href="qxmlname.xml">QXmlName</db:link> is returned with the local name as the target name and the namespace URI and prefix both empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/xpath-datamodel/#dm-node-name">XQuery 1.0 and XPath 2.0 Data Model (XDM), 5.11 node-name Accessor</db:link></db:member>
<db:member><db:link xlink:href="qxmlname.xml">QXmlName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="namespaceBindings">
<db:title>[pure virtual] QVector&lt;QXmlName&gt; QAbstractXmlNodeModel::namespaceBindings(const QXmlNodeModelIndex &amp;<db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVector&lt;QXmlName&gt;</db:type>
<db:methodname>namespaceBindings</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector&lt;QXmlName&gt; namespaceBindings(const QXmlNodeModelIndex &amp;n) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the in-scope namespaces of <db:code role="parameter">n</db:code>. The caller guarantees that <db:code role="parameter">n</db:code> is not <db:code>null</db:code> and that it belongs to this <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link>.</db:para>
<db:para>This function corresponds to the <db:code>dm:namespace-nodes</db:code> accessor.</db:para>
<db:para>The returned vector of namespace declarations includes namespaces of the ancestors of <db:code role="parameter">n</db:code>.</db:para>
<db:para>The caller guarantees that <db:code role="parameter">n</db:code> is an Element that belongs to this <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link>.</db:para>
</db:section>
<db:section xml:id="nextFromSimpleAxis">
<db:title>[pure virtual protected] QXmlNodeModelIndex QAbstractXmlNodeModel::nextFromSimpleAxis(QAbstractXmlNodeModel::SimpleAxis <db:emphasis>axis</db:emphasis>, const QXmlNodeModelIndex &amp;<db:emphasis>origin</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QXmlNodeModelIndex</db:type>
<db:methodname>nextFromSimpleAxis</db:methodname>
<db:methodparam>
<db:type>QAbstractXmlNodeModel::SimpleAxis</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>origin</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlNodeModelIndex nextFromSimpleAxis(QAbstractXmlNodeModel::SimpleAxis axis, const QXmlNodeModelIndex &amp;origin) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>When Qt XML Patterns evaluate path expressions, it emulate them through a combination of calls with QSimpleXmlNodeModel::SimpleAxis values. Therefore, the implementation of this function must return the node, if any, that appears on the <db:code role="parameter">axis</db:code> emanating from the <db:code role="parameter">origin</db:code>.</db:para>
<db:para>If no such node is available, a default constructed <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> is returned.</db:para>
<db:para><db:link xlink:href="qsimplexmlnodemodel.xml">QSimpleXmlNodeModel</db:link> eliminates the need to handle redundant corner cases by guaranteeing that it will never ask for:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Children or siblings for attributes.</db:para>
</db:listitem>
<db:listitem>
<db:para>Children for comments, processing instructions, and text nodes.</db:para>
</db:listitem>
<db:listitem>
<db:para>Siblings or parents for document nodes.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>A typical implementation performs a <db:code>switch</db:code> on the value of <db:code role="parameter">axis</db:code>:</db:para>
<db:programlisting language="cpp">QXmlNodeModelIndex MyTreeModel::nextFromSimpleAxis(SimpleAxis axis, const QXmlNodeModelIndex &amp;amp;origin) const
{
  // Convert the QXmlNodeModelIndex to a value that is specific to what we represent.
  const MyValue value = toMyValue(ni);

  switch(axis)
  {
      case Parent:
          return toNodeIndex(value.parent());
      case FirstChild:
      case PreviousSibling:
      case NextSibling:
          // and so on
  }
}
</db:programlisting>
</db:section>
<db:section xml:id="nodesByIdref">
<db:title>[pure virtual] QVector&lt;QXmlNodeModelIndex&gt; QAbstractXmlNodeModel::nodesByIdref(const QXmlName &amp;<db:emphasis>idref</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVector&lt;QXmlNodeModelIndex&gt;</db:type>
<db:methodname>nodesByIdref</db:methodname>
<db:methodparam>
<db:type>const QXmlName &amp;</db:type>
<db:parameter>idref</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector&lt;QXmlNodeModelIndex&gt; nodesByIdref(const QXmlName &amp;idref) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the elements and/or attributes that have an <db:code>IDREF</db:code> value equal to <db:code role="parameter">idref</db:code>. XQuery's <db:code>idref()</db:code> function calls this function.</db:para>
<db:para>The implementor guarantees that the nodes identified by the returned indexes are elements or attributes.</db:para>
<db:para>It is not sufficient for an attribute or element to merely be called <db:code>idref</db:code>. It must also be of type <db:code>IDREF</db:code>. Elements must be typed as <db:code>xs:IDREF</db:code> or <db:code>xs:IDREFS</db:code>, or, in the case of attributes, as <db:code>IDREF</db:code> or <db:code>IDREFS</db:code> in the schema.</db:para>
<db:para>In <db:code role="parameter">idref</db:code>, the <db:code>namespace URI</db:code> and the <db:code>prefix</db:code> are undefined, and the <db:code>local name</db:code> is the ID that should be looked up.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/xpath-functions/#func-idref">XQuery 1.0 and XPath 2.0 Functions and Operators, 15.5.3 fn:idref</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="root">
<db:title>[pure virtual] QXmlNodeModelIndex QAbstractXmlNodeModel::root(const QXmlNodeModelIndex &amp;<db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QXmlNodeModelIndex</db:type>
<db:methodname>root</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlNodeModelIndex root(const QXmlNodeModelIndex &amp;n) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the root node of the tree that contains the node whose index is <db:code role="parameter">n</db:code>. The caller guarantees that <db:code role="parameter">n</db:code> is not <db:code>null</db:code> and that it identifies a node in this node model.</db:para>
<db:para>If <db:code role="parameter">n</db:code> identifies a node that is a direct child of the root, parent() would return the same <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> returned by this function.</db:para>
</db:section>
<db:section xml:id="sourceLocation">
<db:title>[since 4.6] QSourceLocation QAbstractXmlNodeModel::sourceLocation(const QXmlNodeModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSourceLocation</db:type>
<db:methodname>sourceLocation</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSourceLocation sourceLocation(const QXmlNodeModelIndex &amp;index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the source location for the object with the given <db:code role="parameter">index</db:code> or a default constructed <db:link xlink:href="qsourcelocation.xml">QSourceLocation</db:link> in case no location information is available.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="stringValue">
<db:title>[pure virtual] QString QAbstractXmlNodeModel::stringValue(const QXmlNodeModelIndex &amp;<db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>stringValue</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString stringValue(const QXmlNodeModelIndex &amp;n) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string value for node <db:code role="parameter">n</db:code>.</db:para>
<db:para>The caller guarantees that <db:code role="parameter">n</db:code> is not <db:code>null</db:code> and that it belong to this <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> instance.</db:para>
<db:para>This function maps to the <db:code>dm:string-value()</db:code> accessor, which the specification completely specifies. Here's a summary:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>For processing instructions, the string value is the data section(excluding any whitespace appearing between the name and the data).</db:para>
</db:listitem>
<db:listitem>
<db:para>For text nodes, the string value equals the text node.</db:para>
</db:listitem>
<db:listitem>
<db:para>For comments, the content of the comment</db:para>
</db:listitem>
<db:listitem>
<db:para>For elements, the concatenation of all text nodes that are descendants. Note, this is not only the children, but the childrens' childrens' text nodes, and so forth.</db:para>
</db:listitem>
<db:listitem>
<db:para>For document nodes, the concatenation of all text nodes in the document.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="http://www.w3.org/TR/xpath-datamodel/#dm-string-value">XQuery 1.0 and XPath 2.0 Data Model (XDM), 5.13 string-value Accessor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="typedValue">
<db:title>[pure virtual] QVariant QAbstractXmlNodeModel::typedValue(const QXmlNodeModelIndex &amp;<db:emphasis>node</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>typedValue</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>node</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant typedValue(const QXmlNodeModelIndex &amp;node) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the typed value for node <db:code role="parameter">node</db:code>.</db:para>
<db:para>The typed value is an atomic value, which an element or attribute contains.</db:para>
<db:para>The caller guarantees that <db:code role="parameter">node</db:code> is either an element or an attribute. The implementor guarantees that the returned <db:link xlink:href="qvariant.xml">QVariant</db:link> has a value which is supported in XQuery. It cannot be an arbitrary <db:link xlink:href="qvariant.xml">QVariant</db:link> value. The implementor also guarantees that <db:link xlink:href="qabstractxmlnodemodel.xml#stringValue">stringValue</db:link>() returns a lexical representation of typedValue()(this is guaranteed by <db:link xlink:href="qsimplexmlnodemodel.xml#stringValue">QSimpleXmlNodeModel::stringValue</db:link>()).</db:para>
<db:para>If the return <db:link xlink:href="qvariant.xml">QVariant</db:link> is a default constructed variant, it signals that <db:code role="parameter">node</db:code> has no typed value.</db:para>
</db:section>
</db:section>
</db:article>
