<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Books</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to use Qt SQL classes with a model/view framework.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;bookwindow.h&quot;
#include &quot;bookdelegate.h&quot;
#include &quot;initdb.h&quot;

#include &lt;QtSql&gt;

BookWindow::BookWindow()
{
    ui.setupUi(this);

    if (!QSqlDatabase::drivers().contains(&quot;QSQLITE&quot;))
        QMessageBox::critical(this, &quot;Unable to load database&quot;, &quot;This demo needs the SQLITE driver&quot;);

    // initialize the database
    QSqlError err = initDb();
    if (err.type() != QSqlError::NoError) {
        showError(err);
        return;
    }

    // Create the data model
    model = new QSqlRelationalTableModel(ui.bookTable);
    model-&gt;setEditStrategy(QSqlTableModel::OnManualSubmit);
    model-&gt;setTable(&quot;books&quot;);

    // Remember the indexes of the columns
    authorIdx = model-&gt;fieldIndex(&quot;author&quot;);
    genreIdx = model-&gt;fieldIndex(&quot;genre&quot;);

    // Set the relations to the other database tables
    model-&gt;setRelation(authorIdx, QSqlRelation(&quot;authors&quot;, &quot;id&quot;, &quot;name&quot;));
    model-&gt;setRelation(genreIdx, QSqlRelation(&quot;genres&quot;, &quot;id&quot;, &quot;name&quot;));

    // Set the localized header captions
    model-&gt;setHeaderData(authorIdx, Qt::Horizontal, tr(&quot;Author Name&quot;));
    model-&gt;setHeaderData(genreIdx, Qt::Horizontal, tr(&quot;Genre&quot;));
    model-&gt;setHeaderData(model-&gt;fieldIndex(&quot;title&quot;), Qt::Horizontal, tr(&quot;Title&quot;));
    model-&gt;setHeaderData(model-&gt;fieldIndex(&quot;year&quot;), Qt::Horizontal, tr(&quot;Year&quot;));
    model-&gt;setHeaderData(model-&gt;fieldIndex(&quot;rating&quot;), Qt::Horizontal, tr(&quot;Rating&quot;));

    // Populate the model
    if (!model-&gt;select()) {
        showError(model-&gt;lastError());
        return;
    }

    // Set the model and hide the ID column
    ui.bookTable-&gt;setModel(model);
    ui.bookTable-&gt;setItemDelegate(new BookDelegate(ui.bookTable));
    ui.bookTable-&gt;setColumnHidden(model-&gt;fieldIndex(&quot;id&quot;), true);
    ui.bookTable-&gt;setSelectionMode(QAbstractItemView::SingleSelection);

    // Initialize the Author combo box
    ui.authorEdit-&gt;setModel(model-&gt;relationModel(authorIdx));
    ui.authorEdit-&gt;setModelColumn(model-&gt;relationModel(authorIdx)-&gt;fieldIndex(&quot;name&quot;));

    ui.genreEdit-&gt;setModel(model-&gt;relationModel(genreIdx));
    ui.genreEdit-&gt;setModelColumn(model-&gt;relationModel(genreIdx)-&gt;fieldIndex(&quot;name&quot;));

    QDataWidgetMapper *mapper = new QDataWidgetMapper(this);
    mapper-&gt;setModel(model);
    mapper-&gt;setItemDelegate(new BookDelegate(this));
    mapper-&gt;addMapping(ui.titleEdit, model-&gt;fieldIndex(&quot;title&quot;));
    mapper-&gt;addMapping(ui.yearEdit, model-&gt;fieldIndex(&quot;year&quot;));
    mapper-&gt;addMapping(ui.authorEdit, authorIdx);
    mapper-&gt;addMapping(ui.genreEdit, genreIdx);
    mapper-&gt;addMapping(ui.ratingEdit, model-&gt;fieldIndex(&quot;rating&quot;));

    connect(ui.bookTable-&gt;selectionModel(), SIGNAL(currentRowChanged(QModelIndex,QModelIndex)),
            mapper, SLOT(setCurrentModelIndex(QModelIndex)));

    ui.bookTable-&gt;setCurrentIndex(model-&gt;index(0, 0));
}

void BookWindow::showError(const QSqlError &amp;err)
{
    QMessageBox::critical(this, &quot;Unable to initialize Database&quot;,
                &quot;Error initializing database: &quot; + err.text());
}

</db:programlisting>
</db:article>
