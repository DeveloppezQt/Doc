<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVideoSurfaceFormat Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvideosurfaceformat.xml">QVideoSurfaceFormat</db:link> class specifies the stream format of a video presentation surface.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVideoSurfaceFormat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QVideoSurfaceFormat is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_video</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A video surface presents a stream of video frames. The surface's format describes the type of the frames and determines how they should be presented.</db:para>
<db:para>The core properties of a video stream required to setup a video surface are the pixel format given by <db:link xlink:href="qvideosurfaceformat.xml#pixelFormat">pixelFormat</db:link>(), and the frame dimensions given by <db:link xlink:href="qvideosurfaceformat.xml#frameSize">frameSize</db:link>().</db:para>
<db:para>If the surface is to present frames using a frame's handle a surface format will also include a handle type which is given by the <db:link xlink:href="qvideosurfaceformat.xml#handleType">handleType</db:link>() function.</db:para>
<db:para>The region of a frame that is actually displayed on a video surface is given by the <db:link xlink:href="qvideosurfaceformat.xml#viewport">viewport</db:link>(). A stream may have a viewport less than the entire region of a frame to allow for videos smaller than the nearest optimal size of a video frame. For example the width of a frame may be extended so that the start of each scan line is eight byte aligned.</db:para>
<db:para>Other common properties are the <db:link xlink:href="qvideosurfaceformat.xml#pixelAspectRatio">pixelAspectRatio</db:link>(), <db:link xlink:href="qvideosurfaceformat.xml#scanLineDirection">scanLineDirection</db:link>(), and <db:link xlink:href="qvideosurfaceformat.xml#frameRate">frameRate</db:link>(). Additionally a stream may have some additional type specific properties which are listed by the dynamicPropertyNames() function and can be accessed using the <db:link xlink:href="qvideosurfaceformat.xml#property">property</db:link>(), and <db:link xlink:href="qvideosurfaceformat.xml#setProperty">setProperty</db:link>() functions.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Direction-enum">
<db:title>enum QVideoSurfaceFormat::Direction</db:title>
<db:enumsynopsis>
<db:enumname>Direction</db:enumname>
<db:enumitem>
<db:enumidentifier>TopToBottom</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BottomToTop</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Enumerates the layout direction of video scan lines.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideosurfaceformat.xml">QVideoSurfaceFormat</db:link></db:emphasis>::TopToBottom</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Scan lines are arranged from the top of the frame to the bottom.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideosurfaceformat.xml">QVideoSurfaceFormat</db:link></db:emphasis>::BottomToTop</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Scan lines are arranged from the bottom of the frame to the top.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="YCbCrColorSpace-enum">
<db:title>enum QVideoSurfaceFormat::YCbCrColorSpace</db:title>
<db:enumsynopsis>
<db:enumname>YCbCrColorSpace</db:enumname>
<db:enumitem>
<db:enumidentifier>YCbCr_Undefined</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>YCbCr_BT601</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>YCbCr_BT709</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>YCbCr_xvYCC601</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>YCbCr_xvYCC709</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>YCbCr_JPEG</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Enumerates the Y'CbCr color space of video frames.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideosurfaceformat.xml">QVideoSurfaceFormat</db:link></db:emphasis>::YCbCr_Undefined</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No color space is specified.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideosurfaceformat.xml">QVideoSurfaceFormat</db:link></db:emphasis>::YCbCr_BT601</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A Y'CbCr color space defined by ITU-R recommendation BT.601 with Y value range from 16 to 235, and Cb/Cr range from 16 to 240. Used in standard definition video.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideosurfaceformat.xml">QVideoSurfaceFormat</db:link></db:emphasis>::YCbCr_BT709</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A Y'CbCr color space defined by ITU-R BT.709 with the same values range as YCbCr_BT601. Used for HDTV.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideosurfaceformat.xml">QVideoSurfaceFormat</db:link></db:emphasis>::YCbCr_xvYCC601</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The BT.601 color space with the value range extended to 0 to 255. It is backward compatibile with BT.601 and uses values outside BT.601 range to represent a wider range of colors.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideosurfaceformat.xml">QVideoSurfaceFormat</db:link></db:emphasis>::YCbCr_xvYCC709</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The BT.709 color space with the value range extended to 0 to 255.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvideosurfaceformat.xml">QVideoSurfaceFormat</db:link></db:emphasis>::YCbCr_JPEG</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The full range Y'CbCr color space used in JPEG files.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QVideoSurfaceFormat">
<db:title>QVideoSurfaceFormat::QVideoSurfaceFormat()</db:title>
<db:constructorsynopsis>
<db:methodname>QVideoSurfaceFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoSurfaceFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null video stream format.</db:para>
</db:section>
<db:section xml:id="QVideoSurfaceFormat-1">
<db:title>QVideoSurfaceFormat::QVideoSurfaceFormat(const QSize &amp;<db:emphasis>size</db:emphasis>, QVideoFrame::PixelFormat <db:emphasis>format</db:emphasis>, QAbstractVideoBuffer::HandleType <db:emphasis>type</db:emphasis> = QAbstractVideoBuffer::NoHandle)</db:title>
<db:constructorsynopsis>
<db:methodname>QVideoSurfaceFormat</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QVideoFrame::PixelFormat</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractVideoBuffer::HandleType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>QAbstractVideoBuffer::NoHandle</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoSurfaceFormat(const QSize &amp;size, QVideoFrame::PixelFormat format, QAbstractVideoBuffer::HandleType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Contructs a description of stream which receives stream of <db:code role="parameter">type</db:code> buffers with given frame <db:code role="parameter">size</db:code> and pixel <db:code role="parameter">format</db:code>.</db:para>
</db:section>
<db:section xml:id="QVideoSurfaceFormat-2">
<db:title>QVideoSurfaceFormat::QVideoSurfaceFormat(const QVideoSurfaceFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QVideoSurfaceFormat</db:methodname>
<db:methodparam>
<db:type>const QVideoSurfaceFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoSurfaceFormat(const QVideoSurfaceFormat &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QVideoSurfaceFormat">
<db:title>QVideoSurfaceFormat::~QVideoSurfaceFormat()</db:title>
<db:destructorsynopsis>
<db:methodname>~QVideoSurfaceFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QVideoSurfaceFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a video stream description.</db:para>
</db:section>
<db:section xml:id="frameHeight">
<db:title>int QVideoSurfaceFormat::frameHeight() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>frameHeight</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int frameHeight() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the height of frame in a video stream.</db:para>
</db:section>
<db:section xml:id="frameRate">
<db:title>qreal QVideoSurfaceFormat::frameRate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>frameRate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal frameRate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the frame rate of a video stream in frames per second.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#setFrameRate">setFrameRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameSize">
<db:title>QSize QVideoSurfaceFormat::frameSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>frameSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize frameSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the dimensions of frames in a video stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#setFrameSize">setFrameSize</db:link>()</db:member>
<db:member><db:link xlink:href="qvideosurfaceformat.xml#frameWidth">frameWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qvideosurfaceformat.xml#frameHeight">frameHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameWidth">
<db:title>int QVideoSurfaceFormat::frameWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>frameWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int frameWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of frames in a video stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#frameSize">frameSize</db:link>()</db:member>
<db:member><db:link xlink:href="qvideosurfaceformat.xml#frameHeight">frameHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="handleType">
<db:title>QAbstractVideoBuffer::HandleType QVideoSurfaceFormat::handleType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractVideoBuffer::HandleType</db:type>
<db:methodname>handleType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractVideoBuffer::HandleType handleType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of handle the surface uses to present the frame data.</db:para>
<db:para>If the handle type is <db:code>QAbstractVideoBuffer::NoHandle</db:code>, buffers with any handle type are valid provided they can be <db:link xlink:href="qabstractvideobuffer.xml#map">mapped</db:link> with the <db:link xlink:href="qabstractvideobuffer.xml#MapMode-enum">QAbstractVideoBuffer::ReadOnly</db:link> flag. If the handleType() is not <db:link xlink:href="qabstractvideobuffer.xml#HandleType-enum">QAbstractVideoBuffer::NoHandle</db:link> then the handle type of the buffer must be the same as that of the surface format.</db:para>
</db:section>
<db:section xml:id="isMirrored">
<db:title>[since 5.11] bool QVideoSurfaceFormat::isMirrored() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isMirrored</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isMirrored() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the surface is mirrored around its vertical axis. This is typically needed for video frames coming from a front camera of a mobile device.</db:para>
<db:note>
<db:para>The mirroring here differs from <db:link xlink:href="qimage.xml#mirrored">QImage::mirrored</db:link>, as a vertically mirrored <db:link xlink:href="qimage.xml">QImage</db:link> will be mirrored around its x-axis.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.11.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QVideoSurfaceFormat::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Identifies if a video surface format has a valid pixel format and frame size.</db:para>
<db:para>Returns true if the format is valid, and false otherwise.</db:para>
</db:section>
<db:section xml:id="pixelAspectRatio">
<db:title>QSize QVideoSurfaceFormat::pixelAspectRatio() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>pixelAspectRatio</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize pixelAspectRatio() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a video stream's pixel aspect ratio.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#setPixelAspectRatio">setPixelAspectRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixelFormat">
<db:title>QVideoFrame::PixelFormat QVideoSurfaceFormat::pixelFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVideoFrame::PixelFormat</db:type>
<db:methodname>pixelFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoFrame::PixelFormat pixelFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pixel format of frames in a video stream.</db:para>
</db:section>
<db:section xml:id="property">
<db:title>QVariant QVideoSurfaceFormat::property(const char *<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>property</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant property(const char *name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the video format's <db:code role="parameter">name</db:code> property.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#setProperty">setProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyNames">
<db:title>QList&lt;QByteArray&gt; QVideoSurfaceFormat::propertyNames() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>propertyNames</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; propertyNames() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of video format dynamic property names.</db:para>
</db:section>
<db:section xml:id="scanLineDirection">
<db:title>QVideoSurfaceFormat::Direction QVideoSurfaceFormat::scanLineDirection() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVideoSurfaceFormat::Direction</db:type>
<db:methodname>scanLineDirection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoSurfaceFormat::Direction scanLineDirection() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the direction of scan lines.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#setScanLineDirection">setScanLineDirection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFrameRate">
<db:title>void QVideoSurfaceFormat::setFrameRate(qreal <db:emphasis>rate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFrameRate</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>rate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFrameRate(qreal rate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the frame <db:code role="parameter">rate</db:code> of a video stream in frames per second.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#frameRate">frameRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFrameSize">
<db:title>void QVideoSurfaceFormat::setFrameSize(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFrameSize</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFrameSize(const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the size of frames in a video stream to <db:code role="parameter">size</db:code>.</db:para>
<db:para>This will reset the <db:link xlink:href="qvideosurfaceformat.xml#viewport">viewport</db:link>() to fill the entire frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#frameSize">frameSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFrameSize-1">
<db:title>void QVideoSurfaceFormat::setFrameSize(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFrameSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFrameSize(int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code> of frames in a video stream.</db:para>
<db:para>This will reset the <db:link xlink:href="qvideosurfaceformat.xml#viewport">viewport</db:link>() to fill the entire frame.</db:para>
</db:section>
<db:section xml:id="setMirrored">
<db:title>[since 5.11] void QVideoSurfaceFormat::setMirrored(bool <db:emphasis>mirrored</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMirrored</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>mirrored</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMirrored(bool mirrored)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets if the surface is <db:code role="parameter">mirrored</db:code> around its vertical axis. This is typically needed for video frames coming from a front camera of a mobile device. Default value is false.</db:para>
<db:note>
<db:para>The mirroring here differs from <db:link xlink:href="qimage.xml#mirrored">QImage::mirrored</db:link>, as a vertically mirrored <db:link xlink:href="qimage.xml">QImage</db:link> will be mirrored around its x-axis.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#isMirrored">isMirrored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPixelAspectRatio">
<db:title>void QVideoSurfaceFormat::setPixelAspectRatio(const QSize &amp;<db:emphasis>ratio</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPixelAspectRatio</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>ratio</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPixelAspectRatio(const QSize &amp;ratio)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a video stream's pixel aspect <db:code role="parameter">ratio</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#pixelAspectRatio">pixelAspectRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPixelAspectRatio-1">
<db:title>void QVideoSurfaceFormat::setPixelAspectRatio(int <db:emphasis>horizontal</db:emphasis>, int <db:emphasis>vertical</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPixelAspectRatio</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>horizontal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>vertical</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPixelAspectRatio(int horizontal, int vertical)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the <db:code role="parameter">horizontal</db:code> and <db:code role="parameter">vertical</db:code> elements of a video stream's pixel aspect ratio.</db:para>
</db:section>
<db:section xml:id="setProperty">
<db:title>void QVideoSurfaceFormat::setProperty(const char *<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setProperty</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setProperty(const char *name, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the video format's <db:code role="parameter">name</db:code> property to <db:code role="parameter">value</db:code>.</db:para>
<db:para>Trying to set a read only property will be ignored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#property">property</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScanLineDirection">
<db:title>void QVideoSurfaceFormat::setScanLineDirection(QVideoSurfaceFormat::Direction <db:emphasis>direction</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setScanLineDirection</db:methodname>
<db:methodparam>
<db:type>QVideoSurfaceFormat::Direction</db:type>
<db:parameter>direction</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setScanLineDirection(QVideoSurfaceFormat::Direction direction)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">direction</db:code> of scan lines.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#scanLineDirection">scanLineDirection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setViewport">
<db:title>void QVideoSurfaceFormat::setViewport(const QRect &amp;<db:emphasis>viewport</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setViewport</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>viewport</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setViewport(const QRect &amp;viewport)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the viewport of a video stream to <db:code role="parameter">viewport</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#viewport">viewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setYCbCrColorSpace">
<db:title>void QVideoSurfaceFormat::setYCbCrColorSpace(QVideoSurfaceFormat::YCbCrColorSpace <db:emphasis>space</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setYCbCrColorSpace</db:methodname>
<db:methodparam>
<db:type>QVideoSurfaceFormat::YCbCrColorSpace</db:type>
<db:parameter>space</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setYCbCrColorSpace(QVideoSurfaceFormat::YCbCrColorSpace space)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the Y'CbCr color <db:code role="parameter">space</db:code> of a video stream. It is only used with raw YUV frame types.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#yCbCrColorSpace">yCbCrColorSpace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>QSize QVideoSurfaceFormat::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a suggested size in pixels for the video stream.</db:para>
<db:para>This is the size of the viewport scaled according to the pixel aspect ratio.</db:para>
</db:section>
<db:section xml:id="viewport">
<db:title>QRect QVideoSurfaceFormat::viewport() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>viewport</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect viewport() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the viewport of a video stream.</db:para>
<db:para>The viewport is the region of a video frame that is actually displayed.</db:para>
<db:para>By default the viewport covers an entire frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#setViewport">setViewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="yCbCrColorSpace">
<db:title>QVideoSurfaceFormat::YCbCrColorSpace QVideoSurfaceFormat::yCbCrColorSpace() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVideoSurfaceFormat::YCbCrColorSpace</db:type>
<db:methodname>yCbCrColorSpace</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoSurfaceFormat::YCbCrColorSpace yCbCrColorSpace() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Y'CbCr color space of a video stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideosurfaceformat.xml#setYCbCrColorSpace">setYCbCrColorSpace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QVideoSurfaceFormat::operator!=(const QVideoSurfaceFormat &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QVideoSurfaceFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QVideoSurfaceFormat &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">other</db:code> is different to this video format, and false if they are the same.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QVideoSurfaceFormat &amp;QVideoSurfaceFormat::operator=(const QVideoSurfaceFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVideoSurfaceFormat &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QVideoSurfaceFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoSurfaceFormat &amp; operator=(const QVideoSurfaceFormat &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the values of <db:code role="parameter">other</db:code> to this object.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QVideoSurfaceFormat::operator==(const QVideoSurfaceFormat &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QVideoSurfaceFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QVideoSurfaceFormat &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">other</db:code> is the same as this video format, and false if they are different.</db:para>
</db:section>
</db:section>
</db:article>
