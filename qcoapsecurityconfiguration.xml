<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCoapSecurityConfiguration Class</db:title>
<db:productname>QtCoap</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt CoAP Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcoapsecurityconfiguration.xml">QCoapSecurityConfiguration</db:link> class holds configuration options during the authentication process.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCoapSecurityConfiguration</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += coap</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>It holds information such as client identity, pre shared key, information about certificates, and so on.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCoapSecurityConfiguration">
<db:title>QCoapSecurityConfiguration::QCoapSecurityConfiguration()</db:title>
<db:constructorsynopsis>
<db:methodname>QCoapSecurityConfiguration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapSecurityConfiguration()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qcoapsecurityconfiguration.xml">QCoapSecurityConfiguration</db:link>.</db:para>
</db:section>
<db:section xml:id="QCoapSecurityConfiguration-1">
<db:title>QCoapSecurityConfiguration::QCoapSecurityConfiguration(const QCoapSecurityConfiguration &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCoapSecurityConfiguration</db:methodname>
<db:methodparam>
<db:type>const QCoapSecurityConfiguration &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapSecurityConfiguration(const QCoapSecurityConfiguration &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Copies the configuration and state of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QCoapSecurityConfiguration-2">
<db:title>QCoapSecurityConfiguration::QCoapSecurityConfiguration(QCoapSecurityConfiguration &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCoapSecurityConfiguration</db:methodname>
<db:methodparam>
<db:type>QCoapSecurityConfiguration &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapSecurityConfiguration(QCoapSecurityConfiguration &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qcoapsecurityconfiguration.xml">QCoapSecurityConfiguration</db:link>, making it point to the same object as <db:code role="parameter">other</db:code> was pointing to.</db:para>
</db:section>
<db:section xml:id="dtor.QCoapSecurityConfiguration">
<db:title>QCoapSecurityConfiguration::~QCoapSecurityConfiguration()</db:title>
<db:destructorsynopsis>
<db:methodname>~QCoapSecurityConfiguration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCoapSecurityConfiguration()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Releases any resources held by <db:link xlink:href="qcoapsecurityconfiguration.xml">QCoapSecurityConfiguration</db:link>.</db:para>
</db:section>
<db:section xml:id="caCertificates">
<db:title>QList&lt;QSslCertificate&gt; QCoapSecurityConfiguration::caCertificates() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QSslCertificate&gt;</db:type>
<db:methodname>caCertificates</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QSslCertificate&gt; caCertificates() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this connection's certificate authority certificate database.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapsecurityconfiguration.xml#setCaCertificates">setCaCertificates</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultCipherString">
<db:title>QString QCoapSecurityConfiguration::defaultCipherString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>defaultCipherString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString defaultCipherString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default cipher string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapsecurityconfiguration.xml#setDefaultCipherString">setDefaultCipherString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localCertificateChain">
<db:title>QList&lt;QSslCertificate&gt; QCoapSecurityConfiguration::localCertificateChain() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QSslCertificate&gt;</db:type>
<db:methodname>localCertificateChain</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QSslCertificate&gt; localCertificateChain() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the certificate chain to be presented to the peer during the handshake.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapsecurityconfiguration.xml#setLocalCertificateChain">setLocalCertificateChain</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preSharedKey">
<db:title>QByteArray QCoapSecurityConfiguration::preSharedKey() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>preSharedKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray preSharedKey() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pre shared key.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapsecurityconfiguration.xml#setPreSharedKey">setPreSharedKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preSharedKeyIdentity">
<db:title>QByteArray QCoapSecurityConfiguration::preSharedKeyIdentity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>preSharedKeyIdentity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray preSharedKeyIdentity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the PSK client identity.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapsecurityconfiguration.xml#setPreSharedKeyIdentity">setPreSharedKeyIdentity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="privateKey">
<db:title>QCoapPrivateKey QCoapSecurityConfiguration::privateKey() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCoapPrivateKey</db:type>
<db:methodname>privateKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapPrivateKey privateKey() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the private key assigned to the connection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapsecurityconfiguration.xml#setPrivateKey">setPrivateKey</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapsecurityconfiguration.xml#localCertificateChain">localCertificateChain</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCaCertificates">
<db:title>void QCoapSecurityConfiguration::setCaCertificates(const QList&lt;QSslCertificate&gt; &amp;<db:emphasis>certificates</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCaCertificates</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QSslCertificate&gt; &amp;</db:type>
<db:parameter>certificates</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCaCertificates(const QList&lt;QSslCertificate&gt; &amp;certificates)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">certificates</db:code> as the certificate authority database for the connection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapsecurityconfiguration.xml#caCertificates">caCertificates</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultCipherString">
<db:title>void QCoapSecurityConfiguration::setDefaultCipherString(const QString &amp;<db:emphasis>cipherString</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDefaultCipherString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>cipherString</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDefaultCipherString(const QString &amp;cipherString)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the SSL cipher string to <db:code role="parameter">cipherString</db:code>.</db:para>
<db:para>The security back-end (for example OpenSSL) might not include ciphers required for <db:link xlink:href="https://tools.ietf.org/html/rfc7252#section-9">RFC 7252</db:link> by default. This method specifies which ciphers the back-end should use. For example to enable CCM ciphers required by RFC, &quot;AESCCM&quot; can be passed as <db:code role="parameter">cipherString</db:code>.</db:para>
<db:para>See the <db:link xlink:href="https://www.openssl.org/docs/manmaster/man1/ciphers.html#CIPHER-STRINGS">OpenSSL docs</db:link> for more information about cipher strings.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapsecurityconfiguration.xml#defaultCipherString">defaultCipherString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLocalCertificateChain">
<db:title>void QCoapSecurityConfiguration::setLocalCertificateChain(const QList&lt;QSslCertificate&gt; &amp;<db:emphasis>localChain</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLocalCertificateChain</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QSslCertificate&gt; &amp;</db:type>
<db:parameter>localChain</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLocalCertificateChain(const QList&lt;QSslCertificate&gt; &amp;localChain)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">localChain</db:code> as the certificate chain to present to the peer during the handshake.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapsecurityconfiguration.xml#localCertificateChain">localCertificateChain</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPreSharedKey">
<db:title>void QCoapSecurityConfiguration::setPreSharedKey(const QByteArray &amp;<db:emphasis>preSharedKey</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPreSharedKey</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>preSharedKey</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPreSharedKey(const QByteArray &amp;preSharedKey)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pre shared key to <db:code role="parameter">preSharedKey</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapsecurityconfiguration.xml#preSharedKey">preSharedKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPreSharedKeyIdentity">
<db:title>void QCoapSecurityConfiguration::setPreSharedKeyIdentity(const QByteArray &amp;<db:emphasis>identity</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPreSharedKeyIdentity</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>identity</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPreSharedKeyIdentity(const QByteArray &amp;identity)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the PSK client identity (to be advised to the server) to <db:code role="parameter">identity</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapsecurityconfiguration.xml#preSharedKeyIdentity">preSharedKeyIdentity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrivateKey">
<db:title>void QCoapSecurityConfiguration::setPrivateKey(const QCoapPrivateKey &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPrivateKey</db:methodname>
<db:methodparam>
<db:type>const QCoapPrivateKey &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPrivateKey(const QCoapPrivateKey &amp;key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the connection's private key to <db:code role="parameter">key</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapsecurityconfiguration.xml#privateKey">privateKey</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapsecurityconfiguration.xml#setLocalCertificateChain">setLocalCertificateChain</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QCoapSecurityConfiguration::swap(QCoapSecurityConfiguration &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QCoapSecurityConfiguration &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QCoapSecurityConfiguration &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this security configuration with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QCoapSecurityConfiguration &amp;QCoapSecurityConfiguration::operator=(const QCoapSecurityConfiguration &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCoapSecurityConfiguration &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QCoapSecurityConfiguration &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCoapSecurityConfiguration &amp; operator=(const QCoapSecurityConfiguration &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies the configuration and state of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
