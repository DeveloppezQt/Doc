<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_add_big_resources</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Compiles big binary resources into object code.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt6-add-big-resources"/>
<db:para>Compiles big binary resources into object code.</db:para>
<db:para>The command is defined in the Core component of the Qt6 package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Core)
</db:programlisting>
<db:para>This command was introduced in Qt 5.12.</db:para>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_add_big_resources(&amp;lt;VAR&amp;gt; file1.qrc [file2.qrc ...]
                     [OPTIONS ...])
</db:programlisting>
<db:para>If <db:link xlink:href="">versionless commands</db:link> are disabled, use qt6_add_big_resources() instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>Creates compiled object files from Qt resource files using the <db:link xlink:href="">Resource Compiler (rcc)</db:link>. Paths to the generated files are added to &lt;VAR&gt;.</db:para>
<db:para>This is similar to <db:link xlink:href="qt-add-resources.xml">qt_add_resources</db:link>, but directly generates object files (.o, .obj) files instead of C++ source code. This allows to embed bigger resources, where compiling to C++ sources and then to binaries would be too time consuming or memory intensive.</db:para>
<db:note>
<db:para>The file1.qrc will not be treated as a source file by Qt Creator. It needs to be added as a source file to a CMake target and have the property SKIP_AUTORCC set to ON.</db:para>
</db:note>
<db:warning>
<db:para>This command is not supported when building for iOS, use <db:link xlink:href="qt-add-resources.xml">qt_add_resources</db:link> instead. See <db:link xlink:href="https://bugreports.qt.io/browse/QTBUG-103497">QTBUG-103497</db:link> for details.</db:para>
</db:warning>
</db:section>
<db:section xml:id="arguments">
<db:title>Arguments</db:title>
<db:para>You can set additional OPTIONS that should be added to the rcc calls. You can find possible options in the <db:link xlink:href="">rcc documentation</db:link>.</db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:programlisting language="cpp">set(SOURCES main.cpp)
qt_add_big_resources(SOURCES big_resource.qrc)

# Have big_resource.qrc treated as a source file by Qt Creator
list(APPEND SOURCES big_resource.qrc)
set_property(SOURCE big_resource.qrc PROPERTY SKIP_AUTORCC ON)

add_executable(myapp ${SOURCES})
</db:programlisting>
</db:section>
</db:article>
