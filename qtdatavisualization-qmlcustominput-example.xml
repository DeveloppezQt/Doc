<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 2 Custom Input Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Customizing input in a QML application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Quick 2 Custom Input example shows how to customize the 3D graph controls from Qt Quick 2 using the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> to capture and process mouse events in QML. Custom input handling code in this example shows how the camera is now controlled by using <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> to animate the camera and item selection is done on mouseover rather than clicking any mouse buttons. Also the code shows how to implement similar zoom with mouse wheel functionality as the default input handler implements.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlcustominput-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="removing-default-input-handling">
<db:title>Removing Default Input Handling</db:title>
<db:para>The default input handling mechanism is disabled by setting the inputHandler property to null.</db:para>
<db:programlisting language="qml">Scatter3D {
...
inputHandler: null
...
</db:programlisting>
</db:section>
<db:section xml:id="implementing-custom-selection-handling">
<db:title>Implementing Custom Selection Handling</db:title>
<db:para>The on mouseover selection handling is implemented using standard <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> to capture the mouse events. The mouse area is configured to capture hover events and has two custom properties for <db:code>mouseX</db:code> and <db:code>mouseY</db:code> to store the last known mouse coordinates.</db:para>
<db:programlisting language="qml">MouseArea {
    id: inputArea
    anchors.fill: parent
    hoverEnabled: true
    acceptedButtons: Qt.LeftButton | Qt.RightButton
    property int mouseX: -1
    property int mouseY: -1
</db:programlisting>
<db:para>Whenever a pointer movement related signal is received the code updates the <db:code>mouseX</db:code> and <db:code>mouseY</db:code> properties.</db:para>
<db:programlisting language="qml">onPositionChanged: {
    mouseX = mouse.x;
    mouseY = mouse.y;
}
</db:programlisting>
<db:para>As the selection is one shot, and is cleared each time a 3D frame is rendered, a timer is setup to retrigger selection so that the selection moves to the item currently under the mouse cursor as the camera animates around the graph even when the mouse cursor is not moving.</db:para>
<db:programlisting language="qml">Timer {
    id: reselectTimer
    interval: 10
    running: true
    repeat: true
    onTriggered: {
        scatterGraph.scene.selectionQueryPosition = Qt.point(inputArea.mouseX, inputArea.mouseY);
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="implementing-custom-zoom-handling">
<db:title>Implementing Custom Zoom Handling</db:title>
<db:para>The camera has a zoom factor that represents amount of zoom in percentages. In this example the zoom range is limited between 10% and 500%. This range is then divided to four subranges where angleDelta is scaled to different amount of zoom change based on the current subrange.</db:para>
<db:programlisting language="cpp">    ...
onWheel: {
    // Adjust zoom level based on what zoom range we're in.
    var zoomLevel = scatterGraph.scene.activeCamera.zoomLevel;
    if (zoomLevel &amp;gt; 100)
        zoomLevel += wheel.angleDelta.y / 12.0;
    else if (zoomLevel &amp;gt; 50)
        zoomLevel += wheel.angleDelta.y / 60.0;
    else
        zoomLevel += wheel.angleDelta.y / 120.0;
    if (zoomLevel &amp;gt; 500)
        zoomLevel = 500;
    else if (zoomLevel &amp;lt; 10)
        zoomLevel = 10;

    scatterGraph.scene.activeCamera.zoomLevel = zoomLevel;
}
    ...
</db:programlisting>
</db:section>
<db:section xml:id="implementing-custom-camera-handling">
<db:title>Implementing Custom Camera Handling</db:title>
<db:para>The camera is animated to constantly rotate around the graph with two animations. The rotation around the graph is done with a simple <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> that just increments during 20 seconds from 0 degrees to 360 degrees and sets the <db:link xlink:href="q3dcamera.xml#xRotation-prop">Q3DCamera::xRotation</db:link> property.</db:para>
<db:programlisting language="qml">NumberAnimation {
    id: cameraAnimationX
    loops: Animation.Infinite
    running: true
    target: scatterGraph.scene.activeCamera
    property:&quot;xRotation&quot;
    from: 0.0
    to: 360.0
    duration: 20000
}
</db:programlisting>
<db:para>The camera movement up and down is implemented with a <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> that varies the <db:link xlink:href="q3dcamera.xml#yRotation-prop">Q3DCamera::yRotation</db:link> property of the camera from 5 degrees to 45 degrees and back with in and out easing.</db:para>
<db:programlisting language="qml">SequentialAnimation {
    id: cameraAnimationY
    loops: Animation.Infinite
    running: true

    NumberAnimation {
        target: scatterGraph.scene.activeCamera
        property:&quot;yRotation&quot;
        from: 5.0
        to: 45.0
        duration: 9000
        easing.type: Easing.InOutSine
    }

    NumberAnimation {
        target: scatterGraph.scene.activeCamera
        property:&quot;yRotation&quot;
        from: 45.0
        to: 5.0
        duration: 9000
        easing.type: Easing.InOutSine
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmlcustominput/main.cpp">qmlcustominput/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlcustominput/qml/qmlcustominput/Data.qml">qmlcustominput/qml/qmlcustominput/Data.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlcustominput/qml/qmlcustominput/NewButton.qml">qmlcustominput/qml/qmlcustominput/NewButton.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlcustominput/qml/qmlcustominput/main.qml">qmlcustominput/qml/qmlcustominput/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlcustominput/qmlcustominput.pro">qmlcustominput/qmlcustominput.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlcustominput/qmlcustominput.qrc">qmlcustominput/qmlcustominput.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
