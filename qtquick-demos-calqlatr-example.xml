<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Demo - Calqlatr</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A QML app designed for portrait devices that uses custom components, animated with <db:link xlink:href="qml-qtquick-animationcontroller.xml">AnimationController</db:link>, and JavaScript for the application logic.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquick-demo-calqlatr.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Calqlatr</db:emphasis> demonstrates various QML and <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> features, such as displaying custom components and using animation to move the components around in the application view. The application logic is implemented in JavaScript and the appearance is implemented in QML.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="displaying-custom-components">
<db:title>Displaying Custom Components</db:title>
<db:para>In the Calqlatr application, we use the following custom types that are each defined in a separate .qml file:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Button.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>Display.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>NumberPad.qml</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To use the custom types, we add an import statement to the main QML file, calqlatr.qml that imports the folder called <db:code>content</db:code> where the types are located:</db:para>
<db:programlisting language="cpp">import &quot;content&quot;
</db:programlisting>
<db:para>We can then display custom components by adding the component types to any QML file. For example, we use the NumberPad type in calqlatr.qml to create the number pad of the calculator. We place the type inside an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> QML type, which is the base type for all visual items in Qt Quick:</db:para>
<db:programlisting language="cpp">    Item {
        id: pad
        width: 180
        NumberPad { id: numPad; y: 10; anchors.horizontalCenter: parent.horizontalCenter }
    }

</db:programlisting>
<db:para>Further, we use the Button type in the <db:code>NumberPad</db:code> type to create the calculator buttons. Button.qml specifies the basic properties for a button that we can modify for each button instance in NumberPad.qml. For the digit and separator buttons, we additionally specify the text property using the property alias <db:code>text</db:code> that we define in Button.qml.</db:para>
<db:para>For the operator buttons, we also specify another color (green) using the property alias <db:code>color</db:code> and set the operator property to <db:code>true</db:code>. We use the operator property in functions that perform the calculations.</db:para>
<db:para>We place the buttons inside a <db:link xlink:href="qml-qtquick-grid.xml">Grid</db:link> QML type to position them in a grid:</db:para>
<db:programlisting language="cpp">Grid {
    columns: 3
    columnSpacing: 32
    rowSpacing: 16

    signal buttonPressed

    Button { text: &quot;7&quot; }
    Button { text: &quot;8&quot; }
    Button { text: &quot;9&quot; }
    Button { text: &quot;4&quot; }
    Button { text: &quot;5&quot; }
    Button { text: &quot;6&quot; }
    Button { text: &quot;1&quot; }
    Button { text: &quot;2&quot; }
    Button { text: &quot;3&quot; }
    Button { text: &quot;0&quot; }
    Button { text: &quot;.&quot;; dimmable: true }
    Button { text: &quot; &quot; }
    Button { text: &quot;±&quot;; color: &quot;#6da43d&quot;; operator: true; dimmable: true }
    Button { text: &quot;−&quot;; color: &quot;#6da43d&quot;; operator: true; dimmable: true }
    Button { text: &quot;+&quot;; color: &quot;#6da43d&quot;; operator: true; dimmable: true }
    Button { text: &quot;√&quot;; color: &quot;#6da43d&quot;; operator: true; dimmable: true }
    Button { text: &quot;÷&quot;; color: &quot;#6da43d&quot;; operator: true; dimmable: true }
    Button { text: &quot;×&quot;; color: &quot;#6da43d&quot;; operator: true; dimmable: true }
    Button { text: &quot;C&quot;; color: &quot;#6da43d&quot;; operator: true }
    Button { text: &quot; &quot;; color: &quot;#6da43d&quot;; operator: true }
    Button { text: &quot;=&quot;; color: &quot;#6da43d&quot;; operator: true; dimmable: true }
}

</db:programlisting>
<db:para>Some of the buttons also have a <db:code>dimmable</db:code> property set, meaning that they can be visually disabled (dimmed) whenever the calculator engine does not accept input from that button. As an example, the button for square root operator is dimmed for negative values.</db:para>
</db:section>
<db:section xml:id="animating-components">
<db:title>Animating Components</db:title>
<db:para>We use the Display type to display calculations. In Display.qml, we use images to make the display component look like a slip of paper that contains a grip. Users can drag the grip to move the display from left to right.</db:para>
<db:para>When users release the grip, the <db:link xlink:href="qml-qtquick-animationcontroller.xml">AnimationController</db:link> QML type that we define in the calqlatr.qml file finishes running the controlled animation in either a forwards or a backwards direction. To run the animation, we call either completeToEnd() or completeToBeginning(), depending on the direction. We do this in the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>'s <db:code>onReleased</db:code> signal handler, where <db:code>controller</db:code> is the id of our <db:link xlink:href="qml-qtquick-animationcontroller.xml">AnimationController</db:link>:</db:para>
<db:programlisting language="cpp">        MouseArea {
            ...
            onReleased: {
                if (rewind)
                    controller.completeToBeginning()
                else
                    controller.completeToEnd()
            }
        }
</db:programlisting>
<db:para>Unlike other QML animation types, <db:link xlink:href="qml-qtquick-animationcontroller.xml">AnimationController</db:link> is not driven by internal timers but by explicitly setting its progress property to a value between <db:code>0.0</db:code> and <db:code>1.0</db:code>.</db:para>
<db:para>Inside the <db:link xlink:href="qml-qtquick-animationcontroller.xml">AnimationController</db:link>, we run two <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> instances in parallel to move the number pad and the display components simultaneously to the opposite sides of the view. In addition, we run a <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> instance to scale the number pad during the transition, giving the animation some depth.</db:para>
<db:programlisting language="cpp">    AnimationController {
        id: controller
        animation: ParallelAnimation {
            id: anim
            NumberAnimation { target: display; property: &quot;x&quot;; duration: 400; from: -16; to: window.width - display.width; easing.type: Easing.InOutQuad }
            NumberAnimation { target: pad; property: &quot;x&quot;; duration: 400; from: window.width - pad.width; to: 0; easing.type: Easing.InOutQuad }
            SequentialAnimation {
                NumberAnimation { target: pad; property: &quot;scale&quot;; duration: 200; from: 1; to: 0.97; easing.type: Easing.InOutQuad }
                NumberAnimation { target: pad; property: &quot;scale&quot;; duration: 200; from: 0.97; to: 1; easing.type: Easing.InOutQuad }
            }
        }
    }

</db:programlisting>
<db:para>We use the easing curve of the type <db:code>Easing.InOutQuad</db:code> to accelerate the motion until halfway and then decelerate it.</db:para>
<db:para>In Button.qml, the text colors of the number pad buttons are also animated.</db:para>
<db:programlisting language="cpp">    Text {
        id: textItem
        ...
        color: (dimmable &amp;&amp; dimmed) ? Qt.darker(button.color) : button.color
        Behavior on color { ColorAnimation { duration: 120; easing.type: Easing.OutElastic} }
        states: [
            State {
                name: &quot;pressed&quot;
                when: mouse.pressed &amp;&amp; !dimmed
                PropertyChanges {
                    target: textItem
                    color: Qt.lighter(button.color)
                }
            }
        ]
    }

</db:programlisting>
<db:para>We use <db:link xlink:href="qml-qtqml-qt.xml#darker-method">Qt.darker</db:link>() to darken the color when the button is dimmed, and <db:link xlink:href="qml-qtqml-qt.xml#lighter-method">Qt.lighter</db:link>() to <db:emphasis>light up</db:emphasis> the button when pressed. The latter is done in a separate <db:link xlink:href="qml-qtquick-state.xml">state</db:link> called <db:emphasis>&quot;pressed&quot;</db:emphasis>, which activates when the <db:code>pressed</db:code> property of the button's <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is set.</db:para>
<db:para>The color changes are animated by defining a <db:link xlink:href="qml-qtquick-behavior.xml">Behavior</db:link> on the <db:code>color</db:code> property.</db:para>
<db:para>In order to dynamically change the <db:code>dimmed</db:code> property of all the buttons of the <db:code>NumberPad</db:code>, we connect its <db:code>buttonPressed</db:code> signal to the <db:code>Button</db:code>'s <db:code>updateDimmed()</db:code> function in Button.qml:</db:para>
<db:programlisting language="cpp">    function updateDimmed() {
        dimmed = window.isButtonDisabled(button.text)
    }

    Component.onCompleted: {
        numPad.buttonPressed.connect(updateDimmed)
        updateDimmed()
    }
</db:programlisting>
<db:para>This way, when a button is pressed, all buttons on the <db:code>NumPad</db:code> receive a <db:code>buttonPressed</db:code> signal and are activated or deactivated according to the state of the calculator engine.</db:para>
</db:section>
<db:section xml:id="performing-calculations">
<db:title>Performing Calculations</db:title>
<db:para>The calculator.js file defines our calculator engine. It contains variables to store the calculator state, and functions that are called when the user presses the digit and operator buttons. To use the engine, we import calculator.js in the calqlatr.qml file as <db:code>CalcEngine</db:code>:</db:para>
<db:programlisting language="cpp">import &quot;content/calculator.js&quot; as CalcEngine
</db:programlisting>
<db:para>Importing the engine creates a new instance of it. Therefore, we only do it in the main QML file, <db:code>calqlatr.qml</db:code>. The root item defined in this file contains helper functions that allow other types to access the calculator engine:</db:para>
<db:programlisting language="cpp">    function operatorPressed(operator) {
        CalcEngine.operatorPressed(operator)
        numPad.buttonPressed()
    }
    function digitPressed(digit) {
        CalcEngine.digitPressed(digit)
        numPad.buttonPressed()
    }
    function isButtonDisabled(op) {
        return CalcEngine.disabled(op)
    }

</db:programlisting>
<db:para>When users press a digit, the text from the digit appears on the display. When they press an operator, the appropriate calculation is performed, and the result can be displayed using the equals (=) operator. The clear (C) operator resets the calculator engine.</db:para>
</db:section>
<db:section xml:id="list-of-files">
<db:title>List of Files</db:title>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="demos/calqlatr/calqlatr.pro">demos/calqlatr/calqlatr.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/calqlatr/calqlatr.qml">demos/calqlatr/calqlatr.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/calqlatr/calqlatr.qmlproject">demos/calqlatr/calqlatr.qmlproject</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/calqlatr/calqlatr.qrc">demos/calqlatr/calqlatr.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/calqlatr/content/Button.qml">demos/calqlatr/content/Button.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/calqlatr/content/Display.qml">demos/calqlatr/content/Display.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/calqlatr/content/NumberPad.qml">demos/calqlatr/content/NumberPad.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/calqlatr/content/calculator.js">demos/calqlatr/content/calculator.js</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/calqlatr/main.cpp">demos/calqlatr/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="demos/calqlatr/content/images/paper-edge-left.png">demos/calqlatr/content/images/paper-edge-left.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/calqlatr/content/images/paper-edge-right.png">demos/calqlatr/content/images/paper-edge-right.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/calqlatr/content/images/paper-grip.png">demos/calqlatr/content/images/paper-grip.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QML Applications</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section></db:section></db:article>
