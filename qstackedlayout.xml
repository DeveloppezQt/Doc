<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStackedLayout Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link> class provides a stack of widgets where only one widget is visible at a time.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStackedLayout</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlayout.xml" xlink:role="class">QLayout</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStackedLayout is part of <db:simplelist><db:member>geomanagement</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link> can be used to create a user interface similar to the one provided by <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link>. There is also a convenience <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link> class built on top of <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link>.</db:para>
<db:para>A <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link> can be populated with a number of child widgets (&quot;pages&quot;). For example:</db:para>
<db:programlisting language="cpp">    QWidget *firstPageWidget = new QWidget;
    QWidget *secondPageWidget = new QWidget;
    QWidget *thirdPageWidget = new QWidget;

    QStackedLayout *stackedLayout = new QStackedLayout;
    stackedLayout-&amp;gt;addWidget(firstPageWidget);
    stackedLayout-&amp;gt;addWidget(secondPageWidget);
    stackedLayout-&amp;gt;addWidget(thirdPageWidget);

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout-&amp;gt;addLayout(stackedLayout);
    setLayout(mainLayout);
</db:programlisting>
<db:para><db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link> provides no intrinsic means for the user to switch page. This is typically done through a <db:link xlink:href="qcombobox.xml">QComboBox</db:link> or a <db:link xlink:href="qlistwidget.xml">QListWidget</db:link> that stores the titles of the <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link>'s pages. For example:</db:para>
<db:programlisting language="cpp">    QComboBox *pageComboBox = new QComboBox;
    pageComboBox-&amp;gt;addItem(tr(&quot;Page 1&quot;));
    pageComboBox-&amp;gt;addItem(tr(&quot;Page 2&quot;));
    pageComboBox-&amp;gt;addItem(tr(&quot;Page 3&quot;));
    connect(pageComboBox, &amp;amp;QComboBox::activated,
            stackedLayout, &amp;amp;QStackedLayout::setCurrentIndex);
</db:programlisting>
<db:para>When populating a layout, the widgets are added to an internal list. The <db:link xlink:href="qlayout.xml#indexOf">indexOf</db:link>() function returns the index of a widget in that list. The widgets can either be added to the end of the list using the <db:link xlink:href="qstackedlayout.xml#addWidget">addWidget</db:link>() function, or inserted at a given index using the <db:link xlink:href="qstackedlayout.xml#insertWidget">insertWidget</db:link>() function. The <db:link xlink:href="qlayout.xml#removeWidget">removeWidget</db:link>() function removes the widget at the given index from the layout. The number of widgets contained in the layout, can be obtained using the <db:link xlink:href="qstackedlayout.xml#count-prop">count</db:link>() function.</db:para>
<db:para>The <db:link xlink:href="qstackedlayout.xml#widget">widget</db:link>() function returns the widget at a given index position. The index of the widget that is shown on screen is given by <db:link xlink:href="qstackedlayout.xml#currentIndex-prop">currentIndex</db:link>() and can be changed using <db:link xlink:href="qstackedlayout.xml#currentIndex-prop">setCurrentIndex</db:link>(). In a similar manner, the currently shown widget can be retrieved using the <db:link xlink:href="qstackedlayout.xml#currentWidget">currentWidget</db:link>() function, and altered using the <db:link xlink:href="qstackedlayout.xml#setCurrentWidget">setCurrentWidget</db:link>() function.</db:para>
<db:para>Whenever the current widget in the layout changes or a widget is removed from the layout, the <db:link xlink:href="qstackedlayout.xml#currentChanged">currentChanged</db:link>() and <db:link xlink:href="qstackedlayout.xml#widgetRemoved">widgetRemoved</db:link>() signals are emitted respectively.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link></db:member>
<db:member><db:link xlink:href="qtabwidget.xml">QTabWidget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="StackingMode-enum">
<db:title>enum QStackedLayout::StackingMode</db:title>
<db:enumsynopsis>
<db:enumname>StackingMode</db:enumname>
<db:enumitem>
<db:enumidentifier>StackOne</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StackAll</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies how the layout handles its child widgets regarding their visibility.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link></db:emphasis>::StackOne</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Only the current widget is visible. This is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link></db:emphasis>::StackAll</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>All widgets are visible. The current widget is merely raised.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>[read-only] count : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">count</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of widgets contained in the layout</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type>int</db:type> <db:emphasis role="bold">count</db:emphasis>() const override</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedlayout.xml#currentIndex-prop">currentIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedlayout.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>currentIndex</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentIndex</db:synopsisinfo>
<db:synopsisinfo role="setter">setCurrentIndex</db:synopsisinfo>
<db:synopsisinfo role="notifier">currentChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the index position of the widget that is visible</db:para>
<db:para>The current index is -1 if there is no current widget.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">currentIndex</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCurrentIndex</db:emphasis>(<db:type>int</db:type> <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qstackedlayout.xml#currentChanged">currentChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedlayout.xml#currentWidget">currentWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qlayout.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stackingMode-prop">
<db:title>stackingMode : StackingMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>StackingMode</db:type>
<db:varname>stackingMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">stackingMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setStackingMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>determines the way visibility of child widgets are handled.</db:para>
<db:para>The default value is <db:link xlink:href="qstackedlayout.xml#StackingMode-enum">StackOne</db:link>. Setting the property to <db:link xlink:href="qstackedlayout.xml#StackingMode-enum">StackAll</db:link> allows you to make use of the layout for overlay widgets that do additional drawing on top of other widgets, for example, graphical editors.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstackedlayout.xml#StackingMode-enum">QStackedLayout::StackingMode</db:link></db:type> <db:emphasis role="bold">stackingMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setStackingMode</db:emphasis>(<db:type><db:link xlink:href="qstackedlayout.xml#StackingMode-enum">QStackedLayout::StackingMode</db:link></db:type> <db:emphasis>stackingMode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStackedLayout">
<db:title>QStackedLayout::QStackedLayout()</db:title>
<db:constructorsynopsis>
<db:methodname>QStackedLayout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QStackedLayout()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link> with no parent.</db:para>
<db:para>This <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link> must be installed on a widget later on to become effective.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedlayout.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedlayout.xml#insertWidget">insertWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStackedLayout-1">
<db:title>[explicit] QStackedLayout::QStackedLayout(QWidget *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStackedLayout</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStackedLayout(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>This layout will install itself on the <db:code role="parameter">parent</db:code> widget and manage the geometry of its children.</db:para>
</db:section>
<db:section xml:id="QStackedLayout-2">
<db:title>[explicit] QStackedLayout::QStackedLayout(QLayout *<db:emphasis>parentLayout</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStackedLayout</db:methodname>
<db:methodparam>
<db:type>QLayout *</db:type>
<db:parameter>parentLayout</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QStackedLayout(QLayout *parentLayout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link> and inserts it into the given <db:code role="parameter">parentLayout</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QStackedLayout">
<db:title>[virtual] QStackedLayout::~QStackedLayout()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QStackedLayout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QStackedLayout()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link>. Note that the layout's widgets are <db:emphasis>not</db:emphasis> destroyed.</db:para>
</db:section>
<db:section xml:id="addItem">
<db:title>[override virtual] void QStackedLayout::addItem(QLayoutItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>addItem</db:methodname>
<db:methodparam>
<db:type>QLayoutItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addItem(QLayoutItem *item) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#addItem" role="function">QLayout::addItem(QLayoutItem *item)</db:link>.</db:para>
</db:section>
<db:section xml:id="addWidget">
<db:title>int QStackedLayout::addWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>addWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int addWidget(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given <db:code role="parameter">widget</db:code> to the end of this layout and returns the index position of the <db:code role="parameter">widget</db:code>.</db:para>
<db:para>If the <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link> is empty before this function is called, the given <db:code role="parameter">widget</db:code> becomes the current widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedlayout.xml#insertWidget">insertWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qlayout.xml#removeWidget">removeWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedlayout.xml#setCurrentWidget">setCurrentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentChanged">
<db:title>void QStackedLayout::currentChanged(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>currentChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">currentIndex</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentChanged(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the current widget in the layout changes. The <db:code role="parameter">index</db:code> specifies the index of the new current widget, or -1 if there isn't a new one (for example, if there are no widgets in the <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link>)</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qstackedlayout.xml#currentIndex-prop">currentIndex</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedlayout.xml#currentWidget">currentWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedlayout.xml#setCurrentWidget">setCurrentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentWidget">
<db:title>QWidget *QStackedLayout::currentWidget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>currentWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * currentWidget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current widget, or nullptr if there are no widgets in this layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedlayout.xml#currentIndex-prop">currentIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedlayout.xml#setCurrentWidget">setCurrentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasHeightForWidth">
<db:title>[override virtual] bool QStackedLayout::hasHeightForWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasHeightForWidth</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasHeightForWidth() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#hasHeightForWidth" role="function">QLayoutItem::hasHeightForWidth() const</db:link>.</db:para>
</db:section>
<db:section xml:id="heightForWidth">
<db:title>[override virtual] int QStackedLayout::heightForWidth(int <db:emphasis>width</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>heightForWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int heightForWidth(int width) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#heightForWidth" role="function">QLayoutItem::heightForWidth(int) const</db:link>.</db:para>
</db:section>
<db:section xml:id="insertWidget">
<db:title>int QStackedLayout::insertWidget(int <db:emphasis>index</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>insertWidget</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int insertWidget(int index, QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the given <db:code role="parameter">widget</db:code> at the given <db:code role="parameter">index</db:code> in this <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link>. If <db:code role="parameter">index</db:code> is out of range, the widget is appended (in which case it is the actual index of the <db:code role="parameter">widget</db:code> that is returned).</db:para>
<db:para>If the <db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link> is empty before this function is called, the given <db:code role="parameter">widget</db:code> becomes the current widget.</db:para>
<db:para>Inserting a new widget at an index less than or equal to the current index will increment the current index, but keep the current widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedlayout.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qlayout.xml#removeWidget">removeWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedlayout.xml#setCurrentWidget">setCurrentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemAt">
<db:title>[override virtual] QLayoutItem *QStackedLayout::itemAt(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QLayoutItem *</db:type>
<db:methodname>itemAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLayoutItem * itemAt(int index) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#itemAt" role="function">QLayout::itemAt(int index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="minimumSize">
<db:title>[override virtual] QSize QStackedLayout::minimumSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>minimumSize</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize minimumSize() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#minimumSize" role="function">QLayout::minimumSize() const</db:link>.</db:para>
</db:section>
<db:section xml:id="setCurrentWidget">
<db:title>void QStackedLayout::setCurrentWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCurrentWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCurrentWidget(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current widget to be the specified <db:code role="parameter">widget</db:code>. The new current widget must already be contained in this stacked layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedlayout.xml#currentIndex-prop">setCurrentIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qstackedlayout.xml#currentWidget">currentWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry">
<db:title>[override virtual] void QStackedLayout::setGeometry(const QRect &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setGeometry</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGeometry(const QRect &amp;rect) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#setGeometry" role="function">QLayout::setGeometry(const QRect &amp;r)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QStackedLayout::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#sizeHint" role="function">QLayoutItem::sizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="takeAt">
<db:title>[override virtual] QLayoutItem *QStackedLayout::takeAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QLayoutItem *</db:type>
<db:methodname>takeAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLayoutItem * takeAt(int index) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#takeAt" role="function">QLayout::takeAt(int index)</db:link>.</db:para>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QStackedLayout::widget(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>widget</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * widget(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the widget at the given <db:code role="parameter">index</db:code>, or nullptr if there is no widget at the given position.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstackedlayout.xml#currentWidget">currentWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qlayout.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widgetRemoved">
<db:title>void QStackedLayout::widgetRemoved(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>widgetRemoved</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void widgetRemoved(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a widget is removed from the layout. The widget's <db:code role="parameter">index</db:code> is passed as parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#removeWidget">removeWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
