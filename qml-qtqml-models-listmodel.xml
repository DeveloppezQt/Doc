<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ListModel QML Type</db:title>
<db:productname>QtQmlModels</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Models Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Defines a free-form list data source.</db:para>
<db:para>This type was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQml.Models</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ListModel is part of <db:simplelist><db:member>qtquick-models</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> is a simple container of <db:link xlink:href="qml-qtqml-models-listelement.xml">ListElement</db:link> definitions, each containing data roles. The contents can be defined dynamically, or explicitly in QML.</db:para>
<db:para>The number of elements in the model can be obtained from its <db:link xlink:href="qml-qtqml-models-listmodel.xml#count-prop">count</db:link> property. A number of familiar methods are also provided to manipulate the contents of the model, including <db:link xlink:href="qml-qtqml-models-listmodel.xml#append-method">append</db:link>(), <db:link xlink:href="qml-qtqml-models-listmodel.xml#insert-method">insert</db:link>(), <db:link xlink:href="qml-qtqml-models-listmodel.xml#move-method">move</db:link>(), <db:link xlink:href="qml-qtqml-models-listmodel.xml#remove-method">remove</db:link>() and <db:link xlink:href="qml-qtqml-models-listmodel.xml#set-method">set</db:link>(). These methods accept dictionaries as their arguments; these are translated to <db:link xlink:href="qml-qtqml-models-listelement.xml">ListElement</db:link> objects by the model.</db:para>
<db:para>Elements can be manipulated via the model using the <db:link xlink:href="qml-qtqml-models-listmodel.xml#setProperty-method">setProperty</db:link>() method, which allows the roles of the specified element to be set and changed.</db:para>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:para>The following example shows a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> containing three elements, with the roles &quot;name&quot; and &quot;cost&quot;.</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/listmodel.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:programlisting language="qml">import QtQuick 2.0

ListModel {
    id: fruitModel

    ListElement {
        name: &quot;Apple&quot;
        cost: 2.45
    }
    ListElement {
        name: &quot;Orange&quot;
        cost: 3.25
    }
    ListElement {
        name: &quot;Banana&quot;
        cost: 1.95
    }
}
</db:programlisting>
<db:para>Roles (properties) in each element must begin with a lower-case letter and should be common to all elements in a model. The <db:link xlink:href="qml-qtqml-models-listelement.xml">ListElement</db:link> documentation provides more guidelines for how elements should be defined.</db:para>
<db:para>Since the example model contains an <db:code>id</db:code> property, it can be referenced by views, such as the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> in this example:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 200; height: 200

    ListModel {
        id: fruitModel
        ...
    }

    Component {
        id: fruitDelegate
        Row {
            spacing: 10
            Text { text: name }
            Text { text: '$' + cost }
        }
    }

    ListView {
        anchors.fill: parent
        model: fruitModel
        delegate: fruitDelegate
    }
}
</db:programlisting>
<db:para>It is possible for roles to contain list data. In the following example we create a list of fruit attributes:</db:para>
<db:programlisting language="qml">ListModel {
    id: fruitModel

    ListElement {
        name: &quot;Apple&quot;
        cost: 2.45
        attributes: [
            ListElement { description: &quot;Core&quot; },
            ListElement { description: &quot;Deciduous&quot; }
        ]
    }
    ListElement {
        name: &quot;Orange&quot;
        cost: 3.25
        attributes: [
            ListElement { description: &quot;Citrus&quot; }
        ]
    }
    ListElement {
        name: &quot;Banana&quot;
        cost: 1.95
        attributes: [
            ListElement { description: &quot;Tropical&quot; },
            ListElement { description: &quot;Seedless&quot; }
        ]
    }
}
</db:programlisting>
<db:para>The delegate displays all the fruit attributes:</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/listmodel-nested.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:programlisting language="qml">Component {
    id: fruitDelegate
    Item {
        width: 200; height: 50
        Text { id: nameField; text: name }
        Text { text: '$' + cost; anchors.left: nameField.right }
        Row {
            anchors.top: nameField.bottom
            spacing: 5
            Text { text: &quot;Attributes:&quot; }
            Repeater {
                model: attributes
                Text { text: description }
            }
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="modifying-list-models">
<db:title>Modifying List Models</db:title>
<db:para>The content of a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> may be created and modified using the <db:link xlink:href="qml-qtqml-models-listmodel.xml#clear-method">clear</db:link>(), <db:link xlink:href="qml-qtqml-models-listmodel.xml#append-method">append</db:link>(), <db:link xlink:href="qml-qtqml-models-listmodel.xml#set-method">set</db:link>(), <db:link xlink:href="qml-qtqml-models-listmodel.xml#insert-method">insert</db:link>() and <db:link xlink:href="qml-qtqml-models-listmodel.xml#setProperty-method">setProperty</db:link>() methods. For example:</db:para>
<db:programlisting language="qml">    Component {
        id: fruitDelegate
        Item {
            width: 200; height: 50
            Text { text: name }
            Text { text: '$' + cost; anchors.right: parent.right }

            // Double the price when clicked.
            MouseArea {
                anchors.fill: parent
                onClicked: fruitModel.setProperty(index, &quot;cost&quot;, cost * 2)
            }
        }
    }
</db:programlisting>
<db:para>Note that when creating content dynamically the set of available properties cannot be changed once set. Whatever properties are first added to the model are the only permitted properties in the model.</db:para>
</db:section>
<db:section xml:id="using-threaded-list-models-with-workerscript">
<db:title>Using Threaded List Models with WorkerScript</db:title>
<db:para><db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> can be used together with <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link> access a list model from multiple threads. This is useful if list modifications are synchronous and take some time: the list operations can be moved to a different thread to avoid blocking of the main GUI thread.</db:para>
<db:para>Here is an example that uses <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link> to periodically append the current time to a list model:</db:para>
<db:programlisting language="qml">        Timer {
            id: timer
            interval: 2000; repeat: true
            running: true
            triggeredOnStart: true

            onTriggered: {
                var msg = {'action': 'appendCurrentTime', 'model': listModel};
                worker.sendMessage(msg);
            }
        }
</db:programlisting>
<db:para>The included file, <db:code>dataloader.mjs</db:code>, looks like this:</db:para>
<db:programlisting language="cpp">WorkerScript.onMessage = function(msg) {
    if (msg.action == 'appendCurrentTime') {
        var data = {'time': new Date().toTimeString()};
        msg.model.append(data);
        msg.model.sync();   // updates the changes to the list
    }
}
</db:programlisting>
<db:para>The timer in the main example sends messages to the worker script by calling <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml#sendMessage-method">WorkerScript::sendMessage</db:link>(). When this message is received, WorkerScript.onMessage() is invoked in dataloader.mjs, which appends the current time to the list model.</db:para>
<db:para>Note the call to <db:link xlink:href="qml-qtqml-models-listmodel.xml#sync-method">sync</db:link>() from the external thread. You must call <db:link xlink:href="qml-qtqml-models-listmodel.xml#sync-method">sync</db:link>() or else the changes made to the list from that thread will not be reflected in the list model in the main thread.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-modelviewsdata-modelview.xml#qml-data-models">Data Models</db:link></db:member>
<db:member><db:link xlink:href="qtquick-threading-example.xml">Qt Quick Examples - Threading</db:link></db:member>
<db:member><db:link xlink:href="qtqml-index.xml">Qt QML</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The number of data entries in the model.</db:para>
</db:section>
<db:section xml:id="dynamicRoles-prop">
<db:title>dynamicRoles : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>dynamicRoles</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>By default, the type of a role is fixed the first time the role is used. For example, if you create a role called &quot;data&quot; and assign a number to it, you can no longer assign a string to the &quot;data&quot; role. However, when the dynamicRoles property is enabled, the type of a given role is not fixed and can be different between elements.</db:para>
<db:para>The dynamicRoles property must be set before any data is added to the <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link>, and must be set from the main thread.</db:para>
<db:para>A <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> that has data statically defined (via the <db:link xlink:href="qml-qtqml-models-listelement.xml">ListElement</db:link> QML syntax) cannot have the dynamicRoles property enabled.</db:para>
<db:para>There is a significant performance cost to using a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> with dynamic roles enabled. The cost varies from platform to platform but is typically somewhere between 4-6x slower than using static role types.</db:para>
<db:para>Due to the performance cost of using dynamic roles, they are disabled by default.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="append-method">
<db:title>append(jsobject <db:emphasis>dict</db:emphasis>)</db:title>
<db:para>Adds a new item to the end of the list model, with the values in <db:code role="parameter">dict</db:code>.</db:para>
<db:programlisting language="cpp">fruitModel.append({&quot;cost&quot;: 5.95, &quot;name&quot;:&quot;Pizza&quot;})
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-models-listmodel.xml#set-method">set</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtqml-models-listmodel.xml#remove-method">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear-method">
<db:title>clear()</db:title>
<db:para>Deletes all content from the model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-models-listmodel.xml#append-method">append</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtqml-models-listmodel.xml#remove-method">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="get-method">
<db:title>object get(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the item at <db:code role="parameter">index</db:code> in the list model. This allows the item data to be accessed or modified from JavaScript:</db:para>
<db:programlisting language="cpp">Component.onCompleted: {
    fruitModel.append({&quot;cost&quot;: 5.95, &quot;name&quot;:&quot;Jackfruit&quot;});
    console.log(fruitModel.get(0).cost);
    fruitModel.get(0).cost = 10.95;
}
</db:programlisting>
<db:para>The <db:code role="parameter">index</db:code> must be an element in the list.</db:para>
<db:para>Note that properties of the returned object that are themselves objects will also be models, and this get() method is used to access elements:</db:para>
<db:programlisting language="cpp">fruitModel.append(..., &quot;attributes&quot;:
    [{&quot;name&quot;:&quot;spikes&quot;,&quot;value&quot;:&quot;7mm&quot;},
     {&quot;name&quot;:&quot;color&quot;,&quot;value&quot;:&quot;green&quot;}]);
fruitModel.get(0).attributes.get(1).value; // == &quot;green&quot;
</db:programlisting>
<db:warning>
<db:para>The returned object is not guaranteed to remain valid. It should not be used in <db:link xlink:href="qtqml-syntax-propertybinding.xml">property bindings</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-models-listmodel.xml#append-method">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert-method">
<db:title>insert(int <db:emphasis>index</db:emphasis>, jsobject <db:emphasis>dict</db:emphasis>)</db:title>
<db:para>Adds a new item to the list model at position <db:code role="parameter">index</db:code>, with the values in <db:code role="parameter">dict</db:code>.</db:para>
<db:programlisting language="cpp">fruitModel.insert(2, {&quot;cost&quot;: 5.95, &quot;name&quot;:&quot;Pizza&quot;})
</db:programlisting>
<db:para>The <db:code role="parameter">index</db:code> must be to an existing item in the list, or one past the end of the list (equivalent to append).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-models-listmodel.xml#set-method">set</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtqml-models-listmodel.xml#append-method">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="move-method">
<db:title>move(int <db:emphasis>from</db:emphasis>, int <db:emphasis>to</db:emphasis>, int <db:emphasis>n</db:emphasis>)</db:title>
<db:para>Moves <db:code role="parameter">n</db:code> items <db:code role="parameter">from</db:code> one position <db:code role="parameter">to</db:code> another.</db:para>
<db:para>The from and to ranges must exist; for example, to move the first 3 items to the end of the list:</db:para>
<db:programlisting language="cpp">fruitModel.move(0, fruitModel.count - 3, 3)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-models-listmodel.xml#append-method">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove-method">
<db:title>remove(int <db:emphasis>index</db:emphasis>, int <db:emphasis>count</db:emphasis> = 1)</db:title>
<db:para>Deletes <db:code role="parameter">count</db:code> number of items at <db:code role="parameter">index</db:code> from the model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-models-listmodel.xml#clear-method">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="set-method">
<db:title>set(int <db:emphasis>index</db:emphasis>, jsobject <db:emphasis>dict</db:emphasis>)</db:title>
<db:para>Changes the item at <db:code role="parameter">index</db:code> in the list model with the values in <db:code role="parameter">dict</db:code>. Properties not appearing in <db:code role="parameter">dict</db:code> are left unchanged.</db:para>
<db:programlisting language="cpp">fruitModel.set(3, {&quot;cost&quot;: 5.95, &quot;name&quot;:&quot;Pizza&quot;})
</db:programlisting>
<db:para>If <db:code role="parameter">index</db:code> is equal to count() then a new item is appended to the list. Otherwise, <db:code role="parameter">index</db:code> must be an element in the list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-models-listmodel.xml#append-method">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty-method">
<db:title>setProperty(int <db:emphasis>index</db:emphasis>, string <db:emphasis>property</db:emphasis>, variant <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Changes the <db:code role="parameter">property</db:code> of the item at <db:code role="parameter">index</db:code> in the list model to <db:code role="parameter">value</db:code>.</db:para>
<db:programlisting language="cpp">fruitModel.setProperty(3, &quot;cost&quot;, 5.95)
</db:programlisting>
<db:para>The <db:code role="parameter">index</db:code> must be an element in the list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-models-listmodel.xml#append-method">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sync-method">
<db:title>sync()</db:title>
<db:para>Writes any unsaved changes to the list model after it has been modified from a worker script.</db:para>
</db:section>
</db:section>
</db:article>
