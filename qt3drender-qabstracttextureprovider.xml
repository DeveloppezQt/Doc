<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractTextureProvider Class</db:title>
<db:subtitle>Qt3DRender::QAbstractTextureProvider</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A base class to be used to provide textures.</db:para>
<db:para>This class was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractTextureProvider</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3drender</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3dcore-qnode.xml" xlink:role="class">Qt3DCore::QNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qtexture1d.xml" xlink:role="class">Qt3DRender::QTexture1D</db:link>, <db:link xlink:href="qt3drender-qtexture1darray.xml" xlink:role="class">Qt3DRender::QTexture1DArray</db:link>, <db:link xlink:href="qt3drender-qtexture2d.xml" xlink:role="class">Qt3DRender::QTexture2D</db:link>, <db:link xlink:href="qt3drender-qtexture2darray.xml" xlink:role="class">Qt3DRender::QTexture2DArray</db:link>, <db:link xlink:href="qt3drender-qtexture2dmultisample.xml" xlink:role="class">Qt3DRender::QTexture2DMultisample</db:link>, <db:link xlink:href="qt3drender-qtexture2dmultisamplearray.xml" xlink:role="class">Qt3DRender::QTexture2DMultisampleArray</db:link>, <db:link xlink:href="qt3drender-qtexture3d.xml" xlink:role="class">Qt3DRender::QTexture3D</db:link>, <db:link xlink:href="qt3drender-qtexturebuffer.xml" xlink:role="class">Qt3DRender::QTextureBuffer</db:link>, <db:link xlink:href="qt3drender-qtexturecubemap.xml" xlink:role="class">Qt3DRender::QTextureCubeMap</db:link>, <db:link xlink:href="qt3drender-qtexturecubemaparray.xml" xlink:role="class">Qt3DRender::QTextureCubeMapArray</db:link>, and <db:link xlink:href="qt3drender-qtexturerectangle.xml" xlink:role="class">Qt3DRender::QTextureRectangle</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qt3drender-qabstracttextureprovider.xml">QAbstractTextureProvider</db:link> class shouldn't be used directly but rather through one of its subclasses. Each subclass implements a given texture target (2D, 2DArray, 3D, CubeMap ...) Each subclass provides a set of functors for each layer, cube map face and mipmap level. In turn the backend uses those functor to properly fill a corresponding OpenGL texture with data.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="comparisonFunction-prop">
<db:title>comparisonFunction : ComparisonFunction</db:title>
<db:para>Holds the comparison function of the texture provider.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>Qt3DRender::QAbstractTextureProvider::ComparisonFunction</db:type> <db:emphasis role="bold">comparisonFunction</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setComparisonFunction</db:emphasis>(<db:type>Qt3DRender::QAbstractTextureProvider::ComparisonFunction</db:type> <db:emphasis>function</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">comparisonFunctionChanged</db:emphasis>(<db:type>Qt3DRender::QAbstractTextureProvider::ComparisonFunction</db:type> <db:emphasis>comparisonFunction</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="comparisonMode-prop">
<db:title>comparisonMode : ComparisonMode</db:title>
<db:para>Holds the comparison mode of the texture provider.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>Qt3DRender::QAbstractTextureProvider::ComparisonMode</db:type> <db:emphasis role="bold">comparisonMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setComparisonMode</db:emphasis>(<db:type>Qt3DRender::QAbstractTextureProvider::ComparisonMode</db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">comparisonModeChanged</db:emphasis>(<db:type>Qt3DRender::QAbstractTextureProvider::ComparisonMode</db:type> <db:emphasis>comparisonMode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="depth-prop">
<db:title>depth : int</db:title>
<db:para>Holds the depth of the texture provider.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">depth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDepth</db:emphasis>(<db:type>int</db:type> <db:emphasis>depth</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">depthChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>depth</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="format-prop">
<db:title>format : TextureFormat</db:title>
<db:para>Holds the format of the texture provider.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>Qt3DRender::QAbstractTextureProvider::TextureFormat</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qabstracttextureprovider.xml#format">format</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFormat</db:emphasis>(<db:type>Qt3DRender::QAbstractTextureProvider::TextureFormat</db:type> <db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">formatChanged</db:emphasis>(<db:type>Qt3DRender::QAbstractTextureProvider::TextureFormat</db:type> <db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="generateMipMaps-prop">
<db:title>generateMipMaps : bool</db:title>
<db:para>Holds whether the texture provider should auto generate mipmaps.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">generateMipMaps</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setGenerateMipMaps</db:emphasis>(<db:type>bool</db:type> <db:emphasis>gen</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">generateMipMapsChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>generateMipMaps</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="height-prop">
<db:title>height : int</db:title>
<db:para>Holds the height of the texture provider.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">height</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHeight</db:emphasis>(<db:type>int</db:type> <db:emphasis>height</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">heightChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>height</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="magnificationFilter-prop">
<db:title>magnificationFilter : Filter</db:title>
<db:para>Holds the magnification filter of the texture provider.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>Qt3DRender::QAbstractTextureProvider::Filter</db:type> <db:emphasis role="bold">magnificationFilter</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMagnificationFilter</db:emphasis>(<db:type>Qt3DRender::QAbstractTextureProvider::Filter</db:type> <db:emphasis>f</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">magnificationFilterChanged</db:emphasis>(<db:type>Qt3DRender::QAbstractTextureProvider::Filter</db:type> <db:emphasis>magnificationFilter</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maximumAnisotropy-prop">
<db:title>maximumAnisotropy : float</db:title>
<db:para>Holds the maximum anisotropy of the texture provider.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">maximumAnisotropy</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximumAnisotropy</db:emphasis>(<db:type>float</db:type> <db:emphasis>anisotropy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">maximumAnisotropyChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>maximumAnisotropy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maximumLayers-prop">
<db:title>maximumLayers : int</db:title>
<db:para>Holds the maximum layer count of the texture provider. By default, the maximum layer count is 1.</db:para>
<db:note>
<db:para>this has a meaning only for texture providers that have 3D or array target formats.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qabstracttextureprovider.xml#maximumLayers">maximumLayers</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximumLayers</db:emphasis>(<db:type>int</db:type> <db:emphasis>maximumLayers</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">maximumLayersChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>maximumLayers</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="minificationFilter-prop">
<db:title>minificationFilter : Filter</db:title>
<db:para>Holds the minification filter of the texture provider.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>Qt3DRender::QAbstractTextureProvider::Filter</db:type> <db:emphasis role="bold">minificationFilter</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinificationFilter</db:emphasis>(<db:type>Qt3DRender::QAbstractTextureProvider::Filter</db:type> <db:emphasis>f</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">minificationFilterChanged</db:emphasis>(<db:type>Qt3DRender::QAbstractTextureProvider::Filter</db:type> <db:emphasis>minificationFilter</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : const Status</db:title>
<db:para>Holds the current status of the texture provider.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>Qt3DRender::QAbstractTextureProvider::Status</db:type> <db:emphasis role="bold">status</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">statusChanged</db:emphasis>(<db:type>Qt3DRender::QAbstractTextureProvider::Status</db:type> <db:emphasis>status</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="target-prop">
<db:title>[read-only] target : const Target</db:title>
<db:para>Holds the target format of the texture provider.</db:para>
<db:note>
<db:para>The target format can only be set once.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>Qt3DRender::QAbstractTextureProvider::Target</db:type> <db:emphasis role="bold">target</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="unique-prop">
<db:title>unique : bool</db:title>
<db:para>Sets whether this texture provider should be unique by reading <db:code role="parameter">unique</db:code>. By default this is false.</db:para>
<db:para>By default the renderer based on the attributes of texture providers is able to compare them and detect duplicates (same size, format and image sources) and smartly avoid unnecessary computations. In some cases however (texture providers used as Qt3DCore::RenderTarget attachments) you don't want the renderer to perform these comparison, in which case you can set is unique to true.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3drender-qabstracttextureprovider.xml#isUnique">isUnique</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUnique</db:emphasis>(<db:type>bool</db:type> <db:emphasis>unique</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">uniqueChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>unique</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="width-prop">
<db:title>width : int</db:title>
<db:para>Holds the width of the texture provider.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">width</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWidth</db:emphasis>(<db:type>int</db:type> <db:emphasis>width</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">widthChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>width</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="wrapMode-prop">
<db:title>[read-only] wrapMode : Qt3DRender::QTextureWrapMode* const</db:title>
<db:para>Holds the wrap mode of the texture provider.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3drender-qtexturewrapmode.xml">Qt3DRender::QTextureWrapMode</db:link></db:type> *<db:emphasis role="bold">wrapMode</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="addTextureImage">
<db:title>void QAbstractTextureProvider::addTextureImage(Qt3DRender::QAbstractTextureImage *<db:emphasis>textureImage</db:emphasis>)</db:title>
<db:para>Adds a new Qt3DCore::QAbstractTextureImage <db:code role="parameter">textureImage</db:code> to the texture provider.</db:para>
<db:note>
<db:para><db:link xlink:href="qt3drender-qabstracttextureimage.xml">Qt3DRender::QAbstractTextureImage</db:link> should never be shared between multiple <db:link xlink:href="qt3drender-qabstracttextureprovider.xml">Qt3DRender::QAbstractTextureProvider</db:link> instances.</db:para>
</db:note>
</db:section>
<db:section xml:id="format">
<db:title>Qt3DRender::QAbstractTextureProvider::TextureFormat QAbstractTextureProvider::format() const</db:title>
<db:para>Return the texture provider's format.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qt3drender-qabstracttextureprovider.xml#format-prop">format</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qabstracttextureprovider.xml#format-prop">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isUnique">
<db:title>bool QAbstractTextureProvider::isUnique() const</db:title>
<db:para>Returns whether the texture should be shared with other textures in the renderer or not. Defaults to false as this allow in most cases the renderer to be faster.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qt3drender-qabstracttextureprovider.xml#unique-prop">unique</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="maximumLayers">
<db:title>int QAbstractTextureProvider::maximumLayers() const</db:title>
<db:para>Returns the maximum number of layers for the texture provider.</db:para>
<db:note>
<db:para>this has a meaning only for texture providers that have 3D or array target formats.</db:para>
</db:note>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qt3drender-qabstracttextureprovider.xml#maximumLayers-prop">maximumLayers</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qabstracttextureprovider.xml#maximumLayers-prop">setMaximumLayers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeTextureImage">
<db:title>void QAbstractTextureProvider::removeTextureImage(Qt3DRender::QAbstractTextureImage *<db:emphasis>textureImage</db:emphasis>)</db:title>
<db:para>Removes a Qt3DCore::QAbstractTextureImage <db:code role="parameter">textureImage</db:code> from the texture provider.</db:para>
</db:section>
<db:section xml:id="setSize">
<db:title>void QAbstractTextureProvider::setSize(int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis> = 1, int <db:emphasis>d</db:emphasis> = 1)</db:title>
<db:para>Sets the size of the texture provider to width <db:code role="parameter">w</db:code>, height <db:code role="parameter">h</db:code> and depth <db:code role="parameter">d</db:code>.</db:para>
</db:section>
<db:section xml:id="textureImages">
<db:title>QList&lt;Qt3DRender::QAbstractTextureImage *&gt; QAbstractTextureProvider::textureImages() const</db:title>
<db:para>Returns a list of pointers to <db:link xlink:href="qt3drender-qabstracttextureimage.xml">QAbstractTextureImage</db:link> objects contained in the texture provider.</db:para>
</db:section>
</db:section>
</db:article>
