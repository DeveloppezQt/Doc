<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QXmlContentHandler Class</db:title>
<db:productname>QtXml</db:productname>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlcontenthandler.xml">QXmlContentHandler</db:link> class provides an interface to report the logical content of XML data.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlContentHandler</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qxmldefaulthandler.xml" xlink:role="class">QXmlDefaultHandler</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlContentHandler is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>If the application needs to be informed of basic parsing events, it can implement this interface and activate it using <db:link xlink:href="qxmlreader.xml#setContentHandler">QXmlReader::setContentHandler</db:link>(). The reader can then report basic document-related events like the start and end of elements and character data through this interface.</db:para>
<db:para>The order of events in this interface is very important, and mirrors the order of information in the document itself. For example, all of an element's content (character data, processing instructions, and sub-elements) appears, in order, between the <db:link xlink:href="qxmlcontenthandler.xml#startElement">startElement</db:link>() event and the corresponding <db:link xlink:href="qxmlcontenthandler.xml#endElement">endElement</db:link>() event.</db:para>
<db:para>The class <db:link xlink:href="qxmldefaulthandler.xml">QXmlDefaultHandler</db:link> provides a default implementation for this interface; subclassing from the <db:link xlink:href="qxmldefaulthandler.xml">QXmlDefaultHandler</db:link> class is very convenient if you only want to be informed of some parsing events.</db:para>
<db:para>The <db:link xlink:href="qxmlcontenthandler.xml#startDocument">startDocument</db:link>() function is called at the start of the document, and <db:link xlink:href="qxmlcontenthandler.xml#endDocument">endDocument</db:link>() is called at the end. Before parsing begins <db:link xlink:href="qxmlcontenthandler.xml#setDocumentLocator">setDocumentLocator</db:link>() is called. For each element <db:link xlink:href="qxmlcontenthandler.xml#startElement">startElement</db:link>() is called, with <db:link xlink:href="qxmlcontenthandler.xml#endElement">endElement</db:link>() being called at the end of each element. The <db:link xlink:href="qxmlcontenthandler.xml#characters">characters</db:link>() function is called with chunks of character data; <db:link xlink:href="qxmlcontenthandler.xml#ignorableWhitespace">ignorableWhitespace</db:link>() is called with chunks of whitespace and <db:link xlink:href="qxmlcontenthandler.xml#processingInstruction">processingInstruction</db:link>() is called with processing instructions. If an entity is skipped <db:link xlink:href="qxmlcontenthandler.xml#skippedEntity">skippedEntity</db:link>() is called. At the beginning of prefix-URI scopes <db:link xlink:href="qxmlcontenthandler.xml#startPrefixMapping">startPrefixMapping</db:link>() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmldtdhandler.xml">QXmlDTDHandler</db:link></db:member>
<db:member><db:link xlink:href="qxmldeclhandler.xml">QXmlDeclHandler</db:link></db:member>
<db:member><db:link xlink:href="qxmlentityresolver.xml">QXmlEntityResolver</db:link></db:member>
<db:member><db:link xlink:href="qxmlerrorhandler.xml">QXmlErrorHandler</db:link></db:member>
<db:member><db:link xlink:href="qxmllexicalhandler.xml">QXmlLexicalHandler</db:link></db:member>
<db:member><db:link xlink:href="xml-sax.xml#introduction-to-sax2">Introduction to SAX2</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QXmlContentHandler">
<db:title>[virtual noexcept] QXmlContentHandler::~QXmlContentHandler()</db:title>
<db:para>Destroys the content handler.</db:para>
</db:section>
<db:section xml:id="characters">
<db:title>[pure virtual] bool QXmlContentHandler::characters(const QString &amp;<db:emphasis>ch</db:emphasis>)</db:title>
<db:para>The reader calls this function when it has parsed a chunk of character data (either normal character data or character data inside a CDATA section; if you need to distinguish between those two types you must use <db:link xlink:href="qxmllexicalhandler.xml#startCDATA">QXmlLexicalHandler::startCDATA</db:link>() and <db:link xlink:href="qxmllexicalhandler.xml#endCDATA">QXmlLexicalHandler::endCDATA</db:link>()). The character data is reported in <db:code role="parameter">ch</db:code>.</db:para>
<db:para>Some readers report whitespace in element content using the <db:link xlink:href="qxmlcontenthandler.xml#ignorableWhitespace">ignorableWhitespace</db:link>() function rather than using this one.</db:para>
<db:para>A reader may report the character data of an element in more than one chunk; e.g. a reader might want to report &quot;a&lt;b&quot; in three characters() events (&quot;a &quot;, &quot;&lt;&quot; and &quot; b&quot;).</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmlcontenthandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
</db:section>
<db:section xml:id="endDocument">
<db:title>[pure virtual] bool QXmlContentHandler::endDocument()</db:title>
<db:para>The reader calls this function after it has finished parsing. It is called just once, and is the last handler function called. It is called after the reader has read all input or has abandoned parsing because of a fatal error.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmlcontenthandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlcontenthandler.xml#startDocument">startDocument</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endElement">
<db:title>[pure virtual] bool QXmlContentHandler::endElement(const QString &amp;<db:emphasis>namespaceURI</db:emphasis>, const QString &amp;<db:emphasis>localName</db:emphasis>, const QString &amp;<db:emphasis>qName</db:emphasis>)</db:title>
<db:para>The reader calls this function when it has parsed an end element tag with the qualified name <db:code role="parameter">qName</db:code>, the local name <db:code role="parameter">localName</db:code> and the namespace URI <db:code role="parameter">namespaceURI</db:code>.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmlcontenthandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlcontenthandler.xml#startElement">startElement</db:link>()</db:member>
<db:member><db:link xlink:href="xml-sax.xml#namespace-support-via-features">Namespace Support via Features</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endPrefixMapping">
<db:title>[pure virtual] bool QXmlContentHandler::endPrefixMapping(const QString &amp;<db:emphasis>prefix</db:emphasis>)</db:title>
<db:para>The reader calls this function to signal the end of a prefix mapping for the prefix <db:code role="parameter">prefix</db:code>.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmlcontenthandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlcontenthandler.xml#startPrefixMapping">startPrefixMapping</db:link>()</db:member>
<db:member><db:link xlink:href="xml-sax.xml#namespace-support-via-features">Namespace Support via Features</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>[pure virtual] QString QXmlContentHandler::errorString() const</db:title>
<db:para>The reader calls this function to get an error string, e.g. if any of the handler functions returns false.</db:para>
</db:section>
<db:section xml:id="ignorableWhitespace">
<db:title>[pure virtual] bool QXmlContentHandler::ignorableWhitespace(const QString &amp;<db:emphasis>ch</db:emphasis>)</db:title>
<db:para>Some readers may use this function to report each chunk of whitespace in element content. The whitespace is reported in <db:code role="parameter">ch</db:code>.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmlcontenthandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
</db:section>
<db:section xml:id="processingInstruction">
<db:title>[pure virtual] bool QXmlContentHandler::processingInstruction(const QString &amp;<db:emphasis>target</db:emphasis>, const QString &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>The reader calls this function when it has parsed a processing instruction.</db:para>
<db:para><db:code role="parameter">target</db:code> is the target name of the processing instruction and <db:code role="parameter">data</db:code> is the data in the processing instruction.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmlcontenthandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
</db:section>
<db:section xml:id="setDocumentLocator">
<db:title>[pure virtual] void QXmlContentHandler::setDocumentLocator(QXmlLocator *<db:emphasis>locator</db:emphasis>)</db:title>
<db:para>The reader calls this function before it starts parsing the document. The argument <db:code role="parameter">locator</db:code> is a pointer to a <db:link xlink:href="qxmllocator.xml">QXmlLocator</db:link> which allows the application to get the parsing position within the document.</db:para>
<db:para>Do not destroy the <db:code role="parameter">locator</db:code>; it is destroyed when the reader is destroyed. (Do not use the <db:code role="parameter">locator</db:code> after the reader is destroyed).</db:para>
</db:section>
<db:section xml:id="skippedEntity">
<db:title>[pure virtual] bool QXmlContentHandler::skippedEntity(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Some readers may skip entities if they have not seen the declarations (e.g. because they are in an external DTD). If they do so they report that they skipped the entity called <db:code role="parameter">name</db:code> by calling this function.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmlcontenthandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
</db:section>
<db:section xml:id="startDocument">
<db:title>[pure virtual] bool QXmlContentHandler::startDocument()</db:title>
<db:para>The reader calls this function when it starts parsing the document. The reader calls this function just once, after the call to <db:link xlink:href="qxmlcontenthandler.xml#setDocumentLocator">setDocumentLocator</db:link>(), and before any other functions in this class or in the <db:link xlink:href="qxmldtdhandler.xml">QXmlDTDHandler</db:link> class are called.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmlcontenthandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlcontenthandler.xml#endDocument">endDocument</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startElement">
<db:title>[pure virtual] bool QXmlContentHandler::startElement(const QString &amp;<db:emphasis>namespaceURI</db:emphasis>, const QString &amp;<db:emphasis>localName</db:emphasis>, const QString &amp;<db:emphasis>qName</db:emphasis>, const QXmlAttributes &amp;<db:emphasis>atts</db:emphasis>)</db:title>
<db:para>The reader calls this function when it has parsed a start element tag.</db:para>
<db:para>There is a corresponding <db:link xlink:href="qxmlcontenthandler.xml#endElement">endElement</db:link>() call when the corresponding end element tag is read. The startElement() and <db:link xlink:href="qxmlcontenthandler.xml#endElement">endElement</db:link>() calls are always nested correctly. Empty element tags (e.g. &lt;x/&gt;) cause a startElement() call to be immediately followed by an <db:link xlink:href="qxmlcontenthandler.xml#endElement">endElement</db:link>() call.</db:para>
<db:para>The attribute list provided only contains attributes with explicit values. The attribute list contains attributes used for namespace declaration (i.e. attributes starting with xmlns) only if the namespace-prefix property of the reader is true.</db:para>
<db:para>The argument <db:code role="parameter">namespaceURI</db:code> is the namespace URI, or an empty string if the element has no namespace URI or if no namespace processing is done. <db:code role="parameter">localName</db:code> is the local name (without prefix), or an empty string if no namespace processing is done, <db:code role="parameter">qName</db:code> is the qualified name (with prefix) and <db:code role="parameter">atts</db:code> are the attributes attached to the element. If there are no attributes, <db:code role="parameter">atts</db:code> is an empty attributes object.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmlcontenthandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlcontenthandler.xml#endElement">endElement</db:link>()</db:member>
<db:member><db:link xlink:href="xml-sax.xml#namespace-support-via-features">Namespace Support via Features</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startPrefixMapping">
<db:title>[pure virtual] bool QXmlContentHandler::startPrefixMapping(const QString &amp;<db:emphasis>prefix</db:emphasis>, const QString &amp;<db:emphasis>uri</db:emphasis>)</db:title>
<db:para>The reader calls this function to signal the begin of a prefix-URI namespace mapping scope. This information is not necessary for normal namespace processing since the reader automatically replaces prefixes for element and attribute names.</db:para>
<db:para>Note that startPrefixMapping() and <db:link xlink:href="qxmlcontenthandler.xml#endPrefixMapping">endPrefixMapping</db:link>() calls are not guaranteed to be properly nested relative to each other: all startPrefixMapping() events occur before the corresponding <db:link xlink:href="qxmlcontenthandler.xml#startElement">startElement</db:link>() event, and all <db:link xlink:href="qxmlcontenthandler.xml#endPrefixMapping">endPrefixMapping</db:link>() events occur after the corresponding <db:link xlink:href="qxmlcontenthandler.xml#endElement">endElement</db:link>() event, but their order is not otherwise guaranteed.</db:para>
<db:para>The argument <db:code role="parameter">prefix</db:code> is the namespace prefix being declared and the argument <db:code role="parameter">uri</db:code> is the namespace URI the prefix is mapped to.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmlcontenthandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlcontenthandler.xml#endPrefixMapping">endPrefixMapping</db:link>()</db:member>
<db:member><db:link xlink:href="xml-sax.xml#namespace-support-via-features">Namespace Support via Features</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
