<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QUndoView Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qundoview.xml">QUndoView</db:link> class displays the contents of a <db:link xlink:href="qundostack.xml">QUndoStack</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QUndoView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlistview.xml" xlink:role="class">QListView</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QUndoView is part of <db:simplelist><db:member>advanced</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qundoview.xml">QUndoView</db:link> is a <db:link xlink:href="qlistview.xml">QListView</db:link> which displays the list of commands pushed on an undo stack. The most recently executed command is always selected. Selecting a different command results in a call to <db:link xlink:href="qundostack.xml#setIndex">QUndoStack::setIndex</db:link>(), rolling the state of the document backwards or forward to the new command.</db:para>
<db:para>The stack can be set explicitly with <db:link xlink:href="qundoview.xml#setStack">setStack</db:link>(). Alternatively, a <db:link xlink:href="qundogroup.xml">QUndoGroup</db:link> object can be set with <db:link xlink:href="qundoview.xml#setGroup">setGroup</db:link>(). The view will then update itself automatically whenever the active stack of the group changes.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qundoview.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="cleanIcon-prop">
<db:title>cleanIcon : QIcon</db:title>
<db:para>This property holds the icon used to represent the clean state.</db:para>
<db:para>A stack may have a clean state set with <db:link xlink:href="qundostack.xml#setClean">QUndoStack::setClean</db:link>(). This is usually the state of the document at the point it was saved. <db:link xlink:href="qundoview.xml">QUndoView</db:link> can display an icon in the list of commands to show the clean state. If this property is a null icon, no icon is shown. The default value is the null icon.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qicon.xml">QIcon</db:link></db:type> <db:emphasis role="bold">cleanIcon</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCleanIcon</db:emphasis>(const <db:type><db:link xlink:href="qicon.xml">QIcon</db:link></db:type> &amp;<db:emphasis>icon</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="emptyLabel-prop">
<db:title>emptyLabel : QString</db:title>
<db:para>This property holds the label used for the empty state.</db:para>
<db:para>The empty label is the topmost element in the list of commands, which represents the state of the document before any commands were pushed on the stack. The default is the string &quot;&lt;empty&gt;&quot;.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">emptyLabel</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setEmptyLabel</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>label</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QUndoView">
<db:title>[explicit] QUndoView::QUndoView(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new view with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QUndoView-1">
<db:title>[explicit] QUndoView::QUndoView(QUndoGroup *<db:emphasis>group</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new view with parent <db:code role="parameter">parent</db:code> and sets the observed group to <db:code role="parameter">group</db:code>.</db:para>
<db:para>The view will update itself autmiatically whenever the active stack of the group changes.</db:para>
</db:section>
<db:section xml:id="QUndoView-2">
<db:title>[explicit] QUndoView::QUndoView(QUndoStack *<db:emphasis>stack</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new view with parent <db:code role="parameter">parent</db:code> and sets the observed stack to <db:code role="parameter">stack</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QUndoView">
<db:title>[virtual noexcept] QUndoView::~QUndoView()</db:title>
<db:para>Destroys this view.</db:para>
</db:section>
<db:section xml:id="group">
<db:title>QUndoGroup *QUndoView::group() const</db:title>
<db:para>Returns the group displayed by this view.</db:para>
<db:para>If the view is not looking at group, this function returns nullptr.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundoview.xml#setGroup">setGroup</db:link>()</db:member>
<db:member><db:link xlink:href="qundoview.xml#setStack">setStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGroup">
<db:title>void QUndoView::setGroup(QUndoGroup *<db:emphasis>group</db:emphasis>)</db:title>
<db:para>Sets the group displayed by this view to <db:code role="parameter">group</db:code>. If <db:code role="parameter">group</db:code> is nullptr, the view will be empty.</db:para>
<db:para>The view will update itself automatically whenever the active stack of the group changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundoview.xml#group">group</db:link>()</db:member>
<db:member><db:link xlink:href="qundoview.xml#setStack">setStack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStack">
<db:title>void QUndoView::setStack(QUndoStack *<db:emphasis>stack</db:emphasis>)</db:title>
<db:para>Sets the stack displayed by this view to <db:code role="parameter">stack</db:code>. If <db:code role="parameter">stack</db:code> is nullptr, the view will be empty.</db:para>
<db:para>If the view was previously looking at a <db:link xlink:href="qundogroup.xml">QUndoGroup</db:link>, the group is set to nullptr.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundoview.xml#stack">stack</db:link>()</db:member>
<db:member><db:link xlink:href="qundoview.xml#setGroup">setGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stack">
<db:title>QUndoStack *QUndoView::stack() const</db:title>
<db:para>Returns the stack currently displayed by this view. If the view is looking at a <db:link xlink:href="qundogroup.xml">QUndoGroup</db:link>, this the group's active stack.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qundoview.xml#setStack">setStack</db:link>()</db:member>
<db:member><db:link xlink:href="qundoview.xml#setGroup">setGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
