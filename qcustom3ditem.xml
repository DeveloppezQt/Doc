<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCustom3DItem Class</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcustom3ditem.xml">QCustom3DItem</db:link> class adds a custom item to a graph.</db:para>
<db:para>This class was introduced in QtDataVisualization 1.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCustom3DItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtDataVisualization 1.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qcustom3dlabel.xml" xlink:role="class">QCustom3DLabel</db:link> and <db:link xlink:href="qcustom3dvolume.xml" xlink:role="class">QCustom3DVolume</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtdatavisualization-custom3ditem.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qcustom3dlabel.xml" xlink:role="class">QCustom3DLabel</db:link> and <db:link xlink:href="qcustom3dvolume.xml" xlink:role="class">QCustom3DVolume</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A custom item has a custom mesh, position, scaling, rotation, and an optional texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstract3dgraph.xml#addCustomItem">QAbstract3DGraph::addCustomItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="meshFile-prop">
<db:title>meshFile : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>meshFile</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">meshFile</db:synopsisinfo>
<db:synopsisinfo role="setter">setMeshFile</db:synopsisinfo>
<db:synopsisinfo role="notifier">meshFileChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the item mesh file name.</db:para>
<db:para>The item in the file must be in Wavefront OBJ format and include vertices, normals, and UVs. It also needs to be in triangles.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">meshFile</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMeshFile</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>meshFile</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">meshFileChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>meshFile</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="position-prop">
<db:title>position : QVector3D</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVector3D</db:type>
<db:varname>position</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">position</db:synopsisinfo>
<db:synopsisinfo role="setter">setPosition</db:synopsisinfo>
<db:synopsisinfo role="notifier">positionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the item position as a <db:link xlink:href="qvector3d.xml">QVector3D</db:link>.</db:para>
<db:para>Defaults to <db:code>QVector3D(0.0, 0.0, 0.0)</db:code>.</db:para>
<db:para>Item position is specified either in data coordinates or in absolute coordinates, depending on the <db:link xlink:href="qcustom3ditem.xml#positionAbsolute-prop">positionAbsolute</db:link> property. When using absolute coordinates, values between <db:code>-1.0...1.0</db:code> are within axis ranges.</db:para>
<db:note>
<db:para>Items positioned outside any axis range are not rendered if <db:link xlink:href="qcustom3ditem.xml#positionAbsolute-prop">positionAbsolute</db:link> is <db:code>false</db:code>, unless the item is a <db:link xlink:href="qcustom3dvolume.xml">QCustom3DVolume</db:link> that would be partially visible and <db:link xlink:href="qcustom3ditem.xml#scalingAbsolute-prop">scalingAbsolute</db:link> is also <db:code>false</db:code>. In that case, the visible portion of the volume will be rendered.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> <db:emphasis role="bold">position</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPosition</db:emphasis>(const <db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> &amp;<db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">positionChanged</db:emphasis>(const <db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> &amp;<db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3ditem.xml#positionAbsolute-prop">positionAbsolute</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="positionAbsolute-prop">
<db:title>positionAbsolute : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>positionAbsolute</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isPositionAbsolute</db:synopsisinfo>
<db:synopsisinfo role="setter">setPositionAbsolute</db:synopsisinfo>
<db:synopsisinfo role="notifier">positionAbsoluteChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether item position is to be handled in data coordinates or in absolute coordinates.</db:para>
<db:para>Defaults to <db:code>false</db:code>. Items with absolute coordinates will always be rendered, whereas items with data coordinates are only rendered if they are within axis ranges.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isPositionAbsolute</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPositionAbsolute</db:emphasis>(<db:type>bool</db:type> <db:emphasis>positionAbsolute</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">positionAbsoluteChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>positionAbsolute</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3ditem.xml#position-prop">position</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotation-prop">
<db:title>rotation : QQuaternion</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QQuaternion</db:type>
<db:varname>rotation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">rotation</db:synopsisinfo>
<db:synopsisinfo role="setter">setRotation</db:synopsisinfo>
<db:synopsisinfo role="notifier">rotationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the item rotation as a <db:link xlink:href="qquaternion.xml">QQuaternion</db:link>.</db:para>
<db:para>Defaults to <db:code>QQuaternion(0.0, 0.0, 0.0, 0.0)</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qquaternion.xml">QQuaternion</db:link></db:type> <db:emphasis role="bold">rotation</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotation</db:emphasis>(const <db:type><db:link xlink:href="qquaternion.xml">QQuaternion</db:link></db:type> &amp;<db:emphasis>rotation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationChanged</db:emphasis>(const <db:type><db:link xlink:href="qquaternion.xml">QQuaternion</db:link></db:type> &amp;<db:emphasis>rotation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="scaling-prop">
<db:title>scaling : QVector3D</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVector3D</db:type>
<db:varname>scaling</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">scaling</db:synopsisinfo>
<db:synopsisinfo role="setter">setScaling</db:synopsisinfo>
<db:synopsisinfo role="notifier">scalingChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the item scaling as a <db:link xlink:href="qvector3d.xml">QVector3D</db:link>.</db:para>
<db:para>Defaults to <db:code>QVector3D(0.1, 0.1, 0.1)</db:code>.</db:para>
<db:para>Item scaling is either in data values or in absolute values, depending on the <db:link xlink:href="qcustom3ditem.xml#scalingAbsolute-prop">scalingAbsolute</db:link> property. The default vector interpreted as absolute values sets the item to 10% of the height of the graph, provided the item mesh is normalized and the graph aspect ratios have not been changed from the defaults.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> <db:emphasis role="bold">scaling</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setScaling</db:emphasis>(const <db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> &amp;<db:emphasis>scaling</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">scalingChanged</db:emphasis>(const <db:type><db:link xlink:href="qvector3d.xml">QVector3D</db:link></db:type> &amp;<db:emphasis>scaling</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3ditem.xml#scalingAbsolute-prop">scalingAbsolute</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scalingAbsolute-prop">
<db:title>[since QtDataVisualization 1.2] scalingAbsolute : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>scalingAbsolute</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isScalingAbsolute</db:synopsisinfo>
<db:synopsisinfo role="setter">setScalingAbsolute</db:synopsisinfo>
<db:synopsisinfo role="notifier">scalingAbsoluteChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether item scaling is to be handled in data values or in absolute values.</db:para>
<db:para>Defaults to <db:code>true</db:code>.</db:para>
<db:para>Items with absolute scaling will be rendered at the same size, regardless of axis ranges. Items with data scaling will change their apparent size according to the axis ranges. If <db:link xlink:href="qcustom3ditem.xml#positionAbsolute-prop">positionAbsolute</db:link> is <db:code>true</db:code>, this property is ignored and scaling is interpreted as an absolute value. If the item has rotation, the data scaling is calculated on the unrotated item. Similarly, for <db:link xlink:href="qcustom3dvolume.xml">QCustom3DVolume</db:link> items, the range clipping is calculated on the unrotated item.</db:para>
<db:note>
<db:para>Only absolute scaling is supported for <db:link xlink:href="qcustom3dlabel.xml">QCustom3DLabel</db:link> items or for custom items used in <db:link xlink:href="qabstract3dgraph.xml#polar-prop">polar</db:link> graphs.</db:para>
</db:note>
<db:note>
<db:para>The custom item's mesh must be normalized to the range <db:code>[-1 ,1]</db:code>, or the data scaling will not be accurate.</db:para>
</db:note>
<db:para>This property was introduced in QtDataVisualization 1.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isScalingAbsolute</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setScalingAbsolute</db:emphasis>(<db:type>bool</db:type> <db:emphasis>scalingAbsolute</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">scalingAbsoluteChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>scalingAbsolute</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3ditem.xml#scaling-prop">scaling</db:link></db:member>
<db:member><db:link xlink:href="qcustom3ditem.xml#positionAbsolute-prop">positionAbsolute</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shadowCasting-prop">
<db:title>shadowCasting : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>shadowCasting</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isShadowCasting</db:synopsisinfo>
<db:synopsisinfo role="setter">setShadowCasting</db:synopsisinfo>
<db:synopsisinfo role="notifier">shadowCastingChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether shadow casting for the item is enabled.</db:para>
<db:para>Defaults to <db:code>true</db:code>. If <db:code>false</db:code>, the item does not cast shadows regardless of <db:link xlink:href="qabstract3dgraph.xml#ShadowQuality-enum">QAbstract3DGraph::ShadowQuality</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isShadowCasting</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setShadowCasting</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">shadowCastingChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>shadowCasting</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="textureFile-prop">
<db:title>textureFile : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>textureFile</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">textureFile</db:synopsisinfo>
<db:synopsisinfo role="setter">setTextureFile</db:synopsisinfo>
<db:synopsisinfo role="notifier">textureFileChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the texture file name for the item.</db:para>
<db:para>If both this property and the texture image are unset, a solid gray texture will be used.</db:para>
<db:note>
<db:para>To conserve memory, the <db:link xlink:href="qimage.xml">QImage</db:link> loaded from the file is cleared after a texture is created.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">textureFile</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextureFile</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>textureFile</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">textureFileChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>textureFile</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="visible-prop">
<db:title>visible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>visible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setVisible</db:synopsisinfo>
<db:synopsisinfo role="notifier">visibleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the visibility of the item.</db:para>
<db:para>Defaults to <db:code>true</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">visibleChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCustom3DItem">
<db:title>[explicit] QCustom3DItem::QCustom3DItem(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCustom3DItem</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCustom3DItem(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a custom 3D item with the specified <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QCustom3DItem-1">
<db:title>[explicit] QCustom3DItem::QCustom3DItem(const QString &amp;<db:emphasis>meshFile</db:emphasis>, const QVector3D &amp;<db:emphasis>position</db:emphasis>, const QVector3D &amp;<db:emphasis>scaling</db:emphasis>, const QQuaternion &amp;<db:emphasis>rotation</db:emphasis>, const QImage &amp;<db:emphasis>texture</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCustom3DItem</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>meshFile</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>scaling</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QQuaternion &amp;</db:type>
<db:parameter>rotation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>texture</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCustom3DItem(const QString &amp;meshFile, const QVector3D &amp;position, const QVector3D &amp;scaling, const QQuaternion &amp;rotation, const QImage &amp;texture, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a custom 3D item with the specified <db:code role="parameter">meshFile</db:code>, <db:code role="parameter">position</db:code>, <db:code role="parameter">scaling</db:code>, <db:code role="parameter">rotation</db:code>, <db:code role="parameter">texture</db:code> image, and optional <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QCustom3DItem">
<db:title>[virtual] QCustom3DItem::~QCustom3DItem()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QCustom3DItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCustom3DItem()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Deletes the custom 3D item.</db:para>
</db:section>
<db:section xml:id="setRotationAxisAndAngle">
<db:title>void QCustom3DItem::setRotationAxisAndAngle(const QVector3D &amp;<db:emphasis>axis</db:emphasis>, float <db:emphasis>angle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRotationAxisAndAngle</db:methodname>
<db:methodparam>
<db:type>const QVector3D &amp;</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>angle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRotationAxisAndAngle(const QVector3D &amp;axis, float angle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>A convenience function to construct the rotation quaternion from <db:code role="parameter">axis</db:code> and <db:code role="parameter">angle</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcustom3ditem.xml#rotation-prop">rotation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextureImage">
<db:title>void QCustom3DItem::setTextureImage(const QImage &amp;<db:emphasis>textureImage</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTextureImage</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>textureImage</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTextureImage(const QImage &amp;textureImage)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value of <db:code role="parameter">textureImage</db:code> as a <db:link xlink:href="qimage.xml">QImage</db:link> for the item. The texture defaults to solid gray.</db:para>
<db:note>
<db:para>To conserve memory, the given <db:link xlink:href="qimage.xml">QImage</db:link> is cleared after a texture is created.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
