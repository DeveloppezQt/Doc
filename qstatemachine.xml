<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStateMachine Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link> class provides a hierarchical finite state machine.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStateMachine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qstate.xml" xlink:role="class">QState</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStateMachine is part of <db:simplelist><db:member><db:link xlink:href="statemachine.xml">State Machine Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstatemachine.xml">QStateMachine</db:link> is based on the concepts and notation of <db:link xlink:href="http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/Statecharts.pdf">Statecharts</db:link>. <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link> is part of <db:link xlink:href="statemachine-api.xml">The State Machine Framework</db:link>.</db:para>
<db:para>A state machine manages a set of states (classes that inherit from <db:link xlink:href="qabstractstate.xml">QAbstractState</db:link>) and transitions (descendants of <db:link xlink:href="qabstracttransition.xml">QAbstractTransition</db:link>) between those states; these states and transitions define a state graph. Once a state graph has been built, the state machine can execute it. <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link>'s execution algorithm is based on the <db:link xlink:href="http://www.w3.org/TR/scxml/">State Chart XML (SCXML)</db:link> algorithm. The framework's <db:link xlink:href="statemachine-api.xml">overview</db:link> gives several state graphs and the code to build them.</db:para>
<db:para>Use the <db:link xlink:href="qstatemachine.xml#addState">addState</db:link>() function to add a top-level state to the state machine. States are removed with the <db:link xlink:href="qstatemachine.xml#removeState">removeState</db:link>() function. Removing states while the machine is running is discouraged.</db:para>
<db:para>Before the machine can be started, the <db:link xlink:href="qstate.xml#initialState">initial state</db:link> must be set. The initial state is the state that the machine enters when started. You can then <db:link xlink:href="qstatemachine.xml#start">start</db:link>() the state machine. The <db:link xlink:href="qstatemachine.xml#started">started</db:link>() signal is emitted when the initial state is entered.</db:para>
<db:para>The machine is event driven and keeps its own event loop. Events are posted to the machine through <db:link xlink:href="qstatemachine.xml#postEvent">postEvent</db:link>(). Note that this means that it executes asynchronously, and that it will not progress without a running event loop. You will normally not have to post events to the machine directly as Qt's transitions, e.g., <db:link xlink:href="qeventtransition.xml">QEventTransition</db:link> and its subclasses, handle this. But for custom transitions triggered by events, <db:link xlink:href="qstatemachine.xml#postEvent">postEvent</db:link>() is useful.</db:para>
<db:para>The state machine processes events and takes transitions until a top-level final state is entered; the state machine then emits the <db:link xlink:href="qstate.xml#finished">finished</db:link>() signal. You can also <db:link xlink:href="qstatemachine.xml#stop">stop</db:link>() the state machine explicitly. The <db:link xlink:href="qstatemachine.xml#stopped">stopped</db:link>() signal is emitted in this case.</db:para>
<db:para>The following snippet shows a state machine that will finish when a button is clicked:</db:para>
<db:programlisting language="cpp">QPushButton button;

QStateMachine machine;
QState *s1 = new QState();
s1-&amp;gt;assignProperty(&amp;amp;button, &quot;text&quot;, &quot;Click me&quot;);

QFinalState *s2 = new QFinalState();
s1-&amp;gt;addTransition(&amp;amp;button, SIGNAL(clicked()), s2);

machine.addState(s1);
machine.addState(s2);
machine.setInitialState(s1);
machine.start();
</db:programlisting>
<db:para>This code example uses <db:link xlink:href="qstate.xml">QState</db:link>, which inherits <db:link xlink:href="qabstractstate.xml">QAbstractState</db:link>. The <db:link xlink:href="qstate.xml">QState</db:link> class provides a state that you can use to set properties and invoke methods on <db:link xlink:href="qobject.xml">QObject</db:link>s when the state is entered or exited. It also contains convenience functions for adding transitions, e.g., <db:link xlink:href="qsignaltransition.xml">QSignalTransition</db:link>s as in this example. See the <db:link xlink:href="qstate.xml">QState</db:link> class description for further details.</db:para>
<db:para>If an error is encountered, the machine will look for an <db:link xlink:href="qstate.xml#errorState">error state</db:link>, and if one is available, it will enter this state. The types of errors possible are described by the <db:link xlink:href="qstatemachine.xml#Error-enum">Error</db:link> enum. After the error state is entered, the type of the error can be retrieved with <db:link xlink:href="qstatemachine.xml#error">error</db:link>(). The execution of the state graph will not stop when the error state is entered. If no error state applies to the erroneous state, the machine will stop executing and an error message will be printed to the console.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractstate.xml">QAbstractState</db:link></db:member>
<db:member><db:link xlink:href="qabstracttransition.xml">QAbstractTransition</db:link></db:member>
<db:member><db:link xlink:href="qstate.xml">QState</db:link></db:member>
<db:member><db:link xlink:href="statemachine-api.xml">The State Machine Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QStateMachine::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoInitialStateError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoDefaultStateInHistoryStateError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoCommonAncestorForTransitionError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type defines errors that can occur in the state machine at run time. When the state machine encounters an unrecoverable error at run time, it will set the error code returned by <db:link xlink:href="qstatemachine.xml#error">error</db:link>(), the error message returned by <db:link xlink:href="qstatemachine.xml#errorString">errorString</db:link>(), and enter an error state based on the context of the error.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstatemachine.xml">QStateMachine</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstatemachine.xml">QStateMachine</db:link></db:emphasis>::NoInitialStateError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The machine has entered a <db:link xlink:href="qstate.xml">QState</db:link> with children which does not have an initial state set. The context of this error is the state which is missing an initial state.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstatemachine.xml">QStateMachine</db:link></db:emphasis>::NoDefaultStateInHistoryStateError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The machine has entered a <db:link xlink:href="qhistorystate.xml">QHistoryState</db:link> which does not have a default state set. The context of this error is the <db:link xlink:href="qhistorystate.xml">QHistoryState</db:link> which is missing a default state.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstatemachine.xml">QStateMachine</db:link></db:emphasis>::NoCommonAncestorForTransitionError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The machine has selected a transition whose source and targets are not part of the same tree of states, and thus are not part of the same state machine. Commonly, this could mean that one of the states has not been given any parent or added to any machine. The context of this error is the source state of the transition.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#setErrorState">setErrorState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="EventPriority-enum">
<db:title>enum QStateMachine::EventPriority</db:title>
<db:enumsynopsis>
<db:enumname>EventPriority</db:enumname>
<db:enumitem>
<db:enumidentifier>NormalPriority</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HighPriority</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type specifies the priority of an event posted to the state machine using <db:link xlink:href="qstatemachine.xml#postEvent">postEvent</db:link>().</db:para>
<db:para>Events of high priority are processed before events of normal priority.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstatemachine.xml">QStateMachine</db:link></db:emphasis>::NormalPriority</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The event has normal priority.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qstatemachine.xml">QStateMachine</db:link></db:emphasis>::HighPriority</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The event has high priority.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="animated-prop">
<db:title>animated : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>animated</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isAnimated</db:synopsisinfo>
<db:synopsisinfo role="setter">setAnimated</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether animations are enabled</db:para>
<db:para>The default value of this property is true.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qstatemachine.xml#isAnimated">isAnimated</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qstatemachine.xml#setAnimated">setAnimated</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttransition.xml#addAnimation">QAbstractTransition::addAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString-prop">
<db:title>[read-only] errorString : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>errorString</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">errorString</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the error string of this state machine</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qstatemachine.xml#errorString">errorString</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="globalRestorePolicy-prop">
<db:title>globalRestorePolicy : QState::RestorePolicy</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QState::RestorePolicy</db:type>
<db:varname>globalRestorePolicy</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">globalRestorePolicy</db:synopsisinfo>
<db:synopsisinfo role="setter">setGlobalRestorePolicy</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the restore policy for states of this state machine.</db:para>
<db:para>The default value of this property is <db:link xlink:href="qstate.xml#RestorePolicy-enum">QState::DontRestoreProperties</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstate.xml#RestorePolicy-enum">QState::RestorePolicy</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qstatemachine.xml#globalRestorePolicy">globalRestorePolicy</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qstatemachine.xml#setGlobalRestorePolicy">setGlobalRestorePolicy</db:link></db:emphasis>(<db:type><db:link xlink:href="qstate.xml#RestorePolicy-enum">QState::RestorePolicy</db:link></db:type> <db:emphasis>restorePolicy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="running-prop">
<db:title>[since 5.4] running : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>running</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isRunning</db:synopsisinfo>
<db:synopsisinfo role="setter">setRunning</db:synopsisinfo>
<db:synopsisinfo role="notifier">runningChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the running state of this state machine</db:para>
<db:para>This property was introduced in Qt 5.4.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isRunning</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRunning</db:emphasis>(<db:type>bool</db:type> <db:emphasis>running</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qstatemachine.xml#runningChanged">runningChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>running</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatemachine.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qstatemachine.xml#stop">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qstatemachine.xml#started">started</db:link>()</db:member>
<db:member><db:link xlink:href="qstatemachine.xml#stopped">stopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstatemachine.xml#runningChanged">runningChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStateMachine">
<db:title>[explicit] QStateMachine::QStateMachine(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QStateMachine</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QStateMachine(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new state machine with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QStateMachine-1">
<db:title>[explicit, since 5.0] QStateMachine::QStateMachine(QState::ChildMode <db:emphasis>childMode</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QStateMachine</db:methodname>
<db:methodparam>
<db:type>QState::ChildMode</db:type>
<db:parameter>childMode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStateMachine(QState::ChildMode childMode, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new state machine with the given <db:code role="parameter">childMode</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="dtor.QStateMachine">
<db:title>[virtual] QStateMachine::~QStateMachine()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QStateMachine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QStateMachine()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this state machine.</db:para>
</db:section>
<db:section xml:id="addDefaultAnimation">
<db:title>void QStateMachine::addDefaultAnimation(QAbstractAnimation *<db:emphasis>animation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addDefaultAnimation</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation *</db:type>
<db:parameter>animation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addDefaultAnimation(QAbstractAnimation *animation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a default <db:code role="parameter">animation</db:code> to be considered for any transition.</db:para>
</db:section>
<db:section xml:id="addState">
<db:title>void QStateMachine::addState(QAbstractState *<db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addState</db:methodname>
<db:methodparam>
<db:type>QAbstractState *</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addState(QAbstractState *state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given <db:code role="parameter">state</db:code> to this state machine. The state becomes a top-level state.</db:para>
<db:para>If the state is already in a different machine, it will first be removed from its old machine, and then added to this machine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatemachine.xml#removeState">removeState</db:link>()</db:member>
<db:member><db:link xlink:href="qstate.xml#setInitialState">setInitialState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cancelDelayedEvent">
<db:title>bool QStateMachine::cancelDelayedEvent(int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>cancelDelayedEvent</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool cancelDelayedEvent(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Cancels the delayed event identified by the given <db:code role="parameter">id</db:code>. The id should be a value returned by a call to <db:link xlink:href="qstatemachine.xml#postDelayedEvent">postDelayedEvent</db:link>(). Returns true if the event was successfully cancelled, otherwise returns false.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatemachine.xml#postDelayedEvent">postDelayedEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearError">
<db:title>void QStateMachine::clearError()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearError()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the error string and error code of the state machine.</db:para>
</db:section>
<db:section xml:id="configuration">
<db:title>QSet&lt;QAbstractState *&gt; QStateMachine::configuration() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSet&lt;QAbstractState *&gt;</db:type>
<db:methodname>configuration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSet&lt;QAbstractState *&gt; configuration() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximal consistent set of states (including parallel and final states) that this state machine is currently in. If a state s is in the configuration, it is always the case that the parent of s is also in c. Note, however, that the machine itself is not an explicit member of the configuration.</db:para>
</db:section>
<db:section xml:id="defaultAnimations">
<db:title>QList&lt;QAbstractAnimation *&gt; QStateMachine::defaultAnimations() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QAbstractAnimation *&gt;</db:type>
<db:methodname>defaultAnimations</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QAbstractAnimation *&gt; defaultAnimations() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of default animations that will be considered for any transition.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QStateMachine::Error QStateMachine::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStateMachine::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStateMachine::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the error code of the last error that occurred in the state machine.</db:para>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QStateMachine::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">errorString</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the error string of the last error that occurred in the state machine.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qstatemachine.xml#errorString-prop">errorString</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QStateMachine::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qstate.xml#event" role="function">QState::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[override virtual] bool QStateMachine::eventFilter(QObject *<db:emphasis>watched</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>eventFilter</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>watched</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool eventFilter(QObject *watched, QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#eventFilter" role="function">QObject::eventFilter(QObject *watched, QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="globalRestorePolicy">
<db:title>QState::RestorePolicy QStateMachine::globalRestorePolicy() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QState::RestorePolicy</db:type>
<db:methodname>globalRestorePolicy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">globalRestorePolicy</db:synopsisinfo>
<db:synopsisinfo role="signature">QState::RestorePolicy globalRestorePolicy() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the restore policy of the state machine.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qstatemachine.xml#globalRestorePolicy-prop">globalRestorePolicy</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatemachine.xml#setGlobalRestorePolicy">setGlobalRestorePolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAnimated">
<db:title>bool QStateMachine::isAnimated() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAnimated</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">animated</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAnimated() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether animations are enabled for this state machine.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qstatemachine.xml#animated-prop">animated</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="onEntry">
<db:title>[override virtual protected] void QStateMachine::onEntry(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>onEntry</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void onEntry(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qstate.xml#onEntry" role="function">QState::onEntry(QEvent *event)</db:link>.</db:para>
<db:para>This function will call <db:link xlink:href="qstatemachine.xml#start">start</db:link>() to start the state machine.</db:para>
</db:section>
<db:section xml:id="onExit">
<db:title>[override virtual protected] void QStateMachine::onExit(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>onExit</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void onExit(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qstate.xml#onExit" role="function">QState::onExit(QEvent *event)</db:link>.</db:para>
<db:para>This function will call <db:link xlink:href="qstatemachine.xml#stop">stop</db:link>() to stop the state machine and subsequently emit the <db:link xlink:href="qstatemachine.xml#stopped">stopped</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="postDelayedEvent">
<db:title>int QStateMachine::postDelayedEvent(QEvent *<db:emphasis>event</db:emphasis>, int <db:emphasis>delay</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>postDelayedEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>delay</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int postDelayedEvent(QEvent *event, int delay)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Posts the given <db:code role="parameter">event</db:code> for processing by this state machine, with the given <db:code role="parameter">delay</db:code> in milliseconds. Returns an identifier associated with the delayed event, or -1 if the event could not be posted.</db:para>
<db:para>This function returns immediately. When the delay has expired, the event will be added to the state machine's event queue for processing. The state machine takes ownership of the event and deletes it once it has been processed.</db:para>
<db:para>You can only post events when the state machine is running.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatemachine.xml#cancelDelayedEvent">cancelDelayedEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qstatemachine.xml#postEvent">postEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="postEvent">
<db:title>void QStateMachine::postEvent(QEvent *<db:emphasis>event</db:emphasis>, QStateMachine::EventPriority <db:emphasis>priority</db:emphasis> = NormalPriority)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>postEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QStateMachine::EventPriority</db:type>
<db:parameter>priority</db:parameter>
<db:initializer>NormalPriority</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void postEvent(QEvent *event, QStateMachine::EventPriority priority)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Posts the given <db:code role="parameter">event</db:code> of the given <db:code role="parameter">priority</db:code> for processing by this state machine.</db:para>
<db:para>This function returns immediately. The event is added to the state machine's event queue. Events are processed in the order posted. The state machine takes ownership of the event and deletes it once it has been processed.</db:para>
<db:para>You can only post events when the state machine is running or when it is starting up.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatemachine.xml#postDelayedEvent">postDelayedEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeDefaultAnimation">
<db:title>void QStateMachine::removeDefaultAnimation(QAbstractAnimation *<db:emphasis>animation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeDefaultAnimation</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation *</db:type>
<db:parameter>animation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeDefaultAnimation(QAbstractAnimation *animation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">animation</db:code> from the list of default animations.</db:para>
</db:section>
<db:section xml:id="removeState">
<db:title>void QStateMachine::removeState(QAbstractState *<db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeState</db:methodname>
<db:methodparam>
<db:type>QAbstractState *</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeState(QAbstractState *state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the given <db:code role="parameter">state</db:code> from this state machine. The state machine releases ownership of the state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatemachine.xml#addState">addState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="runningChanged">
<db:title>[since 5.4] void QStateMachine::runningChanged(bool <db:emphasis>running</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>runningChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>running</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">running</db:synopsisinfo>
<db:synopsisinfo role="signature">void runningChanged(bool running)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the running property is changed with <db:code role="parameter">running</db:code> as argument.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qstatemachine.xml#running-prop">running</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatemachine.xml#running-prop">QStateMachine::running</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAnimated">
<db:title>void QStateMachine::setAnimated(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAnimated</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">animated</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAnimated(bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether animations are <db:code role="parameter">enabled</db:code> for this state machine.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qstatemachine.xml#animated-prop">animated</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatemachine.xml#isAnimated">isAnimated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGlobalRestorePolicy">
<db:title>void QStateMachine::setGlobalRestorePolicy(QState::RestorePolicy <db:emphasis>restorePolicy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setGlobalRestorePolicy</db:methodname>
<db:methodparam>
<db:type>QState::RestorePolicy</db:type>
<db:parameter>restorePolicy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">globalRestorePolicy</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGlobalRestorePolicy(QState::RestorePolicy restorePolicy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the restore policy of the state machine to <db:code role="parameter">restorePolicy</db:code>. The default restore policy is <db:link xlink:href="qstate.xml#RestorePolicy-enum">QState::DontRestoreProperties</db:link>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qstatemachine.xml#globalRestorePolicy-prop">globalRestorePolicy</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatemachine.xml#globalRestorePolicy">globalRestorePolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>void QStateMachine::start()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>start</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void start()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts this state machine. The machine will reset its configuration and transition to the initial state. When a final top-level state (<db:link xlink:href="qfinalstate.xml">QFinalState</db:link>) is entered, the machine will emit the <db:link xlink:href="qstate.xml#finished">finished</db:link>() signal.</db:para>
<db:note>
<db:para>A state machine will not run without a running event loop, such as the main application event loop started with <db:link xlink:href="qcoreapplication.xml#exec">QCoreApplication::exec</db:link>() or <db:link xlink:href="qapplication.xml#exec">QApplication::exec</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatemachine.xml#started">started</db:link>()</db:member>
<db:member><db:link xlink:href="qstate.xml#finished">finished</db:link>()</db:member>
<db:member><db:link xlink:href="qstatemachine.xml#stop">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qstate.xml#initialState">initialState</db:link>()</db:member>
<db:member><db:link xlink:href="qstatemachine.xml#running-prop">setRunning</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="started">
<db:title>void QStateMachine::started()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>started</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void started()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the state machine has entered its initial state (QStateMachine::initialState).</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#finished">QStateMachine::finished</db:link>()</db:member>
<db:member><db:link xlink:href="qstatemachine.xml#start">QStateMachine::start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop">
<db:title>void QStateMachine::stop()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops this state machine. The state machine will stop processing events and then emit the <db:link xlink:href="qstatemachine.xml#stopped">stopped</db:link>() signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatemachine.xml#stopped">stopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstatemachine.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qstatemachine.xml#running-prop">setRunning</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stopped">
<db:title>void QStateMachine::stopped()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stopped</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stopped()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the state machine has stopped.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatemachine.xml#stop">QStateMachine::stop</db:link>()</db:member>
<db:member><db:link xlink:href="qstate.xml#finished">QStateMachine::finished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
