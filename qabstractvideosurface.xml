<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractVideoSurface Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractvideosurface.xml">QAbstractVideoSurface</db:link> class is a base class for video presentation surfaces.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractVideoSurface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractVideoSurface is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_video</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qabstractvideosurface.xml">QAbstractVideoSurface</db:link> class defines the standard interface that video producers use to inter-operate with video presentation surfaces. You can subclass this interface to receive video frames from sources like <db:link xlink:href="qmediaplayer.xml">decoded media</db:link> or <db:link xlink:href="qcamera.xml">cameras</db:link> to perform your own processing.</db:para>
<db:para>A video surface presents a continuous stream of identically formatted <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> instances, where the format of each frame is compatible with a stream format supplied when starting a presentation. Each frame may have timestamp information that can be used by the surface to decide when to display that frame.</db:para>
<db:para>A list of pixel formats a surface can present is given by the <db:link xlink:href="qabstractvideosurface.xml#supportedPixelFormats">supportedPixelFormats</db:link>() function, and the <db:link xlink:href="qabstractvideosurface.xml#isFormatSupported">isFormatSupported</db:link>() function will test if a video surface format is supported. If a format is not supported the <db:link xlink:href="qabstractvideosurface.xml#nearestFormat">nearestFormat</db:link>() function may be able to suggest a similar format. For example, if a surface supports fixed set of resolutions it may suggest the smallest supported resolution that contains the proposed resolution.</db:para>
<db:para>The <db:link xlink:href="qabstractvideosurface.xml#start">start</db:link>() function takes a supported format and enables a video surface. Once started a surface will begin displaying the frames it receives in the <db:link xlink:href="qabstractvideosurface.xml#present">present</db:link>() function. Surfaces may hold a reference to the buffer of a presented video frame until a new frame is presented or streaming is stopped. In addition, a video surface may hold a reference to a video frame until the <db:link xlink:href="qvideoframe.xml#endTime">end timestamp</db:link> has passed. The <db:link xlink:href="qabstractvideosurface.xml#stop">stop</db:link>() function will disable a surface and release any video buffers it holds references to.</db:para>
<db:section xml:id="implementing-a-subclass-of-qabstractvideosurface">
<db:title>Implementing a subclass of QAbstractVideoSurface</db:title>
<db:para>When implementing a subclass of this interface, there are only a handful of functions to implement, broken down into two classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Format related</db:para>
</db:listitem>
<db:listitem>
<db:para>Presentation related</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For format related functionality, you just have to describe the pixel formats that you support (and the <db:link xlink:href="qabstractvideosurface.xml#nearestFormat">nearestFormat</db:link>() function). For presentation related functionality, you have to implement the <db:link xlink:href="qabstractvideosurface.xml#present">present</db:link>() function, and the <db:link xlink:href="qabstractvideosurface.xml#start">start</db:link>() and <db:link xlink:href="qabstractvideosurface.xml#stop">stop</db:link>() functions.</db:para>
<db:note>
<db:para>You must call the base class implementation of <db:link xlink:href="qabstractvideosurface.xml#start">start</db:link>() and <db:link xlink:href="qabstractvideosurface.xml#stop">stop</db:link>() in your implementation.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QAbstractVideoSurface::Error</db:title>
<db:para>This enum describes the errors that may be returned by the <db:link xlink:href="qabstractvideosurface.xml#error">error</db:link>() function.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideosurface.xml">QAbstractVideoSurface</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideosurface.xml">QAbstractVideoSurface</db:link></db:emphasis>::UnsupportedFormatError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A video format was not supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideosurface.xml">QAbstractVideoSurface</db:link></db:emphasis>::IncorrectFormatError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A video frame was not compatible with the format of the surface.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideosurface.xml">QAbstractVideoSurface</db:link></db:emphasis>::StoppedError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The surface has not been started.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractvideosurface.xml">QAbstractVideoSurface</db:link></db:emphasis>::ResourceError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The surface could not allocate some resource.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="nativeResolution-prop">
<db:title>[read-only] nativeResolution : const QSize</db:title>
<db:para>The native resolution of video surface. This is the resolution of video frames the surface can render with optimal quality and/or performance.</db:para>
<db:para>The native resolution is not always known and can be changed during playback.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">nativeResolution</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qabstractvideosurface.xml#nativeResolutionChanged">nativeResolutionChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> &amp;<db:emphasis>resolution</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractVideoSurface">
<db:title>[explicit] QAbstractVideoSurface::QAbstractVideoSurface(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a video surface with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractVideoSurface">
<db:title>[virtual noexcept] QAbstractVideoSurface::~QAbstractVideoSurface()</db:title>
<db:para>Destroys a video surface.</db:para>
</db:section>
<db:section xml:id="activeChanged">
<db:title>void QAbstractVideoSurface::activeChanged(bool <db:emphasis>active</db:emphasis>)</db:title>
<db:para>Signals that the <db:code role="parameter">active</db:code> state of a video surface has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideosurface.xml#isActive">isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractvideosurface.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractvideosurface.xml#stop">stop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QAbstractVideoSurface::Error QAbstractVideoSurface::error() const</db:title>
<db:para>Returns the last error that occurred.</db:para>
<db:para>If a surface fails to <db:link xlink:href="qabstractvideosurface.xml#start">start</db:link>(), or stops unexpectedly this function can be called to discover what error occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideosurface.xml#setError">setError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QAbstractVideoSurface::isActive() const</db:title>
<db:para>Indicates whether a video surface has been started.</db:para>
<db:para>Returns true if the surface has been started, and false otherwise.</db:para>
</db:section>
<db:section xml:id="isFormatSupported">
<db:title>[virtual] bool QAbstractVideoSurface::isFormatSupported(const QVideoSurfaceFormat &amp;<db:emphasis>format</db:emphasis>) const</db:title>
<db:para>Tests a video surface <db:code role="parameter">format</db:code> to determine if a surface can accept it.</db:para>
<db:para>Returns true if the format is supported by the surface, and false otherwise.</db:para>
</db:section>
<db:section xml:id="nativeResolutionChanged">
<db:title>void QAbstractVideoSurface::nativeResolutionChanged(const QSize &amp;<db:emphasis>resolution</db:emphasis>)</db:title>
<db:para>Signals the native <db:code role="parameter">resolution</db:code> of video surface has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qabstractvideosurface.xml#nativeResolution-prop">nativeResolution</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="nearestFormat">
<db:title>[virtual] QVideoSurfaceFormat QAbstractVideoSurface::nearestFormat(const QVideoSurfaceFormat &amp;<db:emphasis>format</db:emphasis>) const</db:title>
<db:para>Returns a supported video surface format that is similar to <db:code role="parameter">format</db:code>.</db:para>
<db:para>A similar surface format is one that has the same <db:link xlink:href="qvideosurfaceformat.xml#pixelFormat">pixel format</db:link> and <db:link xlink:href="qvideosurfaceformat.xml#handleType">handle type</db:link> but may differ in some of the other properties. For example, if there are restrictions on the <db:link xlink:href="qvideosurfaceformat.xml#frameSize">frame sizes</db:link> a video surface can accept it may suggest a format with a larger frame size and a <db:link xlink:href="qvideosurfaceformat.xml#viewport">viewport</db:link> the size of the original frame size.</db:para>
<db:para>If the format is already supported it will be returned unchanged, or if there is no similar supported format an invalid format will be returned.</db:para>
</db:section>
<db:section xml:id="present">
<db:title>[pure virtual] bool QAbstractVideoSurface::present(const QVideoFrame &amp;<db:emphasis>frame</db:emphasis>)</db:title>
<db:para>Presents a video <db:code role="parameter">frame</db:code>.</db:para>
<db:para>Returns true if the frame was presented, and false if an error occurred.</db:para>
<db:para>Not all surfaces will block until the presentation of a frame has completed. Calling present() on a non-blocking surface may fail if called before the presentation of a previous frame has completed. In such cases the surface may not return to a ready state until it has had an opportunity to process events.</db:para>
<db:para>If present() fails for any other reason the surface should immediately enter the stopped state and an <db:link xlink:href="qabstractvideosurface.xml#error">error</db:link>() value will be set.</db:para>
<db:para>A video surface must be in the started state for present() to succeed, and the format of the video frame must be compatible with the current video surface format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideosurface.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setError">
<db:title>[protected] void QAbstractVideoSurface::setError(QAbstractVideoSurface::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:para>Sets the value of <db:link xlink:href="qabstractvideosurface.xml#error">error</db:link>() to <db:code role="parameter">error</db:code>.</db:para>
<db:para>This can be called by implementors of this interface to communicate what the most recent error was.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideosurface.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNativeResolution">
<db:title>[protected] void QAbstractVideoSurface::setNativeResolution(const QSize &amp;<db:emphasis>resolution</db:emphasis>)</db:title>
<db:para>Set the video surface native <db:code role="parameter">resolution</db:code>.</db:para>
<db:para>This function can be called by implementors of this interface to specify to frame producers what the native resolution of this surface is.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideosurface.xml#nativeResolution-prop">nativeResolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>[virtual] bool QAbstractVideoSurface::start(const QVideoSurfaceFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Starts a video surface presenting <db:code role="parameter">format</db:code> frames.</db:para>
<db:para>Returns true if the surface was started, and false if an error occurred.</db:para>
<db:note>
<db:para>You must call the base class implementation of start() at the end of your implementation.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideosurface.xml#isActive">isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractvideosurface.xml#stop">stop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop">
<db:title>[virtual] void QAbstractVideoSurface::stop()</db:title>
<db:para>Stops a video surface presenting frames and releases any resources acquired in <db:link xlink:href="qabstractvideosurface.xml#start">start</db:link>().</db:para>
<db:note>
<db:para>You must call the base class implementation of stop() at the start of your implementation.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideosurface.xml#isActive">isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractvideosurface.xml#start">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedFormatsChanged">
<db:title>void QAbstractVideoSurface::supportedFormatsChanged()</db:title>
<db:para>Signals that the set of formats supported by a video surface has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideosurface.xml#supportedPixelFormats">supportedPixelFormats</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractvideosurface.xml#isFormatSupported">isFormatSupported</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedPixelFormats">
<db:title>[pure virtual] QList&lt;QVideoFrame::PixelFormat&gt; QAbstractVideoSurface::supportedPixelFormats(QAbstractVideoBuffer::HandleType <db:emphasis>type</db:emphasis> = QAbstractVideoBuffer::NoHandle) const</db:title>
<db:para>Returns a list of pixel formats a video surface can present for a given handle <db:code role="parameter">type</db:code>.</db:para>
<db:para>The pixel formats returned for the <db:link xlink:href="qabstractvideobuffer.xml#HandleType-enum">QAbstractVideoBuffer::NoHandle</db:link> type are valid for any buffer that can be mapped in read-only mode.</db:para>
<db:para>Types that are first in the list can be assumed to be faster to render.</db:para>
</db:section>
<db:section xml:id="surfaceFormat">
<db:title>QVideoSurfaceFormat QAbstractVideoSurface::surfaceFormat() const</db:title>
<db:para>Returns the format of a video surface.</db:para>
</db:section>
<db:section xml:id="surfaceFormatChanged">
<db:title>void QAbstractVideoSurface::surfaceFormatChanged(const QVideoSurfaceFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Signals that the configured <db:code role="parameter">format</db:code> of a video surface has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractvideosurface.xml#surfaceFormat">surfaceFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractvideosurface.xml#start">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
