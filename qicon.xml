<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QIcon Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qicon.xml">QIcon</db:link> class provides scalable icons in different modes and states.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QIcon</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QIcon is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qicon.xml">QIcon</db:link> can generate smaller, larger, active, and disabled pixmaps from the set of pixmaps it is given. Such pixmaps are used by Qt widgets to show an icon representing a particular action.</db:para>
<db:para>The simplest use of <db:link xlink:href="qicon.xml">QIcon</db:link> is to create one from a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> file or resource, and then use it, allowing Qt to work out all the required icon styles and sizes. For example:</db:para>
<db:programlisting language="cpp">QToolButton *button = new QToolButton;
button-&gt;setIcon(QIcon(&quot;open.xpm&quot;));
</db:programlisting>
<db:para>To undo a <db:link xlink:href="qicon.xml">QIcon</db:link>, simply set a null icon in its place:</db:para>
<db:programlisting language="cpp">button-&gt;setIcon(QIcon());
</db:programlisting>
<db:para>Use the <db:link xlink:href="qimagereader.xml#supportedImageFormats">QImageReader::supportedImageFormats</db:link>() and <db:link xlink:href="qimagewriter.xml#supportedImageFormats">QImageWriter::supportedImageFormats</db:link>() functions to retrieve a complete list of the supported file formats.</db:para>
<db:para>When you retrieve a pixmap using pixmap(<db:link xlink:href="qsize.xml">QSize</db:link>, Mode, State), and no pixmap for this given size, mode and state has been added with <db:link xlink:href="qicon.xml#addFile">addFile</db:link>() or <db:link xlink:href="qicon.xml#addPixmap">addPixmap</db:link>(), then <db:link xlink:href="qicon.xml">QIcon</db:link> will generate one on the fly. This pixmap generation happens in a QIconEngineV2. The default engine scales pixmaps down if required, but never up, and it uses the current style to calculate a disabled appearance. By using custom icon engines, you can customize every aspect of generated icons. With QIconEnginePluginV2 it is possible to register different icon engines for different file suffixes, making it possible for third parties to provide additional icon engines to those included with Qt.</db:para>
<db:note>
<db:para>Since Qt 4.2, an icon engine that supports SVG is included.</db:para>
</db:note>
<db:section xml:id="making-classes-that-use-qicon">
<db:title>Making Classes that Use QIcon</db:title>
<db:para>If you write your own widgets that have an option to set a small pixmap, consider allowing a <db:link xlink:href="qicon.xml">QIcon</db:link> to be set for that pixmap. The Qt class QToolButton is an example of such a widget.</db:para>
<db:para>Provide a method to set a <db:link xlink:href="qicon.xml">QIcon</db:link>, and when you draw the icon, choose whichever pixmap is appropriate for the current state of your widget. For example:</db:para>
<db:programlisting language="cpp">void MyWidget::drawIcon(QPainter *painter, QPoint pos)
{
    QPixmap pixmap = icon.pixmap(QSize(22, 22),
                                   isEnabled() ? QIcon::Normal
                                               : QIcon::Disabled,
                                   isChecked() ? QIcon::On
                                               : QIcon::Off);
    painter-&gt;drawPixmap(pos, pixmap);
}
</db:programlisting>
<db:para>You might also make use of the <db:code>Active</db:code> mode, perhaps making your widget <db:code>Active</db:code> when the mouse is over the widget (see <db:link xlink:href="">QWidget::enterEvent()</db:link>), while the mouse is pressed pending the release that will activate the function, or when it is the currently selected item. If the widget can be toggled, the &quot;On&quot; mode might be used to draw a different icon.</db:para>
<db:mediaobject>
<db:alt>QIcon</db:alt>
<db:imageobject>
<db:imagedata fileref="images/icon.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">GUI Design Handbook: Iconic Label</db:link></db:member>
<db:member><db:link xlink:href="">Icons Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Mode-enum">
<db:title>enum QIcon::Mode</db:title>
<db:para>This enum type describes the mode for which a pixmap is intended to be used. The currently defined modes are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qicon.xml">QIcon</db:link></db:emphasis>::Normal</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Display the pixmap when the user is not interacting with the icon, but the functionality represented by the icon is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qicon.xml">QIcon</db:link></db:emphasis>::Disabled</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Display the pixmap when the functionality represented by the icon is not available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qicon.xml">QIcon</db:link></db:emphasis>::Active</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Display the pixmap when the functionality represented by the icon is available and the user is interacting with the icon, for example, moving the mouse over it or clicking it.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qicon.xml">QIcon</db:link></db:emphasis>::Selected</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Display the pixmap when the item represented by the icon is selected.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="State-enum">
<db:title>enum QIcon::State</db:title>
<db:para>This enum describes the state for which a pixmap is intended to be used. The <db:emphasis>state</db:emphasis> can be:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qicon.xml">QIcon</db:link></db:emphasis>::Off</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Display the pixmap when the widget is in an &quot;off&quot; state</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qicon.xml">QIcon</db:link></db:emphasis>::On</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Display the pixmap when the widget is in an &quot;on&quot; state</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QIcon">
<db:title>QIcon::QIcon()</db:title>
<db:para>Constructs a null icon.</db:para>
</db:section>
<db:section xml:id="QIcon-1">
<db:title>[explicit] QIcon::QIcon(QIconEngine *<db:emphasis>engine</db:emphasis>)</db:title>
<db:para>Creates an icon with a specific icon <db:code role="parameter">engine</db:code>. The icon takes ownership of the engine.</db:para>
</db:section>
<db:section xml:id="QIcon-3">
<db:title>QIcon::QIcon(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:para>Constructs an icon from a <db:code role="parameter">pixmap</db:code>.</db:para>
</db:section>
<db:section xml:id="QIcon-4">
<db:title>[explicit] QIcon::QIcon(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Constructs an icon from the file with the given <db:code role="parameter">fileName</db:code>. The file will be loaded on demand.</db:para>
<db:para>If <db:code role="parameter">fileName</db:code> contains a relative path (e.g. the filename only) the relevant file must be found relative to the runtime working directory.</db:para>
<db:para>The file name can be either refer to an actual file on disk or to one of the application's embedded resources. See the <db:link xlink:href="resources.xml">Resource System</db:link> overview for details on how to embed images and other resource files in the application's executable.</db:para>
<db:para>Use the <db:link xlink:href="qimagereader.xml#supportedImageFormats">QImageReader::supportedImageFormats</db:link>() and <db:link xlink:href="qimagewriter.xml#supportedImageFormats">QImageWriter::supportedImageFormats</db:link>() functions to retrieve a complete list of the supported file formats.</db:para>
</db:section>
<db:section xml:id="QIcon-2">
<db:title>QIcon::QIcon(const QIcon &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>. This is very fast.</db:para>
</db:section>
<db:section xml:id="dtor.QIcon">
<db:title>[noexcept] QIcon::~QIcon()</db:title>
<db:para>Destroys the icon.</db:para>
</db:section>
<db:section xml:id="actualSize">
<db:title>QSize QIcon::actualSize(const QSize &amp;<db:emphasis>size</db:emphasis>, QIcon::Mode <db:emphasis>mode</db:emphasis> = Normal, QIcon::State <db:emphasis>state</db:emphasis> = Off) const</db:title>
<db:para>Returns the actual size of the icon for the requested <db:code role="parameter">size</db:code>, <db:code role="parameter">mode</db:code>, and <db:code role="parameter">state</db:code>. The result might be smaller than requested, but never larger. The returned size is in device-independent pixels (This is relevant for high-dpi pixmaps.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#pixmap">pixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#paint">paint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="actualSize-1">
<db:title>[since 5.1] QSize QIcon::actualSize(QWindow *<db:emphasis>window</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>, QIcon::Mode <db:emphasis>mode</db:emphasis> = Normal, QIcon::State <db:emphasis>state</db:emphasis> = Off) const</db:title>
<db:para>Returns the actual size of the icon for the requested <db:code role="parameter">window</db:code> <db:code role="parameter">size</db:code>, <db:code role="parameter">mode</db:code>, and <db:code role="parameter">state</db:code>.</db:para>
<db:para>The pixmap can be smaller than the requested size. The returned size is in device-independent pixels (This is relevant for high-dpi pixmaps.)</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#actualSize">actualSize</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#pixmap">pixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#paint">paint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addFile">
<db:title>void QIcon::addFile(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis> = QSize(), QIcon::Mode <db:emphasis>mode</db:emphasis> = Normal, QIcon::State <db:emphasis>state</db:emphasis> = Off)</db:title>
<db:para>Adds an image from the file with the given <db:code role="parameter">fileName</db:code> to the icon, as a specialization for <db:code role="parameter">size</db:code>, <db:code role="parameter">mode</db:code> and <db:code role="parameter">state</db:code>. The file will be loaded on demand. Note: custom icon engines are free to ignore additionally added pixmaps.</db:para>
<db:para>If <db:code role="parameter">fileName</db:code> contains a relative path (e.g. the filename only) the relevant file must be found relative to the runtime working directory.</db:para>
<db:para>The file name can be either refer to an actual file on disk or to one of the application's embedded resources. See the <db:link xlink:href="resources.xml">Resource System</db:link> overview for details on how to embed images and other resource files in the application's executable.</db:para>
<db:para>Use the <db:link xlink:href="qimagereader.xml#supportedImageFormats">QImageReader::supportedImageFormats</db:link>() and <db:link xlink:href="qimagewriter.xml#supportedImageFormats">QImageWriter::supportedImageFormats</db:link>() functions to retrieve a complete list of the supported file formats.</db:para>
<db:para>Note: When you add a non-empty filename to a <db:link xlink:href="qicon.xml">QIcon</db:link>, the icon becomes non-null, even if the file doesn't exist or points to a corrupt file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#addPixmap">addPixmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addPixmap">
<db:title>void QIcon::addPixmap(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, QIcon::Mode <db:emphasis>mode</db:emphasis> = Normal, QIcon::State <db:emphasis>state</db:emphasis> = Off)</db:title>
<db:para>Adds <db:code role="parameter">pixmap</db:code> to the icon, as a specialization for <db:code role="parameter">mode</db:code> and <db:code role="parameter">state</db:code>.</db:para>
<db:para>Custom icon engines are free to ignore additionally added pixmaps.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#addFile">addFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableSizes">
<db:title>[since 4.5] QList&lt;QSize&gt; QIcon::availableSizes(QIcon::Mode <db:emphasis>mode</db:emphasis> = Normal, QIcon::State <db:emphasis>state</db:emphasis> = Off) const</db:title>
<db:para>Returns a list of available icon sizes for the specified <db:code role="parameter">mode</db:code> and <db:code role="parameter">state</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="cacheKey">
<db:title>[since 4.3] qint64 QIcon::cacheKey() const</db:title>
<db:para>Returns a number that identifies the contents of this <db:link xlink:href="qicon.xml">QIcon</db:link> object. Distinct <db:link xlink:href="qicon.xml">QIcon</db:link> objects can have the same key if they refer to the same contents.</db:para>
<db:para>The cacheKey() will change when the icon is altered via <db:link xlink:href="qicon.xml#addPixmap">addPixmap</db:link>() or <db:link xlink:href="qicon.xml#addFile">addFile</db:link>().</db:para>
<db:para>Cache keys are mostly useful in conjunction with caching.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixmap.xml#cacheKey">QPixmap::cacheKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromTheme">
<db:title>[static, since 4.6] QIcon QIcon::fromTheme(const QString &amp;<db:emphasis>name</db:emphasis>, const QIcon &amp;<db:emphasis>fallback</db:emphasis> = QIcon())</db:title>
<db:para>Returns the <db:link xlink:href="qicon.xml">QIcon</db:link> corresponding to <db:code role="parameter">name</db:code> in the current icon theme. If no such icon is found in the current theme <db:code role="parameter">fallback</db:code> is returned instead.</db:para>
<db:para>The latest version of the freedesktop icon specification and naming specification can be obtained here:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://standards.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html">http://standards.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://standards.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html">http://standards.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To fetch an icon from the current icon theme:</db:para>
<db:programlisting language="cpp">    QIcon undoicon = QIcon::fromTheme(&quot;edit-undo&quot;);
</db:programlisting>
<db:para>Or if you want to provide a guaranteed fallback for platforms that do not support theme icons, you can use the second argument:</db:para>
<db:programlisting language="cpp">    QIcon undoicon = QIcon::fromTheme(&quot;edit-undo&quot;, QIcon(&quot;:/undo.png&quot;));
</db:programlisting>
<db:note>
<db:para>By default, only X11 will support themed icons. In order to use themed icons on Mac and Windows, you will have to bundle a compliant theme in one of your <db:link xlink:href="qicon.xml#themeSearchPaths">themeSearchPaths</db:link>() and set the appropriate <db:link xlink:href="qicon.xml#themeName">themeName</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#themeName">themeName</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#setThemeName">setThemeName</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#themeSearchPaths">themeSearchPaths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasThemeIcon">
<db:title>[static, since 4.6] bool QIcon::hasThemeIcon(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if there is an icon available for <db:code role="parameter">name</db:code> in the current icon theme, otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#themeSearchPaths">themeSearchPaths</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#fromTheme">fromTheme</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#setThemeName">setThemeName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QIcon::isNull() const</db:title>
<db:para>Returns <db:code>true</db:code> if the icon is empty; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>An icon is empty if it has neither a pixmap nor a filename.</db:para>
<db:para>Note: Even a non-null icon might not be able to create valid pixmaps, eg. if the file does not exist or cannot be read.</db:para>
</db:section>
<db:section xml:id="name">
<db:title>[since 4.7] QString QIcon::name() const</db:title>
<db:para>Returns the name used to create the icon, if available.</db:para>
<db:para>Depending on the way the icon was created, it may have an associated name. This is the case for icons created with <db:link xlink:href="qicon.xml#fromTheme">fromTheme</db:link>() or icons using a <db:link xlink:href="qiconengine.xml">QIconEngine</db:link> which supports the QIconEngineV2::IconNameHook.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#fromTheme">fromTheme</db:link>()</db:member>
<db:member><db:link xlink:href="qiconengine.xml">QIconEngine</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paint">
<db:title>void QIcon::paint(QPainter *<db:emphasis>painter</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis> = Qt::AlignCenter, QIcon::Mode <db:emphasis>mode</db:emphasis> = Normal, QIcon::State <db:emphasis>state</db:emphasis> = Off) const</db:title>
<db:para>Uses the <db:code role="parameter">painter</db:code> to paint the icon with specified <db:code role="parameter">alignment</db:code>, required <db:code role="parameter">mode</db:code>, and <db:code role="parameter">state</db:code> into the rectangle <db:code role="parameter">rect</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#actualSize">actualSize</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#pixmap">pixmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paint-1">
<db:title>void QIcon::paint(QPainter *<db:emphasis>painter</db:emphasis>, int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis> = Qt::AlignCenter, QIcon::Mode <db:emphasis>mode</db:emphasis> = Normal, QIcon::State <db:emphasis>state</db:emphasis> = Off) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Paints the icon into the rectangle <db:link xlink:href="qrect.xml">QRect</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>).</db:para>
</db:section>
<db:section xml:id="pixmap">
<db:title>QPixmap QIcon::pixmap(const QSize &amp;<db:emphasis>size</db:emphasis>, QIcon::Mode <db:emphasis>mode</db:emphasis> = Normal, QIcon::State <db:emphasis>state</db:emphasis> = Off) const</db:title>
<db:para>Returns a pixmap with the requested <db:code role="parameter">size</db:code>, <db:code role="parameter">mode</db:code>, and <db:code role="parameter">state</db:code>, generating one if necessary. The pixmap might be smaller than requested, but never larger.</db:para>
<db:para>Setting the <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_UseHighDpiPixmaps</db:link> application attribute enables this function to return pixmaps that are larger than the requested size. Such images will have a devicePixelRatio larger than 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#actualSize">actualSize</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#paint">paint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixmap-1">
<db:title>[since 5.1] QPixmap QIcon::pixmap(QWindow *<db:emphasis>window</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>, QIcon::Mode <db:emphasis>mode</db:emphasis> = Normal, QIcon::State <db:emphasis>state</db:emphasis> = Off) const</db:title>
<db:para>Returns a pixmap with the requested <db:code role="parameter">window</db:code> <db:code role="parameter">size</db:code>, <db:code role="parameter">mode</db:code>, and <db:code role="parameter">state</db:code>, generating one if necessary.</db:para>
<db:para>The pixmap can be smaller than the requested size. If <db:code role="parameter">window</db:code> is on a high-dpi display the pixmap can be larger. In that case it will have a devicePixelRatio larger than 1.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#actualSize">actualSize</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#paint">paint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixmap-2">
<db:title>QPixmap QIcon::pixmap(int <db:emphasis>extent</db:emphasis>, QIcon::Mode <db:emphasis>mode</db:emphasis> = Normal, QIcon::State <db:emphasis>state</db:emphasis> = Off) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a pixmap of size <db:link xlink:href="qsize.xml">QSize</db:link>(<db:code role="parameter">extent</db:code>, <db:code role="parameter">extent</db:code>). The pixmap might be smaller than requested, but never larger.</db:para>
<db:para>Setting the <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_UseHighDpiPixmaps</db:link> application attribute enables this function to return pixmaps that are larger than the requested size. Such images will have a devicePixelRatio larger than 1.</db:para>
</db:section>
<db:section xml:id="pixmap-3">
<db:title>QPixmap QIcon::pixmap(int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>, QIcon::Mode <db:emphasis>mode</db:emphasis> = Normal, QIcon::State <db:emphasis>state</db:emphasis> = Off) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a pixmap of size <db:link xlink:href="qsize.xml">QSize</db:link>(<db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>). The pixmap might be smaller than requested, but never larger.</db:para>
<db:para>Setting the <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_UseHighDpiPixmaps</db:link> application attribute enables this function to return pixmaps that are larger than the requested size. Such images will have a devicePixelRatio larger than 1.</db:para>
</db:section>
<db:section xml:id="setThemeName">
<db:title>[static, since 4.6] void QIcon::setThemeName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Sets the current icon theme to <db:code role="parameter">name</db:code>.</db:para>
<db:para>The <db:code role="parameter">name</db:code> should correspond to a directory name in the themeSearchPath() containing an index.theme file describing it's contents.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#themeSearchPaths">themeSearchPaths</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#themeName">themeName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setThemeSearchPaths">
<db:title>[static, since 4.6] void QIcon::setThemeSearchPaths(const QStringList &amp;<db:emphasis>paths</db:emphasis>)</db:title>
<db:para>Sets the search paths for icon themes to <db:code role="parameter">paths</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#themeSearchPaths">themeSearchPaths</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#fromTheme">fromTheme</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#setThemeName">setThemeName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 4.8] void QIcon::swap(QIcon &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps icon <db:code role="parameter">other</db:code> with this icon. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="themeName">
<db:title>[static, since 4.6] QString QIcon::themeName()</db:title>
<db:para>Returns the name of the current icon theme.</db:para>
<db:para>On X11, the current icon theme depends on your desktop settings. On other platforms it is not set by default.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#setThemeName">setThemeName</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#themeSearchPaths">themeSearchPaths</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#fromTheme">fromTheme</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#hasThemeIcon">hasThemeIcon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="themeSearchPaths">
<db:title>[static, since 4.6] QStringList QIcon::themeSearchPaths()</db:title>
<db:para>Returns the search paths for icon themes.</db:para>
<db:para>The default value will depend on the platform:</db:para>
<db:para>On X11, the search path will use the XDG_DATA_DIRS environment variable if available.</db:para>
<db:para>By default all platforms will have the resource directory <db:code>:\icons</db:code> as a fallback. You can use &quot;rcc -project&quot; to generate a resource file from your icon theme.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qicon.xml#setThemeSearchPaths">setThemeSearchPaths</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#fromTheme">fromTheme</db:link>()</db:member>
<db:member><db:link xlink:href="qicon.xml#setThemeName">setThemeName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QIcon::operator QVariant() const</db:title>
<db:para>Returns the icon as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[since 5.2] QIcon &amp;QIcon::operator=(QIcon &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qicon.xml">QIcon</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QIcon &amp;QIcon::operator=(const QIcon &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the <db:code role="parameter">other</db:code> icon to this icon and returns a reference to this icon.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-1">
<db:title>[since 4.2] QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:para>Writes the given <db:code role="parameter">icon</db:code> to the given <db:code role="parameter">stream</db:code> as a PNG image. If the icon contains more than one image, all images will be written to the stream. Note that writing the stream to a file will not produce a valid image file.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>[since 4.2] QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:para>Reads an image, or a set of images, from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">icon</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
</db:section>
</db:article>
