<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Introduction</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to render a scene in Qt Quick 3D.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/intro.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example gives an introductory overview of the basic Quick 3D features by going through the code of a simple example.</db:para>
<db:section xml:id="setting-up-the-scene">
<db:title>Setting Up the Scene</db:title>
<db:para>We set up the entire scene in the <db:emphasis>main.qml</db:emphasis> file.</db:para>
<db:para>To be able to use the types in the <db:link xlink:href="qtquick3d-qmlmodule.xml">QtQuick3D</db:link> module, we must import it:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick3D
</db:programlisting>
<db:para>To draw any 3D scene, we need a 3D viewport within the Qt Quick scene. This is provided by the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> class, and this is where we define our scene. It is also possible to have multiple views in one application, see <db:link xlink:href="qtquick3d-view3d-example.xml">Qt Quick 3D - View3D Example</db:link>.</db:para>
<db:para>We start with defining the environment of our scene. In this example we just clear the background color with <db:code>skyblue</db:code>, which we specify in a <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link> for the <db:code>environment</db:code> property of the view. <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link> describes various properties related to the environment of the scene, such as tonemapping settings, light probe settings for image based lighting, background mode, or ambient occlusion parameters. It can also control anti-aliasing, see <db:link xlink:href="qtquick3d-antialiasing-example.xml">Qt Quick 3D - Antialiasing Example</db:link>. In our example we set the <db:code>clearColor</db:code> and <db:code>backgroundMode</db:code> properties to get a blue background.</db:para>
<db:programlisting language="qml">environment: SceneEnvironment {
    clearColor: &quot;skyblue&quot;
    backgroundMode: SceneEnvironment.Color
}
</db:programlisting>
</db:section>
<db:section xml:id="meshes">
<db:title>Meshes</db:title>
<db:para>To make the scene a bit more interesting we are now going to add some meshes. In Quick 3D there are a number of builtin meshes for convenience, for example sphere, cube, cone, or cylinder. These are referenced by using the special identifiers, such as <db:code>#Sphere</db:code>, <db:code>#Cube</db:code>, or<db:code>#Rectangle</db:code> in the source property of a Model node. Besides the built-in primitives, a <db:code>.mesh</db:code> file can be specified. To generate <db:code>.mesh</db:code> files from FBX or glTF2 assets, the assets need to be processed using the <db:link xlink:href="qtquick3d-tool-balsam.xml">Balsam Asset Import Tool</db:link>. Below shows the code adding a blue sphere and a red flattened cylinder:</db:para>
<db:programlisting language="qml">Model {
    position: Qt.vector3d(0, -200, 0)
    source: &quot;#Cylinder&quot;
    scale: Qt.vector3d(2, 0.2, 1)
    materials: [ DefaultMaterial {
            diffuseColor: &quot;red&quot;
        }
    ]
}

Model {
    position: Qt.vector3d(0, 150, 0)
    source: &quot;#Sphere&quot;

    materials: [ DefaultMaterial {
            diffuseColor: &quot;blue&quot;
        }
    ]

    SequentialAnimation on y {
        loops: Animation.Infinite
        NumberAnimation {
            duration: 3000
            to: -150
            from: 150
            easing.type:Easing.InQuad
        }
        NumberAnimation {
            duration: 3000
            to: 150
            from: -150
            easing.type:Easing.OutQuad
        }
    }
}
</db:programlisting>
<db:para>To add the meshes, we use two Model nodes, with <db:code>#Sphere</db:code> and <db:code>#Cylinder</db:code> as the <db:link xlink:href="qml-qtquick3d-model.xml#source-prop">source</db:link> to load our built-in meshes. To give the model a color we need to first specify a material. In this case we use a <db:link xlink:href="qml-qtquick3d-defaultmaterial.xml">DefaultMaterial</db:link> with a red and blue diffuse color. There are three different materials available with different properties, namely <db:link xlink:href="qml-qtquick3d-defaultmaterial.xml">DefaultMaterial</db:link>, <db:link xlink:href="qml-qtquick3d-principledmaterial.xml">PrincipledMaterial</db:link> and <db:link xlink:href="qml-qtquick3d-custommaterial.xml">CustomMaterial</db:link>, see <db:link xlink:href="qtquick3d-principledmaterial-example.xml">Qt Quick 3D - Principled Material Example</db:link> and <db:link xlink:href="qtquick3d-custom.xml">Programmable Materials, Effects, Geometry, and Texture data</db:link>. The mesh loaded by a <db:link xlink:href="qml-qtquick3d-model.xml">Model</db:link> can have multiple sub-meshes, and each sub-mesh needs to have a material specified. In the example only the built-in meshes are used, and those only have one sub-mesh each, and therefore it is sufficient to specify a single <db:link xlink:href="qml-qtquick3d-defaultmaterial.xml">DefaultMaterial</db:link> in the <db:link xlink:href="qml-qtquick3d-model.xml#materials-prop">materials</db:link> list.</db:para>
<db:para>A <db:link xlink:href="qml-qtquick3d-model.xml">Model</db:link> is a <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link>, so it has an associated transformation. To apply a translation, we use the <db:code>position</db:code> property. It is also possible to rotate the model by setting the <db:code>eulerRotation</db:code> property. To make the cylinder look like a plate we set the <db:code>scale</db:code> property accordingly.</db:para>
</db:section>
<db:section xml:id="camera">
<db:title>Camera</db:title>
<db:para>Then we define a camera, which specifies how the content of the 3D scene is projected onto a 2D surface. In this example, we use <db:link xlink:href="qml-qtquick3d-perspectivecamera.xml">PerspectiveCamera</db:link> which gives us a perspective projection. Orthographic projection is also possible through the <db:link xlink:href="qml-qtquick3d-orthographiccamera.xml">OrthographicCamera</db:link> type. The default orientation of the camera has its forward vector pointing along the negative Z axis and its up vector along the positive Y axis. The example moves the camera back to 300 on the Z axis. In addition, it is moved up an the Y axis a bit, and is rotated slightly around the X axis to look slightly downwards.</db:para>
<db:programlisting language="qml">PerspectiveCamera {
    position: Qt.vector3d(0, 200, 300)
    eulerRotation.x: -30
}
</db:programlisting>
</db:section>
<db:section xml:id="lights">
<db:title>Lights</db:title>
<db:para>The scene also needs a light source in order to be able to see the models in our scene. A <db:link xlink:href="qml-qtquick3d-directionallight.xml">DirectionalLight</db:link>, which can be thought of as a distant sun shining from a certain direction, is added to the scene. There are two other light sources available, namely <db:link xlink:href="qml-qtquick3d-spotlight.xml">SpotLight</db:link> and <db:link xlink:href="qml-qtquick3d-pointlight.xml">PointLight</db:link>, see <db:link xlink:href="qtquick3d-lights-example.xml">Qt Quick 3D - Lights Example</db:link>.</db:para>
<db:programlisting language="qml">DirectionalLight {
    eulerRotation.x: -30
    eulerRotation.y: -70
}
</db:programlisting>
</db:section>
<db:section xml:id="animation">
<db:title>Animation</db:title>
<db:para>Finally, we are also going to animate the sphere. We do this by applying a <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> on the <db:code>y</db:code> component, moving the sphere up and down infinitely.</db:para>
<db:programlisting language="qml">SequentialAnimation on y {
    loops: Animation.Infinite
    NumberAnimation {
        duration: 3000
        to: -150
        from: 150
        easing.type:Easing.InQuad
    }
    NumberAnimation {
        duration: 3000
        to: 150
        from: -150
        easing.type:Easing.OutQuad
    }
}
</db:programlisting>
<db:para>With all these parts working together we are able to render our 3D scene. This example touches only some of the basic capabilities of Qt Quick 3D. Visit the <db:link xlink:href="quick3d-examples.xml">examples</db:link> page for further examples.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="intro/CMakeLists.txt">intro/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="intro/intro.pro">intro/intro.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="intro/main.cpp">intro/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="intro/main.qml">intro/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="intro/qml.qrc">intro/qml.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
