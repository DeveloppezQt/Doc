<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>File and Datastream Functions</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Core Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The <db:link xlink:href="qiodevice.xml">QIODevice</db:link> class is the base interface class of all I/O devices in <db:link xlink:href="qtcore-index.xml">Qt Core</db:link>. <db:link xlink:href="qiodevice.xml">QIODevice</db:link> provides both a common implementation and an abstract interface for devices that support reading and writing of blocks of data. The device can be a memory buffer, a file, or a datastream.</db:para>
<db:para>Some subclasses like <db:link xlink:href="qfile.xml">QFile</db:link> have been implemented using a memory buffer for intermediate storing of data. This speeds up programs by reducing read/write operations. Buffering makes functions like getChar() and putChar() fast, as they can operate on the memory buffer instead of directly on the device itself.</db:para>
<db:para>The <db:link xlink:href="qfile.xml">QFile</db:link> class provides functions for reading from and writing to files. A <db:link xlink:href="qfile.xml">QFile</db:link> may be used by itself or, more conveniently, with a <db:link xlink:href="qtextstream.xml">QTextStream</db:link> or <db:link xlink:href="qdatastream.xml">QDataStream</db:link>.</db:para>
<db:para><db:link xlink:href="qbuffer.xml">QBuffer</db:link> allows you to access a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> using the <db:link xlink:href="qiodevice.xml">QIODevice</db:link> interface. The <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is treated just as a standard random-accessed file. An example:</db:para>
<db:para><db:link xlink:href="qbuffer.xml">QBuffer</db:link> buffer; char ch;</db:para>
<db:para>buffer.open(QBuffer::ReadWrite); buffer.write(&quot;Qt rocks!&quot;); buffer.seek(0); buffer.getChar(&amp;ch); // ch == 'Q' buffer.getChar(&amp;ch); // ch == 't' buffer.getChar(&amp;ch); // ch == ' ' buffer.getChar(&amp;ch); // ch == 'r'</db:para>
<db:para>Call open() to open the buffer. Then call write() or putChar() to write to the buffer, and read(), readLine(), readAll(), or getChar() to read from it. size() returns the current size of the buffer, and you can seek to arbitrary positions in the buffer by calling seek(). When you are done with accessing the buffer, call close().</db:para>
<db:para>The <db:link xlink:href="qdatastream.xml">QDataStream</db:link> class provides serialization of binary data to a <db:link xlink:href="qiodevice.xml">QIODevice</db:link>. A data stream is a binary stream of encoded information which is 100% inde- pendent of the host computer's operating system, CPU or byte order. For example, a data stream that is written by a PC under Windows can be read by a Sun SPARC running Solaris. You can also use a data stream to read/write raw unencoded binary data.</db:para>
<db:para>For more details on the datatypes that <db:link xlink:href="qdatastream.xml">QDataStream</db:link> can serialize, see {Serializing Qt Data Types}.</db:para>
<db:para>The <db:link xlink:href="qtextstream.xml">QTextStream</db:link> class provides a convenient interface for reading and writing text. <db:link xlink:href="qtextstream.xml">QTextStream</db:link> can operate on a <db:link xlink:href="qiodevice.xml">QIODevice</db:link>, a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> or a <db:link xlink:href="qstring.xml">QString</db:link>. Using <db:link xlink:href="qtextstream.xml">QTextStream</db:link>'s streaming operators, you can conveniently read and write words, lines and numbers. It's also common to use <db:link xlink:href="qtextstream.xml">QTextStream</db:link> to read console input and write console output.</db:para>
<db:para>There are three general ways to use <db:link xlink:href="qtextstream.xml">QTextStream</db:link> when reading text files:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Chunk by chunk, by calling readLine() or readAll().</db:para>
</db:listitem>
<db:listitem>
<db:para>Word by word. <db:link xlink:href="qtextstream.xml">QTextStream</db:link> supports streaming into QStrings, QByteArrays and char* buffers. Words are delimited by space, and leading white space is automatically skipped.</db:para>
</db:listitem>
<db:listitem>
<db:para>Character by character, by streaming into <db:link xlink:href="qchar.xml">QChar</db:link> or char types. This method is often used for convenient input handling when parsing files, independent of character encoding and end-of-line semantics. To skip white space, call skipWhiteSpace().</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qbytearray.xml">QByteArray</db:link> can be used to store both raw bytes (including \0) and traditional 8-bit '\0'-terminated strings. Using <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is much more convenient than using const char *. It always ensures that the data is followed by a '\0' terminator, and uses <db:link xlink:href="implicit-sharing.xml">implicitly shared classes</db:link> (copy-on-write) to reduce memory usage and avoid needless copying of data.</db:para>
<db:para>In addition to <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, Qt also provides the <db:link xlink:href="qstring.xml">QString</db:link> class to store string data. For most purposes, <db:link xlink:href="qstring.xml">QString</db:link> is the most appropriate class to use. It stores 16-bit Unicode characters. It is, however, a good idea to use <db:link xlink:href="qbytearray.xml">QByteArray</db:link> when you need to store raw binary data, and when memory conservation is critical (for example, with Qt for Embedded Linux).</db:para>
</db:article>
