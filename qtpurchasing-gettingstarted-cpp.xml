<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Getting Started with Qt Purchasing in C++</db:title>
<db:productname>QtPurchasing</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Purchasing Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Guide to getting started with Qt Purchasing using C++.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This guide assumes that you have registered the in-app products for your application in the external store. For more information about registering products, see <db:link xlink:href="qtpurchasing-googleplay.xml">Registering Products in Google Play</db:link>, <db:link xlink:href="qtpurchasing-appstore.xml">Registering Products in App Store</db:link>, and <db:link xlink:href="qtpurchasing-windowsstore.xml">Registering Products in Windows Store</db:link>.</db:para>
<db:section xml:id="preparing-the-application">
<db:title>Preparing the Application</db:title>
<db:para>Use the following include statement to access the C++ classes:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QtPurchasing&amp;gt;
</db:programlisting>
<db:para>Before building your application, add the following statement to your <db:code>.pro</db:code> file to link against the Qt Purchasing library:</db:para>
<db:programlisting language="cpp">QT += purchasing
</db:programlisting>
</db:section>
<db:section xml:id="registering-products">
<db:title>Registering Products</db:title>
<db:para>In order to allow in-app purchases in your application, register the products in your application. Start by creating an application-global instance of <db:link xlink:href="qinappstore.xml">QInAppStore</db:link>, and use the registerProduct() function to register each product.</db:para>
<db:para>The following example is a hypothetical role-playing game, which provides two in-app products to the user.</db:para>
<db:programlisting language="cpp">MyApplication::MyApplication(QObject *parent)
    : QObject(parent)
{
    m_myStore = new QInAppStore(this);
    setupConnections();

    m_myStore-&amp;gt;registerProduct(QInAppProduct::Consumable,
                               QStringLiteral(&quot;healthPotion&quot;));
    m_myStore-&amp;gt;registerProduct(QInAppProduct::Unlockable,
                               QStringLiteral(&quot;dlcForestOfFooBar&quot;));
}
</db:programlisting>
<db:para>As you can see, there are <db:link xlink:href="qinappproduct.xml#ProductType-enum">consumable products</db:link> and <db:link xlink:href="qinappproduct.xml#ProductType-enum">unlockable products</db:link>. The former can be purchased any number of times by the same user, whereas the latter can only be purchased once.</db:para>
<db:para>In our example, the <db:code>&quot;healthPotion&quot;</db:code> is a consumable product, because the user should be able to buy any number of health potions and add them to their in-game inventory.</db:para>
<db:para>The <db:code>&quot;dlcForestOfFooBar&quot;</db:code> is downloadable content, which unlocks a new part of the game, and once it is bought, the purchase should be persistent across the user's devices and across reinstallations.</db:para>
</db:section>
<db:section xml:id="making-connections">
<db:title>Making Connections</db:title>
<db:para>Registering a product is an asynchronous operation, as are all operations supported by Qt Purchasing. Before you start registering a product, you must listen to the <db:link xlink:href="qinappstore.xml#productRegistered">QInAppStore::productRegistered</db:link>() and <db:link xlink:href="qinappstore.xml#productUnknown">QInAppStore::productUnknown</db:link>() signals in <db:link xlink:href="qinappstore.xml">QInAppStore</db:link> to know the status of your registration.</db:para>
<db:para>If the application intends to allow users to purchase products, it also needs to listen for the <db:link xlink:href="qinappstore.xml#transactionReady">QInAppStore::transactionReady</db:link>() signal to be notified when a transaction is pending.</db:para>
<db:programlisting language="cpp">void MyApplication::setupConnections()
{
    connect(m_myStore, SIGNAL(productRegistered(QInAppProduct*)),
            this, SLOT(markProductAvailable(QInAppProduct*)));
    connect(m_myStore, SIGNAL(productUnknown(QInAppProduct*)),
            this, SLOT(handleErrorGracefully(QInAppProduct*)));

    connect(m_myStore, SIGNAL(transactionReady(QInAppTransaction*)),
            this, SLOT(handleTransaction(QInAppTransaction*)));
}
</db:programlisting>
</db:section>
<db:section xml:id="purchasing-a-product">
<db:title>Purchasing A Product</db:title>
<db:para>When the user wants to purchase a product, call <db:link xlink:href="qinappproduct.xml#purchase">QInAppProduct::purchase</db:link>() on the product. This launches a platform-specific, asynchronous process to purchase the product, for example by requesting the user's password and confirmation of the purchase. In most cases, you must make sure that the application UI is not accepting input while the purchase request is being processed, as this is not handled automatically on all platforms.</db:para>
<db:programlisting language="cpp">void MyApplication::purchaseHealthPotion()
{
    QInAppProduct *product = m_myStore-&amp;gt;registeredProduct(QStringLiteral(&quot;healthPotion&quot;));

    // Should not get here if product is not registered
    Q_ASSERT(product != 0);

    product-&amp;gt;purchase();
}
</db:programlisting>
<db:para>When this function is called, the purchase process is initiated. At some point during the process, the <db:link xlink:href="qinappstore.xml#transactionReady">QInAppStore::transactionReady</db:link>() signal is emitted, and the slot registered earlier is called. In this function, you can save data about a successful purchase so that it survives across application runs. After verifying that the data has been stored, finalize the transaction. If the transaction fails, display information about the failure to the user and finalize the transaction.</db:para>
<db:programlisting language="cpp">void MyApplication::handleTransaction(QInAppTransaction *transaction)
{
    if (transaction-&amp;gt;status() == QInAppTransaction::PurchaseApproved
        &amp;amp;&amp;amp; transaction-&amp;gt;product()-&amp;gt;identifier() == QStringLiteral(&quot;healthPotion&quot;)) {
        if (!hasAlreadyStoredTransaction(transaction-&amp;gt;orderId())) {
            ++m_healthPotions;
            if (!addHealthPotionToPersistentStorage(transaction-&amp;gt;orderId()))
                popupErrorDialog(tr(&quot;Unable to write to persistent storage. Please make sure there is sufficient space and restart.&quot;));
            else
                transaction-&amp;gt;finalize();
        }
    } else if (transaction-&amp;gt;status() == QInAppTransaction::PurchaseFailed) {
        popupErrorDialog(tr(&quot;Purchase not completed.&quot;));
        transaction-&amp;gt;finalize();
    }
}
</db:programlisting>
<db:para>If a transaction is not finalized, the <db:link xlink:href="qinappstore.xml#transactionReady">transactionReady() signal</db:link> is emitted again for the same transaction the next time the product is registered, providing another chance to store the data. The transaction for a consumable product must be finalized before the product can be purchased again.</db:para>
</db:section>
<db:section xml:id="restoring-previously-purchased-products">
<db:title>Restoring Previously Purchased Products</db:title>
<db:para>If the application is uninstalled and subsequently reinstalled (or installed by the same user on a different device), you must provide a way to restore the previously purchased unlockable products.</db:para>
<db:para>To start the process of restoring purchases, call the <db:link xlink:href="qinappstore.xml#restorePurchases">QInAppStore::restorePurchases</db:link>() function. This emits the <db:link xlink:href="qinappstore.xml#transactionReady">QInAppStore::transactionReady</db:link>() signal for each of the application's unlockable products that were purchased previously by the current user. The status of these transactions will be <db:link xlink:href="qinapptransaction.xml#TransactionStatus-enum">QInAppTransaction::PurchaseRestored</db:link>.</db:para>
<db:para>Continuing on the example from earlier, lets imagine that the game has downloadable content that you can buy to extend the game further. This must be an unlockable product, because the user need not purchase it more than once.</db:para>
<db:programlisting language="cpp">void MyApplication::handleTransaction(QInAppTransaction *transaction)
{
    if ((transaction-&amp;gt;status() == QInAppTransaction::PurchaseApproved
         || transaction-&amp;gt;status() == QInAppTransaction::PurchaseRestored)
        &amp;amp;&amp;amp; transaction-&amp;gt;product()-&amp;gt;identifier() == QStringLiteral(&quot;dlcForestOfFooBar&quot;))
    {

        if (!hasMap(QStringLiteral(&quot;forestOfFooBar.map&quot;)) {
            if (!downloadExtraMap(QStringLiteral(&quot;forestOfFooBar.map&quot;)))
                popupErrorDialog(tr(&quot;Unable to download The Forest of FooBar map. Please make sure there is sufficient space and restart.&quot;))
            else
                transaction-&amp;gt;finalize()
        }

    } else if (transaction-&amp;gt;status() == QInAppTransaction::PurchaseApproved
        &amp;amp;&amp;amp; transaction-&amp;gt;product()-&amp;gt;identifier() == QStringLiteral(&quot;healthPotion&quot;)) {

        // ... handle healthPotion purchase

    } else {
        popupErrorDialog(tr(&quot;Purchase not completed.&quot;));
        transaction-&amp;gt;finalize();
    }
}
</db:programlisting>
<db:para>If a user buys the downloadable content and later either installs the game on another device or uninstalls and reinstalls the game, you can provide a way to restore the purchase by calling <db:link xlink:href="qinappstore.xml#restorePurchases">QInAppStore::restorePurchases</db:link>(). Purchases must be restored in response to a user input, as it may present a password dialog on some platforms.</db:para>
<db:note>
<db:para>While the function behaves as documented on Android, this functionality is technically not needed there. Android manages all unlockable purchases with no intervention from the application. If an application is uninstalled and reinstalled (or installed on a different Android device), <db:link xlink:href="qinappstore.xml#transactionReady">QInAppStore::transactionReady</db:link>() is emitted at application start-up for each previously purchased unlockable product, with the <db:link xlink:href="qinapptransaction.xml#TransactionStatus-enum">QInAppTransaction::PurchaseApproved</db:link> status.</db:para>
</db:note>
</db:section>
</db:article>
