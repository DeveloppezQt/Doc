<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>SQL Browser</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The SQL Browser example shows how a data browser can be used to visualize the results of SQL statements on a live database.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;qsqlconnectiondialog.h&quot;
#include &quot;ui_qsqlconnectiondialog.h&quot;

#include &lt;QSqlDatabase&gt;

QSqlConnectionDialog::QSqlConnectionDialog(QWidget *parent)
    : QDialog(parent)
{
    ui.setupUi(this);

    QStringList drivers = QSqlDatabase::drivers();

    // remove compat names
    drivers.removeAll(&quot;QMYSQL3&quot;);
    drivers.removeAll(&quot;QOCI8&quot;);
    drivers.removeAll(&quot;QODBC3&quot;);
    drivers.removeAll(&quot;QPSQL7&quot;);
    drivers.removeAll(&quot;QTDS7&quot;);

    if (!drivers.contains(&quot;QSQLITE&quot;))
        ui.dbCheckBox-&gt;setEnabled(false);

    ui.comboDriver-&gt;addItems(drivers);
}

QSqlConnectionDialog::~QSqlConnectionDialog()
{
}

QString QSqlConnectionDialog::driverName() const
{
    return ui.comboDriver-&gt;currentText();
}

QString QSqlConnectionDialog::databaseName() const
{
    return ui.editDatabase-&gt;text();
}

QString QSqlConnectionDialog::userName() const
{
    return ui.editUsername-&gt;text();
}

QString QSqlConnectionDialog::password() const
{
    return ui.editPassword-&gt;text();
}

QString QSqlConnectionDialog::hostName() const
{
    return ui.editHostname-&gt;text();
}

int QSqlConnectionDialog::port() const
{
    return ui.portSpinBox-&gt;value();
}

bool QSqlConnectionDialog::useInMemoryDatabase() const
{
    return ui.dbCheckBox-&gt;isChecked();
}

void QSqlConnectionDialog::on_okButton_clicked()
{
    if (ui.comboDriver-&gt;currentText().isEmpty()) {
        QMessageBox::information(this, tr(&quot;No database driver selected&quot;),
                                 tr(&quot;Please select a database driver&quot;));
        ui.comboDriver-&gt;setFocus();
    } else {
        accept();
    }
}

</db:programlisting>
</db:article>
