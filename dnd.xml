<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Drag and Drop</db:title>
<db:productname>QtGui</db:productname>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of the drag and drop system provided by Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Drag and drop provides a simple visual mechanism which users can use to transfer information between and within applications. Drag and drop is similar in function to the clipboard's cut and paste mechanism.</db:para>
<db:para>This document describes the basic drag and drop mechanism and outlines the approach used to enable it in custom controls. Drag and drop operations are also supported by many of Qt's controls, such as the item views and graphics view framework, as well as editing controls for Qt Widgets and Qt Quick. More information about item views and graphics view is available in <db:link xlink:href="">Using drag and drop with item views</db:link> and <db:link xlink:href="">Graphics View Framework</db:link>.</db:para>
<db:section xml:id="drag-and-drop-classes">
<db:title>Drag and Drop Classes</db:title>
<db:para>These classes deal with drag and drop and the necessary mime type encoding and decoding.</db:para>
<db:variablelist role="draganddrop">
<db:varlistentry>
<db:term><db:link xlink:href="qdrag.xml" xlink:role="class">QDrag</db:link></db:term>
<db:listitem>
<db:para>The QDrag class provides support for MIME-based drag and drop data transfer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qdragenterevent.xml" xlink:role="class">QDragEnterEvent</db:link></db:term>
<db:listitem>
<db:para>The QDragEnterEvent class provides an event which is sent to a widget when a drag and drop action enters it.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qdragleaveevent.xml" xlink:role="class">QDragLeaveEvent</db:link></db:term>
<db:listitem>
<db:para>The QDragLeaveEvent class provides an event that is sent to a widget when a drag and drop action leaves it.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qdragmoveevent.xml" xlink:role="class">QDragMoveEvent</db:link></db:term>
<db:listitem>
<db:para>The QDragMoveEvent class provides an event which is sent while a drag and drop action is in progress.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qdropevent.xml" xlink:role="class">QDropEvent</db:link></db:term>
<db:listitem>
<db:para>The QDropEvent class provides an event which is sent when a drag and drop action is completed.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="configuration">
<db:title>Configuration</db:title>
<db:para>The <db:link xlink:href="qstylehints.xml">QStyleHints</db:link> object provides some properties that are related to drag and drop operations:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qstylehints.xml#startDragTime">QStyleHints::startDragTime</db:link>() describes the amount of time in milliseconds that the user must hold down a mouse button over an object before a drag will begin.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstylehints.xml#startDragDistance">QStyleHints::startDragDistance</db:link>() indicates how far the user has to move the mouse while holding down a mouse button before the movement will be interpreted as dragging.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstylehints.xml#startDragVelocity">QStyleHints::startDragVelocity</db:link>() indicates how fast (in pixels/second) the user has to move the mouse to start a drag. A value of <db:code>0</db:code> means that there is no such limit.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>These quantities provide sensible default values that are compliant with the underlying windowing system for you to use if you provide drag and drop support in your controls.</db:para>
</db:section>
<db:section xml:id="drag-and-drop-in-qt-quick">
<db:title>Drag and Drop in Qt Quick</db:title>
<db:para>The rest of the document focuses mainly on how to implement drag and drop in C++. For using drag and drop inside a Qt Quick scene, please read the documentation for the Qt Quick Drag, DragEvent and DropArea items. There is also an example available.</db:para>
</db:section>
<db:section xml:id="dragging">
<db:title>Dragging</db:title>
<db:para>To start a drag, create a <db:link xlink:href="qdrag.xml">QDrag</db:link> object, and call its exec() function. In most applications, it is a good idea to begin a drag and drop operation only after a mouse button has been pressed and the cursor has been moved a certain distance. However, the simplest way to enable dragging from a widget is to reimplement the widget's <db:link xlink:href="">mousePressEvent()</db:link> and start a drag and drop operation:</db:para>
<db:programlisting language="cpp">void MainWindow::mousePressEvent(QMouseEvent *event)
{
    if (event-&gt;button() == Qt::LeftButton
        &amp;&amp; iconLabel-&gt;geometry().contains(event-&gt;pos())) {

        QDrag *drag = new QDrag(this);
        QMimeData *mimeData = new QMimeData;

        mimeData-&gt;setText(commentEdit-&gt;toPlainText());
        drag-&gt;setMimeData(mimeData);
        drag-&gt;setPixmap(iconPixmap);

        Qt::DropAction dropAction = drag-&gt;exec();
        ...
    }
}
</db:programlisting>
<db:para>Although the user may take some time to complete the dragging operation, as far as the application is concerned the exec() function is a blocking function that returns with <db:link xlink:href="qt.xml#DropAction-enum">one of several values</db:link>. These indicate how the operation ended, and are described in more detail below.</db:para>
<db:para>Note that the exec() function does not block the main event loop.</db:para>
<db:para>For widgets that need to distinguish between mouse clicks and drags, it is useful to reimplement the widget's <db:link xlink:href="">mousePressEvent()</db:link> function to record to start position of the drag:</db:para>
<db:programlisting language="cpp">void DragWidget::mousePressEvent(QMouseEvent *event)
{
    if (event-&gt;button() == Qt::LeftButton)
        dragStartPosition = event-&gt;pos();
}
</db:programlisting>
<db:para>Later, in <db:link xlink:href="">mouseMoveEvent()</db:link>, we can determine whether a drag should begin, and construct a drag object to handle the operation:</db:para>
<db:programlisting language="cpp">void DragWidget::mouseMoveEvent(QMouseEvent *event)
{
    if (!(event-&gt;buttons() &amp; Qt::LeftButton))
        return;
    if ((event-&gt;pos() - dragStartPosition).manhattanLength()
         &lt; QApplication::startDragDistance())
        return;

    QDrag *drag = new QDrag(this);
    QMimeData *mimeData = new QMimeData;

    mimeData-&gt;setData(mimeType, data);
    drag-&gt;setMimeData(mimeData);

    Qt::DropAction dropAction = drag-&gt;exec(Qt::CopyAction | Qt::MoveAction);
    ...
}
</db:programlisting>
<db:para>This particular approach uses the <db:link xlink:href="qpoint.xml#manhattanLength">QPoint::manhattanLength</db:link>() function to get a rough estimate of the distance between where the mouse click occurred and the current cursor position. This function trades accuracy for speed, and is usually suitable for this purpose.</db:para>
</db:section>
<db:section xml:id="dropping">
<db:title>Dropping</db:title>
<db:para>To be able to receive media dropped on a widget, call <db:link xlink:href="">setAcceptDrops(true)</db:link> for the widget, and reimplement the <db:link xlink:href="">dragEnterEvent()</db:link> and <db:link xlink:href="">dropEvent()</db:link> event handler functions.</db:para>
<db:para>For example, the following code enables drop events in the constructor of a QWidget subclass, making it possible to usefully implement drop event handlers:</db:para>
<db:programlisting language="cpp">Window::Window(QWidget *parent)
    : QWidget(parent)
{
    ...
    setAcceptDrops(true);
}
</db:programlisting>
<db:para>The dragEnterEvent() function is typically used to inform Qt about the types of data that the widget accepts. You must reimplement this function if you want to receive either <db:link xlink:href="qdragmoveevent.xml">QDragMoveEvent</db:link> or <db:link xlink:href="qdropevent.xml">QDropEvent</db:link> in your reimplementations of <db:link xlink:href="">dragMoveEvent()</db:link> and <db:link xlink:href="">dropEvent()</db:link>.</db:para>
<db:para>The following code shows how <db:link xlink:href="">dragEnterEvent()</db:link> can be reimplemented to tell the drag and drop system that we can only handle plain text:</db:para>
<db:programlisting language="cpp">void Window::dragEnterEvent(QDragEnterEvent *event)
{
    if (event-&gt;mimeData()-&gt;hasFormat(&quot;text/plain&quot;))
        event-&gt;acceptProposedAction();
}
</db:programlisting>
<db:para>The <db:link xlink:href="">dropEvent()</db:link> is used to unpack dropped data and handle it in way that is suitable for your application.</db:para>
<db:para>In the following code, the text supplied in the event is passed to a QTextBrowser and a QComboBox is filled with the list of MIME types that are used to describe the data:</db:para>
<db:programlisting language="cpp">void Window::dropEvent(QDropEvent *event)
{
    textBrowser-&gt;setPlainText(event-&gt;mimeData()-&gt;text());
    mimeTypeCombo-&gt;clear();
    mimeTypeCombo-&gt;addItems(event-&gt;mimeData()-&gt;formats());

    event-&gt;acceptProposedAction();
}
</db:programlisting>
<db:para>In this case, we accept the proposed action without checking what it is. In a real world application, it may be necessary to return from the <db:link xlink:href="">dropEvent()</db:link> function without accepting the proposed action or handling the data if the action is not relevant. For example, we may choose to ignore <db:link xlink:href="qt.xml#DropAction-enum">Qt::LinkAction</db:link> actions if we do not support links to external sources in our application.</db:para>
<db:section xml:id="overriding-proposed-actions">
<db:title>Overriding Proposed Actions</db:title>
<db:para>We may also ignore the proposed action, and perform some other action on the data. To do this, we would call the event object's <db:link xlink:href="qdropevent.xml#setDropAction">setDropAction</db:link>() with the preferred action from <db:link xlink:href="qt.xml#DropAction-enum">Qt::DropAction</db:link> before calling <db:link xlink:href="qevent.xml#accept">accept</db:link>(). This ensures that the replacement drop action is used instead of the proposed action.</db:para>
<db:para>For more sophisticated applications, reimplementing <db:link xlink:href="">dragMoveEvent()</db:link> and <db:link xlink:href="">dragLeaveEvent()</db:link> will let you make certain parts of your widgets sensitive to drop events, and give you more control over drag and drop in your application.</db:para>
</db:section>
<db:section xml:id="subclassing-complex-widgets">
<db:title>Subclassing Complex Widgets</db:title>
<db:para>Certain standard Qt widgets provide their own support for drag and drop. When subclassing these widgets, it may be necessary to reimplement <db:link xlink:href="">dragMoveEvent()</db:link> in addition to <db:link xlink:href="">dragEnterEvent()</db:link> and <db:link xlink:href="">dropEvent()</db:link> to prevent the base class from providing default drag and drop handling, and to handle any special cases you are interested in.</db:para>
</db:section>
</db:section>
<db:section xml:id="drag-and-drop-actions">
<db:title>Drag and Drop Actions</db:title>
<db:para>In the simplest case, the target of a drag and drop action receives a copy of the data being dragged, and the source decides whether to delete the original. This is described by the <db:code>CopyAction</db:code> action. The target may also choose to handle other actions, specifically the <db:code>MoveAction</db:code> and <db:code>LinkAction</db:code> actions. If the source calls <db:link xlink:href="qdrag.xml#exec">QDrag::exec</db:link>(), and it returns <db:code>MoveAction</db:code>, the source is responsible for deleting any original data if it chooses to do so. The <db:link xlink:href="qmimedata.xml">QMimeData</db:link> and <db:link xlink:href="qdrag.xml">QDrag</db:link> objects created by the source widget <db:emphasis>should not be deleted</db:emphasis> - they will be destroyed by Qt. The target is responsible for taking ownership of the data sent in the drag and drop operation; this is usually done by keeping references to the data.</db:para>
<db:para>If the target understands the <db:code>LinkAction</db:code> action, it should store its own reference to the original information; the source does not need to perform any further processing on the data. The most common use of drag and drop actions is when performing a Move within the same widget; see the section on <db:link xlink:href="dnd.xml#drop-actions">Drop Actions</db:link> for more information about this feature.</db:para>
<db:para>The other major use of drag actions is when using a reference type such as text/uri-list, where the dragged data are actually references to files or objects.</db:para>
</db:section>
<db:section xml:id="adding-new-drag-and-drop-types">
<db:title>Adding New Drag and Drop Types</db:title>
<db:para>Drag and drop is not limited to text and images. Any type of information can be transferred in a drag and drop operation. To drag information between applications, the applications must be able to indicate to each other which data formats they can accept and which they can produce. This is achieved using <db:link xlink:href="http://www.rfc-editor.org/rfc/rfc1341.txt">MIME types</db:link>. The <db:link xlink:href="qdrag.xml">QDrag</db:link> object constructed by the source contains a list of MIME types that it uses to represent the data (ordered from most appropriate to least appropriate), and the drop target uses one of these to access the data. For common data types, the convenience functions handle the MIME types used transparently but, for custom data types, it is necessary to state them explicitly.</db:para>
<db:para>To implement drag and drop actions for a type of information that is not covered by the <db:link xlink:href="qdrag.xml">QDrag</db:link> convenience functions, the first and most important step is to look for existing formats that are appropriate: The Internet Assigned Numbers Authority (<db:link xlink:href="http://www.iana.org">IANA</db:link>) provides a <db:link xlink:href="http://www.iana.org/assignments/media-types/">hierarchical list of MIME media types</db:link> at the Information Sciences Institute (<db:link xlink:href="http://www.isi.edu">ISI</db:link>). Using standard MIME types maximizes the interoperability of your application with other software now and in the future.</db:para>
<db:para>To support an additional media type, simply set the data in the <db:link xlink:href="qmimedata.xml">QMimeData</db:link> object with the <db:link xlink:href="qmimedata.xml#setData">setData</db:link>() function, supplying the full MIME type and a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> containing the data in the appropriate format. The following code takes a pixmap from a label and stores it as a Portable Network Graphics (PNG) file in a <db:link xlink:href="qmimedata.xml">QMimeData</db:link> object:</db:para>
<db:programlisting language="cpp">    QByteArray output;
    QBuffer outputBuffer(&amp;output);
    outputBuffer.open(QIODevice::WriteOnly);
    imageLabel-&gt;pixmap()-&gt;toImage().save(&amp;outputBuffer, &quot;PNG&quot;);
    mimeData-&gt;setData(&quot;image/png&quot;, output);
</db:programlisting>
<db:para>Of course, for this case we could have simply used <db:link xlink:href="qmimedata.xml#setImageData">setImageData</db:link>() instead to supply image data in a variety of formats:</db:para>
<db:programlisting language="cpp">    mimeData-&gt;setImageData(QVariant(*imageLabel-&gt;pixmap()));
</db:programlisting>
<db:para>The <db:link xlink:href="qbytearray.xml">QByteArray</db:link> approach is still useful in this case because it provides greater control over the amount of data stored in the <db:link xlink:href="qmimedata.xml">QMimeData</db:link> object.</db:para>
<db:para>Note that custom datatypes used in item views must be declared as <db:link xlink:href="qmetaobject.xml">meta objects</db:link> and that stream operators for them must be implemented.</db:para>
</db:section>
<db:section xml:id="drop-actions">
<db:title>Drop Actions</db:title>
<db:para>In the clipboard model, the user can <db:emphasis>cut</db:emphasis> or <db:emphasis>copy</db:emphasis> the source information, then later paste it. Similarly in the drag and drop model, the user can drag a <db:emphasis>copy</db:emphasis> of the information or they can drag the information itself to a new place (<db:emphasis>moving</db:emphasis> it). The drag and drop model has an additional complication for the programmer: The program doesn't know whether the user wants to cut or copy the information until the operation is complete. This often makes no difference when dragging information between applications, but within an application it is important to check which drop action was used.</db:para>
<db:para>We can reimplement the mouseMoveEvent() for a widget, and start a drag and drop operation with a combination of possible drop actions. For example, we may want to ensure that dragging always moves objects in the widget:</db:para>
<db:programlisting language="cpp">void DragWidget::mouseMoveEvent(QMouseEvent *event)
{
    if (!(event-&gt;buttons() &amp; Qt::LeftButton))
        return;
    if ((event-&gt;pos() - dragStartPosition).manhattanLength()
         &lt; QApplication::startDragDistance())
        return;

    QDrag *drag = new QDrag(this);
    QMimeData *mimeData = new QMimeData;

    mimeData-&gt;setData(mimeType, data);
    drag-&gt;setMimeData(mimeData);

    Qt::DropAction dropAction = drag-&gt;exec(Qt::CopyAction | Qt::MoveAction);
    ...
}
</db:programlisting>
<db:para>The action returned by the exec() function may default to a <db:code>CopyAction</db:code> if the information is dropped into another application but, if it is dropped in another widget in the same application, we may obtain a different drop action.</db:para>
<db:para>The proposed drop actions can be filtered in a widget's dragMoveEvent() function. However, it is possible to accept all proposed actions in the dragEnterEvent() and let the user decide which they want to accept later:</db:para>
<db:programlisting language="cpp">void DragWidget::dragEnterEvent(QDragEnterEvent *event)
{
    event-&gt;acceptProposedAction();
}
</db:programlisting>
<db:para>When a drop occurs in the widget, the dropEvent() handler function is called, and we can deal with each possible action in turn. First, we deal with drag and drop operations within the same widget:</db:para>
<db:programlisting language="cpp">void DragWidget::dropEvent(QDropEvent *event)
{
    if (event-&gt;source() == this &amp;&amp; event-&gt;possibleActions() &amp; Qt::MoveAction)
        return;
</db:programlisting>
<db:para>In this case, we refuse to deal with move operations. Each type of drop action that we accept is checked and dealt with accordingly:</db:para>
<db:programlisting language="cpp">    if (event-&gt;proposedAction() == Qt::MoveAction) {
        event-&gt;acceptProposedAction();
        // Process the data from the event.
    } else if (event-&gt;proposedAction() == Qt::CopyAction) {
        event-&gt;acceptProposedAction();
        // Process the data from the event.
    } else {
        // Ignore the drop.
        return;
    }
    ...
}
</db:programlisting>
<db:para>Note that we checked for individual drop actions in the above code. As mentioned above in the section on <db:link xlink:href="dnd.xml#overriding-proposed-actions">Overriding Proposed Actions</db:link>, it is sometimes necessary to override the proposed drop action and choose a different one from the selection of possible drop actions. To do this, you need to check for the presence of each action in the value supplied by the event's <db:link xlink:href="qdropevent.xml#possibleActions">possibleActions</db:link>(), set the drop action with <db:link xlink:href="qdropevent.xml#setDropAction">setDropAction</db:link>(), and call <db:link xlink:href="qevent.xml#accept">accept</db:link>().</db:para>
</db:section>
<db:section xml:id="drop-rectangles">
<db:title>Drop Rectangles</db:title>
<db:para>The widget's dragMoveEvent() can be used to restrict drops to certain parts of the widget by only accepting the proposed drop actions when the cursor is within those areas. For example, the following code accepts any proposed drop actions when the cursor is over a child widget (<db:code>dropFrame</db:code>):</db:para>
<db:programlisting language="cpp">void Window::dragMoveEvent(QDragMoveEvent *event)
{
    if (event-&gt;mimeData()-&gt;hasFormat(&quot;text/plain&quot;)
        &amp;&amp; event-&gt;answerRect().intersects(dropFrame-&gt;geometry()))

        event-&gt;acceptProposedAction();
}
</db:programlisting>
<db:para>The dragMoveEvent() can also be used if you need to give visual feedback during a drag and drop operation, to scroll the window, or whatever is appropriate.</db:para>
</db:section>
<db:section xml:id="the-clipboard">
<db:title>The Clipboard</db:title>
<db:para>Applications can also communicate with each other by putting data on the clipboard. To access this, you need to obtain a <db:link xlink:href="qclipboard.xml">QClipboard</db:link> object from the QApplication object:</db:para>
<db:programlisting language="cpp">    clipboard = QApplication::clipboard();
</db:programlisting>
<db:para>The <db:link xlink:href="qmimedata.xml">QMimeData</db:link> class is used to represent data that is transferred to and from the clipboard. To put data on the clipboard, you can use the setText(), setImage(), and setPixmap() convenience functions for common data types. These functions are similar to those found in the <db:link xlink:href="qmimedata.xml">QMimeData</db:link> class, except that they also take an additional argument that controls where the data is stored: If <db:link xlink:href="qclipboard.xml#Mode-enum">Clipboard</db:link> is specified, the data is placed on the clipboard; if <db:link xlink:href="qclipboard.xml#Mode-enum">Selection</db:link> is specified, the data is placed in the mouse selection (on X11 only). By default, data is put on the clipboard.</db:para>
<db:para>For example, we can copy the contents of a QLineEdit to the clipboard with the following code:</db:para>
<db:programlisting language="cpp">    clipboard-&gt;setText(lineEdit-&gt;text(), QClipboard::Clipboard);
</db:programlisting>
<db:para>Data with different MIME types can also be put on the clipboard. Construct a <db:link xlink:href="qmimedata.xml">QMimeData</db:link> object and set data with setData() function in the way described in the previous section; this object can then be put on the clipboard with the <db:link xlink:href="qclipboard.xml#setMimeData">setMimeData</db:link>() function.</db:para>
<db:para>The <db:link xlink:href="qclipboard.xml">QClipboard</db:link> class can notify the application about changes to the data it contains via its <db:link xlink:href="qclipboard.xml#dataChanged">dataChanged</db:link>() signal. For example, we can monitor the clipboard by connecting this signal to a slot in a widget:</db:para>
<db:programlisting language="cpp">    connect(clipboard, SIGNAL(dataChanged()), this, SLOT(updateClipboard()));
</db:programlisting>
<db:para>The slot connected to this signal can read the data on the clipboard using one of the MIME types that can be used to represent it:</db:para>
<db:programlisting language="cpp">void ClipWindow::updateClipboard()
{
    QStringList formats = clipboard-&gt;mimeData()-&gt;formats();
    QByteArray data = clipboard-&gt;mimeData()-&gt;data(format);
    ...
}
</db:programlisting>
<db:para>The <db:link xlink:href="qclipboard.xml#selectionChanged">selectionChanged</db:link>() signal can be used on X11 to monitor the mouse selection.</db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="">Draggable Icons</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Draggable Text</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Drop Site</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Fridge Magnets</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Drag and Drop Puzzle</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="interoperating-with-other-applications">
<db:title>Interoperating with Other Applications</db:title>
<db:para>On X11, the public <db:link xlink:href="http://www.newplanetsoftware.com/xdnd/">XDND protocol</db:link> is used, while on Windows Qt uses the OLE standard, and Qt for Mac OS X uses the Cocoa Drag Manager. On X11, XDND uses MIME, so no translation is necessary. The Qt API is the same regardless of the platform. On Windows, MIME-aware applications can communicate by using clipboard format names that are MIME types. Already some Windows applications use MIME naming conventions for their clipboard formats. Internally, Qt uses QWindowsMime and QMacPasteboardMime for translating proprietary clipboard formats to and from MIME types.</db:para>
</db:section>
</db:article>
