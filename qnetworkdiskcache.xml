<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNetworkDiskCache Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkdiskcache.xml">QNetworkDiskCache</db:link> class provides a very basic disk cache.</db:para>
<db:para>This class was introduced in Qt 4.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkDiskCache</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractnetworkcache.xml" xlink:role="class">QAbstractNetworkCache</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qnetworkdiskcache.xml">QNetworkDiskCache</db:link> stores each url in its own file inside of the <db:link xlink:href="qnetworkdiskcache.xml#cacheDirectory">cacheDirectory</db:link> using <db:link xlink:href="qdatastream.xml">QDataStream</db:link>. Files with a text MimeType are compressed using <db:link xlink:href="qbytearray.xml#qCompress-1">qCompress</db:link>. Data is written to disk only in <db:link xlink:href="qnetworkdiskcache.xml#insert">insert</db:link>() and <db:link xlink:href="qnetworkdiskcache.xml#updateMetaData">updateMetaData</db:link>().</db:para>
<db:para>Currently you cannot share the same cache files with more than one disk cache.</db:para>
<db:para><db:link xlink:href="qnetworkdiskcache.xml">QNetworkDiskCache</db:link> by default limits the amount of space that the cache will use on the system to 50MB.</db:para>
<db:para>Note you have to set the cache directory before it will work.</db:para>
<db:para>A network disk cache can be enabled by:</db:para>
<db:programlisting language="cpp">QNetworkAccessManager *manager = new QNetworkAccessManager(this);
QNetworkDiskCache *diskCache = new QNetworkDiskCache(this);
diskCache-&amp;gt;setCacheDirectory(&quot;cacheDir&quot;);
manager-&amp;gt;setCache(diskCache);
</db:programlisting>
<db:para>When sending requests, to control the preference of when to use the cache and when to use the network, consider the following:</db:para>
<db:programlisting language="cpp">// do a normal request (preferred from network, as this is the default)
QNetworkRequest request(QUrl(QString(&quot;http://qt-project.org&quot;)));
manager-&amp;gt;get(request);

// do a request preferred from cache
QNetworkRequest request2(QUrl(QString(&quot;http://qt-project.org&quot;)));
request2.setAttribute(QNetworkRequest::CacheLoadControlAttribute, QNetworkRequest::PreferCache);
manager-&amp;gt;get(request2);
</db:programlisting>
<db:para>To check whether the response came from the cache or from the network, the following can be applied:</db:para>
<db:programlisting language="cpp">void replyFinished(QNetworkReply *reply) {
    QVariant fromCache = reply-&amp;gt;attribute(QNetworkRequest::SourceIsFromCacheAttribute);
    qDebug() &amp;lt;&amp;lt; &quot;page from cache?&quot; &amp;lt;&amp;lt; fromCache.toBool();
}
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkDiskCache">
<db:title>[explicit] QNetworkDiskCache::QNetworkDiskCache(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QNetworkDiskCache</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkDiskCache(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new disk cache. The <db:code role="parameter">parent</db:code> argument is passed to <db:link xlink:href="qabstractnetworkcache.xml">QAbstractNetworkCache</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkDiskCache">
<db:title>[virtual] QNetworkDiskCache::~QNetworkDiskCache()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QNetworkDiskCache</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QNetworkDiskCache()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the cache object. This does not clear the disk cache.</db:para>
</db:section>
<db:section xml:id="cacheDirectory">
<db:title>QString QNetworkDiskCache::cacheDirectory() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>cacheDirectory</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString cacheDirectory() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the location where cached files will be stored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkdiskcache.xml#setCacheDirectory">setCacheDirectory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cacheSize">
<db:title>[override virtual] qint64 QNetworkDiskCache::cacheSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>cacheSize</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 cacheSize() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractnetworkcache.xml#cacheSize" role="function">QAbstractNetworkCache::cacheSize() const</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>[override virtual] void QNetworkDiskCache::clear()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractnetworkcache.xml#clear" role="function">QAbstractNetworkCache::clear()</db:link>.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[override virtual] QIODevice *QNetworkDiskCache::data(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QIODevice *</db:type>
<db:methodname>data</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * data(const QUrl &amp;url) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractnetworkcache.xml#data" role="function">QAbstractNetworkCache::data(const QUrl &amp;url)</db:link>.</db:para>
</db:section>
<db:section xml:id="expire">
<db:title>[virtual protected] qint64 QNetworkDiskCache::expire()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>qint64</db:type>
<db:methodname>expire</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 expire()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Cleans the cache so that its size is under the maximum cache size. Returns the current size of the cache.</db:para>
<db:para>When the current size of the cache is greater than the <db:link xlink:href="qnetworkdiskcache.xml#maximumCacheSize">maximumCacheSize</db:link>() older cache files are removed until the total size is less then 90% of <db:link xlink:href="qnetworkdiskcache.xml#maximumCacheSize">maximumCacheSize</db:link>() starting with the oldest ones first using the file creation date to determine how old a cache file is.</db:para>
<db:para>Subclasses can reimplement this function to change the order that cache files are removed taking into account information in the application knows about that <db:link xlink:href="qnetworkdiskcache.xml">QNetworkDiskCache</db:link> does not, for example the number of times a cache is accessed.</db:para>
<db:note>
<db:para><db:link xlink:href="qnetworkdiskcache.xml#cacheSize">cacheSize</db:link>() calls expire if the current cache size is unknown.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkdiskcache.xml#maximumCacheSize">maximumCacheSize</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkdiskcache.xml#fileMetaData">fileMetaData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileMetaData">
<db:title>QNetworkCacheMetaData QNetworkDiskCache::fileMetaData(const QString &amp;<db:emphasis>fileName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNetworkCacheMetaData</db:type>
<db:methodname>fileMetaData</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkCacheMetaData fileMetaData(const QString &amp;fileName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qnetworkcachemetadata.xml">QNetworkCacheMetaData</db:link> for the cache file <db:code role="parameter">fileName</db:code>.</db:para>
<db:para>If <db:code role="parameter">fileName</db:code> is not a cache file <db:link xlink:href="qnetworkcachemetadata.xml">QNetworkCacheMetaData</db:link> will be invalid.</db:para>
</db:section>
<db:section xml:id="insert">
<db:title>[override virtual] void QNetworkDiskCache::insert(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insert(QIODevice *device) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractnetworkcache.xml#insert" role="function">QAbstractNetworkCache::insert(QIODevice *device)</db:link>.</db:para>
</db:section>
<db:section xml:id="maximumCacheSize">
<db:title>qint64 QNetworkDiskCache::maximumCacheSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>maximumCacheSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 maximumCacheSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current maximum size for the disk cache.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkdiskcache.xml#setMaximumCacheSize">setMaximumCacheSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="metaData">
<db:title>[override virtual] QNetworkCacheMetaData QNetworkDiskCache::metaData(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QNetworkCacheMetaData</db:type>
<db:methodname>metaData</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkCacheMetaData metaData(const QUrl &amp;url) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractnetworkcache.xml#metaData" role="function">QAbstractNetworkCache::metaData(const QUrl &amp;url)</db:link>.</db:para>
</db:section>
<db:section xml:id="prepare">
<db:title>[override virtual] QIODevice *QNetworkDiskCache::prepare(const QNetworkCacheMetaData &amp;<db:emphasis>metaData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QIODevice *</db:type>
<db:methodname>prepare</db:methodname>
<db:methodparam>
<db:type>const QNetworkCacheMetaData &amp;</db:type>
<db:parameter>metaData</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * prepare(const QNetworkCacheMetaData &amp;metaData) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractnetworkcache.xml#prepare" role="function">QAbstractNetworkCache::prepare(const QNetworkCacheMetaData &amp;metaData)</db:link>.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>[override virtual] bool QNetworkDiskCache::remove(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool remove(const QUrl &amp;url) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractnetworkcache.xml#remove" role="function">QAbstractNetworkCache::remove(const QUrl &amp;url)</db:link>.</db:para>
</db:section>
<db:section xml:id="setCacheDirectory">
<db:title>void QNetworkDiskCache::setCacheDirectory(const QString &amp;<db:emphasis>cacheDir</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCacheDirectory</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>cacheDir</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCacheDirectory(const QString &amp;cacheDir)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the directory where cached files will be stored to <db:code role="parameter">cacheDir</db:code></db:para>
<db:para><db:link xlink:href="qnetworkdiskcache.xml">QNetworkDiskCache</db:link> will create this directory if it does not exists.</db:para>
<db:para>Prepared cache items will be stored in the new cache directory when they are inserted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkdiskcache.xml#cacheDirectory">cacheDirectory</db:link>()</db:member>
<db:member><db:link xlink:href="">QDesktopServices::CacheLocation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumCacheSize">
<db:title>void QNetworkDiskCache::setMaximumCacheSize(qint64 <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumCacheSize</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumCacheSize(qint64 size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum size of the disk cache to be <db:code role="parameter">size</db:code>.</db:para>
<db:para>If the new size is smaller then the current cache size then the cache will call <db:link xlink:href="qnetworkdiskcache.xml#expire">expire</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkdiskcache.xml#maximumCacheSize">maximumCacheSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateMetaData">
<db:title>[override virtual] void QNetworkDiskCache::updateMetaData(const QNetworkCacheMetaData &amp;<db:emphasis>metaData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>updateMetaData</db:methodname>
<db:methodparam>
<db:type>const QNetworkCacheMetaData &amp;</db:type>
<db:parameter>metaData</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateMetaData(const QNetworkCacheMetaData &amp;metaData) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractnetworkcache.xml#updateMetaData" role="function">QAbstractNetworkCache::updateMetaData(const QNetworkCacheMetaData &amp;metaData)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
