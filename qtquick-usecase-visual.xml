<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Use Case - Visual Elements In QML</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Example of how to display visual item types in a QML application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="the-rectangle-type">
<db:title>The Rectangle Type</db:title>
<db:para>For the most basic of visuals, <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> provides a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type to draw rectangles. These rectangles can be colored with a color or a vertical gradient. The <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type can also draw borders on the rectangle.</db:para>
<db:para>For drawing custom shapes beyond rectangles, see the <db:link xlink:href="qml-qtquick-canvas.xml">Canvas</db:link> type or display a pre-rendered image using the <db:link xlink:href="09-qdoc-commands-includingimages.xml#image">Image</db:link> type.</db:para>
<db:programlisting language="qml">import QtQuick

Item {

    width: 320
    height: 480

    Rectangle {
        color: &quot;#272822&quot;
        width: 320
        height: 480
    }

    // This element displays a rectangle with a gradient and a border
    Rectangle {
        x: 160
        y: 20
        width: 100
        height: 100
        radius: 8 // This gives rounded corners to the Rectangle
        gradient: Gradient { // This sets a vertical gradient fill
            GradientStop { position: 0.0; color: &quot;aqua&quot; }
            GradientStop { position: 1.0; color: &quot;teal&quot; }
        }
        border { width: 3; color: &quot;white&quot; } // This sets a 3px wide black border to be drawn
    }

    // This rectangle is a plain color with no border
    Rectangle {
        x: 40
        y: 20
        width: 100
        height: 100
        color: &quot;red&quot;
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-uses-visual-rectangles.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="the-image-type">
<db:title>The Image Type</db:title>
<db:para><db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> provides an <db:link xlink:href="09-qdoc-commands-includingimages.xml#image">Image</db:link> type which may be used to display images. The <db:link xlink:href="09-qdoc-commands-includingimages.xml#image">Image</db:link> type has a <db:link xlink:href="qml-qtquick-image.xml#source-prop">source</db:link> property whose value can be a remote or local URL, or the URL of an image file embedded in a compiled resource file.</db:para>
<db:programlisting language="qml">// This element displays an image. Because the source is online, it may take some time to fetch
Image {
    x: 40
    y: 20
    width: 61
    height: 73
    source: &quot;http://codereview.qt-project.org/static/logo_qt.png&quot;
}
</db:programlisting>
<db:para>For more complex images there are other types similar to <db:link xlink:href="09-qdoc-commands-includingimages.xml#image">Image</db:link>. <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link> draws an image with grid scaling, suitable for images used as borders. <db:link xlink:href="qml-qtquick-animatedimage.xml">AnimatedImage</db:link> plays animated .gif and .mng images. <db:link xlink:href="qml-qtquick-animatedsprite.xml">AnimatedSprite</db:link> and <db:link xlink:href="qml-qtquick-spritesequence.xml">SpriteSequence</db:link> play animations comprised of multiple frames stored adjacently in a non animated image format.</db:para>
</db:section>
<db:section xml:id="shared-visual-properties">
<db:title>Shared Visual Properties</db:title>
<db:para>All visual items provided by <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> are based on the Item type, which provides a common set of attributes for visual items, including opacity and transform attributes.</db:para>
<db:section xml:id="opacity-and-visibility">
<db:title>Opacity and Visibility</db:title>
<db:para>The QML object types provided by Qt Quick have built-in support for <db:link xlink:href="qml-qtquick-item.xml#opacity-prop">opacity</db:link>. Opacity can be animated to allow smooth transitions to or from a transparent state. Visibility can also be managed with the <db:link xlink:href="qml-qtquick-item.xml#visible-prop">visible</db:link> property more efficiently, but at the cost of not being able to animate it.</db:para>
<db:programlisting language="qml">import QtQuick

Item {

    width: 320
    height: 480

    Rectangle {
        color: &quot;#272822&quot;
        width: 320
        height: 480
    }

    Item {
        x: 20
        y: 270
        width: 200
        height: 200
        MouseArea {
            anchors.fill: parent
            onClicked: topRect.visible = !topRect.visible
        }
        Rectangle {
            x: 20
            y: 20
            width: 100
            height: 100
            color: &quot;red&quot;
        }
        Rectangle {
            id: topRect
            opacity: 0.5

            x: 100
            y: 100
            width: 100
            height: 100
            color: &quot;blue&quot;
        }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-uses-visual-opacity.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="transforms">
<db:title>Transforms</db:title>
<db:para>Qt Quick types have built-in support for transformations. If you wish to have your visual content rotated or scaled, you can set the <db:link xlink:href="qml-qtquick-item.xml#rotation-prop">Item::rotation</db:link> or <db:link xlink:href="qml-qtquick-item.xml#scale-prop">Item::scale</db:link> property. These can also be animated.</db:para>
<db:programlisting language="qml">import QtQuick

Item {

    width: 320
    height: 480

    Rectangle {
        color: &quot;#272822&quot;
        width: 320
        height: 480
    }

    Rectangle {
        rotation: 45 // This rotates the Rectangle by 45 degrees
        x: 20
        y: 160
        width: 100
        height: 100
        color: &quot;blue&quot;
    }
    Rectangle {
        scale: 0.8 // This scales the Rectangle down to 80% size
        x: 160
        y: 160
        width: 100
        height: 100
        color: &quot;green&quot;
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-uses-visual-transforms.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>For more complex transformations, see the <db:link xlink:href="qml-qtquick-item.xml#transform-prop">Item::transform</db:link> property.</db:para>
</db:section>
</db:section>
</db:article>
