<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Advanced Text Example</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt Quick example demonstrating some advanced features of text.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-advancedtext-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Traditionally, font families have been distributed in a limited number of variations: a set of hardcoded weights, styles and widths (and combinations of these) that can be selected as standalone fonts.</db:para>
<db:para>Variable fonts expands on this idea. Instead of distributing the variations of the font family as stand-alone font files, a single variable font can produce the variations (and many more) through interpolation.</db:para>
<db:para>This is achieved by defining so-called &quot;variable axes&quot; in the font for properties such as width, slant or weight. The user may select from preset values along these axes or set any custom value in the range the font supports.</db:para>
<db:para>This example includes a variable font called &quot;Georama&quot; (Copyright 2020 The Georama Project Authors, Licensed under OFL 1.1). It has two variable axes: One for weight and one for width. By manipulating either of these, the user can create a wide range of variations over the font design.</db:para>
<db:para>The example illustrates how this may be used in a real world scenario: When starting the example, the text snippets stretch outside the bounding boxes defined in the strict layout.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-advancedtext-example-wrong.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>By tweaking the width and/or weight, the visual designer can get variations of the font which fit the layout exactly without having to change the font size.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-advancedtext-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The example assigns sliders to each of the two variable axes in the font. It then binds the variable axis values to the sliders so that the font updates automatically when the user changes them.</db:para>
<db:programlisting language="qml">            font.variableAxes: {
                &quot;wdth&quot;: widthSlider.value,
                &quot;wght&quot;: weightSlider.value
            }
</db:programlisting>
<db:para>The variable axes are addressed by their four-character tag. Some tags, such as &quot;wdth&quot; and &quot;wght&quot;, are mapped to specific font attributes by convention (in this case: &quot;width&quot; and &quot;weight&quot;, respectively.) But the font may support any axis as long as it is denoted by a four-character tag. Information about the axes the font supports will often be included in its file name.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Qt Creator: Tutorial: Build and run</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/advancedtext?h=6.9">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
