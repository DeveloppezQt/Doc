<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Waterpump Example</db:title>
<db:productname>QtOpcUa</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>An OPC UA module for Qt</db:titleabbrev>
<db:abstract>
<db:para>Interacting with an OPC UA server to build a QML-based HMI for a simple machine.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Qt Quick Waterpump</db:emphasis> shows how to use Qt OPC UA QML API to interact with an OPC UA server to build a QML based HMI for a simple machine.</db:para>
<db:section xml:id="building-the-server">
<db:title>Building the Server</db:title>
<db:para>Before you can use the waterpump examples, you need to build the simulation server. The simulator server project resides next to the waterpump examples. You can open and build it in QtCreator or from the terminal as usual.</db:para>
</db:section>
<db:section xml:id="the-simulation">
<db:title>The Simulation</db:title>
<db:para>The OPC UA server included in this example runs a simulation of a machine containing two tanks, a water pump and a valve. Water can be pumped from the first tank into the second tank and then be flushed from the second tank by opening the valve. Both operations have a user-configurable setpoint which controls how much water is pumped to or flushed from the second tank.</db:para>
<db:para>The following nodes exist on the server:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qml-qtopcua-nodeid.xml">NodeId</db:link></db:para>
</db:th>
<db:th>
<db:para>Function</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine</db:para>
</db:td>
<db:td>
<db:para>The folder containing the method and variable nodes for the machine</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.State</db:para>
</db:td>
<db:td>
<db:para>The state of the machine</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Tank1.PercentFilled</db:para>
</db:td>
<db:td>
<db:para>The current fill status of the first tank</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Tank2.PercentFilled</db:para>
</db:td>
<db:td>
<db:para>The current fill status of the second tank</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Tank2.TargetPercent</db:para>
</db:td>
<db:td>
<db:para>The setpoint for pumping and flushing</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Tank2.ValveState</db:para>
</db:td>
<db:td>
<db:para>The state of the valve of the second tank</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Designation</db:para>
</db:td>
<db:td>
<db:para>A human readable designation of the machine for display purposes</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Start</db:para>
</db:td>
<db:td>
<db:para>Call this method to start the pump</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.Stop</db:para>
</db:td>
<db:td>
<db:para>Call this method to stop the pump</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ns=2;s=Machine.FlushTank2</db:para>
</db:td>
<db:td>
<db:para>Call this method to flush tank 2</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="implementation">
<db:title>Implementation</db:title>
<db:para>This example uses QML items to read and write values as well as method calls. All operations are asynchronous and handled by QML in the background.</db:para>
<db:para>A QML item represents the machine and its components. This item does not have any graphical interface and only provides access to the properties of the machine. It has two tanks which are instances of a separate <db:code>Tank</db:code> component.</db:para>
<db:section xml:id="properties">
<db:title>Properties</db:title>
<db:para>The machine item exposes all properties and subitems as properties.</db:para>
<db:programlisting language="cpp">    ...
    readonly property alias tank1: tank1
    readonly property alias tank2: tank2
    readonly property alias state: machineState.value
    readonly property alias tank2PercentFilled: tank2.percentFilled
    readonly property alias tank2valveState: tank2.valveState
    readonly property alias designation: designation.value
    property alias resetMethod: resetMethod
    property alias startMethod: startMethod
    property alias stopMethod: stopMethod
    property alias flushMethod: flushMethod
    ...
</db:programlisting>
</db:section>
<db:section xml:id="asynchronous-handlers">
<db:title>Asynchronous Handlers</db:title>
<db:para>The asynchronous parts of the API are handled by QML automatically because signals are emitted for every property change by default.</db:para>
<db:para>For example, the button to flush the second tank is enabled only if the backend is connected to the server, the machine is idle, and the tank level is above the setpoint. On click, the <db:code>flushTank2()</db:code> method is called on the server.</db:para>
<db:programlisting language="cpp">    Tank2Unit {
        flushButtonEnabled: connection.connected &amp;amp;&amp;amp; machine.state === Machine.MachineState.Idle &amp;amp;&amp;amp; machine.tank2.percentFilled &amp;gt; machine.tank2.targetPercent
        percentFilled: machine.tank2.percentFilled
        valveState: machine.tank2valveState
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="usage">
<db:title>Usage</db:title>
<db:para>The server is started automatically by the HMI application. After connecting to the server by clicking the <db:guilabel>Connect</db:guilabel> button, drag the slider to set a setpoint, then click <db:guilabel>Start</db:guilabel> to start pumping water from the first tank to the second tank. After setting a setpoint lower than the current value of the second tank, a click on <db:guilabel>Flush</db:guilabel> opens the valve.</db:para>
<db:para>If there is no water left, click <db:guilabel>Reset simulation</db:guilabel> to refill the first tank.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/tankexample.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="waterpump/waterpump-qml/CMakeLists.txt">waterpump/waterpump-qml/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="waterpump/waterpump-qml/main.cpp">waterpump/waterpump-qml/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="waterpump/waterpump-qml/qml.qrc">waterpump/waterpump-qml/qml.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="waterpump/waterpump-qml/waterpump-qml.pro">waterpump/waterpump-qml/waterpump-qml.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
