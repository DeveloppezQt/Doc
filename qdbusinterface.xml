<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDBusInterface Class</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt D-Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbusinterface.xml">QDBusInterface</db:link> class is a proxy for interfaces on remote objects.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS DBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::DBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdbusabstractinterface.xml" xlink:role="class">QDBusAbstractInterface</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdbusinterface.xml">QDBusInterface</db:link> is a generic accessor class that is used to place calls to remote objects, connect to signals exported by remote objects and get/set the value of remote properties. This class is useful for dynamic access to remote objects: that is, when you do not have a generated code that represents the remote interface.</db:para>
<db:para>Calls are usually placed by using the <db:link xlink:href="qdbusabstractinterface.xml#call-1">call</db:link>() function, which constructs the message, sends it over the bus, waits for the reply and decodes the reply. Signals are connected to by using the normal <db:link xlink:href="qobject.xml#connect">QObject::connect</db:link>() function. Finally, properties are accessed using the <db:link xlink:href="qobject.xml#property">QObject::property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">QObject::setProperty</db:link>() functions.</db:para>
<db:para>The following code snippet demonstrates how to perform a mathematical operation of <db:code>&quot;2 + 2&quot;</db:code> in a remote application called com.example.Calculator, accessed via the session bus.</db:para>
<db:programlisting language="cpp">QDBusInterface remoteApp( &quot;com.example.Calculator&quot;, &quot;/Calculator/Operations&quot;,
                          &quot;org.mathematics.RPNCalculator&quot; );
remoteApp.call( &quot;PushOperand&quot;, 2 );
remoteApp.call( &quot;PushOperand&quot;, 2 );
remoteApp.call( &quot;ExecuteOperation&quot;, &quot;+&quot; );
QDBusReply&amp;lt;int&amp;gt; reply = remoteApp.call( &quot;PopOperand&quot; );

if ( reply.isValid() )
    printf( &quot;%d&quot;, reply.value() );          // prints 4
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusxml2cpp.xml">Qt D-Bus XML compiler (qdbusxml2cpp)</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDBusInterface-1">
<db:title>QDBusInterface::QDBusInterface(const QString &amp;<db:emphasis>service</db:emphasis>, const QString &amp;<db:emphasis>path</db:emphasis>, const QString &amp;<db:emphasis>interface</db:emphasis> = QString(), const QDBusConnection &amp;<db:emphasis>connection</db:emphasis> = QDBusConnection::sessionBus(), QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusInterface</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>service</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>interface</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QDBusConnection &amp;</db:type>
<db:parameter>connection</db:parameter>
<db:initializer>QDBusConnection::sessionBus()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusInterface(const QString &amp;service, const QString &amp;path, const QString &amp;interface, const QDBusConnection &amp;connection, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a dynamic <db:link xlink:href="qdbusinterface.xml">QDBusInterface</db:link> object associated with the interface <db:code role="parameter">interface</db:code> on object at path <db:code role="parameter">path</db:code> on service <db:code role="parameter">service</db:code>, using the given <db:code role="parameter">connection</db:code>. If <db:code role="parameter">interface</db:code> is an empty string, the object created will refer to the merging of all interfaces found by introspecting that object. Otherwise if <db:code role="parameter">interface</db:code> is not empty, the <db:link xlink:href="qdbusinterface.xml">QDBusInterface</db:link> object will be cached to speedup further creations of the same interface.</db:para>
<db:para><db:code role="parameter">parent</db:code> is passed to the base class constructor.</db:para>
<db:para>If the remote service <db:code role="parameter">service</db:code> is not present or if an error occurs trying to obtain the description of the remote interface <db:code role="parameter">interface</db:code>, the object created will not be valid (see <db:link xlink:href="qdbusabstractinterface.xml#isValid">isValid</db:link>()).</db:para>
</db:section>
<db:section xml:id="dtor.QDBusInterface">
<db:title>[virtual] QDBusInterface::~QDBusInterface()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QDBusInterface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDBusInterface()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroy the object interface and frees up any resource used.</db:para>
</db:section>
</db:section>
</db:article>
