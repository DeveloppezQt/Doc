<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Dock Widgets Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Dock Widgets example shows how to add dock windows to an application. It also shows how to use Qt's rich text engine.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:alt>Screenshot of the Dock Widgets example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/dockwidgets-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The application presents a simple business letter template, and has a list of customer names and addresses and a list of standard phrases in two dock windows. The user can click a customer to have their name and address inserted into the template, and click one or more of the standard phrases. Errors can be corrected by clicking the Undo button. Once the letter has been prepared it can be printed or saved as HTML.</db:para>
<db:section xml:id="mainwindow-class-definition">
<db:title>MainWindow Class Definition</db:title>
<db:para>Here's the class definition:</db:para>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow();

private slots:
    void newLetter();
    void save();
    void print();
    void undo();
    void about();
    void insertCustomer(const QString &amp;amp;customer);
    void addParagraph(const QString &amp;amp;paragraph);

private:
    void createActions();
    void createStatusBar();
    void createDockWindows();

    QTextEdit *textEdit;
    QListWidget *customerList;
    QListWidget *paragraphsList;

    QMenu *viewMenu;
};
</db:programlisting>
<db:para>We will now review each function in turn.</db:para>
</db:section>
<db:section xml:id="mainwindow-class-implementation">
<db:title>MainWindow Class Implementation</db:title>
<db:programlisting language="cpp">#include &amp;lt;QtWidgets&amp;gt;
#if defined(QT_PRINTSUPPORT_LIB)
#include &amp;lt;QtPrintSupport/qtprintsupportglobal.h&amp;gt;
#if QT_CONFIG(printdialog)
#include &amp;lt;QtPrintSupport&amp;gt;
#endif
#endif

#include &quot;mainwindow.h&quot;
</db:programlisting>
<db:para>We start by including <db:code>&lt;QtWidgets&gt;</db:code>, a header file that contains the definition of all classes in the Qt Core, Qt GUI and Qt Widgets modules. This saves us from having to include every class individually and is especially convenient if we add new widgets. We also include <db:code>mainwindow.h</db:code>.</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow()
    : textEdit(new QTextEdit)
{
    setCentralWidget(textEdit);

    createActions();
    createStatusBar();
    createDockWindows();

    setWindowTitle(tr(&quot;Dock Widgets&quot;));

    newLetter();
    setUnifiedTitleAndToolBarOnMac(true);
}
</db:programlisting>
<db:para>In the constructor, we start by creating a QTextEdit widget. Then we call QMainWindow::setCentralWidget(). This function passes ownership of the QTextEdit to the <db:code>MainWindow</db:code> and tells the <db:code>MainWindow</db:code> that the QTextEdit will occupy the <db:code>MainWindow</db:code>'s central area.</db:para>
<db:para>Then we call <db:code>createActions()</db:code>, <db:code>createMenus()</db:code>, <db:code>createToolBars()</db:code>, <db:code>createStatusBar()</db:code>, and <db:code>createDockWindows()</db:code> to set up the user interface. Finally we call <db:code>setWindowTitle()</db:code> to give the application a title, and <db:code>newLetter()</db:code> to create a new letter template.</db:para>
<db:para>We won't quote the <db:code>createActions()</db:code>, <db:code>createMenus()</db:code>, <db:code>createToolBars()</db:code>, and <db:code>createStatusBar()</db:code> functions since they follow the same pattern as all the other Qt examples.</db:para>
<db:programlisting language="cpp">void MainWindow::createDockWindows()
{
    QDockWidget *dock = new QDockWidget(tr(&quot;Customers&quot;), this);
    dock-&amp;gt;setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);
    customerList = new QListWidget(dock);
    customerList-&amp;gt;addItems(QStringList()
            &amp;lt;&amp;lt; &quot;John Doe, Harmony Enterprises, 12 Lakeside, Ambleton&quot;
            &amp;lt;&amp;lt; &quot;Jane Doe, Memorabilia, 23 Watersedge, Beaton&quot;
            &amp;lt;&amp;lt; &quot;Tammy Shea, Tiblanka, 38 Sea Views, Carlton&quot;
            &amp;lt;&amp;lt; &quot;Tim Sheen, Caraba Gifts, 48 Ocean Way, Deal&quot;
            &amp;lt;&amp;lt; &quot;Sol Harvey, Chicos Coffee, 53 New Springs, Eccleston&quot;
            &amp;lt;&amp;lt; &quot;Sally Hobart, Tiroli Tea, 67 Long River, Fedula&quot;);
    dock-&amp;gt;setWidget(customerList);
    addDockWidget(Qt::RightDockWidgetArea, dock);
    viewMenu-&amp;gt;addAction(dock-&amp;gt;toggleViewAction());

    dock = new QDockWidget(tr(&quot;Paragraphs&quot;), this);
    paragraphsList = new QListWidget(dock);
    paragraphsList-&amp;gt;addItems(QStringList()
            &amp;lt;&amp;lt; &quot;Thank you for your payment which we have received today.&quot;
            &amp;lt;&amp;lt; &quot;Your order has been dispatched and should be with you &quot;
               &quot;within 28 days.&quot;
            &amp;lt;&amp;lt; &quot;We have dispatched those items that were in stock. The &quot;
               &quot;rest of your order will be dispatched once all the &quot;
               &quot;remaining items have arrived at our warehouse. No &quot;
               &quot;additional shipping charges will be made.&quot;
            &amp;lt;&amp;lt; &quot;You made a small overpayment (less than $5) which we &quot;
               &quot;will keep on account for you, or return at your request.&quot;
            &amp;lt;&amp;lt; &quot;You made a small underpayment (less than $1), but we have &quot;
               &quot;sent your order anyway. We'll add this underpayment to &quot;
               &quot;your next bill.&quot;
            &amp;lt;&amp;lt; &quot;Unfortunately you did not send enough money. Please remit &quot;
               &quot;an additional $. Your order will be dispatched as soon as &quot;
               &quot;the complete amount has been received.&quot;
            &amp;lt;&amp;lt; &quot;You made an overpayment (more than $5). Do you wish to &quot;
               &quot;buy more items, or should we return the excess to you?&quot;);
    dock-&amp;gt;setWidget(paragraphsList);
    addDockWidget(Qt::RightDockWidgetArea, dock);
    viewMenu-&amp;gt;addAction(dock-&amp;gt;toggleViewAction());

    connect(customerList, &amp;amp;QListWidget::currentTextChanged,
            this, &amp;amp;MainWindow::insertCustomer);
    connect(paragraphsList, &amp;amp;QListWidget::currentTextChanged,
            this, &amp;amp;MainWindow::addParagraph);
}
</db:programlisting>
<db:para>We create the customers dock window first, and in addition to a window title, we also pass it a <db:code>this</db:code> pointer so that it becomes a child of <db:code>MainWindow</db:code>. Normally we don't have to pass a parent because widgets are parented automatically when they are laid out: but dock windows aren't laid out using layouts.</db:para>
<db:para>We've chosen to restrict the customers dock window to the left and right dock areas. (So the user cannot drag the dock window to the top or bottom dock areas.) The user can drag the dock window out of the dock areas entirely so that it becomes a free floating window. We can change this (and whether the dock window is moveable or closable) using QDockWidget::setFeatures().</db:para>
<db:para>Once we've created the dock window we create a list widget with the dock window as parent, then we populate the list and make it the dock window's widget. Finally we add the dock widget to the <db:code>MainWindow</db:code> using <db:code>addDockWidget()</db:code>, choosing to put it in the right dock area.</db:para>
<db:para>We undertake a similar process for the paragraphs dock window, except that we don't restrict which dock areas it can be dragged to.</db:para>
<db:para>Finally we set up the signal-slot connections. If the user clicks a customer or a paragraph their <db:code>currentTextChanged()</db:code> signal will be emitted and we connect these to <db:code>insertCustomer()</db:code> and addParagraph() passing the text that was clicked.</db:para>
<db:para>We briefly discuss the rest of the implementation, but have now covered everything relating to dock windows.</db:para>
<db:programlisting language="cpp">void MainWindow::newLetter()
{
    textEdit-&amp;gt;clear();

    QTextCursor cursor(textEdit-&amp;gt;textCursor());
    cursor.movePosition(QTextCursor::Start);
    QTextFrame *topFrame = cursor.currentFrame();
    QTextFrameFormat topFrameFormat = topFrame-&amp;gt;frameFormat();
    topFrameFormat.setPadding(16);
    topFrame-&amp;gt;setFrameFormat(topFrameFormat);

    QTextCharFormat textFormat;
    QTextCharFormat boldFormat;
    boldFormat.setFontWeight(QFont::Bold);
    QTextCharFormat italicFormat;
    italicFormat.setFontItalic(true);

    QTextTableFormat tableFormat;
    tableFormat.setBorder(1);
    tableFormat.setCellPadding(16);
    tableFormat.setAlignment(Qt::AlignRight);
    cursor.insertTable(1, 1, tableFormat);
    cursor.insertText(&quot;The Firm&quot;, boldFormat);
    cursor.insertBlock();
    cursor.insertText(&quot;321 City Street&quot;, textFormat);
    cursor.insertBlock();
    cursor.insertText(&quot;Industry Park&quot;);
    cursor.insertBlock();
    cursor.insertText(&quot;Some Country&quot;);
    cursor.setPosition(topFrame-&amp;gt;lastPosition());
    cursor.insertText(QDate::currentDate().toString(&quot;d MMMM yyyy&quot;), textFormat);
    cursor.insertBlock();
    cursor.insertBlock();
    cursor.insertText(&quot;Dear &quot;, textFormat);
    cursor.insertText(&quot;NAME&quot;, italicFormat);
    cursor.insertText(&quot;,&quot;, textFormat);
    for (int i = 0; i &amp;lt; 3; ++i)
        cursor.insertBlock();
    cursor.insertText(tr(&quot;Yours sincerely,&quot;), textFormat);
    for (int i = 0; i &amp;lt; 3; ++i)
        cursor.insertBlock();
    cursor.insertText(&quot;The Boss&quot;, textFormat);
    cursor.insertBlock();
    cursor.insertText(&quot;ADDRESS&quot;, italicFormat);
}
</db:programlisting>
<db:para>In this function we clear the QTextEdit so that it is empty. Next we create a QTextCursor on the QTextEdit. We move the cursor to the start of the document and create and format a frame. We then create some character formats and a table format. We insert a table into the document and insert the company's name and address into a table using the table and character formats we created earlier. Then we insert the skeleton of the letter including two markers <db:code>NAME</db:code> and <db:code>ADDRESS</db:code>. We will also use the <db:code>Yours sincerely,</db:code> text as a marker.</db:para>
<db:programlisting language="cpp">void MainWindow::insertCustomer(const QString &amp;amp;customer)
{
    if (customer.isEmpty())
        return;
    QStringList customerList = customer.split(&quot;, &quot;);
    QTextDocument *document = textEdit-&amp;gt;document();
    QTextCursor cursor = document-&amp;gt;find(&quot;NAME&quot;);
    if (!cursor.isNull()) {
        cursor.beginEditBlock();
        cursor.insertText(customerList.at(0));
        QTextCursor oldcursor = cursor;
        cursor = document-&amp;gt;find(&quot;ADDRESS&quot;);
        if (!cursor.isNull()) {
            for (int i = 1; i &amp;lt; customerList.size(); ++i) {
                cursor.insertBlock();
                cursor.insertText(customerList.at(i));
            }
            cursor.endEditBlock();
        }
        else
            oldcursor.endEditBlock();
    }
}
</db:programlisting>
<db:para>If the user clicks a customer we split the customer details into pieces. We then look for the <db:code>NAME</db:code> marker using the <db:code>find()</db:code> function. This function selects the text it finds, so when we call <db:code>insertText()</db:code> with the customer's name the name replaces the marker. We then look for the <db:code>ADDRESS</db:code> marker and replace it with each line of the customer's address. Notice that we wrapped all the insertions between a <db:code>beginEditBlock()</db:code> and <db:code>endEditBlock()</db:code> pair. This means that the entire name and address insertion is treated as a single operation by the QTextEdit, so a single undo will revert all the insertions.</db:para>
<db:programlisting language="cpp">void MainWindow::addParagraph(const QString &amp;amp;paragraph)
{
    if (paragraph.isEmpty())
        return;
    QTextDocument *document = textEdit-&amp;gt;document();
    QTextCursor cursor = document-&amp;gt;find(tr(&quot;Yours sincerely,&quot;));
    if (cursor.isNull())
        return;
    cursor.beginEditBlock();
    cursor.movePosition(QTextCursor::PreviousBlock, QTextCursor::MoveAnchor, 2);
    cursor.insertBlock();
    cursor.insertText(paragraph);
    cursor.insertBlock();
    cursor.endEditBlock();

}
</db:programlisting>
<db:para>This function works in a similar way to <db:code>insertCustomer()</db:code>. First we look for the marker, in this case, <db:code>Yours sincerely,</db:code>, and then replace it with the standard paragraph that the user clicked. Again we use a <db:code>beginEditBlock()</db:code> ... <db:code>endEditBlock()</db:code> pair so that the insertion can be undone as a single operation.</db:para>
<db:programlisting language="cpp">void MainWindow::print()
{
#if defined(QT_PRINTSUPPORT_LIB) &amp;amp;&amp;amp; QT_CONFIG(printdialog)
    QTextDocument *document = textEdit-&amp;gt;document();
    QPrinter printer;

    QPrintDialog dlg(&amp;amp;printer, this);
    if (dlg.exec() != QDialog::Accepted) {
        return;
    }

    document-&amp;gt;print(&amp;amp;printer);
    statusBar()-&amp;gt;showMessage(tr(&quot;Ready&quot;), 2000);
#endif
}
</db:programlisting>
<db:para>Qt's QTextDocument class makes printing documents easy. We simply take the QTextEdit's QTextDocument, set up the printer and print the document.</db:para>
<db:programlisting language="cpp">void MainWindow::save()
{
    QMimeDatabase mimeDatabase;
    QString fileName = QFileDialog::getSaveFileName(this,
                        tr(&quot;Choose a file name&quot;), &quot;.&quot;,
                        mimeDatabase.mimeTypeForName(&quot;text/html&quot;).filterString());
    if (fileName.isEmpty())
        return;
    QFile file(fileName);
    if (!file.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, tr(&quot;Dock Widgets&quot;),
                             tr(&quot;Cannot write file %1:\n%2.&quot;)
                             .arg(QDir::toNativeSeparators(fileName), file.errorString()));
        return;
    }

    QTextStream out(&amp;amp;file);
    QGuiApplication::setOverrideCursor(Qt::WaitCursor);
    out &amp;lt;&amp;lt; textEdit-&amp;gt;toHtml();
    QGuiApplication::restoreOverrideCursor();

    statusBar()-&amp;gt;showMessage(tr(&quot;Saved '%1'&quot;).arg(fileName), 2000);
}
</db:programlisting>
<db:para>QTextEdit can output its contents in HTML format, so we prompt the user for the name of an HTML file and if they provide one we simply write the QTextEdit's contents in HTML format to the file.</db:para>
<db:programlisting language="cpp">void MainWindow::undo()
{
    QTextDocument *document = textEdit-&amp;gt;document();
    document-&amp;gt;undo();
}
</db:programlisting>
<db:para>If the focus is in the QTextEdit, pressing <db:guilabel>Ctrl+Z</db:guilabel> undoes as expected. But for the user's convenience we provide an application-wide undo function that simply calls the QTextEdit's undo: this means that the user can undo regardless of where the focus is in the application.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/mainwindows/dockwidgets?h=5.14">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
