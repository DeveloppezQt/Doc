<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPdfPageRenderer Class</db:title>
<db:productname>QtPdf</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Pdf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpdfpagerenderer.xml">QPdfPageRenderer</db:link> class encapsulates the rendering of pages of a PDF document.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPdfPageRenderer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qpdfpagerenderer.xml">QPdfPageRenderer</db:link> contains a queue that collects all render requests that are invoked through <db:link xlink:href="qpdfpagerenderer.xml#requestPage">requestPage</db:link>(). Depending on the configured <db:link xlink:href="qpdfpagerenderer.xml#RenderMode-enum">RenderMode</db:link> the <db:link xlink:href="qpdfpagerenderer.xml">QPdfPageRenderer</db:link> processes this queue in the main UI thread on next event loop invocation (<db:code>RenderMode::SingleThreaded</db:code>) or in a separate worker thread (<db:code>RenderMode::MultiThreaded</db:code>) and emits the result through the pageRendered() signal for each request once the rendering is done.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RenderMode-enum">
<db:title>enum QPdfPageRenderer::RenderMode</db:title>
<db:enumsynopsis>
<db:enumname>RenderMode</db:enumname>
<db:enumitem>
<db:enumidentifier>MultiThreaded</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SingleThreaded</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes how the pages are rendered.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfpagerenderer.xml">QPdfPageRenderer</db:link></db:emphasis>::<db:emphasis role="bold">RenderMode</db:emphasis>::MultiThreaded</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>All pages are rendered in a separate worker thread.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfpagerenderer.xml">QPdfPageRenderer</db:link></db:emphasis>::<db:emphasis role="bold">RenderMode</db:emphasis>::SingleThreaded</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>All pages are rendered in the main UI thread (default).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfpagerenderer.xml#renderMode">renderMode</db:link>()</db:member>
<db:member><db:link xlink:href="qpdfpagerenderer.xml#setRenderMode">setRenderMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="document-prop">
<db:title>document : QPdfDocument*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPdfDocument*</db:type>
<db:varname>document</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">document</db:synopsisinfo>
<db:synopsisinfo role="setter">setDocument</db:synopsisinfo>
<db:synopsisinfo role="notifier">documentChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the document instance this object renders the pages from.</db:para>
<db:para>By default, this property is <db:code>nullptr</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qpdfpagerenderer.xml#document">document</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qpdfpagerenderer.xml#setDocument">setDocument</db:link></db:emphasis>(<db:type><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:type> *<db:emphasis>document</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">documentChanged</db:emphasis>(<db:type><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:type> *<db:emphasis>document</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfpagerenderer.xml#document">document</db:link>()</db:member>
<db:member><db:link xlink:href="qpdfpagerenderer.xml#setDocument">setDocument</db:link>()</db:member>
<db:member><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderMode-prop">
<db:title>renderMode : RenderMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>RenderMode</db:type>
<db:varname>renderMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">renderMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setRenderMode</db:synopsisinfo>
<db:synopsisinfo role="notifier">renderModeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the mode the renderer uses to render the pages.</db:para>
<db:para>By default, this property is <db:code>RenderMode::SingleThreaded</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpdfpagerenderer.xml#RenderMode-enum">QPdfPageRenderer::RenderMode</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qpdfpagerenderer.xml#renderMode">renderMode</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qpdfpagerenderer.xml#setRenderMode">setRenderMode</db:link></db:emphasis>(<db:type><db:link xlink:href="qpdfpagerenderer.xml#RenderMode-enum">QPdfPageRenderer::RenderMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">renderModeChanged</db:emphasis>(<db:type><db:link xlink:href="qpdfpagerenderer.xml#RenderMode-enum">QPdfPageRenderer::RenderMode</db:link></db:type> <db:emphasis>renderMode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfpagerenderer.xml#setRenderMode">setRenderMode</db:link>()</db:member>
<db:member><db:link xlink:href="qpdfpagerenderer.xml#RenderMode-enum">RenderMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPdfPageRenderer-1">
<db:title>[explicit] QPdfPageRenderer::QPdfPageRenderer(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPdfPageRenderer</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPdfPageRenderer(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a page renderer object with parent object <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPdfPageRenderer">
<db:title>[override virtual] QPdfPageRenderer::~QPdfPageRenderer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPdfPageRenderer</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPdfPageRenderer() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the page renderer object.</db:para>
</db:section>
<db:section xml:id="document">
<db:title>QPdfDocument *QPdfPageRenderer::document() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPdfDocument *</db:type>
<db:methodname>document</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">document</db:synopsisinfo>
<db:synopsisinfo role="signature">QPdfDocument * document() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the document this objects renders the pages from, or a <db:code>nullptr</db:code> if none has been set before.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qpdfpagerenderer.xml#document-prop">document</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfpagerenderer.xml#setDocument">setDocument</db:link>()</db:member>
<db:member><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderMode">
<db:title>QPdfPageRenderer::RenderMode QPdfPageRenderer::renderMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPdfPageRenderer::RenderMode</db:type>
<db:methodname>renderMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">renderMode</db:synopsisinfo>
<db:synopsisinfo role="signature">QPdfPageRenderer::RenderMode renderMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the mode of how the pages are rendered.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qpdfpagerenderer.xml#renderMode-prop">renderMode</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfpagerenderer.xml#setRenderMode">setRenderMode</db:link>()</db:member>
<db:member><db:link xlink:href="qpdfpagerenderer.xml#RenderMode-enum">RenderMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestPage">
<db:title>quint64 QPdfPageRenderer::requestPage(int <db:emphasis>pageNumber</db:emphasis>, QSize <db:emphasis>imageSize</db:emphasis>, QPdfDocumentRenderOptions <db:emphasis>options</db:emphasis> = QPdfDocumentRenderOptions())</db:title>
<db:methodsynopsis>
<db:type>quint64</db:type>
<db:methodname>requestPage</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pageNumber</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSize</db:type>
<db:parameter>imageSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPdfDocumentRenderOptions</db:type>
<db:parameter>options</db:parameter>
<db:initializer>QPdfDocumentRenderOptions()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint64 requestPage(int pageNumber, QSize imageSize, QPdfDocumentRenderOptions options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Requests the renderer to render the page <db:code role="parameter">pageNumber</db:code> into a <db:link xlink:href="qimage.xml">QImage</db:link> of size <db:code role="parameter">imageSize</db:code> according to the provided <db:code role="parameter">options</db:code>.</db:para>
<db:para>Once the rendering is done the pageRendered() signal is emitted with the result as parameters.</db:para>
<db:para>The return value is an ID that uniquely identifies the render request. If a request with the same parameters is still in the queue, the ID of that queued request is returned.</db:para>
</db:section>
<db:section xml:id="setDocument">
<db:title>void QPdfPageRenderer::setDocument(QPdfDocument *<db:emphasis>document</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDocument</db:methodname>
<db:methodparam>
<db:type>QPdfDocument *</db:type>
<db:parameter>document</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">document</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDocument(QPdfDocument *document)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">document</db:code> this object renders the pages from.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qpdfpagerenderer.xml#document-prop">document</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfpagerenderer.xml#document">document</db:link>()</db:member>
<db:member><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRenderMode">
<db:title>void QPdfPageRenderer::setRenderMode(QPdfPageRenderer::RenderMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRenderMode</db:methodname>
<db:methodparam>
<db:type>QPdfPageRenderer::RenderMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">renderMode</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRenderMode(QPdfPageRenderer::RenderMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the mode of how the pages are rendered to <db:code role="parameter">mode</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qpdfpagerenderer.xml#renderMode-prop">renderMode</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfpagerenderer.xml#renderMode">renderMode</db:link>()</db:member>
<db:member><db:link xlink:href="qpdfpagerenderer.xml#RenderMode-enum">RenderMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
