<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using the SQL Model Classes</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="sql-sqlstatements.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Executing SQL Statements"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="sql-presenting.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Presenting Data in a Table View"/></db:extendedlink>
<db:abstract>
<db:para>Qt SQL Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>SQL Programming</db:para>
<db:para>In addition to <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link>, Qt offers three higher-level classes for accessing databases. These classes are <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link>, <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link>, and <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link>.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link></db:para>
</db:td>
<db:td>
<db:para>A read-only model based on an arbitrary SQL query.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link></db:para>
</db:td>
<db:td>
<db:para>A read-write model that works on a single table.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link></db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> subclass with foreign key support.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>These classes derive from <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link> (which in turn inherits from <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>) and make it easy to present data from a database in an item view class such as <db:link xlink:href="qlistview.xml">QListView</db:link> and <db:link xlink:href="qtableview.xml">QTableView</db:link>. This is explained in detail in the <db:link xlink:href="sql-presenting.xml">Presenting Data in a Table View</db:link> section.</db:para>
<db:para>Another advantage of using these classes is that it can make your code easier to adapt to other data sources. For example, if you use <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> and later decide to use XML files to store data instead of a database, it is essentially just a matter of replacing one data model with another.</db:para>
<db:section xml:id="the-sql-query-model">
<db:title>The SQL Query Model</db:title>
<db:para><db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> offers a read-only model based on an SQL query.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QSqlQueryModel model;
    model.setQuery(&quot;SELECT * FROM employee&quot;);

    for (int i = 0; i &amp;lt; model.rowCount(); ++i) {
        int id = model.record(i).value(&quot;id&quot;).toInt();
        QString name = model.record(i).value(&quot;name&quot;).toString();
        qDebug() &amp;lt;&amp;lt; id &amp;lt;&amp;lt; name;
    }
</db:programlisting>
<db:para>After setting the query using <db:link xlink:href="qsqlquerymodel.xml#setQuery">QSqlQueryModel::setQuery</db:link>(), you can use <db:link xlink:href="qsqlquerymodel.xml#record">QSqlQueryModel::record</db:link>(int) to access the individual records. You can also use <db:link xlink:href="qsqlquerymodel.xml#data">QSqlQueryModel::data</db:link>() and any of the other functions inherited from <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>.</db:para>
<db:para>There's also a <db:link xlink:href="qsqlquerymodel.xml#setQuery">setQuery</db:link>() overload that takes a <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> object and operates on its result set. This enables you to use any features of <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> to set up the query (e.g., prepared queries).</db:para>
</db:section>
<db:section xml:id="the-sql-table-model">
<db:title>The SQL Table Model</db:title>
<db:para><db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> offers a read-write model that works on a single SQL table at a time.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QSqlTableModel model;
    model.setTable(&quot;employee&quot;);
    model.setFilter(&quot;salary &amp;gt; 50000&quot;);
    model.setSort(2, Qt::DescendingOrder);
    model.select();

    for (int i = 0; i &amp;lt; model.rowCount(); ++i) {
        QString name = model.record(i).value(&quot;name&quot;).toString();
        int salary = model.record(i).value(&quot;salary&quot;).toInt();
        qDebug() &amp;lt;&amp;lt; name &amp;lt;&amp;lt; salary;
    }
</db:programlisting>
<db:para><db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> is a high-level alternative to <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> for navigating and modifying individual SQL tables. It typically results in less code and requires no knowledge of SQL syntax.</db:para>
<db:para>Use <db:link xlink:href="qsqltablemodel.xml#record">QSqlTableModel::record</db:link>() to retrieve a row in the table, and <db:link xlink:href="qsqltablemodel.xml#setRecord">QSqlTableModel::setRecord</db:link>() to modify the row. For example, the following code will increase every employee's salary by 10 per cent:</db:para>
<db:programlisting language="cpp">    for (int i = 0; i &amp;lt; model.rowCount(); ++i) {
        QSqlRecord record = model.record(i);
        double salary = record.value(&quot;salary&quot;).toInt();
        salary *= 1.1;
        record.setValue(&quot;salary&quot;, salary);
        model.setRecord(i, record);
    }
    model.submitAll();
</db:programlisting>
<db:para>You can also use <db:link xlink:href="qsqltablemodel.xml#data">QSqlTableModel::data</db:link>() and <db:link xlink:href="qsqltablemodel.xml#setData">QSqlTableModel::setData</db:link>(), which are inherited from <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>, to access the data. For example, here's how to update a record using <db:link xlink:href="qsqltablemodel.xml#setData">setData</db:link>():</db:para>
<db:programlisting language="cpp">    model.setData(model.index(row, column), 75000);
    model.submitAll();
</db:programlisting>
<db:para>Here's how to insert a row and populate it:</db:para>
<db:programlisting language="cpp">    model.insertRows(row, 1);
    model.setData(model.index(row, 0), 1013);
    model.setData(model.index(row, 1), &quot;Peter Gordon&quot;);
    model.setData(model.index(row, 2), 68500);
    model.submitAll();
</db:programlisting>
<db:para>Here's how to delete five consecutive rows:</db:para>
<db:programlisting language="cpp">    model.removeRows(row, 5);
    model.submitAll();
</db:programlisting>
<db:para>The first argument to <db:link xlink:href="qsqltablemodel.xml#removeRows">QSqlTableModel::removeRows</db:link>() is the index of the first row to delete.</db:para>
<db:para>When you're finished changing a record, you should always call <db:link xlink:href="qsqltablemodel.xml#submitAll">QSqlTableModel::submitAll</db:link>() to ensure that the changes are written to the database.</db:para>
<db:para>When and whether you actually <db:emphasis>need</db:emphasis> to call submitAll() depends on the table's <db:link xlink:href="qsqltablemodel.xml#editStrategy">edit strategy</db:link>. The default strategy is <db:link xlink:href="qsqltablemodel.xml#EditStrategy-enum">QSqlTableModel::OnRowChange</db:link>, which specifies that pending changes are applied to the database when the user selects a different row. Other strategies are <db:link xlink:href="qsqltablemodel.xml#EditStrategy-enum">QSqlTableModel::OnManualSubmit</db:link> (where all changes are cached in the model until you call submitAll()) and <db:link xlink:href="qsqltablemodel.xml#EditStrategy-enum">QSqlTableModel::OnFieldChange</db:link> (where no changes are cached). These are mostly useful when <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> is used with a view.</db:para>
<db:para><db:link xlink:href="qsqltablemodel.xml#EditStrategy-enum">QSqlTableModel::OnFieldChange</db:link> seems to deliver the promise that you never need to call submitAll() explicitly. There are two pitfalls, though:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Without any caching, performance may drop significantly.</db:para>
</db:listitem>
<db:listitem>
<db:para>If you modify a primary key, the record might slip through your fingers while you are trying to populate it.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="the-sql-relational-table-model">
<db:title>The SQL Relational Table Model</db:title>
<db:para><db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link> extends <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> to provide support for foreign keys. A foreign key is a 1-to-1 mapping between a field in one table and the primary key field of another table. For example, if a <db:code>book</db:code> table has a field called <db:code>authorid</db:code> that refers to the author table's <db:code>id</db:code> field, we say that <db:code>authorid</db:code> is a foreign key.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/noforeignkeys.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/foreignkeys.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The screenshot on the left shows a plain <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> in a <db:link xlink:href="qtableview.xml">QTableView</db:link>. Foreign keys (<db:code>city</db:code> and <db:code>country</db:code>) aren't resolved to human-readable values. The screenshot on the right shows a <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link>, with foreign keys resolved into human-readable text strings.</db:para>
<db:para>The following code snippet shows how the <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link> was set up:</db:para>
<db:programlisting language="cpp">    model-&amp;gt;setTable(&quot;employee&quot;);

    model-&amp;gt;setRelation(2, QSqlRelation(&quot;city&quot;, &quot;id&quot;, &quot;name&quot;));
    model-&amp;gt;setRelation(3, QSqlRelation(&quot;country&quot;, &quot;id&quot;, &quot;name&quot;));
</db:programlisting>
<db:para>See the <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link> documentation for details.</db:para>
</db:section>
</db:article>
