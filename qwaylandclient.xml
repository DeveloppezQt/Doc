<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWaylandClient Class</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwaylandclient.xml">QWaylandClient</db:link> class represents a client connecting to the QWaylandCompositor.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWaylandClient</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += waylandcompositor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class corresponds to a client connecting to the compositor using the Wayland protocol. It corresponds to the Wayland interface wl_client.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="compositor-prop">
<db:title>[read-only] compositor : QWaylandCompositor* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QWaylandCompositor*</db:type>
<db:varname>compositor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">compositor</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the compositor of this <db:link xlink:href="qwaylandclient.xml">QWaylandClient</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QWaylandCompositor</db:type> *<db:emphasis role="bold">compositor</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="groupId-prop">
<db:title>[read-only] groupId : const qint64</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qint64</db:type>
<db:varname>groupId</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">groupId</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the group id of this <db:link xlink:href="qwaylandclient.xml">QWaylandClient</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis role="bold">groupId</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="processId-prop">
<db:title>[read-only] processId : const qint64</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qint64</db:type>
<db:varname>processId</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">processId</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the process id of this <db:link xlink:href="qwaylandclient.xml">QWaylandClient</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis role="bold">processId</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="userId-prop">
<db:title>[read-only] userId : const qint64</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qint64</db:type>
<db:varname>userId</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">userId</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the user id of this <db:link xlink:href="qwaylandclient.xml">QWaylandClient</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis role="bold">userId</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QWaylandClient">
<db:title>[override virtual] QWaylandClient::~QWaylandClient()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QWaylandClient</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWaylandClient() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qwaylandclient.xml">QWaylandClient</db:link>.</db:para>
</db:section>
<db:section xml:id="client">
<db:title>wl_client *QWaylandClient::client() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>wl_client *</db:type>
<db:methodname>client</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">wl_client * client() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Wayland client of this <db:link xlink:href="qwaylandclient.xml">QWaylandClient</db:link>.</db:para>
</db:section>
<db:section xml:id="close">
<db:title>void QWaylandClient::close()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>close</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void close()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes the client.</db:para>
</db:section>
<db:section xml:id="fromWlClient">
<db:title>[static] QWaylandClient *QWaylandClient::fromWlClient(QWaylandCompositor *<db:emphasis>compositor</db:emphasis>, wl_client *<db:emphasis>wlClient</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWaylandClient *</db:type>
<db:methodname>fromWlClient</db:methodname>
<db:methodparam>
<db:type>QWaylandCompositor *</db:type>
<db:parameter>compositor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>wl_client *</db:type>
<db:parameter>wlClient</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandClient * fromWlClient(QWaylandCompositor *compositor, wl_client *wlClient)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qwaylandclient.xml">QWaylandClient</db:link> corresponding to the Wayland client <db:code role="parameter">wlClient</db:code> and <db:code role="parameter">compositor</db:code>. If a <db:link xlink:href="qwaylandclient.xml">QWaylandClient</db:link> has not already been created for a client, it is created and returned.</db:para>
</db:section>
<db:section xml:id="kill">
<db:title>void QWaylandClient::kill(int <db:emphasis>signal</db:emphasis> = SIGTERM)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>kill</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>signal</db:parameter>
<db:initializer>SIGTERM</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void kill(int signal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Kills the client with the specified <db:code role="parameter">signal</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
