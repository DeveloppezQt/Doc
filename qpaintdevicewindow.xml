<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPaintDeviceWindow Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Convenience subclass of <db:link xlink:href="qwindow.xml">QWindow</db:link> that is also a <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link>.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPaintDeviceWindow</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwindow.xml" xlink:role="class">QWindow</db:link> and <db:link xlink:href="qpaintdevice.xml" xlink:role="class">QPaintDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qrasterwindow.xml" xlink:role="class">QRasterWindow</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qpaintdevicewindow.xml">QPaintDeviceWindow</db:link> is like a regular <db:link xlink:href="qwindow.xml">QWindow</db:link>, with the added functionality of being a paint device too. Whenever the content needs to be updated, the virtual <db:link xlink:href="qpaintdevicewindow.xml#paintEvent">paintEvent</db:link>() function is called. Subclasses, that reimplement this function, can then simply open a <db:link xlink:href="qpainter.xml">QPainter</db:link> on the window.</db:para>
<db:note>
<db:para>This class cannot directly be used in applications. It rather serves as a base for subclasses like QOpenGLWindow.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QOpenGLWindow</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QPaintDeviceWindow::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwindow.xml#paintEvent" role="function">QWindow::paintEvent(QPaintEvent *ev)</db:link>.</db:para>
<db:para>Handles paint events passed in the <db:code role="parameter">event</db:code> parameter.</db:para>
<db:para>The default implementation does nothing. Reimplement this function to perform painting. If necessary, the dirty area is retrievable from the <db:code role="parameter">event</db:code>.</db:para>
</db:section>
<db:section xml:id="update">
<db:title>void QPaintDeviceWindow::update(const QRect &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>update</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void update(const QRect &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Marks the <db:code role="parameter">rect</db:code> of the window as dirty and schedules a repaint.</db:para>
<db:note>
<db:para>Subsequent calls to this function before the next paint event will get ignored, but <db:code role="parameter">rect</db:code> is added to the region to update.</db:para>
</db:note>
<db:note>
<db:para>For non-exposed windows the update is deferred until the window becomes exposed again.</db:para>
</db:note>
</db:section>
<db:section xml:id="update-1">
<db:title>void QPaintDeviceWindow::update(const QRegion &amp;<db:emphasis>region</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>update</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>region</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void update(const QRegion &amp;region)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Marks the <db:code role="parameter">region</db:code> of the window as dirty and schedules a repaint.</db:para>
<db:note>
<db:para>Subsequent calls to this function before the next paint event will get ignored, but <db:code role="parameter">region</db:code> is added to the region to update.</db:para>
</db:note>
<db:note>
<db:para>For non-exposed windows the update is deferred until the window becomes exposed again.</db:para>
</db:note>
</db:section>
<db:section xml:id="update-2">
<db:title>void QPaintDeviceWindow::update()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>update</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void update()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Marks the entire window as dirty and schedules a repaint.</db:para>
<db:note>
<db:para>Subsequent calls to this function before the next paint event will get ignored.</db:para>
</db:note>
<db:note>
<db:para>For non-exposed windows the update is deferred until the window becomes exposed again.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
