<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHelpSearchEngine Class</db:title>
<db:productname>QtHelp</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Help Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhelpsearchengine.xml">QHelpSearchEngine</db:link> class provides access to widgets reusable to integrate fulltext search as well as to index and search documentation.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHelpSearchEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Help)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Help)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += help</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Before the search engine can be used, one has to instantiate at least a <db:link xlink:href="qhelpenginecore.xml">QHelpEngineCore</db:link> object that needs to be passed to the search engines constructor. This is required as the search engine needs to be connected to the help engines setupFinished() signal to know when it can start to index documentation.</db:para>
<db:para>After starting the indexing process the signal <db:link xlink:href="qhelpsearchengine.xml#indexingStarted">indexingStarted</db:link>() is emitted and on the end of the indexing process the <db:link xlink:href="qhelpsearchengine.xml#indexingFinished">indexingFinished</db:link>() is emitted. To stop the indexing one can call <db:link xlink:href="qhelpsearchengine.xml#cancelIndexing">cancelIndexing</db:link>().</db:para>
<db:para>When the indexing process has finished, the search engine can be used to search through the index for a given term using the search() function. When the search input is passed to the search engine, the <db:link xlink:href="qhelpsearchengine.xml#searchingStarted">searchingStarted</db:link>() signal is emitted. When the search finishes, the <db:link xlink:href="qhelpsearchengine.xml#searchingFinished">searchingFinished</db:link>() signal is emitted. The search process can be stopped by calling <db:link xlink:href="qhelpsearchengine.xml#cancelSearching">cancelSearching</db:link>().</db:para>
<db:para>If the search succeeds, <db:link xlink:href="qhelpsearchengine.xml#searchingFinished">searchingFinished</db:link>() is called with the search result count to fetch the search results from the search engine. Calling the <db:link xlink:href="qhelpsearchengine.xml#searchResults">searchResults</db:link>() function with a range returns a list of <db:link xlink:href="qhelpsearchresult.xml">QHelpSearchResult</db:link> objects within the range. The results consist of the document title and URL, as well as a snippet from the document that contains the best match for the search input.</db:para>
<db:para>To display the given search results use the <db:link xlink:href="qhelpsearchresultwidget.xml">QHelpSearchResultWidget</db:link> or build up your own one if you need more advanced functionality. Note that the <db:link xlink:href="qhelpsearchresultwidget.xml">QHelpSearchResultWidget</db:link> can not be instantiated directly, you must retrieve the widget from the search engine in use as all connections will be established for you by the widget itself.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHelpSearchEngine">
<db:title>[explicit] QHelpSearchEngine::QHelpSearchEngine(QHelpEngineCore *<db:emphasis>helpEngine</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QHelpSearchEngine</db:methodname>
<db:methodparam>
<db:type>QHelpEngineCore *</db:type>
<db:parameter>helpEngine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QHelpSearchEngine(QHelpEngineCore *helpEngine, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new search engine with the given <db:code role="parameter">parent</db:code>. The search engine uses the given <db:code role="parameter">helpEngine</db:code> to access the documentation that needs to be indexed. The <db:link xlink:href="qhelpengine.xml">QHelpEngine</db:link>'s setupFinished() signal is automatically connected to the <db:link xlink:href="qhelpsearchengine.xml">QHelpSearchEngine</db:link>'s indexing function, so that new documentation will be indexed after the signal is emitted.</db:para>
</db:section>
<db:section xml:id="dtor.QHelpSearchEngine">
<db:title>[virtual] QHelpSearchEngine::~QHelpSearchEngine()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QHelpSearchEngine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QHelpSearchEngine()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs the search engine.</db:para>
</db:section>
<db:section xml:id="cancelIndexing">
<db:title>void QHelpSearchEngine::cancelIndexing()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cancelIndexing</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cancelIndexing()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops the indexing process.</db:para>
</db:section>
<db:section xml:id="cancelSearching">
<db:title>void QHelpSearchEngine::cancelSearching()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cancelSearching</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cancelSearching()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops the search process.</db:para>
</db:section>
<db:section xml:id="indexingFinished">
<db:title>void QHelpSearchEngine::indexingFinished()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>indexingFinished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void indexingFinished()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the indexing process is complete.</db:para>
</db:section>
<db:section xml:id="indexingStarted">
<db:title>void QHelpSearchEngine::indexingStarted()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>indexingStarted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void indexingStarted()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when indexing process is started.</db:para>
</db:section>
<db:section xml:id="queryWidget">
<db:title>QHelpSearchQueryWidget *QHelpSearchEngine::queryWidget()</db:title>
<db:methodsynopsis>
<db:type>QHelpSearchQueryWidget *</db:type>
<db:methodname>queryWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHelpSearchQueryWidget * queryWidget()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a widget to use as input widget. Depending on your search engine configuration you will get a different widget with more or less subwidgets.</db:para>
</db:section>
<db:section xml:id="reindexDocumentation">
<db:title>void QHelpSearchEngine::reindexDocumentation()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reindexDocumentation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reindexDocumentation()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Forces the search engine to reindex all documentation files.</db:para>
</db:section>
<db:section xml:id="resultWidget">
<db:title>QHelpSearchResultWidget *QHelpSearchEngine::resultWidget()</db:title>
<db:methodsynopsis>
<db:type>QHelpSearchResultWidget *</db:type>
<db:methodname>resultWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHelpSearchResultWidget * resultWidget()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a widget that can hold and display the search results.</db:para>
</db:section>
<db:section xml:id="search-1">
<db:title>void QHelpSearchEngine::search(const QString &amp;<db:emphasis>searchInput</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>search</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>searchInput</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void search(const QString &amp;searchInput)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the search process using the given search phrase <db:code role="parameter">searchInput</db:code>.</db:para>
<db:para>The phrase may consist of several words. By default, the search engine returns the list of documents that contain all the specified words. The phrase may contain any combination of the logical operators AND, OR, and NOT. The operator must be written in all capital letters, otherwise it will be considered a part of the search phrase.</db:para>
<db:para>If double quotation marks are used to group the words, the search engine will search for an exact match of the quoted phrase.</db:para>
<db:para>For more information about the text query syntax, see <db:link xlink:href="https://sqlite.org/fts5.html#full_text_query_syntax">SQLite FTS5 Extension</db:link>.</db:para>
</db:section>
<db:section xml:id="searchInput">
<db:title>QString QHelpSearchEngine::searchInput() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>searchInput</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString searchInput() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the phrase that was last searched for.</db:para>
</db:section>
<db:section xml:id="searchResultCount">
<db:title>int QHelpSearchEngine::searchResultCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>searchResultCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int searchResultCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of results the search engine found.</db:para>
</db:section>
<db:section xml:id="searchResults">
<db:title>QList&lt;QHelpSearchResult&gt; QHelpSearchEngine::searchResults(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QHelpSearchResult&gt;</db:type>
<db:methodname>searchResults</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QHelpSearchResult&gt; searchResults(int start, int end) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of search results within the range from the index specified by <db:code role="parameter">start</db:code> to the index specified by <db:code role="parameter">end</db:code>.</db:para>
</db:section>
<db:section xml:id="searchingFinished">
<db:title>void QHelpSearchEngine::searchingFinished(int <db:emphasis>searchResultCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>searchingFinished</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>searchResultCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void searchingFinished(int searchResultCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the search process is complete. The search result count is stored in <db:code role="parameter">searchResultCount</db:code>.</db:para>
</db:section>
<db:section xml:id="searchingStarted">
<db:title>void QHelpSearchEngine::searchingStarted()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>searchingStarted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void searchingStarted()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the search process is started.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QHelpSearchEngine</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qhelpsearchengine.xml">QHelpSearchEngine</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-type-documentation">
<db:title>Obsolete Member Type Documentation</db:title>
<db:section xml:id="SearchHit-typedef">
<db:title>QHelpSearchEngine::SearchHit</db:title>
<db:typedefsynopsis>
<db:typedefname>SearchHit</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qhelpsearchresult.xml">QHelpSearchResult</db:link> instead.</db:para>
<db:para>Typedef for <db:link xlink:href="qpair-proxy.xml#QPair-typedef">QPair</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qstring.xml">QString</db:link>&gt;. The values of that pair are the documentation file path and the page title.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpsearchengine.xml#hits">hits</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="hitCount">
<db:title>int QHelpSearchEngine::hitCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>hitCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int hitCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qhelpsearchengine.xml#searchResultCount">searchResultCount</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="hits">
<db:title>QList&lt;QHelpSearchEngine::SearchHit&gt; QHelpSearchEngine::hits(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QHelpSearchEngine::SearchHit&gt;</db:type>
<db:methodname>hits</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QHelpSearchEngine::SearchHit&gt; hits(int start, int end) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qhelpsearchengine.xml#searchResults">searchResults</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="hitsCount">
<db:title>int QHelpSearchEngine::hitsCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>hitsCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int hitsCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qhelpsearchengine.xml#searchResultCount">searchResultCount</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="query">
<db:title>QList&lt;QHelpSearchQuery&gt; QHelpSearchEngine::query() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QHelpSearchQuery&gt;</db:type>
<db:methodname>query</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QHelpSearchQuery&gt; query() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qhelpsearchengine.xml#searchInput">searchInput</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="search">
<db:title>void QHelpSearchEngine::search(const QList&lt;QHelpSearchQuery&gt; &amp;<db:emphasis>queryList</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>search</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QHelpSearchQuery&gt; &amp;</db:type>
<db:parameter>queryList</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void search(const QList&lt;QHelpSearchQuery&gt; &amp;queryList)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use search(const <db:link xlink:href="qstring.xml">QString</db:link> &amp;<db:link xlink:href="qhelpsearchengine.xml#searchInput">searchInput</db:link>) instead.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
