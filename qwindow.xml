<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QWindow Class</db:title>
<db:productname>QtGui</db:productname>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwindow.xml">QWindow</db:link> class represents a window in the underlying windowing system.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWindow</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qsurface.xml" xlink:role="class">QSurface</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A window that is supplied a parent becomes a native child window of their parent window.</db:para>
<db:para>An application will typically use QWidget or QQuickView for its UI, and not <db:link xlink:href="qwindow.xml">QWindow</db:link> directly. Still, it is possible to render directly to a <db:link xlink:href="qwindow.xml">QWindow</db:link> with <db:link xlink:href="qbackingstore.xml">QBackingStore</db:link> or <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>, when wanting to keep dependencies to a minimum or when wanting to use OpenGL directly. The <db:link xlink:href="">Raster Window</db:link> and <db:link xlink:href="">OpenGL Window</db:link> examples are useful reference examples for how to render to a <db:link xlink:href="qwindow.xml">QWindow</db:link> using either approach.</db:para>
<db:section xml:id="resource-management">
<db:title>Resource management</db:title>
<db:para>Windows can potentially use a lot of memory. A usual measurement is width times height times color depth. A window might also include multiple buffers to support double and triple buffering, as well as depth and stencil buffers. To release a window's memory resources, call the <db:link xlink:href="qwindow.xml#destroy">destroy</db:link>() function.</db:para>
</db:section>
<db:section xml:id="content-orientation">
<db:title>Content orientation</db:title>
<db:para><db:link xlink:href="qwindow.xml">QWindow</db:link> has reportContentOrientationChange() that can be used to specify the layout of the window contents in relation to the screen. The content orientation is simply a hint to the windowing system about which orientation the window contents are in. It's useful when you wish to keep the same window size, but rotate the contents instead, especially when doing rotation animations between different orientations. The windowing system might use this value to determine the layout of system popups or dialogs.</db:para>
</db:section>
<db:section xml:id="visibility-and-windowing-system-exposure">
<db:title>Visibility and Windowing system exposure.</db:title>
<db:para>By default, the window is not visible, and you must call setVisible(true), or <db:link xlink:href="qwindow.xml#show">show</db:link>() or similar to make it visible. To make a window hidden again, call setVisible(false) or <db:link xlink:href="qwindow.xml#hide">hide</db:link>(). The visible property describes the state the application wants the window to be in. Depending on the underlying system, a visible window might still not be shown on the screen. It could, for instance, be covered by other opaque windows or moved outside the physical area of the screen. On windowing systems that have exposure notifications, the <db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>() accessor describes whether the window should be treated as directly visible on screen. The <db:link xlink:href="qwindow.xml#exposeEvent">exposeEvent</db:link>() function is called whenever the windows exposure in the windowing system changes. On windowing systems that do not make this information visible to the application, <db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>() will simply return the same value as isVisible().</db:para>
</db:section>
<db:section xml:id="rendering">
<db:title>Rendering</db:title>
<db:para>There are two Qt APIs that can be used to render content into a window, <db:link xlink:href="qbackingstore.xml">QBackingStore</db:link> for rendering with a <db:link xlink:href="qpainter.xml">QPainter</db:link> and flushing the contents to a window with type <db:link xlink:href="qsurface.xml#SurfaceType-enum">QSurface::RasterSurface</db:link>, and <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> for rendering with OpenGL to a window with type <db:link xlink:href="qsurface.xml#SurfaceType-enum">QSurface::OpenGLSurface</db:link>.</db:para>
<db:para>The application can start rendering as soon as <db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>() returns true, and can keep rendering until it <db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>() returns false. To find out when <db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>() changes, reimplement <db:link xlink:href="qwindow.xml#exposeEvent">exposeEvent</db:link>(). The window will always get a resize event before the first expose event.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AncestorMode-enum">
<db:title>enum QWindow::AncestorMode</db:title>
<db:para>This enum is used to control whether or not transient parents should be considered ancestors.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwindow.xml">QWindow</db:link></db:emphasis>::ExcludeTransients</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Transient parents are not considered ancestors.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwindow.xml">QWindow</db:link></db:emphasis>::IncludeTransients</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Transient parents are considered ancestors.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWindow">
<db:title>[explicit] QWindow::QWindow(QScreen *<db:emphasis>targetScreen</db:emphasis> = 0)</db:title>
<db:para>Creates a window as a top level on the <db:code role="parameter">targetScreen</db:code>.</db:para>
<db:para>The window is not shown until setVisible(true), <db:link xlink:href="qwindow.xml#show">show</db:link>(), or similar is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setScreen">setScreen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QWindow-1">
<db:title>[explicit] QWindow::QWindow(QWindow *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Creates a window as a child of the given <db:code role="parameter">parent</db:code> window.</db:para>
<db:para>The window will be embedded inside the parent window, its coordinates relative to the parent.</db:para>
<db:para>The screen is inherited from the parent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setParent">setParent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QWindow">
<db:title>[virtual noexcept] QWindow::~QWindow()</db:title>
<db:para>Destroys the window.</db:para>
</db:section>
<db:section xml:id="baseSize">
<db:title>QSize QWindow::baseSize() const</db:title>
<db:para>Returns the base size of the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setBaseSize">setBaseSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="close">
<db:title>bool QWindow::close()</db:title>
<db:para>Close the window.</db:para>
<db:para>This closes the window, effectively calling <db:link xlink:href="qwindow.xml#destroy">destroy</db:link>(), and potentially quitting the application. Returns true on success, false if it has a parent window (in which case the top level window should be closed instead).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#destroy">destroy</db:link>()</db:member>
<db:member><db:link xlink:href="">QGuiApplication::quitOnLastWindowClosed()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="create">
<db:title>void QWindow::create()</db:title>
<db:para>Allocates the platform resources associated with the window.</db:para>
<db:para>It is at this point that the surface format set using <db:link xlink:href="qwindow.xml#setFormat">setFormat</db:link>() gets resolved into an actual native surface. However, the window remains hidden until setVisible() is called.</db:para>
<db:para>Note that it is not usually necessary to call this function directly, as it will be implicitly called by <db:link xlink:href="qwindow.xml#show">show</db:link>(), setVisible(), and other functions that require access to the platform resources.</db:para>
<db:para>Call <db:link xlink:href="qwindow.xml#destroy">destroy</db:link>() to free the platform resources if necessary.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#destroy">destroy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursor">
<db:title>QCursor QWindow::cursor() const</db:title>
<db:para>the cursor shape for this window</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setCursor">setCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#unsetCursor">unsetCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="destroy">
<db:title>void QWindow::destroy()</db:title>
<db:para>Releases the native platform resources associated with this window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="devicePixelRatio">
<db:title>qreal QWindow::devicePixelRatio() const</db:title>
<db:para>Returns the ratio between physical pixels and device-independent pixels for the window. This value is dependent on the screen the window is on, and may change when the window is moved.</db:para>
<db:para>Common values are 1.0 on normal displays and 2.0 on Apple &quot;retina&quot; displays.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#devicePixelRatio">QScreen::devicePixelRatio</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#devicePixelRatio">QGuiApplication::devicePixelRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QWindow::event(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
<db:para>Override this to handle any event (<db:code role="parameter">ev</db:code>) sent to the window. Return <db:code>true</db:code> if the event was recognized and processed.</db:para>
<db:para>Remember to call the base class version if you wish for mouse events, key events, resize events, etc to be dispatched as usual.</db:para>
</db:section>
<db:section xml:id="exposeEvent">
<db:title>[virtual protected] void QWindow::exposeEvent(QExposeEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>The expose event (<db:code role="parameter">ev</db:code>) is sent by the window system whenever the window's exposure on screen changes.</db:para>
<db:para>The application can start rendering into the window with <db:link xlink:href="qbackingstore.xml">QBackingStore</db:link> and <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> as soon as it gets an exposeEvent() such that <db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>() is true.</db:para>
<db:para>If the window is moved off screen, is made totally obscured by another window, iconified or similar, this function might be called and the value of <db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>() might change to false. When this happens, an application should stop its rendering as it is no longer visible to the user.</db:para>
<db:para>A resize event will always be sent before the expose event the first time a window is shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filePath">
<db:title>QString QWindow::filePath() const</db:title>
<db:para>the file name this window is representing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setFilePath">setFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[virtual protected] void QWindow::focusInEvent(QFocusEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle focus in events (<db:code role="parameter">ev</db:code>).</db:para>
<db:para>Focus in events are sent when the window receives keyboard focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#focusOutEvent">focusOutEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusObject">
<db:title>[virtual] QObject *QWindow::focusObject() const</db:title>
<db:para>Returns the <db:link xlink:href="qobject.xml">QObject</db:link> that will be the final receiver of events tied focus, such as key events.</db:para>
</db:section>
<db:section xml:id="focusObjectChanged">
<db:title>void QWindow::focusObjectChanged(QObject *<db:emphasis>focusObject</db:emphasis>)</db:title>
<db:para>This signal is emitted when final receiver of events tied to focus is changed to <db:code role="parameter">focusObject</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#focusObject">focusObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[virtual protected] void QWindow::focusOutEvent(QFocusEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle focus out events (<db:code role="parameter">ev</db:code>).</db:para>
<db:para>Focus out events are sent when the window loses keyboard focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#focusInEvent">focusInEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>[override virtual] QSurfaceFormat QWindow::format() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qsurface.xml#format" role="function">QSurface::format() const</db:link>.</db:para>
<db:para>Returns the actual format of this window.</db:para>
<db:para>After the window has been created, this function will return the actual surface format of the window. It might differ from the requested format if the requested format could not be fulfilled by the platform.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setFormat">setFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#requestedFormat">requestedFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameGeometry">
<db:title>QRect QWindow::frameGeometry() const</db:title>
<db:para>Returns the geometry of the window, including its window frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#geometry">geometry</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#frameMargins">frameMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameMargins">
<db:title>QMargins QWindow::frameMargins() const</db:title>
<db:para>Returns the window frame margins surrounding the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#geometry">geometry</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#frameGeometry">frameGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="framePosition">
<db:title>QPoint QWindow::framePosition() const</db:title>
<db:para>Returns the top left position of the window, including its window frame.</db:para>
<db:para>This returns the same value as <db:link xlink:href="qwindow.xml#frameGeometry">frameGeometry</db:link>().topLeft().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setFramePosition">setFramePosition</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#geometry">geometry</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#frameGeometry">frameGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="geometry">
<db:title>QRect QWindow::geometry() const</db:title>
<db:para>Returns the geometry of the window, excluding its window frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setGeometry">setGeometry</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#frameMargins">frameMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#frameGeometry">frameGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hide">
<db:title>void QWindow::hide()</db:title>
<db:para>Hides the window.</db:para>
<db:para>Equivalent to calling setVisible(false).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#show">show</db:link>()</db:member>
<db:member><db:link xlink:href="">setVisible()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[virtual protected] void QWindow::hideEvent(QHideEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle hide events (<db:code role="parameter">ev</db:code>).</db:para>
<db:para>The function is called when the window has requested being hidden in the windowing system.</db:para>
</db:section>
<db:section xml:id="icon">
<db:title>QIcon QWindow::icon() const</db:title>
<db:para>Sets the window's icon in the windowing system</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setIcon">setIcon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QWindow::isActive() const</db:title>
<db:para>Returns true if the window should appear active from a style perspective.</db:para>
<db:para>This is the case for the window that has input focus as well as windows that are in the same parent / transient parent chain as the focus window.</db:para>
<db:para>To get the window that currently has focus, use <db:link xlink:href="qguiapplication.xml#focusWindow">QGuiApplication::focusWindow</db:link>().</db:para>
</db:section>
<db:section xml:id="isAncestorOf">
<db:title>bool QWindow::isAncestorOf(const QWindow *<db:emphasis>child</db:emphasis>, QWindow::AncestorMode <db:emphasis>mode</db:emphasis> = IncludeTransients) const</db:title>
<db:para>Returns true if the window is an ancestor of the given <db:code role="parameter">child</db:code>. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qwindow.xml#AncestorMode-enum">IncludeTransients</db:link>, then transient parents are also considered ancestors.</db:para>
</db:section>
<db:section xml:id="isExposed">
<db:title>bool QWindow::isExposed() const</db:title>
<db:para>Returns if this window is exposed in the windowing system.</db:para>
<db:para>When the window is not exposed, it is shown by the application but it is still not showing in the windowing system, so the application should minimize rendering and other graphical activities.</db:para>
<db:para>An <db:link xlink:href="qwindow.xml#exposeEvent">exposeEvent</db:link>() is sent every time this value changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#exposeEvent">exposeEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isModal">
<db:title>bool QWindow::isModal() const</db:title>
<db:para>Returns whether the window is modal.</db:para>
<db:para>A modal window prevents other windows from getting any input.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QWindow::modality</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isTopLevel">
<db:title>bool QWindow::isTopLevel() const</db:title>
<db:para>Returns whether the window is top level, i.e. has no parent window.</db:para>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[virtual protected] void QWindow::keyPressEvent(QKeyEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle key press events (<db:code role="parameter">ev</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#keyReleaseEvent">keyReleaseEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[virtual protected] void QWindow::keyReleaseEvent(QKeyEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle key release events (<db:code role="parameter">ev</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#keyPressEvent">keyPressEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lower">
<db:title>void QWindow::lower()</db:title>
<db:para>Lower the window in the windowing system.</db:para>
<db:para>Requests that the window be lowered to appear below other windows.</db:para>
</db:section>
<db:section xml:id="mapFromGlobal">
<db:title>QPoint QWindow::mapFromGlobal(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Translates the global screen coordinate <db:code role="parameter">pos</db:code> to window coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#mapToGlobal">mapToGlobal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToGlobal">
<db:title>QPoint QWindow::mapToGlobal(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Translates the window coordinate <db:code role="parameter">pos</db:code> to global screen coordinates. For example, <db:code>mapToGlobal(QPoint(0,0))</db:code> would give the global coordinates of the top-left pixel of the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#mapFromGlobal">mapFromGlobal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumSize">
<db:title>QSize QWindow::maximumSize() const</db:title>
<db:para>Returns the maximum size of the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSize">
<db:title>QSize QWindow::minimumSize() const</db:title>
<db:para>Returns the minimum size of the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modalityChanged">
<db:title>void QWindow::modalityChanged(Qt::WindowModality <db:emphasis>modality</db:emphasis>)</db:title>
<db:para>This signal is emitted when the Qwindow::modality property changes to <db:code role="parameter">modality</db:code>.</db:para>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[virtual protected] void QWindow::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle mouse double click events (<db:code role="parameter">ev</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#mousePressEvent">mousePressEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qstylehints.xml#mouseDoubleClickInterval">QStyleHints::mouseDoubleClickInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[virtual protected] void QWindow::mouseMoveEvent(QMouseEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle mouse move events (<db:code role="parameter">ev</db:code>).</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[virtual protected] void QWindow::mousePressEvent(QMouseEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle mouse press events (<db:code role="parameter">ev</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#mouseReleaseEvent">mouseReleaseEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[virtual protected] void QWindow::mouseReleaseEvent(QMouseEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle mouse release events (<db:code role="parameter">ev</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#mousePressEvent">mousePressEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveEvent">
<db:title>[virtual protected] void QWindow::moveEvent(QMoveEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle mouse events (<db:code role="parameter">ev</db:code>).</db:para>
</db:section>
<db:section xml:id="nativeEvent">
<db:title>[virtual protected] bool QWindow::nativeEvent(const QByteArray &amp;<db:emphasis>eventType</db:emphasis>, void *<db:emphasis>message</db:emphasis>, long *<db:emphasis>result</db:emphasis>)</db:title>
<db:para>Override this to handle platform dependent events. Will be given <db:code role="parameter">eventType</db:code>, <db:code role="parameter">message</db:code> and <db:code role="parameter">result</db:code>.</db:para>
<db:para>This might make your application non-portable.</db:para>
<db:para>Should return true only if the event was handled.</db:para>
</db:section>
<db:section xml:id="parent">
<db:title>QWindow *QWindow::parent() const</db:title>
<db:para>Returns the parent window, if any.</db:para>
<db:para>A window without a parent is known as a top level window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setParent">setParent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="position">
<db:title>QPoint QWindow::position() const</db:title>
<db:para>Returns the position of the window on the desktop excluding any window frame</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setPosition">setPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="raise">
<db:title>void QWindow::raise()</db:title>
<db:para>Raise the window in the windowing system.</db:para>
<db:para>Requests that the window be raised to appear above other windows.</db:para>
</db:section>
<db:section xml:id="requestActivate">
<db:title>void QWindow::requestActivate()</db:title>
<db:para>Requests the window to be activated, i.e. receive keyboard focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#isActive">isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#focusWindow">QGuiApplication::focusWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestedFormat">
<db:title>QSurfaceFormat QWindow::requestedFormat() const</db:title>
<db:para>Returns the requested surfaceformat of this window.</db:para>
<db:para>If the requested format was not supported by the platform implementation, the requestedFormat will differ from the actual window format.</db:para>
<db:para>This is the value set with <db:link xlink:href="qwindow.xml#setFormat">setFormat</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setFormat">setFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resize">
<db:title>void QWindow::resize(const QSize &amp;<db:emphasis>newSize</db:emphasis>)</db:title>
<db:para>set the size of the window, excluding any window frame, to <db:code role="parameter">newSize</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#geometry">geometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resize-1">
<db:title>void QWindow::resize(int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>)</db:title>
<db:para>set the size of the window, excluding any window frame, to a <db:link xlink:href="qsize.xml">QSize</db:link> constructed from width <db:code role="parameter">w</db:code> and height <db:code role="parameter">h</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#geometry">geometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[virtual protected] void QWindow::resizeEvent(QResizeEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle resize events (<db:code role="parameter">ev</db:code>).</db:para>
<db:para>The resize event is called whenever the window is resized in the windowing system, either directly through the windowing system acknowledging a <db:link xlink:href="qwindow.xml#setGeometry">setGeometry</db:link>() or <db:link xlink:href="qwindow.xml#resize">resize</db:link>() request, or indirectly through the user resizing the window manually.</db:para>
</db:section>
<db:section xml:id="screen">
<db:title>QScreen *QWindow::screen() const</db:title>
<db:para>Returns the screen on which the window is shown.</db:para>
<db:para>The value returned will not change when the window is moved between virtual screens (as returned by <db:link xlink:href="qscreen.xml#virtualSiblings">QScreen::virtualSiblings</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setScreen">setScreen</db:link>()</db:member>
<db:member><db:link xlink:href="qscreen.xml#virtualSiblings">QScreen::virtualSiblings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="screenChanged">
<db:title>void QWindow::screenChanged(QScreen *<db:emphasis>screen</db:emphasis>)</db:title>
<db:para>This signal is emitted when a window's <db:code role="parameter">screen</db:code> changes, either by being set explicitly with <db:link xlink:href="qwindow.xml#setScreen">setScreen</db:link>(), or automatically when the window's screen is removed.</db:para>
</db:section>
<db:section xml:id="setBaseSize">
<db:title>void QWindow::setBaseSize(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the base <db:code role="parameter">size</db:code> of the window.</db:para>
<db:para>The base size is used to calculate a proper window size if the window defines <db:link xlink:href="qwindow.xml#sizeIncrement">sizeIncrement</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setSizeIncrement">setSizeIncrement</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#baseSize">baseSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCursor">
<db:title>void QWindow::setCursor(const QCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:para>set the cursor shape for this window</db:para>
<db:para>The mouse <db:code role="parameter">cursor</db:code> will assume this shape when it is over this window, unless an override cursor is set. See the <db:link xlink:href="qt.xml#CursorShape-enum">list of predefined cursor objects</db:link> for a range of useful shapes.</db:para>
<db:para>By default, the cursor has the <db:link xlink:href="qt.xml#CursorShape-enum">Qt::ArrowCursor</db:link> shape.</db:para>
<db:para>Some underlying window implementations will reset the cursor if it leaves a window even if the mouse is grabbed. If you want to have a cursor set for all windows, even when outside the window, consider <db:link xlink:href="qguiapplication.xml#setOverrideCursor">QGuiApplication::setOverrideCursor</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#cursor">cursor</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#setOverrideCursor">QGuiApplication::setOverrideCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilePath">
<db:title>void QWindow::setFilePath(const QString &amp;<db:emphasis>filePath</db:emphasis>)</db:title>
<db:para>set the file name this window is representing.</db:para>
<db:para>The windowing system might use <db:code role="parameter">filePath</db:code> to display the path of the document this window is representing in the tile bar.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#filePath">filePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>void QWindow::setFormat(const QSurfaceFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Sets the window's surface <db:code role="parameter">format</db:code>.</db:para>
<db:para>The format determines properties such as color depth, alpha, depth and stencil buffer size, etc. For example, to give a window a transparent background (provided that the window system supports compositing, and provided that other content in the window does not make it opaque again):</db:para>
<db:programlisting language="cpp">QSurfaceFormat format;
format.setAlphaBufferSize(8);
window.setFormat(format);
</db:programlisting>
<db:para>The surface format will be resolved in the <db:link xlink:href="qwindow.xml#create">create</db:link>() function. Calling this function after <db:link xlink:href="qwindow.xml#create">create</db:link>() has been called will not re-resolve the surface format of the native surface.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#format">format</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#destroy">destroy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFramePosition">
<db:title>void QWindow::setFramePosition(const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Sets the upper left position of the window (<db:code role="parameter">point</db:code>) including its window frame.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#framePosition">framePosition</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setGeometry">setGeometry</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#frameGeometry">frameGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry">
<db:title>void QWindow::setGeometry(const QRect &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>Sets the geometry of the window, excluding its window frame, to <db:code role="parameter">rect</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#geometry">geometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry-1">
<db:title>void QWindow::setGeometry(int <db:emphasis>posx</db:emphasis>, int <db:emphasis>posy</db:emphasis>, int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>)</db:title>
<db:para>Sets the geometry of the window, excluding its window frame, to a rectangle constructed from <db:code role="parameter">posx</db:code>, <db:code role="parameter">posy</db:code>, <db:code role="parameter">w</db:code> and <db:code role="parameter">h</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#geometry">geometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIcon">
<db:title>void QWindow::setIcon(const QIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:para>Sets the window's <db:code role="parameter">icon</db:code> in the windowing system</db:para>
<db:para>The window icon might be used by the windowing system for example to decorate the window, and/or in the task switcher.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#icon">icon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setKeyboardGrabEnabled">
<db:title>bool QWindow::setKeyboardGrabEnabled(bool <db:emphasis>grab</db:emphasis>)</db:title>
<db:para>Sets whether keyboard grab should be enabled or not (<db:code role="parameter">grab</db:code>).</db:para>
<db:para>If the return value is true, the window receives all key events until setKeyboardGrabEnabled(false) is called; other windows get no key events at all. Mouse events are not affected. Use <db:link xlink:href="qwindow.xml#setMouseGrabEnabled">setMouseGrabEnabled</db:link>() if you want to grab that.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setMouseGrabEnabled">setMouseGrabEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumSize">
<db:title>void QWindow::setMaximumSize(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the maximum size of the window.</db:para>
<db:para>This is a hint to the window manager to prevent resizing above the specified <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#maximumSize">maximumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMinimumSize">
<db:title>void QWindow::setMinimumSize(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the minimum size of the window.</db:para>
<db:para>This is a hint to the window manager to prevent resizing below the specified <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#minimumSize">minimumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMouseGrabEnabled">
<db:title>bool QWindow::setMouseGrabEnabled(bool <db:emphasis>grab</db:emphasis>)</db:title>
<db:para>Sets whether mouse grab should be enabled or not (<db:code role="parameter">grab</db:code>).</db:para>
<db:para>If the return value is true, the window receives all mouse events until setMouseGrabEnabled(false) is called; other windows get no mouse events at all. Keyboard events are not affected. Use <db:link xlink:href="qwindow.xml#setKeyboardGrabEnabled">setKeyboardGrabEnabled</db:link>() if you want to grab that.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setKeyboardGrabEnabled">setKeyboardGrabEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOpacity">
<db:title>void QWindow::setOpacity(qreal <db:emphasis>level</db:emphasis>)</db:title>
<db:para>Sets the window's opacity in the windowing system to <db:code role="parameter">level</db:code>.</db:para>
<db:para>If the windowing system supports window opacity, this can be used to fade the window in and out, or to make it semitransparent.</db:para>
<db:para>A value of 1.0 or above is treated as fully opaque, whereas a value of 0.0 or below is treated as fully transparent. Values inbetween represent varying levels of translucency between the two extremes.</db:para>
</db:section>
<db:section xml:id="setParent">
<db:title>void QWindow::setParent(QWindow *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">parent</db:code> Window. This will lead to the windowing system managing the clip of the window, so it will be clipped to the <db:code role="parameter">parent</db:code> window.</db:para>
<db:para>Setting <db:code role="parameter">parent</db:code> to be 0 will make the window become a top level window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#parent">parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPosition">
<db:title>void QWindow::setPosition(const QPoint &amp;<db:emphasis>pt</db:emphasis>)</db:title>
<db:para>set the position of the window on the desktop to <db:code role="parameter">pt</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#position">position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPosition-1">
<db:title>void QWindow::setPosition(int <db:emphasis>posx</db:emphasis>, int <db:emphasis>posy</db:emphasis>)</db:title>
<db:para>set the position of the window on the desktop to <db:code role="parameter">posx</db:code>, <db:code role="parameter">posy</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#position">position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScreen">
<db:title>void QWindow::setScreen(QScreen *<db:emphasis>newScreen</db:emphasis>)</db:title>
<db:para>Sets the screen on which the window should be shown.</db:para>
<db:para>If the window has been created, it will be recreated on the <db:code role="parameter">newScreen</db:code>.</db:para>
<db:para>Note that if the screen is part of a virtual desktop of multiple screens, the window can appear on any of the screens returned by <db:link xlink:href="qscreen.xml#virtualSiblings">QScreen::virtualSiblings</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#screen">screen</db:link>()</db:member>
<db:member><db:link xlink:href="qscreen.xml#virtualSiblings">QScreen::virtualSiblings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSizeIncrement">
<db:title>void QWindow::setSizeIncrement(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the size increment (<db:code role="parameter">size</db:code>) of the window.</db:para>
<db:para>When the user resizes the window, the size will move in steps of <db:link xlink:href="qwindow.xml#sizeIncrement">sizeIncrement</db:link>().width() pixels horizontally and <db:link xlink:href="qwindow.xml#sizeIncrement">sizeIncrement</db:link>().height() pixels vertically, with <db:link xlink:href="qwindow.xml#baseSize">baseSize</db:link>() as the basis.</db:para>
<db:para>By default, this property contains a size with zero width and height.</db:para>
<db:para>The windowing system might not support size increments.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#sizeIncrement">sizeIncrement</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setBaseSize">setBaseSize</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSurfaceType">
<db:title>void QWindow::setSurfaceType(QSurface::SurfaceType <db:emphasis>surfaceType</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">surfaceType</db:code> of the window.</db:para>
<db:para>Specifies whether the window is meant for raster rendering with <db:link xlink:href="qbackingstore.xml">QBackingStore</db:link>, or OpenGL rendering with <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>.</db:para>
<db:para>The <db:link xlink:href="qwindow.xml#surfaceType">surfaceType</db:link> will be used when the native surface is created in the <db:link xlink:href="qwindow.xml#create">create</db:link>() function. Calling this function after the native surface has been created requires calling <db:link xlink:href="qwindow.xml#destroy">destroy</db:link>() and <db:link xlink:href="qwindow.xml#create">create</db:link>() to release the old native surface and create a new one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#surfaceType">surfaceType</db:link>()</db:member>
<db:member><db:link xlink:href="qbackingstore.xml">QBackingStore</db:link></db:member>
<db:member><db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link></db:member>
<db:member><db:link xlink:href="qwindow.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#destroy">destroy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransientParent">
<db:title>void QWindow::setTransientParent(QWindow *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Sets the transient <db:code role="parameter">parent</db:code></db:para>
<db:para>This is a hint to the window manager that this window is a dialog or pop-up on behalf of the given window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#transientParent">transientParent</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#parent">parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWindowState">
<db:title>void QWindow::setWindowState(Qt::WindowState <db:emphasis>state</db:emphasis>)</db:title>
<db:para>set the screen-occupation state of the window</db:para>
<db:para>The window <db:code role="parameter">state</db:code> represents whether the window appears in the windowing system as maximized, minimized, fullscreen, or normal.</db:para>
<db:para>The enum value <db:link xlink:href="qt.xml#WindowState-enum">Qt::WindowActive</db:link> is not an accepted parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#windowState">windowState</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showNormal">showNormal</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showFullScreen">showFullScreen</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showMinimized">showMinimized</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showMaximized">showMaximized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="show">
<db:title>void QWindow::show()</db:title>
<db:para>Shows the window.</db:para>
<db:para>This equivalent to calling <db:link xlink:href="qwindow.xml#showFullScreen">showFullScreen</db:link>() or <db:link xlink:href="qwindow.xml#showNormal">showNormal</db:link>(), depending on whether the platform defaults to windows being fullscreen or not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#showFullScreen">showFullScreen</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showNormal">showNormal</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#hide">hide</db:link>()</db:member>
<db:member><db:link xlink:href="qstylehints.xml#showIsFullScreen">QStyleHints::showIsFullScreen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[virtual protected] void QWindow::showEvent(QShowEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle show events (<db:code role="parameter">ev</db:code>).</db:para>
<db:para>The function is called when the window has requested becoming visible.</db:para>
<db:para>If the window is successfully shown by the windowing system, this will be followed by a resize and an expose event.</db:para>
</db:section>
<db:section xml:id="showFullScreen">
<db:title>void QWindow::showFullScreen()</db:title>
<db:para>Shows the window as fullscreen.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qwindow.xml#setWindowState">setWindowState</db:link>(<db:link xlink:href="qt.xml#WindowState-enum">Qt::WindowFullScreen</db:link>) and then setVisible(true).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setWindowState">setWindowState</db:link>()</db:member>
<db:member><db:link xlink:href="">setVisible()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showMaximized">
<db:title>void QWindow::showMaximized()</db:title>
<db:para>Shows the window as maximized.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qwindow.xml#setWindowState">setWindowState</db:link>(<db:link xlink:href="qt.xml#WindowState-enum">Qt::WindowMaximized</db:link>) and then setVisible(true).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setWindowState">setWindowState</db:link>()</db:member>
<db:member><db:link xlink:href="">setVisible()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showMinimized">
<db:title>void QWindow::showMinimized()</db:title>
<db:para>Shows the window as minimized.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qwindow.xml#setWindowState">setWindowState</db:link>(<db:link xlink:href="qt.xml#WindowState-enum">Qt::WindowMinimized</db:link>) and then setVisible(true).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setWindowState">setWindowState</db:link>()</db:member>
<db:member><db:link xlink:href="">setVisible()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showNormal">
<db:title>void QWindow::showNormal()</db:title>
<db:para>Shows the window as normal, i.e. neither maximized, minimized, nor fullscreen.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qwindow.xml#setWindowState">setWindowState</db:link>(<db:link xlink:href="qt.xml#WindowState-enum">Qt::WindowNoState</db:link>) and then setVisible(true).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setWindowState">setWindowState</db:link>()</db:member>
<db:member><db:link xlink:href="">setVisible()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>[override virtual] QSize QWindow::size() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qsurface.xml#size" role="function">QSurface::size() const</db:link>.</db:para>
<db:para>Returns the size of the window excluding any window frame</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeIncrement">
<db:title>QSize QWindow::sizeIncrement() const</db:title>
<db:para>Returns the size increment of the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setSizeIncrement">setSizeIncrement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="surfaceType">
<db:title>[override virtual] QSurface::SurfaceType QWindow::surfaceType() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qsurface.xml#surfaceType" role="function">QSurface::surfaceType() const</db:link>.</db:para>
<db:para>Returns the surface type of the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setSurfaceType">setSurfaceType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabletEvent">
<db:title>[virtual protected] void QWindow::tabletEvent(QTabletEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle tablet press, move, and release events (<db:code role="parameter">ev</db:code>).</db:para>
<db:para>Proximity enter and leave events are not sent to windows, they are delivered to the application instance.</db:para>
</db:section>
<db:section xml:id="touchEvent">
<db:title>[virtual protected] void QWindow::touchEvent(QTouchEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle touch events (<db:code role="parameter">ev</db:code>).</db:para>
</db:section>
<db:section xml:id="transientParent">
<db:title>QWindow *QWindow::transientParent() const</db:title>
<db:para>Returns the transient parent of the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setTransientParent">setTransientParent</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#parent">parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>Qt::WindowType QWindow::type() const</db:title>
<db:para>Returns the type of the window.</db:para>
<db:para>This returns the part of the window flags that represents whether the window is a dialog, tooltip, popup, regular window, etc.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">flags()</db:link></db:member>
<db:member><db:link xlink:href="">setFlags()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unsetCursor">
<db:title>void QWindow::unsetCursor()</db:title>
<db:para>Restores the default arrow cursor for this window.</db:para>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[virtual protected] void QWindow::wheelEvent(QWheelEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Override this to handle mouse wheel or other wheel events (<db:code role="parameter">ev</db:code>).</db:para>
</db:section>
<db:section xml:id="winId">
<db:title>WId QWindow::winId() const</db:title>
<db:para>Returns the window's platform id.</db:para>
<db:para>For platforms where this id might be useful, the value returned will uniquely represent the window inside the corresponding screen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#screen">screen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowState">
<db:title>Qt::WindowState QWindow::windowState() const</db:title>
<db:para>the screen-occupation state of the window</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setWindowState">setWindowState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowStateChanged">
<db:title>void QWindow::windowStateChanged(Qt::WindowState <db:emphasis>windowState</db:emphasis>)</db:title>
<db:para>This signal is emitted when the <db:code role="parameter">windowState</db:code> changes, either by being set explicitly with <db:link xlink:href="qwindow.xml#setWindowState">setWindowState</db:link>(), or automatically when the user clicks one of the titlebar buttons or by other means.</db:para>
</db:section>
</db:section>
</db:article>
