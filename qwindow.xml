<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWindow Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwindow.xml">QWindow</db:link> class represents a window in the underlying windowing system.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWindow</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qsurface.xml" xlink:role="class">QSurface</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpaintdevicewindow.xml" xlink:role="class">QPaintDeviceWindow</db:link>, <db:link xlink:href="qquickwindow.xml" xlink:role="class">QQuickWindow</db:link>, and <db:link xlink:href="qvulkanwindow.xml" xlink:role="class">QVulkanWindow</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A window that is supplied a parent becomes a native child window of their parent window.</db:para>
<db:para>An application will typically use <db:link xlink:href="qwidget.xml">QWidget</db:link> or <db:link xlink:href="qquickview.xml">QQuickView</db:link> for its UI, and not <db:link xlink:href="qwindow.xml">QWindow</db:link> directly. Still, it is possible to render directly to a <db:link xlink:href="qwindow.xml">QWindow</db:link> with <db:link xlink:href="qbackingstore.xml">QBackingStore</db:link> or <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>, when wanting to keep dependencies to a minimum or when wanting to use OpenGL directly. The <db:link xlink:href="qtgui-rasterwindow-example.xml">Raster Window Example</db:link> and <db:link xlink:href="qtopengl-openglwindow-example.xml">OpenGL Window Example</db:link> are useful reference examples for how to render to a <db:link xlink:href="qwindow.xml">QWindow</db:link> using either approach.</db:para>
<db:section xml:id="resource-management">
<db:title>Resource Management</db:title>
<db:para>Windows can potentially use a lot of memory. A usual measurement is width times height times color depth. A window might also include multiple buffers to support double and triple buffering, as well as depth and stencil buffers. To release a window's memory resources, call the <db:link xlink:href="qwindow.xml#destroy">destroy</db:link>() function.</db:para>
</db:section>
<db:section xml:id="content-orientation">
<db:title>Content Orientation</db:title>
<db:para><db:link xlink:href="qwindow.xml">QWindow</db:link> has <db:link xlink:href="qwindow.xml#contentOrientation-prop">reportContentOrientationChange</db:link>() that can be used to specify the layout of the window contents in relation to the screen. The content orientation is simply a hint to the windowing system about which orientation the window contents are in. It's useful when you wish to keep the same window size, but rotate the contents instead, especially when doing rotation animations between different orientations. The windowing system might use this value to determine the layout of system popups or dialogs.</db:para>
</db:section>
<db:section xml:id="visibility-and-windowing-system-exposure">
<db:title>Visibility and Windowing System Exposure</db:title>
<db:para>By default, the window is not visible, and you must call <db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>(true), or <db:link xlink:href="qwindow.xml#show">show</db:link>() or similar to make it visible. To make a window hidden again, call <db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>(false) or <db:link xlink:href="qwindow.xml#hide">hide</db:link>(). The visible property describes the state the application wants the window to be in. Depending on the underlying system, a visible window might still not be shown on the screen. It could, for instance, be covered by other opaque windows or moved outside the physical area of the screen. On windowing systems that have exposure notifications, the <db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>() accessor describes whether the window should be treated as directly visible on screen. The <db:link xlink:href="qwindow.xml#exposeEvent">exposeEvent</db:link>() function is called whenever an area of the window is invalidated, for example due to the exposure in the windowing system changing. On windowing systems that do not make this information visible to the application, <db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>() will simply return the same value as <db:link xlink:href="qwindow.xml#visible-prop">isVisible</db:link>().</db:para>
<db:para><db:link xlink:href="qwindow.xml#Visibility-enum">QWindow::Visibility</db:link> queried through <db:link xlink:href="qwindow.xml#visibility-prop">visibility</db:link>() is a convenience API combining the functions of visible() and <db:link xlink:href="qwindow.xml#windowStates">windowStates</db:link>().</db:para>
</db:section>
<db:section xml:id="rendering">
<db:title>Rendering</db:title>
<db:para>There are two Qt APIs that can be used to render content into a window, <db:link xlink:href="qbackingstore.xml">QBackingStore</db:link> for rendering with a <db:link xlink:href="qpainter.xml">QPainter</db:link> and flushing the contents to a window with type <db:link xlink:href="qsurface.xml#SurfaceType-enum">QSurface::RasterSurface</db:link>, and <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> for rendering with OpenGL to a window with type <db:link xlink:href="qsurface.xml#SurfaceType-enum">QSurface::OpenGLSurface</db:link>.</db:para>
<db:para>The application can start rendering as soon as <db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>() returns <db:code>true</db:code>, and can keep rendering until it <db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>() returns <db:code>false</db:code>. To find out when <db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>() changes, reimplement <db:link xlink:href="qwindow.xml#exposeEvent">exposeEvent</db:link>(). The window will always get a resize event before the first expose event.</db:para>
</db:section>
<db:section xml:id="initial-geometry">
<db:title>Initial Geometry</db:title>
<db:para>If the window's width and height are left uninitialized, the window will get a reasonable default geometry from the platform window. If the position is left uninitialized, then the platform window will allow the windowing system to position the window. For example on X11, the window manager usually does some kind of smart positioning to try to avoid having new windows completely obscure existing windows. However <db:link xlink:href="qwindow.xml#setGeometry">setGeometry</db:link>() initializes both the position and the size, so if you want a fixed size but an automatic position, you should call <db:link xlink:href="qwindow.xml#resize">resize</db:link>() or <db:link xlink:href="qwindow.xml#width-prop">setWidth</db:link>() and <db:link xlink:href="qwindow.xml#height-prop">setHeight</db:link>() instead.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AncestorMode-enum">
<db:title>enum QWindow::AncestorMode</db:title>
<db:enumsynopsis>
<db:enumname>AncestorMode</db:enumname>
<db:enumitem>
<db:enumidentifier>ExcludeTransients</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IncludeTransients</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is used to control whether or not transient parents should be considered ancestors.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwindow.xml">QWindow</db:link></db:emphasis>::ExcludeTransients</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Transient parents are not considered ancestors.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwindow.xml">QWindow</db:link></db:emphasis>::IncludeTransients</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Transient parents are considered ancestors.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Visibility-enum">
<db:title>[since 5.1] enum QWindow::Visibility</db:title>
<db:enumsynopsis>
<db:enumname>Visibility</db:enumname>
<db:enumitem>
<db:enumidentifier>Hidden</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AutomaticVisibility</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Windowed</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Minimized</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Maximized</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FullScreen</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes what part of the screen the window occupies or should occupy.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwindow.xml">QWindow</db:link></db:emphasis>::Windowed</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The window occupies part of the screen, but not necessarily the entire screen. This state will occur only on windowing systems which support showing multiple windows simultaneously. In this state it is possible for the user to move and resize the window manually, if WindowFlags permit it and if it is supported by the windowing system.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwindow.xml">QWindow</db:link></db:emphasis>::Minimized</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The window is reduced to an entry or icon on the task bar, dock, task list or desktop, depending on how the windowing system handles minimized windows.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwindow.xml">QWindow</db:link></db:emphasis>::Maximized</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The window occupies one entire screen, and the titlebar is still visible. On most windowing systems this is the state achieved by clicking the maximize button on the toolbar.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwindow.xml">QWindow</db:link></db:emphasis>::FullScreen</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The window occupies one entire screen, is not resizable, and there is no titlebar. On some platforms which do not support showing multiple simultaneous windows, this can be the usual visibility when the window is not hidden.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwindow.xml">QWindow</db:link></db:emphasis>::AutomaticVisibility</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This means to give the window a default visible state, which might be fullscreen or windowed depending on the platform. It can be given as a parameter to <db:link xlink:href="qwindow.xml#visibility-prop">setVisibility</db:link> but will never be read back from the visibility accessor.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwindow.xml">QWindow</db:link></db:emphasis>::Hidden</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The window is not visible in any way, however it may remember a latent visibility which can be restored by setting AutomaticVisibility.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.1.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="active-prop">
<db:title>[read-only, since 5.1] active : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>active</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isActive</db:synopsisinfo>
<db:synopsisinfo role="notifier">activeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the active status of the window</db:para>
<db:para>This property was introduced in Qt 5.1.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qwindow.xml#isActive">isActive</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">activeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#requestActivate">requestActivate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentOrientation-prop">
<db:title>contentOrientation : Qt::ScreenOrientation</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::ScreenOrientation</db:type>
<db:varname>contentOrientation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">contentOrientation</db:synopsisinfo>
<db:synopsisinfo role="setter">reportContentOrientationChange</db:synopsisinfo>
<db:synopsisinfo role="notifier">contentOrientationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the orientation of the window's contents</db:para>
<db:para>This is a hint to the window manager in case it needs to display additional content like popups, dialogs, status bars, or similar in relation to the window.</db:para>
<db:para>The recommended orientation is <db:link xlink:href="qscreen.xml#orientation-prop">QScreen::orientation</db:link>() but an application doesn't have to support all possible orientations, and thus can opt to ignore the current screen orientation.</db:para>
<db:para>The difference between the window and the content orientation determines how much to rotate the content by. <db:link xlink:href="qscreen.xml#angleBetween">QScreen::angleBetween</db:link>(), <db:link xlink:href="qscreen.xml#transformBetween">QScreen::transformBetween</db:link>(), and <db:link xlink:href="qscreen.xml#mapBetween">QScreen::mapBetween</db:link>() can be used to compute the necessary transform.</db:para>
<db:para>The default value is <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PrimaryOrientation</db:link></db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::ScreenOrientation</db:link></db:type> <db:emphasis role="bold">contentOrientation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">reportContentOrientationChange</db:emphasis>(<db:type><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::ScreenOrientation</db:link></db:type> <db:emphasis>orientation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">contentOrientationChanged</db:emphasis>(<db:type><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::ScreenOrientation</db:link></db:type> <db:emphasis>orientation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="flags-prop">
<db:title>flags : Qt::WindowFlags</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::WindowFlags</db:type>
<db:varname>flags</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">flags</db:synopsisinfo>
<db:synopsisinfo role="setter">setFlags</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the window flags of the window</db:para>
<db:para>The window flags control the window's appearance in the windowing system, whether it's a dialog, popup, or a regular window, and whether it should have a title bar, etc.</db:para>
<db:para>The actual window flags might differ from the flags set with setFlags() if the requested flags could not be fulfilled.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#WindowType-enum">Qt::WindowFlags</db:link></db:type> <db:emphasis role="bold">flags</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFlags</db:emphasis>(<db:type><db:link xlink:href="qt.xml#WindowType-enum">Qt::WindowFlags</db:link></db:type> <db:emphasis>flags</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setFlag">setFlag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="height-prop">
<db:title>height : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>height</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">height</db:synopsisinfo>
<db:synopsisinfo role="setter">setHeight</db:synopsisinfo>
<db:synopsisinfo role="notifier">heightChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the height of the window's geometry</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">height</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHeight</db:emphasis>(<db:type>int</db:type> <db:emphasis>arg</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">heightChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>arg</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maximumHeight-prop">
<db:title>maximumHeight : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>maximumHeight</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maximumHeight</db:synopsisinfo>
<db:synopsisinfo role="setter">setMaximumHeight</db:synopsisinfo>
<db:synopsisinfo role="notifier">maximumHeightChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum height of the window's geometry</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maximumHeight</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximumHeight</db:emphasis>(<db:type>int</db:type> <db:emphasis>h</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">maximumHeightChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>arg</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maximumWidth-prop">
<db:title>maximumWidth : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>maximumWidth</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maximumWidth</db:synopsisinfo>
<db:synopsisinfo role="setter">setMaximumWidth</db:synopsisinfo>
<db:synopsisinfo role="notifier">maximumWidthChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum width of the window's geometry</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maximumWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximumWidth</db:emphasis>(<db:type>int</db:type> <db:emphasis>w</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">maximumWidthChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>arg</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="minimumHeight-prop">
<db:title>minimumHeight : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>minimumHeight</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">minimumHeight</db:synopsisinfo>
<db:synopsisinfo role="setter">setMinimumHeight</db:synopsisinfo>
<db:synopsisinfo role="notifier">minimumHeightChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum height of the window's geometry</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">minimumHeight</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinimumHeight</db:emphasis>(<db:type>int</db:type> <db:emphasis>h</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">minimumHeightChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>arg</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="minimumWidth-prop">
<db:title>minimumWidth : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>minimumWidth</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">minimumWidth</db:synopsisinfo>
<db:synopsisinfo role="setter">setMinimumWidth</db:synopsisinfo>
<db:synopsisinfo role="notifier">minimumWidthChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum width of the window's geometry</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">minimumWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinimumWidth</db:emphasis>(<db:type>int</db:type> <db:emphasis>w</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">minimumWidthChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>arg</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="modality-prop">
<db:title>modality : Qt::WindowModality</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::WindowModality</db:type>
<db:varname>modality</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">modality</db:synopsisinfo>
<db:synopsisinfo role="setter">setModality</db:synopsisinfo>
<db:synopsisinfo role="notifier">modalityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the modality of the window</db:para>
<db:para>A modal window prevents other windows from receiving input events. Qt supports two types of modality: <db:link xlink:href="qt.xml#WindowModality-enum">Qt::WindowModal</db:link> and <db:link xlink:href="qt.xml#WindowModality-enum">Qt::ApplicationModal</db:link>.</db:para>
<db:para>By default, this property is <db:link xlink:href="qt.xml#WindowModality-enum">Qt::NonModal</db:link></db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#WindowModality-enum">Qt::WindowModality</db:link></db:type> <db:emphasis role="bold">modality</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setModality</db:emphasis>(<db:type><db:link xlink:href="qt.xml#WindowModality-enum">Qt::WindowModality</db:link></db:type> <db:emphasis>modality</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qwindow.xml#modalityChanged">modalityChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qt.xml#WindowModality-enum">Qt::WindowModality</db:link></db:type> <db:emphasis>modality</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#WindowModality-enum">Qt::WindowModality</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="opacity-prop">
<db:title>[since 5.1] opacity : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>opacity</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">opacity</db:synopsisinfo>
<db:synopsisinfo role="setter">setOpacity</db:synopsisinfo>
<db:synopsisinfo role="notifier">opacityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the opacity of the window in the windowing system.</db:para>
<db:para>If the windowing system supports window opacity, this can be used to fade the window in and out, or to make it semitransparent.</db:para>
<db:para>A value of 1.0 or above is treated as fully opaque, whereas a value of 0.0 or below is treated as fully transparent. Values inbetween represent varying levels of translucency between the two extremes.</db:para>
<db:para>The default value is 1.0.</db:para>
<db:para>This property was introduced in Qt 5.1.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">opacity</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOpacity</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>level</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">opacityChanged</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>opacity</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="title-prop">
<db:title>title : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>title</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">title</db:synopsisinfo>
<db:synopsisinfo role="setter">setTitle</db:synopsisinfo>
<db:synopsisinfo role="notifier">windowTitleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the window's title in the windowing system</db:para>
<db:para>The window title might appear in the title area of the window decorations, depending on the windowing system and the window flags. It might also be used by the windowing system to identify the window in other contexts, such as in the task switcher.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">title</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTitle</db:emphasis>(<db:emphasis>const QString &amp;</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">windowTitleChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>title</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#flags-prop">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transientParent-prop">
<db:title>[since 5.13] transientParent : QWindow*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QWindow*</db:type>
<db:varname>transientParent</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">transientParent</db:synopsisinfo>
<db:synopsisinfo role="setter">setTransientParent</db:synopsisinfo>
<db:synopsisinfo role="notifier">transientParentChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the window for which this window is a transient pop-up</db:para>
<db:para>This is a hint to the window manager that this window is a dialog or pop-up on behalf of the transient parent.</db:para>
<db:para>In order to cause the window to be centered above its transient <db:code role="parameter">parent</db:code> by default, depending on the window manager, it may also be necessary to call <db:link xlink:href="qwindow.xml#flags-prop">setFlags</db:link>() with a suitable <db:link xlink:href="qt.xml#WindowType-enum">Qt::WindowType</db:link> (such as <db:code>Qt::Dialog</db:code>).</db:para>
<db:para>This property was introduced in Qt 5.13.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qwindow.xml#QWindow">QWindow</db:link></db:type> *<db:emphasis role="bold">transientParent</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTransientParent</db:emphasis>(<db:type><db:link xlink:href="qwindow.xml#QWindow">QWindow</db:link></db:type> *<db:emphasis>parent</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">transientParentChanged</db:emphasis>(<db:type><db:link xlink:href="qwindow.xml#QWindow">QWindow</db:link></db:type> *<db:emphasis>transientParent</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#parent">parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visibility-prop">
<db:title>[since 5.1] visibility : Visibility</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Visibility</db:type>
<db:varname>visibility</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">visibility</db:synopsisinfo>
<db:synopsisinfo role="setter">setVisibility</db:synopsisinfo>
<db:synopsisinfo role="notifier">visibilityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the screen-occupation state of the window</db:para>
<db:para>Visibility is whether the window should appear in the windowing system as normal, minimized, maximized, fullscreen or hidden.</db:para>
<db:para>To set the visibility to <db:link xlink:href="qwindow.xml#Visibility-enum">AutomaticVisibility</db:link> means to give the window a default visible state, which might be fullscreen or windowed depending on the platform. When reading the visibility property you will always get the actual state, never <db:link xlink:href="qwindow.xml#Visibility-enum">AutomaticVisibility</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.1.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qwindow.xml#Visibility-enum">QWindow::Visibility</db:link></db:type> <db:emphasis role="bold">visibility</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVisibility</db:emphasis>(<db:type><db:link xlink:href="qwindow.xml#Visibility-enum">QWindow::Visibility</db:link></db:type> <db:emphasis>v</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">visibilityChanged</db:emphasis>(<db:type><db:link xlink:href="qwindow.xml#Visibility-enum">QWindow::Visibility</db:link></db:type> <db:emphasis>visibility</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="visible-prop">
<db:title>visible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>visible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setVisible</db:synopsisinfo>
<db:synopsisinfo role="notifier">visibleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the window is visible or not</db:para>
<db:para>This property controls the visibility of the window in the windowing system.</db:para>
<db:para>By default, the window is not visible, you must call setVisible(true), or <db:link xlink:href="qwindow.xml#show">show</db:link>() or similar to make it visible.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">visibleChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>arg</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#show">show</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="width-prop">
<db:title>width : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>width</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">width</db:synopsisinfo>
<db:synopsisinfo role="setter">setWidth</db:synopsisinfo>
<db:synopsisinfo role="notifier">widthChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the width of the window's geometry</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">width</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWidth</db:emphasis>(<db:type>int</db:type> <db:emphasis>arg</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">widthChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>arg</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="x-prop">
<db:title>x : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>x</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">x</db:synopsisinfo>
<db:synopsisinfo role="setter">setX</db:synopsisinfo>
<db:synopsisinfo role="notifier">xChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the x position of the window's geometry</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">x</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setX</db:emphasis>(<db:type>int</db:type> <db:emphasis>arg</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">xChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>arg</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="y-prop">
<db:title>y : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>y</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">y</db:synopsisinfo>
<db:synopsisinfo role="setter">setY</db:synopsisinfo>
<db:synopsisinfo role="notifier">yChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the y position of the window's geometry</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">y</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setY</db:emphasis>(<db:type>int</db:type> <db:emphasis>arg</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">yChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>arg</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWindow">
<db:title>[explicit] QWindow::QWindow(QScreen *<db:emphasis>targetScreen</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QWindow</db:methodname>
<db:methodparam>
<db:type>QScreen *</db:type>
<db:parameter>targetScreen</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWindow(QScreen *targetScreen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a window as a top level on the <db:code role="parameter">targetScreen</db:code>.</db:para>
<db:para>The window is not shown until <db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>(true), <db:link xlink:href="qwindow.xml#show">show</db:link>(), or similar is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setScreen">setScreen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QWindow-1">
<db:title>[explicit] QWindow::QWindow(QWindow *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWindow</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWindow(QWindow *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a window as a child of the given <db:code role="parameter">parent</db:code> window.</db:para>
<db:para>The window will be embedded inside the parent window, its coordinates relative to the parent.</db:para>
<db:para>The screen is inherited from the parent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setParent">setParent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QWindow">
<db:title>[virtual] QWindow::~QWindow()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QWindow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWindow()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the window.</db:para>
</db:section>
<db:section xml:id="alert">
<db:title>[since 5.1] void QWindow::alert(int <db:emphasis>msec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>alert</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void alert(int msec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Causes an alert to be shown for <db:code role="parameter">msec</db:code> miliseconds. If <db:code role="parameter">msec</db:code> is <db:code>0</db:code> (the default), then the alert is shown indefinitely until the window becomes active again. This function has no effect on an active window.</db:para>
<db:para>In alert state, the window indicates that it demands attention, for example by flashing or bouncing the taskbar entry.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="baseSize">
<db:title>QSize QWindow::baseSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>baseSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize baseSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the base size of the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setBaseSize">setBaseSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="close">
<db:title>bool QWindow::close()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>close</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool close()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Close the window.</db:para>
<db:para>This closes the window, effectively calling <db:link xlink:href="qwindow.xml#destroy">destroy</db:link>(), and potentially quitting the application. Returns <db:code>true</db:code> on success, false if it has a parent window (in which case the top level window should be closed instead).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#destroy">destroy</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#quitOnLastWindowClosed-prop">QGuiApplication::quitOnLastWindowClosed</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#closeEvent">closeEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closeEvent">
<db:title>[virtual protected] void QWindow::closeEvent(QCloseEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>closeEvent</db:methodname>
<db:methodparam>
<db:type>QCloseEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void closeEvent(QCloseEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle close events (<db:code role="parameter">ev</db:code>).</db:para>
<db:para>The function is called when the window is requested to close. Call <db:link xlink:href="qevent.xml#ignore">QEvent::ignore</db:link>() on the event if you want to prevent the window from being closed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="create">
<db:title>void QWindow::create()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>create</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void create()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Allocates the platform resources associated with the window.</db:para>
<db:para>It is at this point that the surface format set using <db:link xlink:href="qwindow.xml#setFormat">setFormat</db:link>() gets resolved into an actual native surface. However, the window remains hidden until <db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>() is called.</db:para>
<db:para>Note that it is not usually necessary to call this function directly, as it will be implicitly called by <db:link xlink:href="qwindow.xml#show">show</db:link>(), <db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>(), and other functions that require access to the platform resources.</db:para>
<db:para>Call <db:link xlink:href="qwindow.xml#destroy">destroy</db:link>() to free the platform resources if necessary.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#destroy">destroy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursor">
<db:title>QCursor QWindow::cursor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCursor</db:type>
<db:methodname>cursor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCursor cursor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>the cursor shape for this window</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setCursor">setCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#unsetCursor">unsetCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="destroy">
<db:title>void QWindow::destroy()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>destroy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void destroy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the native platform resources associated with this window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="devicePixelRatio">
<db:title>qreal QWindow::devicePixelRatio() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>devicePixelRatio</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal devicePixelRatio() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the ratio between physical pixels and device-independent pixels for the window. This value is dependent on the screen the window is on, and may change when the window is moved.</db:para>
<db:para>Common values are 1.0 on normal displays and 2.0 on Apple &quot;retina&quot; displays.</db:para>
<db:note>
<db:para>For windows not backed by a platform window, meaning that <db:link xlink:href="qwindow.xml#create">create</db:link>() was not called, the function will fall back to the associated <db:link xlink:href="qscreen.xml">QScreen</db:link>'s device pixel ratio.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#devicePixelRatio-prop">QScreen::devicePixelRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QWindow::event(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *ev) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
<db:para>Override this to handle any event (<db:code role="parameter">ev</db:code>) sent to the window. Return <db:code>true</db:code> if the event was recognized and processed.</db:para>
<db:para>Remember to call the base class version if you wish for mouse events, key events, resize events, etc to be dispatched as usual.</db:para>
</db:section>
<db:section xml:id="exposeEvent">
<db:title>[virtual protected] void QWindow::exposeEvent(QExposeEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>exposeEvent</db:methodname>
<db:methodparam>
<db:type>QExposeEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void exposeEvent(QExposeEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The expose event (<db:code role="parameter">ev</db:code>) is sent by the window system when a window moves between the un-exposed and exposed states.</db:para>
<db:para>An exposed window is potentially visible to the user. If the window is moved off screen, is made totally obscured by another window, is minimized, or similar, this function might be called and the value of <db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>() might change to false. You may use this event to limit expensive operations such as animations to only run when the window is exposed.</db:para>
<db:para>This event should not be used to paint. To handle painting implement <db:link xlink:href="qwindow.xml#paintEvent">paintEvent</db:link>() instead.</db:para>
<db:para>A resize event will always be sent before the expose event the first time a window is shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#paintEvent">paintEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#isExposed">isExposed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filePath">
<db:title>QString QWindow::filePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>filePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString filePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>the file name this window is representing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setFilePath">setFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[virtual protected] void QWindow::focusInEvent(QFocusEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusInEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusInEvent(QFocusEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle focus in events (<db:code role="parameter">ev</db:code>).</db:para>
<db:para>Focus in events are sent when the window receives keyboard focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#focusOutEvent">focusOutEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusObject">
<db:title>[virtual] QObject *QWindow::focusObject() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>focusObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * focusObject() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qobject.xml">QObject</db:link> that will be the final receiver of events tied focus, such as key events.</db:para>
</db:section>
<db:section xml:id="focusObjectChanged">
<db:title>void QWindow::focusObjectChanged(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>focusObjectChanged</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusObjectChanged(QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the final receiver of events tied to focus is changed to <db:code role="parameter">object</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#focusObject">focusObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[virtual protected] void QWindow::focusOutEvent(QFocusEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusOutEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusOutEvent(QFocusEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle focus out events (<db:code role="parameter">ev</db:code>).</db:para>
<db:para>Focus out events are sent when the window loses keyboard focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#focusInEvent">focusInEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>[override virtual] QSurfaceFormat QWindow::format() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSurfaceFormat</db:type>
<db:methodname>format</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSurfaceFormat format() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsurface.xml#format" role="function">QSurface::format() const</db:link>.</db:para>
<db:para>Returns the actual format of this window.</db:para>
<db:para>After the window has been created, this function will return the actual surface format of the window. It might differ from the requested format if the requested format could not be fulfilled by the platform. It might also be a superset, for example certain buffer sizes may be larger than requested.</db:para>
<db:note>
<db:para>Depending on the platform, certain values in this surface format may still contain the requested values, that is, the values that have been passed to <db:link xlink:href="qwindow.xml#setFormat">setFormat</db:link>(). Typical examples are the OpenGL version, profile and options. These may not get updated during <db:link xlink:href="qwindow.xml#create">create</db:link>() since these are context specific and a single window may be used together with multiple contexts over its lifetime. Use the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>'s format() instead to query such values.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setFormat">setFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#requestedFormat">requestedFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglcontext.xml#format">QOpenGLContext::format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameGeometry">
<db:title>QRect QWindow::frameGeometry() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>frameGeometry</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect frameGeometry() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the geometry of the window, including its window frame.</db:para>
<db:para>The geometry is in relation to the virtualGeometry() of its screen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#geometry">geometry</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#frameMargins">frameMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameMargins">
<db:title>QMargins QWindow::frameMargins() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMargins</db:type>
<db:methodname>frameMargins</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMargins frameMargins() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the window frame margins surrounding the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#geometry">geometry</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#frameGeometry">frameGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="framePosition">
<db:title>QPoint QWindow::framePosition() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>framePosition</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint framePosition() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the top left position of the window, including its window frame.</db:para>
<db:para>This returns the same value as <db:link xlink:href="qwindow.xml#frameGeometry">frameGeometry</db:link>().topLeft().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setFramePosition">setFramePosition</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#geometry">geometry</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#frameGeometry">frameGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromWinId">
<db:title>[static] QWindow *QWindow::fromWinId(WId <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWindow *</db:type>
<db:methodname>fromWinId</db:methodname>
<db:methodparam>
<db:type>WId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWindow * fromWinId(WId id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a local representation of a window created by another process or by using native libraries below Qt.</db:para>
<db:para>Given the handle <db:code role="parameter">id</db:code> to a native window, this method creates a <db:link xlink:href="qwindow.xml">QWindow</db:link> object which can be used to represent the window when invoking methods like <db:link xlink:href="qwindow.xml#setParent">setParent</db:link>() and <db:link xlink:href="qwindow.xml#transientParent-prop">setTransientParent</db:link>().</db:para>
<db:para>This can be used, on platforms which support it, to embed a <db:link xlink:href="qwindow.xml">QWindow</db:link> inside a native window, or to embed a native window inside a <db:link xlink:href="qwindow.xml">QWindow</db:link>.</db:para>
<db:para>If foreign windows are not supported or embedding the native window failed in the platform plugin, this function returns <db:code>nullptr</db:code>.</db:para>
<db:note>
<db:para>The resulting <db:link xlink:href="qwindow.xml">QWindow</db:link> should not be used to manipulate the underlying native window (besides re-parenting), or to observe state changes of the native window. Any support for these kind of operations is incidental, highly platform dependent and untested.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setParent">setParent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="geometry">
<db:title>QRect QWindow::geometry() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>geometry</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect geometry() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the geometry of the window, excluding its window frame.</db:para>
<db:para>The geometry is in relation to the virtualGeometry() of its screen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setGeometry">setGeometry</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#frameMargins">frameMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#frameGeometry">frameGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hide">
<db:title>void QWindow::hide()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hide</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hide()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Hides the window.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>(false).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#show">show</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[virtual protected] void QWindow::hideEvent(QHideEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>hideEvent</db:methodname>
<db:methodparam>
<db:type>QHideEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hideEvent(QHideEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle hide events (<db:code role="parameter">ev</db:code>).</db:para>
<db:para>The function is called when the window has requested being hidden in the windowing system.</db:para>
</db:section>
<db:section xml:id="icon">
<db:title>QIcon QWindow::icon() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QIcon</db:type>
<db:methodname>icon</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIcon icon() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the window's icon in the windowing system</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setIcon">setIcon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QWindow::isActive() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isActive</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">active</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isActive() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the window should appear active from a style perspective.</db:para>
<db:para>This is the case for the window that has input focus as well as windows that are in the same parent / transient parent chain as the focus window.</db:para>
<db:para>To get the window that currently has focus, use <db:link xlink:href="qguiapplication.xml#focusWindow">QGuiApplication::focusWindow</db:link>().</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qwindow.xml#active-prop">active</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="isAncestorOf">
<db:title>bool QWindow::isAncestorOf(const QWindow *<db:emphasis>child</db:emphasis>, QWindow::AncestorMode <db:emphasis>mode</db:emphasis> = IncludeTransients) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAncestorOf</db:methodname>
<db:methodparam>
<db:type>const QWindow *</db:type>
<db:parameter>child</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWindow::AncestorMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>IncludeTransients</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAncestorOf(const QWindow *child, QWindow::AncestorMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the window is an ancestor of the given <db:code role="parameter">child</db:code>. If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qwindow.xml#AncestorMode-enum">IncludeTransients</db:link>, then transient parents are also considered ancestors.</db:para>
</db:section>
<db:section xml:id="isExposed">
<db:title>bool QWindow::isExposed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isExposed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isExposed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns if this window is exposed in the windowing system.</db:para>
<db:para>When the window is not exposed, it is shown by the application but it is still not showing in the windowing system, so the application should minimize animations and other graphical activities.</db:para>
<db:para>An <db:link xlink:href="qwindow.xml#exposeEvent">exposeEvent</db:link>() is sent every time this value changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#exposeEvent">exposeEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isModal">
<db:title>bool QWindow::isModal() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isModal</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isModal() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the window is modal.</db:para>
<db:para>A modal window prevents other windows from getting any input.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#modality-prop">QWindow::modality</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isTopLevel">
<db:title>bool QWindow::isTopLevel() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isTopLevel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isTopLevel() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the window is top level, i.e. has no parent window.</db:para>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[virtual protected] void QWindow::keyPressEvent(QKeyEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyPressEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyPressEvent(QKeyEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle key press events (<db:code role="parameter">ev</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#keyReleaseEvent">keyReleaseEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[virtual protected] void QWindow::keyReleaseEvent(QKeyEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyReleaseEvent(QKeyEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle key release events (<db:code role="parameter">ev</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#keyPressEvent">keyPressEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lower">
<db:title>void QWindow::lower()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>lower</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void lower()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Lower the window in the windowing system.</db:para>
<db:para>Requests that the window be lowered to appear below other windows.</db:para>
</db:section>
<db:section xml:id="mapFromGlobal">
<db:title>[since 6.0] QPointF QWindow::mapFromGlobal(const QPointF &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapFromGlobal</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapFromGlobal(const QPointF &amp;pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Translates the global screen coordinate <db:code role="parameter">pos</db:code> to window coordinates.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#mapToGlobal">mapToGlobal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromGlobal-1">
<db:title>QPoint QWindow::mapFromGlobal(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>mapFromGlobal</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint mapFromGlobal(const QPoint &amp;pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="mapToGlobal">
<db:title>[since 6.0] QPointF QWindow::mapToGlobal(const QPointF &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>mapToGlobal</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapToGlobal(const QPointF &amp;pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Translates the window coordinate <db:code role="parameter">pos</db:code> to global screen coordinates. For example, <db:code>mapToGlobal(QPointF(0,0))</db:code> would give the global coordinates of the top-left pixel of the window.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#mapFromGlobal">mapFromGlobal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapToGlobal-1">
<db:title>QPoint QWindow::mapToGlobal(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>mapToGlobal</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint mapToGlobal(const QPoint &amp;pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="mask">
<db:title>QRegion QWindow::mask() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>mask</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion mask() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the mask set on the window.</db:para>
<db:para>The mask is a hint to the windowing system that the application does not want to receive mouse or touch input outside the given region.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setMask">setMask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumSize">
<db:title>QSize QWindow::maximumSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>maximumSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize maximumSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum size of the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSize">
<db:title>QSize QWindow::minimumSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>minimumSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize minimumSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum size of the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modalityChanged">
<db:title>void QWindow::modalityChanged(Qt::WindowModality <db:emphasis>modality</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>modalityChanged</db:methodname>
<db:methodparam>
<db:type>Qt::WindowModality</db:type>
<db:parameter>modality</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">modality</db:synopsisinfo>
<db:synopsisinfo role="signature">void modalityChanged(Qt::WindowModality modality)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the Qwindow::modality property changes to <db:code role="parameter">modality</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qwindow.xml#modality-prop">modality</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[virtual protected] void QWindow::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseDoubleClickEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseDoubleClickEvent(QMouseEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle mouse double click events (<db:code role="parameter">ev</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#mousePressEvent">mousePressEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qstylehints.xml#mouseDoubleClickInterval-prop">QStyleHints::mouseDoubleClickInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[virtual protected] void QWindow::mouseMoveEvent(QMouseEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseMoveEvent(QMouseEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle mouse move events (<db:code role="parameter">ev</db:code>).</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[virtual protected] void QWindow::mousePressEvent(QMouseEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QMouseEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle mouse press events (<db:code role="parameter">ev</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#mouseReleaseEvent">mouseReleaseEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[virtual protected] void QWindow::mouseReleaseEvent(QMouseEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseReleaseEvent(QMouseEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle mouse release events (<db:code role="parameter">ev</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#mousePressEvent">mousePressEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveEvent">
<db:title>[virtual protected] void QWindow::moveEvent(QMoveEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>moveEvent</db:methodname>
<db:methodparam>
<db:type>QMoveEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveEvent(QMoveEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle window move events (<db:code role="parameter">ev</db:code>).</db:para>
</db:section>
<db:section xml:id="nativeEvent">
<db:title>[virtual protected] bool QWindow::nativeEvent(const QByteArray &amp;<db:emphasis>eventType</db:emphasis>, void *<db:emphasis>message</db:emphasis>, qintptr *<db:emphasis>result</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>nativeEvent</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>eventType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qintptr *</db:type>
<db:parameter>result</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool nativeEvent(const QByteArray &amp;eventType, void *message, qintptr *result)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle platform dependent events. Will be given <db:code role="parameter">eventType</db:code>, <db:code role="parameter">message</db:code> and <db:code role="parameter">result</db:code>.</db:para>
<db:para>This might make your application non-portable.</db:para>
<db:para>Should return true only if the event was handled.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[virtual protected, since 6.0] void QWindow::paintEvent(QPaintEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The paint event (<db:code role="parameter">ev</db:code>) is sent by the window system whenever an area of the window needs a repaint, for example when initially showing the window, or due to parts of the window being uncovered by moving another window.</db:para>
<db:para>The application is expected to render into the window in response to the paint event, regardless of the exposed state of the window. For example, a paint event may be sent before the window is exposed, to prepare it for showing to the user.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#exposeEvent">exposeEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parent">
<db:title>[since 5.9] QWindow *QWindow::parent(QWindow::AncestorMode <db:emphasis>mode</db:emphasis> = ExcludeTransients) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWindow *</db:type>
<db:methodname>parent</db:methodname>
<db:methodparam>
<db:type>QWindow::AncestorMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>ExcludeTransients</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWindow * parent(QWindow::AncestorMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the parent window, if any.</db:para>
<db:para>If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qwindow.xml#AncestorMode-enum">IncludeTransients</db:link>, then the transient parent is returned if there is no parent.</db:para>
<db:para>A window without a parent is known as a top level window.</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setParent">setParent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="position">
<db:title>QPoint QWindow::position() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>position</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint position() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the window on the desktop excluding any window frame</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setPosition">setPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="raise">
<db:title>void QWindow::raise()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>raise</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void raise()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Raise the window in the windowing system.</db:para>
<db:para>Requests that the window be raised to appear above other windows.</db:para>
</db:section>
<db:section xml:id="requestActivate">
<db:title>void QWindow::requestActivate()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>requestActivate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestActivate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Requests the window to be activated, i.e. receive keyboard focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#isActive">isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#focusWindow">QGuiApplication::focusWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestUpdate">
<db:title>[since 5.5] void QWindow::requestUpdate()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>requestUpdate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestUpdate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Schedules a <db:link xlink:href="qevent.xml#Type-enum">QEvent::UpdateRequest</db:link> event to be delivered to this window.</db:para>
<db:para>The event is delivered in sync with the display vsync on platforms where this is possible. Otherwise, the event is delivered after a delay of 5 ms. The additional time is there to give the event loop a bit of idle time to gather system events, and can be overridden using the QT_QPA_UPDATE_IDLE_TIME environment variable.</db:para>
<db:para>When driving animations, this function should be called once after drawing has completed. Calling this function multiple times will result in a single event being delivered to the window.</db:para>
<db:para>Subclasses of <db:link xlink:href="qwindow.xml">QWindow</db:link> should reimplement <db:link xlink:href="qwindow.xml#event">event</db:link>(), intercept the event and call the application's rendering code, then call the base class implementation.</db:para>
<db:note>
<db:para>The subclass' reimplementation of <db:link xlink:href="qwindow.xml#event">event</db:link>() must invoke the base class implementation, unless it is absolutely sure that the event does not need to be handled by the base class. For example, the default implementation of this function relies on <db:link xlink:href="qevent.xml#Type-enum">QEvent::Timer</db:link> events. Filtering them away would therefore break the delivery of the update events.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="requestedFormat">
<db:title>QSurfaceFormat QWindow::requestedFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSurfaceFormat</db:type>
<db:methodname>requestedFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSurfaceFormat requestedFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the requested surface format of this window.</db:para>
<db:para>If the requested format was not supported by the platform implementation, the requestedFormat will differ from the actual window format.</db:para>
<db:para>This is the value set with <db:link xlink:href="qwindow.xml#setFormat">setFormat</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setFormat">setFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resize">
<db:title>void QWindow::resize(const QSize &amp;<db:emphasis>newSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resize</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>newSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resize(const QSize &amp;newSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>set the size of the window, excluding any window frame, to <db:code role="parameter">newSize</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#geometry">geometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resize-1">
<db:title>void QWindow::resize(int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void resize(int w, int h)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>set the size of the window, excluding any window frame, to a <db:link xlink:href="qsize.xml">QSize</db:link> constructed from width <db:code role="parameter">w</db:code> and height <db:code role="parameter">h</db:code></db:para>
<db:para>For interactively resizing windows, see <db:link xlink:href="qwindow.xml#startSystemResize">startSystemResize</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#geometry">geometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[virtual protected] void QWindow::resizeEvent(QResizeEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeEvent</db:methodname>
<db:methodparam>
<db:type>QResizeEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeEvent(QResizeEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle resize events (<db:code role="parameter">ev</db:code>).</db:para>
<db:para>The resize event is called whenever the window is resized in the windowing system, either directly through the windowing system acknowledging a <db:link xlink:href="qwindow.xml#setGeometry">setGeometry</db:link>() or <db:link xlink:href="qwindow.xml#resize">resize</db:link>() request, or indirectly through the user resizing the window manually.</db:para>
</db:section>
<db:section xml:id="screen">
<db:title>QScreen *QWindow::screen() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QScreen *</db:type>
<db:methodname>screen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QScreen * screen() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the screen on which the window is shown, or null if there is none.</db:para>
<db:para>For child windows, this returns the screen of the corresponding top level window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setScreen">setScreen</db:link>()</db:member>
<db:member><db:link xlink:href="qscreen.xml#virtualSiblings">QScreen::virtualSiblings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="screenChanged">
<db:title>void QWindow::screenChanged(QScreen *<db:emphasis>screen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>screenChanged</db:methodname>
<db:methodparam>
<db:type>QScreen *</db:type>
<db:parameter>screen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void screenChanged(QScreen *screen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a window's <db:code role="parameter">screen</db:code> changes, either by being set explicitly with <db:link xlink:href="qwindow.xml#setScreen">setScreen</db:link>(), or automatically when the window's screen is removed.</db:para>
</db:section>
<db:section xml:id="setBaseSize">
<db:title>void QWindow::setBaseSize(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBaseSize</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBaseSize(const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the base <db:code role="parameter">size</db:code> of the window.</db:para>
<db:para>The base size is used to calculate a proper window size if the window defines <db:link xlink:href="qwindow.xml#sizeIncrement">sizeIncrement</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setSizeIncrement">setSizeIncrement</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#baseSize">baseSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCursor">
<db:title>void QWindow::setCursor(const QCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCursor</db:methodname>
<db:methodparam>
<db:type>const QCursor &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCursor(const QCursor &amp;cursor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>set the cursor shape for this window</db:para>
<db:para>The mouse <db:code role="parameter">cursor</db:code> will assume this shape when it is over this window, unless an override cursor is set. See the <db:link xlink:href="qt.xml#CursorShape-enum">list of predefined cursor objects</db:link> for a range of useful shapes.</db:para>
<db:para>If no cursor has been set, or after a call to <db:link xlink:href="qwindow.xml#unsetCursor">unsetCursor</db:link>(), the parent window's cursor is used.</db:para>
<db:para>By default, the cursor has the <db:link xlink:href="qt.xml#CursorShape-enum">Qt::ArrowCursor</db:link> shape.</db:para>
<db:para>Some underlying window implementations will reset the cursor if it leaves a window even if the mouse is grabbed. If you want to have a cursor set for all windows, even when outside the window, consider <db:link xlink:href="qguiapplication.xml#setOverrideCursor">QGuiApplication::setOverrideCursor</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#cursor">cursor</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#setOverrideCursor">QGuiApplication::setOverrideCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilePath">
<db:title>void QWindow::setFilePath(const QString &amp;<db:emphasis>filePath</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFilePath</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filePath</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFilePath(const QString &amp;filePath)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>set the file name this window is representing.</db:para>
<db:para>The windowing system might use <db:code role="parameter">filePath</db:code> to display the path of the document this window is representing in the tile bar.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#filePath">filePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFlag">
<db:title>[since 5.9] void QWindow::setFlag(Qt::WindowType <db:emphasis>flag</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFlag</db:methodname>
<db:methodparam>
<db:type>Qt::WindowType</db:type>
<db:parameter>flag</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFlag(Qt::WindowType flag, bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the window flag <db:code role="parameter">flag</db:code> on this window if <db:code role="parameter">on</db:code> is true; otherwise clears the flag.</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#flags-prop">setFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#flags-prop">flags</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>void QWindow::setFormat(const QSurfaceFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFormat</db:methodname>
<db:methodparam>
<db:type>const QSurfaceFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFormat(const QSurfaceFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the window's surface <db:code role="parameter">format</db:code>.</db:para>
<db:para>The format determines properties such as color depth, alpha, depth and stencil buffer size, etc. For example, to give a window a transparent background (provided that the window system supports compositing, and provided that other content in the window does not make it opaque again):</db:para>
<db:programlisting language="cpp">QSurfaceFormat format;
format.setAlphaBufferSize(8);
window.setFormat(format);
</db:programlisting>
<db:para>The surface format will be resolved in the <db:link xlink:href="qwindow.xml#create">create</db:link>() function. Calling this function after <db:link xlink:href="qwindow.xml#create">create</db:link>() has been called will not re-resolve the surface format of the native surface.</db:para>
<db:para>When the format is not explicitly set via this function, the format returned by <db:link xlink:href="qsurfaceformat.xml#defaultFormat">QSurfaceFormat::defaultFormat</db:link>() will be used. This means that when having multiple windows, individual calls to this function can be replaced by one single call to <db:link xlink:href="qsurfaceformat.xml#setDefaultFormat">QSurfaceFormat::setDefaultFormat</db:link>() before creating the first window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#format">format</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#destroy">destroy</db:link>()</db:member>
<db:member><db:link xlink:href="qsurfaceformat.xml#setDefaultFormat">QSurfaceFormat::setDefaultFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFramePosition">
<db:title>void QWindow::setFramePosition(const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFramePosition</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFramePosition(const QPoint &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the upper left position of the window (<db:code role="parameter">point</db:code>) including its window frame.</db:para>
<db:para>The position is in relation to the virtualGeometry() of its screen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#framePosition">framePosition</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setGeometry">setGeometry</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#frameGeometry">frameGeometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry">
<db:title>void QWindow::setGeometry(int <db:emphasis>posx</db:emphasis>, int <db:emphasis>posy</db:emphasis>, int <db:emphasis>w</db:emphasis>, int <db:emphasis>h</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setGeometry</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>posx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>posy</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGeometry(int posx, int posy, int w, int h)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the geometry of the window, excluding its window frame, to a rectangle constructed from <db:code role="parameter">posx</db:code>, <db:code role="parameter">posy</db:code>, <db:code role="parameter">w</db:code> and <db:code role="parameter">h</db:code>.</db:para>
<db:para>The geometry is in relation to the virtualGeometry() of its screen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#geometry">geometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry-1">
<db:title>void QWindow::setGeometry(const QRect &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setGeometry</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGeometry(const QRect &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the geometry of the window, excluding its window frame, to <db:code role="parameter">rect</db:code>.</db:para>
<db:para>The geometry is in relation to the virtualGeometry() of its screen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#geometry">geometry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIcon">
<db:title>void QWindow::setIcon(const QIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setIcon</db:methodname>
<db:methodparam>
<db:type>const QIcon &amp;</db:type>
<db:parameter>icon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setIcon(const QIcon &amp;icon)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the window's <db:code role="parameter">icon</db:code> in the windowing system</db:para>
<db:para>The window icon might be used by the windowing system for example to decorate the window, and/or in the task switcher.</db:para>
<db:note>
<db:para>On macOS, the window title bar icon is meant for windows representing documents, and will only show up if a file path is also set.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#icon">icon</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setFilePath">setFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setKeyboardGrabEnabled">
<db:title>bool QWindow::setKeyboardGrabEnabled(bool <db:emphasis>grab</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setKeyboardGrabEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>grab</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setKeyboardGrabEnabled(bool grab)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether keyboard grab should be enabled or not (<db:code role="parameter">grab</db:code>).</db:para>
<db:para>If the return value is true, the window receives all key events until setKeyboardGrabEnabled(false) is called; other windows get no key events at all. Mouse events are not affected. Use <db:link xlink:href="qwindow.xml#setMouseGrabEnabled">setMouseGrabEnabled</db:link>() if you want to grab that.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setMouseGrabEnabled">setMouseGrabEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMask">
<db:title>void QWindow::setMask(const QRegion &amp;<db:emphasis>region</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMask</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>region</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMask(const QRegion &amp;region)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the mask of the window.</db:para>
<db:para>The mask is a hint to the windowing system that the application does not want to receive mouse or touch input outside the given <db:code role="parameter">region</db:code>.</db:para>
<db:para>The window manager may or may not choose to display any areas of the window not included in the mask, thus it is the application's responsibility to clear to transparent the areas that are not part of the mask.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#mask">mask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumSize">
<db:title>void QWindow::setMaximumSize(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumSize</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumSize(const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum size of the window.</db:para>
<db:para>This is a hint to the window manager to prevent resizing above the specified <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#maximumSize">maximumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMinimumSize">
<db:title>void QWindow::setMinimumSize(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMinimumSize</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMinimumSize(const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the minimum size of the window.</db:para>
<db:para>This is a hint to the window manager to prevent resizing below the specified <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#minimumSize">minimumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMouseGrabEnabled">
<db:title>bool QWindow::setMouseGrabEnabled(bool <db:emphasis>grab</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setMouseGrabEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>grab</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setMouseGrabEnabled(bool grab)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether mouse grab should be enabled or not (<db:code role="parameter">grab</db:code>).</db:para>
<db:para>If the return value is true, the window receives all mouse events until setMouseGrabEnabled(false) is called; other windows get no mouse events at all. Keyboard events are not affected. Use <db:link xlink:href="qwindow.xml#setKeyboardGrabEnabled">setKeyboardGrabEnabled</db:link>() if you want to grab that.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setKeyboardGrabEnabled">setKeyboardGrabEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setParent">
<db:title>void QWindow::setParent(QWindow *<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setParent</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setParent(QWindow *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">parent</db:code> Window. This will lead to the windowing system managing the clip of the window, so it will be clipped to the <db:code role="parameter">parent</db:code> window.</db:para>
<db:para>Setting <db:code role="parameter">parent</db:code> to be <db:code>nullptr</db:code> will make the window become a top level window.</db:para>
<db:para>If <db:code role="parameter">parent</db:code> is a window created by <db:link xlink:href="qwindow.xml#fromWinId">fromWinId</db:link>(), then the current window will be embedded inside <db:code role="parameter">parent</db:code>, if the platform supports it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#parent">parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPosition">
<db:title>void QWindow::setPosition(const QPoint &amp;<db:emphasis>pt</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPosition</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>pt</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPosition(const QPoint &amp;pt)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>set the position of the window on the desktop to <db:code role="parameter">pt</db:code></db:para>
<db:para>The position is in relation to the virtualGeometry() of its screen.</db:para>
<db:para>For interactively moving windows, see <db:link xlink:href="qwindow.xml#startSystemMove">startSystemMove</db:link>(). For interactively resizing windows, see <db:link xlink:href="qwindow.xml#startSystemResize">startSystemResize</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#position">position</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#startSystemMove">startSystemMove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPosition-1">
<db:title>void QWindow::setPosition(int <db:emphasis>posx</db:emphasis>, int <db:emphasis>posy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPosition</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>posx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>posy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPosition(int posx, int posy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>set the position of the window on the desktop to <db:code role="parameter">posx</db:code>, <db:code role="parameter">posy</db:code></db:para>
<db:para>The position is in relation to the virtualGeometry() of its screen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#position">position</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScreen">
<db:title>void QWindow::setScreen(QScreen *<db:emphasis>newScreen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setScreen</db:methodname>
<db:methodparam>
<db:type>QScreen *</db:type>
<db:parameter>newScreen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setScreen(QScreen *newScreen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the screen on which the window should be shown.</db:para>
<db:para>If the window has been created, it will be recreated on the <db:code role="parameter">newScreen</db:code>.</db:para>
<db:note>
<db:para>If the screen is part of a virtual desktop of multiple screens, the window will not move automatically to <db:code role="parameter">newScreen</db:code>. To place the window relative to the screen, use the screen's topLeft() position.</db:para>
</db:note>
<db:para>This function only works for top level windows.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#screen">screen</db:link>()</db:member>
<db:member><db:link xlink:href="qscreen.xml#virtualSiblings">QScreen::virtualSiblings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSizeIncrement">
<db:title>void QWindow::setSizeIncrement(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSizeIncrement</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSizeIncrement(const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the size increment (<db:code role="parameter">size</db:code>) of the window.</db:para>
<db:para>When the user resizes the window, the size will move in steps of <db:link xlink:href="qwindow.xml#sizeIncrement">sizeIncrement</db:link>().<db:link xlink:href="qwindow.xml#width-prop">width</db:link>() pixels horizontally and <db:link xlink:href="qwindow.xml#sizeIncrement">sizeIncrement</db:link>().<db:link xlink:href="qwindow.xml#height-prop">height</db:link>() pixels vertically, with <db:link xlink:href="qwindow.xml#baseSize">baseSize</db:link>() as the basis.</db:para>
<db:para>By default, this property contains a size with zero width and height.</db:para>
<db:para>The windowing system might not support size increments.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#sizeIncrement">sizeIncrement</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setBaseSize">setBaseSize</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setMinimumSize">setMinimumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setMaximumSize">setMaximumSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSurfaceType">
<db:title>void QWindow::setSurfaceType(QSurface::SurfaceType <db:emphasis>surfaceType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSurfaceType</db:methodname>
<db:methodparam>
<db:type>QSurface::SurfaceType</db:type>
<db:parameter>surfaceType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSurfaceType(QSurface::SurfaceType surfaceType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">surfaceType</db:code> of the window.</db:para>
<db:para>Specifies whether the window is meant for raster rendering with <db:link xlink:href="qbackingstore.xml">QBackingStore</db:link>, or OpenGL rendering with <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>.</db:para>
<db:para>The <db:link xlink:href="qwindow.xml#surfaceType">surfaceType</db:link> will be used when the native surface is created in the <db:link xlink:href="qwindow.xml#create">create</db:link>() function. Calling this function after the native surface has been created requires calling <db:link xlink:href="qwindow.xml#destroy">destroy</db:link>() and <db:link xlink:href="qwindow.xml#create">create</db:link>() to release the old native surface and create a new one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#surfaceType">surfaceType</db:link>()</db:member>
<db:member><db:link xlink:href="qbackingstore.xml">QBackingStore</db:link></db:member>
<db:member><db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link></db:member>
<db:member><db:link xlink:href="qwindow.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#destroy">destroy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVulkanInstance">
<db:title>void QWindow::setVulkanInstance(QVulkanInstance *<db:emphasis>instance</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVulkanInstance</db:methodname>
<db:methodparam>
<db:type>QVulkanInstance *</db:type>
<db:parameter>instance</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVulkanInstance(QVulkanInstance *instance)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Associates this window with the specified Vulkan <db:code role="parameter">instance</db:code>.</db:para>
<db:para><db:code role="parameter">instance</db:code> must stay valid as long as this <db:link xlink:href="qwindow.xml">QWindow</db:link> instance exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#vulkanInstance">vulkanInstance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWindowState">
<db:title>void QWindow::setWindowState(Qt::WindowState <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWindowState</db:methodname>
<db:methodparam>
<db:type>Qt::WindowState</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWindowState(Qt::WindowState state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>set the screen-occupation state of the window</db:para>
<db:para>The window <db:code role="parameter">state</db:code> represents whether the window appears in the windowing system as maximized, minimized, fullscreen, or normal.</db:para>
<db:para>The enum value <db:link xlink:href="qt.xml#WindowState-enum">Qt::WindowActive</db:link> is not an accepted parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#windowState">windowState</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showNormal">showNormal</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showFullScreen">showFullScreen</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showMinimized">showMinimized</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showMaximized">showMaximized</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#setWindowStates">setWindowStates</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWindowStates">
<db:title>[since 5.10] void QWindow::setWindowStates(Qt::WindowStates <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWindowStates</db:methodname>
<db:methodparam>
<db:type>Qt::WindowStates</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWindowStates(Qt::WindowStates state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>set the screen-occupation state of the window</db:para>
<db:para>The window <db:code role="parameter">state</db:code> represents whether the window appears in the windowing system as maximized, minimized and/or fullscreen.</db:para>
<db:para>The window can be in a combination of several states. For example, if the window is both minimized and maximized, the window will appear minimized, but clicking on the task bar entry will restore it to the maximized state.</db:para>
<db:para>The enum value <db:link xlink:href="qt.xml#WindowState-enum">Qt::WindowActive</db:link> should not be set.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#windowStates">windowStates</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showNormal">showNormal</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showFullScreen">showFullScreen</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showMinimized">showMinimized</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showMaximized">showMaximized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="show">
<db:title>void QWindow::show()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>show</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void show()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shows the window.</db:para>
<db:para>This is equivalent to calling <db:link xlink:href="qwindow.xml#showFullScreen">showFullScreen</db:link>(), <db:link xlink:href="qwindow.xml#showMaximized">showMaximized</db:link>(), or <db:link xlink:href="qwindow.xml#showNormal">showNormal</db:link>(), depending on the platform's default behavior for the window type and flags.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#showFullScreen">showFullScreen</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showMaximized">showMaximized</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#showNormal">showNormal</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#hide">hide</db:link>()</db:member>
<db:member><db:link xlink:href="qstylehints.xml#showIsFullScreen-prop">QStyleHints::showIsFullScreen</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#flags-prop">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[virtual protected] void QWindow::showEvent(QShowEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>showEvent</db:methodname>
<db:methodparam>
<db:type>QShowEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showEvent(QShowEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle show events (<db:code role="parameter">ev</db:code>).</db:para>
<db:para>The function is called when the window has requested becoming visible.</db:para>
<db:para>If the window is successfully shown by the windowing system, this will be followed by a resize and an expose event.</db:para>
</db:section>
<db:section xml:id="showFullScreen">
<db:title>void QWindow::showFullScreen()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>showFullScreen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showFullScreen()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shows the window as fullscreen.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qwindow.xml#setWindowStates">setWindowStates</db:link>(<db:link xlink:href="qt.xml#WindowState-enum">Qt::WindowFullScreen</db:link>) and then <db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>(true).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setWindowStates">setWindowStates</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showMaximized">
<db:title>void QWindow::showMaximized()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>showMaximized</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showMaximized()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shows the window as maximized.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qwindow.xml#setWindowStates">setWindowStates</db:link>(<db:link xlink:href="qt.xml#WindowState-enum">Qt::WindowMaximized</db:link>) and then <db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>(true).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setWindowStates">setWindowStates</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showMinimized">
<db:title>void QWindow::showMinimized()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>showMinimized</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showMinimized()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shows the window as minimized.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qwindow.xml#setWindowStates">setWindowStates</db:link>(<db:link xlink:href="qt.xml#WindowState-enum">Qt::WindowMinimized</db:link>) and then <db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>(true).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setWindowStates">setWindowStates</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showNormal">
<db:title>void QWindow::showNormal()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>showNormal</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showNormal()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shows the window as normal, i.e. neither maximized, minimized, nor fullscreen.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qwindow.xml#setWindowStates">setWindowStates</db:link>(<db:link xlink:href="qt.xml#WindowState-enum">Qt::WindowNoState</db:link>) and then <db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>(true).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setWindowStates">setWindowStates</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#visible-prop">setVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>[override virtual] QSize QWindow::size() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize size() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsurface.xml#size" role="function">QSurface::size() const</db:link>.</db:para>
<db:para>Returns the size of the window excluding any window frame</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeIncrement">
<db:title>QSize QWindow::sizeIncrement() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeIncrement</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeIncrement() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size increment of the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setSizeIncrement">setSizeIncrement</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startSystemMove">
<db:title>[since 5.15] bool QWindow::startSystemMove()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>startSystemMove</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool startSystemMove()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Start a system-specific move operation</db:para>
<db:para>Calling this will start an interactive move operation on the window by platforms that support it. The actual behavior may vary depending on the platform. Usually, it will make the window follow the mouse cursor until a mouse button is released.</db:para>
<db:para>On platforms that support it, this method of moving windows is preferred over <db:code>setPosition</db:code>, because it allows a more native look-and-feel of moving windows, e.g. letting the window manager snap this window against other windows, or special tiling or resizing behavior with animations when dragged to the edge of the screen. Furthermore, on some platforms such as Wayland, <db:code>setPosition</db:code> is not supported, so this is the only way the application can influence its position.</db:para>
<db:para>Returns true if the operation was supported by the system.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="startSystemResize">
<db:title>[since 5.15] bool QWindow::startSystemResize(Qt::Edges <db:emphasis>edges</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>startSystemResize</db:methodname>
<db:methodparam>
<db:type>Qt::Edges</db:type>
<db:parameter>edges</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool startSystemResize(Qt::Edges edges)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Start a system-specific resize operation</db:para>
<db:para>Calling this will start an interactive resize operation on the window by platforms that support it. The actual behavior may vary depending on the platform. Usually, it will make the window resize so that its edge follows the mouse cursor.</db:para>
<db:para>On platforms that support it, this method of resizing windows is preferred over <db:code>setGeometry</db:code>, because it allows a more native look and feel of resizing windows, e.g. letting the window manager snap this window against other windows, or special resizing behavior with animations when dragged to the edge of the screen.</db:para>
<db:para><db:code role="parameter">edges</db:code> should either be a single edge, or two adjacent edges (a corner). Other values are not allowed.</db:para>
<db:para>Returns true if the operation was supported by the system.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
</db:section>
<db:section xml:id="surfaceType">
<db:title>[override virtual] QSurface::SurfaceType QWindow::surfaceType() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSurface::SurfaceType</db:type>
<db:methodname>surfaceType</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSurface::SurfaceType surfaceType() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsurface.xml#surfaceType" role="function">QSurface::surfaceType() const</db:link>.</db:para>
<db:para>Returns the surface type of the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setSurfaceType">setSurfaceType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabletEvent">
<db:title>[virtual protected] void QWindow::tabletEvent(QTabletEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>tabletEvent</db:methodname>
<db:methodparam>
<db:type>QTabletEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void tabletEvent(QTabletEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle tablet press, move, and release events (<db:code role="parameter">ev</db:code>).</db:para>
<db:para>Proximity enter and leave events are not sent to windows, they are delivered to the application instance.</db:para>
</db:section>
<db:section xml:id="touchEvent">
<db:title>[virtual protected] void QWindow::touchEvent(QTouchEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>touchEvent</db:methodname>
<db:methodparam>
<db:type>QTouchEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void touchEvent(QTouchEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle touch events (<db:code role="parameter">ev</db:code>).</db:para>
</db:section>
<db:section xml:id="type">
<db:title>Qt::WindowType QWindow::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::WindowType</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::WindowType type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of the window.</db:para>
<db:para>This returns the part of the window flags that represents whether the window is a dialog, tooltip, popup, regular window, etc.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#flags-prop">flags</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#flags-prop">setFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unsetCursor">
<db:title>void QWindow::unsetCursor()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>unsetCursor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unsetCursor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Restores the default arrow cursor for this window.</db:para>
</db:section>
<db:section xml:id="vulkanInstance">
<db:title>QVulkanInstance *QWindow::vulkanInstance() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVulkanInstance *</db:type>
<db:methodname>vulkanInstance</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVulkanInstance * vulkanInstance() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the associated Vulkan instance if any was set, otherwise <db:code>nullptr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setVulkanInstance">setVulkanInstance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[virtual protected] void QWindow::wheelEvent(QWheelEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>wheelEvent</db:methodname>
<db:methodparam>
<db:type>QWheelEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void wheelEvent(QWheelEvent *ev)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this to handle mouse wheel or other wheel events (<db:code role="parameter">ev</db:code>).</db:para>
</db:section>
<db:section xml:id="winId">
<db:title>WId QWindow::winId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>WId</db:type>
<db:methodname>winId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">WId winId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the window's platform id.</db:para>
<db:para>For platforms where this id might be useful, the value returned will uniquely represent the window inside the corresponding screen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#screen">screen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowState">
<db:title>Qt::WindowState QWindow::windowState() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::WindowState</db:type>
<db:methodname>windowState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::WindowState windowState() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>the screen-occupation state of the window</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setWindowState">setWindowState</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#windowStates">windowStates</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowStateChanged">
<db:title>void QWindow::windowStateChanged(Qt::WindowState <db:emphasis>windowState</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>windowStateChanged</db:methodname>
<db:methodparam>
<db:type>Qt::WindowState</db:type>
<db:parameter>windowState</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void windowStateChanged(Qt::WindowState windowState)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:code role="parameter">windowState</db:code> changes, either by being set explicitly with <db:link xlink:href="qwindow.xml#setWindowStates">setWindowStates</db:link>(), or automatically when the user clicks one of the titlebar buttons or by other means.</db:para>
</db:section>
<db:section xml:id="windowStates">
<db:title>[since 5.10] Qt::WindowStates QWindow::windowStates() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::WindowStates</db:type>
<db:methodname>windowStates</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::WindowStates windowStates() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>the screen-occupation state of the window</db:para>
<db:para>The window can be in a combination of several states. For example, if the window is both minimized and maximized, the window will appear minimized, but clicking on the task bar entry will restore it to the maximized state.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setWindowStates">setWindowStates</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
