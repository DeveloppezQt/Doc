<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEngineUrlSchemeHandler Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebengineurlschemehandler.xml">QWebEngineUrlSchemeHandler</db:link> class is a base class for handling custom URL schemes.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEngineUrlSchemeHandler</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To implement a custom URL scheme for <db:link xlink:href="qtwebengine-module.xml">QtWebEngine</db:link>, you first have to create an instance of <db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link> and register it using <db:link xlink:href="qwebengineurlscheme.xml#registerScheme">QWebEngineUrlScheme::registerScheme</db:link>().</db:para>
<db:note>
<db:para>Make sure that you create and register the scheme object <db:emphasis>before</db:emphasis> the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> or <db:link xlink:href="qapplication.xml">QApplication</db:link> object is instantiated.</db:para>
</db:note>
<db:para>Then you must create a class derived from <db:link xlink:href="qwebengineurlschemehandler.xml">QWebEngineUrlSchemeHandler</db:link>, and reimplement the <db:link xlink:href="qwebengineurlschemehandler.xml#requestStarted">requestStarted</db:link>() method.</db:para>
<db:para>Finally, install the scheme handler object via <db:link xlink:href="qwebengineprofile.xml#installUrlSchemeHandler">QWebEngineProfile::installUrlSchemeHandler</db:link>() or <db:link xlink:href="qquickwebengineprofile.xml#installUrlSchemeHandler">QQuickWebEngineProfile::installUrlSchemeHandler</db:link>().</db:para>
<db:programlisting language="cpp">class MySchemeHandler : public QWebEngineUrlSchemeHandler
{
public:
    MySchemeHandler(QObject *parent = nullptr);
    void requestStarted(QWebEngineUrlRequestJob *request)
    {
        // ....
    }
};

int main(int argc, char **argv)
{
    QWebEngineUrlScheme scheme(&quot;myscheme&quot;);
    scheme.setSyntax(QWebEngineUrlScheme::Syntax::HostAndPort);
    scheme.setDefaultPort(2345);
    scheme.setFlags(QWebEngineUrlScheme::SecureScheme);
    QWebEngineUrlScheme::registerScheme(scheme);

    // ...
    QApplication app(argc, argv);
    // ...

    // installUrlSchemeHandler does not take ownership of the handler.
    MySchemeHandler *handler = new MySchemeHandler(parent);
    QWebEngineProfile::defaultProfile()-&amp;gt;installUrlSchemeHandler(&quot;myscheme&quot;, handler);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-webenginewidgets-webui-example.xml">WebEngine Widgets WebUI Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWebEngineUrlSchemeHandler">
<db:title>QWebEngineUrlSchemeHandler::QWebEngineUrlSchemeHandler(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEngineUrlSchemeHandler</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>Q_NULLPTR</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineUrlSchemeHandler(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new URL scheme handler.</db:para>
<db:para>The handler is created with the parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QWebEngineUrlSchemeHandler">
<db:title>[virtual] QWebEngineUrlSchemeHandler::~QWebEngineUrlSchemeHandler()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QWebEngineUrlSchemeHandler</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWebEngineUrlSchemeHandler()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Deletes a custom URL scheme handler.</db:para>
</db:section>
<db:section xml:id="requestStarted">
<db:title>[pure virtual] void QWebEngineUrlSchemeHandler::requestStarted(QWebEngineUrlRequestJob *<db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>requestStarted</db:methodname>
<db:methodparam>
<db:type>QWebEngineUrlRequestJob *</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestStarted(QWebEngineUrlRequestJob *request) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method is called whenever a request <db:code role="parameter">request</db:code> for the registered scheme is started.</db:para>
<db:para>This method must be reimplemented by all custom URL scheme handlers. The request is asynchronous and does not need to be handled right away.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlrequestjob.xml">QWebEngineUrlRequestJob</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
