<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPlaceManagerEngine Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qplacemanagerengine.xml">QPlaceManagerEngine</db:link> class provides an interface for implementers of <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> plugins who want to provide access to place functionality.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPlaceManagerEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPlaceManagerEngine is part of <db:simplelist><db:member>QtLocation-impl</db:member><db:member>QtLocation-places</db:member><db:member>QtLocation-places-manager</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:note>
<db:para>There are no source or binary compatibility guarantees for the backend classes. The API is only guaranteed to work with the Qt version it was developed against. API changes will however only be made in minor releases. (6.6, 6.7, and so on.)</db:para>
</db:note>
<db:para>Application developers need not concern themselves with the <db:link xlink:href="qplacemanagerengine.xml">QPlaceManagerEngine</db:link>. Backend implementers however will need to derive from <db:link xlink:href="qplacemanagerengine.xml">QPlaceManagerEngine</db:link> and provide implementations for the abstract virtual functions.</db:para>
<db:para>For more information on writing a backend see the <db:link xlink:href="location-places-backend.xml">Places Backend</db:link> documentation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPlaceManagerEngine">
<db:title>[explicit] QPlaceManagerEngine::QPlaceManagerEngine(const QVariantMap &amp;<db:emphasis>parameters</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QPlaceManagerEngine</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceManagerEngine(const QVariantMap &amp;parameters, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new engine with the specified <db:code role="parameter">parent</db:code>, using <db:code role="parameter">parameters</db:code> to pass any implementation specific data to the engine.</db:para>
</db:section>
<db:section xml:id="dtor.QPlaceManagerEngine">
<db:title>[virtual] QPlaceManagerEngine::~QPlaceManagerEngine()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPlaceManagerEngine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPlaceManagerEngine()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this engine.</db:para>
</db:section>
<db:section xml:id="category">
<db:title>[virtual] QPlaceCategory QPlaceManagerEngine::category(const QString &amp;<db:emphasis>categoryId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPlaceCategory</db:type>
<db:methodname>category</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>categoryId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceCategory category(const QString &amp;categoryId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the category corresponding to the given <db:code role="parameter">categoryId</db:code>.</db:para>
</db:section>
<db:section xml:id="categoryAdded">
<db:title>void QPlaceManagerEngine::categoryAdded(const QPlaceCategory &amp;<db:emphasis>category</db:emphasis>, const QString &amp;<db:emphasis>parentId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>categoryAdded</db:methodname>
<db:methodparam>
<db:type>const QPlaceCategory &amp;</db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>parentId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void categoryAdded(const QPlaceCategory &amp;category, const QString &amp;parentId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted if a <db:code role="parameter">category</db:code> has been added to the manager engine's datastore. The parent of the <db:code role="parameter">category</db:code> is specified by <db:code role="parameter">parentId</db:code>.</db:para>
<db:para>This signal is only emitted by manager engines that support the QPlaceManager::NotificationsFeature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanagerengine.xml#dataChanged">dataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="categoryRemoved">
<db:title>void QPlaceManagerEngine::categoryRemoved(const QString &amp;<db:emphasis>categoryId</db:emphasis>, const QString &amp;<db:emphasis>parentId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>categoryRemoved</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>categoryId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>parentId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void categoryRemoved(const QString &amp;categoryId, const QString &amp;parentId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the category corresponding to <db:code role="parameter">categoryId</db:code> has been removed from the manager engine's datastore. The parent of the removed category is specified by <db:code role="parameter">parentId</db:code>.</db:para>
<db:para>This signal is only emitted by manager engines that support the QPlaceManager::NotificationsFeature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanagerengine.xml#dataChanged">dataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="categoryUpdated">
<db:title>void QPlaceManagerEngine::categoryUpdated(const QPlaceCategory &amp;<db:emphasis>category</db:emphasis>, const QString &amp;<db:emphasis>parentId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>categoryUpdated</db:methodname>
<db:methodparam>
<db:type>const QPlaceCategory &amp;</db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>parentId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void categoryUpdated(const QPlaceCategory &amp;category, const QString &amp;parentId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted if a <db:code role="parameter">category</db:code> has been modified in the manager engine's datastore. The parent of the modified category is specified by <db:code role="parameter">parentId</db:code>.</db:para>
<db:para>This signal is only emitted by manager engines that support the QPlaceManager::NotificationsFeature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanagerengine.xml#dataChanged">dataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="childCategories">
<db:title>[virtual] QList&lt;QPlaceCategory&gt; QPlaceManagerEngine::childCategories(const QString &amp;<db:emphasis>parentId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPlaceCategory&gt;</db:type>
<db:methodname>childCategories</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>parentId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPlaceCategory&gt; childCategories(const QString &amp;parentId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of categories that are children of the category corresponding to <db:code role="parameter">parentId</db:code>. If <db:code role="parameter">parentId</db:code> is empty, all the top level categories are returned.</db:para>
</db:section>
<db:section xml:id="childCategoryIds">
<db:title>[virtual] QStringList QPlaceManagerEngine::childCategoryIds(const QString &amp;<db:emphasis>categoryId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>childCategoryIds</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>categoryId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList childCategoryIds(const QString &amp;categoryId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the child category identifiers of the category corresponding to <db:code role="parameter">categoryId</db:code>. If <db:code role="parameter">categoryId</db:code> is empty then all top level category identifiers are returned.</db:para>
</db:section>
<db:section xml:id="compatiblePlace">
<db:title>[virtual] QPlace QPlaceManagerEngine::compatiblePlace(const QPlace &amp;<db:emphasis>original</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPlace</db:type>
<db:methodname>compatiblePlace</db:methodname>
<db:methodparam>
<db:type>const QPlace &amp;</db:type>
<db:parameter>original</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlace compatiblePlace(const QPlace &amp;original) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pruned or modified version of the <db:code role="parameter">original</db:code> place which is suitable to be saved by the manager engine.</db:para>
<db:para>Only place details that are supported by this manager is present in the modified version. Manager specific data such as the place id, is not copied over from the <db:code role="parameter">original</db:code>.</db:para>
</db:section>
<db:section xml:id="constructIconUrl">
<db:title>[virtual] QUrl QPlaceManagerEngine::constructIconUrl(const QPlaceIcon &amp;<db:emphasis>icon</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>constructIconUrl</db:methodname>
<db:methodparam>
<db:type>const QPlaceIcon &amp;</db:type>
<db:parameter>icon</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl constructIconUrl(const QPlaceIcon &amp;icon, const QSize &amp;size) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:link xlink:href="qurl.xml">QUrl</db:link> QPlaceManagerEngine::constructIconUrl(const <db:link xlink:href="qplaceicon.xml">QPlaceIcon</db:link> &amp;icon, const <db:link xlink:href="qsize.xml">QSize</db:link> &amp;size)</db:para>
<db:para>Constructs an icon url from a given <db:code role="parameter">icon</db:code>, <db:code role="parameter">size</db:code>. The URL of the icon image that most closely matches the given parameters is returned.</db:para>
</db:section>
<db:section xml:id="dataChanged">
<db:title>void QPlaceManagerEngine::dataChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>dataChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dataChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>*</db:para>
<db:para>This signal is emitted by the engine if there are large scale changes to its underlying datastore and the engine considers these changes radical enough to require clients to reload all data.</db:para>
<db:para>If the signal is emitted, no other signals will be emitted for the associated changes.</db:para>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>void QPlaceManagerEngine::errorOccurred(QPlaceReply *<db:emphasis>reply</db:emphasis>, QPlaceReply::Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QPlaceReply *</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPlaceReply::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>errorString</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QPlaceReply *reply, QPlaceReply::Error error, const QString &amp;errorString)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an error has been detected in the processing of <db:code role="parameter">reply</db:code>. The <db:link xlink:href="qplacemanager.xml#finished">QPlaceManager::finished</db:link>() signal will probably follow.</db:para>
<db:para>The error will be described by the error code <db:code role="parameter">error</db:code>. If <db:code role="parameter">errorString</db:code> is not empty it will contain a textual description of the error meant for developers and not end users.</db:para>
<db:para>This signal and <db:link xlink:href="qplacereply.xml#errorOccurred">QPlaceReply::errorOccurred</db:link>() will be emitted at the same time.</db:para>
<db:note>
<db:para>Do not delete the <db:code role="parameter">reply</db:code> object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="finished">
<db:title>void QPlaceManagerEngine::finished(QPlaceReply *<db:emphasis>reply</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>finished</db:methodname>
<db:methodparam>
<db:type>QPlaceReply *</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void finished(QPlaceReply *reply)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when <db:code role="parameter">reply</db:code> has finished processing.</db:para>
<db:para>If reply-&gt;error() equals <db:link xlink:href="qplacereply.xml#Error-enum">QPlaceReply::NoError</db:link> then the processing finished successfully.</db:para>
<db:para>This signal and <db:link xlink:href="qplacereply.xml#finished">QPlaceReply::finished</db:link>() will be emitted at the same time.</db:para>
<db:note>
<db:para>Do not delete the <db:code role="parameter">reply</db:code> object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="getPlaceContent">
<db:title>[virtual] QPlaceContentReply *QPlaceManagerEngine::getPlaceContent(const QPlaceContentRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QPlaceContentReply *</db:type>
<db:methodname>getPlaceContent</db:methodname>
<db:methodparam>
<db:type>const QPlaceContentRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceContentReply * getPlaceContent(const QPlaceContentRequest &amp;request)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves content for a place according to the parameters specified in <db:code role="parameter">request</db:code>.</db:para>
</db:section>
<db:section xml:id="getPlaceDetails">
<db:title>[virtual] QPlaceDetailsReply *QPlaceManagerEngine::getPlaceDetails(const QString &amp;<db:emphasis>placeId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QPlaceDetailsReply *</db:type>
<db:methodname>getPlaceDetails</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>placeId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceDetailsReply * getPlaceDetails(const QString &amp;placeId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves details of place corresponding to the given <db:code role="parameter">placeId</db:code>.</db:para>
</db:section>
<db:section xml:id="initializeCategories">
<db:title>[virtual] QPlaceReply *QPlaceManagerEngine::initializeCategories()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QPlaceReply *</db:type>
<db:methodname>initializeCategories</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceReply * initializeCategories()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initializes the categories of the manager engine.</db:para>
</db:section>
<db:section xml:id="locales">
<db:title>[virtual] QList&lt;QLocale&gt; QPlaceManagerEngine::locales() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QLocale&gt;</db:type>
<db:methodname>locales</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QLocale&gt; locales() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of preferred locales. The locales are used as a hint to the manager engine for what language place and category details should be returned in.</db:para>
<db:para>If the first specified locale cannot be accommodated, the manager engine falls back to the next and so forth.</db:para>
<db:para>Support for locales may vary from provider to provider. For those that do support it, by default, the <db:link xlink:href="qlocale.xml#setDefault">global default locale</db:link> will be used. If the manager engine has no locales assigned to it, it implicitly uses the global default locale. For engines that do not support locales, the locale list is always empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanagerengine.xml#setLocales">setLocales</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="manager">
<db:title>[protected] QPlaceManager *QPlaceManagerEngine::manager() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlaceManager *</db:type>
<db:methodname>manager</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceManager * manager() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the manager instance used to create this engine.</db:para>
</db:section>
<db:section xml:id="managerName">
<db:title>QString QPlaceManagerEngine::managerName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>managerName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString managerName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name which this engine implementation uses to distinguish itself from the implementations provided by other plugins.</db:para>
<db:para>The manager name is automatically set to be the same as the QGeoServiceProviderFactory::providerName().</db:para>
</db:section>
<db:section xml:id="managerVersion">
<db:title>int QPlaceManagerEngine::managerVersion() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>managerVersion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int managerVersion() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the version of this engine implementation.</db:para>
<db:para>The manager version is automatically set to be the same as the QGeoServiceProviderFactory::providerVersion().</db:para>
</db:section>
<db:section xml:id="matchingPlaces">
<db:title>[virtual] QPlaceMatchReply *QPlaceManagerEngine::matchingPlaces(const QPlaceMatchRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QPlaceMatchReply *</db:type>
<db:methodname>matchingPlaces</db:methodname>
<db:methodparam>
<db:type>const QPlaceMatchRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceMatchReply * matchingPlaces(const QPlaceMatchRequest &amp;request)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reply which contains a list of places which correspond/match those specified in <db:code role="parameter">request</db:code>.</db:para>
</db:section>
<db:section xml:id="parentCategoryId">
<db:title>[virtual] QString QPlaceManagerEngine::parentCategoryId(const QString &amp;<db:emphasis>categoryId</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>parentCategoryId</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>categoryId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString parentCategoryId(const QString &amp;categoryId) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the parent category identifier of the category corresponding to <db:code role="parameter">categoryId</db:code>.</db:para>
</db:section>
<db:section xml:id="placeAdded">
<db:title>void QPlaceManagerEngine::placeAdded(const QString &amp;<db:emphasis>placeId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>placeAdded</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>placeId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void placeAdded(const QString &amp;placeId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted if a place has been added to the manager engine's datastore. The particular added place is specified by <db:code role="parameter">placeId</db:code>.</db:para>
<db:para>This signal is only emitted by manager engines that support the QPlaceManager::NotificationsFeature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanagerengine.xml#dataChanged">dataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="placeRemoved">
<db:title>void QPlaceManagerEngine::placeRemoved(const QString &amp;<db:emphasis>placeId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>placeRemoved</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>placeId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void placeRemoved(const QString &amp;placeId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted if a place has been removed from the manager engine's datastore. The particular place that has been removed is specified by <db:code role="parameter">placeId</db:code>.</db:para>
<db:para>This signal is only emitted by manager engines that support the QPlaceManager::NotificationsFeature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanagerengine.xml#dataChanged">dataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="placeUpdated">
<db:title>void QPlaceManagerEngine::placeUpdated(const QString &amp;<db:emphasis>placeId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>placeUpdated</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>placeId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void placeUpdated(const QString &amp;placeId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted if a place has been modified in the manager engine's datastore. The particular modified place is specified by <db:code role="parameter">placeId</db:code>.</db:para>
<db:para>This signal is only emitted by manager engines that support the QPlaceManager::NotificationsFeature.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanagerengine.xml#dataChanged">dataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeCategory">
<db:title>[virtual] QPlaceIdReply *QPlaceManagerEngine::removeCategory(const QString &amp;<db:emphasis>categoryId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QPlaceIdReply *</db:type>
<db:methodname>removeCategory</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>categoryId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceIdReply * removeCategory(const QString &amp;categoryId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the category corresponding to <db:code role="parameter">categoryId</db:code> from the manager engine's datastore.</db:para>
</db:section>
<db:section xml:id="removePlace">
<db:title>[virtual] QPlaceIdReply *QPlaceManagerEngine::removePlace(const QString &amp;<db:emphasis>placeId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QPlaceIdReply *</db:type>
<db:methodname>removePlace</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>placeId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceIdReply * removePlace(const QString &amp;placeId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the place corresponding to <db:code role="parameter">placeId</db:code> from the manager engine's datastore.</db:para>
</db:section>
<db:section xml:id="saveCategory">
<db:title>[virtual] QPlaceIdReply *QPlaceManagerEngine::saveCategory(const QPlaceCategory &amp;<db:emphasis>category</db:emphasis>, const QString &amp;<db:emphasis>parentId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QPlaceIdReply *</db:type>
<db:methodname>saveCategory</db:methodname>
<db:methodparam>
<db:type>const QPlaceCategory &amp;</db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>parentId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceIdReply * saveCategory(const QPlaceCategory &amp;category, const QString &amp;parentId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Saves a <db:code role="parameter">category</db:code> that is a child of the category specified by <db:code role="parameter">parentId</db:code>. An empty <db:code role="parameter">parentId</db:code> means <db:code role="parameter">category</db:code> is saved as a top level category.</db:para>
</db:section>
<db:section xml:id="savePlace">
<db:title>[virtual] QPlaceIdReply *QPlaceManagerEngine::savePlace(const QPlace &amp;<db:emphasis>place</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QPlaceIdReply *</db:type>
<db:methodname>savePlace</db:methodname>
<db:methodparam>
<db:type>const QPlace &amp;</db:type>
<db:parameter>place</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceIdReply * savePlace(const QPlace &amp;place)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Saves a specified <db:code role="parameter">place</db:code> to the manager engine's datastore.</db:para>
</db:section>
<db:section xml:id="search">
<db:title>[virtual] QPlaceSearchReply *QPlaceManagerEngine::search(const QPlaceSearchRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QPlaceSearchReply *</db:type>
<db:methodname>search</db:methodname>
<db:methodparam>
<db:type>const QPlaceSearchRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceSearchReply * search(const QPlaceSearchRequest &amp;request)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches for places according to the parameters specified in <db:code role="parameter">request</db:code>.</db:para>
</db:section>
<db:section xml:id="searchSuggestions">
<db:title>[virtual] QPlaceSearchSuggestionReply *QPlaceManagerEngine::searchSuggestions(const QPlaceSearchRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QPlaceSearchSuggestionReply *</db:type>
<db:methodname>searchSuggestions</db:methodname>
<db:methodparam>
<db:type>const QPlaceSearchRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceSearchSuggestionReply * searchSuggestions(const QPlaceSearchRequest &amp;request)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Requests a set of search term suggestions according to the parameters specified in <db:code role="parameter">request</db:code>.</db:para>
</db:section>
<db:section xml:id="setLocales">
<db:title>[virtual] void QPlaceManagerEngine::setLocales(const QList&lt;QLocale&gt; &amp;<db:emphasis>locales</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setLocales</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QLocale&gt; &amp;</db:type>
<db:parameter>locales</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLocales(const QList&lt;QLocale&gt; &amp;locales)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the list of preferred <db:code role="parameter">locales</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanagerengine.xml#locales">locales</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
