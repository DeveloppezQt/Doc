<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Procedural Texture Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to provide custom texture data from C++.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/proceduraltexture-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example makes use of <db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link> and <db:link xlink:href="qml-qtquick3d-texture.xml#textureData-prop">the textureData property</db:link> of Texture to provide texture data generated from C++ instead of loading it from a static asset.</db:para>
<db:para>First we define a C++ class for our texture data. We make it a subclass of <db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link>. This is not stricly necessary, since there are no virtual functions, but it is much more convenient to have everything in one class. We define the properties we are going to use, and add <db:link xlink:href="qqmlengine.xml#QML_NAMED_ELEMENT">QML_NAMED_ELEMENT</db:link> to make it available from QML:</db:para>
<db:programlisting language="cpp">class GradientTexture : public QQuick3DTextureData
{
    Q_OBJECT
    Q_PROPERTY(int height READ height WRITE setHeight NOTIFY heightChanged)
    Q_PROPERTY(int width READ width WRITE setWidth NOTIFY widthChanged)
    Q_PROPERTY(QColor startColor READ startColor WRITE setStartColor NOTIFY startColorChanged)
    Q_PROPERTY(QColor endColor READ endColor WRITE setEndColor NOTIFY endColorChanged)
    QML_NAMED_ELEMENT(GradientTexture)
    ...
</db:programlisting>
<db:para>We add a function to update the texture. It uses <db:link xlink:href="qquick3dtexturedata.xml#setSize">QQuick3DTextureData::setSize</db:link>, and <db:link xlink:href="qquick3dtexturedata.xml#setFormat">QQuick3DTextureData::setFormat</db:link> to configure the texture, and <db:link xlink:href="qquick3dtexturedata.xml#setTextureData">QQuick3DTextureData::setTextureData</db:link> to set the image data:</db:para>
<db:programlisting language="cpp">void GradientTexture::updateTexture()
{
    setSize(QSize(m_width, m_height));
    setFormat(QQuick3DTextureData::RGBA8);
    setHasTransparency(false);
    setTextureData(generateTexture());
}
</db:programlisting>
<db:para>The function <db:code>generateTexture</db:code> creates a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> of the correct size, and fills it with image data:</db:para>
<db:programlisting language="cpp">QByteArray GradientTexture::generateTexture()
{
    QByteArray imageData;
    // Create a horizontal gradient between startColor and endColor

    // Create a single scanline and reuse that data for each
    QByteArray gradientScanline;
    gradientScanline.resize(m_width * 4); // RGBA8

    for (int x = 0; x &amp;lt; m_width; ++x) {
        QColor color = linearInterpolate(m_startColor, m_endColor, x / float(m_width));
        int offset = x * 4;
        gradientScanline.data()[offset + 0] = char(color.red());
        gradientScanline.data()[offset + 1] = char(color.green());
        gradientScanline.data()[offset + 2] = char(color.blue());
        gradientScanline.data()[offset + 3] = char(255);
    }

    for (int y = 0; y &amp;lt; m_height; ++y)
        imageData += gradientScanline;

    return imageData;
}
</db:programlisting>
<db:para>We call <db:code>updateTexture</db:code> each time a property is changed:</db:para>
<db:programlisting language="cpp">void GradientTexture::setStartColor(QColor startColor)
{
    if (m_startColor == startColor)
        return;

    m_startColor = startColor;
    emit startColorChanged(m_startColor);
    updateTexture();
}
</db:programlisting>
<db:para>Finally, we can use our new texture from QML:</db:para>
<db:programlisting language="qml">Model {
    source: &quot;#Cube&quot;

    materials: DefaultMaterial {
        diffuseMap: Texture {
            textureData: GradientTexture {
                id: gradientTexture
                startColor: &quot;#00dbde&quot;
                endColor: &quot;#fc00ff&quot;
                width: size256.checked ? 256 : 16
                height: width
            }

            minFilter: size256.checked ? Texture.Linear : Texture.Nearest
            magFilter: size256.checked ? Texture.Linear : Texture.Nearest
        }
    }
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="proceduraltexture/CMakeLists.txt">proceduraltexture/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="proceduraltexture/gradienttexture.cpp">proceduraltexture/gradienttexture.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="proceduraltexture/gradienttexture.h">proceduraltexture/gradienttexture.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="proceduraltexture/main.cpp">proceduraltexture/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="proceduraltexture/main.qml">proceduraltexture/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="proceduraltexture/proceduraltexture.pro">proceduraltexture/proceduraltexture.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="proceduraltexture/qml.qrc">proceduraltexture/qml.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
