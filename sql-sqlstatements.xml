<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Executing SQL Statements</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="sql-connecting.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Connecting to Databases"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="sql-model.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Using the SQL Model Classes"/></db:extendedlink>
<db:abstract>
<db:para>Qt SQL Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> class provides an interface for executing SQL statements and navigating through the result set of a query.</db:para>
<db:para>The <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> and <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> classes described in the next section provide a higher-level interface for accessing databases. If you are unfamiliar with SQL, you might want to skip directly to the next section (<db:link xlink:href="sql-model.xml">Using the SQL Model Classes</db:link>).</db:para>
<db:section xml:id="executing-a-query">
<db:title>Executing a Query</db:title>
<db:para>To execute an SQL statement, simply create a <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> object and call <db:link xlink:href="qsqlquery.xml#exec-1">QSqlQuery::exec</db:link>() like this:</db:para>
<db:programlisting language="cpp">    QSqlQuery query;
    query.exec(&quot;SELECT name, salary FROM employee WHERE salary &amp;gt; 50000&quot;);
</db:programlisting>
<db:para>The <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> constructor accepts an optional <db:link xlink:href="qsqldatabase.xml">QSqlDatabase</db:link> object that specifies which database connection to use. In the example above, we don't specify any connection, so the default connection is used.</db:para>
<db:para>If an error occurs, <db:link xlink:href="qsqlquery.xml#exec-1">exec</db:link>() returns <db:code>false</db:code>. The error is then available as <db:link xlink:href="qsqlquery.xml#lastError">QSqlQuery::lastError</db:link>().</db:para>
</db:section>
<db:section xml:id="navigating-the-result-set">
<db:title>Navigating the Result Set</db:title>
<db:para><db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> provides access to the result set one record at a time. After the call to <db:link xlink:href="qsqlquery.xml#exec-1">exec</db:link>(), <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link>'s internal pointer is located one position <db:emphasis>before</db:emphasis> the first record. We must call <db:link xlink:href="qsqlquery.xml#next">QSqlQuery::next</db:link>() once to advance to the first record, then <db:link xlink:href="qsqlquery.xml#next">next</db:link>() again repeatedly to access the other records, until it returns <db:code>false</db:code>. Here's a typical loop that iterates over all the records in order:</db:para>
<db:programlisting language="cpp">    while (query.next()) {
        QString name = query.value(0).toString();
        int salary = query.value(1).toInt();
        qDebug() &amp;lt;&amp;lt; name &amp;lt;&amp;lt; salary;
    }
</db:programlisting>
<db:para>The <db:link xlink:href="qsqlquery.xml#value">QSqlQuery::value</db:link>() function returns the value of a field in the current record. Fields are specified as zero-based indexes. <db:link xlink:href="qsqlquery.xml#value">QSqlQuery::value</db:link>() returns a <db:link xlink:href="qvariant.xml">QVariant</db:link>, a type that can hold various C++ and core Qt data types such as <db:code>int</db:code>, <db:link xlink:href="qstring.xml">QString</db:link>, and <db:link xlink:href="qbytearray.xml">QByteArray</db:link>. The different database types are automatically mapped into the closest Qt equivalent. In the code snippet, we call <db:link xlink:href="qvariant.xml#toString">QVariant::toString</db:link>() and <db:link xlink:href="qvariant.xml#toInt">QVariant::toInt</db:link>() to convert variants to <db:link xlink:href="qstring.xml">QString</db:link> and <db:code>int</db:code>.</db:para>
<db:para>For an overview of the recommended types for use with Qt-supported Databases, please refer to <db:link xlink:href="sql-types.xml">this table</db:link>.</db:para>
<db:para>You can navigate within the dataset using <db:link xlink:href="qsqlquery.xml#next">QSqlQuery::next</db:link>(), <db:link xlink:href="qsqlquery.xml#previous">QSqlQuery::previous</db:link>(), <db:link xlink:href="qsqlquery.xml#first">QSqlQuery::first</db:link>(), <db:link xlink:href="qsqlquery.xml#last">QSqlQuery::last</db:link>(), and <db:link xlink:href="qsqlquery.xml#seek">QSqlQuery::seek</db:link>(). The current row index is returned by <db:link xlink:href="qsqlquery.xml#at">QSqlQuery::at</db:link>(), and the total number of rows in the result set is available as <db:link xlink:href="qsqlquery.xml#size">QSqlQuery::size</db:link>() for databases that support it.</db:para>
<db:para>To determine whether a database driver supports a given feature, use <db:link xlink:href="qsqldriver.xml#hasFeature">QSqlDriver::hasFeature</db:link>(). In the following example, we call <db:link xlink:href="qsqlquery.xml#size">QSqlQuery::size</db:link>() to determine the size of a result set of the underlying database supports that feature; otherwise, we navigate to the last record and use the query's position to tell us how many records there are.</db:para>
<db:programlisting language="cpp">    QSqlQuery query;
    int numRows;
    query.exec(&quot;SELECT name, salary FROM employee WHERE salary &amp;gt; 50000&quot;);

    QSqlDatabase defaultDB = QSqlDatabase::database();
    if (defaultDB.driver()-&amp;gt;hasFeature(QSqlDriver::QuerySize)) {
        numRows = query.size();
    } else {
        // this can be very slow
        query.last();
        numRows = query.at() + 1;
    }
</db:programlisting>
<db:para>If you navigate within a result set, and use next() and seek() only for browsing forward, you can call <db:link xlink:href="qsqlquery.xml#setForwardOnly">QSqlQuery::setForwardOnly</db:link>(true) before calling exec(). This is an easy optimization that will speed up the query significantly when operating on large result sets.</db:para>
</db:section>
<db:section xml:id="inserting-updating-and-deleting-records">
<db:title>Inserting, Updating, and Deleting Records</db:title>
<db:para><db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> can execute arbitrary SQL statements, not just <db:code>SELECT</db:code>s. The following example inserts a record into a table using <db:code>INSERT</db:code>:</db:para>
<db:programlisting language="cpp">    QSqlQuery query;
    query.exec(&quot;INSERT INTO employee (id, name, salary) &quot;
               &quot;VALUES (1001, 'Thad Beaumont', 65000)&quot;);
</db:programlisting>
<db:para>If you want to insert many records at the same time, it is often more efficient to separate the query from the actual values being inserted. This can be done using placeholders. Qt supports two placeholder syntaxes: named binding and positional binding. Here's an example of named binding:</db:para>
<db:programlisting language="cpp">    QSqlQuery query;
    query.prepare(&quot;INSERT INTO employee (id, name, salary) &quot;
                  &quot;VALUES (:id, :name, :salary)&quot;);
    query.bindValue(&quot;:id&quot;, 1001);
    query.bindValue(&quot;:name&quot;, &quot;Thad Beaumont&quot;);
    query.bindValue(&quot;:salary&quot;, 65000);
    query.exec();
</db:programlisting>
<db:para>Here's an example of positional binding:</db:para>
<db:programlisting language="cpp">    QSqlQuery query;
    query.prepare(&quot;INSERT INTO employee (id, name, salary) &quot;
                  &quot;VALUES (?, ?, ?)&quot;);
    query.addBindValue(1001);
    query.addBindValue(&quot;Thad Beaumont&quot;);
    query.addBindValue(65000);
    query.exec();
</db:programlisting>
<db:para>Both syntaxes work with all database drivers provided by Qt. If the database supports the syntax natively, Qt simply forwards the query to the DBMS; otherwise, Qt simulates the placeholder syntax by preprocessing the query. The actual query that ends up being executed by the DBMS is available as <db:link xlink:href="qsqlquery.xml#executedQuery">QSqlQuery::executedQuery</db:link>().</db:para>
<db:para>When inserting multiple records, you only need to call <db:link xlink:href="qsqlquery.xml#prepare">QSqlQuery::prepare</db:link>() once. Then you call <db:link xlink:href="qsqlquery.xml#bindValue">bindValue</db:link>() or <db:link xlink:href="qsqlquery.xml#addBindValue">addBindValue</db:link>() followed by <db:link xlink:href="qsqlquery.xml#exec-1">exec</db:link>() as many times as necessary.</db:para>
<db:para>Besides performance, one advantage of placeholders is that you can easily specify arbitrary values without having to worry about escaping special characters.</db:para>
<db:para>Updating a record is similar to inserting it into a table:</db:para>
<db:programlisting language="cpp">    QSqlQuery query;
    query.exec(&quot;UPDATE employee SET salary = 70000 WHERE id = 1003&quot;);
</db:programlisting>
<db:para>You can also use named or positional binding to associate parameters to actual values.</db:para>
<db:para>Finally, here's an example of a <db:code>DELETE</db:code> statement:</db:para>
<db:programlisting language="cpp">    QSqlQuery query;
    query.exec(&quot;DELETE FROM employee WHERE id = 1007&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="transactions">
<db:title>Transactions</db:title>
<db:para>If the underlying database engine supports transactions, <db:link xlink:href="qsqldriver.xml#hasFeature">QSqlDriver::hasFeature</db:link>(<db:link xlink:href="qsqldriver.xml#DriverFeature-enum">QSqlDriver::Transactions</db:link>) will return true. You can use <db:link xlink:href="qsqldatabase.xml#transaction">QSqlDatabase::transaction</db:link>() to initiate a transaction, followed by the SQL commands you want to execute within the context of the transaction, and then either <db:link xlink:href="qsqldatabase.xml#commit">QSqlDatabase::commit</db:link>() or <db:link xlink:href="qsqldatabase.xml#rollback">QSqlDatabase::rollback</db:link>(). When using transactions you must start the transaction before you create your query.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QSqlDatabase::database().transaction();
    QSqlQuery query;
    query.exec(&quot;SELECT id FROM employee WHERE name = 'Torild Halvorsen'&quot;);
    if (query.next()) {
        int employeeId = query.value(0).toInt();
        query.exec(&quot;INSERT INTO project (id, name, ownerid) &quot;
                   &quot;VALUES (201, 'Manhattan Project', &quot;
                   + QString::number(employeeId) + ')');
    }
    QSqlDatabase::database().commit();
</db:programlisting>
<db:para>Transactions can be used to ensure that a complex operation is atomic (for example, looking up a foreign key and creating a record), or to provide a means of canceling a complex change in the middle.</db:para>
</db:section>
</db:article>
