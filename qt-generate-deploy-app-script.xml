<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_generate_deploy_app_script</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Generate a deployment script for an application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Generate a deployment script for an application.</db:para>
<db:para>The command is defined in the Core component of the Qt6 package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Core)
</db:programlisting>
<db:para>This command was introduced in Qt 6.3.</db:para>
<db:note>
<db:para>This command is currently only supported on Windows, macOS, and Linux.</db:para>
</db:note>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_generate_deploy_app_script(
    TARGET target
    OUTPUT_SCRIPT &lt;var&gt;
    [NO_TRANSLATIONS]
    [NO_COMPILER_RUNTIME]
    [NO_UNSUPPORTED_PLATFORM_ERROR]
    [DEPLOY_TOOL_OPTIONS ...]
    [PRE_INCLUDE_REGEXES regexes...]
    [PRE_EXCLUDE_REGEXES regexes...]
    [POST_INCLUDE_REGEXES regexes...]
    [POST_EXCLUDE_REGEXES regexes...]
    [POST_INCLUDE_FILES files...]
    [POST_EXCLUDE_FILES files...]
)
</db:programlisting>
<db:para>If <db:link xlink:href="">versionless commands</db:link> are disabled, use qt6_generate_deploy_app_script() instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>Installing an executable target with <db:link xlink:href="https://cmake.org/cmake/help/latest/command/install.html#targets">install(TARGETS)</db:link> only installs the target's executable (except for macOS app bundles, which will copy the whole bundle). You need to explicitly install any other libraries or plugins the executable depends on yourself. qt_generate_deploy_app_script() is a convenience command intended to simplify that process. It expects the application to follow Qt's recommended install directory structure fairly closely. That structure is based on CMake's default install layout, as determined by <db:link xlink:href="https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html">GNUInstallDirs</db:link> (except for macOS app bundles, which follow Apple's requirements instead).</db:para>
<db:para>The command generates a script whose name will be stored in the variable named by the OUTPUT_SCRIPT option. That script is only written at CMake generation time. It is intended to be used with the <db:link xlink:href="https://cmake.org/cmake/help/latest/command/install.html#script">install(SCRIPT)</db:link> command, which should come after the application's target has been installed using <db:link xlink:href="https://cmake.org/cmake/help/latest/command/install.html#targets">install(TARGETS)</db:link>.</db:para>
<db:para>The deployment script will call <db:link xlink:href="qt-deploy-runtime-dependencies.xml">qt_deploy_runtime_dependencies()</db:link> with a suitable set of options for the standard install layout. Currently, this is only implemented for</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>macOS app bundles built on a macOS host,</db:para>
</db:listitem>
<db:listitem>
<db:para>Linux executables built on a Linux host,</db:para>
</db:listitem>
<db:listitem>
<db:para>and Windows executables built on a Windows host.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Cross-building a Windows executable on a Linux host, as well as similar scenarios, are not currently supported. Calling qt_generate_deploy_app_script() in such a case will result in a fatal error, unless the NO_UNSUPPORTED_PLATFORM_ERROR option is given.</db:para>
<db:para>On platforms other than macOS, Qt translations are automatically deployed. To inhibit this behavior, specify NO_TRANSLATIONS. Use <db:link xlink:href="qt-deploy-translations.xml">qt_deploy_translations()</db:link> to deploy translations in a customized way.</db:para>
<db:para>For Windows desktop applications, the required runtime files for the compiler are also installed by default. To prevent this, specify NO_COMPILER_RUNTIME.</db:para>
<db:para>Since Qt 6.7, you can use DEPLOY_TOOL_OPTIONS to pass additional options to the underlying deployment tool. This only has an effect if the underlying deployment tool is either macdeployqt or windeployqt.</db:para>
<db:para>For deploying a QML application, use <db:link xlink:href="">qt_generate_deploy_qml_app_script()</db:link> instead.</db:para>
<db:para>For generating a custom deployment script, use <db:link xlink:href="qt-generate-deploy-script.xml">qt_generate_deploy_script</db:link>.</db:para>
<db:para>The options PRE_INCLUDE_REGEXES, PRE_EXCLUDE_REGEXES, POST_INCLUDE_REGEXES, POST_EXCLUDE_REGEXES, POST_INCLUDE_FILES, and POST_EXCLUDE_FILES can be specified to control the deployment of runtime dependencies. These options do not apply to all platforms and are forwarded unmodified to <db:link xlink:href="qt-deploy-runtime-dependencies.xml">qt_deploy_runtime_dependencies()</db:link>.</db:para>
</db:section>
<db:section xml:id="example">
<db:title>Example</db:title>
<db:para>The following example shows how to deploy an application MyApp.</db:para>
<db:programlisting language="cpp" role="bad">cmake_minimum_required(VERSION 3.16...3.22)
project(MyThings)

find_package(Qt6 REQUIRED COMPONENTS Core)
qt_standard_project_setup()

qt_add_executable(MyApp main.cpp)

install(TARGETS MyApp
    BUNDLE  DESTINATION .
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

qt_generate_deploy_app_script(
    TARGET MyApp
    OUTPUT_SCRIPT deploy_script
    NO_UNSUPPORTED_PLATFORM_ERROR
)
install(SCRIPT ${deploy_script})
</db:programlisting>
<db:para>The following example shows how to use the DEPLOY_TOOL_OPTIONS parameter to pass different options to macdeployqt and windeployqt.</db:para>
<db:programlisting language="cpp" role="bad">set(deploy_tool_options_arg &quot;&quot;)
if(APPLE)
    set(deploy_tool_options_arg --hardened-runtime)
elseif(WIN32)
    set(deploy_tool_options_arg --no-compiler-runtime)
endif()

qt_generate_deploy_app_script(
    TARGET MyApp
    OUTPUT_SCRIPT deploy_script
    NO_UNSUPPORTED_PLATFORM_ERROR
    DEPLOY_TOOL_OPTIONS ${deploy_tool_options_arg}
)
install(SCRIPT ${deploy_script})
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-standard-project-setup.xml">qt_standard_project_setup()</db:link></db:member>
<db:member><db:link xlink:href="qt-generate-deploy-script.xml">qt_generate_deploy_script()</db:link></db:member>
<db:member><db:link xlink:href="">qt_generate_deploy_qml_app_script()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
