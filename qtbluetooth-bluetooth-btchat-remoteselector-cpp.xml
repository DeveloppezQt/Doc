<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Bluetooth Chat Example</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An example showing communication through Bluetooth.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtBluetooth module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;remoteselector.h&quot;
#include &quot;ui_remoteselector.h&quot;

#include &amp;lt;QtBluetooth/qbluetoothlocaldevice.h&amp;gt;
#include &amp;lt;QtBluetooth/qbluetoothservicediscoveryagent.h&amp;gt;

QT_USE_NAMESPACE

RemoteSelector::RemoteSelector(const QBluetoothAddress &amp;amp;localAdapter, QWidget *parent)
    :   QDialog(parent), ui(new Ui::RemoteSelector)
{
    ui-&amp;gt;setupUi(this);

    m_discoveryAgent = new QBluetoothServiceDiscoveryAgent(localAdapter);

    connect(m_discoveryAgent, SIGNAL(serviceDiscovered(QBluetoothServiceInfo)),
            this, SLOT(serviceDiscovered(QBluetoothServiceInfo)));
    connect(m_discoveryAgent, SIGNAL(finished()), this, SLOT(discoveryFinished()));
    connect(m_discoveryAgent, SIGNAL(canceled()), this, SLOT(discoveryFinished()));
}

RemoteSelector::~RemoteSelector()
{
    delete ui;
    delete m_discoveryAgent;
}

void RemoteSelector::startDiscovery(const QBluetoothUuid &amp;amp;uuid)
{
    ui-&amp;gt;status-&amp;gt;setText(tr(&quot;Scanning...&quot;));
    if (m_discoveryAgent-&amp;gt;isActive())
        m_discoveryAgent-&amp;gt;stop();

    ui-&amp;gt;remoteDevices-&amp;gt;clear();

    m_discoveryAgent-&amp;gt;setUuidFilter(uuid);
    m_discoveryAgent-&amp;gt;start(QBluetoothServiceDiscoveryAgent::FullDiscovery);

}

void RemoteSelector::stopDiscovery()
{
    if (m_discoveryAgent){
        m_discoveryAgent-&amp;gt;stop();
    }
}

QBluetoothServiceInfo RemoteSelector::service() const
{
    return m_service;
}

void RemoteSelector::serviceDiscovered(const QBluetoothServiceInfo &amp;amp;serviceInfo)
{
#if 0
    qDebug() &amp;lt;&amp;lt; &quot;Discovered service on&quot;
             &amp;lt;&amp;lt; serviceInfo.device().name() &amp;lt;&amp;lt; serviceInfo.device().address().toString();
    qDebug() &amp;lt;&amp;lt; &quot;\tService name:&quot; &amp;lt;&amp;lt; serviceInfo.serviceName();
    qDebug() &amp;lt;&amp;lt; &quot;\tDescription:&quot;
             &amp;lt;&amp;lt; serviceInfo.attribute(QBluetoothServiceInfo::ServiceDescription).toString();
    qDebug() &amp;lt;&amp;lt; &quot;\tProvider:&quot;
             &amp;lt;&amp;lt; serviceInfo.attribute(QBluetoothServiceInfo::ServiceProvider).toString();
    qDebug() &amp;lt;&amp;lt; &quot;\tL2CAP protocol service multiplexer:&quot;
             &amp;lt;&amp;lt; serviceInfo.protocolServiceMultiplexer();
    qDebug() &amp;lt;&amp;lt; &quot;\tRFCOMM server channel:&quot; &amp;lt;&amp;lt; serviceInfo.serverChannel();
#endif
    QMapIterator&amp;lt;QListWidgetItem *, QBluetoothServiceInfo&amp;gt; i(m_discoveredServices);
    while (i.hasNext()){
        i.next();
        if (serviceInfo.device().address() == i.value().device().address()){
            return;
        }
    }

    QString remoteName;
    if (serviceInfo.device().name().isEmpty())
        remoteName = serviceInfo.device().address().toString();
    else
        remoteName = serviceInfo.device().name();

    QListWidgetItem *item =
        new QListWidgetItem(QString::fromLatin1(&quot;%1 %2&quot;).arg(remoteName,
                                                             serviceInfo.serviceName()));

    m_discoveredServices.insert(item, serviceInfo);
    ui-&amp;gt;remoteDevices-&amp;gt;addItem(item);
}

void RemoteSelector::discoveryFinished()
{
    ui-&amp;gt;status-&amp;gt;setText(tr(&quot;Select the chat service to connect to.&quot;));
}

void RemoteSelector::on_remoteDevices_itemActivated(QListWidgetItem *item)
{
    qDebug() &amp;lt;&amp;lt; &quot;got click&quot; &amp;lt;&amp;lt; item-&amp;gt;text();
    m_service = m_discoveredServices.value(item);
    if (m_discoveryAgent-&amp;gt;isActive())
        m_discoveryAgent-&amp;gt;stop();

    accept();
}

void RemoteSelector::on_cancelButton_clicked()
{
    reject();
}

</db:programlisting>
</db:article>
