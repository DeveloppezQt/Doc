<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Arrow Pad Example</db:title>
<db:productname>QtLinguist</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Linguist Manual</db:titleabbrev>
<db:abstract>
<db:para>Understanding the Qt Linguist <db:emphasis>contexts</db:emphasis> concept and using two or more languages.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/linguist-arrowpad_en.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We will use two translations, French and Dutch, although there is no effective limit on the number of possible translations that can be used with an application.</db:para>
<db:para>When using qmake, the relevant lines in <db:code>arrowpad.pro</db:code> are:</db:para>
<db:programlisting language="cpp">HEADERS      = arrowpad.h \
               mainwindow.h
SOURCES      = arrowpad.cpp \
               main.cpp \
               mainwindow.cpp

TRANSLATIONS = arrowpad_fr.ts \
               arrowpad_nl.ts
</db:programlisting>
<db:para>When using CMake, the relevant lines in <db:code>CMakeLists.txt</db:code> are:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS LinguistTools)

qt6_add_translations(arrowpad
    TS_FILES arrowpad_fr.ts arrowpad_nl.ts
    QM_FILES_OUTPUT_VARIABLE qm_files)
install(FILES ${qm_files} DESTINATION ${INSTALL_EXAMPLEDIR})
</db:programlisting>
<db:para>Run <db:code>lupdate</db:code>. It should produce two identical message files <db:code>arrowpad_fr.ts</db:code> and <db:code>arrowpad_nl.ts</db:code>. These files will contain all the source texts marked for translation with <db:code>tr()</db:code> calls and their contexts.</db:para>
<db:para>When using qmake, <db:code>lupdate</db:code> must be run manually:</db:para>
<db:programlisting language="cpp">lupdate arrowpad.pro
</db:programlisting>
<db:para>When using CMake, build the <db:code>update_translations</db:code> target to run <db:code>lupdate</db:code>:</db:para>
<db:programlisting language="cpp">cmake --build . --target update_translations
</db:programlisting>
<db:para>See the <db:link xlink:href="qtlinguist-index.xml">Qt Linguist Manual</db:link> for more information about translating Qt applications.</db:para>
<db:section xml:id="line-by-line-walkthrough">
<db:title>Line by Line Walkthrough</db:title>
<db:para>In <db:code>arrowpad.h</db:code> we define the <db:code>ArrowPad</db:code> subclass which is a subclass of <db:link xlink:href="qwidget.xml">QWidget</db:link>. In the screenshot above, the central widget with the four buttons is an <db:code>ArrowPad</db:code>.</db:para>
<db:programlisting language="cpp">class ArrowPad : public QWidget
{
    Q_OBJECT
</db:programlisting>
<db:para>When <db:code>lupdate</db:code> is run it not only extracts the source texts but it also groups them into contexts. A context is the name of the class in which the source text appears. Thus, in this example, &quot;ArrowPad&quot; is a context: it is the context of the texts in the <db:code>ArrowPad</db:code> class. The <db:code>Q_OBJECT</db:code> macro defines <db:code>tr(x)</db:code> in <db:code>ArrowPad</db:code> like this:</db:para>
<db:programlisting language="cpp">qApp-&amp;gt;translate(&quot;ArrowPad&quot;, x)
</db:programlisting>
<db:para>Knowing which class each source text appears in enables <db:emphasis>Qt Linguist</db:emphasis> to group texts that are logically related together, e.g. all the text in a dialog will have the context of the dialog's class name and will be shown together. This provides useful information for the translator since the context in which text appears may influence how it should be translated. For some translations keyboard accelerators may need to be changed and having all the source texts in a particular context (class) grouped together makes it easier for the translator to perform any accelerator changes without introducing conflicts.</db:para>
<db:para>In <db:code>arrowpad.cpp</db:code> we implement the <db:code>ArrowPad</db:code> class.</db:para>
<db:programlisting language="cpp">    upButton = new QPushButton(tr(&quot;&amp;amp;Up&quot;));
    downButton = new QPushButton(tr(&quot;&amp;amp;Down&quot;));
    leftButton = new QPushButton(tr(&quot;&amp;amp;Left&quot;));
    rightButton = new QPushButton(tr(&quot;&amp;amp;Right&quot;));
</db:programlisting>
<db:para>We call <db:code>ArrowPad::tr()</db:code> for each button's label since the labels are user-visible text.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/linguist-arrowpad_en.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT
</db:programlisting>
<db:para>In the screenshot above, the whole window is a <db:code>MainWindow</db:code>. This is defined in the <db:code>mainwindow.h</db:code> header file. Here too, we use <db:code>Q_OBJECT</db:code>, so that <db:code>MainWindow</db:code> will become a context in <db:emphasis>Qt Linguist</db:emphasis>.</db:para>
<db:programlisting language="cpp">    arrowPad = new ArrowPad;
</db:programlisting>
<db:para>In the implementation of <db:code>MainWindow</db:code>, <db:code>mainwindow.cpp</db:code>, we create an instance of our <db:code>ArrowPad</db:code> class.</db:para>
<db:programlisting language="cpp">    exitAct = new QAction(tr(&quot;E&amp;amp;xit&quot;), this);
    exitAct-&amp;gt;setShortcuts(QKeySequence::Quit);
    connect(exitAct, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::close);
</db:programlisting>
<db:para>We also call <db:code>MainWindow::tr()</db:code> twice, once for the action and once for the shortcut.</db:para>
<db:para>Note the use of <db:code>tr()</db:code> to support different keys in other languages. &quot;Ctrl+Q&quot; is a good choice for Quit in English, but a Dutch translator might want to use &quot;Ctrl+A&quot; (for Afsluiten) and a German translator &quot;Strg+E&quot; (for Beenden). When using <db:code>tr()</db:code> for <db:guilabel>Ctrl</db:guilabel> key accelerators, the two argument form should be used with the second argument describing the function that the accelerator performs.</db:para>
<db:para>Our <db:code>main()</db:code> function is defined in <db:code>main.cpp</db:code> as usual.</db:para>
<db:programlisting language="cpp">    QTranslator translator;
    if (translator.load(locale, u&quot;arrowpad&quot;_s, u&quot;_&quot;_s))
        app.installTranslator(&amp;amp;translator);
</db:programlisting>
<db:para>We choose which translation to use according to the current locale. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>() can be influenced by setting the <db:code>LANG</db:code> environment variable, for example. Notice that the use of a naming convention that incorporates the locale for <db:code>.qm</db:code> message files, (and TS files), makes it easy to implement choosing the translation file according to locale.</db:para>
<db:para>If there is no QM message file for the locale chosen the original source text will be used and no error raised.</db:para>
</db:section>
<db:section xml:id="translating-to-french-and-dutch">
<db:title>Translating to French and Dutch</db:title>
<db:para>We'll begin by translating the example application into French. Start <db:emphasis>Qt Linguist</db:emphasis> with <db:code>arrowpad_fr.ts</db:code>. You should get the seven source texts (&quot;&amp;Up&quot;, &quot;&amp;Left&quot;, etc.) grouped in two contexts (&quot;ArrowPad&quot; and &quot;MainWindow&quot;).</db:para>
<db:para>Now, enter the following translations:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>ArrowPad</db:code></db:para>
<db:itemizedlist>
<db:listitem>
<db:para>&amp;Up - &amp;Haut</db:para>
</db:listitem>
<db:listitem>
<db:para>&amp;Left - &amp;Gauche</db:para>
</db:listitem>
<db:listitem>
<db:para>&amp;Right - &amp;Droite</db:para>
</db:listitem>
<db:listitem>
<db:para>&amp;Down - &amp;Bas</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:code>MainWindow</db:code></db:para>
<db:itemizedlist>
<db:listitem>
<db:para>E&amp;xit - &amp;Quitter</db:para>
</db:listitem>
<db:listitem>
<db:para>Ctrl+Q - Ctrl+Q</db:para>
</db:listitem>
<db:listitem>
<db:para>&amp;File - &amp;Fichier</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:para>It's quickest to press <db:guilabel>Alt+D</db:guilabel> (which clicks the <db:guilabel>Done &amp; Next</db:guilabel> button) after typing each translation, since this marks the translation as done and moves on to the next source text.</db:para>
<db:para>Save the file and do the same for Dutch working with <db:code>arrowpad_nl.ts</db:code>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>ArrowPad</db:code></db:para>
<db:itemizedlist>
<db:listitem>
<db:para>&amp;Up - &amp;Omhoog</db:para>
</db:listitem>
<db:listitem>
<db:para>&amp;Left - &amp;Links</db:para>
</db:listitem>
<db:listitem>
<db:para>&amp;Right - &amp;Rechts</db:para>
</db:listitem>
<db:listitem>
<db:para>&amp;Down - Omlaa&amp;g</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:code>MainWindow</db:code></db:para>
<db:itemizedlist>
<db:listitem>
<db:para>E&amp;xit - &amp;Afsluiten</db:para>
</db:listitem>
<db:listitem>
<db:para>Ctrl+Q - Ctrl+A</db:para>
</db:listitem>
<db:listitem>
<db:para>File - &amp;Bestand</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:para>We have to convert the <db:code>tt1_fr.ts</db:code> and <db:code>tt1_nl.ts</db:code> translation source files into QM files. We could use <db:emphasis>Qt Linguist</db:emphasis> as we've done before; however using the command line tool <db:code>lrelease</db:code> ensures that <db:emphasis>all</db:emphasis> the QM files for the application are created without us having to remember to load and <db:guilabel>File|Release</db:guilabel> each one individually from <db:emphasis>Qt Linguist</db:emphasis>.</db:para>
<db:para>Type</db:para>
<db:programlisting language="cpp">lrelease arrowpad.pro
</db:programlisting>
<db:para>This should create both <db:code>arrowpad_fr.qm</db:code> and <db:code>arrowpad_nl.qm</db:code>.</db:para>
<db:para>To use <db:code>arrowpad_fr.qm</db:code>, change your system language to French. In Unix, one of the two following commands should work:</db:para>
<db:programlisting language="cpp">export LANG=fr
setenv LANG fr
</db:programlisting>
<db:para>In Windows, set your display language to French.</db:para>
<db:para>When you run the program, you should now see the French version:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/linguist-arrowpad_fr.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Try the same with Dutch (use <db:code>LANG=nl</db:code> in Unix). Now the Dutch version should appear:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/linguist-arrowpad_nl.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="exercises">
<db:title>Exercises</db:title>
<db:para>Mark one of the translations in <db:emphasis>Qt Linguist</db:emphasis> as not done, i.e. by unchecking the &quot;done&quot; checkbox; run <db:code>lupdate</db:code>, then <db:code>lrelease</db:code>, then the example. What effect did this change have?</db:para>
<db:para>Set <db:code>LANG=fr_CA</db:code> (French Canada) and run the example program again. Explain why the result is the same as with <db:code>LANG=fr</db:code>.</db:para>
<db:para>Change one of the accelerators in the Dutch translation to eliminate the conflict between <db:emphasis>&amp;Bestand</db:emphasis> and <db:emphasis>&amp;Boven</db:emphasis>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qttools.git/tree/examples/linguist/arrowpad?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
