<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Fortune Client Example</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to create a client for a network service.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example uses <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link>, and is intended to be run alongside the <db:link xlink:href="qtnetwork-fortuneserver-example.xml">Fortune Server</db:link> example or the <db:link xlink:href="qtnetwork-threadedfortuneserver-example.xml">Threaded Fortune Server</db:link> example.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the Fortune Client example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/fortuneclient-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example uses a simple <db:link xlink:href="qdatastream.xml">QDataStream</db:link>-based data transfer protocol to request a line of text from a fortune server (from the <db:link xlink:href="qtnetwork-fortuneserver-example.xml">Fortune Server</db:link> example). The client requests a fortune by simply connecting to the server. The server then responds with a <db:link xlink:href="qstring.xml">QString</db:link> which contains the fortune text.</db:para>
<db:para><db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> supports two general approaches to network programming:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>The asynchronous (non-blocking) approach.</db:emphasis> Operations are scheduled and performed when control returns to Qt's event loop. When the operation is finished, <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> emits a signal. For example, <db:link xlink:href="qabstractsocket.xml#connectToHost">QTcpSocket::connectToHost</db:link>() returns immediately, and when the connection has been established, <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> emits <db:link xlink:href="qabstractsocket.xml#connected">connected</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>The synchronous (blocking) approach.</db:emphasis> In non-GUI and multithreaded applications, you can call the waitFor...() functions (e.g., <db:link xlink:href="qabstractsocket.xml#waitForConnected">QTcpSocket::waitForConnected</db:link>()) to suspend the calling thread until the operation has completed, instead of connecting to signals.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In this example, we will demonstrate the asynchronous approach. The <db:link xlink:href="qtnetwork-blockingfortuneclient-example.xml">Blocking Fortune Client Example</db:link> illustrates the synchronous approach.</db:para>
<db:para>Our class contains some data and a few private slots:</db:para>
<db:programlisting language="cpp">class Client : public QDialog
{
    Q_OBJECT

public:
    explicit Client(QWidget *parent = nullptr);

private slots:
    void requestNewFortune();
    void readFortune();
    void displayError(QAbstractSocket::SocketError socketError);
    void enableGetFortuneButton();
    void sessionOpened();

private:
    QComboBox *hostCombo = nullptr;
    QLineEdit *portLineEdit = nullptr;
    QLabel *statusLabel = nullptr;
    QPushButton *getFortuneButton = nullptr;

    QTcpSocket *tcpSocket = nullptr;
    QDataStream in;
    QString currentFortune;

    QNetworkSession *networkSession = nullptr;
};
</db:programlisting>
<db:para>Other than the widgets that make up the GUI, the data members include a <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> pointer, a <db:link xlink:href="qdatastream.xml">QDataStream</db:link> object that operates on the socket, and a copy of the fortune text currently displayed.</db:para>
<db:para>The socket is initialized in the Client constructor. We'll pass the main widget as parent, so that we won't have to worry about deleting the socket:</db:para>
<db:programlisting language="cpp">Client::Client(QWidget *parent)
    : QDialog(parent)
    , hostCombo(new QComboBox)
    , portLineEdit(new QLineEdit)
    , getFortuneButton(new QPushButton(tr(&quot;Get Fortune&quot;)))
    , tcpSocket(new QTcpSocket(this))
{
    setWindowFlags(windowFlags() &amp;amp; ~Qt::WindowContextHelpButtonHint);
    ...
    in.setDevice(tcpSocket);
    in.setVersion(QDataStream::Qt_4_0);
</db:programlisting>
<db:para>The protocol is based on <db:link xlink:href="qdatastream.xml">QDataStream</db:link>, so we set the stream device to the newly created socket. We then explicitly set the protocol version of the stream to <db:link xlink:href="qdatastream.xml#Version-enum">QDataStream::Qt_4_0</db:link> to ensure that we're using the same version as the fortune server, no matter which version of Qt the client and server use.</db:para>
<db:para>The only <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> signals we need in this example are <db:link xlink:href="qiodevice.xml#readyRead">QTcpSocket::readyRead</db:link>(), signifying that data has been received, and <db:link xlink:href="qabstractsocket.xml#error">QTcpSocket::error</db:link>(), which we will use to catch any connection errors:</db:para>
<db:programlisting language="cpp">    ...
    connect(tcpSocket, &amp;amp;QIODevice::readyRead, this, &amp;amp;Client::readFortune);
    connect(tcpSocket, QOverload&amp;lt;QAbstractSocket::SocketError&amp;gt;::of(&amp;amp;QAbstractSocket::error),
    ...
}
</db:programlisting>
<db:para>Clicking the <db:guilabel>Get Fortune</db:guilabel> button will invoke the requestNewFortune() slot:</db:para>
<db:programlisting language="cpp">void Client::requestNewFortune()
{
    getFortuneButton-&amp;gt;setEnabled(false);
    tcpSocket-&amp;gt;abort();
    tcpSocket-&amp;gt;connectToHost(hostCombo-&amp;gt;currentText(),
                             portLineEdit-&amp;gt;text().toInt());
}
</db:programlisting>
<db:para>Because we allow the user to click <db:guilabel>Get Fortune</db:guilabel> before the previous connection finished closing, we start off by aborting the previous connection by calling <db:link xlink:href="qabstractsocket.xml#abort">QTcpSocket::abort</db:link>(). (On an unconnected socket, this function does nothing.) We then proceed to connecting to the fortune server by calling <db:link xlink:href="qabstractsocket.xml#connectToHost">QTcpSocket::connectToHost</db:link>(), passing the hostname and port from the user interface as arguments.</db:para>
<db:para>As a result of calling <db:link xlink:href="qabstractsocket.xml#connectToHost">connectToHost</db:link>(), one of two things can happen:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>The connection is established.</db:emphasis> In this case, the server will send us a fortune. <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> will emit <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() every time it receives a block of data.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>An error occurs.</db:emphasis> We need to inform the user if the connection failed or was broken. In this case, <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> will emit <db:link xlink:href="qabstractsocket.xml#error">error</db:link>(), and Client::displayError() will be called.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Let's go through the <db:link xlink:href="qabstractsocket.xml#error">error</db:link>() case first:</db:para>
<db:programlisting language="cpp">void Client::displayError(QAbstractSocket::SocketError socketError)
{
    switch (socketError) {
    case QAbstractSocket::RemoteHostClosedError:
        break;
    case QAbstractSocket::HostNotFoundError:
        QMessageBox::information(this, tr(&quot;Fortune Client&quot;),
                                 tr(&quot;The host was not found. Please check the &quot;
                                    &quot;host name and port settings.&quot;));
        break;
    case QAbstractSocket::ConnectionRefusedError:
        QMessageBox::information(this, tr(&quot;Fortune Client&quot;),
                                 tr(&quot;The connection was refused by the peer. &quot;
                                    &quot;Make sure the fortune server is running, &quot;
                                    &quot;and check that the host name and port &quot;
                                    &quot;settings are correct.&quot;));
        break;
    default:
        QMessageBox::information(this, tr(&quot;Fortune Client&quot;),
                                 tr(&quot;The following error occurred: %1.&quot;)
                                 .arg(tcpSocket-&amp;gt;errorString()));
    }

    getFortuneButton-&amp;gt;setEnabled(true);
}
</db:programlisting>
<db:para>We pop up all errors in a dialog using <db:link xlink:href="qmessagebox.xml#information">QMessageBox::information</db:link>(). QTcpSocket::RemoteHostClosedError is silently ignored, because the fortune server protocol ends with the server closing the connection.</db:para>
<db:para>Now for the <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() alternative. This signal is connected to Client::readFortune():</db:para>
<db:programlisting language="cpp">void Client::readFortune()
{
    in.startTransaction();

    QString nextFortune;
    in &amp;gt;&amp;gt; nextFortune;

    if (!in.commitTransaction())
        return;

    if (nextFortune == currentFortune) {
        QTimer::singleShot(0, this, &amp;amp;Client::requestNewFortune);
        return;
    }

    currentFortune = nextFortune;
    statusLabel-&amp;gt;setText(currentFortune);
    getFortuneButton-&amp;gt;setEnabled(true);
}
</db:programlisting>
<db:para>Now, TCP is based on sending a stream of data, so we cannot expect to get the entire fortune in one go. Especially on a slow network, the data can be received in several small fragments. <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> buffers up all incoming data and emits <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() for every new block that arrives, and it is our job to ensure that we have received all the data we need before we start parsing.</db:para>
<db:para>For this purpose we use a <db:link xlink:href="qdatastream.xml">QDataStream</db:link> read transaction. It keeps reading stream data into an internal buffer and rolls it back in case of an incomplete read. We start by calling startTransaction() which also resets the stream status to indicate that new data was received on the socket. We proceed by using <db:link xlink:href="qdatastream.xml">QDataStream</db:link>'s streaming operator to read the fortune from the socket into a <db:link xlink:href="qstring.xml">QString</db:link>. Once read, we complete the transaction by calling <db:link xlink:href="qdatastream.xml#commitTransaction">QDataStream::commitTransaction</db:link>(). If we did not receive a full packet, this function restores the stream data to the initial position, after which we can wait for a new readyRead() signal.</db:para>
<db:para>After a successful read transaction, we call <db:link xlink:href="qlabel.xml#text-prop">QLabel::setText</db:link>() to display the fortune.</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="fortuneclient/client.cpp">fortuneclient/client.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="fortuneclient/client.h">fortuneclient/client.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="fortuneclient/fortuneclient.pro">fortuneclient/fortuneclient.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="fortuneclient/main.cpp">fortuneclient/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtnetwork-fortuneserver-example.xml">Fortune Server Example</db:link></db:member>
<db:member><db:link xlink:href="qtnetwork-blockingfortuneclient-example.xml">Blocking Fortune Client Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section></db:article>
