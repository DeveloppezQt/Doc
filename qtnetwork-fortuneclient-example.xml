<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Fortune Client Example</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to create a client for a network service.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example uses QTcpSocket, and is intended to be run alongside the <db:link xlink:href="qtnetwork-fortuneserver-example.xml">Fortune Server</db:link> example or the <db:link xlink:href="qtnetwork-threadedfortuneserver-example.xml">Threaded Fortune Server</db:link> example.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the Fortune Client example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/fortuneclient-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example uses a simple <db:link xlink:href="qdatastream.xml">QDataStream</db:link>-based data transfer protocol to request a line of text from a fortune server (from the <db:link xlink:href="qtnetwork-fortuneserver-example.xml">Fortune Server</db:link> example). The client requests a fortune by simply connecting to the server. The server then responds with a 16-bit (quint16) integer containing the length of the fortune text, followed by a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>QTcpSocket supports two general approaches to network programming:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>The asynchronous (non-blocking) approach.</db:emphasis> Operations are scheduled and performed when control returns to Qt's event loop. When the operation is finished, QTcpSocket emits a signal. For example, QTcpSocket::connectToHost() returns immediately, and when the connection has been established, QTcpSocket emits <db:link xlink:href="">connected()</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>The synchronous (blocking) approach.</db:emphasis> In non-GUI and multithreaded applications, you can call the <db:code>waitFor...()</db:code> functions (e.g., QTcpSocket::waitForConnected()) to suspend the calling thread until the operation has completed, instead of connecting to signals.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In this example, we will demonstrate the asynchronous approach. The <db:link xlink:href="qtnetwork-blockingfortuneclient-example.xml">Blocking Fortune Client Example</db:link> illustrates the synchronous approach.</db:para>
<db:para>Our class contains some data and a few private slots:</db:para>
<db:programlisting language="cpp">class Client : public QDialog
{
    Q_OBJECT

public:
    Client(QWidget *parent = 0);

private slots:
    void requestNewFortune();
    void readFortune();
    void displayError(QAbstractSocket::SocketError socketError);
    void enableGetFortuneButton();
    void sessionOpened();

private:
    QLabel *hostLabel;
    QLabel *portLabel;
    QComboBox *hostCombo;
    QLineEdit *portLineEdit;
    QLabel *statusLabel;
    QPushButton *getFortuneButton;
    QPushButton *quitButton;
    QDialogButtonBox *buttonBox;

    QTcpSocket *tcpSocket;
    QString currentFortune;
    quint16 blockSize;

    QNetworkSession *networkSession;
};
</db:programlisting>
<db:para>Other than the widgets that make up the GUI, the data members include a QTcpSocket pointer, a copy of the fortune text currently displayed, and the size of the packet we are currently reading (more on this later).</db:para>
<db:para>The socket is initialized in the Client constructor. We'll pass the main widget as parent, so that we won't have to worry about deleting the socket:</db:para>
<db:programlisting language="cpp">Client::Client(QWidget *parent)
:   QDialog(parent), networkSession(0)
{
    ...
    tcpSocket = new QTcpSocket(this);
</db:programlisting>
<db:para>The only QTcpSocket signals we need in this example are QTcpSocket::readyRead(), signifying that data has been received, and QTcpSocket::error(), which we will use to catch any connection errors:</db:para>
<db:programlisting language="cpp">    ...
    connect(tcpSocket, SIGNAL(readyRead()), this, SLOT(readFortune()));
    connect(tcpSocket, SIGNAL(error(QAbstractSocket::SocketError)),
    ...
}
</db:programlisting>
<db:para>Clicking the <db:guilabel>Get Fortune</db:guilabel> button will invoke the <db:code>requestNewFortune()</db:code> slot:</db:para>
<db:programlisting language="cpp">void Client::requestNewFortune()
{
    getFortuneButton-&gt;setEnabled(false);
    blockSize = 0;
    tcpSocket-&gt;abort();
    tcpSocket-&gt;connectToHost(hostCombo-&gt;currentText(),
                             portLineEdit-&gt;text().toInt());
}
</db:programlisting>
<db:para>In this slot, we initialize <db:code>blockSize</db:code> to 0, preparing to read a new block of data. Because we allow the user to click <db:guilabel>Get Fortune</db:guilabel> before the previous connection finished closing, we start off by aborting the previous connection by calling QTcpSocket::abort(). (On an unconnected socket, this function does nothing.) We then proceed to connecting to the fortune server by calling QTcpSocket::connectToHost(), passing the hostname and port from the user interface as arguments.</db:para>
<db:para>As a result of calling <db:link xlink:href="">connectToHost()</db:link>, one of two things can happen:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>The connection is established.</db:emphasis> In this case, the server will send us a fortune. QTcpSocket will emit <db:link xlink:href="">readyRead()</db:link> every time it receives a block of data.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>An error occurs.</db:emphasis> We need to inform the user if the connection failed or was broken. In this case, QTcpSocket will emit <db:link xlink:href="">error()</db:link>, and <db:code>Client::displayError()</db:code> will be called.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Let's go through the <db:link xlink:href="">error()</db:link> case first:</db:para>
<db:programlisting language="cpp">void Client::displayError(QAbstractSocket::SocketError socketError)
{
    switch (socketError) {
    case QAbstractSocket::RemoteHostClosedError:
        break;
    case QAbstractSocket::HostNotFoundError:
        QMessageBox::information(this, tr(&quot;Fortune Client&quot;),
                                 tr(&quot;The host was not found. Please check the &quot;
                                    &quot;host name and port settings.&quot;));
        break;
    case QAbstractSocket::ConnectionRefusedError:
        QMessageBox::information(this, tr(&quot;Fortune Client&quot;),
                                 tr(&quot;The connection was refused by the peer. &quot;
                                    &quot;Make sure the fortune server is running, &quot;
                                    &quot;and check that the host name and port &quot;
                                    &quot;settings are correct.&quot;));
        break;
    default:
        QMessageBox::information(this, tr(&quot;Fortune Client&quot;),
                                 tr(&quot;The following error occurred: %1.&quot;)
                                 .arg(tcpSocket-&gt;errorString()));
    }

    getFortuneButton-&gt;setEnabled(true);
}
</db:programlisting>
<db:para>We pop up all errors in a dialog using QMessageBox::information(). QTcpSocket::RemoteHostClosedError is silently ignored, because the fortune server protocol ends with the server closing the connection.</db:para>
<db:para>Now for the <db:link xlink:href="">readyRead()</db:link> alternative. This signal is connected to <db:code>Client::readFortune()</db:code>:</db:para>
<db:programlisting language="cpp">void Client::readFortune()
{
    QDataStream in(tcpSocket);
    in.setVersion(QDataStream::Qt_4_0);

    if (blockSize == 0) {
        if (tcpSocket-&gt;bytesAvailable() &lt; (int)sizeof(quint16))
            return;

        in &gt;&gt; blockSize;
    }

    if (tcpSocket-&gt;bytesAvailable() &lt; blockSize)
        return;
</db:programlisting>
<db:para>The protocol is based on <db:link xlink:href="qdatastream.xml">QDataStream</db:link>, so we start by creating a stream object, passing the socket to <db:link xlink:href="qdatastream.xml">QDataStream</db:link>'s constructor. We then explicitly set the protocol version of the stream to <db:link xlink:href="qdatastream.xml#Version-enum">QDataStream::Qt_4_0</db:link> to ensure that we're using the same version as the fortune server, no matter which version of Qt the client and server use.</db:para>
<db:para>Now, TCP is based on sending a stream of data, so we cannot expect to get the entire fortune in one go. Especially on a slow network, the data can be received in several small fragments. QTcpSocket buffers up all incoming data and emits <db:link xlink:href="">readyRead()</db:link> for every new block that arrives, and it is our job to ensure that we have received all the data we need before we start parsing. The server's response starts with the size of the packet, so first we need to ensure that we can read the size, then we will wait until QTcpSocket has received the full packet.</db:para>
<db:programlisting language="cpp">    QString nextFortune;
    in &gt;&gt; nextFortune;

    if (nextFortune == currentFortune) {
        QTimer::singleShot(0, this, SLOT(requestNewFortune()));
        return;
    }

    currentFortune = nextFortune;
    statusLabel-&gt;setText(currentFortune);
    getFortuneButton-&gt;setEnabled(true);
}
</db:programlisting>
<db:para>We proceed by using <db:link xlink:href="qdatastream.xml">QDataStream</db:link>'s streaming operator to read the fortune from the socket into a <db:link xlink:href="qstring.xml">QString</db:link>. Once read, we can call QLabel::setText() to display the fortune.</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="fortuneclient/client.cpp">fortuneclient/client.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="fortuneclient/client.h">fortuneclient/client.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="fortuneclient/fortuneclient.pro">fortuneclient/fortuneclient.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="fortuneclient/main.cpp">fortuneclient/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtnetwork-fortuneserver-example.xml">Fortune Server Example</db:link></db:member>
<db:member><db:link xlink:href="qtnetwork-blockingfortuneclient-example.xml">Blocking Fortune Client Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section></db:article>
