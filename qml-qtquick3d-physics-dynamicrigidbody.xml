<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>DynamicRigidBody QML Type</db:title>
<db:productname>QtQuick3DPhysics</db:productname>
<db:edition>Qt Quick 3D Physics | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Physics Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A physical body that can move or be moved.</db:para>
<db:para>This type was introduced in Qt 6.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick3D.Physics</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>PhysicsBody</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This type defines a dynamic rigid body: an object that is part of the physics scene and behaves like a physical object with mass and velocity.</db:para>
<db:note>
<db:para><db:link xlink:href="qml-qtquick3d-physics-trianglemeshshape.xml">triangle mesh</db:link>, <db:link xlink:href="qml-qtquick3d-physics-heightfieldshape.xml">height field</db:link> and <db:link xlink:href="qml-qtquick3d-physics-planeshape.xml">plane</db:link> geometry shapes are not allowed as collision shapes when <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#isKinematic-prop">isKinematic</db:link> is <db:code>false</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="angularAxisLock-prop">
<db:title>angularAxisLock : AxisLock</db:title>
<db:fieldsynopsis>
<db:type>AxisLock</db:type>
<db:varname>angularAxisLock</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property locks the angular velocity of the body along the axes defined by the <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link>.AxisLock enum. To lock several axes just bitwise-or their enum values.</db:para>
<db:para>Available options:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>DynamicRigidBody.None</db:para>
</db:td>
<db:td>
<db:para>No axis lock (default value).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DynamicRigidBody.LockX</db:para>
</db:td>
<db:td>
<db:para>Lock X axis.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DynamicRigidBody.LockY</db:para>
</db:td>
<db:td>
<db:para>Lock Y axis.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DynamicRigidBody.LockZ</db:para>
</db:td>
<db:td>
<db:para>Lock Z axis.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="centerOfMassPosition-prop">
<db:title>centerOfMassPosition : vector3d</db:title>
<db:fieldsynopsis>
<db:type>vector3d</db:type>
<db:varname>centerOfMassPosition</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the position of the center of mass relative to the body. Note that this is only used when <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#massMode-prop">massMode</db:link> is set to <db:code>DynamicRigidBody.MassAndInertiaTensor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#massMode-prop">massMode</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#inertiaTensor-prop">inertiaTensor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="centerOfMassRotation-prop">
<db:title>centerOfMassRotation : quaternion</db:title>
<db:fieldsynopsis>
<db:type>quaternion</db:type>
<db:varname>centerOfMassRotation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the rotation of the center of mass pose, i.e. it specifies the orientation of the body's principal inertia axes relative to the body. Note that this is only used when <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#massMode-prop">massMode</db:link> is set to <db:code>DynamicRigidBody.MassAndInertiaTensor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#massMode-prop">massMode</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#inertiaTensor-prop">inertiaTensor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="density-prop">
<db:title>density : float</db:title>
<db:fieldsynopsis>
<db:type>float</db:type>
<db:varname>density</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the density of the body. This is only used when <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#massMode-prop">massMode</db:link> is set to <db:code>DynamicRigidBody.CustomDensity</db:code>.</db:para>
<db:para>Default value is <db:code>0.001</db:code>.</db:para>
<db:para>Range: <db:code>(0, inf]</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#massMode-prop">massMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="gravityEnabled-prop">
<db:title>gravityEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>gravityEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines whether the object is going to be affected by gravity or not.</db:para>
</db:section>
<db:section xml:id="inertiaMatrix-prop">
<db:title>inertiaMatrix : list&lt;float&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;float&gt;</db:type>
<db:varname>inertiaMatrix</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the inertia tensor matrix. This is a 3x3 matrix in column-major order. Note that this matrix is expected to be diagonalizable. Note that this is only used when <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#massMode-prop">massMode</db:link> is set to <db:code>DynamicRigidBody.MassAndInertiaMatrix</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#massMode-prop">massMode</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#inertiaTensor-prop">inertiaTensor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inertiaTensor-prop">
<db:title>inertiaTensor : vector3d</db:title>
<db:fieldsynopsis>
<db:type>vector3d</db:type>
<db:varname>inertiaTensor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the inertia tensor vector, using a parameter specified in mass space coordinates.</db:para>
<db:para>This is the diagonal vector of a 3x3 diagonal matrix, if you have a non diagonal world/actor space inertia tensor then you should use <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#inertiaMatrix-prop">inertiaMatrix</db:link> instead.</db:para>
<db:para>The inertia tensor components must be positive and a value of 0 in any component is interpreted as infinite inertia along that axis. Note that this is only used when <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#massMode-prop">massMode</db:link> is set to <db:code>DynamicRigidBody.MassAndInertiaTensor</db:code>.</db:para>
<db:para>Default value is (1, 1, 1).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#massMode-prop">massMode</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#inertiaMatrix-prop">inertiaMatrix</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isKinematic-prop">
<db:title>isKinematic : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>isKinematic</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines whether the object is kinematic or not. A kinematic object does not get influenced by external forces and can be seen as an object of infinite mass. If this property is set then in every simulation frame the physical object will be moved to its target position regardless of external forces. Note that to move and rotate the kinematic object you need to use the <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicPosition-prop">kinematicPosition</db:link>, <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicRotation-prop">kinematicRotation</db:link>, <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicEulerRotation-prop">kinematicEulerRotation</db:link> and <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicPivot-prop">kinematicPivot</db:link> properties.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicPosition-prop">kinematicPosition</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicRotation-prop">kinematicRotation</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicEulerRotation-prop">kinematicEulerRotation</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicPivot-prop">kinematicPivot</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="kinematicEulerRotation-prop">
<db:title>[since 6.5] kinematicEulerRotation : vector4d</db:title>
<db:fieldsynopsis>
<db:type>vector4d</db:type>
<db:varname>kinematicEulerRotation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the euler rotation of the object when it is kinematic, i.e. when <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#isKinematic-prop">isKinematic</db:link> is set to <db:code>true</db:code>. On each iteration of the simulation the physical object will be updated according to this value.</db:para>
<db:para>This property was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#isKinematic-prop">isKinematic</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicPosition-prop">kinematicPosition</db:link></db:member>
<db:member>kinematicEulerRotation</db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicPivot-prop">kinematicPivot</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="kinematicPivot-prop">
<db:title>[since 6.5] kinematicPivot : vector3d</db:title>
<db:fieldsynopsis>
<db:type>vector3d</db:type>
<db:varname>kinematicPivot</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the pivot of the object when it is kinematic, i.e. when <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#isKinematic-prop">isKinematic</db:link> is set to <db:code>true</db:code>. On each iteration of the simulation the physical object will be updated according to this value.</db:para>
<db:para>This property was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#isKinematic-prop">isKinematic</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicPosition-prop">kinematicPosition</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicEulerRotation-prop">kinematicEulerRotation</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicRotation-prop">kinematicRotation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="kinematicPosition-prop">
<db:title>[since 6.5] kinematicPosition : vector3d</db:title>
<db:fieldsynopsis>
<db:type>vector3d</db:type>
<db:varname>kinematicPosition</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the position of the object when it is kinematic, i.e. when <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#isKinematic-prop">isKinematic</db:link> is set to <db:code>true</db:code>. On each iteration of the simulation the physical object will be updated according to this value.</db:para>
<db:para>This property was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#isKinematic-prop">isKinematic</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicRotation-prop">kinematicRotation</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicEulerRotation-prop">kinematicEulerRotation</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicPivot-prop">kinematicPivot</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="kinematicRotation-prop">
<db:title>[since 6.5] kinematicRotation : vector3d</db:title>
<db:fieldsynopsis>
<db:type>vector3d</db:type>
<db:varname>kinematicRotation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the rotation of the object when it is kinematic, i.e. when <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#isKinematic-prop">isKinematic</db:link> is set to <db:code>true</db:code>. On each iteration of the simulation the physical object will be updated according to this value.</db:para>
<db:para>This property was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#isKinematic-prop">isKinematic</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicPosition-prop">kinematicPosition</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicEulerRotation-prop">kinematicEulerRotation</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#kinematicPivot-prop">kinematicPivot</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="linearAxisLock-prop">
<db:title>linearAxisLock : AxisLock</db:title>
<db:fieldsynopsis>
<db:type>AxisLock</db:type>
<db:varname>linearAxisLock</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property locks the linear velocity of the body along the axes defined by the <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml">DynamicRigidBody</db:link>.AxisLock enum. To lock several axes just bitwise-or their enum values.</db:para>
<db:para>Available options:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>DynamicRigidBody.None</db:para>
</db:td>
<db:td>
<db:para>No axis lock (default value).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DynamicRigidBody.LockX</db:para>
</db:td>
<db:td>
<db:para>Lock X axis.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DynamicRigidBody.LockY</db:para>
</db:td>
<db:td>
<db:para>Lock Y axis.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DynamicRigidBody.LockZ</db:para>
</db:td>
<db:td>
<db:para>Lock Z axis.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="mass-prop">
<db:title>mass : float</db:title>
<db:fieldsynopsis>
<db:type>float</db:type>
<db:varname>mass</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the mass of the body. Note that this is only used when <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#massMode-prop">massMode</db:link> is not <db:code>DynamicRigidBody.CustomDensity</db:code> or <db:code>DynamicRigidBody.DefaultDensity</db:code>. Also note that a value of 0 is interpreted as infinite mass and that negative numbers are not allowed.</db:para>
<db:para>Default value is <db:code>1</db:code>.</db:para>
<db:para>Range: <db:code>[0, inf]</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#massMode-prop">massMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="massMode-prop">
<db:title>massMode : MassMode</db:title>
<db:fieldsynopsis>
<db:type>MassMode</db:type>
<db:varname>massMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the enum which describes how mass and inertia are calculated for this body.</db:para>
<db:para>By default, <db:code>DynamicRigidBody.DefaultDensity</db:code> is used.</db:para>
<db:para>Available options:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>DynamicRigidBody.DefaultDensity</db:para>
</db:td>
<db:td>
<db:para>Use the density specified in the <db:link xlink:href="qml-qtquick3d-physics-physicsworld.xml#defaultDensity-prop">defaultDensity</db:link> property in <db:link xlink:href="qml-qtquick3d-physics-physicsworld.xml">PhysicsWorld</db:link> to calculate mass and inertia assuming a uniform density.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DynamicRigidBody.CustomDensity</db:para>
</db:td>
<db:td>
<db:para>Use specified density in the specified in the <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#density-prop">density</db:link> to calculate mass and inertia assuming a uniform density.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DynamicRigidBody.Mass</db:para>
</db:td>
<db:td>
<db:para>Use the specified mass to calculate inertia assuming a uniform density.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DynamicRigidBody.MassAndInertiaTensor</db:para>
</db:td>
<db:td>
<db:para>Use the specified mass value and inertia tensor.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DynamicRigidBody.MassAndInertiaMatrix</db:para>
</db:td>
<db:td>
<db:para>Use the specified mass value and calculate inertia from the specified inertia matrix.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="applyCentralForce-method">
<db:title>applyCentralForce(vector3d <db:emphasis>force</db:emphasis>)</db:title>
<db:para>Applies a <db:code role="parameter">force</db:code> on the center of the body.</db:para>
</db:section>
<db:section xml:id="applyCentralImpulse-method">
<db:title>applyCentralImpulse(vector3d <db:emphasis>impulse</db:emphasis>)</db:title>
<db:para>Applies an <db:code role="parameter">impulse</db:code> on the center of the body.</db:para>
</db:section>
<db:section xml:id="applyForce-method">
<db:title>applyForce(vector3d <db:emphasis>force</db:emphasis>, vector3d <db:emphasis>position</db:emphasis>)</db:title>
<db:para>Applies a <db:code role="parameter">force</db:code> at a <db:code role="parameter">position</db:code> on the body.</db:para>
</db:section>
<db:section xml:id="applyImpulse-method">
<db:title>applyImpulse(vector3d <db:emphasis>impulse</db:emphasis>, vector3d <db:emphasis>position</db:emphasis>)</db:title>
<db:para>Applies an <db:code role="parameter">impulse</db:code> at a <db:code role="parameter">position</db:code> on the body.</db:para>
</db:section>
<db:section xml:id="applyTorque-method">
<db:title>applyTorque(vector3d <db:emphasis>torque</db:emphasis>)</db:title>
<db:para>Applies a <db:code role="parameter">torque</db:code> on the body.</db:para>
</db:section>
<db:section xml:id="applyTorqueImpulse-method">
<db:title>applyTorqueImpulse(vector3d <db:emphasis>impulse</db:emphasis>)</db:title>
<db:para>Applies a torque <db:code role="parameter">impulse</db:code> on the body.</db:para>
</db:section>
<db:section xml:id="reset-method">
<db:title>reset(vector3d <db:emphasis>position</db:emphasis>, vector3d <db:emphasis>eulerRotation</db:emphasis>)</db:title>
<db:para>Resets the body's <db:code role="parameter">position</db:code> and <db:code role="parameter">eulerRotation</db:code>.</db:para>
</db:section>
<db:section xml:id="setAngularVelocity-method">
<db:title>setAngularVelocity(vector3d <db:emphasis>angularVelocity</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">angularVelocity</db:code> of the body.</db:para>
</db:section>
<db:section xml:id="setLinearVelocity-method">
<db:title>setLinearVelocity(vector3d <db:emphasis>linearVelocity</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">linearVelocity</db:code> of the body.</db:para>
</db:section>
</db:section>
</db:article>
