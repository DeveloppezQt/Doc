<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractProtobufSerializer Class</db:title>
<db:productname>QtProtobuf</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Protobuf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractprotobufserializer.xml">QAbstractProtobufSerializer</db:link> class is interface that represents basic functions for serialization/deserialization.</db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractProtobufSerializer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Protobuf)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Protobuf)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qprotobufserializer.xml" xlink:role="class">QProtobufSerializer</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qprotobufserializer.xml">QProtobufSerializer</db:link> class registers serializers/deserializers for classes implementing a protobuf message, inheriting <db:link xlink:href="qprotobufmessage.xml">QProtobufMessage</db:link>. These classes are generated automatically, based on a .proto file, using the cmake build macro qt6_add_protobuf or by running qtprotobufgen directly.</db:para>
<db:para>This class should be used as a base for specific serializers. The handlers property contains all message-specific serializers and should be used while serialization/deserialization. Inherited classes should reimplement scope of virtual methods that used by registered message serialization/deserialization functions.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DeserializationError-enum">
<db:title>enum QAbstractProtobufSerializer::DeserializationError</db:title>
<db:enumsynopsis>
<db:enumname>DeserializationError</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InvalidHeaderError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoDeserializerError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnexpectedEndOfStreamError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum contains possible errors that can occur during deserialization. When an error occurs, call deserializationErrorString() to get a human-readable error message.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractprotobufserializer.xml">QAbstractProtobufSerializer</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractprotobufserializer.xml">QAbstractProtobufSerializer</db:link></db:emphasis>::InvalidHeaderError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Something went wrong while attempting to decode a header in the message.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractprotobufserializer.xml">QAbstractProtobufSerializer</db:link></db:emphasis>::NoDeserializerError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>While deserializing a message, no deserializer was found for a type in the message.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractprotobufserializer.xml">QAbstractProtobufSerializer</db:link></db:emphasis>::UnexpectedEndOfStreamError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>While deserializing a message, the stream ended unexpectedly.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QAbstractProtobufSerializer">
<db:title>[virtual] QAbstractProtobufSerializer::~QAbstractProtobufSerializer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractProtobufSerializer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractProtobufSerializer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this <db:link xlink:href="qabstractprotobufserializer.xml">QAbstractProtobufSerializer</db:link>.</db:para>
</db:section>
<db:section xml:id="deserialize">
<db:title>bool QAbstractProtobufSerializer::deserialize(T *<db:emphasis>object</db:emphasis>, QByteArrayView <db:emphasis>data</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>deserialize</db:methodname>
<db:methodparam>
<db:type>T *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool deserialize(T *object, QByteArrayView data) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function deserializes a registered Protobuf message <db:code role="parameter">object</db:code> from a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> <db:code role="parameter">data</db:code>. <db:code role="parameter">object</db:code> must not be <db:code>nullptr</db:code>. Returns <db:code>true</db:code> if deserialization was successful, otherwise <db:code>false</db:code>.</db:para>
<db:para>For a given type, <db:code>T</db:code>, you should call the <db:code>deserialize()</db:code> function on an instance of that type, which in turn will call this function for you.</db:para>
<db:para>Unexpected/unknown properties in the <db:code role="parameter">data</db:code> are skipped.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractprotobufserializer.xml#serialize">serialize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deserializeMessage">
<db:title>[pure virtual protected] bool QAbstractProtobufSerializer::deserializeMessage(QProtobufMessage *<db:emphasis>message</db:emphasis>, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;<db:emphasis>ordering</db:emphasis>, QByteArrayView <db:emphasis>data</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>deserializeMessage</db:methodname>
<db:methodparam>
<db:type>QProtobufMessage *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QtProtobufPrivate::QProtobufPropertyOrdering &amp;</db:type>
<db:parameter>ordering</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool deserializeMessage(QProtobufMessage *message, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;ordering, QByteArrayView data) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is called by <db:link xlink:href="qabstractprotobufserializer.xml#deserialize">deserialize</db:link>() to deserialize a registered Protobuf message <db:code role="parameter">message</db:code> with <db:code role="parameter">ordering</db:code> from a <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> <db:code role="parameter">data</db:code>. <db:code role="parameter">message</db:code> can be assumed to not be <db:code>nullptr</db:code>. Returns <db:code>true</db:code> if deserialization was successful, otherwise <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="serialize">
<db:title>QByteArray QAbstractProtobufSerializer::serialize(const QProtobufMessage *<db:emphasis>message</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>serialize</db:methodname>
<db:methodparam>
<db:type>const QProtobufMessage *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray serialize(const QProtobufMessage *message) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function serializes a registered Protobuf message <db:code role="parameter">message</db:code> into a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>. <db:code role="parameter">message</db:code> must not be <db:code>nullptr</db:code>.</db:para>
<db:para>For a given type, <db:code>T</db:code>, you should call the <db:code>serialize()</db:code> function on an instance of that type, which in turn will call this function for you.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractprotobufserializer.xml#deserialize">deserialize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serializeMessage">
<db:title>[pure virtual protected] QByteArray QAbstractProtobufSerializer::serializeMessage(const QProtobufMessage *<db:emphasis>message</db:emphasis>, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;<db:emphasis>ordering</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>serializeMessage</db:methodname>
<db:methodparam>
<db:type>const QProtobufMessage *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QtProtobufPrivate::QProtobufPropertyOrdering &amp;</db:type>
<db:parameter>ordering</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray serializeMessage(const QProtobufMessage *message, const QtProtobufPrivate::QProtobufPropertyOrdering &amp;ordering) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is called by <db:link xlink:href="qabstractprotobufserializer.xml#serialize">serialize</db:link>() to serialize a registered Protobuf message <db:code role="parameter">message</db:code> with <db:code role="parameter">ordering</db:code>. <db:code role="parameter">message</db:code> must not be <db:code>nullptr</db:code>. Returns a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> containing the serialized message.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_DECLARE_PROTOBUF_SERIALIZERS">
<db:title>Q_DECLARE_PROTOBUF_SERIALIZERS(<db:emphasis>Type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_DECLARE_PROTOBUF_SERIALIZERS</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>Type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_DECLARE_PROTOBUF_SERIALIZERS(Type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="module">QtProtobuf</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Defines serialize and deserialize functions for a <db:code role="parameter">Type</db:code> inheriting <db:link xlink:href="qprotobufmessage.xml">QProtobufMessage</db:link>. This is used as part of the code generated by the qtprotobufgen tool.</db:para>
</db:section>
<db:section xml:id="Q_PROTOBUF_OBJECT">
<db:title>Q_PROTOBUF_OBJECT</db:title>
<db:methodsynopsis>
<db:methodname>Q_PROTOBUF_OBJECT</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_PROTOBUF_OBJECT</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="module">QtProtobuf</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Declares the propertyOrdering member in a class inheriting <db:link xlink:href="qprotobufmessage.xml">QProtobufMessage</db:link>. This is used as part of the code generated by the qtprotobufgen tool.</db:para>
</db:section>
</db:section>
</db:article>
