<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextDocument Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> class holds formatted text.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextDocument</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextDocument is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> is a container for structured rich text documents, providing support for styled text and various types of document elements, such as lists, tables, frames, and images. They can be created for use in a <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>, or used independently.</db:para>
<db:para>Each document element is described by an associated format object. Each format object is treated as a unique object by QTextDocuments, and can be passed to <db:link xlink:href="qtextdocument.xml#objectForFormat">objectForFormat</db:link>() to obtain the document element that it is applied to.</db:para>
<db:para>A <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> can be edited programmatically using a <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link>, and its contents can be examined by traversing the document structure. The entire document structure is stored as a hierarchy of document elements beneath the root frame, found with the <db:link xlink:href="qtextdocument.xml#rootFrame">rootFrame</db:link>() function. Alternatively, if you just want to iterate over the textual contents of the document you can use <db:link xlink:href="qtextdocument.xml#begin">begin</db:link>(), <db:link xlink:href="qtextdocument.xml#end">end</db:link>(), and <db:link xlink:href="qtextdocument.xml#findBlock">findBlock</db:link>() to retrieve text blocks that you can examine and iterate over.</db:para>
<db:para>The layout of a document is determined by the <db:link xlink:href="qtextdocument.xml#documentLayout">documentLayout</db:link>(); you can create your own <db:link xlink:href="qabstracttextdocumentlayout.xml">QAbstractTextDocumentLayout</db:link> subclass and set it using <db:link xlink:href="qtextdocument.xml#setDocumentLayout">setDocumentLayout</db:link>() if you want to use your own layout logic. The document's title and other meta-information can be obtained by calling the <db:link xlink:href="qtextdocument.xml#metaInformation">metaInformation</db:link>() function. For documents that are exposed to users through the <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> class, the document title is also available via the <db:link xlink:href="qtextedit.xml#documentTitle-prop">QTextEdit::documentTitle</db:link>() function.</db:para>
<db:para>The <db:link xlink:href="qtextdocument.xml#toPlainText">toPlainText</db:link>() and <db:link xlink:href="qtextdocument.xml#toHtml">toHtml</db:link>() convenience functions allow you to retrieve the contents of the document as plain text and HTML. The document's text can be searched using the <db:link xlink:href="qtextdocument.xml#find">find</db:link>() functions.</db:para>
<db:para>Undo/redo of operations performed on the document can be controlled using the <db:link xlink:href="qtextdocument.xml#undoRedoEnabled-prop">setUndoRedoEnabled</db:link>() function. The undo/redo system can be controlled by an editor widget through the <db:link xlink:href="qtextdocument.xml#undo-1">undo</db:link>() and <db:link xlink:href="qtextdocument.xml#redo-1">redo</db:link>() slots; the document also provides <db:link xlink:href="qtextdocument.xml#contentsChanged">contentsChanged</db:link>(), <db:link xlink:href="qtextdocument.xml#undoAvailable">undoAvailable</db:link>(), and <db:link xlink:href="qtextdocument.xml#redoAvailable">redoAvailable</db:link>() signals that inform connected editor widgets about the state of the undo/redo system. The following are the undo/redo operations of a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Insertion or removal of characters. A sequence of insertions or removals within the same text block are regarded as a single undo/redo operation.</db:para>
</db:listitem>
<db:listitem>
<db:para>Insertion or removal of text blocks. Sequences of insertion or removals in a single operation (e.g., by selecting and then deleting text) are regarded as a single undo/redo operation.</db:para>
</db:listitem>
<db:listitem>
<db:para>Text character format changes.</db:para>
</db:listitem>
<db:listitem>
<db:para>Text block format changes.</db:para>
</db:listitem>
<db:listitem>
<db:para>Text block group format changes.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextcursor.xml">QTextCursor</db:link></db:member>
<db:member><db:link xlink:href="qtextedit.xml">QTextEdit</db:link></db:member>
<db:member><db:link xlink:href="richtext.xml">Rich Text Processing</db:link></db:member>
<db:member><db:link xlink:href="qtsvg-richtext-textobject-example.xml">Text Object Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FindFlag-enum">
<db:title>enum QTextDocument::FindFlag</db:title>
<db:bridgehead renderas="sect2">flags QTextDocument::FindFlags</db:bridgehead>
<db:para>This enum describes the options available to <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>'s find function. The options can be OR-ed together from the following list:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:emphasis>::FindBackward</db:code></db:para>
</db:td>
<db:td><db:code>0x00001</db:code></db:td>
<db:td>
<db:para>Search backwards instead of forwards.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:emphasis>::FindCaseSensitively</db:code></db:para>
</db:td>
<db:td><db:code>0x00002</db:code></db:td>
<db:td>
<db:para>By default find works case insensitive. Specifying this option changes the behaviour to a case sensitive find operation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:emphasis>::FindWholeWords</db:code></db:para>
</db:td>
<db:td><db:code>0x00004</db:code></db:td>
<db:td>
<db:para>Makes find match only complete words.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>FindFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;FindFlag&gt;. </db:code>It stores an OR combination of <db:code>FindFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="MetaInformation-enum">
<db:title>enum QTextDocument::MetaInformation</db:title>
<db:para>This enum describes the different types of meta information that can be added to a document.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:emphasis>::DocumentTitle</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The title of the document.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:emphasis>::DocumentUrl</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The url of the document. The <db:link xlink:href="qtextdocument.xml#loadResource">loadResource</db:link>() function uses this url as the base when loading relative resources.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#metaInformation">metaInformation</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#setMetaInformation">setMetaInformation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ResourceType-enum">
<db:title>enum QTextDocument::ResourceType</db:title>
<db:para>This enum describes the types of resources that can be loaded by <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>'s <db:link xlink:href="qtextdocument.xml#loadResource">loadResource</db:link>() function.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:emphasis>::HtmlResource</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The resource contains HTML.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:emphasis>::ImageResource</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The resource contains image data. Currently supported data types are QVariant::Pixmap and QVariant::Image. If the corresponding variant is of type QVariant::ByteArray then Qt attempts to load the image using <db:link xlink:href="qimage.xml#loadFromData">QImage::loadFromData</db:link>. QVariant::Icon is currently not supported. The icon needs to be converted to one of the supported types first, for example using <db:link xlink:href="qicon.xml#pixmap">QIcon::pixmap</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:emphasis>::StyleSheetResource</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The resource contains CSS.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:emphasis>::UserResource</db:code></db:para>
</db:td>
<db:td><db:code>100</db:code></db:td>
<db:td>
<db:para>The first available value for user defined resource types.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#loadResource">loadResource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Stacks-enum">
<db:title>enum QTextDocument::Stacks</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:emphasis>::UndoStack</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>The undo stack.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:emphasis>::RedoStack</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>The redo stack.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:emphasis>::UndoAndRedoStacks</db:code></db:para>
</db:td>
<db:td><db:code>UndoStack | RedoStack</db:code></db:td>
<db:td>
<db:para>Both the undo and redo stacks.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="baseUrl-prop">
<db:title>[since 5.3] baseUrl : QUrl</db:title>
<db:para>This property holds the base URL used to resolve relative resource URLs within the document.</db:para>
<db:para>Resource URLs are resolved to be within the same directory as the target of the base URL meaning any portion of the path after the last '/' will be ignored.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Base URL</db:para>
</db:th>
<db:th>
<db:para>Relative URL</db:para>
</db:th>
<db:th>
<db:para>Resolved URL</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>file:///path/to/content</db:para>
</db:td>
<db:td>
<db:para>images/logo.png</db:para>
</db:td>
<db:td>
<db:para>file:///path/to/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>file:///path/to/content/</db:para>
</db:td>
<db:td>
<db:para>images/logo.png</db:para>
</db:td>
<db:td>
<db:para>file:///path/to/content/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>file:///path/to/content/index.html</db:para>
</db:td>
<db:td>
<db:para>images/logo.png</db:para>
</db:td>
<db:td>
<db:para>file:///path/to/content/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>file:///path/to/content/images/</db:para>
</db:td>
<db:td>
<db:para>../images/logo.png</db:para>
</db:td>
<db:td>
<db:para>file:///path/to/content/images/logo.png</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in Qt 5.3.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">baseUrl</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBaseUrl</db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">baseUrlChanged</db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="blockCount-prop">
<db:title>[read-only, since 4.2] blockCount : const int</db:title>
<db:para>Returns the number of text blocks in the document.</db:para>
<db:para>The value of this property is undefined in documents with tables or frames.</db:para>
<db:para>By default, if defined, this property contains a value of 1.</db:para>
<db:para>This property was introduced in Qt 4.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">blockCount</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#lineCount">lineCount</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#characterCount">characterCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultFont-prop">
<db:title>defaultFont : QFont</db:title>
<db:para>This property holds the default font used to display the document's text</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml#defaultFont">defaultFont</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml#setDefaultFont">setDefaultFont</db:link></db:emphasis>(const <db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> &amp;<db:emphasis>font</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="defaultStyleSheet-prop">
<db:title>[since 4.2] defaultStyleSheet : QString</db:title>
<db:para>The default style sheet is applied to all newly HTML formatted text that is inserted into the document, for example using <db:link xlink:href="qtextdocument.xml#setHtml">setHtml</db:link>() or <db:link xlink:href="qtextcursor.xml#insertHtml">QTextCursor::insertHtml</db:link>().</db:para>
<db:para>The style sheet needs to be compliant to CSS 2.1 syntax.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Changing the default style sheet does not have any effect to the existing content of the document.</db:para>
<db:para>This property was introduced in Qt 4.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">defaultStyleSheet</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDefaultStyleSheet</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>sheet</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="richtext-html-subset.xml">Supported HTML Subset</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultTextOption-prop">
<db:title>defaultTextOption : QTextOption</db:title>
<db:para>This property holds the default text option will be set on all <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link>s in the document.</db:para>
<db:para>When <db:link xlink:href="qtextblock.xml">QTextBlock</db:link>s are created, the <db:link xlink:href="qtextdocument.xml#defaultTextOption">defaultTextOption</db:link> is set on their <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link>. This allows setting global properties for the document such as the default word wrap mode.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtextoption.xml">QTextOption</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml#defaultTextOption">defaultTextOption</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml#setDefaultTextOption">setDefaultTextOption</db:link></db:emphasis>(const <db:type><db:link xlink:href="qtextoption.xml">QTextOption</db:link></db:type> &amp;<db:emphasis>option</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="documentMargin-prop">
<db:title>[since 4.5] documentMargin : qreal</db:title>
<db:para>The margin around the document. The default is 4.</db:para>
<db:para>This property was introduced in Qt 4.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">documentMargin</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDocumentMargin</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>margin</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="indentWidth-prop">
<db:title>[since 4.4] indentWidth : qreal</db:title>
<db:para>Returns the width used for text list and text block indenting.</db:para>
<db:para>The indent properties of <db:link xlink:href="qtextlistformat.xml">QTextListFormat</db:link> and <db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link> specify multiples of this value. The default indent width is 40.</db:para>
<db:para>This property was introduced in Qt 4.4.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">indentWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtextdocument.xml#setIndentWidth">setIndentWidth</db:link></db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>width</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maximumBlockCount-prop">
<db:title>[since 4.2] maximumBlockCount : int</db:title>
<db:para>Specifies the limit for blocks in the document.</db:para>
<db:para>Specifies the maximum number of blocks the document may have. If there are more blocks in the document that specified with this property blocks are removed from the beginning of the document.</db:para>
<db:para>A negative or zero value specifies that the document may contain an unlimited amount of blocks.</db:para>
<db:para>The default value is 0.</db:para>
<db:para>Note that setting this property will apply the limit immediately to the document contents.</db:para>
<db:para>Setting this property also disables the undo redo history.</db:para>
<db:para>This property is undefined in documents with tables or frames.</db:para>
<db:para>This property was introduced in Qt 4.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maximumBlockCount</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximumBlockCount</db:emphasis>(<db:type>int</db:type> <db:emphasis>maximum</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="modified-prop">
<db:title>modified : bool</db:title>
<db:para>This property holds whether the document has been modified by the user</db:para>
<db:para>By default, this property is <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isModified</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setModified</db:emphasis>(<db:type>bool</db:type> <db:emphasis>m</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#modificationChanged">modificationChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pageSize-prop">
<db:title>pageSize : QSizeF</db:title>
<db:para>This property holds the page size that should be used for laying out the document</db:para>
<db:para>By default, for a newly-created, empty document, this property contains an undefined size.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> <db:emphasis role="bold">pageSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPageSize</db:emphasis>(const <db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#modificationChanged">modificationChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size-prop">
<db:title>[read-only, since 4.2] size : const QSizeF</db:title>
<db:para>Returns the actual size of the document. This is equivalent to <db:link xlink:href="qtextdocument.xml#documentLayout">documentLayout</db:link>()-&gt;documentSize();</db:para>
<db:para>The size of the document can be changed either by setting a text width or setting an entire page size.</db:para>
<db:para>Note that the width is always &gt;= <db:link xlink:href="qtextdocument.xml#pageSize-prop">pageSize</db:link>().<db:link xlink:href="qml-georectangle.xml#width">width()</db:link>.</db:para>
<db:para>By default, for a newly-created, empty document, this property contains a configuration-dependent size.</db:para>
<db:para>This property was introduced in Qt 4.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> <db:emphasis role="bold">size</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#textWidth-prop">setTextWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#pageSize-prop">setPageSize</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#idealWidth">idealWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textWidth-prop">
<db:title>[since 4.2] textWidth : qreal</db:title>
<db:para>The text width specifies the preferred width for text in the document. If the text (or content in general) is wider than the specified with it is broken into multiple lines and grows vertically. If the text cannot be broken into multiple lines to fit into the specified text width it will be larger and the <db:link xlink:href="qtextdocument.xml#size-prop">size</db:link>() and the <db:link xlink:href="qtextdocument.xml#idealWidth">idealWidth</db:link>() property will reflect that.</db:para>
<db:para>If the text width is set to -1 then the text will not be broken into multiple lines unless it is enforced through an explicit line break or a new paragraph.</db:para>
<db:para>The default value is -1.</db:para>
<db:para>Setting the text width will also set the page height to -1, causing the document to grow or shrink vertically in a continuous way. If you want the document layout to break the text into multiple pages then you have to set the <db:link xlink:href="qtextdocument.xml#pageSize-prop">pageSize</db:link> property instead.</db:para>
<db:para>This property was introduced in Qt 4.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">textWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextWidth</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>width</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#size-prop">size</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#idealWidth">idealWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#pageSize-prop">pageSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undoRedoEnabled-prop">
<db:title>undoRedoEnabled : bool</db:title>
<db:para>This property holds whether undo/redo are enabled for this document</db:para>
<db:para>This defaults to true. If disabled, the undo stack is cleared and no items will be added to it.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isUndoRedoEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUndoRedoEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="useDesignMetrics-prop">
<db:title>[since 4.1] useDesignMetrics : bool</db:title>
<db:para>This property holds whether the document uses design metrics of fonts to improve the accuracy of text layout</db:para>
<db:para>If this property is set to true, the layout will use design metrics. Otherwise, the metrics of the paint device as set on <db:link xlink:href="qabstracttextdocumentlayout.xml#setPaintDevice">QAbstractTextDocumentLayout::setPaintDevice</db:link>() will be used.</db:para>
<db:para>Using design metrics makes a layout have a width that is no longer dependent on hinting and pixel-rounding. This means that WYSIWYG text layout becomes possible because the width scales much more linearly based on paintdevice metrics than it would otherwise.</db:para>
<db:para>By default, this property is <db:code>false</db:code>.</db:para>
<db:para>This property was introduced in Qt 4.1.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">useDesignMetrics</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUseDesignMetrics</db:emphasis>(<db:type>bool</db:type> <db:emphasis>b</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextDocument">
<db:title>[explicit] QTextDocument::QTextDocument(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs an empty <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QTextDocument-1">
<db:title>[explicit] QTextDocument::QTextDocument(const QString &amp;<db:emphasis>text</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> containing the plain (unformatted) <db:code role="parameter">text</db:code> specified, and with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QTextDocument">
<db:title>[virtual noexcept] QTextDocument::~QTextDocument()</db:title>
<db:para>Destroys the document.</db:para>
</db:section>
<db:section xml:id="addResource">
<db:title>void QTextDocument::addResource(int <db:emphasis>type</db:emphasis>, const QUrl &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>resource</db:emphasis>)</db:title>
<db:para>Adds the resource <db:code role="parameter">resource</db:code> to the resource cache, using <db:code role="parameter">type</db:code> and <db:code role="parameter">name</db:code> as identifiers. <db:code role="parameter">type</db:code> should be a value from <db:link xlink:href="qtextdocument.xml#ResourceType-enum">QTextDocument::ResourceType</db:link>.</db:para>
<db:para>For example, you can add an image as a resource in order to reference it from within the document:</db:para>
<db:programlisting language="cpp">    document-&gt;addResource(QTextDocument::ImageResource,
        QUrl(&quot;mydata://image.png&quot;), QVariant(image));
</db:programlisting>
<db:para>The image can be inserted into the document using the <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> API:</db:para>
<db:programlisting language="cpp">    QTextImageFormat imageFormat;
    imageFormat.setName(&quot;mydata://image.png&quot;);
    cursor.insertImage(imageFormat);
</db:programlisting>
<db:para>Alternatively, you can insert images using the HTML <db:code>img</db:code> tag:</db:para>
<db:programlisting language="cpp">    editor-&gt;append(&quot;&lt;img src=\&quot;mydata://image.png\&quot; /&gt;&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="adjustSize">
<db:title>[since 4.2] void QTextDocument::adjustSize()</db:title>
<db:para>Adjusts the document to a reasonable size.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#idealWidth">idealWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#textWidth-prop">textWidth</db:link></db:member>
<db:member><db:link xlink:href="qtextdocument.xml#size-prop">size</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="allFormats">
<db:title>QVector&lt;QTextFormat&gt; QTextDocument::allFormats() const</db:title>
<db:para>Returns a vector of text formats for all the formats used in the document.</db:para>
</db:section>
<db:section xml:id="availableRedoSteps">
<db:title>[since 4.6] int QTextDocument::availableRedoSteps() const</db:title>
<db:para>Returns the number of available redo steps.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#isRedoAvailable">isRedoAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableUndoSteps">
<db:title>[since 4.6] int QTextDocument::availableUndoSteps() const</db:title>
<db:para>Returns the number of available undo steps.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#isUndoAvailable">isUndoAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin">
<db:title>QTextBlock QTextDocument::begin() const</db:title>
<db:para>Returns the document's first text block.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#firstBlock">firstBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockCountChanged">
<db:title>[since 4.3] void QTextDocument::blockCountChanged(int <db:emphasis>newBlockCount</db:emphasis>)</db:title>
<db:para>This signal is emitted when the total number of text blocks in the document changes. The value passed in <db:code role="parameter">newBlockCount</db:code> is the new total.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="characterAt">
<db:title>[since 4.5] QChar QTextDocument::characterAt(int <db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Returns the character at position <db:code role="parameter">pos</db:code>, or a null character if the position is out of range.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#characterCount">characterCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="characterCount">
<db:title>[since 4.5] int QTextDocument::characterCount() const</db:title>
<db:para>Returns the number of characters of this document.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#blockCount-prop">blockCount</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#characterAt">characterAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>[virtual] void QTextDocument::clear()</db:title>
<db:para>Clears the document.</db:para>
</db:section>
<db:section xml:id="clearUndoRedoStacks">
<db:title>[since 4.7] void QTextDocument::clearUndoRedoStacks(QTextDocument::Stacks <db:emphasis>stacksToClear</db:emphasis> = UndoAndRedoStacks)</db:title>
<db:para>Clears the stacks specified by <db:code role="parameter">stacksToClear</db:code>.</db:para>
<db:para>This method clears any commands on the undo stack, the redo stack, or both (the default). If commands are cleared, the appropriate signals are emitted, <db:link xlink:href="qtextdocument.xml#undoAvailable">QTextDocument::undoAvailable</db:link>() or <db:link xlink:href="qtextdocument.xml#redoAvailable">QTextDocument::redoAvailable</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#undoAvailable">QTextDocument::undoAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#redoAvailable">QTextDocument::redoAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clone">
<db:title>QTextDocument *QTextDocument::clone(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR) const</db:title>
<db:para>Creates a new <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> that is a copy of this text document. <db:code role="parameter">parent</db:code> is the parent of the returned text document.</db:para>
</db:section>
<db:section xml:id="contentsChange">
<db:title>void QTextDocument::contentsChange(int <db:emphasis>position</db:emphasis>, int <db:emphasis>charsRemoved</db:emphasis>, int <db:emphasis>charsAdded</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the document's content changes; for example, when text is inserted or deleted, or when formatting is applied.</db:para>
<db:para>Information is provided about the <db:code role="parameter">position</db:code> of the character in the document where the change occurred, the number of characters removed (<db:code role="parameter">charsRemoved</db:code>), and the number of characters added (<db:code role="parameter">charsAdded</db:code>).</db:para>
<db:para>The signal is emitted before the document's layout manager is notified about the change. This hook allows you to implement syntax highlighting for the document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttextdocumentlayout.xml#documentChanged">QAbstractTextDocumentLayout::documentChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#contentsChanged">contentsChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentsChanged">
<db:title>void QTextDocument::contentsChanged()</db:title>
<db:para>This signal is emitted whenever the document's content changes; for example, when text is inserted or deleted, or when formatting is applied.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#contentsChange">contentsChange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createObject">
<db:title>[virtual protected] QTextObject *QTextDocument::createObject(const QTextFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Creates and returns a new document object (a <db:link xlink:href="qtextobject.xml">QTextObject</db:link>), based on the given <db:code role="parameter">format</db:code>.</db:para>
<db:para>QTextObjects will always get created through this method, so you must reimplement it if you use custom text objects inside your document.</db:para>
</db:section>
<db:section xml:id="cursorPositionChanged">
<db:title>void QTextDocument::cursorPositionChanged(const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the position of a cursor changed due to an editing operation. The cursor that changed is passed in <db:code role="parameter">cursor</db:code>. If the document is used with the <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> class and you need a signal when the cursor is moved with the arrow keys you can use the <db:link xlink:href="qtextedit.xml#cursorPositionChanged">cursorPositionChanged</db:link>() signal in <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>.</db:para>
</db:section>
<db:section xml:id="defaultCursorMoveStyle">
<db:title>[since 4.8] Qt::CursorMoveStyle QTextDocument::defaultCursorMoveStyle() const</db:title>
<db:para>The default cursor movement style is used by all <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> objects created from the document. The default is <db:link xlink:href="qt.xml#CursorMoveStyle-enum">Qt::LogicalMoveStyle</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#setDefaultCursorMoveStyle">setDefaultCursorMoveStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultFont">
<db:title>QFont QTextDocument::defaultFont() const</db:title>
<db:para>Returns the default font to be used in the document layout.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qtextdocument.xml#defaultFont-prop">defaultFont</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#setDefaultFont">setDefaultFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultTextOption">
<db:title>[since 4.3] QTextOption QTextDocument::defaultTextOption() const</db:title>
<db:para>The default text option is used on all <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> objects in the document. This allows setting global properties for the document such as the default word wrap mode.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qtextdocument.xml#defaultTextOption-prop">defaultTextOption</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#setDefaultTextOption">setDefaultTextOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="documentLayout">
<db:title>QAbstractTextDocumentLayout *QTextDocument::documentLayout() const</db:title>
<db:para>Returns the document layout for this document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#setDocumentLayout">setDocumentLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="documentLayoutChanged">
<db:title>[since 4.4] void QTextDocument::documentLayoutChanged()</db:title>
<db:para>This signal is emitted when a new document layout is set.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#setDocumentLayout">setDocumentLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawContents">
<db:title>[since 4.2] void QTextDocument::drawContents(QPainter *<db:emphasis>p</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis> = QRectF())</db:title>
<db:para>Draws the content of the document with painter <db:code role="parameter">p</db:code>, clipped to <db:code role="parameter">rect</db:code>. If <db:code role="parameter">rect</db:code> is a null rectangle (default) then the document is painted unclipped.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="end">
<db:title>QTextBlock QTextDocument::end() const</db:title>
<db:para>This function returns a block to test for the end of the document while iterating over it.</db:para>
<db:programlisting language="cpp">    for (QTextBlock it = doc-&gt;begin(); it != doc-&gt;end(); it = it.next())
        cout &lt;&lt; it.text().toStdString() &lt;&lt; endl;
</db:programlisting>
<db:para>The block returned is invalid and represents the block after the last block in the document. You can use <db:link xlink:href="qtextdocument.xml#lastBlock">lastBlock</db:link>() to retrieve the last valid block of the document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#lastBlock">lastBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="find">
<db:title>[since 5.5] QTextCursor QTextDocument::find(const QRegularExpression &amp;<db:emphasis>expr</db:emphasis>, const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>, QTextDocument::FindFlags <db:emphasis>options</db:emphasis> = FindFlags()) const</db:title>
<db:para>Finds the next occurrence that matches the given regular expression, <db:code role="parameter">expr</db:code>, within the same paragraph in the document.</db:para>
<db:para>The search starts at the position of the given <db:code role="parameter">cursor</db:code>, and proceeds forwards through the document unless specified otherwise in the search options. The <db:code role="parameter">options</db:code> control the type of search performed.</db:para>
<db:para>Returns a cursor with the match selected if a match was found; otherwise returns a null cursor.</db:para>
<db:para>If the given <db:code role="parameter">cursor</db:code> has a selection, the search begins after the selection; otherwise it begins at the cursor's position.</db:para>
<db:para>By default the search is case-sensitive, and can match text anywhere in the document.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="find-1">
<db:title>[since 5.5] QTextCursor QTextDocument::find(const QRegularExpression &amp;<db:emphasis>expr</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0, QTextDocument::FindFlags <db:emphasis>options</db:emphasis> = FindFlags()) const</db:title>
<db:para>Finds the next occurrence that matches the given regular expression, <db:code role="parameter">expr</db:code>, within the same paragraph in the document.</db:para>
<db:para>The search starts at the given <db:code role="parameter">from</db:code> position, and proceeds forwards through the document unless specified otherwise in the search options. The <db:code role="parameter">options</db:code> control the type of search performed.</db:para>
<db:para>Returns a cursor with the match selected if a match was found; otherwise returns a null cursor.</db:para>
<db:para>If the <db:code role="parameter">from</db:code> position is 0 (the default) the search begins from the beginning of the document; otherwise it begins at the specified position.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="find-2">
<db:title>QTextCursor QTextDocument::find(const QString &amp;<db:emphasis>subString</db:emphasis>, const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>, QTextDocument::FindFlags <db:emphasis>options</db:emphasis> = FindFlags()) const</db:title>
<db:para>Finds the next occurrence of the string, <db:code role="parameter">subString</db:code>, in the document. The search starts at the position of the given <db:code role="parameter">cursor</db:code>, and proceeds forwards through the document unless specified otherwise in the search options. The <db:code role="parameter">options</db:code> control the type of search performed.</db:para>
<db:para>Returns a cursor with the match selected if <db:code role="parameter">subString</db:code> was found; otherwise returns a null cursor.</db:para>
<db:para>If the given <db:code role="parameter">cursor</db:code> has a selection, the search begins after the selection; otherwise it begins at the cursor's position.</db:para>
<db:para>By default the search is case-sensitive, and can match text anywhere in the document.</db:para>
</db:section>
<db:section xml:id="find-3">
<db:title>QTextCursor QTextDocument::find(const QRegExp &amp;<db:emphasis>expr</db:emphasis>, const QTextCursor &amp;<db:emphasis>cursor</db:emphasis>, QTextDocument::FindFlags <db:emphasis>options</db:emphasis> = FindFlags()) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Finds the next occurrence that matches the given regular expression, <db:code role="parameter">expr</db:code>, within the same paragraph in the document.</db:para>
<db:para>The search starts at the position of the given from <db:code role="parameter">cursor</db:code>, and proceeds forwards through the document unless specified otherwise in the search options. The <db:code role="parameter">options</db:code> control the type of search performed. The <db:link xlink:href="qtextdocument.xml#FindFlag-enum">FindCaseSensitively</db:link> option is ignored for this overload, use <db:link xlink:href="qregexp.xml#caseSensitivity">QRegExp::caseSensitivity</db:link> instead.</db:para>
<db:para>Returns a cursor with the match selected if a match was found; otherwise returns a null cursor.</db:para>
<db:para>If the given <db:code role="parameter">cursor</db:code> has a selection, the search begins after the selection; otherwise it begins at the cursor's position.</db:para>
<db:para>By default the search is case-sensitive, and can match text anywhere in the document.</db:para>
</db:section>
<db:section xml:id="find-4">
<db:title>QTextCursor QTextDocument::find(const QRegExp &amp;<db:emphasis>expr</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0, QTextDocument::FindFlags <db:emphasis>options</db:emphasis> = FindFlags()) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Finds the next occurrence that matches the given regular expression, <db:code role="parameter">expr</db:code>, within the same paragraph in the document.</db:para>
<db:para>The search starts at the given <db:code role="parameter">from</db:code> position, and proceeds forwards through the document unless specified otherwise in the search options. The <db:code role="parameter">options</db:code> control the type of search performed. The <db:link xlink:href="qtextdocument.xml#FindFlag-enum">FindCaseSensitively</db:link> option is ignored for this overload, use <db:link xlink:href="qregexp.xml#caseSensitivity">QRegExp::caseSensitivity</db:link> instead.</db:para>
<db:para>Returns a cursor with the match selected if a match was found; otherwise returns a null cursor.</db:para>
<db:para>If the <db:code role="parameter">from</db:code> position is 0 (the default) the search begins from the beginning of the document; otherwise it begins at the specified position.</db:para>
</db:section>
<db:section xml:id="find-5">
<db:title>QTextCursor QTextDocument::find(const QString &amp;<db:emphasis>subString</db:emphasis>, int <db:emphasis>position</db:emphasis> = 0, QTextDocument::FindFlags <db:emphasis>options</db:emphasis> = FindFlags()) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Finds the next occurrence of the string, <db:code role="parameter">subString</db:code>, in the document. The search starts at the given <db:code role="parameter">position</db:code>, and proceeds forwards through the document unless specified otherwise in the search options. The <db:code role="parameter">options</db:code> control the type of search performed.</db:para>
<db:para>Returns a cursor with the match selected if <db:code role="parameter">subString</db:code> was found; otherwise returns a null cursor.</db:para>
<db:para>If the <db:code role="parameter">position</db:code> is 0 (the default) the search begins from the beginning of the document; otherwise it begins at the specified position.</db:para>
</db:section>
<db:section xml:id="findBlock">
<db:title>QTextBlock QTextDocument::findBlock(int <db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Returns the text block that contains the <db:code role="parameter">pos</db:code>-th character.</db:para>
</db:section>
<db:section xml:id="findBlockByLineNumber">
<db:title>[since 4.5] QTextBlock QTextDocument::findBlockByLineNumber(int <db:emphasis>lineNumber</db:emphasis>) const</db:title>
<db:para>Returns the text block that contains the specified <db:code role="parameter">lineNumber</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#firstLineNumber">QTextBlock::firstLineNumber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findBlockByNumber">
<db:title>[since 4.4] QTextBlock QTextDocument::findBlockByNumber(int <db:emphasis>blockNumber</db:emphasis>) const</db:title>
<db:para>Returns the text block with the specified <db:code role="parameter">blockNumber</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#blockNumber">QTextBlock::blockNumber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="firstBlock">
<db:title>[since 4.4] QTextBlock QTextDocument::firstBlock() const</db:title>
<db:para>Returns the document's first text block.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="idealWidth">
<db:title>[since 4.2] qreal QTextDocument::idealWidth() const</db:title>
<db:para>Returns the ideal width of the text document. The ideal width is the actually used width of the document without optional alignments taken into account. It is always &lt;= <db:link xlink:href="qtextdocument.xml#size-prop">size</db:link>().<db:link xlink:href="qml-georectangle.xml#width">width()</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#adjustSize">adjustSize</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#textWidth-prop">textWidth</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QTextDocument::isEmpty() const</db:title>
<db:para>Returns <db:code>true</db:code> if the document is empty; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isRedoAvailable">
<db:title>bool QTextDocument::isRedoAvailable() const</db:title>
<db:para>Returns <db:code>true</db:code> if redo is available; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#isUndoAvailable">isUndoAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#availableRedoSteps">availableRedoSteps</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isUndoAvailable">
<db:title>bool QTextDocument::isUndoAvailable() const</db:title>
<db:para>Returns <db:code>true</db:code> if undo is available; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#isRedoAvailable">isRedoAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#availableUndoSteps">availableUndoSteps</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastBlock">
<db:title>[since 4.4] QTextBlock QTextDocument::lastBlock() const</db:title>
<db:para>Returns the document's last (valid) text block.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="lineCount">
<db:title>[since 4.5] int QTextDocument::lineCount() const</db:title>
<db:para>Returns the number of lines of this document (if the layout supports this). Otherwise, this is identical to the number of blocks.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#blockCount-prop">blockCount</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#characterCount">characterCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadResource">
<db:title>[virtual protected] QVariant QTextDocument::loadResource(int <db:emphasis>type</db:emphasis>, const QUrl &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Loads data of the specified <db:code role="parameter">type</db:code> from the resource with the given <db:code role="parameter">name</db:code>.</db:para>
<db:para>This function is called by the rich text engine to request data that isn't directly stored by <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>, but still associated with it. For example, images are referenced indirectly by the name attribute of a <db:link xlink:href="qtextimageformat.xml">QTextImageFormat</db:link> object.</db:para>
<db:para>When called by Qt, <db:code role="parameter">type</db:code> is one of the values of <db:link xlink:href="qtextdocument.xml#ResourceType-enum">QTextDocument::ResourceType</db:link>.</db:para>
<db:para>If the <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> is a child object of a <db:link xlink:href="qobject.xml">QObject</db:link> that has an invokable loadResource method such as <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>, <db:link xlink:href="qtextbrowser.xml">QTextBrowser</db:link> or a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> itself then the default implementation tries to retrieve the data from the parent.</db:para>
</db:section>
<db:section xml:id="markContentsDirty">
<db:title>void QTextDocument::markContentsDirty(int <db:emphasis>position</db:emphasis>, int <db:emphasis>length</db:emphasis>)</db:title>
<db:para>Marks the contents specified by the given <db:code role="parameter">position</db:code> and <db:code role="parameter">length</db:code> as &quot;dirty&quot;, informing the document that it needs to be laid out again.</db:para>
</db:section>
<db:section xml:id="metaInformation">
<db:title>QString QTextDocument::metaInformation(QTextDocument::MetaInformation <db:emphasis>info</db:emphasis>) const</db:title>
<db:para>Returns meta information about the document of the type specified by <db:code role="parameter">info</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#setMetaInformation">setMetaInformation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modificationChanged">
<db:title>void QTextDocument::modificationChanged(bool <db:emphasis>changed</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the content of the document changes in a way that affects the modification state. If <db:code role="parameter">changed</db:code> is true, the document has been modified; otherwise it is false.</db:para>
<db:para>For example, calling <db:link xlink:href="qtextdocument.xml#modified-prop">setModified</db:link>(false) on a document and then inserting text causes the signal to get emitted. If you undo that operation, causing the document to return to its original unmodified state, the signal will get emitted again.</db:para>
</db:section>
<db:section xml:id="object">
<db:title>QTextObject *QTextDocument::object(int <db:emphasis>objectIndex</db:emphasis>) const</db:title>
<db:para>Returns the text object associated with the given <db:code role="parameter">objectIndex</db:code>.</db:para>
</db:section>
<db:section xml:id="objectForFormat">
<db:title>QTextObject *QTextDocument::objectForFormat(const QTextFormat &amp;<db:emphasis>f</db:emphasis>) const</db:title>
<db:para>Returns the text object associated with the format <db:code role="parameter">f</db:code>.</db:para>
</db:section>
<db:section xml:id="pageCount">
<db:title>int QTextDocument::pageCount() const</db:title>
<db:para>returns the number of pages in this document.</db:para>
</db:section>
<db:section xml:id="print">
<db:title>void QTextDocument::print(QPagedPaintDevice *<db:emphasis>printer</db:emphasis>) const</db:title>
<db:para>Prints the document to the given <db:code role="parameter">printer</db:code>. The QPageablePaintDevice must be set up before being used with this function.</db:para>
<db:para>This is only a convenience method to print the whole document to the printer.</db:para>
<db:para>If the document is already paginated through a specified height in the <db:link xlink:href="qtextdocument.xml#pageSize-prop">pageSize</db:link>() property it is printed as-is.</db:para>
<db:para>If the document is not paginated, like for example a document used in a <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>, then a temporary copy of the document is created and the copy is broken into multiple pages according to the size of the paint device's paperRect(). By default a 2 cm margin is set around the document contents. In addition the current page number is printed at the bottom of each page.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextedit.xml#print">QTextEdit::print</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redo">
<db:title>[since 4.2] void QTextDocument::redo(QTextCursor *<db:emphasis>cursor</db:emphasis>)</db:title>
<db:para>Redoes the last editing operation on the document if <db:link xlink:href="qtextdocument.xml#isRedoAvailable">redo is available</db:link>.</db:para>
<db:para>The provided <db:code role="parameter">cursor</db:code> is positioned at the end of the location where the edition operation was redone.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="redo-1">
<db:title>void QTextDocument::redo()</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Redoes the last editing operation on the document if <db:link xlink:href="qtextdocument.xml#isRedoAvailable">redo is available</db:link>.</db:para>
</db:section>
<db:section xml:id="redoAvailable">
<db:title>void QTextDocument::redoAvailable(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever redo operations become available (<db:code role="parameter">available</db:code> is true) or unavailable (<db:code role="parameter">available</db:code> is false).</db:para>
</db:section>
<db:section xml:id="resource">
<db:title>QVariant QTextDocument::resource(int <db:emphasis>type</db:emphasis>, const QUrl &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns data of the specified <db:code role="parameter">type</db:code> from the resource with the given <db:code role="parameter">name</db:code>.</db:para>
<db:para>This function is called by the rich text engine to request data that isn't directly stored by <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>, but still associated with it. For example, images are referenced indirectly by the name attribute of a <db:link xlink:href="qtextimageformat.xml">QTextImageFormat</db:link> object.</db:para>
<db:para>Resources are cached internally in the document. If a resource can not be found in the cache, <db:link xlink:href="qtextdocument.xml#loadResource">loadResource</db:link> is called to try to load the resource. <db:link xlink:href="qtextdocument.xml#loadResource">loadResource</db:link> should then use <db:link xlink:href="qtextdocument.xml#addResource">addResource</db:link> to add the resource to the cache.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#ResourceType-enum">QTextDocument::ResourceType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="revision">
<db:title>[since 4.4] int QTextDocument::revision() const</db:title>
<db:para>Returns the document's revision (if undo is enabled).</db:para>
<db:para>The revision is guaranteed to increase when a document that is not modified is edited.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextblock.xml#revision">QTextBlock::revision</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#modified-prop">isModified</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rootFrame">
<db:title>QTextFrame *QTextDocument::rootFrame() const</db:title>
<db:para>Returns the document's root frame.</db:para>
</db:section>
<db:section xml:id="setDefaultCursorMoveStyle">
<db:title>[since 4.8] void QTextDocument::setDefaultCursorMoveStyle(Qt::CursorMoveStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:para>Sets the default cursor movement style to the given <db:code role="parameter">style</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#defaultCursorMoveStyle">defaultCursorMoveStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultFont">
<db:title>void QTextDocument::setDefaultFont(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:para>Sets the default <db:code role="parameter">font</db:code> to use in the document layout.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qtextdocument.xml#defaultFont-prop">defaultFont</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#defaultFont">defaultFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultTextOption">
<db:title>[since 4.3] void QTextDocument::setDefaultTextOption(const QTextOption &amp;<db:emphasis>option</db:emphasis>)</db:title>
<db:para>Sets the default text option to <db:code role="parameter">option</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qtextdocument.xml#defaultTextOption-prop">defaultTextOption</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#defaultTextOption">defaultTextOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDocumentLayout">
<db:title>void QTextDocument::setDocumentLayout(QAbstractTextDocumentLayout *<db:emphasis>layout</db:emphasis>)</db:title>
<db:para>Sets the document to use the given <db:code role="parameter">layout</db:code>. The previous layout is deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#documentLayoutChanged">documentLayoutChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHtml">
<db:title>void QTextDocument::setHtml(const QString &amp;<db:emphasis>html</db:emphasis>)</db:title>
<db:para>Replaces the entire contents of the document with the given HTML-formatted text in the <db:code role="parameter">html</db:code> string. The undo/redo history is reset when this function is called.</db:para>
<db:para>The HTML formatting is respected as much as possible; for example, &quot;&lt;b&gt;bold&lt;/b&gt; text&quot; will produce text where the first word has a font weight that gives it a bold appearance: &quot;<db:emphasis role="bold">bold</db:emphasis> text&quot;.</db:para>
<db:note>
<db:para>It is the responsibility of the caller to make sure that the text is correctly decoded when a <db:link xlink:href="qstring.xml">QString</db:link> containing HTML is created and passed to setHtml().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#setPlainText">setPlainText</db:link>()</db:member>
<db:member><db:link xlink:href="richtext-html-subset.xml">Supported HTML Subset</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIndentWidth">
<db:title>[since 4.4] void QTextDocument::setIndentWidth(qreal <db:emphasis>width</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">width</db:code> used for text list and text block indenting.</db:para>
<db:para>The indent properties of <db:link xlink:href="qtextlistformat.xml">QTextListFormat</db:link> and <db:link xlink:href="qtextblockformat.xml">QTextBlockFormat</db:link> specify multiples of this value. The default indent width is 40 .</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qtextdocument.xml#indentWidth-prop">indentWidth</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#indentWidth-prop">indentWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMetaInformation">
<db:title>void QTextDocument::setMetaInformation(QTextDocument::MetaInformation <db:emphasis>info</db:emphasis>, const QString &amp;<db:emphasis>string</db:emphasis>)</db:title>
<db:para>Sets the document's meta information of the type specified by <db:code role="parameter">info</db:code> to the given <db:code role="parameter">string</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#metaInformation">metaInformation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPlainText">
<db:title>void QTextDocument::setPlainText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Replaces the entire contents of the document with the given plain <db:code role="parameter">text</db:code>. The undo/redo history is reset when this function is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#setHtml">setHtml</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toHtml">
<db:title>QString QTextDocument::toHtml(const QByteArray &amp;<db:emphasis>encoding</db:emphasis> = QByteArray()) const</db:title>
<db:para>Returns a string containing an HTML representation of the document.</db:para>
<db:para>The <db:code role="parameter">encoding</db:code> parameter specifies the value for the charset attribute in the html header. For example if 'utf-8' is specified then the beginning of the generated html will look like this:</db:para>
<db:programlisting language="cpp">&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;/head&gt;&lt;body&gt;...
</db:programlisting>
<db:para>If no encoding is specified then no such meta information is generated.</db:para>
<db:para>If you later on convert the returned html string into a byte array for transmission over a network or when saving to disk you should specify the encoding you're going to use for the conversion to a byte array here.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="richtext-html-subset.xml">Supported HTML Subset</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toPlainText">
<db:title>QString QTextDocument::toPlainText() const</db:title>
<db:para>Returns the plain text contained in the document. If you want formatting information use a <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link> instead.</db:para>
<db:note>
<db:para>Embedded objects, such as images, are represented by a Unicode value U+FFFC (OBJECT REPLACEMENT CHARACTER).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#toHtml">toHtml</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undo">
<db:title>[since 4.2] void QTextDocument::undo(QTextCursor *<db:emphasis>cursor</db:emphasis>)</db:title>
<db:para>Undoes the last editing operation on the document if undo is available. The provided <db:code role="parameter">cursor</db:code> is positioned at the end of the location where the edition operation was undone.</db:para>
<db:para>See the <db:link xlink:href="qundo.xml">Qt Undo Framework</db:link> documentation for details.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#undoAvailable">undoAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#undoRedoEnabled-prop">isUndoRedoEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undo-1">
<db:title>void QTextDocument::undo()</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="undoAvailable">
<db:title>void QTextDocument::undoAvailable(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever undo operations become available (<db:code role="parameter">available</db:code> is true) or unavailable (<db:code role="parameter">available</db:code> is false).</db:para>
<db:para>See the <db:link xlink:href="qundo.xml">Qt Undo Framework</db:link> documentation for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#undo-1">undo</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#undoRedoEnabled-prop">isUndoRedoEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undoCommandAdded">
<db:title>[since 4.4] void QTextDocument::undoCommandAdded()</db:title>
<db:para>This signal is emitted every time a new level of undo is added to the <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
</db:section>
</db:article>
