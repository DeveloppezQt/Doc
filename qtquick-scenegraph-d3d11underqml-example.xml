<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Scene Graph - Direct3D 11 Under QML</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to render directly with Direct3D 11 under a Qt Quick scene.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/d3d11underqml-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>The Direct3D 11 Under QML example shows how an application can make use of the <db:link xlink:href="qquickwindow.xml#beforeRendering">QQuickWindow::beforeRendering</db:link>() signal to draw custom D3D11 content under a Qt Quick scene. This signal is emitted at the start of every frame, before the scene graph starts its rendering, thus any D3D11 draw calls that are made as a response to this signal, will stack under the Qt Quick items.</db:para>
<db:para>As an alternative, applications that wish to render D3D11 content on top of the Qt Quick scene, can do so by connecting to the <db:link xlink:href="qquickwindow.xml#afterRendering">QQuickWindow::afterRendering</db:link>() signal.</db:para>
<db:para>In this example, we will also see how it is possible to have values that are exposed to QML which affect the D3D11 rendering. We animate the threshold value using a <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> in the QML file and this value is used by the HLSL shader program that draws the squircles.</db:para>
<db:para>The example is equivalent in most ways to the <db:link xlink:href="qtquick-scenegraph-openglunderqml-example.xml">OpenGL Under QML</db:link>, <db:link xlink:href="qtquick-scenegraph-metalunderqml-example.xml">Metal Under QML</db:link>, and <db:link xlink:href="qtquick-scenegraph-vulkanunderqml-example.xml">Vulkan Under QML</db:link> examples, they all render the same custom content, just via different native APIs.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/scenegraph/d3d11underqml?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
