<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Important Concepts In Qt Quick - Data - Models, Views and Data Storage</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Overview of the data, model and view concepts.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Most applications will have data that needs to be displayed to the user. That data might come from a variety of sources: network sources, local files, and databases are all common sources of data.</db:para>
<db:section xml:id="models-and-views">
<db:title>Models and Views</db:title>
<db:para>It is often advantageous to show similar data in a similar manner, within an application, and this gives rise to the idea of having a model which contains data, and a view which displays the data. The view will display a delegate for every datum in the model.</db:para>
<db:para>For information about how the Model/View paradigm is implemented in Qt Quick, see the page titled <db:link xlink:href="qtquick-modelviewsdata-modelview.xml">Models and Views in Qt Quick</db:link>.</db:para>
</db:section>
<db:section xml:id="data-storage-and-access">
<db:title>Data Storage and Access</db:title>
<db:para>Databases are commonly used to store information in applications. Qt Quick provides simplified access to relational databases via the <db:link xlink:href="qtquick-localstorage-qmlmodule.xml">QtQuick.LocalStorage</db:link> module.</db:para>
</db:section>
</db:article>
