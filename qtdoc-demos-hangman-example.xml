<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>In-App purchasing demo</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A complete mobile application that demonstrates purchasing in-app products.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="what-is-this-demo">
<db:title>What is this demo?</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qthangman-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This demo is a mobile game application based on the classic word guessing game Hangman, where vowels can be purchased through the demo's internal store. In the game you will be presented with a row of dashes, representing letters of the word to guess. By guessing a correct letter that occurs in the given word, the letter will be placed on the corresponding dash or dashes in the word. By guessing every letter of the word or just guessing the whole word correctly at any time the game is over and you heve won. If the guess is wrong, one element of a hanging stick figure is drawn. Once the figure is complete, you are out of guesses and you lose.</db:para>
<db:para>The demo shows how it is possible to offer in-app products inside a Qt application, for the Android and iOS platforms. In order to test the in-app purchase functionality in the the demo, you must first register the application and its products in the external store. For an introduction on how to do this, see the guides for <db:link xlink:href="qtpurchasing-googleplay.xml">Google Play</db:link> and <db:link xlink:href="qtpurchasing-appstore.xml">App Store</db:link> respectively.</db:para>
</db:section>
<db:section xml:id="A3rd-party-app-stores">
<db:title>3rd party app stores</db:title>
<db:para>The in-app products must be registered in the target stores, before they can be queried or purchased in an application. We recommend using the same identifiers for the products in each store, as it simplifies the code to query and purchase the products.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtpurchasing-googleplay.xml">Registering Products in Google Play</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtpurchasing-appstore.xml">Registering Products in App Store</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="how-does-the-demo-work">
<db:title>How does the demo work</db:title>
<db:para>The demo is a QML application that registers QML types to access information about in-app products, as well as to request purchases for those products. These are registered in the external store for the target platform</db:para>
<db:para>In-app purchasing are added to application by first adding a Store object. In the demo the Store object is created by the MainView component that is loaded on application startup.</db:para>
<db:programlisting language="qml">Store {
    id: iapStore
}
</db:programlisting>
<db:para>The demo defines a component for displaying a store for purchasing in-app products made available. These products must be first registered with the store object we created above in MainView. There are two products available, the first being a consumable type.</db:para>
<db:programlisting language="qml">Product {
    id: product100Vowels
    store: iapStore
    type: Product.Consumable
    identifier: &quot;qt.io.demo.hangman.100vowels&quot;

    onPurchaseSucceeded: {
        console.log(identifier + &quot; purchase successful&quot;);
        //Add 100 Vowels
        applicationData.vowelsAvailable += 100;
        transaction.finalize();
        pageStack.pop();
    }

    onPurchaseFailed: {
        console.log(identifier + &quot; purchase failed&quot;);
        console.log(&quot;reason: &quot;
                    + transaction.failureReason === Transaction.CanceledByUser ? &quot;Canceled&quot; : transaction.errorString);
        transaction.finalize();
    }
}
</db:programlisting>
<db:para>This consumable product provides 100 additional vowels to be used when guessing words in the game. When it is successfully purchased, we update the state of the application to include 100 additional vowels. Then we call finalize() on the transaction object to confirm to the platform store that the consumable product has been provided.</db:para>
<db:para>The second product is a non-consumable type that will unlock vowels permanently in the future. In addition to updating the application state on purchase, we must make sure to provide a way to restore this purchase on other devices used by the end user. In this case we create a signal handler for onPurchaseRestored.</db:para>
<db:programlisting language="qml">Product {
    id: productUnlockVowels
    type: Product.Unlockable
    store: iapStore
    identifier: &quot;qt.io.demo.hangman.unlockvowels&quot;

    onPurchaseSucceeded: {
        console.log(identifier + &quot; purchase successful&quot;);
        applicationData.vowelsUnlocked = true;
        transaction.finalize();
        pageStack.pop();
    }

    onPurchaseFailed: {
        console.log(identifier + &quot; purchase failed&quot;);
        console.log(&quot;reason: &quot;
                    + transaction.failureReason === Transaction.CanceledByUser ? &quot;Canceled&quot; : transaction.errorString);
        transaction.finalize();
    }

    onPurchaseRestored: {
        console.log(identifier + &quot; purchase restored&quot;);
        applicationData.vowelsUnlocked = true;
        console.log(&quot;timestamp: &quot; + transaction.timestamp);
        transaction.finalize();
        pageStack.pop();
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qthangman-store-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In addition to registering the products, the demo also provide an interface to actually purchase the registered product. The demo defines a custom component called StoreItem to display and handle the purchasing interaction.</db:para>
<db:programlisting language="qml">Product {
    id: productUnlockVowels
    type: Product.Unlockable
    store: iapStore
    identifier: &quot;qt.io.demo.hangman.unlockvowels&quot;

    onPurchaseSucceeded: {
        console.log(identifier + &quot; purchase successful&quot;);
        applicationData.vowelsUnlocked = true;
        transaction.finalize();
        pageStack.pop();
    }

    onPurchaseFailed: {
        console.log(identifier + &quot; purchase failed&quot;);
        console.log(&quot;reason: &quot;
                    + transaction.failureReason === Transaction.CanceledByUser ? &quot;Canceled&quot; : transaction.errorString);
        transaction.finalize();
    }

    onPurchaseRestored: {
        console.log(identifier + &quot; purchase restored&quot;);
        applicationData.vowelsUnlocked = true;
        console.log(&quot;timestamp: &quot; + transaction.timestamp);
        transaction.finalize();
        pageStack.pop();
    }
}
</db:programlisting>
<db:para>The StoreItem component will display the product data that is queried from the platform's store, and will call the purchase() method on the product when it is clicked by the user.</db:para>
<db:programlisting language="qml">Text {
    id: titleText
    text: product.title
    font.bold: true
    anchors.right: priceText.left
    anchors.rightMargin: topLevel.globalMargin
    anchors.top: parent.top
    anchors.topMargin: topLevel.globalMargin
    anchors.left: parent.left
    anchors.leftMargin: topLevel.globalMargin
}

Text {
    id: descriptionText
    text: product.description
    anchors.right: priceText.left
    anchors.rightMargin: topLevel.globalMargin
    anchors.left: parent.left
    anchors.leftMargin: topLevel.globalMargin
    anchors.top: titleText.bottom
    anchors.topMargin: topLevel.globalMargin / 2
    wrapMode: Text.WordWrap
}

Text {
    id: priceText
    text: product.price
    anchors.right: parent.right
    anchors.rightMargin: topLevel.globalMargin
    anchors.verticalCenter: parent.verticalCenter
}

MouseArea {
    anchors.fill: parent
    onClicked: {
        pendingRect.visible = true;
        spinBox.visible = true;
        statusText.text = &quot;Purchasing...&quot;;
        storeItem.state = &quot;PURCHASING&quot;;
        product.purchase();
    }
    onPressed: {
        storeItem.state = &quot;PRESSED&quot;;
    }
    onReleased: {
        storeItem.state = &quot;NORMAL&quot;;
    }
}
</db:programlisting>
<db:para>If you are planning to use QML in your project with purchasing functionality, check out <db:link xlink:href="qtpurchasing-gettingstarted-qml.xml">Getting Started with Qt Purchasing in QML</db:link>.</db:para>
<db:para>Android and iOS use the base classes. From base classes there are derivative classes for android and ios:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtpurchasing-baseclasses.xml">Base Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtpurchasing-androidclasses.xml">Demo Android Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtpurchasing-iosclasses.xml">Demo iOS Classes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="in-app-purchases">
<db:title>In-App purchases</db:title>
<db:para>In-app purchases are a way to monetize an application. These purchases are made from inside the application and can include anything from unlocking content to virtual items. The demo uses the system APIs for in-app purchases, which means the purchase process is more familiar to the user, and the information already stored by the platform (such as credit card information) can be used to simplify the purchase process.</db:para>
</db:section>
<db:section xml:id="licenses-and-attributions">
<db:title>Licenses and attributions</db:title>
<db:para>In regards to deploying the demo on Android see <db:link xlink:href="whatsnew63.xml#android">Android</db:link> GNU C++ Run-time Licensing for more information.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="demos/hangman/CMakeLists.txt">demos/hangman/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/hangman/hangman.pro">demos/hangman/hangman.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/hangman/purchasing/android/src/org/qtproject/qt/android/purchasing/Base64.java">demos/hangman/purchasing/android/src/org/qtproject/qt/android/purchasing/Base64.java</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/hangman/purchasing/android/src/org/qtproject/qt/android/purchasing/Base64DecoderException.java">demos/hangman/purchasing/android/src/org/qtproject/qt/android/purchasing/Base64DecoderException.java</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/hangman/purchasing/android/src/org/qtproject/qt/android/purchasing/InAppPurchase.java">demos/hangman/purchasing/android/src/org/qtproject/qt/android/purchasing/InAppPurchase.java</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/hangman/purchasing/android/src/org/qtproject/qt/android/purchasing/Security.java">demos/hangman/purchasing/android/src/org/qtproject/qt/android/purchasing/Security.java</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/hangman/resources.qrc">demos/hangman/resources.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
