<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Model/View Tutorial</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="index.xml" xlink:type="arc" xlink:arcrole="start" xlink:title="Qt Reference Documentation"/></db:extendedlink>
<db:abstract>
<db:para>An introduction to ModelView programming.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Every UI developer should know about ModelView programming and the goal of this tutorial is to provide you with an easily understandable introduction to this topic.</db:para>
<db:para>Table, list and tree widgets are components frequently used in GUIs. There are 2 different ways how these widgets can access their data. The traditional way involves widgets which include internal containers for storing data. This approach is very intuitive, however, in many non-trivial applications, it leads to data synchronization issues. The second approach is model/view programming, in which widgets do not maintain internal data containers. They access external data through a standardized interface and therefore avoid data duplication. This may seem complicated at first, but once you take a closer look, it is not only easy to grasp, but the many benefits of model/view programming also become clearer.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/treeview.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In the process, we will learn about some basic technologies provided by Qt, such as:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The difference between standard and model/view widgets</db:para>
</db:listitem>
<db:listitem>
<db:para>Adapters between forms and models</db:para>
</db:listitem>
<db:listitem>
<db:para>Developing a simple model/view application</db:para>
</db:listitem>
<db:listitem>
<db:para>Predefined models</db:para>
</db:listitem>
<db:listitem>
<db:para>Intermediate topics such as:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Tree views</db:para>
</db:listitem>
<db:listitem>
<db:para>Selection</db:para>
</db:listitem>
<db:listitem>
<db:para>Delegates</db:para>
</db:listitem>
<db:listitem>
<db:para>Debugging with model test</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:para>You will also learn whether your new application can be written easier with model/view programming or if classic widgets will work just as well.</db:para>
<db:para>This tutorial includes example code for you to edit and integrate into your project. The tutorial's source code is located in Qt's <db:emphasis>examples/widgets/tutorials/modelview</db:emphasis> directory.</db:para>
<db:para>For more detailed information you may also want to look at the <db:link xlink:href="model-view-programming.xml">reference documentation</db:link></db:para>
<db:section xml:id="A1-introduction">
<db:title>1. Introduction</db:title>
<db:para>Model/View is a technology used to separate data from views in widgets that handle data sets. Standard widgets are not designed for separating data from views and this is why Qt 4 has two different types of widgets. Both types of widgets look the same, but they interact with data differently.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Standard widgets use data that is part of the widget.</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/standardwidget.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>View classes operate on external data (the model)</db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="A1-1-standard-widgets">
<db:title>1.1 Standard Widgets</db:title>
<db:para>Let's have a closer look at a standard table widget. A table widget is a 2D array of the data elements that the user can change. The table widget can be integrated into a program flow by reading and writing the data elements that the table widget provides. This method is very intuitive and useful in many applications, but displaying and editing a database table with a standard table widget can be problematic. Two copies of the data have to be coordinated: one outside the widget; one inside the widget. The developer is responsible for synchronizing both versions. Besides this, the tight coupling of presentation and data makes it harder to write unit tests.</db:para>
</db:section>
<db:section xml:id="A1-2-model-view-to-the-rescue">
<db:title>1.2 Model/View to the Rescue</db:title>
<db:para>Model/view stepped up to provide a solution that uses a more versatile architecture. Model/view eliminates the data consistency problems that may occur with standard widgets. Model/view also makes it easier to use more than one view of the same data because one model can be passed on to many views. The most important difference is that model/view widgets do not store data behind the table cells. In fact, they operate directly from your data. Since view classes do not know your data's structure, you need to provide a wrapper to make your data conform to the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> interface. A view uses this interface to read from and write to your data. Any instance of a class that implements <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> is said to be a model. Once the view receives a pointer to a model, it will read and display its content and be its editor.</db:para>
</db:section>
<db:section xml:id="A1-3-overview-of-the-model-view-widgets">
<db:title>1.3 Overview of the Model/View Widgets</db:title>
<db:para>Here is an overview of the model/view widgets and their corresponding standard widgets.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Widget</db:para>
</db:th>
<db:th>
<db:para>Standard Widget (an item based convenience class)</db:para>
</db:th>
<db:th>
<db:para>Model/View View Class (for use with external data)</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/listview.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlistwidget.xml">QListWidget</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlistview.xml">QListView</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/tableview.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtablewidget.xml">QTableWidget</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtableview.xml">QTableView</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/treeview.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/columnview.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para><db:link xlink:href="qcolumnview.xml">QColumnView</db:link> shows a tree as a hierarchy of lists</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-combobox.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para><db:link xlink:href="qcombobox.xml">QComboBox</db:link> can work as both a view class and also as a traditional widget</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="A1-4-using-adapters-between-forms-and-models">
<db:title>1.4 Using Adapters between Forms and Models</db:title>
<db:para>Having adapters between forms and models can come in handy.</db:para>
<db:para>We can edit data stored in tables directly from within the table itself, but it's much more comfortable to edit data in text fields. There is no direct model/view counterpart that separates data and views for widgets that operate on one value (<db:link xlink:href="qlineedit.xml">QLineEdit</db:link>, <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link> ...) instead of a dataset, so we need an adapter in order to connect the form to the source of data.</db:para>
<db:para><db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> is a great solution because it maps form widgets to a table row and makes it very easy to build forms for database tables.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/widgetmapper.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Another example of an adapter is <db:link xlink:href="qcompleter.xml">QCompleter</db:link>. Qt has <db:link xlink:href="qcompleter.xml">QCompleter</db:link> for providing auto-completions in Qt widgets such as <db:link xlink:href="qcombobox.xml">QComboBox</db:link> and, as shown below, <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>. <db:link xlink:href="qcompleter.xml">QCompleter</db:link> uses a model as its data source.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qcompleter.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
</db:section>
<db:section xml:id="A2-a-simple-model-view-application">
<db:title>2. A Simple Model/View Application</db:title>
<db:para>If you want to develop a model/view application, where should you start? We recommend starting with a simple example and extending it step-by-step. This makes understanding the architecture a lot easier. Trying to understand the model/view architecture in detail before invoking the IDE has proven to be less convenient for many developers. It is substantially easier to start with a simple model/view application that has demo data. Give it a try! Simply replace the data in the examples below with your own.</db:para>
<db:para>Below are 7 very simple and independent applications that show different sides of model/view programming. The source code can be found inside the examples/widgets/tutorials/modelview directory.</db:para>
<db:section xml:id="A2-1-a-read-only-table">
<db:title>2.1 A Read Only Table</db:title>
<db:para>We start with an application that uses a <db:link xlink:href="qtableview.xml">QTableView</db:link> to show data. We will add editing capabilities later.</db:para>
<db:para>(file source: examples/widgets/tutorials/modelview/1_readonly/main.cpp)</db:para>
<db:programlisting language="cpp">// main.cpp
#include &lt;QtWidgets/QApplication&gt;
#include &lt;QtWidgets/QTableView&gt;
#include &quot;mymodel.h&quot;

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    QTableView tableView;
    MyModel myModel(0);
    tableView.setModel( &amp;myModel );
    tableView.show();
    return a.exec();
}
</db:programlisting>
<db:para>We have the usual <db:link xlink:href="modelview-part2-main-cpp.xml">main()</db:link> function:</db:para>
<db:para>Here is the interesting part: We create an instance of MyModel and use <db:link xlink:href="qtableview.xml#setModel">tableView.setModel</db:link>(&amp;myModel); to pass a pointer of it to <db:link xlink:href="qtableview.xml">tableView</db:link>. <db:link xlink:href="qtableview.xml">tableView</db:link> will invoke the methods of the pointer it has received to find out two things:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>How many rows and columns should be displayed.</db:para>
</db:listitem>
<db:listitem>
<db:para>What content should be printed into each cell.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The model needs some code to respond to this.</db:para>
<db:para>We have a table data set, so let's start with <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link> since it is easier to use than the more general <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>.</db:para>
<db:para>(file source: examples/widgets/tutorials/modelview/1_readonly/mymodel.h)</db:para>
<db:programlisting language="cpp">// mymodel.h
#include &lt;QAbstractTableModel&gt;

class MyModel : public QAbstractTableModel
{
    Q_OBJECT
public:
    MyModel(QObject *parent);
    int rowCount(const QModelIndex &amp;parent = QModelIndex()) const Q_DECL_OVERRIDE ;
    int columnCount(const QModelIndex &amp;parent = QModelIndex()) const Q_DECL_OVERRIDE;
    QVariant data(const QModelIndex &amp;index, int role = Qt::DisplayRole) const Q_DECL_OVERRIDE;
};
</db:programlisting>
<db:para><db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link> requires the implementation of three abstract methods.</db:para>
<db:para>(file source: examples/widgets/tutorials/modelview/1_readonly/mymodel.cpp)</db:para>
<db:programlisting language="cpp">// mymodel.cpp
#include &quot;mymodel.h&quot;

MyModel::MyModel(QObject *parent)
    :QAbstractTableModel(parent)
{
}

int MyModel::rowCount(const QModelIndex &amp; /*parent*/) const
{
   return 2;
}

int MyModel::columnCount(const QModelIndex &amp; /*parent*/) const
{
    return 3;
}

QVariant MyModel::data(const QModelIndex &amp;index, int role) const
{
    if (role == Qt::DisplayRole)
    {
       return QString(&quot;Row%1, Column%2&quot;)
                   .arg(index.row() + 1)
                   .arg(index.column() +1);
    }
    return QVariant();
}
</db:programlisting>
<db:para>The number of rows and columns is provided by <db:link xlink:href="qabstractitemmodel.xml#rowCount">MyModel::rowCount</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#columnCount">MyModel::columnCount</db:link>(). When the view has to know what the cell's text is, it calls the method <db:link xlink:href="qabstractitemmodel.xml#data">MyModel::data</db:link>(). Row and column information is specified with parameter index and the role is set to <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link>. Other roles are covered in the next section. In our example, the data that should be displayed is generated. In a real application, MyModel would have a member called MyData, which serves as the target for all reading and writing operations.</db:para>
<db:para>This small example demonstrates the passive nature of a model. The model does not know when it will be used or which data is needed. It simply provides data each time the view requests it.</db:para>
<db:para>What happens when the model's data needs to be changed? How does the view realize that data has changed and needs to be read again? The model has to emit a signal that indicates what range of cells has changed. This will be demonstrated in section 2.3.</db:para>
</db:section>
<db:section xml:id="A2-2-extending-the-read-only-example-with-roles">
<db:title>2.2 Extending the Read Only Example with Roles</db:title>
<db:para>In addition to controlling what text the view displays, the model also controls the text's appearance. When we slightly change the model, we get the following result:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/readonlytable_role.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In fact, nothing except for the <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() method needs to be changed to set fonts, background colour, alignment and a checkbox. Below is the <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() method that produces the result shown above. The difference is that this time we use parameter int role to return different pieces of information depending on its value.</db:para>
<db:para>(file source: examples/widgets/tutorials/modelview/2_formatting/mymodel.cpp)</db:para>
<db:programlisting language="cpp">// mymodel.cpp
QVariant MyModel::data(const QModelIndex &amp;index, int role) const
{
    int row = index.row();
    int col = index.column();
    // generate a log message when this method gets called
    qDebug() &lt;&lt; QString(&quot;row %1, col%2, role %3&quot;)
            .arg(row).arg(col).arg(role);

    switch(role){
    case Qt::DisplayRole:
        if (row == 0 &amp;&amp; col == 1) return QString(&quot;&lt;--left&quot;);
        if (row == 1 &amp;&amp; col == 1) return QString(&quot;right--&gt;&quot;);

        return QString(&quot;Row%1, Column%2&quot;)
                .arg(row + 1)
                .arg(col +1);
        break;
    case Qt::FontRole:
        if (row == 0 &amp;&amp; col == 0) //change font only for cell(0,0)
        {
            QFont boldFont;
            boldFont.setBold(true);
            return boldFont;
        }
        break;
    case Qt::BackgroundRole:

        if (row == 1 &amp;&amp; col == 2)  //change background only for cell(1,2)
        {
            QBrush redBackground(Qt::red);
            return redBackground;
        }
        break;
    case Qt::TextAlignmentRole:

        if (row == 1 &amp;&amp; col == 1) //change text alignment only for cell(1,1)
        {
            return Qt::AlignRight + Qt::AlignVCenter;
        }
        break;
    case Qt::CheckStateRole:

        if (row == 1 &amp;&amp; col == 0) //add a checkbox to cell(1,0)
        {
            return Qt::Checked;
        }
    }
    return QVariant();
}
</db:programlisting>
<db:para>Each formatting property will be requested from the model with a separate call to the <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() method. The role parameter is used to let the model know which property is being requested:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">enum Qt::ItemDataRole</db:link></db:para>
</db:th>
<db:th>
<db:para>Meaning</db:para>
</db:th>
<db:th>
<db:para>Type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum"/><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link></db:para>
</db:td>
<db:td>
<db:para>text</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::FontRole</db:link></db:para>
</db:td>
<db:td>
<db:para>font</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qfont.xml">QFont</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">BackgroundRole</db:link></db:para>
</db:td>
<db:td>
<db:para>brush for the background of the cell</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qbrush.xml">QBrush</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::TextAlignmentRole</db:link></db:para>
</db:td>
<db:td>
<db:para>text alignment</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt.xml#AlignmentFlag-enum">enum Qt::AlignmentFlag</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="3">
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::CheckStateRole</db:link></db:para>
</db:td>
<db:td rowspan="3">
<db:para>suppresses checkboxes with <db:link xlink:href="qvariant.xml">QVariant()</db:link>,</db:para>
<db:para>sets checkboxes with <db:link xlink:href="qt.xml#CheckState-enum">Qt::Checked</db:link></db:para>
<db:para>or <db:link xlink:href="qt.xml#CheckState-enum">Qt::Unchecked</db:link></db:para>
</db:td>
<db:td rowspan="3">
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">enum Qt::ItemDataRole</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Refer to the Qt namespace documentation to learn more about the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link> enum's capabilities.</db:para>
<db:para>Now we need to determine how using a separated model impacts the application's performance, so let's trace how often the view calls the <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() method. In order to track how often the view calls the model, we have put a debug statement in the <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() method, which logs onto the error output stream. In our small example, <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() will be called 42 times. Each time you hover the cursor over the field, <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() will be called again – 7 times for each cell. That's why it is important to make sure that your data is available when <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() is invoked and expensive lookup operations are cached.</db:para>
</db:section>
<db:section xml:id="A2-3-a-clock-inside-a-table-cell">
<db:title>2.3 A Clock inside a Table Cell</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/clock.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We still have a read only table, but this time the content changes every second because we are showing the current time.</db:para>
<db:para>(file source: examples/widgets/tutorials/modelview/3_changingmodel/mymodel.cpp)</db:para>
<db:programlisting language="cpp">QVariant MyModel::data(const QModelIndex &amp;index, int role) const
{
    int row = index.row();
    int col = index.column();

    if (role == Qt::DisplayRole)
    {
        if (row == 0 &amp;&amp; col == 0)
        {
            return QTime::currentTime().toString();
        }
    }
    return QVariant();
}
</db:programlisting>
<db:para>Something is missing to make the clock tick. We need to tell the view every second that the time has changed and that it needs to be read again. We do this with a timer. In the constructor, we set its interval to 1 second and connect its timeout signal.</db:para>
<db:para>(file source: examples/widgets/tutorials/modelview/3_changingmodel/mymodel.cpp)</db:para>
<db:programlisting language="cpp">MyModel::MyModel(QObject *parent)
    :QAbstractTableModel(parent)
{
//    selectedCell = 0;
    timer = new QTimer(this);
    timer-&gt;setInterval(1000);
    connect(timer, SIGNAL(timeout()) , this, SLOT(timerHit()));
    timer-&gt;start();
}
</db:programlisting>
<db:para>Here is the corresponding slot:</db:para>
<db:para>(file source: examples/widgets/tutorials/modelview/3_changingmodel/mymodel.cpp)</db:para>
<db:programlisting language="cpp">void MyModel::timerHit()
{
    //we identify the top left cell
    QModelIndex topLeft = createIndex(0,0);
    //emit a signal to make the view reread identified data
    emit dataChanged(topLeft, topLeft);
}
</db:programlisting>
<db:para>We ask the view to read the data in the top left cell again by emitting the <db:link xlink:href="qabstractitemmodel.xml#dataChanged">dataChanged</db:link>() signal. Note that we did not explicitly connect the <db:link xlink:href="qabstractitemmodel.xml#dataChanged">dataChanged</db:link>() signal to the view. This happened automatically when we called <db:link xlink:href="qtableview.xml#setModel">setModel</db:link>().</db:para>
</db:section>
<db:section xml:id="A2-4-setting-up-headers-for-columns-and-rows">
<db:title>2.4 Setting up Headers for Columns and Rows</db:title>
<db:para>Headers can be hidden via a view method: tableView-&gt;verticalHeader()-&gt;hide();</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-header.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The header content, however, is set via the model, so we reimplement the <db:link xlink:href="qabstractitemmodel.xml#headerData">headerData</db:link>() method:</db:para>
<db:para>(file source: examples/widgets/tutorials/modelview/4_headers/mymodel.cpp)</db:para>
<db:programlisting language="cpp">QVariant MyModel::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (role == Qt::DisplayRole)
    {
        if (orientation == Qt::Horizontal) {
            switch (section)
            {
            case 0:
                return QString(&quot;first&quot;);
            case 1:
                return QString(&quot;second&quot;);
            case 2:
                return QString(&quot;third&quot;);
            }
        }
    }
    return QVariant();
}
</db:programlisting>
<db:para>Note that method <db:link xlink:href="qabstractitemmodel.xml#headerData">headerData</db:link>() also has a parameter role which has the same meaning as in <db:link xlink:href="qabstractitemmodel.xml#data">MyModel::data</db:link>().</db:para>
</db:section>
<db:section xml:id="A2-5-the-minimal-editing-example">
<db:title>2.5 The Minimal Editing Example</db:title>
<db:para>In this example, we are going to build an application that automatically populates a window title with content by repeating values entered into table cells. To be able to access the window title easily we put the <db:link xlink:href="qtableview.xml">QTableView</db:link> in a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>.</db:para>
<db:para>The model decides whether editing capabilities are available. We only have to modify the model in order for the available editing capabilities to be enabled. This is done by reimplementing the following virtual methods: <db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#flags">flags</db:link>().</db:para>
<db:para>(file source: examples/widgets/tutorials/modelview/5_edit/mymodel.h)</db:para>
<db:programlisting language="cpp">// mymodel.h
#include &lt;QAbstractTableModel&gt;
#include &lt;QString&gt;

const int COLS= 3;
const int ROWS= 2;

class MyModel : public QAbstractTableModel
{
    Q_OBJECT
public:
    MyModel(QObject *parent);
    int rowCount(const QModelIndex &amp;parent = QModelIndex()) const Q_DECL_OVERRIDE ;
    int columnCount(const QModelIndex &amp;parent = QModelIndex()) const Q_DECL_OVERRIDE;
    QVariant data(const QModelIndex &amp;index, int role = Qt::DisplayRole) const Q_DECL_OVERRIDE;
    bool setData(const QModelIndex &amp; index, const QVariant &amp; value, int role = Qt::EditRole) Q_DECL_OVERRIDE;
    Qt::ItemFlags flags(const QModelIndex &amp; index) const Q_DECL_OVERRIDE ;
private:
    QString m_gridData[ROWS][COLS];  //holds text entered into QTableView
signals:
    void editCompleted(const QString &amp;);
};
</db:programlisting>
<db:para>We use the two-dimensional array <db:link xlink:href="qstring.xml">QString</db:link> m_gridData to store our data. This makes m_gridData the core of MyModel. The rest of MyModel acts like a wrapper and adapts m_gridData to the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> interface. We have also introduced the editCompleted() signal, which makes it possible to transfer the modified text to the window title.</db:para>
<db:para>(file source: examples/widgets/tutorials/modelview/5_edit/mymodel.cpp)</db:para>
<db:programlisting language="cpp">bool MyModel::setData(const QModelIndex &amp; index, const QVariant &amp; value, int role)
{
    if (role == Qt::EditRole)
    {
        //save value from editor to member m_gridData
        m_gridData[index.row()][index.column()] = value.toString();
        //for presentation purposes only: build and emit a joined string
        QString result;
        for (int row= 0; row &lt; ROWS; row++)
        {
            for(int col= 0; col &lt; COLS; col++)
            {
                result += m_gridData[row][col] + ' ';
            }
        }
        emit editCompleted( result );
    }
    return true;
}
</db:programlisting>
<db:para><db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>() will be called each time the user edits a cell. The index parameter tells us which field has been edited and value provides the result of the editing process. The role will always be set to <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link> because our cells only contain text. If a checkbox were present and user permissions are set to allow the checkbox to be selected, calls would also be made with the role set to <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::CheckStateRole</db:link>.</db:para>
<db:para>(file source: examples/widgets/tutorials/modelview/5_edit/mymodel.cpp)</db:para>
<db:programlisting language="cpp">Qt::ItemFlags MyModel::flags(const QModelIndex &amp;index) const
{
    return Qt::ItemIsEditable | QAbstractTableModel::flags(index);
}
</db:programlisting>
<db:para>Various properties of a cell can be adjusted with <db:link xlink:href="qabstractitemmodel.xml#flags">flags</db:link>().</db:para>
<db:para>Returning <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsSelectable | Qt::ItemIsEditable | Qt::ItemIsEnabled</db:link> is enough to show an editor that a cell can be selected.</db:para>
<db:para>If editing one cell modifies more data than the data in that particular cell, the model must emit a <db:link xlink:href="qabstractitemmodel.xml#dataChanged">dataChanged</db:link>() signal in order for the data that has been changed to be read.</db:para>
</db:section>
</db:section>
<db:section xml:id="A3-intermediate-topics">
<db:title>3. Intermediate Topics</db:title>
<db:section xml:id="A3-1-treeview">
<db:title>3.1 TreeView</db:title>
<db:para>You can convert the example above into an application with a tree view. Simply replace <db:link xlink:href="qtableview.xml">QTableView</db:link> with <db:link xlink:href="qtreeview.xml">QTreeView</db:link>, which results in a read/write tree. No changes have to be made to the model. The tree won't have any hierarchies because there aren't any hierarchies in the model itself.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/dummy_tree.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qlistview.xml">QListView</db:link>, <db:link xlink:href="qtableview.xml">QTableView</db:link> and <db:link xlink:href="qtreeview.xml">QTreeView</db:link> all use a model abstraction, which is a merged list, table and tree. This makes it possible to use several different types of view classes from the same model.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/list_table_tree.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This is how our example model looks so far:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/example_model.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We want to present a real tree. We have wrapped our data in the examples above in order to make a model. This time we use <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link>, which is a container for hierarchical data that also implements <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>. To show a tree, <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> must be populated with <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link>s, which are able to hold all the standard properties of items like text, fonts, checkboxes or brushes.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/tree_2_with_algorithm.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>(file source: examples/widgets/tutorials/modelview/6_treeview/mainwindow.cpp)</db:para>
<db:programlisting language="cpp">// modelview.cpp
#include &lt;QTreeView&gt;
#include &lt;QStandardItemModel&gt;
#include &lt;QStandardItem&gt;
#include &quot;mainwindow.h&quot;

const int ROWS = 2;
const int COLUMNS = 3;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    treeView = new QTreeView(this);
    setCentralWidget(treeView);
    standardModel = new QStandardItemModel ;

    QList&lt;QStandardItem *&gt; preparedRow =prepareRow(&quot;first&quot;, &quot;second&quot;, &quot;third&quot;);
    QStandardItem *item = standardModel-&gt;invisibleRootItem();
    // adding a row to the invisible root item produces a root element
    item-&gt;appendRow(preparedRow);

    QList&lt;QStandardItem *&gt; secondRow =prepareRow(&quot;111&quot;, &quot;222&quot;, &quot;333&quot;);
    // adding a row to an item starts a subtree
    preparedRow.first()-&gt;appendRow(secondRow);

    treeView-&gt;setModel(standardModel);
    treeView-&gt;expandAll();
}

QList&lt;QStandardItem *&gt; MainWindow::prepareRow(const QString &amp;first,
                                                const QString &amp;second,
                                                const QString &amp;third)
{
    QList&lt;QStandardItem *&gt; rowItems;
    rowItems &lt;&lt; new QStandardItem(first);
    rowItems &lt;&lt; new QStandardItem(second);
    rowItems &lt;&lt; new QStandardItem(third);
    return rowItems;
}
</db:programlisting>
<db:para>We simply instantiate a <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> and add a couple of <db:link xlink:href="qstandarditem.xml">QStandardItems</db:link> to the constructor. We can then make a hierarchical data structure because a <db:link xlink:href="qstandarditem.xml">QStandardItem</db:link> can hold other <db:link xlink:href="qstandarditem.xml">QStandardItems</db:link>. Nodes are collapsed and expanded within the view.</db:para>
</db:section>
<db:section xml:id="A3-2-working-with-selections">
<db:title>3.2 Working with Selections</db:title>
<db:para>We want to access a selected item's content in order to output it into the window title together with the hierarchy level.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/selection2.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>So let's create a couple of items:</db:para>
<db:para>(file source: examples/widgets/tutorials/modelview/7_selections/mainwindow.cpp)</db:para>
<db:programlisting language="cpp">#include &lt;QTreeView&gt;
#include &lt;QStandardItemModel&gt;
#include &lt;QItemSelectionModel&gt;
#include &quot;mainwindow.h&quot;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    treeView = new QTreeView(this);
    setCentralWidget(treeView);
    standardModel = new QStandardItemModel ;
    QStandardItem *rootNode = standardModel-&gt;invisibleRootItem();

    //defining a couple of items
    QStandardItem *americaItem = new QStandardItem(&quot;America&quot;);
    QStandardItem *mexicoItem =  new QStandardItem(&quot;Canada&quot;);
    QStandardItem *usaItem =     new QStandardItem(&quot;USA&quot;);
    QStandardItem *bostonItem =  new QStandardItem(&quot;Boston&quot;);
    QStandardItem *europeItem =  new QStandardItem(&quot;Europe&quot;);
    QStandardItem *italyItem =   new QStandardItem(&quot;Italy&quot;);
    QStandardItem *romeItem =    new QStandardItem(&quot;Rome&quot;);
    QStandardItem *veronaItem =  new QStandardItem(&quot;Verona&quot;);

    //building up the hierarchy
    rootNode-&gt;    appendRow(americaItem);
    rootNode-&gt;    appendRow(europeItem);
    americaItem-&gt; appendRow(mexicoItem);
    americaItem-&gt; appendRow(usaItem);
    usaItem-&gt;     appendRow(bostonItem);
    europeItem-&gt;  appendRow(italyItem);
    italyItem-&gt;   appendRow(romeItem);
    italyItem-&gt;   appendRow(veronaItem);

    //register the model
    treeView-&gt;setModel(standardModel);
    treeView-&gt;expandAll();

    //selection changes shall trigger a slot
    QItemSelectionModel *selectionModel= treeView-&gt;selectionModel();
    connect(selectionModel, SIGNAL(selectionChanged (const QItemSelection &amp;, const QItemSelection &amp;)),
            this, SLOT(selectionChangedSlot(const QItemSelection &amp;, const QItemSelection &amp;)));
}
</db:programlisting>
<db:para>Views manage selections within a separate selection model, which can be retrieved with the <db:link xlink:href="qabstractitemview.xml#selectionModel">selectionModel</db:link>() method. We retrieve the selection Model in order to connect a slot to its <db:link xlink:href="qabstractitemview.xml#selectionChanged">selectionChanged</db:link>() signal.</db:para>
<db:para>(file source: examples/widgets/tutorials/modelview/7_selections/mainwindow.cpp)</db:para>
<db:programlisting language="cpp">void MainWindow::selectionChangedSlot(const QItemSelection &amp; /*newSelection*/, const QItemSelection &amp; /*oldSelection*/)
{
    //get the text of the selected item
    const QModelIndex index = treeView-&gt;selectionModel()-&gt;currentIndex();
    QString selectedText = index.data(Qt::DisplayRole).toString();
    //find out the hierarchy level of the selected item
    int hierarchyLevel=1;
    QModelIndex seekRoot = index;
    while(seekRoot.parent() != QModelIndex())
    {
        seekRoot = seekRoot.parent();
        hierarchyLevel++;
    }
    QString showString = QString(&quot;%1, Level %2&quot;).arg(selectedText)
                         .arg(hierarchyLevel);
    setWindowTitle(showString);
}
</db:programlisting>
<db:para>We get the model index that corresponds to the selection by calling <db:link xlink:href="qitemselectionmodel.xml#currentIndex">treeView-&gt;selectionModel()-&gt;currentIndex</db:link>() and we get the field's string by using the model index. Then we just calculate the item's hierarchyLevel. Top level items do not have parents and the <db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>() method will return a default constructed <db:link xlink:href="qmodelindex.xml">QModelIndex()</db:link>. This is why we use the <db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>() method to iterate to the top level while counting the steps performed during iteration.</db:para>
<db:para>The selection model (as shown above) can be retrieved, but it can also be set with <db:link xlink:href="qabstractitemview.xml">QAbstractItemView::setSelectionModel</db:link>. This is how it's possible to have 3 view classes with synchronized selections because only one instance of a selection model is used. To share a selection model between 3 views use <db:link xlink:href="qabstractitemview.xml#selectionModel">selectionModel</db:link>() and assign the result to the second and third view class with <db:link xlink:href="qabstractitemview.xml#setSelectionModel">setSelectionModel</db:link>().</db:para>
</db:section>
<db:section xml:id="A3-3-predefined-models">
<db:title>3.3 Predefined Models</db:title>
<db:para>The typical way to use model/view is to wrap specific data to make it usable with view classes. Qt, however, also provides predefined models for common underlying data structures. If one of the available data structures is suitable for your application, a predefined model can be a good choice.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qstringlistmodel.xml">QStringListModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Stores a list of strings</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Stores arbitrary hierarchical items</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link> QDirModel</db:para>
</db:td>
<db:td>
<db:para>Encapsulate the local file system</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Encapsulate an SQL result set</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Encapsulates an SQL table</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Encapsulates an SQL table with foreign keys</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Sorts and/or filters another model</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="A3-4-delegates">
<db:title>3.4 Delegates</db:title>
<db:para>In all examples so far, data is presented as text or a checkbox in a cell and is edited as text or a checkbox. The component that provides these presentation and editing services is called a <db:emphasis>delegate</db:emphasis>. We are only just beginning to work with the delegate because the view uses a default delegate. But imagine that we want to have a different editor (e.g., a slider or a drop down list) Or imagine that we want to present data as graphics. Let's take a look at an example called <db:link xlink:href="qtwidgets-itemviews-stardelegate-example.xml">Star Delegate</db:link>, in which stars are used to show a rating:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/stardelegate.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The view has a <db:link xlink:href="qabstractitemview.xml#setItemDelegate">setItemDelegate</db:link>() method that replaces the default delegate and installs a custom delegate. A new delegate can be written by creating a class that inherits from <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link>. In order to write a delegate that displays stars and has no input capabilities, we only need to override 2 methods.</db:para>
<db:programlisting language="cpp">class StarDelegate : public QStyledItemDelegate
{
    Q_OBJECT
public:
    StarDelegate(QWidget *parent = 0);
    void paint(QPainter *painter, const QStyleOptionViewItem &amp;option,
               const QModelIndex &amp;index) const;
    QSize sizeHint(const QStyleOptionViewItem &amp;option,
                   const QModelIndex &amp;index) const;
};
</db:programlisting>
<db:para><db:link xlink:href="qstyleditemdelegate.xml#paint">paint</db:link>() draws stars depending on the content of the underlying data. The data can be looked up by calling <db:link xlink:href="qmodelindex.xml#data">index.data</db:link>(). The delegate's <db:link xlink:href="qabstractitemdelegate.xml#sizeHint">sizeHint</db:link>() method is used to obtain each star's dimensions, so the cell will provide enough height and width to accommodate the stars.</db:para>
<db:para>Writing custom delegates is the right choice if you want to show your data with a custom graphical representation inside the grid of the view class. If you want to leave the grid, you would not use a custom delegate but a custom view class.</db:para>
<db:para>Other references to delegates in Qt Documentation:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtwidgets-itemviews-spinboxdelegate-example.xml">Spin Box Delegate Example</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemdelegate.xml">QAbstractItemDelegate Class Reference</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">QSqlRelationalDelegate Class Reference</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate Class Reference</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qitemdelegate.xml">QItemDelegate Class Reference</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="A3-5-debugging-with-modeltest">
<db:title>3.5 Debugging with ModelTest</db:title>
<db:para>The passive nature of models provides new challenges for programmers. Inconsistencies in the model can cause the application to crash. Since the model is hit by numerous calls from the view, it is hard to find out which call has crashed the application and which operation has introduced the problem.</db:para>
<db:para>Qt Labs provides software called <db:link xlink:href="http://wiki.qt.io/Model_Test">ModelTest</db:link>, which checks models while your programming is running. Every time the model is changed, ModelTest scans the model and reports errors with an assert. This is especially important for tree models, since their hierarchical nature leaves many possibilities for subtle inconsistencies.</db:para>
<db:para>Unlike view classes, ModelTest uses out of range indexes to test the model. This means your application may crash with ModelTest even if it runs perfectly without it. So you also need to handle all of the indexes that are out of range when using ModelTest.</db:para>
</db:section>
</db:section>
<db:section xml:id="A4-good-sources-of-additional-information">
<db:title>4. Good Sources of Additional Information</db:title>
<db:section xml:id="A4-1-books">
<db:title>4.1 Books</db:title>
<db:para>Model/View programming is covered quite extensively in the documentation of Qt but also in several good books.</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para><db:emphasis role="bold">C++ GUI Programming with Qt 4</db:emphasis> / Jasmin Blanchette, Mark Summerfield, <db:emphasis>Prentice Hall, 2nd edition</db:emphasis>, ISBN 0-13-235416-0. Also available in German: <db:emphasis role="bold">C++ GUI Programmierung mit Qt 4: Die offizielle Einführung</db:emphasis>, <db:emphasis>Addison-Wesley</db:emphasis>, ISBN 3-827327-29-6</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">The Book of Qt4, The Art of Building Qt Applications</db:emphasis> / Daniel Molkentin, <db:emphasis>Open Source Press</db:emphasis>, ISBN 1-59327-147-6. Translated from <db:emphasis role="bold">Qt 4, Einführung in die Applikationsentwicklung</db:emphasis>, <db:emphasis>Open Source Press</db:emphasis>, ISBN 3-937514-12-0.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Foundations of Qt Development</db:emphasis> / Johan Thelin, <db:emphasis>Apress</db:emphasis>, ISBN 1-59059-831-8.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Advanced Qt Programming</db:emphasis> / Mark Summerfield, <db:emphasis>Prentice Hall</db:emphasis>, ISBN 0-321-63590-6. This book covers Model/View programming on more than 150 pages.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The following list provides an overview of example programs contained in the first three books listed above. Some of them make very good templates for developing similar applications.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Example name</db:para>
</db:th>
<db:th>
<db:para>View class used</db:para>
</db:th>
<db:th>
<db:para>Model used</db:para>
</db:th>
<db:th>
<db:para>Aspects covered</db:para>
</db:th>
<db:th>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Team Leaders</db:para>
</db:td>
<db:td>
<db:para>QListview</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstringlistmodel.xml">QStringListModel</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Book 1, Chapter 10, Figure 10.6</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Directory Viewer</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:para>
</db:td>
<db:td>
<db:para>QDirModel</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Book 1, Chapter 10, Figure 10.7</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Color Names</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlistview.xml">QListView</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> applied to <db:link xlink:href="qstringlistmodel.xml">QStringListModel</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Book 1, Chapter 10, Figure 10.8</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Currencies</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtableview.xml">QTableView</db:link></db:para>
</db:td>
<db:td>
<db:para>custom model based on <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Read only</db:para>
</db:td>
<db:td>
<db:para>Book 1, Chapter 10, Figure 10.10</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Cities</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtableview.xml">QTableView</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom model based on <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Read / write</db:para>
</db:td>
<db:td>
<db:para>Book 1, Chapter 10, Figure 10.12</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Boolean Parser</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom model based on <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Read only</db:para>
</db:td>
<db:td>
<db:para>Book 1, Chapter 10, Figure 10.14</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Track Editor</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para><db:link xlink:href="qtablewidget.xml">QTableWidget</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom delegate providing a custom editor</db:para>
</db:td>
<db:td>
<db:para>Book 1, Chapter 10, Figure 10.15</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Four directory views</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlistview.xml">QListView</db:link> <db:link xlink:href="qtableview.xml">QTableView</db:link> <db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:para>
</db:td>
<db:td>
<db:para>QDirModel</db:para>
</db:td>
<db:td>
<db:para>Demonstrates the use of multiple views</db:para>
</db:td>
<db:td>
<db:para>Book2, Chapter 8.2</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Address Book</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlistview.xml">QListView</db:link> <db:link xlink:href="qtableview.xml">QTableView</db:link> <db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom model based on <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Read / write</db:para>
</db:td>
<db:td>
<db:para>Book2, Chapter 8.4</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Address Book with sorting</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>QSortfilterProxyModel</db:para>
</db:td>
<db:td>
<db:para>Introducing sort and filter capabilities</db:para>
</db:td>
<db:td>
<db:para>Book2, Chapter 8.5</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Address Book with checkboxes</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Introducing checkboxes in model/view</db:para>
</db:td>
<db:td>
<db:para>Book2, Chapter 8.6</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Address Book with transposed grid</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Custom proxy Model based on <db:link xlink:href="qabstractproxymodel.xml">QAbstractProxyModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Introducing a custom model</db:para>
</db:td>
<db:td>
<db:para>Book2, Chapter 8.7</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Address Book with drag and drop</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Introducing drag and drop support</db:para>
</db:td>
<db:td>
<db:para>Book2, Chapter 8.8</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Address Book with custom editor</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Introducing custom delegates</db:para>
</db:td>
<db:td>
<db:para>Book2, Chapter 8.9</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Views</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlistview.xml">QListView</db:link> <db:link xlink:href="qtableview.xml">QTableView</db:link> <db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Read only</db:para>
</db:td>
<db:td>
<db:para>Book 3, Chapter 5, figure 5-3</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Bardelegate</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtableview.xml">QTableView</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Custom delegate for presentation based on <db:link xlink:href="qabstractitemdelegate.xml">QAbstractItemDelegate</db:link></db:para>
</db:td>
<db:td>
<db:para>Book 3, Chapter 5, figure 5-5</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Editdelegate</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtableview.xml">QTableView</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Custom delegate for editing based on <db:link xlink:href="qabstractitemdelegate.xml">QAbstractItemDelegate</db:link></db:para>
</db:td>
<db:td>
<db:para>Book 3, Chapter 5, figure 5-6</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Singleitemview</db:para>
</db:td>
<db:td>
<db:para>Custom view based on <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Custom view</db:para>
</db:td>
<db:td>
<db:para>Book 3, Chapter 5, figure 5-7</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>listmodel</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtableview.xml">QTableView</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom Model based on <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Read only</db:para>
</db:td>
<db:td>
<db:para>Book 3, Chapter 5, Figure 5-8</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>treemodel</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom Model based on <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Read only</db:para>
</db:td>
<db:td>
<db:para>Book 3, Chapter 5, Figure 5-10</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>edit integers</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlistview.xml">QListView</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom Model based on <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Read / write</db:para>
</db:td>
<db:td>
<db:para>Book 3, Chapter 5, Listing 5-37, Figure 5-11</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>sorting</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtableview.xml">QTableView</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> applied to <db:link xlink:href="qstringlistmodel.xml">QStringListModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Demonstrates sorting</db:para>
</db:td>
<db:td>
<db:para>Book 3, Chapter 5, Figure 5-12</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="A4-2-qt-documentation">
<db:title>4.2 Qt Documentation</db:title>
<db:para>Qt 5.0 comes with 19 examples for model/view. The examples can be found on the <db:link xlink:href="examples-itemviews.xml">Item Views Examples</db:link> page.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Example name</db:para>
</db:th>
<db:th>
<db:para>View class used</db:para>
</db:th>
<db:th>
<db:para>Model used</db:para>
</db:th>
<db:th>
<db:para>Aspects covered</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Address Book</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtableview.xml">QTableView</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link> <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Usage of <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> to generate different subsets from one data pool</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Basic Sort/Filter Model</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link></db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Chart</db:para>
</db:td>
<db:td>
<db:para>Custom view</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Designing custom views that cooperate with selection models</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Color Editor Factory</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para><db:link xlink:href="qtablewidget.xml">QTableWidget</db:link></db:para>
</db:td>
<db:td>
<db:para>Enhancing the standard delegate with a new custom editor to choose colours</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Combo Widget Mapper</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> to map <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>, <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> and <db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Shows how a <db:link xlink:href="qcombobox.xml">QComboBox</db:link> can serve as a view class</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Custom Sort/Filter Model</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Subclass <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> for advanced sorting and filtering</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Dir View</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Very small example to demonstrate how to assign a model to a view</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Editable Tree Model</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom tree model</db:para>
</db:td>
<db:td>
<db:para>Comprehensive example for working with trees, demonstrates editing cells and tree structure with an underlying custom model</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Fetch More</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlistview.xml">QListView</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom list model</db:para>
</db:td>
<db:td>
<db:para>Dynamically changing model</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Frozen Column</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtableview.xml">QTableView</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link></db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Interview</db:para>
</db:td>
<db:td>
<db:para>Multiple</db:para>
</db:td>
<db:td>
<db:para>Custom item model</db:para>
</db:td>
<db:td>
<db:para>Multiple views</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Pixelator</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtableview.xml">QTableView</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom table model</db:para>
</db:td>
<db:td>
<db:para>Implementation of a custom delegate</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Puzzle</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlistview.xml">QListView</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom list model</db:para>
</db:td>
<db:td>
<db:para>Model/view with drag and drop</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Simple DOM Model</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom tree model</db:para>
</db:td>
<db:td>
<db:para>Read only example for a custom tree model</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Simple Tree Model</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom tree model</db:para>
</db:td>
<db:td>
<db:para>Read only example for a custom tree model</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Simple Widget Mapper</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> to map <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>, <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> and <db:link xlink:href="qspinbox.xml">QSpinBox</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Basic <db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> usage</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Spin Box Delegate</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtableview.xml">QTableView</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom delegate that uses a spin box as a cell editor</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Spreadsheet</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para><db:link xlink:href="qtableview.xml">QTableView</db:link></db:para>
</db:td>
<db:td>
<db:para>Custom delegates</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Star Delegate</db:para>
</db:td>
<db:td colspan="2" rowspan="1">
<db:para><db:link xlink:href="qtablewidget.xml">QTableWidget</db:link></db:para>
</db:td>
<db:td>
<db:para>Comprehensive custom delegate example.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>A <db:link xlink:href="model-view-programming.xml">reference document</db:link> for model/view technology is also available.</db:para>
</db:section>
</db:section>
</db:article>
