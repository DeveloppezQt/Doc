<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWheelEvent Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwheelevent.xml">QWheelEvent</db:link> class contains parameters that describe a wheel event.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWheelEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qinputevent.xml" xlink:role="class">QInputEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QWheelEvent is part of <db:simplelist><db:member>events</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Wheel events are sent to the widget under the mouse cursor, but if that widget does not handle the event they are sent to the focus widget. Wheel events are generated for both mouse wheels and trackpad scroll gestures. There are two ways to read the wheel event delta: <db:link xlink:href="qwheelevent.xml#angleDelta">angleDelta</db:link>() returns the delta in wheel degrees. This value is always provided. <db:link xlink:href="qwheelevent.xml#pixelDelta">pixelDelta</db:link>() returns the delta in screen pixels and is available on platforms that have high-resolution trackpads, such as macOS. If that is the case, <db:link xlink:href="qwheelevent.xml#source">source</db:link>() will return <db:link xlink:href="qt.xml#MouseEventSource-enum">Qt::MouseEventSynthesizedBySystem</db:link>.</db:para>
<db:para>The functions <db:link xlink:href="qwheelevent.xml#pos">pos</db:link>() and <db:link xlink:href="qwheelevent.xml#globalPos">globalPos</db:link>() return the mouse cursor's location at the time of the event.</db:para>
<db:para>A wheel event contains a special accept flag that indicates whether the receiver wants the event. You should call <db:link xlink:href="qevent.xml#ignore">ignore</db:link>() if you do not handle the wheel event; this ensures that it will be sent to the parent widget.</db:para>
<db:para>The <db:link xlink:href="qwidget.xml#enabled-prop">QWidget::setEnabled</db:link>() function can be used to enable or disable mouse and keyboard events for a widget.</db:para>
<db:para>The event handler <db:link xlink:href="qwidget.xml#wheelEvent">QWidget::wheelEvent</db:link>() receives wheel events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml#grabMouse">QWidget::grabMouse</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWheelEvent-2">
<db:title>QWheelEvent::QWheelEvent(const QPointF &amp;<db:emphasis>pos</db:emphasis>, const QPointF &amp;<db:emphasis>globalPos</db:emphasis>, QPoint <db:emphasis>pixelDelta</db:emphasis>, QPoint <db:emphasis>angleDelta</db:emphasis>, int <db:emphasis>qt4Delta</db:emphasis>, Qt::Orientation <db:emphasis>qt4Orientation</db:emphasis>, Qt::MouseButtons <db:emphasis>buttons</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>)</db:title>
<db:para>Constructs a wheel event object.</db:para>
<db:para>The <db:code role="parameter">pos</db:code> provides the location of the mouse cursor within the window. The position in global coordinates is specified by <db:code role="parameter">globalPos</db:code>.</db:para>
<db:para><db:code role="parameter">pixelDelta</db:code> contains the scrolling distance in pixels on screen, while <db:code role="parameter">angleDelta</db:code> contains the wheel rotation distance. <db:code role="parameter">pixelDelta</db:code> is optional and can be null.</db:para>
<db:para>The mouse and keyboard states at the time of the event are specified by <db:code role="parameter">buttons</db:code> and <db:code role="parameter">modifiers</db:code>.</db:para>
<db:para>For backwards compatibility, the event can also hold monodirectional wheel event data: <db:code role="parameter">qt4Delta</db:code> specifies the rotation, and <db:code role="parameter">qt4Orientation</db:code> the direction.</db:para>
<db:para>The <db:link xlink:href="qwheelevent.xml#phase">phase</db:link>() is initialized to <db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollUpdate</db:link>. Use the other constructor to specify the phase explicitly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#posF">posF</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#globalPosF">globalPosF</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#angleDelta">angleDelta</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#pixelDelta">pixelDelta</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QWheelEvent-3">
<db:title>QWheelEvent::QWheelEvent(const QPointF &amp;<db:emphasis>pos</db:emphasis>, const QPointF &amp;<db:emphasis>globalPos</db:emphasis>, QPoint <db:emphasis>pixelDelta</db:emphasis>, QPoint <db:emphasis>angleDelta</db:emphasis>, int <db:emphasis>qt4Delta</db:emphasis>, Qt::Orientation <db:emphasis>qt4Orientation</db:emphasis>, Qt::MouseButtons <db:emphasis>buttons</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, Qt::ScrollPhase <db:emphasis>phase</db:emphasis>)</db:title>
<db:para>Constructs a wheel event object.</db:para>
<db:para>The <db:code role="parameter">pos</db:code> provides the location of the mouse cursor within the window. The position in global coordinates is specified by <db:code role="parameter">globalPos</db:code>.</db:para>
<db:para><db:code role="parameter">pixelDelta</db:code> contains the scrolling distance in pixels on screen, while <db:code role="parameter">angleDelta</db:code> contains the wheel rotation distance. <db:code role="parameter">pixelDelta</db:code> is optional and can be null.</db:para>
<db:para>The mouse and keyboard states at the time of the event are specified by <db:code role="parameter">buttons</db:code> and <db:code role="parameter">modifiers</db:code>.</db:para>
<db:para>For backwards compatibility, the event can also hold monodirectional wheel event data: <db:code role="parameter">qt4Delta</db:code> specifies the rotation, and <db:code role="parameter">qt4Orientation</db:code> the direction.</db:para>
<db:para>The scrolling phase of the event is specified by <db:code role="parameter">phase</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#posF">posF</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#globalPosF">globalPosF</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#angleDelta">angleDelta</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#pixelDelta">pixelDelta</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#phase">phase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QWheelEvent-4">
<db:title>QWheelEvent::QWheelEvent(const QPointF &amp;<db:emphasis>pos</db:emphasis>, const QPointF &amp;<db:emphasis>globalPos</db:emphasis>, QPoint <db:emphasis>pixelDelta</db:emphasis>, QPoint <db:emphasis>angleDelta</db:emphasis>, int <db:emphasis>qt4Delta</db:emphasis>, Qt::Orientation <db:emphasis>qt4Orientation</db:emphasis>, Qt::MouseButtons <db:emphasis>buttons</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, Qt::ScrollPhase <db:emphasis>phase</db:emphasis>, Qt::MouseEventSource <db:emphasis>source</db:emphasis>)</db:title>
<db:para>Constructs a wheel event object.</db:para>
<db:para>The <db:code role="parameter">pos</db:code> provides the location of the mouse cursor within the window. The position in global coordinates is specified by <db:code role="parameter">globalPos</db:code>.</db:para>
<db:para><db:code role="parameter">pixelDelta</db:code> contains the scrolling distance in pixels on screen, while <db:code role="parameter">angleDelta</db:code> contains the wheel rotation distance. <db:code role="parameter">pixelDelta</db:code> is optional and can be null.</db:para>
<db:para>The mouse and keyboard states at the time of the event are specified by <db:code role="parameter">buttons</db:code> and <db:code role="parameter">modifiers</db:code>.</db:para>
<db:para>For backwards compatibility, the event can also hold monodirectional wheel event data: <db:code role="parameter">qt4Delta</db:code> specifies the rotation, and <db:code role="parameter">qt4Orientation</db:code> the direction.</db:para>
<db:para>The scrolling phase of the event is specified by <db:code role="parameter">phase</db:code>.</db:para>
<db:para>If the wheel event comes from a physical mouse wheel, <db:code role="parameter">source</db:code> is set to <db:link xlink:href="qt.xml#MouseEventSource-enum">Qt::MouseEventNotSynthesized</db:link>. If it comes from a gesture detected by the operating system, or from a non-mouse hardware device, such that <db:code role="parameter">pixelDelta</db:code> is directly related to finger movement, <db:code role="parameter">source</db:code> is set to <db:link xlink:href="qt.xml#MouseEventSource-enum">Qt::MouseEventSynthesizedBySystem</db:link>. If it comes from Qt, source would be set to <db:link xlink:href="qt.xml#MouseEventSource-enum">Qt::MouseEventSynthesizedByQt</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#posF">posF</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#globalPosF">globalPosF</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#angleDelta">angleDelta</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#pixelDelta">pixelDelta</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#phase">phase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QWheelEvent-5">
<db:title>QWheelEvent::QWheelEvent(const QPointF &amp;<db:emphasis>pos</db:emphasis>, const QPointF &amp;<db:emphasis>globalPos</db:emphasis>, QPoint <db:emphasis>pixelDelta</db:emphasis>, QPoint <db:emphasis>angleDelta</db:emphasis>, int <db:emphasis>qt4Delta</db:emphasis>, Qt::Orientation <db:emphasis>qt4Orientation</db:emphasis>, Qt::MouseButtons <db:emphasis>buttons</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, Qt::ScrollPhase <db:emphasis>phase</db:emphasis>, Qt::MouseEventSource <db:emphasis>source</db:emphasis>, bool <db:emphasis>inverted</db:emphasis>)</db:title>
<db:para>Constructs a wheel event object.</db:para>
<db:para>The <db:code role="parameter">pos</db:code> provides the location of the mouse cursor within the window. The position in global coordinates is specified by <db:code role="parameter">globalPos</db:code>.</db:para>
<db:para><db:code role="parameter">pixelDelta</db:code> contains the scrolling distance in pixels on screen, while <db:code role="parameter">angleDelta</db:code> contains the wheel rotation distance. <db:code role="parameter">pixelDelta</db:code> is optional and can be null.</db:para>
<db:para>The mouse and keyboard states at the time of the event are specified by <db:code role="parameter">buttons</db:code> and <db:code role="parameter">modifiers</db:code>.</db:para>
<db:para>For backwards compatibility, the event can also hold monodirectional wheel event data: <db:code role="parameter">qt4Delta</db:code> specifies the rotation, and <db:code role="parameter">qt4Orientation</db:code> the direction.</db:para>
<db:para>The scrolling phase of the event is specified by <db:code role="parameter">phase</db:code>.</db:para>
<db:para>If the wheel event comes from a physical mouse wheel, <db:code role="parameter">source</db:code> is set to <db:link xlink:href="qt.xml#MouseEventSource-enum">Qt::MouseEventNotSynthesized</db:link>. If it comes from a gesture detected by the operating system, or from a non-mouse hardware device, such that <db:code role="parameter">pixelDelta</db:code> is directly related to finger movement, <db:code role="parameter">source</db:code> is set to <db:link xlink:href="qt.xml#MouseEventSource-enum">Qt::MouseEventSynthesizedBySystem</db:link>. If it comes from Qt, source would be set to <db:link xlink:href="qt.xml#MouseEventSource-enum">Qt::MouseEventSynthesizedByQt</db:link>.</db:para>
<db:para>If the system is configured to invert the delta values delivered with the event (such as natural scrolling of the touchpad on OS X), <db:code role="parameter">inverted</db:code> should be <db:code>true</db:code>. Otherwise, <db:code role="parameter">inverted</db:code> is <db:code>false</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#posF">posF</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#globalPosF">globalPosF</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#angleDelta">angleDelta</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#pixelDelta">pixelDelta</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#phase">phase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="angleDelta">
<db:title>QPoint QWheelEvent::angleDelta() const</db:title>
<db:para>Returns the distance that the wheel is rotated, in eighths of a degree. A positive value indicates that the wheel was rotated forwards away from the user; a negative value indicates that the wheel was rotated backwards toward the user.</db:para>
<db:para>Most mouse types work in steps of 15 degrees, in which case the delta value is a multiple of 120; i.e., 120 units * 1/8 = 15 degrees.</db:para>
<db:para>However, some mice have finer-resolution wheels and send delta values that are less than 120 units (less than 15 degrees). To support this possibility, you can either cumulatively add the delta values from events until the value of 120 is reached, then scroll the widget, or you can partially scroll the widget in response to each wheel event.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void MyWidget::wheelEvent(QWheelEvent *event)
{
    QPoint numPixels = event-&gt;pixelDelta();
    QPoint numDegrees = event-&gt;angleDelta() / 8;

    if (!numPixels.isNull()) {
        scrollWithPixels(numPixels);
    } else if (!numDegrees.isNull()) {
        QPoint numSteps = numDegrees / 15;
        scrollWithDegrees(numSteps);
    }

    event-&gt;accept();
}
</db:programlisting>
<db:note>
<db:para>On platforms that support scrolling <db:link xlink:href="qwheelevent.xml#phase">phases</db:link>, the delta may be null when:</db:para>
</db:note>
<db:itemizedlist>
<db:listitem>
<db:para>scrolling is about to begin, but the distance did not yet change (<db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollBegin</db:link>),</db:para>
</db:listitem>
<db:listitem>
<db:para>or scrolling has ended and the distance did not change anymore (<db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollEnd</db:link>).</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="buttons">
<db:title>Qt::MouseButtons QWheelEvent::buttons() const</db:title>
<db:para>Returns the mouse state when the event occurred.</db:para>
</db:section>
<db:section xml:id="globalPos">
<db:title>QPoint QWheelEvent::globalPos() const</db:title>
<db:para>Returns the global position of the mouse pointer <db:emphasis>at the time of the event</db:emphasis>. This is important on asynchronous window systems such as X11; whenever you move your widgets around in response to mouse events, globalPos() can differ a lot from the current cursor position returned by <db:link xlink:href="qcursor.xml#pos">QCursor::pos</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#globalX">globalX</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#globalY">globalY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="globalPosF">
<db:title>const QPointF &amp;QWheelEvent::globalPosF() const</db:title>
<db:para>Returns the global position of the mouse pointer <db:emphasis>at the time of the event</db:emphasis>. This is important on asynchronous window systems such as X11; whenever you move your widgets around in response to mouse events, globalPosF() can differ a lot from the current cursor position returned by <db:link xlink:href="qcursor.xml#pos">QCursor::pos</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#posF">posF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="globalX">
<db:title>int QWheelEvent::globalX() const</db:title>
<db:para>Returns the global x position of the mouse cursor at the time of the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#globalY">globalY</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#globalPos">globalPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="globalY">
<db:title>int QWheelEvent::globalY() const</db:title>
<db:para>Returns the global y position of the mouse cursor at the time of the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#globalX">globalX</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#globalPos">globalPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inverted">
<db:title>[since 5.7] bool QWheelEvent::inverted() const</db:title>
<db:para>Returns whether the delta values delivered with the event are inverted.</db:para>
<db:para>Normally, a vertical wheel will produce a <db:link xlink:href="qwheelevent.xml">QWheelEvent</db:link> with positive delta values if the top of the wheel is rotating away from the hand operating it. Similarly, a horizontal wheel movement will produce a <db:link xlink:href="qwheelevent.xml">QWheelEvent</db:link> with positive delta values if the top of the wheel is moved to the left.</db:para>
<db:para>However, on some platforms this is configurable, so that the same operations described above will produce negative delta values (but with the same magnitude). With the inverted property a wheel event consumer can choose to always follow the direction of the wheel, regardless of the system settings, but only for specific widgets. (One such use case could be that the user is rotating the wheel in the same direction as a visual Tumbler rotates. Another usecase is to make a slider handle follow the direction of movement of fingers on a touchpad regardless of system configuration.)</db:para>
<db:note>
<db:para>Many platforms provide no such information. On such platforms inverted always returns false.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="phase">
<db:title>[since 5.2] Qt::ScrollPhase QWheelEvent::phase() const</db:title>
<db:para>Returns the scrolling phase of this wheel event.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollBegin</db:link> and <db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollEnd</db:link> phases are currently supported only on macOS.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="pixelDelta">
<db:title>QPoint QWheelEvent::pixelDelta() const</db:title>
<db:para>Returns the scrolling distance in pixels on screen. This value is provided on platforms that support high-resolution pixel-based delta values, such as macOS. The value should be used directly to scroll content on screen.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void MyWidget::wheelEvent(QWheelEvent *event)
{
    QPoint numPixels = event-&gt;pixelDelta();
    QPoint numDegrees = event-&gt;angleDelta() / 8;

    if (!numPixels.isNull()) {
        scrollWithPixels(numPixels);
    } else if (!numDegrees.isNull()) {
        QPoint numSteps = numDegrees / 15;
        scrollWithDegrees(numSteps);
    }

    event-&gt;accept();
}
</db:programlisting>
<db:note>
<db:para>On platforms that support scrolling <db:link xlink:href="qwheelevent.xml#phase">phases</db:link>, the delta may be null when:</db:para>
</db:note>
<db:itemizedlist>
<db:listitem>
<db:para>scrolling is about to begin, but the distance did not yet change (<db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollBegin</db:link>),</db:para>
</db:listitem>
<db:listitem>
<db:para>or scrolling has ended and the distance did not change anymore (<db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollEnd</db:link>).</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="pos">
<db:title>QPoint QWheelEvent::pos() const</db:title>
<db:para>Returns the position of the mouse cursor relative to the widget that received the event.</db:para>
<db:para>If you move your widgets around in response to mouse events, use <db:link xlink:href="qwheelevent.xml#globalPos">globalPos</db:link>() instead of this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#globalPos">globalPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="posF">
<db:title>const QPointF &amp;QWheelEvent::posF() const</db:title>
<db:para>Returns the position of the mouse cursor relative to the widget that received the event.</db:para>
<db:para>If you move your widgets around in response to mouse events, use <db:link xlink:href="qwheelevent.xml#globalPosF">globalPosF</db:link>() instead of this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#globalPosF">globalPosF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="source">
<db:title>[since 5.5] Qt::MouseEventSource QWheelEvent::source() const</db:title>
<db:para>Returns information about the wheel event source.</db:para>
<db:para>The source can be used to distinguish between events that come from a mouse with a physical wheel and events that are generated by some other means, such as a flick gesture on a touchpad.</db:para>
<db:note>
<db:para>Many platforms provide no such information. On such platforms <db:link xlink:href="qt.xml#MouseEventSource-enum">Qt::MouseEventNotSynthesized</db:link> is returned always.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#MouseEventSource-enum">Qt::MouseEventSource</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="x">
<db:title>int QWheelEvent::x() const</db:title>
<db:para>Returns the x position of the mouse cursor, relative to the widget that received the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#pos">pos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="y">
<db:title>int QWheelEvent::y() const</db:title>
<db:para>Returns the y position of the mouse cursor, relative to the widget that received the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#pos">pos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QWheelEvent</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qwheelevent.xml">QWheelEvent</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="QWheelEvent">
<db:title>[deprecated] QWheelEvent::QWheelEvent(const QPointF &amp;<db:emphasis>pos</db:emphasis>, int <db:emphasis>delta</db:emphasis>, Qt::MouseButtons <db:emphasis>buttons</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, Qt::Orientation <db:emphasis>orient</db:emphasis> = Qt::Vertical)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Constructs a wheel event object.</db:para>
<db:para>Use the constructor taking <db:emphasis>angleDelta</db:emphasis> and <db:emphasis>pixelDelta</db:emphasis> QPoints instead.</db:para>
<db:para>The position, <db:code role="parameter">pos</db:code>, is the location of the mouse cursor within the widget. The <db:link xlink:href="qwheelevent.xml#globalPos">globalPos</db:link>() is initialized to <db:link xlink:href="qcursor.xml#pos">QCursor::pos</db:link>() which is usually, but not always, correct. Use the other constructor if you need to specify the global position explicitly.</db:para>
<db:para>The <db:code role="parameter">buttons</db:code> describe the state of the mouse buttons at the time of the event, <db:code role="parameter">delta</db:code> contains the rotation distance, <db:code role="parameter">modifiers</db:code> holds the keyboard modifier flags at the time of the event, and <db:code role="parameter">orient</db:code> holds the wheel's orientation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#pos">pos</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#pixelDelta">pixelDelta</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#angleDelta">angleDelta</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QWheelEvent-1">
<db:title>[deprecated] QWheelEvent::QWheelEvent(const QPointF &amp;<db:emphasis>pos</db:emphasis>, const QPointF &amp;<db:emphasis>globalPos</db:emphasis>, int <db:emphasis>delta</db:emphasis>, Qt::MouseButtons <db:emphasis>buttons</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, Qt::Orientation <db:emphasis>orient</db:emphasis> = Qt::Vertical)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Constructs a wheel event object.</db:para>
<db:para>Use the constructor taking <db:emphasis>angleDelta</db:emphasis> and <db:emphasis>pixelDelta</db:emphasis> QPoints instead.</db:para>
<db:para>The <db:code role="parameter">pos</db:code> provides the location of the mouse cursor within the widget. The position in global coordinates is specified by <db:code role="parameter">globalPos</db:code>. <db:code role="parameter">delta</db:code> contains the rotation distance, <db:code role="parameter">modifiers</db:code> holds the keyboard modifier flags at the time of the event, and <db:code role="parameter">orient</db:code> holds the wheel's orientation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#pos">pos</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#pixelDelta">pixelDelta</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#angleDelta">angleDelta</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="delta">
<db:title>[deprecated] int QWheelEvent::delta() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This function has been deprecated, use <db:link xlink:href="qwheelevent.xml#pixelDelta">pixelDelta</db:link>() or <db:link xlink:href="qwheelevent.xml#angleDelta">angleDelta</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="orientation">
<db:title>[deprecated] Qt::Orientation QWheelEvent::orientation() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the wheel's orientation.</db:para>
<db:para>Use <db:link xlink:href="qwheelevent.xml#angleDelta">angleDelta</db:link>() instead.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
