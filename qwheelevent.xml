<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWheelEvent Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwheelevent.xml">QWheelEvent</db:link> class contains parameters that describe a wheel event.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWheelEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsinglepointevent.xml" xlink:role="class">QSinglePointEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QWheelEvent is part of <db:simplelist><db:member>events</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Wheel events are sent to the widget under the mouse cursor, but if that widget does not handle the event they are sent to the focus widget. Wheel events are generated for both mouse wheels and trackpad scroll gestures. There are two ways to read the wheel event delta: <db:link xlink:href="qwheelevent.xml#angleDelta">angleDelta</db:link>() returns the deltas in wheel degrees. These values are always provided. <db:link xlink:href="qwheelevent.xml#pixelDelta">pixelDelta</db:link>() returns the deltas in screen pixels, and is available on platforms that have high-resolution trackpads, such as macOS. If that is the case, <db:link xlink:href="qinputevent.xml#device">device</db:link>()-&gt;<db:link xlink:href="qevent.xml#type">type</db:link>() will return QInputDevice::DeviceType::Touchpad.</db:para>
<db:para>The functions <db:link xlink:href="qsinglepointevent.xml#position">position</db:link>() and <db:link xlink:href="qsinglepointevent.xml#globalPosition">globalPosition</db:link>() return the mouse cursor's location at the time of the event.</db:para>
<db:para>A wheel event contains a special accept flag that indicates whether the receiver wants the event. You should call <db:link xlink:href="qevent.xml#ignore">ignore</db:link>() if you do not handle the wheel event; this ensures that it will be sent to the parent widget.</db:para>
<db:para>The <db:link xlink:href="qwidget.xml#enabled-prop">QWidget::setEnabled</db:link>() function can be used to enable or disable mouse and keyboard events for a widget.</db:para>
<db:para>The event handler <db:link xlink:href="qwidget.xml#wheelEvent">QWidget::wheelEvent</db:link>() receives wheel events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml#grabMouse">QWidget::grabMouse</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWheelEvent-2">
<db:title>[since 5.12] QWheelEvent::QWheelEvent(const QPointF &amp;<db:emphasis>pos</db:emphasis>, const QPointF &amp;<db:emphasis>globalPos</db:emphasis>, QPoint <db:emphasis>pixelDelta</db:emphasis>, QPoint <db:emphasis>angleDelta</db:emphasis>, Qt::MouseButtons <db:emphasis>buttons</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, Qt::ScrollPhase <db:emphasis>phase</db:emphasis>, bool <db:emphasis>inverted</db:emphasis>, Qt::MouseEventSource <db:emphasis>source</db:emphasis> = Qt::MouseEventNotSynthesized, const QPointingDevice *<db:emphasis>device</db:emphasis> = QPointingDevice::primaryPointingDevice())</db:title>
<db:constructorsynopsis>
<db:methodname>QWheelEvent</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>globalPos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPoint</db:type>
<db:parameter>pixelDelta</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPoint</db:type>
<db:parameter>angleDelta</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::MouseButtons</db:type>
<db:parameter>buttons</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::KeyboardModifiers</db:type>
<db:parameter>modifiers</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ScrollPhase</db:type>
<db:parameter>phase</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>inverted</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::MouseEventSource</db:type>
<db:parameter>source</db:parameter>
<db:initializer>Qt::MouseEventNotSynthesized</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QPointingDevice *</db:type>
<db:parameter>device</db:parameter>
<db:initializer>QPointingDevice::primaryPointingDevice()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QWheelEvent(const QPointF &amp;pos, const QPointF &amp;globalPos, QPoint pixelDelta, QPoint angleDelta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::ScrollPhase phase, bool inverted, Qt::MouseEventSource source, const QPointingDevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a wheel event object.</db:para>
<db:para>The <db:code role="parameter">pos</db:code> provides the location of the mouse cursor within the window. The position in global coordinates is specified by <db:code role="parameter">globalPos</db:code>.</db:para>
<db:para><db:code role="parameter">pixelDelta</db:code> contains the scrolling distance in pixels on screen, while <db:code role="parameter">angleDelta</db:code> contains the wheel rotation angle. <db:code role="parameter">pixelDelta</db:code> is optional and can be null.</db:para>
<db:para>The mouse and keyboard states at the time of the event are specified by <db:code role="parameter">buttons</db:code> and <db:code role="parameter">modifiers</db:code>.</db:para>
<db:para>The scrolling phase of the event is specified by <db:code role="parameter">phase</db:code>, and the <db:code role="parameter">source</db:code> indicates whether this is a genuine or artificial (synthesized) event.</db:para>
<db:para>If the system is configured to invert the delta values delivered with the event (such as natural scrolling of the touchpad on macOS), <db:code role="parameter">inverted</db:code> should be <db:code>true</db:code>. Otherwise, <db:code role="parameter">inverted</db:code> is <db:code>false</db:code></db:para>
<db:para>The device from which the wheel event originated is specified by <db:code role="parameter">device</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsinglepointevent.xml#position">position</db:link>()</db:member>
<db:member><db:link xlink:href="qsinglepointevent.xml#globalPosition">globalPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#angleDelta">angleDelta</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#pixelDelta">pixelDelta</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#phase">phase</db:link>()</db:member>
<db:member><db:link xlink:href="qwheelevent.xml#inverted">inverted</db:link>()</db:member>
<db:member><db:link xlink:href="qinputevent.xml#device">device</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="angleDelta">
<db:title>QPoint QWheelEvent::angleDelta() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>angleDelta</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">angleDelta</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint angleDelta() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the relative amount that the wheel was rotated, in eighths of a degree. A positive value indicates that the wheel was rotated forwards away from the user; a negative value indicates that the wheel was rotated backwards toward the user. <db:code>angleDelta().y()</db:code> provides the angle through which the common vertical mouse wheel was rotated since the previous event. <db:code>angleDelta().x()</db:code> provides the angle through which the horizontal mouse wheel was rotated, if the mouse has a horizontal wheel; otherwise it stays at zero. Some mice allow the user to tilt the wheel to perform horizontal scrolling, and some touchpads support a horizontal scrolling gesture; that will also appear in <db:code>angleDelta().x()</db:code>.</db:para>
<db:para>Most mouse types work in steps of 15 degrees, in which case the delta value is a multiple of 120; i.e., 120 units * 1/8 = 15 degrees.</db:para>
<db:para>However, some mice have finer-resolution wheels and send delta values that are less than 120 units (less than 15 degrees). To support this possibility, you can either cumulatively add the delta values from events until the value of 120 is reached, then scroll the widget, or you can partially scroll the widget in response to each wheel event. But to provide a more native feel, you should prefer <db:link xlink:href="qwheelevent.xml#pixelDelta">pixelDelta</db:link>() on platforms where it's available.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void MyWidget::wheelEvent(QWheelEvent *event)
{
    QPoint numPixels = event-&amp;gt;pixelDelta();
    QPoint numDegrees = event-&amp;gt;angleDelta() / 8;

    if (!numPixels.isNull()) {
        scrollWithPixels(numPixels);
    } else if (!numDegrees.isNull()) {
        QPoint numSteps = numDegrees / 15;
        scrollWithDegrees(numSteps);
    }

    event-&amp;gt;accept();
}
</db:programlisting>
<db:note>
<db:para>On platforms that support scrolling <db:link xlink:href="qwheelevent.xml#phase">phases</db:link>, the delta may be null when:</db:para>
</db:note>
<db:itemizedlist>
<db:listitem>
<db:para>scrolling is about to begin, but the distance did not yet change (<db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollBegin</db:link>),</db:para>
</db:listitem>
<db:listitem>
<db:para>or scrolling has ended and the distance did not change anymore (<db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollEnd</db:link>).</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Getter function for property angleDelta. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwheelevent.xml#pixelDelta">pixelDelta</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inverted">
<db:title>[since 5.7] bool QWheelEvent::inverted() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>inverted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">inverted</db:synopsisinfo>
<db:synopsisinfo role="signature">bool inverted() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the delta values delivered with the event are inverted.</db:para>
<db:para>Normally, a vertical wheel will produce a <db:link xlink:href="qwheelevent.xml">QWheelEvent</db:link> with positive delta values if the top of the wheel is rotating away from the hand operating it. Similarly, a horizontal wheel movement will produce a <db:link xlink:href="qwheelevent.xml">QWheelEvent</db:link> with positive delta values if the top of the wheel is moved to the left.</db:para>
<db:para>However, on some platforms this is configurable, so that the same operations described above will produce negative delta values (but with the same magnitude). With the inverted property a wheel event consumer can choose to always follow the direction of the wheel, regardless of the system settings, but only for specific widgets. (One such use case could be that the user is rotating the wheel in the same direction as a visual Tumbler rotates. Another usecase is to make a slider handle follow the direction of movement of fingers on a touchpad regardless of system configuration.)</db:para>
<db:note>
<db:para>Many platforms provide no such information. On such platforms inverted always returns false.</db:para>
</db:note>
<db:note>
<db:para>Getter function for property inverted. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="isBeginEvent">
<db:title>[override virtual] bool QWheelEvent::isBeginEvent() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isBeginEvent</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBeginEvent() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsinglepointevent.xml#isBeginEvent" role="function">QSinglePointEvent::isBeginEvent() const</db:link>.</db:para>
<db:para>Returns <db:code>true</db:code> if this event's <db:link xlink:href="qwheelevent.xml#phase">phase</db:link>() is <db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollBegin</db:link>.</db:para>
</db:section>
<db:section xml:id="isEndEvent">
<db:title>[override virtual] bool QWheelEvent::isEndEvent() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEndEvent</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEndEvent() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsinglepointevent.xml#isEndEvent" role="function">QSinglePointEvent::isEndEvent() const</db:link>.</db:para>
<db:para>Returns <db:code>true</db:code> if this event's <db:link xlink:href="qwheelevent.xml#phase">phase</db:link>() is <db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollEnd</db:link>.</db:para>
</db:section>
<db:section xml:id="isUpdateEvent">
<db:title>[override virtual] bool QWheelEvent::isUpdateEvent() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isUpdateEvent</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isUpdateEvent() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qsinglepointevent.xml#isUpdateEvent" role="function">QSinglePointEvent::isUpdateEvent() const</db:link>.</db:para>
<db:para>Returns <db:code>true</db:code> if this event's <db:link xlink:href="qwheelevent.xml#phase">phase</db:link>() is <db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollUpdate</db:link> or <db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollMomentum</db:link>.</db:para>
</db:section>
<db:section xml:id="phase">
<db:title>[since 5.2] Qt::ScrollPhase QWheelEvent::phase() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::ScrollPhase</db:type>
<db:methodname>phase</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">phase</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::ScrollPhase phase() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the scrolling phase of this wheel event.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollBegin</db:link> and <db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollEnd</db:link> phases are currently supported only on macOS.</db:para>
</db:note>
<db:note>
<db:para>Getter function for property phase. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="pixelDelta">
<db:title>QPoint QWheelEvent::pixelDelta() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>pixelDelta</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">pixelDelta</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint pixelDelta() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the scrolling distance in pixels on screen. This value is provided on platforms that support high-resolution pixel-based delta values, such as macOS. The value should be used directly to scroll content on screen.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void MyWidget::wheelEvent(QWheelEvent *event)
{
    QPoint numPixels = event-&amp;gt;pixelDelta();
    QPoint numDegrees = event-&amp;gt;angleDelta() / 8;

    if (!numPixels.isNull()) {
        scrollWithPixels(numPixels);
    } else if (!numDegrees.isNull()) {
        QPoint numSteps = numDegrees / 15;
        scrollWithDegrees(numSteps);
    }

    event-&amp;gt;accept();
}
</db:programlisting>
<db:note>
<db:para>On platforms that support scrolling <db:link xlink:href="qwheelevent.xml#phase">phases</db:link>, the delta may be null when:</db:para>
</db:note>
<db:itemizedlist>
<db:listitem>
<db:para>scrolling is about to begin, but the distance did not yet change (<db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollBegin</db:link>),</db:para>
</db:listitem>
<db:listitem>
<db:para>or scrolling has ended and the distance did not change anymore (<db:link xlink:href="qt.xml#ScrollPhase-enum">Qt::ScrollEnd</db:link>).</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>On X11 this value is driver specific and unreliable, use <db:link xlink:href="qwheelevent.xml#angleDelta">angleDelta</db:link>() instead</db:para>
</db:note>
<db:note>
<db:para>Getter function for property pixelDelta. </db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QWheelEvent</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qwheelevent.xml">QWheelEvent</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="source">
<db:title>[since 5.5] Qt::MouseEventSource QWheelEvent::source() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::MouseEventSource</db:type>
<db:methodname>source</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::MouseEventSource source() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>in 6.0: use <db:link xlink:href="qpointerevent.xml#pointingDevice">pointingDevice</db:link>()</db:para>
<db:para>Returns information about the wheel event source.</db:para>
<db:para>The source can be used to distinguish between events that come from a mouse with a physical wheel and events that are generated by some other means, such as a flick gesture on a touchpad. This enum tells you from where it was synthesized; but often it's more useful to know from which device it was synthesized, so try to use <db:link xlink:href="qpointerevent.xml#pointingDevice">pointingDevice</db:link>() instead.</db:para>
<db:note>
<db:para>Many platforms provide no such information. On such platforms <db:link xlink:href="qt.xml#MouseEventSource-enum">Qt::MouseEventNotSynthesized</db:link> is returned always.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#MouseEventSource-enum">Qt::MouseEventSource</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
