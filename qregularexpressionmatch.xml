<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QRegularExpressionMatch Class</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> class provides the results of a matching a <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> against a string.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRegularExpressionMatch</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRegularExpressionMatch is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> object can be obtained by calling the <db:link xlink:href="qregularexpression.xml#match">QRegularExpression::match</db:link>() function, or as a single result of a global match from a <db:link xlink:href="qregularexpressionmatchiterator.xml">QRegularExpressionMatchIterator</db:link>.</db:para>
<db:para>The success or the failure of a match attempt can be inspected by calling the <db:link xlink:href="qregularexpressionmatch.xml#hasMatch">hasMatch</db:link>() function. <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> also reports a successful partial match through the <db:link xlink:href="qregularexpressionmatch.xml#hasPartialMatch">hasPartialMatch</db:link>() function.</db:para>
<db:para>In addition, <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> returns the substrings captured by the capturing groups in the pattern string. The implicit capturing group with index 0 captures the result of the whole match. The <db:link xlink:href="qregularexpressionmatch.xml#captured">captured</db:link>() function returns each substring captured, either by the capturing group's index or by its name:</db:para>
<db:programlisting language="cpp">QRegularExpression re(&quot;(\\d\\d) (?&lt;name&gt;\\w+)&quot;);
QRegularExpressionMatch match = re.match(&quot;23 Jordan&quot;);
if (match.hasMatch()) {
    QString number = match.captured(1); // first == &quot;23&quot;
    QString name = match.captured(&quot;name&quot;); // name == &quot;Jordan&quot;
}
</db:programlisting>
<db:para>For each captured substring it is possible to query its starting and ending offsets in the subject string by calling the <db:link xlink:href="qregularexpressionmatch.xml#capturedStart">capturedStart</db:link>() and the <db:link xlink:href="qregularexpressionmatch.xml#capturedEnd">capturedEnd</db:link>() function, respectively. The length of each captured substring is available using the <db:link xlink:href="qregularexpressionmatch.xml#capturedLength">capturedLength</db:link>() function.</db:para>
<db:para>The convenience function <db:link xlink:href="qregularexpressionmatch.xml#capturedTexts">capturedTexts</db:link>() will return <db:emphasis>all</db:emphasis> the captured substrings at once (including the substring matched by the entire pattern) in the order they have been captured by captring groups; that is, captured(i) == capturedTexts().at(i).</db:para>
<db:para>You can retrieve the <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> object the subject string was matched against by calling the <db:link xlink:href="qregularexpressionmatch.xml#regularExpression">regularExpression</db:link>() function; the match type and the match options are available as well by calling the <db:link xlink:href="qregularexpressionmatch.xml#matchType">matchType</db:link>() and the <db:link xlink:href="qregularexpressionmatch.xml#matchOptions">matchOptions</db:link>() respectively.</db:para>
<db:para>Please refer to the <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> documentation for more information about the Qt regular expression classes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRegularExpressionMatch">
<db:title>[since 5.1] QRegularExpressionMatch::QRegularExpressionMatch()</db:title>
<db:para>Constructs a valid, empty <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> object. The regular expression is set to a default-constructed one; the match type to <db:link xlink:href="qregularexpression.xml#MatchType-enum">QRegularExpression::NoMatch</db:link> and the match options to <db:link xlink:href="qregularexpression.xml#MatchOption-enum">QRegularExpression::NoMatchOption</db:link>.</db:para>
<db:para>The object will report no match through the <db:link xlink:href="qregularexpressionmatch.xml#hasMatch">hasMatch</db:link>() and the <db:link xlink:href="qregularexpressionmatch.xml#hasPartialMatch">hasPartialMatch</db:link>() member functions.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="QRegularExpressionMatch-1">
<db:title>QRegularExpressionMatch::QRegularExpressionMatch(const QRegularExpressionMatch &amp;<db:emphasis>match</db:emphasis>)</db:title>
<db:para>Constructs a match result by copying the result of the given <db:code role="parameter">match</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpressionmatch.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QRegularExpressionMatch">
<db:title>[noexcept] QRegularExpressionMatch::~QRegularExpressionMatch()</db:title>
<db:para>Destroys the match result.</db:para>
</db:section>
<db:section xml:id="captured">
<db:title>QString QRegularExpressionMatch::captured(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the substring captured by the capturing group named <db:code role="parameter">name</db:code>. If the capturing group named <db:code role="parameter">name</db:code> did not capture a string or doesn't exist, returns a null <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedRef">capturedRef</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedStart">capturedStart</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedEnd">capturedEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedLength">capturedLength</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#isNull">QString::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="captured-1">
<db:title>QString QRegularExpressionMatch::captured(int <db:emphasis>nth</db:emphasis> = 0) const</db:title>
<db:para>Returns the substring captured by the <db:code role="parameter">nth</db:code> capturing group. If the <db:code role="parameter">nth</db:code> capturing group did not capture a string or doesn't exist, returns a null <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedRef">capturedRef</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#lastCapturedIndex">lastCapturedIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedStart">capturedStart</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedEnd">capturedEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedLength">capturedLength</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#isNull">QString::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="capturedEnd">
<db:title>int QRegularExpressionMatch::capturedEnd(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the offset inside the subject string immediately after the ending position of the substring captured by the capturing group named <db:code role="parameter">name</db:code>. If the capturing group named <db:code role="parameter">name</db:code> did not capture a string or doesn't exist, returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedStart">capturedStart</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedLength">capturedLength</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#captured">captured</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="capturedEnd-1">
<db:title>int QRegularExpressionMatch::capturedEnd(int <db:emphasis>nth</db:emphasis> = 0) const</db:title>
<db:para>Returns the offset inside the subject string immediately after the ending position of the substring captured by the <db:code role="parameter">nth</db:code> capturing group. If the <db:code role="parameter">nth</db:code> capturing group did not capture a string or doesn't exist, returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedStart">capturedStart</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedLength">capturedLength</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#captured">captured</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="capturedLength">
<db:title>int QRegularExpressionMatch::capturedLength(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the offset inside the subject string corresponding to the starting position of the substring captured by the capturing group named <db:code role="parameter">name</db:code>.</db:para>
<db:note>
<db:para>This function returns 0 if the capturing group named <db:code role="parameter">name</db:code> did not capture a string or doesn't exist.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedStart">capturedStart</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedEnd">capturedEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#captured">captured</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="capturedLength-1">
<db:title>int QRegularExpressionMatch::capturedLength(int <db:emphasis>nth</db:emphasis> = 0) const</db:title>
<db:para>Returns the length of the substring captured by the <db:code role="parameter">nth</db:code> capturing group.</db:para>
<db:note>
<db:para>This function returns 0 if the <db:code role="parameter">nth</db:code> capturing group did not capture a string or doesn't exist.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedStart">capturedStart</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedEnd">capturedEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#captured">captured</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="capturedRef">
<db:title>QStringRef QRegularExpressionMatch::capturedRef(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns a reference to the string captured by the capturing group named <db:code role="parameter">name</db:code>. If the capturing group named <db:code role="parameter">name</db:code> did not capture a string or doesn't exist, returns a null <db:link xlink:href="qstringref.xml">QStringRef</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpressionmatch.xml#captured">captured</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedStart">capturedStart</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedEnd">capturedEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedLength">capturedLength</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#isNull">QStringRef::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="capturedRef-1">
<db:title>QStringRef QRegularExpressionMatch::capturedRef(int <db:emphasis>nth</db:emphasis> = 0) const</db:title>
<db:para>Returns a reference to the substring captured by the <db:code role="parameter">nth</db:code> capturing group. If the <db:code role="parameter">nth</db:code> capturing group did not capture a string or doesn't exist, returns a null <db:link xlink:href="qstringref.xml">QStringRef</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpressionmatch.xml#captured">captured</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#lastCapturedIndex">lastCapturedIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedStart">capturedStart</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedEnd">capturedEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedLength">capturedLength</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#isNull">QStringRef::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="capturedStart">
<db:title>int QRegularExpressionMatch::capturedStart(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the offset inside the subject string corresponding to the starting position of the substring captured by the capturing group named <db:code role="parameter">name</db:code>. If the capturing group named <db:code role="parameter">name</db:code> did not capture a string or doesn't exist, returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedEnd">capturedEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedLength">capturedLength</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#captured">captured</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="capturedStart-1">
<db:title>int QRegularExpressionMatch::capturedStart(int <db:emphasis>nth</db:emphasis> = 0) const</db:title>
<db:para>Returns the offset inside the subject string corresponding to the starting position of the substring captured by the <db:code role="parameter">nth</db:code> capturing group. If the <db:code role="parameter">nth</db:code> capturing group did not capture a string or doesn't exist, returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedEnd">capturedEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedLength">capturedLength</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#captured">captured</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="capturedTexts">
<db:title>QStringList QRegularExpressionMatch::capturedTexts() const</db:title>
<db:para>Returns a list of all strings captured by capturing groups, in the order the groups themselves appear in the pattern string.</db:para>
</db:section>
<db:section xml:id="hasMatch">
<db:title>bool QRegularExpressionMatch::hasMatch() const</db:title>
<db:para>Returns true if the regular expression matched against the subject string, or false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#match">QRegularExpression::match</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#hasPartialMatch">hasPartialMatch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasPartialMatch">
<db:title>bool QRegularExpressionMatch::hasPartialMatch() const</db:title>
<db:para>Returns true if the regular expression partially matched against the subject string, or false otherwise.</db:para>
<db:note>
<db:para>Only a match that explicitly used the one of the partial match types can yield a partial match. Still, if such a match succeeds totally, this function will return false, while <db:link xlink:href="qregularexpressionmatch.xml#hasMatch">hasMatch</db:link>() will return true.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#match">QRegularExpression::match</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpression.xml#MatchType-enum">QRegularExpression::MatchType</db:link></db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#hasMatch">hasMatch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QRegularExpressionMatch::isValid() const</db:title>
<db:para>Returns true if the match object was obtained as a result from the <db:link xlink:href="qregularexpression.xml#match">QRegularExpression::match</db:link>() function invoked on a valid <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> object; returns false if the <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> was invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#match">QRegularExpression::match</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpression.xml#isValid">QRegularExpression::isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastCapturedIndex">
<db:title>int QRegularExpressionMatch::lastCapturedIndex() const</db:title>
<db:para>Returns the index of the last capturing group that captured something, including the implicit capturing group 0. This can be used to extract all the substrings that were captured:</db:para>
<db:programlisting language="cpp">QRegularExpressionMatch match = re.match(string);
for (int i = 0; i &lt;= match.lastCapturedIndex(); ++i) {
    QString captured = match.captured(i);
    // ...
}
</db:programlisting>
<db:para>Note that some of the capturing groups with an index less than lastCapturedIndex() could have not matched, and therefore captured nothing.</db:para>
<db:para>If the regular expression did not match, this function returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpressionmatch.xml#captured">captured</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedStart">capturedStart</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedEnd">capturedEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#capturedLength">capturedLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="matchOptions">
<db:title>QRegularExpression::MatchOptions QRegularExpressionMatch::matchOptions() const</db:title>
<db:para>Returns the match options that were used to get this <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> object, that is, the match options that were passed to <db:link xlink:href="qregularexpression.xml#match">QRegularExpression::match</db:link>() or <db:link xlink:href="qregularexpression.xml#globalMatch">QRegularExpression::globalMatch</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#match">QRegularExpression::match</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#regularExpression">regularExpression</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#matchType">matchType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="matchType">
<db:title>QRegularExpression::MatchType QRegularExpressionMatch::matchType() const</db:title>
<db:para>Returns the match type that was used to get this <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> object, that is, the match type that was passed to <db:link xlink:href="qregularexpression.xml#match">QRegularExpression::match</db:link>() or <db:link xlink:href="qregularexpression.xml#globalMatch">QRegularExpression::globalMatch</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#match">QRegularExpression::match</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#regularExpression">regularExpression</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#matchOptions">matchOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="regularExpression">
<db:title>QRegularExpression QRegularExpressionMatch::regularExpression() const</db:title>
<db:para>Returns the <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> object whose match() function returned this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#match">QRegularExpression::match</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#matchType">matchType</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml#matchOptions">matchOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QRegularExpressionMatch::swap(QRegularExpressionMatch &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps the match result <db:code role="parameter">other</db:code> with this match result. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QRegularExpressionMatch &amp;QRegularExpressionMatch::operator=(const QRegularExpressionMatch &amp;<db:emphasis>match</db:emphasis>)</db:title>
<db:para>Assigns the match result <db:code role="parameter">match</db:code> to this object, and returns a reference to the copy.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-26">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QRegularExpressionMatch &amp;<db:emphasis>match</db:emphasis>)</db:title>
<db:para>Writes the match object <db:code role="parameter">match</db:code> into the debug object <db:code role="parameter">debug</db:code> for debugging purposes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
