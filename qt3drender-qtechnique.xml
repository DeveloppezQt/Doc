<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTechnique Class</db:title>
<db:subtitle>Qt3DRender::QTechnique</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Encapsulates a Technique.</db:para>
<db:para>This class was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTechnique</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3drender)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3drender)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3drender</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qt3d-render-technique.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3dcore-qnode.xml" xlink:role="class">Qt3DCore::QNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qt3drender-qtechnique.xml">Qt3DRender::QTechnique</db:link> specifies a set of <db:link xlink:href="qt3drender-qrenderpass.xml">Qt3DRender::QRenderPass</db:link> objects, <db:link xlink:href="qt3drender-qfilterkey.xml">Qt3DRender::QFilterKey</db:link> objects, <db:link xlink:href="qt3drender-qparameter.xml">Qt3DRender::QParameter</db:link> objects and a <db:link xlink:href="qt3drender-qgraphicsapifilter.xml">Qt3DRender::QGraphicsApiFilter</db:link>, which together define a rendering technique the given graphics API can render. The filter keys are used by <db:link xlink:href="qt3drender-qtechniquefilter.xml">Qt3DRender::QTechniqueFilter</db:link> to select specific techniques at specific parts of the FrameGraph. A <db:link xlink:href="qt3drender-qparameter.xml">QParameter</db:link> defined on a <db:link xlink:href="qt3drender-qtechnique.xml">QTechnique</db:link> overrides parameter (of the same name) defined in <db:link xlink:href="qt3drender-qrenderpass.xml">QRenderPass</db:link>, but are overridden by parameter in <db:link xlink:href="qt3drender-qrenderpassfilter.xml">QRenderPassFilter</db:link>, <db:link xlink:href="qt3drender-qtechniquefilter.xml">QTechniqueFilter</db:link>, <db:link xlink:href="qt3drender-qmaterial.xml">QMaterial</db:link> and <db:link xlink:href="qt3drender-qeffect.xml">QEffect</db:link>.</db:para>
<db:para>When creating an <db:link xlink:href="qt3drender-qeffect.xml">QEffect</db:link> that targets several versions of a graphics API, it is useful to create several <db:link xlink:href="qt3drender-qtechnique.xml">QTechnique</db:link> nodes each with a <db:link xlink:href="qt3drender-qtechnique.xml#graphicsApiFilter-prop">graphicsApiFilter</db:link> set to match one of the targeted GL versions. At runtime, the Qt3D renderer will select the most appropriate <db:link xlink:href="qt3drender-qtechnique.xml">QTechnique</db:link> based on which graphics API versions are supported and (if specified) the <db:link xlink:href="qt3drender-qfilterkey.xml">QFilterKey</db:link> nodes that satisfy a given <db:link xlink:href="qt3drender-qtechniquefilter.xml">QTechniqueFilter</db:link> in the FrameGraph.</db:para>
<db:note>
<db:para>When using OpenGL as the graphics API for rendering, Qt3D relies on the <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> returned by <db:link xlink:href="qsurfaceformat.xml#defaultFormat">QSurfaceFormat::defaultFormat</db:link>() at runtime to decide what is the most appropriate GL version available. If you need to customize the <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link>, do not forget to apply it with <db:link xlink:href="qsurfaceformat.xml#setDefaultFormat">QSurfaceFormat::setDefaultFormat</db:link>(). Setting the <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> on the view will likely have no effect on Qt3D related rendering.</db:para>
</db:note>
<db:note>
<db:para><db:link xlink:href="qt3drender-qtechnique.xml">QTechnique</db:link> node can not be disabled.</db:para>
</db:note>
<db:programlisting language="cpp">QTechnique *gl3Technique = new QTechnique();

// Create the render passes
QRenderPass *firstPass = new QRenderPass();
QRenderPass *secondPass = new QRenderPass();

// Add the passes to the technique
gl3Technique-&amp;gt;addRenderPass(firstPass);
gl3Technique-&amp;gt;addRenderPass(secondPass);

// Set the targeted GL version for the technique
gl3Technique-&amp;gt;graphicsApiFilter()-&amp;gt;setApi(QGraphicsApiFilter::OpenGL);
gl3Technique-&amp;gt;graphicsApiFilter()-&amp;gt;setMajorVersion(3);
gl3Technique-&amp;gt;graphicsApiFilter()-&amp;gt;setMinorVersion(1);
gl3Technique-&amp;gt;graphicsApiFilter()-&amp;gt;setProfile(QGraphicsApiFilter::CoreProfile);

// Create a FilterKey
QFilterKey *filterKey = new QFilterKey();
filterKey-&amp;gt;setName(QStringLiteral(&quot;name&quot;));
fitlerKey-&amp;gt;setValue(QStringLiteral(&quot;zFillPass&quot;));

// Add the FilterKey to the Technique
gl3Technique-&amp;gt;addFilterKey(filterKey);

// Create a QParameter
QParameter *colorParameter = new QParameter(QStringLiteral(&quot;color&quot;), QColor::fromRgbF(0.0f, 0.0f, 1.0f, 1.0f));

// Add parameter to technique
gl3Technique-&amp;gt;addParameter(colorParameter);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3drender-qeffect.xml">QEffect</db:link></db:member>
<db:member><db:link xlink:href="qt3drender-qrenderpass.xml">QRenderPass</db:link></db:member>
<db:member><db:link xlink:href="qt3drender-qtechniquefilter.xml">QTechniqueFilter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="graphicsApiFilter-prop">
<db:title>[read-only] graphicsApiFilter : Qt3DRender::QGraphicsApiFilter* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt3DRender::QGraphicsApiFilter*</db:type>
<db:varname>graphicsApiFilter</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">graphicsApiFilter</db:synopsisinfo>
<db:synopsisinfo role="getter">graphicsApiFilter</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies the graphics API filter being used</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3drender-qgraphicsapifilter.xml">Qt3DRender::QGraphicsApiFilter</db:link></db:type> *<db:emphasis role="bold">graphicsApiFilter</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para>const <db:type><db:link xlink:href="qt3drender-qgraphicsapifilter.xml">Qt3DRender::QGraphicsApiFilter</db:link></db:type> *<db:emphasis role="bold">graphicsApiFilter</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="addFilterKey">
<db:title>void QTechnique::addFilterKey(Qt3DRender::QFilterKey *<db:emphasis>filterKey</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addFilterKey</db:methodname>
<db:methodparam>
<db:type>Qt3DRender::QFilterKey *</db:type>
<db:parameter>filterKey</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addFilterKey(Qt3DRender::QFilterKey *filterKey)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Add <db:code role="parameter">filterKey</db:code> to the <db:link xlink:href="qt3drender-qtechnique.xml">Qt3DRender::QTechnique</db:link> local filter keys.</db:para>
</db:section>
<db:section xml:id="addParameter">
<db:title>void QTechnique::addParameter(Qt3DRender::QParameter *<db:emphasis>parameter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addParameter</db:methodname>
<db:methodparam>
<db:type>Qt3DRender::QParameter *</db:type>
<db:parameter>parameter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addParameter(Qt3DRender::QParameter *parameter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Add <db:code role="parameter">parameter</db:code> to the technique's parameters.</db:para>
</db:section>
<db:section xml:id="addRenderPass">
<db:title>void QTechnique::addRenderPass(Qt3DRender::QRenderPass *<db:emphasis>pass</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addRenderPass</db:methodname>
<db:methodparam>
<db:type>Qt3DRender::QRenderPass *</db:type>
<db:parameter>pass</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addRenderPass(Qt3DRender::QRenderPass *pass)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends a <db:code role="parameter">pass</db:code> to the technique.</db:para>
</db:section>
<db:section xml:id="filterKeys">
<db:title>QList&lt;Qt3DRender::QFilterKey *&gt; QTechnique::filterKeys() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;Qt3DRender::QFilterKey *&gt;</db:type>
<db:methodname>filterKeys</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;Qt3DRender::QFilterKey *&gt; filterKeys() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of Qt3DCore::QFilterKey key objects making up the filter keys of the <db:link xlink:href="qt3drender-qtechnique.xml">Qt3DRender::QTechnique</db:link>.</db:para>
</db:section>
<db:section xml:id="parameters">
<db:title>QList&lt;Qt3DRender::QParameter *&gt; QTechnique::parameters() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;Qt3DRender::QParameter *&gt;</db:type>
<db:methodname>parameters</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;Qt3DRender::QParameter *&gt; parameters() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a vector of the techniques current parameters</db:para>
</db:section>
<db:section xml:id="removeFilterKey">
<db:title>void QTechnique::removeFilterKey(Qt3DRender::QFilterKey *<db:emphasis>filterKey</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeFilterKey</db:methodname>
<db:methodparam>
<db:type>Qt3DRender::QFilterKey *</db:type>
<db:parameter>filterKey</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeFilterKey(Qt3DRender::QFilterKey *filterKey)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">filterKey</db:code> from the <db:link xlink:href="qt3drender-qtechnique.xml">Qt3DRender::QTechnique</db:link> local filter keys.</db:para>
</db:section>
<db:section xml:id="removeParameter">
<db:title>void QTechnique::removeParameter(Qt3DRender::QParameter *<db:emphasis>parameter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeParameter</db:methodname>
<db:methodparam>
<db:type>Qt3DRender::QParameter *</db:type>
<db:parameter>parameter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeParameter(Qt3DRender::QParameter *parameter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Remove <db:code role="parameter">parameter</db:code> from the technique's parameters.</db:para>
</db:section>
<db:section xml:id="removeRenderPass">
<db:title>void QTechnique::removeRenderPass(Qt3DRender::QRenderPass *<db:emphasis>pass</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeRenderPass</db:methodname>
<db:methodparam>
<db:type>Qt3DRender::QRenderPass *</db:type>
<db:parameter>pass</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeRenderPass(Qt3DRender::QRenderPass *pass)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes a <db:code role="parameter">pass</db:code> from the technique.</db:para>
</db:section>
<db:section xml:id="renderPasses">
<db:title>QList&lt;Qt3DRender::QRenderPass *&gt; QTechnique::renderPasses() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;Qt3DRender::QRenderPass *&gt;</db:type>
<db:methodname>renderPasses</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;Qt3DRender::QRenderPass *&gt; renderPasses() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of render passes contained in the technique.</db:para>
</db:section>
</db:section>
</db:article>
