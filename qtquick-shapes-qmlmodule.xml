<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Shapes QML Types</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides QML types for drawing stroked and filled shapes.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>To use the types in this module, import the module with the following line:</db:para>
<db:programlisting language="qml">import QtQuick.Shapes
</db:programlisting>
<db:para>Qt Quick Shapes provides tools for drawing arbitrary shapes in a Qt Quick scene. <db:link xlink:href="qml-qtquick-shapes-shape.xml">Shapes</db:link> can be constructed from basic building blocks like <db:link xlink:href="qml-qtquick-pathline.xml">lines</db:link> and <db:link xlink:href="qml-qtquick-pathcubic.xml">curves</db:link> that define sub-shapes. The sub-shapes can then be filled with solid colors or gradients, and an outline stroke can be defined.</db:para>
<db:para>Qt Quick Shapes also supports higher level path element types, such as <db:link xlink:href="qml-qtquick-pathtext.xml">text</db:link> and <db:link xlink:href="qml-qtquick-pathsvg.xml">SVG path descriptions</db:link>. The currently supported element types is: <db:link xlink:href="qml-qtquick-pathmove.xml">PathMove</db:link>, <db:link xlink:href="qml-qtquick-pathline.xml">PathLine</db:link>, <db:link xlink:href="qml-qtquick-pathquad.xml">PathQuad</db:link>, <db:link xlink:href="qml-qtquick-pathcubic.xml">PathCubic</db:link>, <db:link xlink:href="qml-qtquick-patharc.xml">PathArc</db:link>, <db:link xlink:href="qml-qtquick-pathtext.xml">PathText</db:link> and <db:link xlink:href="qml-qtquick-pathsvg.xml">PathSvg</db:link>.</db:para>
<db:para>Qt Quick Shapes triangulates the shapes and renders the corresponding triangles on the GPU. Therefore, altering the control points of elements will lead to re-triangulation of the affected paths, at some performance cost. In addition, curves are flattened before they are rendered, so applying a very high scale to the shape may show artifacts where it is visible that the curves are represented by a sequence of smaller, straight lines.</db:para>
<db:note>
<db:para>By default, Qt Quick Shapes relies on multi-sampling for anti-aliasing. This can be enabled for the entire application or window using the corresponding settings in <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link>. It can also be enabled for only the shape, by setting its <db:link xlink:href="qml-qtquick-item.xml#layer.enabled-prop">layer.enabled</db:link> property to true and then adjusting the <db:link xlink:href="qml-qtquick-item.xml#layer.samples-prop">layer.samples</db:link> property. In the latter case, multi-sampling will not be applied to the entire scene, but the shape will be rendered via an intermediate off-screen buffer. Alternatively, the <db:link xlink:href="qml-qtquick-shapes-shape.xml#preferredRendererType-prop">preferredRendererType</db:link> property can be set to Shape.CurveRenderer. This has anti-aliasing built in and generally renders the shapes at a higher quality, but at some additional performance cost.</db:para>
</db:note>
<db:para>For further information, the <db:link xlink:href="qtquick-quickshapes-shapes-example.xml">Shapes example</db:link> shows how to implement different types of shapes, fills and strokes, and the <db:link xlink:href="qtquick-quickshapes-weatherforecast-example.xml">Weather Forecast Example</db:link> shows examples of different ways shapes might be useful in a user interface.</db:para>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-shapes-conicalgradient.xml" xlink:role="">ConicalGradient</db:link></db:term>
<db:listitem>
<db:para>Conical gradient.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-shapes-lineargradient.xml" xlink:role="">LinearGradient</db:link></db:term>
<db:listitem>
<db:para>Linear gradient.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-shapes-radialgradient.xml" xlink:role="">RadialGradient</db:link></db:term>
<db:listitem>
<db:para>Radial gradient.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-shapes-shape.xml" xlink:role="">Shape</db:link></db:term>
<db:listitem>
<db:para>Renders a path.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-shapes-shapegradient.xml" xlink:role="">ShapeGradient</db:link></db:term>
<db:listitem>
<db:para>Base type of Shape fill gradients.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-shapes-shapepath.xml" xlink:role="">ShapePath</db:link></db:term>
<db:listitem>
<db:para>Describes a Path and associated properties for stroking and filling.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:article>
