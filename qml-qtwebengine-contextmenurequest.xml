<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ContextMenuRequest QML Type</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A request for showing a context menu.</db:para>
<db:para>This type was introduced in QtWebEngine 1.4.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtWebEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtWebEngine 1.4</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qml-qtwebengine-contextmenurequest.xml">ContextMenuRequest</db:link> is passed as an argument of the <db:link xlink:href="qml-qtwebengine-webengineview.xml#contextMenuRequested-signal">WebEngineView::contextMenuRequested</db:link> signal. It provides further information about the context of the request. The <db:link xlink:href="qml-qtwebengine-contextmenurequest.xml#position-prop">position</db:link> property provides the origin of the request.</db:para>
<db:para>The <db:link xlink:href="qml-qtwebengine-contextmenurequest.xml#accepted-prop">accepted</db:link> property of the request indicates whether the request is handled by the user code or the default context menu should be displayed.</db:para>
<db:para>The following code uses a custom menu to handle the request:</db:para>
<db:programlisting language="cpp">WebEngineView {
    id: view
    // ...
    onContextMenuRequested: function(request) {
        request.accepted = true;
        myMenu.x = request.x;
        myMenu.y = request.y;
        myMenu.trigger.connect(view.triggerWebAction);
        myMenu.popup();
    }
    // ...
}
</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="accepted-prop">
<db:title>accepted : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>accepted</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Indicates whether the context menu request has been handled by the signal handler.</db:para>
<db:para>If the property is <db:code>false</db:code> after any signal handlers for <db:link xlink:href="qml-qtwebengine-webengineview.xml#contextMenuRequested-signal">WebEngineView::contextMenuRequested</db:link> have been executed, a default context menu will be shown. To prevent this, set <db:code>request.accepted</db:code> to <db:code>true</db:code>.</db:para>
<db:para>The default is <db:code>false</db:code>.</db:para>
<db:note>
<db:para>The default content of the context menu depends on the web element for which the request was actually generated.</db:para>
</db:note>
</db:section>
<db:section xml:id="editFlags-prop">
<db:title>[read-only, since QtWebEngine 1.7] editFlags : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>editFlags</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The available edit operations in the current context or <db:code>CanDoNone</db:code> if no actions are available.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.CanUndo</db:para>
</db:td>
<db:td>
<db:para>Undo is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.CanRedo</db:para>
</db:td>
<db:td>
<db:para>Redo is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.CanCut</db:para>
</db:td>
<db:td>
<db:para>Cut is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.CanCopy</db:para>
</db:td>
<db:td>
<db:para>Copy is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.CanPaste</db:para>
</db:td>
<db:td>
<db:para>Paste is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.CanDelete</db:para>
</db:td>
<db:td>
<db:para>Delete is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.CanSelectAll</db:para>
</db:td>
<db:td>
<db:para>Select All is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.CanTranslate</db:para>
</db:td>
<db:td>
<db:para>Translate is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.CanEditRichly</db:para>
</db:td>
<db:td>
<db:para>Context is richly editable.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in QtWebEngine 1.7.</db:para>
</db:section>
<db:section xml:id="isContentEditable-prop">
<db:title>[read-only] isContentEditable : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>isContentEditable</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Indicates whether the selected web content is editable.</db:para>
</db:section>
<db:section xml:id="linkText-prop">
<db:title>[read-only] linkText : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>linkText</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The text of the link if the context menu was requested for a link.</db:para>
</db:section>
<db:section xml:id="linkUrl-prop">
<db:title>[read-only] linkUrl : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>linkUrl</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The URL of the link if the selected web page content is a link. It is not guaranteed to be a valid URL.</db:para>
</db:section>
<db:section xml:id="mediaFlags-prop">
<db:title>[read-only, since QtWebEngine 1.7] mediaFlags : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>mediaFlags</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The current media element's status and its available operations. <db:code>MediaNone</db:code> if the selected web page content is not a media element.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaInError</db:para>
</db:td>
<db:td>
<db:para>An error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaPaused</db:para>
</db:td>
<db:td>
<db:para>Media is paused.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaMuted</db:para>
</db:td>
<db:td>
<db:para>Media is muted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaLoop</db:para>
</db:td>
<db:td>
<db:para>Media can be looped.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaCanSave</db:para>
</db:td>
<db:td>
<db:para>Media can be saved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaHasAudio</db:para>
</db:td>
<db:td>
<db:para>Media has audio.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaCanToggleControls</db:para>
</db:td>
<db:td>
<db:para>Media can show controls.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaControls</db:para>
</db:td>
<db:td>
<db:para>Media controls are shown.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaCanPrint</db:para>
</db:td>
<db:td>
<db:para>Media is printable.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaCanRotate</db:para>
</db:td>
<db:td>
<db:para>Media is rotatable.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in QtWebEngine 1.7.</db:para>
</db:section>
<db:section xml:id="mediaType-prop">
<db:title>[read-only] mediaType : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>mediaType</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The type of the media element or <db:code>MediaTypeNone</db:code> if the selected web page content is not a media element.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaTypeNone</db:para>
</db:td>
<db:td>
<db:para>Not a media.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaTypeImage</db:para>
</db:td>
<db:td>
<db:para>An image.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaTypeVideo</db:para>
</db:td>
<db:td>
<db:para>A video.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaTypeAudio</db:para>
</db:td>
<db:td>
<db:para>An audio element.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaTypeCanvas</db:para>
</db:td>
<db:td>
<db:para>A canvas.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaTypeFile</db:para>
</db:td>
<db:td>
<db:para>A file.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ContextMenuRequest.MediaTypePlugin</db:para>
</db:td>
<db:td>
<db:para>A plugin.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="mediaUrl-prop">
<db:title>[read-only] mediaUrl : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>mediaUrl</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The URL of media if the selected web content is a media element.</db:para>
</db:section>
<db:section xml:id="misspelledWord-prop">
<db:title>[read-only] misspelledWord : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>misspelledWord</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If the context is a word considered misspelled by the spell-checker, returns the misspelled word.</db:para>
</db:section>
<db:section xml:id="position-prop">
<db:title>[read-only] position : point</db:title>
<db:fieldsynopsis>
<db:type>point</db:type>
<db:varname>position</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The position of the user action from where the context menu request originates.</db:para>
</db:section>
<db:section xml:id="selectedText-prop">
<db:title>[read-only] selectedText : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>selectedText</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The selected text the context menu was created for.</db:para>
</db:section>
<db:section xml:id="spellCheckerSuggestions-prop">
<db:title>[read-only] spellCheckerSuggestions : stringlist</db:title>
<db:fieldsynopsis>
<db:type>stringlist</db:type>
<db:varname>spellCheckerSuggestions</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If the context is a word considered misspelled by the spell-checker, returns a list of suggested replacements.</db:para>
</db:section>
</db:section>
</db:article>
