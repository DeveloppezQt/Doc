<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNearFieldTarget Class</db:title>
<db:productname>QtNfc</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt NFC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link> class provides an interface for communicating with a target device.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNearFieldTarget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Nfc)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Nfc)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += nfc</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNearFieldTarget is part of <db:simplelist><db:member>connectivity-nfc</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link> provides a generic interface for communicating with an NFC target device. Both NFC Forum devices and NFC Forum Tag targets are supported by this class. All target specific classes subclass this class.</db:para>
<db:para>The <db:link xlink:href="qnearfieldtarget.xml#type">type</db:link>() function can be used to get the type of the target device. The <db:link xlink:href="qnearfieldtarget.xml#uid">uid</db:link>() function returns the unique identifier of the target. The <db:link xlink:href="qnearfieldtarget.xml#AccessMethod-enum">AccessMethods</db:link> flags returns from the <db:link xlink:href="qnearfieldtarget.xml#accessMethods">accessMethods</db:link>() function can be tested to determine which access methods are supported by the target.</db:para>
<db:para>If the target supports <db:link xlink:href="qnearfieldtarget.xml#AccessMethod-enum">NdefAccess</db:link>, <db:link xlink:href="qnearfieldtarget.xml#hasNdefMessage">hasNdefMessage</db:link>() can be called to test if the target has a stored NDEF message, <db:link xlink:href="qnearfieldtarget.xml#readNdefMessages">readNdefMessages</db:link>() and <db:link xlink:href="qnearfieldtarget.xml#writeNdefMessages">writeNdefMessages</db:link>() functions can be used to get and set the NDEF message.</db:para>
<db:para>If the target supports <db:link xlink:href="qnearfieldtarget.xml#AccessMethod-enum">TagTypeSpecificAccess</db:link>, <db:link xlink:href="qnearfieldtarget.xml#sendCommand">sendCommand</db:link>() can be used to send a single proprietary command to the target and retrieve the response.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AccessMethod-enum">
<db:title>enum QNearFieldTarget::AccessMethod</db:title>
<db:bridgehead renderas="sect2">flags QNearFieldTarget::AccessMethods</db:bridgehead>
<db:enumsynopsis>
<db:enumname>AccessMethod</db:enumname>
<db:enumitem>
<db:enumidentifier>UnknownAccess</db:enumidentifier>
<db:enumvalue>0x00</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NdefAccess</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TagTypeSpecificAccess</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnyAccess</db:enumidentifier>
<db:enumvalue>0xff</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QNearFieldTarget::AccessMethods</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes the access methods a near field target supports.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::UnknownAccess</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
<db:td>
<db:para>The target supports an unknown access type.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::NdefAccess</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>The target supports reading and writing NDEF messages using <db:link xlink:href="qnearfieldtarget.xml#readNdefMessages">readNdefMessages</db:link>() and <db:link xlink:href="qnearfieldtarget.xml#writeNdefMessages">writeNdefMessages</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::TagTypeSpecificAccess</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>The target supports sending tag type specific commands using <db:link xlink:href="qnearfieldtarget.xml#sendCommand">sendCommand</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::AnyAccess</db:code></db:para>
</db:td>
<db:td><db:code>0xff</db:code></db:td>
<db:td>
<db:para>The target supports any of the known access types.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>AccessMethods</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;AccessMethod&gt;. </db:code>It stores an OR combination of <db:code>AccessMethod</db:code> values.</db:para>
</db:section>
<db:section xml:id="Error-enum">
<db:title>enum QNearFieldTarget::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnsupportedError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TargetOutOfRangeError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoResponseError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChecksumMismatchError</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InvalidParametersError</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConnectionError</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NdefReadError</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NdefWriteError</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CommandError</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TimeoutError</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the error codes that a near field target reports.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An unidentified error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::UnsupportedError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The requested operation is unsupported by this near field target.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::TargetOutOfRangeError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The target is no longer within range.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::NoResponseError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The target did not respond.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::ChecksumMismatchError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The checksum has detected a corrupted response.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::InvalidParametersError</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Invalid parameters were passed to a tag type specific function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::ConnectionError</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Failed to connect to the target.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::NdefReadError</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Failed to read NDEF messages from the target.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::NdefWriteError</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Failed to write NDEF messages to the target.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::CommandError</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Failed to send a command to the target.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::TimeoutError</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>The request could not be completed within the time specified in <db:link xlink:href="qnearfieldtarget.xml#waitForRequestCompleted">waitForRequestCompleted</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Type-enum">
<db:title>enum QNearFieldTarget::Type</db:title>
<db:enumsynopsis>
<db:enumname>Type</db:enumname>
<db:enumitem>
<db:enumidentifier>ProprietaryTag</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NfcTagType1</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NfcTagType2</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NfcTagType3</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NfcTagType4</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NfcTagType4A</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NfcTagType4B</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MifareTag</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the type of tag the target is detected as.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::ProprietaryTag</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>An unidentified proprietary target tag.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::NfcTagType1</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An NFC tag type 1 target.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::NfcTagType2</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An NFC tag type 2 target.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::NfcTagType3</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An NFC tag type 3 target.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::NfcTagType4</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>An NFC tag type 4 target. This value is used if the NfcTagType4 cannot be further refined by NfcTagType4A or NfcTagType4B below.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::NfcTagType4A</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>An NFC tag type 4 target based on ISO/IEC 14443-3A.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::NfcTagType4B</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>An NFC tag type 4 target based on ISO/IEC 14443-3B.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link></db:emphasis>::MifareTag</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>A Mifare target.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNearFieldTarget">
<db:title>[explicit] QNearFieldTarget::QNearFieldTarget(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QNearFieldTarget</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QNearFieldTarget(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new near field target with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNearFieldTarget">
<db:title>[virtual] QNearFieldTarget::~QNearFieldTarget()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QNearFieldTarget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QNearFieldTarget()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the near field target.</db:para>
</db:section>
<db:section xml:id="accessMethods">
<db:title>QNearFieldTarget::AccessMethods QNearFieldTarget::accessMethods() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNearFieldTarget::AccessMethods</db:type>
<db:methodname>accessMethods</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNearFieldTarget::AccessMethods accessMethods() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the access methods support by this near field target.</db:para>
</db:section>
<db:section xml:id="disconnect">
<db:title>[since 5.9] bool QNearFieldTarget::disconnect()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>disconnect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool disconnect()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes the connection to the target to enable communication with the target from a different instance. The connection will also be closed, when the <db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link> is destroyed. A connection to the target device is (re)created to process a command or read/write a NDEF messages.</db:para>
<db:para>Returns <db:code>true</db:code> only if an existing connection was successfully closed; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
</db:section>
<db:section xml:id="disconnected">
<db:title>void QNearFieldTarget::disconnected()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>disconnected</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void disconnected()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the near field target moves out of proximity.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>void QNearFieldTarget::error(QNearFieldTarget::Error <db:emphasis>error</db:emphasis>, const QNearFieldTarget::RequestId &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>error</db:methodname>
<db:methodparam>
<db:type>QNearFieldTarget::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QNearFieldTarget::RequestId &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void error(QNearFieldTarget::Error error, const QNearFieldTarget::RequestId &amp;id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an error occurs while processing request <db:code role="parameter">id</db:code>. The <db:code role="parameter">error</db:code> parameter describes the error.</db:para>
</db:section>
<db:section xml:id="hasNdefMessage">
<db:title>bool QNearFieldTarget::hasNdefMessage()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>hasNdefMessage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasNdefMessage()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if at least one NDEF message is stored on the near field target; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="maxCommandLength">
<db:title>[since 5.9] int QNearFieldTarget::maxCommandLength() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maxCommandLength</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int maxCommandLength() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum number of bytes that can be sent with <db:link xlink:href="qnearfieldtarget.xml#sendCommand">sendCommand</db:link>. 0 will be returned if the target does not support sending tag type specific commands.</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnearfieldtarget.xml#sendCommand">sendCommand</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ndefMessageRead">
<db:title>void QNearFieldTarget::ndefMessageRead(const QNdefMessage &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ndefMessageRead</db:methodname>
<db:methodparam>
<db:type>const QNdefMessage &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void ndefMessageRead(const QNdefMessage &amp;message)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a complete NDEF <db:code role="parameter">message</db:code> has been read from the target.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnearfieldtarget.xml#readNdefMessages">readNdefMessages</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readNdefMessages">
<db:title>QNearFieldTarget::RequestId QNearFieldTarget::readNdefMessages()</db:title>
<db:methodsynopsis>
<db:type>QNearFieldTarget::RequestId</db:type>
<db:methodname>readNdefMessages</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNearFieldTarget::RequestId readNdefMessages()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts reading NDEF messages stored on the near field target. Returns a request id which can be used to track the completion status of the request. An invalid request id will be returned if the target does not support reading NDEF messages.</db:para>
<db:para>An <db:link xlink:href="qnearfieldtarget.xml#ndefMessageRead">ndefMessageRead</db:link>() signal will be emitted for each NDEF message. The <db:link xlink:href="qnearfieldtarget.xml#requestCompleted">requestCompleted</db:link>() signal will be emitted was all NDEF messages have been read. The <db:link xlink:href="qnearfieldtarget.xml#error">error</db:link>() signal is emitted if an error occurs.</db:para>
<db:note>
<db:para>An attempt to read an NDEF message from a tag, that is in INITIALIZED state as defined by NFC Forum, will fail with the <db:link xlink:href="qnearfieldtarget.xml#Error-enum">NdefReadError</db:link>, as the tag is formatted to support NDEF but does not contain a message yet.</db:para>
</db:note>
</db:section>
<db:section xml:id="requestCompleted">
<db:title>void QNearFieldTarget::requestCompleted(const QNearFieldTarget::RequestId &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>requestCompleted</db:methodname>
<db:methodparam>
<db:type>const QNearFieldTarget::RequestId &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestCompleted(const QNearFieldTarget::RequestId &amp;id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a request <db:code role="parameter">id</db:code> completes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnearfieldtarget.xml#sendCommand">sendCommand</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestResponse">
<db:title>QVariant QNearFieldTarget::requestResponse(const QNearFieldTarget::RequestId &amp;<db:emphasis>id</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>requestResponse</db:methodname>
<db:methodparam>
<db:type>const QNearFieldTarget::RequestId &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant requestResponse(const QNearFieldTarget::RequestId &amp;id) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the decoded response for request <db:code role="parameter">id</db:code>. If the request is unknown or has not yet been completed an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> is returned.</db:para>
</db:section>
<db:section xml:id="sendCommand">
<db:title>QNearFieldTarget::RequestId QNearFieldTarget::sendCommand(const QByteArray &amp;<db:emphasis>command</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QNearFieldTarget::RequestId</db:type>
<db:methodname>sendCommand</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>command</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNearFieldTarget::RequestId sendCommand(const QByteArray &amp;command)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends <db:code role="parameter">command</db:code> to the near field target. Returns a request id which can be used to track the completion status of the request. An invalid request id will be returned if the target does not support sending tag type specific commands.</db:para>
<db:para>The <db:link xlink:href="qnearfieldtarget.xml#requestCompleted">requestCompleted</db:link>() signal will be emitted on successful completion of the request; otherwise the <db:link xlink:href="qnearfieldtarget.xml#error">error</db:link>() signal will be emitted.</db:para>
<db:para>Once the request completes successfully the response can be retrieved from the <db:link xlink:href="qnearfieldtarget.xml#requestResponse">requestResponse</db:link>() function. The response of this request will be a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnearfieldtarget.xml#requestCompleted">requestCompleted</db:link>()</db:member>
<db:member><db:link xlink:href="qnearfieldtarget.xml#waitForRequestCompleted">waitForRequestCompleted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>QNearFieldTarget::Type QNearFieldTarget::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNearFieldTarget::Type</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNearFieldTarget::Type type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of tag type of this near field target.</db:para>
</db:section>
<db:section xml:id="uid">
<db:title>QByteArray QNearFieldTarget::uid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>uid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray uid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the UID of the near field target.</db:para>
</db:section>
<db:section xml:id="waitForRequestCompleted">
<db:title>bool QNearFieldTarget::waitForRequestCompleted(const QNearFieldTarget::RequestId &amp;<db:emphasis>id</db:emphasis>, int <db:emphasis>msecs</db:emphasis> = 5000)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>waitForRequestCompleted</db:methodname>
<db:methodparam>
<db:type>const QNearFieldTarget::RequestId &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msecs</db:parameter>
<db:initializer>5000</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool waitForRequestCompleted(const QNearFieldTarget::RequestId &amp;id, int msecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Waits up to <db:code role="parameter">msecs</db:code> milliseconds for the request <db:code role="parameter">id</db:code> to complete. Returns <db:code>true</db:code> if the request completes successfully and the requestCompeted() signal is emitted; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="writeNdefMessages">
<db:title>QNearFieldTarget::RequestId QNearFieldTarget::writeNdefMessages(const QList&lt;QNdefMessage&gt; &amp;<db:emphasis>messages</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QNearFieldTarget::RequestId</db:type>
<db:methodname>writeNdefMessages</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QNdefMessage&gt; &amp;</db:type>
<db:parameter>messages</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNearFieldTarget::RequestId writeNdefMessages(const QList&lt;QNdefMessage&gt; &amp;messages)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the NDEF messages in <db:code role="parameter">messages</db:code> to the target. Returns a request id which can be used to track the completion status of the request. An invalid request id will be returned if the target does not support reading NDEF messages.</db:para>
<db:para>The <db:link xlink:href="qnearfieldtarget.xml#requestCompleted">requestCompleted</db:link>() signal will be emitted when the write operation completes successfully; otherwise the <db:link xlink:href="qnearfieldtarget.xml#error">error</db:link>() signal is emitted.</db:para>
</db:section>
</db:section>
</db:article>
