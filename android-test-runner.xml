<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The androidtestrunner Tool</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Overview of the androidtestrunner tool for running Qt tests on Android.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>The androidtestrunner tool runs Qt tests on Android devices and emulators. It automates the steps required to execute tests, including managing APK installation, test execution, and retrieving results.</db:para>
<db:para>Before using the androidtestrunner, ensure you have configured your Qt test project with CMake or qmake.</db:para>
</db:section>
<db:section xml:id="how-it-works">
<db:title>How it works</db:title>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Firstly, it begins by executing the APK build command to generate the required APK for the test.</db:para>
</db:listitem>
<db:listitem>
<db:para>Following this, it installs the test app on the target device and starts the test app, setting the testing process in motion.</db:para>
</db:listitem>
<db:listitem>
<db:para>The test results are written to the app’s data directory on the device, ensuring that comprehensive test outputs are captured.</db:para>
</db:listitem>
<db:listitem>
<db:para>Once the tests conclude, the runner writes an exit code file beside the result files.</db:para>
</db:listitem>
<db:listitem>
<db:para>At this stage, the androidtestrunner retrieves these result files from the device, examining the exit code for failures.</db:para>
</db:listitem>
<db:listitem>
<db:para>If issues are detected, it immediately prints the app’s logcat logs, including any potential crash stack traces, which are beautified to reveal file names and line numbers for each frame. Additionally, it captures and reports Application Not Responding (ANR) logs if such events occur during the test execution.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>To enhance the integration experience, the test runner propagates QT or QTEST environment variables from the host environment of the test runner process to the app, ensuring consistency and a seamless testing workflow.</db:para>
</db:section>
<db:section xml:id="running-tests-with-the-test-wrapper">
<db:title>Running tests with the test wrapper</db:title>
<db:para>Here is an example that runs the tst_android test while running it on a specific emulator instance, passing an environment variable and executing only testAssets test case:</db:para>
<db:programlisting language="cpp" role="bad">ANDROID_SERIAL=emulator-5554 QT_DEBUG_PLUGINS=1 ./tst_android testAssets
</db:programlisting>
</db:section>
<db:section xml:id="retrieving-results">
<db:title>Retrieving results</db:title>
<db:para>By default, and if the stdout test output is not explicitly disabled, the test results are printed to the host as the test is executing. After running the tests, any explicitly requested test files are pulled into the specified output path with their respective formats.</db:para>
<db:para>For comprehensive details about Qt Test Framework, see <db:link xlink:href="">Qt Test Overview</db:link>.</db:para>
</db:section>
<db:section xml:id="how-to-use-it">
<db:title>How to use it</db:title>
<db:para>The basic syntax to run the androidtestrunner is as follows:</db:para>
<db:programlisting language="cpp" role="bad">androidtestrunner [ARGUMENTS] -- [TESTARGS]
</db:programlisting>
<db:para>To run the test on a specific device/emulator, use the adb environment varialbe ANDROID_SERIAL or ANDROID_DEVICE_SERIAL.</db:para>
<db:section xml:id="mandatory-arguments">
<db:title>Mandatory Arguments</db:title>
<db:para>The test runner always expects the following arguments to be passed:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>--path &lt;build-path&gt;: The path where the Android Gradle package is built, commonly under android-build-testname.</db:para>
</db:listitem>
<db:listitem>
<db:para>--make &lt;build-command&gt;: The command used to build the test APK, for example, cmake --build &lt;build-dir&gt; --target &lt;target&gt;_make_apk.</db:para>
<db:note>
<db:para>Pass this argument quoted so it's not treated as multiple arguments of the test runner but as the value of --make argument.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>--apk &lt;apk-path&gt;: The Path to the test APK that is generated by the build command and that is installed on the device.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="optional-arguments">
<db:title>Optional arguments</db:title>
<db:para>You can also pass the following optional arguments:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>--adb &lt;adb-path&gt;: Specifies a custom ADB command path. Defaults to the adb path found in the system's $PATH.</db:para>
</db:listitem>
<db:listitem>
<db:para>--activity &lt;activity-name&gt;: Specifies a custom activity to run. Defaults to the first activity defined in the AndroidManifest.xml.</db:para>
</db:listitem>
<db:listitem>
<db:para>--timeout &lt;seconds&gt;: Sets the timeout for running the test. Defaults to 600 seconds (10 minutes).</db:para>
</db:listitem>
<db:listitem>
<db:para>--skip-install-root: Avoids appending INSTALL_ROOT to the make command and is mainly useful when using qmake.</db:para>
</db:listitem>
<db:listitem>
<db:para>--show-logcat: Prints the logcat output to stdout regardless of test failure. Logs are printed in case of failure and can include crash stacktraces or ANR events.</db:para>
</db:listitem>
<db:listitem>
<db:para>--ndk-stack &lt;command-path&gt;: Specifies the path to the <db:link xlink:href="https://developer.android.com/ndk/guides/ndk-stack">ndk-stack</db:link> tool for symbolizing crash stack traces. Defaults to the tool path found under $ANDROID_NDK_ROOT.</db:para>
</db:listitem>
<db:listitem>
<db:para>--pre-test-adb-command &lt;command&gt;: call the adb &lt;command&gt; after installation and before the test run.</db:para>
</db:listitem>
<db:listitem>
<db:para>-- &lt;arguments&gt;: Passes anything after the dashes as test arguments.</db:para>
</db:listitem>
<db:listitem>
<db:para>--verbose: Prints verbose output.</db:para>
</db:listitem>
<db:listitem>
<db:para>--help: Displays the help information.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="example-usage">
<db:title>Example usage</db:title>
<db:para>Here is an example that runs the tst_android test, executing only testAssets test case:</db:para>
<db:programlisting language="cpp" role="bad">androidtestrunner \
    --path ~/tst_android/build/android-build-tst_openssl \
    --make &quot;cmake --build ~/tst_android/build --target apk&quot; \
    --apk ~/tst_android/build/android-build-tst_openssl/tst_openssl.apk \
    --skip-install-root \
    testAssets
</db:programlisting>
</db:section>
</db:section>
</db:article>
