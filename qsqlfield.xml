<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSqlField Class</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsqlfield.xml">QSqlField</db:link> class manipulates the fields in SQL database tables and views.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSqlField</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sql</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSqlField is part of <db:simplelist><db:member><db:link xlink:href="database.xml">Database Classes</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsqlfield.xml">QSqlField</db:link> represents the characteristics of a single column in a database table or view, such as the data type and column name. A field also contains the value of the database column, which can be viewed or changed.</db:para>
<db:para>Field data values are stored as QVariants. Using an incompatible type is not permitted. For example:</db:para>
<db:programlisting language="cpp">    QSqlField field(&quot;age&quot;, QVariant::Int);
    field.setValue(QPixmap());  // WRONG
</db:programlisting>
<db:para>However, the field will attempt to cast certain data types to the field data type where possible:</db:para>
<db:programlisting language="cpp">    QSqlField field(&quot;age&quot;, QVariant::Int);
    field.setValue(QString(&quot;123&quot;));  // casts QString to int
</db:programlisting>
<db:para><db:link xlink:href="qsqlfield.xml">QSqlField</db:link> objects are rarely created explicitly in application code. They are usually accessed indirectly through <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link>s that already contain a list of fields. For example:</db:para>
<db:programlisting language="cpp">    QSqlQuery query;
    ...
    QSqlRecord record = query.record();
    QSqlField field = record.field(&quot;country&quot;);
</db:programlisting>
<db:para>A <db:link xlink:href="qsqlfield.xml">QSqlField</db:link> object can provide some meta-data about the field, for example, its <db:link xlink:href="qsqlfield.xml#name">name</db:link>(), variant <db:link xlink:href="qsqlfield.xml#type">type</db:link>(), <db:link xlink:href="qsqlfield.xml#length">length</db:link>(), <db:link xlink:href="qsqlfield.xml#precision">precision</db:link>(), <db:link xlink:href="qsqlfield.xml#defaultValue">defaultValue</db:link>(), typeID(), and its <db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link>(), <db:link xlink:href="qsqlfield.xml#isGenerated">isGenerated</db:link>() and <db:link xlink:href="qsqlfield.xml#isReadOnly">isReadOnly</db:link>(). The field's data can be checked to see if it <db:link xlink:href="qsqlfield.xml#isNull">isNull</db:link>(), and its <db:link xlink:href="qsqlfield.xml#value">value</db:link>() retrieved. When editing the data can be set with <db:link xlink:href="qsqlfield.xml#setValue">setValue</db:link>() or set to NULL with <db:link xlink:href="qsqlfield.xml#clear">clear</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RequiredStatus-enum">
<db:title>enum QSqlField::RequiredStatus</db:title>
<db:para>Specifies whether the field is required or optional.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml">QSqlField</db:link></db:emphasis>::Required</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The field must be specified when inserting records.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml">QSqlField</db:link></db:emphasis>::Optional</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The fields doesn't have to be specified when inserting records.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml">QSqlField</db:link></db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>The database driver couldn't determine whether the field is required or optional.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSqlField-1">
<db:title>[explicit] QSqlField::QSqlField(const QString &amp;<db:emphasis>fieldName</db:emphasis> = QString(), QVariant::Type <db:emphasis>type</db:emphasis> = QVariant::Invalid)</db:title>
<db:para>Constructs an empty field called <db:code role="parameter">fieldName</db:code> of variant type <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setRequiredStatus">setRequiredStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setLength">setLength</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setPrecision">setPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setDefaultValue">setDefaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setGenerated">setGenerated</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setReadOnly">setReadOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSqlField">
<db:title>QSqlField::QSqlField(const QSqlField &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSqlField">
<db:title>[noexcept] QSqlField::~QSqlField()</db:title>
<db:para>Destroys the object and frees any allocated resources.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QSqlField::clear()</db:title>
<db:para>Clears the value of the field and sets it to NULL. If the field is read-only, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setValue">setValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#isReadOnly">isReadOnly</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultValue">
<db:title>QVariant QSqlField::defaultValue() const</db:title>
<db:para>Returns the field's default value (which may be NULL).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setDefaultValue">setDefaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#precision">precision</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#isGenerated">isGenerated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAutoValue">
<db:title>bool QSqlField::isAutoValue() const</db:title>
<db:para>Returns <db:code>true</db:code> if the value is auto-generated by the database, for example auto-increment primary key values.</db:para>
<db:note>
<db:para>When using the ODBC driver, due to limitations in the ODBC API, the <db:code>isAutoValue()</db:code> field is only populated in a <db:link xlink:href="qsqlfield.xml">QSqlField</db:link> resulting from a <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link> obtained by executing a <db:code>SELECT</db:code> query. It is <db:code>false</db:code> in a <db:link xlink:href="qsqlfield.xml">QSqlField</db:link> resulting from a <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link> returned from <db:link xlink:href="qsqldatabase.xml#record">QSqlDatabase::record</db:link>() or <db:link xlink:href="qsqldatabase.xml#primaryIndex">QSqlDatabase::primaryIndex</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setAutoValue">setAutoValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isGenerated">
<db:title>bool QSqlField::isGenerated() const</db:title>
<db:para>Returns <db:code>true</db:code> if the field is generated; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setGenerated">setGenerated</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#precision">precision</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#defaultValue">defaultValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QSqlField::isNull() const</db:title>
<db:para>Returns <db:code>true</db:code> if the field's value is NULL; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isReadOnly">
<db:title>bool QSqlField::isReadOnly() const</db:title>
<db:para>Returns <db:code>true</db:code> if the field's value is read-only; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setReadOnly">setReadOnly</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#precision">precision</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#defaultValue">defaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#isGenerated">isGenerated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QSqlField::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if the field's variant type is valid; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="length">
<db:title>int QSqlField::length() const</db:title>
<db:para>Returns the field's length.</db:para>
<db:para>If the returned value is negative, it means that the information is not available from the database.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setLength">setLength</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#precision">precision</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#defaultValue">defaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#isGenerated">isGenerated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QString QSqlField::name() const</db:title>
<db:para>Returns the name of the field.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setName">setName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="precision">
<db:title>int QSqlField::precision() const</db:title>
<db:para>Returns the field's precision; this is only meaningful for numeric types.</db:para>
<db:para>If the returned value is negative, it means that the information is not available from the database.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setPrecision">setPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#defaultValue">defaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#isGenerated">isGenerated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requiredStatus">
<db:title>QSqlField::RequiredStatus QSqlField::requiredStatus() const</db:title>
<db:para>Returns <db:code>true</db:code> if this is a required field; otherwise returns <db:code>false</db:code>. An <db:code>INSERT</db:code> will fail if a required field does not have a value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setRequiredStatus">setRequiredStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#precision">precision</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#defaultValue">defaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#isGenerated">isGenerated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAutoValue">
<db:title>void QSqlField::setAutoValue(bool <db:emphasis>autoVal</db:emphasis>)</db:title>
<db:para>Marks the field as an auto-generated value if <db:code role="parameter">autoVal</db:code> is true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#isAutoValue">isAutoValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultValue">
<db:title>void QSqlField::setDefaultValue(const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the default value used for this field to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#defaultValue">defaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setType">setType</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setRequiredStatus">setRequiredStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setLength">setLength</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setPrecision">setPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setGenerated">setGenerated</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setReadOnly">setReadOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGenerated">
<db:title>void QSqlField::setGenerated(bool <db:emphasis>gen</db:emphasis>)</db:title>
<db:para>Sets the generated state. If <db:code role="parameter">gen</db:code> is false, no SQL will be generated for this field; otherwise, Qt classes such as <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> and <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> will generate SQL for this field.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#isGenerated">isGenerated</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setType">setType</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setRequiredStatus">setRequiredStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setLength">setLength</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setPrecision">setPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setDefaultValue">setDefaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setReadOnly">setReadOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLength">
<db:title>void QSqlField::setLength(int <db:emphasis>fieldLength</db:emphasis>)</db:title>
<db:para>Sets the field's length to <db:code role="parameter">fieldLength</db:code>. For strings this is the maximum number of characters the string can hold; the meaning varies for other types.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setType">setType</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setRequiredStatus">setRequiredStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setPrecision">setPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setDefaultValue">setDefaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setGenerated">setGenerated</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setReadOnly">setReadOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setName">
<db:title>void QSqlField::setName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Sets the name of the field to <db:code role="parameter">name</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrecision">
<db:title>void QSqlField::setPrecision(int <db:emphasis>precision</db:emphasis>)</db:title>
<db:para>Sets the field's <db:code role="parameter">precision</db:code>. This only affects numeric fields.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#precision">precision</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setType">setType</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setRequiredStatus">setRequiredStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setLength">setLength</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setDefaultValue">setDefaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setGenerated">setGenerated</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setReadOnly">setReadOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setReadOnly">
<db:title>void QSqlField::setReadOnly(bool <db:emphasis>readOnly</db:emphasis>)</db:title>
<db:para>Sets the read only flag of the field's value to <db:code role="parameter">readOnly</db:code>. A read-only field cannot have its value set with <db:link xlink:href="qsqlfield.xml#setValue">setValue</db:link>() and cannot be cleared to NULL with <db:link xlink:href="qsqlfield.xml#clear">clear</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#isReadOnly">isReadOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRequired">
<db:title>void QSqlField::setRequired(bool <db:emphasis>required</db:emphasis>)</db:title>
<db:para>Sets the required status of this field to <db:link xlink:href="qsqlfield.xml#RequiredStatus-enum">Required</db:link> if <db:code role="parameter">required</db:code> is true; otherwise sets it to <db:link xlink:href="qsqlfield.xml#RequiredStatus-enum">Optional</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setRequiredStatus">setRequiredStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRequiredStatus">
<db:title>void QSqlField::setRequiredStatus(QSqlField::RequiredStatus <db:emphasis>required</db:emphasis>)</db:title>
<db:para>Sets the required status of this field to <db:code role="parameter">required</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setType">setType</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setLength">setLength</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setPrecision">setPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setDefaultValue">setDefaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setGenerated">setGenerated</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setReadOnly">setReadOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setType">
<db:title>void QSqlField::setType(QVariant::Type <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Set's the field's variant type to <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setRequiredStatus">setRequiredStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setLength">setLength</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setPrecision">setPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setDefaultValue">setDefaultValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setGenerated">setGenerated</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#setReadOnly">setReadOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setValue">
<db:title>void QSqlField::setValue(const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the value of the field to <db:code role="parameter">value</db:code>. If the field is read-only (<db:link xlink:href="qsqlfield.xml#isReadOnly">isReadOnly</db:link>() returns <db:code>true</db:code>), nothing happens.</db:para>
<db:para>If the data type of <db:code role="parameter">value</db:code> differs from the field's current data type, an attempt is made to cast it to the proper type. This preserves the data type of the field in the case of assignment, e.g. a <db:link xlink:href="qstring.xml">QString</db:link> to an integer data type.</db:para>
<db:para>To set the value to NULL, use <db:link xlink:href="qsqlfield.xml#clear">clear</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#isReadOnly">isReadOnly</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#defaultValue">defaultValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>QVariant::Type QSqlField::type() const</db:title>
<db:para>Returns the field's type as stored in the database. Note that the actual value might have a different type, Numerical values that are too large to store in a long int or double are usually stored as strings to prevent precision loss.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setType">setType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>QVariant QSqlField::value() const</db:title>
<db:para>Returns the value of the field as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>Use <db:link xlink:href="qsqlfield.xml#isNull">isNull</db:link>() to check if the field's value is NULL.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setValue">setValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QSqlField::operator!=(const QSqlField &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the field is unequal to <db:code role="parameter">other</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QSqlField &amp;QSqlField::operator=(const QSqlField &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Sets the field equal to <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QSqlField::operator==(const QSqlField &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the field is equal to <db:code role="parameter">other</db:code>; otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
