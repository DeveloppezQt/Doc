<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSqlField Class</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsqlfield.xml">QSqlField</db:link> class manipulates the fields in SQL database tables and views.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSqlField</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Sql)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Sql)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sql</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSqlField is part of <db:simplelist><db:member><db:link xlink:href="database.xml">Database Classes</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsqlfield.xml">QSqlField</db:link> represents the characteristics of a single column in a database table or view, such as the data type and column name. A field also contains the value of the database column, which can be viewed or changed.</db:para>
<db:para>Field data values are stored as QVariants. Using an incompatible type is not permitted. For example:</db:para>
<db:programlisting language="cpp">    QSqlField field(&quot;age&quot;, QMetaType::fromType&lt;int&gt;());
    field.setValue(QPixmap());  // WRONG
</db:programlisting>
<db:para>However, the field will attempt to cast certain data types to the field data type where possible:</db:para>
<db:programlisting language="cpp">    QSqlField field(&quot;age&quot;, QMetaType::fromType&lt;int&gt;());
    field.setValue(QString(&quot;123&quot;));  // casts QString to int
</db:programlisting>
<db:para><db:link xlink:href="qsqlfield.xml">QSqlField</db:link> objects are rarely created explicitly in application code. They are usually accessed indirectly through <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link>s that already contain a list of fields. For example:</db:para>
<db:programlisting language="cpp">    QSqlQuery query;
    ...
    QSqlRecord record = query.record();
    QSqlField field = record.field(&quot;country&quot;);
</db:programlisting>
<db:para>A <db:link xlink:href="qsqlfield.xml">QSqlField</db:link> object can provide some meta-data about the field, for example, its <db:link xlink:href="qsqlfield.xml#name">name</db:link>(), variant type(), <db:link xlink:href="qsqlfield.xml#length">length</db:link>(), <db:link xlink:href="qsqlfield.xml#precision">precision</db:link>(), <db:link xlink:href="qsqlfield.xml#defaultValue">defaultValue</db:link>(), typeID(), and its <db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link>(), <db:link xlink:href="qsqlfield.xml#isGenerated">isGenerated</db:link>() and <db:link xlink:href="qsqlfield.xml#isReadOnly">isReadOnly</db:link>(). The field's data can be checked to see if it <db:link xlink:href="qsqlfield.xml#isNull">isNull</db:link>(), and its <db:link xlink:href="qsqlfield.xml#value">value</db:link>() retrieved. When editing the data can be set with <db:link xlink:href="qsqlfield.xml#setValue">setValue</db:link>() or set to NULL with <db:link xlink:href="qsqlfield.xml#clear">clear</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RequiredStatus-enum">
<db:title>enum QSqlField::RequiredStatus</db:title>
<db:para>Specifies whether the field is required or optional.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml">QSqlField</db:link></db:emphasis>::Required</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The field must be specified when inserting records.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml">QSqlField</db:link></db:emphasis>::Optional</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The fields doesn't have to be specified when inserting records.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml">QSqlField</db:link></db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>The database driver couldn't determine whether the field is required or optional.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoValue-prop">
<db:title>[since 6.8] autoValue : bool</db:title>
<db:para>If the value is auto-generated by the database, for example auto-increment primary key values, this value is <db:code>true</db:code>.</db:para>
<db:note>
<db:para>When using the ODBC driver, due to limitations in the ODBC API, the <db:code>isAutoValue()</db:code> field is only populated in a <db:link xlink:href="qsqlfield.xml">QSqlField</db:link> resulting from a <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link> obtained by executing a <db:code>SELECT</db:code> query. It is <db:code>false</db:code> in a <db:link xlink:href="qsqlfield.xml">QSqlField</db:link> resulting from a <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link> returned from <db:link xlink:href="qsqldatabase.xml#record">QSqlDatabase::record</db:link>() or <db:link xlink:href="qsqldatabase.xml#primaryIndex">QSqlDatabase::primaryIndex</db:link>().</db:para>
</db:note>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#isAutoValue">isAutoValue</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#setAutoValue">setAutoValue</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>autoVal</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="defaultValue-prop">
<db:title>[since 6.8] defaultValue : QVariant</db:title>
<db:para>This property holds the default value for this field. Only some database drivers supports this property. Currently those are SQLite, PostgreSQL, Oracle and MySQL/MariaDB.</db:para>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvariant.xml">QVariant</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#defaultValue">defaultValue</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#setDefaultValue">setDefaultValue</db:link></db:emphasis>(const <db:type><db:link xlink:href="qvariant.xml">QVariant</db:link></db:type> &amp;<db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="generated-prop">
<db:title>[since 6.8] generated : bool</db:title>
<db:para>This property holds the generated state. If <db:code role="parameter">generated</db:code> is <db:code>false</db:code>, no SQL will be generated for this field; otherwise, Qt classes such as <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> and <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> will generate SQL for this field.</db:para>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#isGenerated">isGenerated</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#setGenerated">setGenerated</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>gen</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="length-prop">
<db:title>[since 6.8] length : int</db:title>
<db:para>This property holds the field's length.</db:para>
<db:para>If the value is negative, it means that the information is not available from the database. For strings this is the maximum number of characters the string can hold; the meaning varies for other types.</db:para>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#length">length</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#setLength">setLength</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>fieldLength</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="metaType-prop">
<db:title>[since 6.8] metaType : QMetaType</db:title>
<db:para>This property holds the field's type as stored in the database. Note that the actual value might have a different type, Numerical values that are too large to store in a long int or double are usually stored as strings to prevent precision loss.</db:para>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmetatype.xml">QMetaType</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#metaType">metaType</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#setMetaType">setMetaType</db:link></db:emphasis>(<db:type><db:link xlink:href="qmetatype.xml">QMetaType</db:link></db:type> <db:emphasis>type</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#numericalPrecisionPolicy">QSqlDatabase::numericalPrecisionPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name-prop">
<db:title>name : QString</db:title>
<db:para>This property holds the name of the field. This can be the column name or a user given alias.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#name">name</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#setName">setName</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>name</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="precision-prop">
<db:title>[since 6.8] precision : int</db:title>
<db:para>This property holds the field's precision; this is only meaningful for numeric types.</db:para>
<db:para>If the returned value is negative, it means that the information is not available from the database.</db:para>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#precision">precision</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#setPrecision">setPrecision</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>precision</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="readOnly-prop">
<db:title>[since 6.8] readOnly : bool</db:title>
<db:para>When this property is <db:code>true</db:code> then this <db:link xlink:href="qsqlfield.xml">QSqlField</db:link> cannot be modified. A read-only field cannot have its value set with <db:link xlink:href="qsqlfield.xml#setValue">setValue</db:link>() and cannot be cleared to NULL with <db:link xlink:href="qsqlfield.xml#clear">clear</db:link>().</db:para>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#isReadOnly">isReadOnly</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#setReadOnly">setReadOnly</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>readOnly</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="requiredStatus-prop">
<db:title>[since 6.8] requiredStatus : RequiredStatus</db:title>
<db:para>This property holds the <db:link xlink:href="qsqlfield.xml#RequiredStatus-enum">RequiredStatus</db:link> of the field. An <db:code>INSERT</db:code> will fail if a required field does not have a value.</db:para>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsqlfield.xml#RequiredStatus-enum">QSqlField::RequiredStatus</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#setRequiredStatus">setRequiredStatus</db:link></db:emphasis>(<db:type><db:link xlink:href="qsqlfield.xml#RequiredStatus-enum">QSqlField::RequiredStatus</db:link></db:type> <db:emphasis>required</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#RequiredStatus-enum">RequiredStatus</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tableName-prop">
<db:title>[since 6.8] tableName : QString</db:title>
<db:para>This property holds the <db:link xlink:href="qsqlfield.xml#tableName">tableName</db:link> of the field.</db:para>
<db:note>
<db:para>When using the QPSQL driver, due to limitations in the libpq library, the <db:code>tableName()</db:code> field is not populated in a <db:link xlink:href="qsqlfield.xml">QSqlField</db:link> resulting from a <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link> obtained by <db:link xlink:href="qsqlquery.xml#record">QSqlQuery::record</db:link>() of a forward-only query.</db:para>
</db:note>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#tableName">tableName</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#setTableName">setTableName</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>tableName</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="value-prop">
<db:title>[since 6.8] value : QVariant</db:title>
<db:para>This property holds the <db:code role="parameter">value</db:code> as a <db:link xlink:href="qvariant.xml">QVariant</db:link></db:para>
<db:para>Setting a <db:code role="parameter">value</db:code> to a read-only <db:link xlink:href="qsqlfield.xml">QSqlField</db:link> is a no-op. If the data type of <db:code role="parameter">value</db:code> differs from the field's current data type, an attempt is made to cast it to the proper type. This preserves the data type of the field in the case of assignment, e.g. a <db:link xlink:href="qstring.xml">QString</db:link> to an integer data type.</db:para>
<db:para>To set the value to NULL, use <db:link xlink:href="qsqlfield.xml#clear">clear</db:link>().</db:para>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvariant.xml">QVariant</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#value">value</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsqlfield.xml#setValue">setValue</db:link></db:emphasis>(const <db:type><db:link xlink:href="qvariant.xml">QVariant</db:link></db:type> &amp;<db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSqlField-2">
<db:title>[explicit, since 6.0] QSqlField::QSqlField(const QString &amp;<db:emphasis>fieldName</db:emphasis> = QString(), QMetaType <db:emphasis>type</db:emphasis> = QMetaType(), const QString &amp;<db:emphasis>table</db:emphasis> = QString())</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Constructs an empty field called <db:code role="parameter">fieldName</db:code> of type <db:code role="parameter">type</db:code> in <db:code role="parameter">table</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="QSqlField">
<db:title>QSqlField::QSqlField(const QSqlField &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSqlField">
<db:title>[noexcept] QSqlField::~QSqlField()</db:title>
<db:para>Destroys the object and frees any allocated resources.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QSqlField::clear()</db:title>
<db:para>Clears the value of the field and sets it to NULL. If the field is read-only, nothing happens.</db:para>
</db:section>
<db:section xml:id="defaultValue">
<db:title>QVariant QSqlField::defaultValue() const</db:title>
<db:para>Sets the value of defaultValue.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsqlfield.xml#defaultValue-prop">defaultValue</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setDefaultValue">setDefaultValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAutoValue">
<db:title>bool QSqlField::isAutoValue() const</db:title>
<db:para>Returns the value of <db:link xlink:href="qsqlfield.xml#autoValue-prop">autoValue</db:link>.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsqlfield.xml#autoValue-prop">autoValue</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="isGenerated">
<db:title>bool QSqlField::isGenerated() const</db:title>
<db:para>Returns the value of <db:link xlink:href="qsqlfield.xml#generated-prop">generated</db:link>.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsqlfield.xml#generated-prop">generated</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QSqlField::isNull() const</db:title>
<db:para>Returns <db:code>true</db:code> if the field's value is NULL; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#value">value</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isReadOnly">
<db:title>bool QSqlField::isReadOnly() const</db:title>
<db:para>Returns the value of <db:link xlink:href="qsqlfield.xml#readOnly-prop">readOnly</db:link>.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsqlfield.xml#readOnly-prop">readOnly</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QSqlField::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if the field's variant type is valid; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="length">
<db:title>int QSqlField::length() const</db:title>
<db:para>Returns the value of length.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsqlfield.xml#length-prop">length</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setLength">setLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="metaType">
<db:title>QMetaType QSqlField::metaType() const</db:title>
<db:para>Returns the value of metaType.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsqlfield.xml#metaType-prop">metaType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setMetaType">setMetaType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QString QSqlField::name() const</db:title>
<db:para>Returns the value of name.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsqlfield.xml#name-prop">name</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setName">setName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="precision">
<db:title>int QSqlField::precision() const</db:title>
<db:para>Returns the value of precision.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsqlfield.xml#precision-prop">precision</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setPrecision">setPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requiredStatus">
<db:title>QSqlField::RequiredStatus QSqlField::requiredStatus() const</db:title>
<db:para>Returns the value of requiredStatus.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsqlfield.xml#requiredStatus-prop">requiredStatus</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setRequiredStatus">setRequiredStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAutoValue">
<db:title>void QSqlField::setAutoValue(bool <db:emphasis>autoVal</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qsqlfield.xml#autoValue-prop">autoValue</db:link> to <db:code role="parameter">autoVal</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsqlfield.xml#autoValue-prop">autoValue</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#isAutoValue">isAutoValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultValue">
<db:title>void QSqlField::setDefaultValue(const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qsqlfield.xml#defaultValue">defaultValue</db:link> to <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsqlfield.xml#defaultValue-prop">defaultValue</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#defaultValue">defaultValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGenerated">
<db:title>void QSqlField::setGenerated(bool <db:emphasis>gen</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qsqlfield.xml#generated-prop">generated</db:link> to <db:code role="parameter">gen</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsqlfield.xml#generated-prop">generated</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#isGenerated">isGenerated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLength">
<db:title>void QSqlField::setLength(int <db:emphasis>fieldLength</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qsqlfield.xml#length">length</db:link> to <db:code role="parameter">fieldLength</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsqlfield.xml#length-prop">length</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMetaType">
<db:title>void QSqlField::setMetaType(QMetaType <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qsqlfield.xml#metaType">metaType</db:link> to <db:code role="parameter">type</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsqlfield.xml#metaType-prop">metaType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#metaType">metaType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setName">
<db:title>void QSqlField::setName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qsqlfield.xml#name">name</db:link> to <db:code role="parameter">name</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsqlfield.xml#name-prop">name</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrecision">
<db:title>void QSqlField::setPrecision(int <db:emphasis>precision</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qsqlfield.xml#precision">precision</db:link> to <db:code role="parameter">precision</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsqlfield.xml#precision-prop">precision</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#precision">precision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setReadOnly">
<db:title>void QSqlField::setReadOnly(bool <db:emphasis>readOnly</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qsqlfield.xml#readOnly-prop">readOnly</db:link> to <db:code role="parameter">readOnly</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsqlfield.xml#readOnly-prop">readOnly</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#isReadOnly">isReadOnly</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRequired">
<db:title>void QSqlField::setRequired(bool <db:emphasis>required</db:emphasis>)</db:title>
<db:para>Sets the required status of this field to <db:link xlink:href="qsqlfield.xml#RequiredStatus-enum">Required</db:link> if <db:code role="parameter">required</db:code> is true; otherwise sets it to <db:link xlink:href="qsqlfield.xml#RequiredStatus-enum">Optional</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRequiredStatus">
<db:title>void QSqlField::setRequiredStatus(QSqlField::RequiredStatus <db:emphasis>required</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link> to <db:code role="parameter">required</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsqlfield.xml#requiredStatus-prop">requiredStatus</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#requiredStatus">requiredStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTableName">
<db:title>void QSqlField::setTableName(const QString &amp;<db:emphasis>tableName</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qsqlfield.xml#tableName">tableName</db:link> to <db:code role="parameter">tableName</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsqlfield.xml#tableName-prop">tableName</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#tableName">tableName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setValue">
<db:title>void QSqlField::setValue(const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets <db:link xlink:href="qsqlfield.xml#value">value</db:link> to <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsqlfield.xml#value-prop">value</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 6.6] void QSqlField::swap(QSqlField &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this field with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="tableName">
<db:title>QString QSqlField::tableName() const</db:title>
<db:para>Returns the tableName.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsqlfield.xml#tableName-prop">tableName</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setTableName">setTableName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>QVariant QSqlField::value() const</db:title>
<db:para>Returns the value of value.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsqlfield.xml#value-prop">value</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setValue">setValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QSqlField::operator!=(const QSqlField &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the field is unequal to <db:code role="parameter">other</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QSqlField &amp;QSqlField::operator=(const QSqlField &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Sets the field equal to <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QSqlField::operator==(const QSqlField &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the field is equal to <db:code role="parameter">other</db:code>; otherwise returns false.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QSqlField</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qsqlfield.xml">QSqlField</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="QSqlField-3">
<db:title>[deprecated in 6.0] QSqlField::QSqlField(const QString &amp;<db:emphasis>fieldName</db:emphasis>, QVariant::Type <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>table</db:emphasis> = QString())</db:title>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use the constructor taking a <db:link xlink:href="qmetatype.xml">QMetaType</db:link> instead.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Constructs an empty field called <db:code role="parameter">fieldName</db:code> of variant type <db:code role="parameter">type</db:code> in <db:code role="parameter">table</db:code>.</db:para>
</db:section>
<db:section xml:id="setType">
<db:title>[deprecated in 6.0] void QSqlField::setType(QVariant::Type <db:emphasis>type</db:emphasis>)</db:title>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsqlfield.xml#setMetaType">setMetaType</db:link>() instead.</db:para>
<db:para>Sets the field's variant type to <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#metaType">metaType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>[deprecated in 6.0] QVariant::Type QSqlField::type() const</db:title>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsqlfield.xml#metaType">metaType</db:link>() instead.</db:para>
<db:para>Returns the field's type as stored in the database. Note that the actual value might have a different type, Numerical values that are too large to store in a long int or double are usually stored as strings to prevent precision loss.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml#setType">setType</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlfield.xml#metaType">metaType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
