<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Demo Browser Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A demo browser based on Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> Widgets.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;featurepermissionbar.h&quot;

#include &lt;QLabel&gt;
#include &lt;QPushButton&gt;
#include &lt;QHBoxLayout&gt;
#include &lt;QUrl&gt;
#include &lt;QPropertyAnimation&gt;

static const int defaultHeight = 30;

static QString textForPermissionType(QWebEnginePage::Feature type)
{
    switch (type) {
    case QWebEnginePage::Notifications:
        return QObject::tr(&quot;use desktop notifications&quot;);
    case QWebEnginePage::Geolocation:
        return QObject::tr(&quot;use your position&quot;);
    case QWebEnginePage::MediaAudioCapture:
        return QObject::tr(&quot;use your microphone&quot;);
    case QWebEnginePage::MediaVideoCapture:
        return QObject::tr(&quot;use your camera&quot;);
    case QWebEnginePage::MediaAudioVideoCapture:
        return QObject::tr(&quot;use your camera and microphone&quot;);
    case QWebEnginePage::MouseLock:
        return QObject::tr(&quot;lock your mouse&quot;);
    default:
        Q_UNREACHABLE();
    }
    return QString();
}

FeaturePermissionBar::FeaturePermissionBar(QWidget *view)
    : QWidget(view)
    , m_messageLabel(new QLabel(this))
{
    setAutoFillBackground(true);
    QHBoxLayout *l = new QHBoxLayout;
    setLayout(l);
    l-&gt;setContentsMargins(defaultHeight, 0, 0, 0);
    l-&gt;addWidget(m_messageLabel);
    l-&gt;addStretch();
    QPushButton *allowButton = new QPushButton(tr(&quot;Allow&quot;), this);
    QPushButton *denyButton = new QPushButton(tr(&quot;Deny&quot;), this);
    QPushButton *discardButton = new QPushButton(QIcon(QStringLiteral(&quot;:closetab.png&quot;)), QString(), this);
    connect(allowButton, &amp;QPushButton::clicked, this, &amp;FeaturePermissionBar::permissionGranted);
    connect(denyButton, &amp;QPushButton::clicked, this, &amp;FeaturePermissionBar::permissionDenied);
    connect(discardButton, &amp;QPushButton::clicked, this, &amp;FeaturePermissionBar::permissionUnknown);
    connect(allowButton, &amp;QPushButton::clicked, this, &amp;QObject::deleteLater);
    connect(denyButton, &amp;QPushButton::clicked, this, &amp;QObject::deleteLater);
    connect(discardButton, &amp;QPushButton::clicked, this, &amp;QObject::deleteLater);
    l-&gt;addWidget(denyButton);
    l-&gt;addWidget(allowButton);
    l-&gt;addWidget(discardButton);
    setGeometry(0, -defaultHeight, view-&gt;width(), defaultHeight);
}

void FeaturePermissionBar::requestPermission(const QUrl &amp;securityOrigin, QWebEnginePage::Feature feature)
{
    m_securityOrigin = securityOrigin;
    m_feature = feature;
    m_messageLabel-&gt;setText(tr(&quot;%1 wants to %2.&quot;).arg(securityOrigin.host()).arg(textForPermissionType(feature)));
    show();
    // Ease in
    QPropertyAnimation *animation = new QPropertyAnimation(this);
    animation-&gt;setTargetObject(this);
    animation-&gt;setPropertyName(QByteArrayLiteral(&quot;pos&quot;));
    animation-&gt;setDuration(300);
    animation-&gt;setStartValue(QVariant::fromValue(pos()));
    animation-&gt;setEndValue(QVariant::fromValue(QPoint(0,0)));
    animation-&gt;setEasingCurve(QEasingCurve::InOutQuad);
    animation-&gt;start(QPropertyAnimation::DeleteWhenStopped);
}

void FeaturePermissionBar::permissionDenied()
{
    emit featurePermissionProvided(m_securityOrigin, m_feature, QWebEnginePage::PermissionDeniedByUser);
}

void FeaturePermissionBar::permissionGranted()
{
    emit featurePermissionProvided(m_securityOrigin, m_feature, QWebEnginePage::PermissionGrantedByUser);
}

void FeaturePermissionBar::permissionUnknown()
{
    emit featurePermissionProvided(m_securityOrigin, m_feature, QWebEnginePage::PermissionUnknown);
}

</db:programlisting>
</db:article>
