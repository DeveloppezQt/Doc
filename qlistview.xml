<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QListView Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlistview.xml">QListView</db:link> class provides a list or icon view onto a model.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QListView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemview.xml" xlink:role="class">QAbstractItemView</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qhelpindexwidget.xml" xlink:role="class">QHelpIndexWidget</db:link>, <db:link xlink:href="qlistwidget.xml" xlink:role="class">QListWidget</db:link>, and <db:link xlink:href="qundoview.xml" xlink:role="class">QUndoView</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QListView is part of <db:simplelist><db:member>model-view</db:member><db:member>advanced</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qlistview.xml">QListView</db:link> presents items stored in a model, either as a simple non-hierarchical list, or as a collection of icons. This class is used to provide lists and icon views that were previously provided by the QListBox and QIconView classes, but using the more flexible approach provided by Qt's model/view architecture.</db:para>
<db:para>The <db:link xlink:href="qlistview.xml">QListView</db:link> class is one of the <db:link xlink:href="model-view-programming.xml#the-model-view-classes">Model/View Classes</db:link> and is part of Qt's <db:link xlink:href="model-view-programming.xml">model/view framework</db:link>.</db:para>
<db:para>This view does not display horizontal or vertical headers; to display a list of items with a horizontal header, use <db:link xlink:href="qtreeview.xml">QTreeView</db:link> instead.</db:para>
<db:para><db:link xlink:href="qlistview.xml">QListView</db:link> implements the interfaces defined by the <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> class to allow it to display data provided by models derived from the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class.</db:para>
<db:para>Items in a list view can be displayed using one of two view modes: In <db:link xlink:href="qlistview.xml#ViewMode-enum">ListMode</db:link>, the items are displayed in the form of a simple list; in <db:link xlink:href="qlistview.xml#ViewMode-enum">IconMode</db:link>, the list view takes the form of an <db:emphasis>icon view</db:emphasis> in which the items are displayed with icons like files in a file manager. By default, the list view is in <db:link xlink:href="qlistview.xml#ViewMode-enum">ListMode</db:link>. To change the view mode, use the <db:link xlink:href="qlistview.xml#viewMode-prop">setViewMode</db:link>() function, and to determine the current view mode, use <db:link xlink:href="qlistview.xml#viewMode-prop">viewMode</db:link>().</db:para>
<db:para>Items in these views are laid out in the direction specified by the <db:link xlink:href="qlistview.xml#flow-prop">flow</db:link>() of the list view. The items may be fixed in place, or allowed to move, depending on the view's <db:link xlink:href="qlistview.xml#movement-prop">movement</db:link>() state.</db:para>
<db:para>If the items in the model cannot be completely laid out in the direction of flow, they can be wrapped at the boundary of the view widget; this depends on <db:link xlink:href="qlistview.xml#isWrapping-prop">isWrapping</db:link>(). This property is useful when the items are being represented by an icon view.</db:para>
<db:para>The <db:link xlink:href="qlistview.xml#resizeMode-prop">resizeMode</db:link>() and <db:link xlink:href="qlistview.xml#layoutMode-prop">layoutMode</db:link>() govern how and when the items are laid out. Items are spaced according to their <db:link xlink:href="qlistview.xml#spacing-prop">spacing</db:link>(), and can exist within a notional grid of size specified by <db:link xlink:href="qlistview.xml#gridSize-prop">gridSize</db:link>(). The items can be rendered as large or small icons depending on their <db:link xlink:href="qabstractitemview.xml#iconSize-prop">iconSize</db:link>().</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsvista-listview.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Windows Vista style list view</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/macintosh-listview.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Macintosh style table view</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-listview.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Fusion style table view</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>A <db:link xlink:href="gallery-windowsvista.xml">Windows Vista style</db:link> list view.</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="gallery-macintosh.xml">Macintosh style</db:link> list view.</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="gallery-fusion.xml">Fusion style</db:link> list view.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="improving-performance">
<db:title>Improving Performance</db:title>
<db:para>It is possible to give the view hints about the data it is handling in order to improve its performance when displaying large numbers of items. One approach that can be taken for views that are intended to display items with equal sizes is to set the <db:link xlink:href="qlistview.xml#uniformItemSizes-prop">uniformItemSizes</db:link> property to true.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="model-view-programming.xml#view-classes">View Classes</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-puzzle-example.xml">Item Views Puzzle Example</db:link></db:member>
<db:member><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:member>
<db:member><db:link xlink:href="qtableview.xml">QTableView</db:link></db:member>
<db:member><db:link xlink:href="qlistwidget.xml">QListWidget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Flow-enum">
<db:title>enum QListView::Flow</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlistview.xml">QListView</db:link></db:emphasis>::LeftToRight</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The items are laid out in the view from the left to the right.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlistview.xml">QListView</db:link></db:emphasis>::TopToBottom</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The items are laid out in the view from the top to the bottom.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="LayoutMode-enum">
<db:title>enum QListView::LayoutMode</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlistview.xml">QListView</db:link></db:emphasis>::SinglePass</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The items are laid out all at once.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlistview.xml">QListView</db:link></db:emphasis>::Batched</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The items are laid out in batches of <db:link xlink:href="qlistview.xml#batchSize-prop">batchSize</db:link> items.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistview.xml#batchSize-prop">batchSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Movement-enum">
<db:title>enum QListView::Movement</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlistview.xml">QListView</db:link></db:emphasis>::Static</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The items cannot be moved by the user.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlistview.xml">QListView</db:link></db:emphasis>::Free</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The items can be moved freely by the user.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlistview.xml">QListView</db:link></db:emphasis>::Snap</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The items snap to the specified grid when moved; see <db:link xlink:href="qlistview.xml#gridSize-prop">setGridSize</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ResizeMode-enum">
<db:title>enum QListView::ResizeMode</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlistview.xml">QListView</db:link></db:emphasis>::Fixed</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The items will only be laid out the first time the view is shown.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlistview.xml">QListView</db:link></db:emphasis>::Adjust</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The items will be laid out every time the view is resized.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ViewMode-enum">
<db:title>enum QListView::ViewMode</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlistview.xml">QListView</db:link></db:emphasis>::ListMode</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The items are laid out using <db:link xlink:href="qlistview.xml#Flow-enum">TopToBottom</db:link> flow, with Small size and Static movement</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlistview.xml">QListView</db:link></db:emphasis>::IconMode</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The items are laid out using <db:link xlink:href="qlistview.xml#Flow-enum">LeftToRight</db:link> flow, with Large size and Free movement</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="batchSize-prop">
<db:title>[since 4.2] batchSize : int</db:title>
<db:para>This property holds the number of items laid out in each batch if <db:link xlink:href="qlistview.xml#layoutMode-prop">layoutMode</db:link> is set to <db:link xlink:href="qlistview.xml#LayoutMode-enum">Batched</db:link></db:para>
<db:para>The default value is 100.</db:para>
<db:para>This property was introduced in Qt 4.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">batchSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBatchSize</db:emphasis>(<db:type>int</db:type> <db:emphasis>batchSize</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="flow-prop">
<db:title>flow : Flow</db:title>
<db:para>This property holds which direction the items layout should flow.</db:para>
<db:para>If this property is <db:link xlink:href="qlistview.xml#Flow-enum">LeftToRight</db:link>, the items will be laid out left to right. If the <db:link xlink:href="qlistview.xml#isWrapping-prop">isWrapping</db:link> property is true, the layout will wrap when it reaches the right side of the visible area. If this property is <db:link xlink:href="qlistview.xml#Flow-enum">TopToBottom</db:link>, the items will be laid out from the top of the visible area, wrapping when it reaches the bottom.</db:para>
<db:para>Setting this property when the view is visible will cause the items to be laid out again.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qlistview.xml#Flow-enum">TopToBottom</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlistview.xml#Flow-enum">QListView::Flow</db:link></db:type> <db:emphasis role="bold">flow</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFlow</db:emphasis>(<db:type><db:link xlink:href="qlistview.xml#Flow-enum">QListView::Flow</db:link></db:type> <db:emphasis>flow</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistview.xml#viewMode-prop">viewMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="gridSize-prop">
<db:title>gridSize : QSize</db:title>
<db:para>This property holds the size of the layout grid</db:para>
<db:para>This property is the size of the grid in which the items are laid out. The default is an empty size which means that there is no grid and the layout is not done in a grid. Setting this property to a non-empty size switches on the grid layout. (When a grid layout is in force the <db:link xlink:href="qlistview.xml#spacing-prop">spacing</db:link> property is ignored.)</db:para>
<db:para>Setting this property when the view is visible will cause the items to be laid out again.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">gridSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setGridSize</db:emphasis>(const <db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistview.xml#viewMode-prop">viewMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isWrapping-prop">
<db:title>isWrapping : bool</db:title>
<db:para>This property holds whether the items layout should wrap.</db:para>
<db:para>This property holds whether the layout should wrap when there is no more space in the visible area. The point at which the layout wraps depends on the <db:link xlink:href="qlistview.xml#flow-prop">flow</db:link> property.</db:para>
<db:para>Setting this property when the view is visible will cause the items to be laid out again.</db:para>
<db:para>By default, this property is false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isWrapping</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWrapping</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistview.xml#viewMode-prop">viewMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layoutMode-prop">
<db:title>layoutMode : LayoutMode</db:title>
<db:para>determines whether the layout of items should happen immediately or be delayed.</db:para>
<db:para>This property holds the layout mode for the items. When the mode is <db:link xlink:href="qlistview.xml#LayoutMode-enum">SinglePass</db:link> (the default), the items are laid out all in one go. When the mode is <db:link xlink:href="qlistview.xml#LayoutMode-enum">Batched</db:link>, the items are laid out in batches of <db:link xlink:href="qlistview.xml#batchSize-prop">batchSize</db:link> items, while processing events. This makes it possible to instantly view and interact with the visible items while the rest are being laid out.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlistview.xml#LayoutMode-enum">QListView::LayoutMode</db:link></db:type> <db:emphasis role="bold">layoutMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLayoutMode</db:emphasis>(<db:type><db:link xlink:href="qlistview.xml#LayoutMode-enum">QListView::LayoutMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistview.xml#viewMode-prop">viewMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modelColumn-prop">
<db:title>modelColumn : int</db:title>
<db:para>This property holds the column in the model that is visible</db:para>
<db:para>By default, this property contains 0, indicating that the first column in the model will be shown.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">modelColumn</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setModelColumn</db:emphasis>(<db:type>int</db:type> <db:emphasis>column</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="movement-prop">
<db:title>movement : Movement</db:title>
<db:para>This property holds whether the items can be moved freely, are snapped to a grid, or cannot be moved at all.</db:para>
<db:para>This property determines how the user can move the items in the view. <db:link xlink:href="qlistview.xml#Movement-enum">Static</db:link> means that the items can't be moved the user. <db:link xlink:href="qlistview.xml#Movement-enum">Free</db:link> means that the user can drag and drop the items to any position in the view. <db:link xlink:href="qlistview.xml#Movement-enum">Snap</db:link> means that the user can drag and drop the items, but only to the positions in a notional grid signified by the <db:link xlink:href="qlistview.xml#gridSize-prop">gridSize</db:link> property.</db:para>
<db:para>Setting this property when the view is visible will cause the items to be laid out again.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qlistview.xml#Movement-enum">Static</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlistview.xml#Movement-enum">QListView::Movement</db:link></db:type> <db:emphasis role="bold">movement</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMovement</db:emphasis>(<db:type><db:link xlink:href="qlistview.xml#Movement-enum">QListView::Movement</db:link></db:type> <db:emphasis>movement</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistview.xml#gridSize-prop">gridSize</db:link></db:member>
<db:member><db:link xlink:href="qlistview.xml#resizeMode-prop">resizeMode</db:link></db:member>
<db:member><db:link xlink:href="qlistview.xml#viewMode-prop">viewMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeMode-prop">
<db:title>resizeMode : ResizeMode</db:title>
<db:para>This property holds whether the items are laid out again when the view is resized.</db:para>
<db:para>If this property is <db:link xlink:href="qlistview.xml#ResizeMode-enum">Adjust</db:link>, the items will be laid out again when the view is resized. If the value is <db:link xlink:href="qlistview.xml#ResizeMode-enum">Fixed</db:link>, the items will not be laid out when the view is resized.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qlistview.xml#ResizeMode-enum">Fixed</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlistview.xml#ResizeMode-enum">QListView::ResizeMode</db:link></db:type> <db:emphasis role="bold">resizeMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setResizeMode</db:emphasis>(<db:type><db:link xlink:href="qlistview.xml#ResizeMode-enum">QListView::ResizeMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistview.xml#movement-prop">movement</db:link></db:member>
<db:member><db:link xlink:href="qlistview.xml#gridSize-prop">gridSize</db:link></db:member>
<db:member><db:link xlink:href="qlistview.xml#viewMode-prop">viewMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionRectVisible-prop">
<db:title>[since 4.3] selectionRectVisible : bool</db:title>
<db:para>if the selection rectangle should be visible</db:para>
<db:para>If this property is true then the selection rectangle is visible; otherwise it will be hidden.</db:para>
<db:note>
<db:para>The selection rectangle will only be visible if the selection mode is in a mode where more than one item can be selected; i.e., it will not draw a selection rectangle if the selection mode is <db:link xlink:href="qabstractitemview.xml#SelectionMode-enum">QAbstractItemView::SingleSelection</db:link>.</db:para>
</db:note>
<db:para>By default, this property is false.</db:para>
<db:para>This property was introduced in Qt 4.3.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isSelectionRectVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSelectionRectVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>show</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="spacing-prop">
<db:title>spacing : int</db:title>
<db:para>This property holds the space around the items in the layout</db:para>
<db:para>This property is the size of the empty space that is padded around an item in the layout.</db:para>
<db:para>Setting this property when the view is visible will cause the items to be laid out again.</db:para>
<db:para>By default, this property contains a value of 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">spacing</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSpacing</db:emphasis>(<db:type>int</db:type> <db:emphasis>space</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistview.xml#viewMode-prop">viewMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uniformItemSizes-prop">
<db:title>[since 4.1] uniformItemSizes : bool</db:title>
<db:para>This property holds whether all items in the listview have the same size</db:para>
<db:para>This property should only be set to true if it is guaranteed that all items in the view have the same size. This enables the view to do some optimizations for performance purposes.</db:para>
<db:para>By default, this property is false.</db:para>
<db:para>This property was introduced in Qt 4.1.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">uniformItemSizes</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUniformItemSizes</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="viewMode-prop">
<db:title>viewMode : ViewMode</db:title>
<db:para>This property holds the view mode of the <db:link xlink:href="qlistview.xml">QListView</db:link>.</db:para>
<db:para>This property will change the other unset properties to conform with the set view mode. <db:link xlink:href="qlistview.xml">QListView</db:link>-specific properties that have already been set will not be changed, unless <db:link xlink:href="qlistview.xml#clearPropertyFlags">clearPropertyFlags</db:link>() has been called.</db:para>
<db:para>Setting the view mode will enable or disable drag and drop based on the selected movement. For <db:link xlink:href="qlistview.xml#ViewMode-enum">ListMode</db:link>, the default movement is <db:link xlink:href="qlistview.xml#Movement-enum">Static</db:link> (drag and drop disabled); for <db:link xlink:href="qlistview.xml#ViewMode-enum">IconMode</db:link>, the default movement is <db:link xlink:href="qlistview.xml#Movement-enum">Free</db:link> (drag and drop enabled).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlistview.xml#ViewMode-enum">QListView::ViewMode</db:link></db:type> <db:emphasis role="bold">viewMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setViewMode</db:emphasis>(<db:type><db:link xlink:href="qlistview.xml#ViewMode-enum">QListView::ViewMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistview.xml#isWrapping-prop">isWrapping</db:link></db:member>
<db:member><db:link xlink:href="qlistview.xml#spacing-prop">spacing</db:link></db:member>
<db:member><db:link xlink:href="qlistview.xml#gridSize-prop">gridSize</db:link></db:member>
<db:member><db:link xlink:href="qlistview.xml#flow-prop">flow</db:link></db:member>
<db:member><db:link xlink:href="qlistview.xml#movement-prop">movement</db:link></db:member>
<db:member><db:link xlink:href="qlistview.xml#resizeMode-prop">resizeMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wordWrap-prop">
<db:title>[since 4.2] wordWrap : bool</db:title>
<db:para>This property holds the item text word-wrapping policy</db:para>
<db:para>If this property is true then the item text is wrapped where necessary at word-breaks; otherwise it is not wrapped at all. This property is false by default.</db:para>
<db:para>Please note that even if wrapping is enabled, the cell will not be expanded to make room for the text. It will print ellipsis for text that cannot be shown, according to the view's <db:link xlink:href="qabstractitemview.xml#textElideMode-prop">textElideMode</db:link>.</db:para>
<db:para>This property was introduced in Qt 4.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">wordWrap</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWordWrap</db:emphasis>(<db:type>bool</db:type> <db:emphasis>on</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QListView">
<db:title>[explicit] QListView::QListView(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Creates a new <db:link xlink:href="qlistview.xml">QListView</db:link> with the given <db:code role="parameter">parent</db:code> to view a model. Use <db:link xlink:href="qabstractitemview.xml#setModel">setModel</db:link>() to set the model.</db:para>
</db:section>
<db:section xml:id="dtor.QListView">
<db:title>[virtual noexcept] QListView::~QListView()</db:title>
<db:para>Destroys the view.</db:para>
</db:section>
<db:section xml:id="clearPropertyFlags">
<db:title>void QListView::clearPropertyFlags()</db:title>
<db:para>Clears the <db:link xlink:href="qlistview.xml">QListView</db:link>-specific property flags. See <db:link xlink:href="qlistview.xml#viewMode-prop">viewMode</db:link>.</db:para>
<db:para>Properties inherited from <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> are not covered by the property flags. Specifically, <db:link xlink:href="qabstractitemview.xml#dragEnabled-prop">dragEnabled</db:link> and <db:link xlink:href="qwidget.xml#acceptDrops-prop">acceptsDrops</db:link> are computed by <db:link xlink:href="qlistview.xml">QListView</db:link> when calling <db:link xlink:href="qlistview.xml#movement-prop">setMovement</db:link>() or <db:link xlink:href="qlistview.xml#viewMode-prop">setViewMode</db:link>().</db:para>
</db:section>
<db:section xml:id="currentChanged">
<db:title>[override virtual protected] void QListView::currentChanged(const QModelIndex &amp;<db:emphasis>current</db:emphasis>, const QModelIndex &amp;<db:emphasis>previous</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#currentChanged" role="function">QAbstractItemView::currentChanged(const QModelIndex &amp;current, const QModelIndex &amp;previous)</db:link>.</db:para>
</db:section>
<db:section xml:id="dataChanged">
<db:title>[override virtual protected] void QListView::dataChanged(const QModelIndex &amp;<db:emphasis>topLeft</db:emphasis>, const QModelIndex &amp;<db:emphasis>bottomRight</db:emphasis>, const QVector&lt;int&gt; &amp;<db:emphasis>roles</db:emphasis> = QVector&lt;int&gt;())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#dataChanged" role="function">QAbstractItemView::dataChanged(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight, const QVector&lt;int&gt; &amp;roles)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[override virtual protected] void QListView::dragLeaveEvent(QDragLeaveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#dragLeaveEvent" role="function">QAbstractItemView::dragLeaveEvent(QDragLeaveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[override virtual protected] void QListView::dragMoveEvent(QDragMoveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#dragMoveEvent" role="function">QAbstractItemView::dragMoveEvent(QDragMoveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QListView::dropEvent(QDropEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#dropEvent" role="function">QAbstractItemView::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QListView::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#event" role="function">QAbstractItemView::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="horizontalOffset">
<db:title>[override virtual protected] int QListView::horizontalOffset() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#horizontalOffset" role="function">QAbstractItemView::horizontalOffset() const</db:link>.</db:para>
</db:section>
<db:section xml:id="indexAt">
<db:title>[override virtual] QModelIndex QListView::indexAt(const QPoint &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#indexAt" role="function">QAbstractItemView::indexAt(const QPoint &amp;point) const</db:link>.</db:para>
</db:section>
<db:section xml:id="indexesMoved">
<db:title>[since 4.2] void QListView::indexesMoved(const QModelIndexList &amp;<db:emphasis>indexes</db:emphasis>)</db:title>
<db:para>This signal is emitted when the specified <db:code role="parameter">indexes</db:code> are moved in the view.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="isIndexHidden">
<db:title>[override virtual protected] bool QListView::isIndexHidden(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#isIndexHidden" role="function">QAbstractItemView::isIndexHidden(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="isRowHidden">
<db:title>bool QListView::isRowHidden(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:para>Returns true if the <db:code role="parameter">row</db:code> is hidden; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QListView::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#mouseMoveEvent" role="function">QAbstractItemView::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QListView::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#mouseReleaseEvent" role="function">QAbstractItemView::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="moveCursor">
<db:title>[override virtual protected] QModelIndex QListView::moveCursor(QAbstractItemView::CursorAction <db:emphasis>cursorAction</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#moveCursor" role="function">QAbstractItemView::moveCursor(QAbstractItemView::CursorAction cursorAction, Qt::KeyboardModifiers modifiers)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QListView::paintEvent(QPaintEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#paintEvent" role="function">QAbstractScrollArea::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="rectForIndex">
<db:title>[protected] QRect QListView::rectForIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the rectangle of the item at position <db:code role="parameter">index</db:code> in the model. The rectangle is in contents coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistview.xml#visualRect">visualRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QListView::resizeEvent(QResizeEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#resizeEvent" role="function">QAbstractItemView::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="rowsAboutToBeRemoved">
<db:title>[override virtual protected] void QListView::rowsAboutToBeRemoved(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#rowsAboutToBeRemoved" role="function">QAbstractItemView::rowsAboutToBeRemoved(const QModelIndex &amp;parent, int start, int end)</db:link>.</db:para>
</db:section>
<db:section xml:id="rowsInserted">
<db:title>[override virtual protected] void QListView::rowsInserted(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#rowsInserted" role="function">QAbstractItemView::rowsInserted(const QModelIndex &amp;parent, int start, int end)</db:link>.</db:para>
</db:section>
<db:section xml:id="scrollTo">
<db:title>[override virtual] void QListView::scrollTo(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, QAbstractItemView::ScrollHint <db:emphasis>hint</db:emphasis> = EnsureVisible)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#scrollTo" role="function">QAbstractItemView::scrollTo(const QModelIndex &amp;index, QAbstractItemView::ScrollHint hint)</db:link>.</db:para>
</db:section>
<db:section xml:id="selectedIndexes">
<db:title>[override virtual protected] QModelIndexList QListView::selectedIndexes() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#selectedIndexes" role="function">QAbstractItemView::selectedIndexes() const</db:link>.</db:para>
</db:section>
<db:section xml:id="selectionChanged">
<db:title>[override virtual protected] void QListView::selectionChanged(const QItemSelection &amp;<db:emphasis>selected</db:emphasis>, const QItemSelection &amp;<db:emphasis>deselected</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#selectionChanged" role="function">QAbstractItemView::selectionChanged(const QItemSelection &amp;selected, const QItemSelection &amp;deselected)</db:link>.</db:para>
</db:section>
<db:section xml:id="setPositionForIndex">
<db:title>[protected, since 4.1] void QListView::setPositionForIndex(const QPoint &amp;<db:emphasis>position</db:emphasis>, const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Sets the contents position of the item at <db:code role="parameter">index</db:code> in the model to the given <db:code role="parameter">position</db:code>. If the list view's movement mode is Static or its view mode is <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>, this function will have no effect.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
<db:section xml:id="setRowHidden">
<db:title>void QListView::setRowHidden(int <db:emphasis>row</db:emphasis>, bool <db:emphasis>hide</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">hide</db:code> is true, the given <db:code role="parameter">row</db:code> will be hidden; otherwise the <db:code role="parameter">row</db:code> will be shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlistview.xml#isRowHidden">isRowHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelection">
<db:title>[override virtual protected] void QListView::setSelection(const QRect &amp;<db:emphasis>rect</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>command</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#setSelection" role="function">QAbstractItemView::setSelection(const QRect &amp;rect, QItemSelectionModel::SelectionFlags flags)</db:link>.</db:para>
</db:section>
<db:section xml:id="startDrag">
<db:title>[override virtual protected] void QListView::startDrag(Qt::DropActions <db:emphasis>supportedActions</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#startDrag" role="function">QAbstractItemView::startDrag(Qt::DropActions supportedActions)</db:link>.</db:para>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QListView::timerEvent(QTimerEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#timerEvent" role="function">QAbstractItemView::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="updateGeometries">
<db:title>[override virtual protected] void QListView::updateGeometries()</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#updateGeometries" role="function">QAbstractItemView::updateGeometries()</db:link>.</db:para>
</db:section>
<db:section xml:id="verticalOffset">
<db:title>[override virtual protected] int QListView::verticalOffset() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#verticalOffset" role="function">QAbstractItemView::verticalOffset() const</db:link>.</db:para>
</db:section>
<db:section xml:id="viewOptions">
<db:title>[override virtual protected] QStyleOptionViewItem QListView::viewOptions() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#viewOptions" role="function">QAbstractItemView::viewOptions() const</db:link>.</db:para>
</db:section>
<db:section xml:id="viewportSizeHint">
<db:title>[override virtual protected, since 5.2] QSize QListView::viewportSizeHint() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#viewportSizeHint" role="function">QAbstractItemView::viewportSizeHint() const</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="visualRect">
<db:title>[override virtual] QRect QListView::visualRect(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#visualRect" role="function">QAbstractItemView::visualRect(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="visualRegionForSelection">
<db:title>[override virtual protected] QRegion QListView::visualRegionForSelection(const QItemSelection &amp;<db:emphasis>selection</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#visualRegionForSelection" role="function">QAbstractItemView::visualRegionForSelection(const QItemSelection &amp;selection) const</db:link>.</db:para>
<db:para>Since 4.7, the returned region only contains rectangles intersecting (or included in) the viewport.</db:para>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QListView::wheelEvent(QWheelEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#wheelEvent" role="function">QAbstractScrollArea::wheelEvent(QWheelEvent *e)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
