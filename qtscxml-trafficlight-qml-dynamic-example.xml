<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt SCXML Traffic Light QML Example (Dynamic)</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Scxml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt Quick application that uses a dynamically loaded state machine to implement a traffic light.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/trafficlight.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Traffic Light QML Example (Dynamic)</db:emphasis> demonstrates how to connect to the active properties of a state in a dynamically loaded state machine.</db:para>
<db:para>The UI is created using Qt Quick.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="dynamically-loading-the-state-machine">
<db:title>Dynamically Loading the State Machine</db:title>
<db:para>We link against the Qt SCXML module by adding the following line to the example <db:emphasis>.pro</db:emphasis> file:</db:para>
<db:programlisting language="cpp">QT += qml scxml

</db:programlisting>
<db:para>We dynamically create the state machine in the main QML file:</db:para>
<db:programlisting language="cpp">import QtScxml 5.7 as Scxml

TrafficLight {
    Scxml.StateMachineLoader {
        id: loader
        filename: &quot;qrc:///statemachine.scxml&quot;
    }

    stateMachine: loader.stateMachine
}

</db:programlisting>
</db:section>
<db:section xml:id="connecting-to-states">
<db:title>Connecting to States</db:title>
<db:para>In the SCXML file, we specify states for each light: red, yellow, and green. In the <db:code>&lt;onentry&gt;</db:code> element, we specify the event to send when entering the state and the delay in seconds before sending the event. In the <db:code>&lt;transition&gt;</db:code> element, we specify the event that triggers the transition to the state specified by the <db:code>target</db:code> attribute:</db:para>
<db:programlisting language="cpp">        &lt;state id=&quot;red&quot;&gt;
            &lt;onentry&gt;
                &lt;send event=&quot;startGoingGreen&quot; delay=&quot;3s&quot;/&gt;
            &lt;/onentry&gt;
            &lt;transition event=&quot;startGoingGreen&quot; target=&quot;redGoingGreen&quot;/&gt;
        &lt;/state&gt;

        &lt;state id=&quot;yellow&quot; initial=&quot;greenGoingRed&quot;&gt;
            &lt;state id=&quot;redGoingGreen&quot;&gt;
                &lt;onentry&gt;
                    &lt;send event=&quot;goGreen&quot; delay=&quot;1s&quot;/&gt;
                &lt;/onentry&gt;
                &lt;transition event=&quot;goGreen&quot; target=&quot;green&quot;/&gt;
            &lt;/state&gt;

            &lt;state id=&quot;greenGoingRed&quot;&gt;
                &lt;onentry&gt;
                    &lt;send event=&quot;goRed&quot; delay=&quot;1s&quot;/&gt;
                &lt;/onentry&gt;
                &lt;transition event=&quot;goRed&quot; target=&quot;red&quot;/&gt;
            &lt;/state&gt;
        &lt;/state&gt;

        &lt;state id=&quot;green&quot;&gt;
            &lt;onentry&gt;
                &lt;send event=&quot;startGoingRed&quot; delay=&quot;3s&quot;/&gt;
            &lt;/onentry&gt;
            &lt;transition event=&quot;startGoingRed&quot; target=&quot;greenGoingRed&quot;/&gt;
        &lt;/state&gt;

</db:programlisting>
<db:para>We connect to the states as follows:</db:para>
<db:programlisting language="cpp">        Image {
            id: redLight
            x: (lights.width - width) / 2
            y: 40
            source: &quot;red.png&quot;
            visible: stateMachine.red || stateMachine.redGoingGreen
        }

        Image {
            id: yellowLight
            x: (lights.width - width) / 2
            y: 135
            source: &quot;yellow.png&quot;
            visible: stateMachine.yellow || stateMachine.blinking
        }

        Image {
            id: greenLight
            x: (lights.width - width) / 2
            y: 230
            source: &quot;green.png&quot;
            visible: stateMachine.green
        }
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="trafficlight-qml-dynamic/trafficlight-qml-dynamic.cpp">trafficlight-qml-dynamic/trafficlight-qml-dynamic.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="trafficlight-qml-dynamic/trafficlight-qml-dynamic.pro">trafficlight-qml-dynamic/trafficlight-qml-dynamic.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="trafficlight-qml-dynamic/trafficlight-qml-dynamic.qml">trafficlight-qml-dynamic/trafficlight-qml-dynamic.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="trafficlight-qml-dynamic/trafficlight-qml-dynamic.qrc">trafficlight-qml-dynamic/trafficlight-qml-dynamic.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
