<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Styling Qt Quick Controls</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick Controls Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="available-styles">
<db:title>Available Styles</db:title>
<db:para>Qt Quick Controls comes with a selection of styles.</db:para>
<db:section xml:id="basic-style">
<db:title>Basic Style</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-basic.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qtquickcontrols-basic.xml">Basic Style</db:link> is a simple and light-weight all-round style that offers the maximum performance for Qt Quick Controls.</db:para>
</db:section>
<db:section xml:id="fusion-style">
<db:title>Fusion Style</db:title>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:figure>
<db:title>The light theme of the Fusion style.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-fusion-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
<db:td>
<db:figure>
<db:title>The dark theme of the Fusion style.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-fusion-dark.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qtquickcontrols-fusion.xml">Fusion Style</db:link> is a platform-agnostic style that offers a desktop-oriented look and feel for Qt Quick Controls.</db:para>
</db:section>
<db:section xml:id="imagine-style">
<db:title>Imagine Style</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-imagine.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qtquickcontrols-imagine.xml">Imagine Style</db:link> is based on image assets. The style comes with a default set of images which can easily be changed by providing a directory with images using a predefined naming convention.</db:para>
</db:section>
<db:section xml:id="macos-style">
<db:title>macOS Style</db:title>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:figure>
<db:title>The light theme of the macOS style.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-macos-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
<db:td>
<db:figure>
<db:title>The dark theme of the macOS style.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-macos-dark.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qtquickcontrols-macos.xml">macOS Style</db:link> is a native-looking style for macOS.</db:para>
<db:note>
<db:para>this style is only available for applications running on macOS.</db:para>
</db:note>
</db:section>
<db:section xml:id="ios-style">
<db:title>iOS Style</db:title>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:figure>
<db:title>The light theme of the iOS style.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-ios-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
<db:td>
<db:figure>
<db:title>The dark theme of the iOS style.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-ios-dark.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qtquickcontrols-ios.xml">iOS Style</db:link> is a native-looking style for iOS based on image assets.</db:para>
<db:note>
<db:para>this style is only available for applications running on iOS.</db:para>
</db:note>
</db:section>
<db:section xml:id="material-style">
<db:title>Material Style</db:title>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:figure>
<db:title>The light theme of the Material style.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-material-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
<db:td>
<db:figure>
<db:title>The dark theme of the Material style.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-material-dark.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qtquickcontrols-material.xml">Material Style</db:link> offers an appealing design based on the <db:link xlink:href="https://www.google.com/design/spec/material-design/introduction.html">Google Material Design Guidelines</db:link>, but requires more system resources than the Basic style.</db:para>
</db:section>
<db:section xml:id="universal-style">
<db:title>Universal Style</db:title>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:figure>
<db:title>The light theme of the Universal style.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-universal-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
<db:td>
<db:figure>
<db:title>The dark theme of the Universal style.</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-universal-dark.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qtquickcontrols-universal.xml">Universal Style</db:link> offers an appealing design based on the <db:link xlink:href="https://dev.windows.com/design">Microsoft Universal Design Guidelines</db:link>, but requires more system resources than the Basic style.</db:para>
</db:section>
<db:section xml:id="windows-style">
<db:title>Windows Style</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-windows.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qtquickcontrols-windows.xml">Windows Style</db:link> is a native-looking style for Windows.</db:para>
<db:note>
<db:para>this style is only available for applications running on Windows.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="using-styles-in-qt-quick-controls">
<db:title>Using Styles in Qt Quick Controls</db:title>
<db:section xml:id="default-styles">
<db:title>Default Styles</db:title>
<db:para>If no style is explicitly set, a default style will be used. The style that is used depends on the operating system:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Android: <db:link xlink:href="qtquickcontrols-material.xml">Material Style</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>iOS: <db:link xlink:href="qtquickcontrols-ios.xml">iOS Style</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Linux: <db:link xlink:href="qtquickcontrols-fusion.xml">Fusion Style</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>macOS: <db:link xlink:href="qtquickcontrols-macos.xml">macOS Style</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Windows: <db:link xlink:href="qtquickcontrols-windows.xml">Windows Style</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For all other operating systems, the <db:link xlink:href="qtquickcontrols-basic.xml">Basic Style</db:link> is used.</db:para>
</db:section>
<db:section xml:id="compile-time-style-selection">
<db:title>Compile-Time Style Selection</db:title>
<db:para>Compile-time style selection is a way of specifying a style to use by importing it in QML. For example, to import the Material style:</db:para>
<db:programlisting language="qml">import QtQuick.Controls.Material

ApplicationWindow {
    // ...
}
</db:programlisting>
<db:para>Notice that <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls (which is responsible for run-time style selection) is not imported. The fallback style is specified by the qmldir of the style:</db:para>
<db:programlisting language="cpp" role="bad">module QtQuick.Controls.Material
# ...
import QtQuick.Controls.Basic auto
</db:programlisting>
<db:para>The benefit of compile-time style selection is that the <db:link xlink:href="qtqml-qtquick-compiler-tech.xml#the-qml-script-compiler">QML compiler</db:link> knows which specific style is in use and can generate C++ code for bindings.</db:para>
<db:para>Another benefit is that the <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls plugin is not used and therefore does not need to be deployed with the application.</db:para>
<db:para>Explicit imports are also necessary if your application is built <db:link xlink:href="qtquickcontrols-deployment.xml#static-builds">statically</db:link>.</db:para>
<db:para>A disadvantage of compile-time style selection is that one executable cannot support multiple styles, as each style requires its own.</db:para>
</db:section>
<db:section xml:id="run-time-style-selection">
<db:title>Run-Time Style Selection</db:title>
<db:para>Run-time style selection is a way of specifying a style to use by importing <db:code>QtQuick.Controls</db:code>:</db:para>
<db:programlisting language="qml">import QtQuick.Controls
</db:programlisting>
<db:para>The <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls plugin will import the style and fallback style that were set at runtime via one of the following approaches:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qquickstyle.xml#setStyle">QQuickStyle::setStyle</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:code>-style</db:code> command line argument</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:code>QT_QUICK_CONTROLS_STYLE</db:code> environment variable</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:code>qtquickcontrols2.conf</db:code> configuration file</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The priority of these approaches follows the order they are listed, from highest to lowest. That is, using <db:code>QQuickStyle</db:code> to set the style will always take priority over using the command line argument, for example.</db:para>
<db:para>The benefit of run-time style selection is that a single application binary can support multiple styles, meaning that the end user can choose which style to run the application with.</db:para>
<db:para>A disadvantage of this approach is that <db:link xlink:href="qtqml-qtquick-compiler-tech.xml#the-qml-script-compiler">QML compiler</db:link> can't know which specific style is in use and therefore cannot generate C++ code for bindings on properties of Qt Quick Controls types. This does not affect the QML compiler's abilities to generate C++ for bindings on types from other modules.</db:para>
<db:section xml:id="using-qquickstyle-in-c">
<db:title>Using QQuickStyle in C++</db:title>
<db:para><db:link xlink:href="qquickstyle.xml">QQuickStyle</db:link> provides C++ API for configuring a specific style. The following example runs a Qt Quick Controls application with the Material style:</db:para>
<db:programlisting language="cpp">QQuickStyle::setStyle(&quot;Material&quot;);
</db:programlisting>
<db:para>See the detailed description of <db:link xlink:href="qquickstyle.xml">QQuickStyle</db:link> for more details.</db:para>
</db:section>
<db:section xml:id="command-line-argument">
<db:title>Command line argument</db:title>
<db:para>Passing a <db:code>-style</db:code> command line argument is the convenient way to test different styles. It takes precedence over the other methods listed below. The following example runs a Qt Quick Controls application with the Material style:</db:para>
<db:programlisting language="cpp">./app -style material
</db:programlisting>
</db:section>
<db:section xml:id="environment-variable">
<db:title>Environment variable</db:title>
<db:para>Setting the <db:code>QT_QUICK_CONTROLS_STYLE</db:code> environment variable can be used to set a system-wide style preference. It takes precedence over the configuration file mentioned below. The following example runs a Qt Quick Controls application with the Universal style:</db:para>
<db:programlisting language="cpp">QT_QUICK_CONTROLS_STYLE=universal ./app
</db:programlisting>
<db:para>See <db:link xlink:href="qtquickcontrols-environment.xml">Supported Environment Variables in Qt Quick Controls</db:link> for the full list of supported environment variables.</db:para>
</db:section>
<db:section xml:id="configuration-file">
<db:title>Configuration file</db:title>
<db:para>Qt Quick Controls support a special configuration file, <db:code>:/qtquickcontrols2.conf</db:code>, that is built into an application's resources.</db:para>
<db:para>The configuration file can specify the preferred style (may be overridden by either of the methods described earlier) and certain style-specific attributes. The following example specifies that the preferred style is the Material style.</db:para>
<db:programlisting language="cpp">[Controls]
Style=Material
</db:programlisting>
<db:para>See <db:link xlink:href="qtquickcontrols-configuration.xml">Qt Quick Controls Configuration File</db:link> for more details about the configuration file.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-basic.xml">Basic Style</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-fusion.xml">Fusion Style</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-imagine.xml">Imagine Style</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-material.xml">Material Style</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-universal.xml">Universal Style</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-customize.xml">Customizing Qt Quick Controls</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-fileselectors.xml">Using File Selectors with Qt Quick Controls</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-deployment.xml">Deploying Qt Quick Controls Applications</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-configuration.xml">Qt Quick Controls Configuration File</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-environment.xml">Supported Environment Variables in Qt Quick Controls</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
