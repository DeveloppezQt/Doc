<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVirtualKeyboardSelectionListModel Class</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt Virtual Keyboard | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>List model for selection lists.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVirtualKeyboardSelectionListModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS VirtualKeyboard)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::VirtualKeyboard)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += virtualkeyboard</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtquick-virtualkeyboard-selectionlistmodel.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractlistmodel.xml" xlink:role="class">QAbstractListModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QVirtualKeyboardSelectionListModel is part of <db:simplelist><db:member>qtvirtualkeyboard-cpp-for-devs</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class acts as a bridge between the UI and the input method that provides the data for selection lists.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DictionaryType-enum">
<db:title>enum QVirtualKeyboardSelectionListModel::DictionaryType</db:title>
<db:enumsynopsis>
<db:enumname>DictionaryType</db:enumname>
<db:enumitem>
<db:enumidentifier>Default</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>User</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies the dictionary type of a word.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardselectionlistmodel.xml">QVirtualKeyboardSelectionListModel</db:link></db:emphasis>::<db:emphasis role="bold">DictionaryType</db:emphasis>::Default</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The word candidate is from the default dictionary.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardselectionlistmodel.xml">QVirtualKeyboardSelectionListModel</db:link></db:emphasis>::<db:emphasis role="bold">DictionaryType</db:emphasis>::User</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The word candidate is from the user dictionary.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Role-enum">
<db:title>enum QVirtualKeyboardSelectionListModel::Role</db:title>
<db:enumsynopsis>
<db:enumname>Role</db:enumname>
<db:enumitem>
<db:enumidentifier>Display</db:enumidentifier>
<db:enumvalue>Qt::DisplayRole</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DisplayRole</db:enumidentifier>
<db:enumvalue>Display</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WordCompletionLength</db:enumidentifier>
<db:enumvalue>Qt::UserRole + 1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WordCompletionLengthRole</db:enumidentifier>
<db:enumvalue>WordCompletionLength</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Dictionary</db:enumidentifier>
<db:enumvalue>258</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanRemoveSuggestion</db:enumidentifier>
<db:enumvalue>259</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies a role of the data requested.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardselectionlistmodel.xml">QVirtualKeyboardSelectionListModel</db:link></db:emphasis>::<db:emphasis role="bold">Role</db:emphasis>::Display</db:code></db:para>
</db:td>
<db:td><db:code>Qt::DisplayRole</db:code></db:td>
<db:td>
<db:para>The data to be rendered in form of text.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardselectionlistmodel.xml">QVirtualKeyboardSelectionListModel</db:link></db:emphasis>::<db:emphasis role="bold">Role</db:emphasis>::DisplayRole</db:code></db:para>
</db:td>
<db:td><db:code>Display</db:code></db:td>
<db:td>
<db:para><db:code>obsolete</db:code> Use Role::Display.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardselectionlistmodel.xml">QVirtualKeyboardSelectionListModel</db:link></db:emphasis>::<db:emphasis role="bold">Role</db:emphasis>::WordCompletionLength</db:code></db:para>
</db:td>
<db:td><db:code>Qt::UserRole + 1</db:code></db:td>
<db:td>
<db:para>An integer specifying the length of the word the completion part expressed as the number of characters counted from the end of the string.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardselectionlistmodel.xml">QVirtualKeyboardSelectionListModel</db:link></db:emphasis>::<db:emphasis role="bold">Role</db:emphasis>::WordCompletionLengthRole</db:code></db:para>
</db:td>
<db:td><db:code>WordCompletionLength</db:code></db:td>
<db:td>
<db:para><db:code>obsolete</db:code> Use Role::WordCompletionLength.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardselectionlistmodel.xml">QVirtualKeyboardSelectionListModel</db:link></db:emphasis>::<db:emphasis role="bold">Role</db:emphasis>::Dictionary</db:code></db:para>
</db:td>
<db:td><db:code>258</db:code></db:td>
<db:td>
<db:para>An integer specifying l {<db:link xlink:href="qvirtualkeyboardselectionlistmodel.xml#DictionaryType-enum">QVirtualKeyboardSelectionListModel::DictionaryType</db:link>}{dictionary type}.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardselectionlistmodel.xml">QVirtualKeyboardSelectionListModel</db:link></db:emphasis>::<db:emphasis role="bold">Role</db:emphasis>::CanRemoveSuggestion</db:code></db:para>
</db:td>
<db:td><db:code>259</db:code></db:td>
<db:td>
<db:para>A boolean value indicating if the word candidate can be removed from the dictionary.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Type-enum">
<db:title>enum QVirtualKeyboardSelectionListModel::Type</db:title>
<db:enumsynopsis>
<db:enumname>Type</db:enumname>
<db:enumitem>
<db:enumidentifier>WordCandidateList</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies the type of selection list.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvirtualkeyboardselectionlistmodel.xml">QVirtualKeyboardSelectionListModel</db:link></db:emphasis>::<db:emphasis role="bold">Type</db:emphasis>::WordCandidateList</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Shows list of word candidates.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="activeItemChanged">
<db:title>void QVirtualKeyboardSelectionListModel::activeItemChanged(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>activeItemChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void activeItemChanged(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the active item in the list changes. The UI should react to this signal by highlighting the item at <db:code role="parameter">index</db:code> in the list.</db:para>
</db:section>
<db:section xml:id="itemSelected">
<db:title>void QVirtualKeyboardSelectionListModel::itemSelected(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>itemSelected</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void itemSelected(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an item at <db:code role="parameter">index</db:code> is selected by the user.</db:para>
</db:section>
<db:section xml:id="removeItem">
<db:title>void QVirtualKeyboardSelectionListModel::removeItem(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeItem(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method should be called when the user removes an item at position <db:code role="parameter">index</db:code> from the list. The removal is forwarded to the input method for further processing.</db:para>
</db:section>
<db:section xml:id="selectItem">
<db:title>void QVirtualKeyboardSelectionListModel::selectItem(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectItem(int index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method should be called when the user selects an item at position <db:code role="parameter">index</db:code> from the list. The selection is forwarded to the input method for further processing.</db:para>
</db:section>
</db:section>
</db:article>
