<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlExtensionPlugin Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlextensionplugin.xml">QQmlExtensionPlugin</db:link> class provides an abstract base for custom QML extension plugins with custom type registration functions.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlExtensionPlugin</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QQmlExtensionPlugin is part of <db:simplelist><db:member>plugins</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:note>
<db:para>If you need to write a plugin manually (which is rare) you should always use <db:link xlink:href="qqmlengineextensionplugin.xml">QQmlEngineExtensionPlugin</db:link>. <db:link xlink:href="qqmlextensionplugin.xml">QQmlExtensionPlugin</db:link> only provides the <db:link xlink:href="qqmlextensionplugin.xml#registerTypes">registerTypes</db:link>() and <db:link xlink:href="qqmlextensionplugin.xml#unregisterTypes">unregisterTypes</db:link>() functions in addition. You should not use them, but rather declare your types with <db:link xlink:href="qqmlengine.xml#QML_ELEMENT">QML_ELEMENT</db:link> and friends and have the build system take care of the registration.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="initializeEngine">
<db:title>[override virtual] void QQmlExtensionPlugin::initializeEngine(QQmlEngine *<db:emphasis>engine</db:emphasis>, const char *<db:emphasis>uri</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>initializeEngine</db:methodname>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>uri</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initializeEngine(QQmlEngine *engine, const char *uri) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initializes the extension from the <db:code role="parameter">uri</db:code> using the <db:code role="parameter">engine</db:code>. Here an application plugin might, for example, expose some data or objects to QML, as context properties on the engine's root context.</db:para>
</db:section>
<db:section xml:id="registerTypes">
<db:title>[override pure virtual] void QQmlExtensionPlugin::registerTypes(const char *<db:emphasis>uri</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>registerTypes</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>uri</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void registerTypes(const char *uri) override = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers the QML types in the given <db:code role="parameter">uri</db:code>. Subclasses should implement this to call <db:link xlink:href="qqmlengine.xml#qmlRegisterType">qmlRegisterType</db:link>() for all types which are provided by the extension plugin.</db:para>
<db:para>The <db:code role="parameter">uri</db:code> is an identifier for the plugin generated by the QML engine based on the name and path of the extension's plugin library.</db:para>
</db:section>
<db:section xml:id="unregisterTypes">
<db:title>[virtual, since 6.0] void QQmlExtensionPlugin::unregisterTypes()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>unregisterTypes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unregisterTypes()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Override this method to unregister types manually registered in <db:link xlink:href="qqmlextensionplugin.xml#registerTypes">registerTypes</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
</db:section>
</db:article>
