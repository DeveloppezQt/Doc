<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlExtensionPlugin Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlextensionplugin.xml">QQmlExtensionPlugin</db:link> class provides an abstract base for custom QML extension plugins.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlExtensionPlugin</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QQmlExtensionPlugin is part of <db:simplelist><db:member>plugins</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qqmlextensionplugin.xml">QQmlExtensionPlugin</db:link> is a plugin interface that makes it possible to create QML extensions that can be loaded dynamically into QML applications. These extensions allow custom QML types to be made available to the QML engine.</db:para>
<db:para>To write a QML extension plugin:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Subclass <db:link xlink:href="qqmlextensionplugin.xml">QQmlExtensionPlugin</db:link></db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Use the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro to register the plugin with the Qt meta object system</db:para>
</db:listitem>
<db:listitem>
<db:para>Override the <db:link xlink:href="qqmlextensionplugin.xml#registerTypes">registerTypes</db:link>() method and call <db:link xlink:href="qqmlengine.xml#qmlRegisterType-2">qmlRegisterType</db:link>() to register the types to be exported by the plugin</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Write a project file for the plugin</db:para>
</db:listitem>
<db:listitem>
<db:para>Create a <db:link xlink:href="qtqml-modules-qmldir.xml">qmldir file</db:link> to describe the plugin</db:para>
</db:listitem>
</db:orderedlist>
<db:para>QML extension plugins are for either application-specific or library-like plugins. Library plugins should limit themselves to registering types, as any manipulation of the engine's root context may cause conflicts or other issues in the library user's code.</db:para>
<db:section xml:id="timeexample-qml-extension-plugin">
<db:title>TimeExample QML extension plugin</db:title>
<db:para>Suppose there is a new <db:code>TimeModel</db:code> C++ class that should be made available as a new QML type. It provides the current time through <db:code>hour</db:code> and <db:code>minute</db:code> properties.</db:para>
<db:programlisting language="cpp">class TimeModel : public QObject
{
    Q_OBJECT
    Q_PROPERTY(int hour READ hour NOTIFY timeChanged)
    Q_PROPERTY(int minute READ minute NOTIFY timeChanged)
    ...
</db:programlisting>
<db:para>To make this type available, we create a plugin class named <db:code>QExampleQmlPlugin</db:code> which is a subclass of <db:link xlink:href="qqmlextensionplugin.xml">QQmlExtensionPlugin</db:link>. It overrides the <db:link xlink:href="qqmlextensionplugin.xml#registerTypes">registerTypes</db:link>() method in order to register the <db:code>TimeModel</db:code> type using <db:link xlink:href="qqmlengine.xml#qmlRegisterType-2">qmlRegisterType</db:link>(). It also uses the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro in the class definition to register the plugin with the Qt meta object system using a unique identifier for the plugin.</db:para>
<db:programlisting language="cpp">class QExampleQmlPlugin : public QQmlExtensionPlugin
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID QQmlExtensionInterface_iid)

public:
    void registerTypes(const char *uri) override
    {
        Q_ASSERT(uri == QLatin1String(&quot;TimeExample&quot;));
        qmlRegisterType&amp;lt;TimeModel&amp;gt;(uri, 1, 0, &quot;Time&quot;);
    }
};
</db:programlisting>
<db:para>This registers the <db:code>TimeModel</db:code> class with version <db:code>1.0</db:code> of this plugin library, as a QML type called <db:code>Time</db:code>. The <db:link xlink:href="qtglobal.xml#Q_ASSERT">Q_ASSERT</db:link>() macro can ensure the type namespace is imported correctly by any QML components that use this plugin. The <db:link xlink:href="qtqml-cppintegration-definetypes.xml">Defining QML Types from C++</db:link> article has more information about registering C++ types into the runtime.</db:para>
</db:section>
<db:section xml:id="project-settings-for-the-plugin">
<db:title>Project settings for the plugin</db:title>
<db:para>Additionally, the project file (<db:code>.pro</db:code>) defines the project as a plugin library, specifies it should be built into the <db:code>imports/TimeExample</db:code> directory, and registers the plugin target name and various other details:</db:para>
<db:programlisting language="cpp">TEMPLATE = lib
CONFIG += qt plugin
QT += qml

DESTDIR = imports/TimeExample
TARGET = qmlqtimeexampleplugin
SOURCES += qexampleqmlplugin.cpp
</db:programlisting>
</db:section>
<db:section xml:id="plugin-definition-in-the-qmldir">
<db:title>Plugin definition in the qmldir</db:title>
<db:para>Finally, a <db:link xlink:href="qtqml-modules-qmldir.xml">qmldir file</db:link> is required in the <db:code>imports/TimeExample</db:code> directory to describe the plugin and the types that it exports. The plugin includes a <db:code>Clock.qml</db:code> file along with the <db:code>qmlqtimeexampleplugin</db:code> that is built by the project (as shown above in the <db:code>.pro</db:code> file) so both of these need to be specified in the <db:code>qmldir</db:code> file:</db:para>
<db:programlisting language="cpp">module TimeExample
Clock 1.0 Clock.qml
plugin qmlqtimeexampleplugin
</db:programlisting>
<db:para>To make things easier for this example, the TimeExample source directory is in <db:code>imports/TimeExample</db:code>, and we build <db:link xlink:href="configure-options.xml#source-build-and-install-directories">in-source</db:link>. However, the structure of the source directory is not so important, as the <db:code>qmldir</db:code> file can specify paths to installed QML files.</db:para>
<db:para>What is important is the name of the directory that the qmldir is installed into. When the user imports our module, the QML engine uses the <db:link xlink:href="qtqml-modules-qmldir.xml#contents-of-a-module-definition-qmldir-file">module identifier</db:link> (<db:code>TimeExample</db:code>) to find the plugin, and so the directory in which it is installed must match the module identifier.</db:para>
<db:para>Once the project is built and installed, the new <db:code>Time</db:code> component is accessible by any QML component that imports the <db:code>TimeExample</db:code> module</db:para>
<db:programlisting language="qml">import TimeExample 1.0 // import types from the plugin

Clock { // this class is defined in QML (imports/TimeExample/Clock.qml)

    Time { // this class is defined in C++ (plugin.cpp)
        id: time
    }

    hours: time.hour
    minutes: time.minute

}
</db:programlisting>
<db:para>The full source code is available in the <db:link xlink:href="qtqml-qmlextensionplugins-example.xml">plugins example</db:link>.</db:para>
<db:para>The <db:link xlink:href="qtqml-tutorials-extending-qml-example.xml">Writing QML Extensions with C++</db:link> tutorial also contains a chapter on creating QML plugins.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlengine.xml#importPlugin">QQmlEngine::importPlugin</db:link>()</db:member>
<db:member><db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlExtensionPlugin">
<db:title>[explicit] QQmlExtensionPlugin::QQmlExtensionPlugin(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlExtensionPlugin</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlExtensionPlugin(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a QML extension plugin with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Note that this constructor is invoked automatically by the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro, so there is no need for calling it explicitly.</db:para>
</db:section>
<db:section xml:id="baseUrl">
<db:title>[since 5.1] QUrl QQmlExtensionPlugin::baseUrl() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>baseUrl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl baseUrl() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the URL of the directory from which the extension is loaded.</db:para>
<db:para>This is useful when the plugin also needs to load QML files or other assets from the same directory.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="initializeEngine">
<db:title>[override virtual] void QQmlExtensionPlugin::initializeEngine(QQmlEngine *<db:emphasis>engine</db:emphasis>, const char *<db:emphasis>uri</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>initializeEngine</db:methodname>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>uri</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initializeEngine(QQmlEngine *engine, const char *uri) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initializes the extension from the <db:code role="parameter">uri</db:code> using the <db:code role="parameter">engine</db:code>. Here an application plugin might, for example, expose some data or objects to QML, as context properties on the engine's root context.</db:para>
</db:section>
<db:section xml:id="registerTypes">
<db:title>[override pure virtual] void QQmlExtensionPlugin::registerTypes(const char *<db:emphasis>uri</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>registerTypes</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>uri</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void registerTypes(const char *uri) override = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers the QML types in the given <db:code role="parameter">uri</db:code>. Subclasses should implement this to call <db:link xlink:href="qqmlengine.xml#qmlRegisterType-2">qmlRegisterType</db:link>() for all types which are provided by the extension plugin.</db:para>
<db:para>The <db:code role="parameter">uri</db:code> is an identifier for the plugin generated by the QML engine based on the name and path of the extension's plugin library.</db:para>
</db:section>
</db:section>
</db:article>
