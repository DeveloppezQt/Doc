<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QQmlExtensionPlugin Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlextensionplugin.xml">QQmlExtensionPlugin</db:link> class provides an abstract base for custom QML extension plugins.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlExtensionPlugin</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qqmlextensioninterface.xml" xlink:role="class">QQmlExtensionInterface</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QQmlExtensionPlugin is part of <db:simplelist><db:member>plugins</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qqmlextensionplugin.xml">QQmlExtensionPlugin</db:link> is a plugin interface that makes it possible to create QML extensions that can be loaded dynamically into QML applications. These extensions allow custom QML types to be made available to the QML engine.</db:para>
<db:para>To write a QML extension plugin:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Subclass <db:link xlink:href="qqmlextensionplugin.xml">QQmlExtensionPlugin</db:link>, implement <db:link xlink:href="qqmlextensionplugin.xml#registerTypes">registerTypes</db:link>() method to register types using <db:link xlink:href="qqmlengine.xml#qmlRegisterType">qmlRegisterType</db:link>(), and export the class using the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro</db:para>
</db:listitem>
<db:listitem>
<db:para>Write an appropriate project file for the plugin</db:para>
</db:listitem>
<db:listitem>
<db:para>Create a <db:link xlink:href="qtqml-modules-qmldir.xml">qmldir file</db:link> to describe the plugin</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>QML extension plugins can be used to provide either application-specific or library-like plugins. Library plugins should limit themselves to registering types, as any manipulation of the engine's root context may cause conflicts or other issues in the library user's code.</db:para>
<db:section xml:id="an-example">
<db:title>An example</db:title>
<db:para>Suppose there is a new <db:code>TimeModel</db:code> C++ class that should be made available as a new QML element. It provides the current time through <db:code>hour</db:code> and <db:code>minute</db:code> properties, like this:</db:para>
<db:programlisting language="cpp">class TimeModel : public QObject
{
    Q_OBJECT
    Q_PROPERTY(int hour READ hour NOTIFY timeChanged)
    Q_PROPERTY(int minute READ minute NOTIFY timeChanged)
    ...
</db:programlisting>
<db:para>To make this class available as a QML type, create a plugin that registers this type with a specific <db:link xlink:href="qtqml-modules-topic.xml">module</db:link> using <db:link xlink:href="qqmlengine.xml#qmlRegisterType">qmlRegisterType</db:link>(). For this example the plugin module will be named <db:code>TimeExample</db:code> (as defined in the project file further below).</db:para>
<db:programlisting language="cpp">class QExampleQmlPlugin : public QQmlExtensionPlugin
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.QQmlExtensionInterface&quot;)

public:
    void registerTypes(const char *uri)
    {
        Q_ASSERT(uri == QLatin1String(&quot;TimeExample&quot;));
        qmlRegisterType&lt;TimeModel&gt;(uri, 1, 0, &quot;Time&quot;);
    }
};
</db:programlisting>
<db:para>This registers the <db:code>TimeModel</db:code> class with the 1.0 version of this plugin library, as a QML type called <db:code>Time</db:code>. The <db:link xlink:href="qtglobal.xml#Q_ASSERT">Q_ASSERT</db:link> statement ensures the module is imported correctly by any QML components that use this plugin.</db:para>
<db:para>The project file defines the project as a plugin library and specifies it should be built into the <db:code>imports/TimeExample</db:code> directory:</db:para>
<db:programlisting language="cpp">TEMPLATE = lib
CONFIG += qt plugin
QT += qml

DESTDIR = imports/TimeExample
TARGET = qmlqtimeexampleplugin
...
</db:programlisting>
<db:para>Finally, a <db:link xlink:href="qtqml-modules-qmldir.xml">qmldir file</db:link> is required in the <db:code>imports/TimeExample</db:code> directory that describes the plugin. This directory includes a <db:code>Clock.qml</db:code> file that should be bundled with the plugin, so it needs to be specified in the <db:code>qmldir</db:code> file:</db:para>
<db:programlisting language="cpp">module TimeExample
Clock 1.0 Clock.qml
plugin qmlqtimeexampleplugin

</db:programlisting>
<db:para>Once the project is built and installed, the new <db:code>Time</db:code> element can be used by any QML component that imports the <db:code>TimeExample</db:code> module:</db:para>
<db:programlisting language="qml">import TimeExample 1.0 // import types from the plugin

Clock { // this class is defined in QML (imports/TimeExample/Clock.qml)

    Time { // this class is defined in C++ (plugin.cpp)
        id: time
    }

    hours: time.hour
    minutes: time.minute

}
</db:programlisting>
<db:para>The full source code is available in the <db:link xlink:href="qtqml-qmlextensionplugins-example.xml">plugins example</db:link>.</db:para>
<db:para>The <db:link xlink:href="qml-extending-tutorial-index.xml">Writing QML Extensions with C++</db:link> tutorial also contains a chapter on creating QML plugins.</db:para>
<db:para>Note that the <db:link xlink:href="">Qt Quick 1</db:link> version is called QDeclarativeExtensionPlugin.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlengine.xml#importPlugin">QQmlEngine::importPlugin</db:link>()</db:member>
<db:member><db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlExtensionPlugin">
<db:title>[explicit] QQmlExtensionPlugin::QQmlExtensionPlugin(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a QML extension plugin with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Note that this constructor is invoked automatically by the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro, so there is no need for calling it explicitly.</db:para>
</db:section>
<db:section xml:id="baseUrl">
<db:title>[since 5.1] QUrl QQmlExtensionPlugin::baseUrl() const</db:title>
<db:para>Returns the URL of the directory from which the extension is loaded.</db:para>
<db:para>This is useful when the plugin also needs to load QML files or other assets from the same directory.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="initializeEngine">
<db:title>[override virtual] void QQmlExtensionPlugin::initializeEngine(QQmlEngine *<db:emphasis>engine</db:emphasis>, const char *<db:emphasis>uri</db:emphasis>)</db:title>
<db:para>Initializes the extension from the <db:code role="parameter">uri</db:code> using the <db:code role="parameter">engine</db:code>. Here an application plugin might, for example, expose some data or objects to QML, as context properties on the engine's root context.</db:para>
</db:section>
<db:section xml:id="registerTypes">
<db:title>[override pure virtual] void QQmlExtensionPlugin::registerTypes(const char *<db:emphasis>uri</db:emphasis>)</db:title>
<db:para>Registers the QML types in the given <db:code role="parameter">uri</db:code>. Subclasses should implement this to call <db:link xlink:href="qqmlengine.xml#qmlRegisterType">qmlRegisterType</db:link>() for all types which are provided by the extension plugin.</db:para>
<db:para>The <db:code role="parameter">uri</db:code> is an identifier for the plugin generated by the QML engine based on the name and path of the extension's plugin library.</db:para>
</db:section>
</db:section>
</db:article>
