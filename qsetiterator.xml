<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSetIterator Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QSetIterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsetiterator.xml">QSetIterator</db:link> class provides a Java-style const iterator for <db:link xlink:href="qset.xml">QSet</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSetIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qset.xml">QSet</db:link> has both <db:link xlink:href="java-style-iterators.xml#java-style-iterators">Java-style iterators</db:link> and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link>. STL-style iterators are more efficient and should be preferred.</db:para>
<db:para><db:link xlink:href="qsetiterator.xml">QSetIterator</db:link>&lt;T&gt; allows you to iterate over a <db:link xlink:href="qset.xml">QSet</db:link>&lt;T&gt;. If you want to modify the set as you iterate over it, use <db:link xlink:href="qmutablesetiterator.xml">QMutableSetIterator</db:link>&lt;T&gt; instead.</db:para>
<db:para>The constructor takes a <db:link xlink:href="qset.xml">QSet</db:link> as argument. After construction, the iterator is located at the very beginning of the set (before the first item). Here's how to iterate over all the elements sequentially:</db:para>
<db:programlisting language="cpp">QSet&lt;QString&gt; set;
...
QSetIterator&lt;QString&gt; i(set);
while (i.hasNext())
    float f = i.next();
</db:programlisting>
<db:para>The <db:link xlink:href="qsetiterator.xml#next">next</db:link>() function returns the next item in the set and advances the iterator. Unlike STL-style iterators, Java-style iterators point <db:emphasis>between</db:emphasis> items rather than directly <db:emphasis>at</db:emphasis> items. The first call to <db:link xlink:href="qsetiterator.xml#next">next</db:link>() advances the iterator to the position between the first and second item, and returns the first item; the second call to <db:link xlink:href="qsetiterator.xml#next">next</db:link>() advances the iterator to the position between the second and third item, returning the second item; and so on.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/javaiterators1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>If you want to find all occurrences of a particular value, use <db:link xlink:href="qsetiterator.xml#findNext">findNext</db:link>() in a loop.</db:para>
<db:para>Multiple iterators can be used on the same set. If the set is modified while a <db:link xlink:href="qsetiterator.xml">QSetIterator</db:link> is active, the <db:link xlink:href="qsetiterator.xml">QSetIterator</db:link> will continue iterating over the original set, ignoring the modified copy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablesetiterator.xml">QMutableSetIterator</db:link></db:member>
<db:member><db:link xlink:href="qset-const-iterator.xml">QSet::const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSetIterator">
<db:title>QSetIterator::QSetIterator(const QSet&lt;T&gt; &amp;<db:emphasis>set</db:emphasis>)</db:title>
<db:para>Constructs an iterator for traversing <db:code role="parameter">set</db:code>. The iterator is set to be at the front of the set (before the first item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsetiterator.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QSetIterator&lt;T&gt; &amp;QSetIterator::operator=(const QSet&lt;T&gt; &amp;<db:emphasis>set</db:emphasis>)</db:title>
<db:para>Makes the iterator operate on <db:code role="parameter">set</db:code>. The iterator is set to be at the front of the set (before the first item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsetiterator.xml#toFront">toFront</db:link>()</db:member>
<db:member><db:link xlink:href="qsetiterator.xml#toBack">toBack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toFront">
<db:title>void QSetIterator::toFront()</db:title>
<db:para>Moves the iterator to the front of the container (before the first item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsetiterator.xml#toBack">toBack</db:link>()</db:member>
<db:member><db:link xlink:href="qsetiterator.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findNext">
<db:title>bool QSetIterator::findNext(const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Searches for <db:code role="parameter">value</db:code> starting from the current iterator position forward. Returns true if <db:code role="parameter">value</db:code> is found; otherwise returns false.</db:para>
<db:para>After the call, if <db:code role="parameter">value</db:code> was found, the iterator is positioned just after the matching item; otherwise, the iterator is positioned at the back of the container.</db:para>
</db:section>
<db:section xml:id="hasNext">
<db:title>bool QSetIterator::hasNext() const</db:title>
<db:para>Returns true if there is at least one item ahead of the iterator, i.e. the iterator is <db:emphasis>not</db:emphasis> at the back of the container; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsetiterator.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="next">
<db:title>const T &amp;QSetIterator::next()</db:title>
<db:para>Returns the next item and advances the iterator by one position.</db:para>
<db:para>Calling this function on an iterator located at the back of the container leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsetiterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qsetiterator.xml#peekNext">peekNext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="peekNext">
<db:title>const T &amp;QSetIterator::peekNext() const</db:title>
<db:para>Returns the next item without moving the iterator.</db:para>
<db:para>Calling this function on an iterator located at the back of the container leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsetiterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qsetiterator.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toBack">
<db:title>void QSetIterator::toBack()</db:title>
<db:para>Moves the iterator to the back of the container (after the last item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsetiterator.xml#toFront">toFront</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
