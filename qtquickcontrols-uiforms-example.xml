<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Controls - UI Forms</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to separate the application logic from the UI.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-example-uiforms.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>UI Forms</db:emphasis> demonstrates how to separate the application logic from the UI using <db:emphasis>ui.qml</db:emphasis> files. The example is a simple interface to a customer database, purely written in QML and JavaScript.</db:para>
<db:para>UI Forms are rigorously split into <db:emphasis>.qml</db:emphasis> and <db:emphasis>.js</db:emphasis> files that contain the business logic, and <db:emphasis>.ui.qml</db:emphasis> files that only contain the purely declarative description of the UI. The <db:emphasis>.ui.qml</db:emphasis> files act as forms and they should be only edited in the Design mode of Qt Creator.</db:para>
<db:section xml:id="exporting-items-from-forms">
<db:title>Exporting Items from Forms</db:title>
<db:para>In all forms, items that are supposed to interact with the application logic are exported:</db:para>
<db:programlisting language="cpp">property alias cancel: cancel
property alias save: save
property alias textArea: textArea
</db:programlisting>
<db:para>This is the way the items are exported in <db:emphasis>NotesForm.ui.qml</db:emphasis>, so they can be used in <db:emphasis>Notes.ui.qml</db:emphasis> to implement the logic as follows:</db:para>
<db:programlisting language="cpp">function readData() {
    CustomerModel.selection.forEach(function (rowIndex) {
        form.textArea.text = CustomerModel.model.get(rowIndex).notes
    })

    save.enabled = true
    cancel.enabled = true
    form.textArea.enabled = true
}

function writeData() {
    CustomerModel.selection.forEach(function (rowIndex) {
        var data = CustomerModel.model.get(rowIndex)
        data.notes = form.textArea.text
        CustomerModel.model.set(rowIndex, data)
    })
}

cancel.onClicked: readData()
save.onClicked: writeData()
</db:programlisting>
</db:section>
<db:section xml:id="implementing-the-backend-in-a-singleton">
<db:title>Implementing the Backend in a Singleton</db:title>
<db:para>Because the <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> is accessed from several different <db:emphasis>.qml</db:emphasis> files, we access the <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> through a singleton defined in <db:emphasis>CustomerModel.qml</db:emphasis> and registered in <db:emphasis>main.ccp</db:emphasis>. This way we do not have to rely on the QML context scoping rules to access the <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link>.</db:para>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="uiforms/MainForm.ui.qml">uiforms/MainForm.ui.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="uiforms/main.cpp">uiforms/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="uiforms/main.qml">uiforms/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="uiforms/qml/CustomerModel.qml">uiforms/qml/CustomerModel.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="uiforms/qml/History.qml">uiforms/qml/History.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="uiforms/qml/HistoryForm.ui.qml">uiforms/qml/HistoryForm.ui.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="uiforms/qml/Notes.qml">uiforms/qml/Notes.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="uiforms/qml/NotesForm.ui.qml">uiforms/qml/NotesForm.ui.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="uiforms/qml/Settings.qml">uiforms/qml/Settings.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="uiforms/qml/SettingsForm.ui.qml">uiforms/qml/SettingsForm.ui.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="uiforms/uiforms.pro">uiforms/uiforms.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="uiforms/uiforms.qrc">uiforms/uiforms.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
