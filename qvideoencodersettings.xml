<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVideoEncoderSettings Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvideoencodersettings.xml">QVideoEncoderSettings</db:link> class provides a set of video encoder settings.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVideoEncoderSettings</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QVideoEncoderSettings is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_recording</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A video encoder settings object is used to specify the video encoder settings used by <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link>. Video encoder settings are selected by constructing a <db:link xlink:href="qvideoencodersettings.xml">QVideoEncoderSettings</db:link> object, setting the desired properties and then passing it to a <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> instance using the <db:link xlink:href="qmediarecorder.xml#setEncodingSettings">QMediaRecorder::setEncodingSettings</db:link>() function.</db:para>
<db:programlisting language="cpp">QVideoEncoderSettings videoSettings;
videoSettings.setCodec(&quot;video/mpeg2&quot;);
videoSettings.setResolution(640, 480);

recorder-&amp;gt;setVideoSettings(videoSettings);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link></db:member>
<db:member><db:link xlink:href="qvideoencodersettingscontrol.xml">QVideoEncoderSettingsControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QVideoEncoderSettings">
<db:title>QVideoEncoderSettings::QVideoEncoderSettings()</db:title>
<db:constructorsynopsis>
<db:methodname>QVideoEncoderSettings</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoEncoderSettings()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null video encoder settings object.</db:para>
</db:section>
<db:section xml:id="QVideoEncoderSettings-1">
<db:title>QVideoEncoderSettings::QVideoEncoderSettings(const QVideoEncoderSettings &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QVideoEncoderSettings</db:methodname>
<db:methodparam>
<db:type>const QVideoEncoderSettings &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoEncoderSettings(const QVideoEncoderSettings &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of the video encoder settings object <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QVideoEncoderSettings">
<db:title>QVideoEncoderSettings::~QVideoEncoderSettings()</db:title>
<db:destructorsynopsis>
<db:methodname>~QVideoEncoderSettings</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QVideoEncoderSettings()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a video encoder settings object.</db:para>
</db:section>
<db:section xml:id="bitRate">
<db:title>int QVideoEncoderSettings::bitRate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>bitRate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int bitRate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns bit rate of the encoded video stream in bits per second.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#setBitRate">setBitRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="codec">
<db:title>QString QVideoEncoderSettings::codec() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>codec</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString codec() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the video codec.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#setCodec">setCodec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="encodingMode">
<db:title>QMultimedia::EncodingMode QVideoEncoderSettings::encodingMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultimedia::EncodingMode</db:type>
<db:methodname>encodingMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultimedia::EncodingMode encodingMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the video encoding mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#setEncodingMode">setEncodingMode</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimedia.xml#EncodingMode-enum">QMultimedia::EncodingMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="encodingOption">
<db:title>QVariant QVideoEncoderSettings::encodingOption(const QString &amp;<db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>encodingOption</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant encodingOption(const QString &amp;option) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of encoding <db:code role="parameter">option</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#setEncodingOption">setEncodingOption</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoencodersettings.xml#encodingOptions">encodingOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="encodingOptions">
<db:title>QVariantMap QVideoEncoderSettings::encodingOptions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariantMap</db:type>
<db:methodname>encodingOptions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariantMap encodingOptions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the all the encoding options as <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#encodingOption">encodingOption</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoencodersettings.xml#setEncodingOptions">setEncodingOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameRate">
<db:title>qreal QVideoEncoderSettings::frameRate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>frameRate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal frameRate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the video frame rate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#setFrameRate">setFrameRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QVideoEncoderSettings::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Identifies if a video encoder settings object is uninitalized.</db:para>
<db:para>Returns true if the settings are null, and false if they are not.</db:para>
</db:section>
<db:section xml:id="quality">
<db:title>QMultimedia::EncodingQuality QVideoEncoderSettings::quality() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMultimedia::EncodingQuality</db:type>
<db:methodname>quality</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultimedia::EncodingQuality quality() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the video encoding quality.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#setQuality">setQuality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resolution">
<db:title>QSize QVideoEncoderSettings::resolution() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>resolution</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize resolution() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the resolution of the encoded video.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#setResolution">setResolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBitRate">
<db:title>void QVideoEncoderSettings::setBitRate(int <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBitRate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBitRate(int value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the bit rate of the encoded video stream to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#bitRate">bitRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCodec">
<db:title>void QVideoEncoderSettings::setCodec(const QString &amp;<db:emphasis>codec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCodec</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>codec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCodec(const QString &amp;codec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the video <db:code role="parameter">codec</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#codec">codec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEncodingMode">
<db:title>void QVideoEncoderSettings::setEncodingMode(QMultimedia::EncodingMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEncodingMode</db:methodname>
<db:methodparam>
<db:type>QMultimedia::EncodingMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEncodingMode(QMultimedia::EncodingMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the video encoding <db:code role="parameter">mode</db:code>.</db:para>
<db:para>If <db:link xlink:href="qmultimedia.xml#EncodingMode-enum">QMultimedia::ConstantQualityEncoding</db:link> is set, the quality encoding parameter is used and bit rate is ignored, otherwise the bitrate is used.</db:para>
<db:para>The rest of encoding settings are respected regardless of encoding mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#encodingMode">encodingMode</db:link>()</db:member>
<db:member><db:link xlink:href="qmultimedia.xml#EncodingMode-enum">QMultimedia::EncodingMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEncodingOption">
<db:title>void QVideoEncoderSettings::setEncodingOption(const QString &amp;<db:emphasis>option</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEncodingOption</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEncodingOption(const QString &amp;option, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the encoding <db:code role="parameter">option</db:code> <db:code role="parameter">value</db:code>.</db:para>
<db:para>The supported set and meaning of encoding options are system and selected codec specific.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#encodingOption">encodingOption</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoencodersettings.xml#setEncodingOptions">setEncodingOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEncodingOptions">
<db:title>void QVideoEncoderSettings::setEncodingOptions(const QVariantMap &amp;<db:emphasis>options</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEncodingOptions</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>options</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEncodingOptions(const QVariantMap &amp;options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replace all the encoding options with <db:code role="parameter">options</db:code>.</db:para>
<db:para>The supported set and meaning of encoding options are system and selected codec specific.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#encodingOptions">encodingOptions</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoencodersettings.xml#encodingOption">encodingOption</db:link>()</db:member>
<db:member><db:link xlink:href="qvideoencodersettings.xml#setEncodingOption">setEncodingOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFrameRate">
<db:title>void QVideoEncoderSettings::setFrameRate(qreal <db:emphasis>rate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFrameRate</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>rate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFrameRate(qreal rate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the video frame <db:code role="parameter">rate</db:code>.</db:para>
<db:para>A value of 0 indicates the encoder should make an optimal choice based on what is available from the video source and the limitations of the codec.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#frameRate">frameRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setQuality">
<db:title>void QVideoEncoderSettings::setQuality(QMultimedia::EncodingQuality <db:emphasis>quality</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setQuality</db:methodname>
<db:methodparam>
<db:type>QMultimedia::EncodingQuality</db:type>
<db:parameter>quality</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setQuality(QMultimedia::EncodingQuality quality)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the video encoding <db:code role="parameter">quality</db:code>.</db:para>
<db:para>Setting the video quality parameter allows backend to choose the balanced set of encoding parameters to achieve the desired quality level.</db:para>
<db:para>The <db:code role="parameter">quality</db:code> settings parameter is only used in the <db:link xlink:href="qmultimedia.xml#EncodingMode-enum">constant quality</db:link> <db:link xlink:href="qvideoencodersettings.xml#encodingMode">encoding mode</db:link>. The <db:code role="parameter">quality</db:code> settings parameter is only used in the <db:link xlink:href="qmultimedia.xml#EncodingMode-enum">constant quality</db:link> <db:link xlink:href="qvideoencodersettings.xml#encodingMode">encoding mode</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#quality">quality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResolution">
<db:title>void QVideoEncoderSettings::setResolution(const QSize &amp;<db:emphasis>resolution</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setResolution</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>resolution</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setResolution(const QSize &amp;resolution)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">resolution</db:code> of the encoded video.</db:para>
<db:para>An empty <db:link xlink:href="qsize.xml">QSize</db:link> indicates the encoder should make an optimal choice based on what is available from the video source and the limitations of the codec.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideoencodersettings.xml#resolution">resolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResolution-1">
<db:title>void QVideoEncoderSettings::setResolution(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setResolution</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setResolution(int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code> of the resolution of the encoded video.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QVideoEncoderSettings::operator!=(const QVideoEncoderSettings &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QVideoEncoderSettings &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QVideoEncoderSettings &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Determines if <db:code role="parameter">other</db:code> is of equal value to a video encoder settings object.</db:para>
<db:para>Returns true if the settings objects are not of equal value, and false if they are of equal value.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QVideoEncoderSettings &amp;QVideoEncoderSettings::operator=(const QVideoEncoderSettings &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVideoEncoderSettings &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QVideoEncoderSettings &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoEncoderSettings &amp; operator=(const QVideoEncoderSettings &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the value of <db:code role="parameter">other</db:code> to a video encoder settings object.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QVideoEncoderSettings::operator==(const QVideoEncoderSettings &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QVideoEncoderSettings &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QVideoEncoderSettings &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Determines if <db:code role="parameter">other</db:code> is of equal value to a video encoder settings object.</db:para>
<db:para>Returns true if the settings objects are of equal value, and false if they are not of equal value.</db:para>
</db:section>
</db:section>
</db:article>
