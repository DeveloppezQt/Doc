<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Text QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Specifies how to add formatted text to a scene.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-item.xml">Item</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Text is part of <db:simplelist><db:member>qtquick-visual</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Text items can display both plain and rich text. For example, you can define red text with a specific font and size like this:</db:para>
<db:programlisting language="qml">Text {
    text: &quot;Hello World!&quot;
    font.family: &quot;Helvetica&quot;
    font.pointSize: 24
    color: &quot;red&quot;
}
</db:programlisting>
<db:para>Use HTML-style markup or Markdown to define rich text:</db:para>
<db:section xml:id="using-html-style">
<db:title>Using HTML-style</db:title>
<db:programlisting language="qml">Text {
    text: &quot;&lt;b&gt;Hello&lt;/b&gt; &lt;i&gt;World!&lt;/i&gt;&quot;
}
</db:programlisting>
</db:section>
<db:section xml:id="using-markdown">
<db:title>Using Markdown</db:title>
<db:programlisting language="qml">Text {
    text: &quot;**Hello** *World!*&quot;
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-text.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>If height and width are not explicitly set, Text will try to determine how much room is needed and set it accordingly. Unless <db:link xlink:href="qml-qtquick-text.xml#wrapMode-prop">wrapMode</db:link> is set, it will always prefer width to height (all text will be placed on a single line).</db:para>
<db:para>To fit a single line of plain text to a set width, you can use the <db:link xlink:href="qml-qtquick-text.xml#elide-prop">elide</db:link> property.</db:para>
<db:para>Note that the <db:link xlink:href="richtext-html-subset.xml">Supported HTML Subset</db:link> is limited. Also, if the text contains HTML img tags that load remote images, the text is reloaded.</db:para>
<db:para>Text provides read-only text. For editable text, see <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-text-example.xml#fonts">Fonts example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="effectiveHorizontalAlignment-prop">
<db:title>[read-only] effectiveHorizontalAlignment : enumeration</db:title>
<db:bridgehead renderas="sect2">horizontalAlignment : enumeration</db:bridgehead><db:bridgehead renderas="sect2">verticalAlignment : enumeration</db:bridgehead><db:para>Sets the horizontal and vertical alignment of the text within the Text items width and height. By default, the text is vertically aligned to the top. Horizontal alignment follows the natural alignment of the text, for example text that is read from left to right will be aligned to the left.</db:para>
<db:para>The valid values for <db:code>horizontalAlignment</db:code> are <db:code>Text.AlignLeft</db:code>, <db:code>Text.AlignRight</db:code>, <db:code>Text.AlignHCenter</db:code> and <db:code>Text.AlignJustify</db:code>. The valid values for <db:code>verticalAlignment</db:code> are <db:code>Text.AlignTop</db:code>, <db:code>Text.AlignBottom</db:code> and <db:code>Text.AlignVCenter</db:code>.</db:para>
<db:para>Note that for a single line of text, the size of the text is the area of the text. In this common case, all alignments are equivalent. If you want the text to be, say, centered in its parent, then you will need to either modify the <db:link xlink:href="qml-qtquick-item.xml#anchors-prop">Item::anchors</db:link>, or set <db:link xlink:href="qml-qtquick-text.xml#horizontalAlignment-prop">horizontalAlignment</db:link> to Text.AlignHCenter and bind the width to that of the parent.</db:para>
<db:para>When using the attached property <db:link xlink:href="qml-qtquick-layoutmirroring.xml#enabled-prop">LayoutMirroring::enabled</db:link> to mirror application layouts, the horizontal alignment of text will also be mirrored. However, the property <db:code>horizontalAlignment</db:code> will remain unchanged. To query the effective horizontal alignment of Text, use the read-only property <db:code>effectiveHorizontalAlignment</db:code>.</db:para>
</db:section>
<db:section xml:id="bottomPadding-prop">
<db:title>bottomPadding : real</db:title>
<db:bridgehead renderas="sect2">leftPadding : real</db:bridgehead><db:bridgehead renderas="sect2">padding : real</db:bridgehead><db:bridgehead renderas="sect2">rightPadding : real</db:bridgehead><db:bridgehead renderas="sect2">topPadding : real</db:bridgehead><db:para>These properties hold the padding around the content. This space is reserved in addition to the <db:link xlink:href="qml-qtquick-text.xml#contentWidth-prop">contentWidth</db:link> and <db:link xlink:href="qml-qtquick-text.xml#contentHeight-prop">contentHeight</db:link>.</db:para>
</db:section>
<db:section xml:id="advance-prop">
<db:title>[read-only] advance : size</db:title>
<db:para>The distance, in pixels, from the baseline origin of the first character of the text item, to the baseline origin of the first character in a text item occurring directly after this one in a text flow.</db:para>
<db:para>Note that the advance can be negative if the text flows from right to left.</db:para>
</db:section>
<db:section xml:id="antialiasing-prop">
<db:title>antialiasing : bool</db:title>
<db:para>Used to decide if the Text should use antialiasing or not. Only Text with <db:link xlink:href="qml-qtquick-text.xml#renderType-prop">renderType</db:link> of Text.NativeRendering can disable antialiasing.</db:para>
<db:para>The default is <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="baseUrl-prop">
<db:title>baseUrl : url</db:title>
<db:para>This property specifies a base URL that is used to resolve relative URLs within the text.</db:para>
<db:para>Urls are resolved to be within the same directory as the target of the base URL meaning any portion of the path after the last '/' will be ignored.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Base URL</db:para>
</db:th>
<db:th>
<db:para>Relative URL</db:para>
</db:th>
<db:th>
<db:para>Resolved URL</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>http://qt-project.org/</db:para>
</db:td>
<db:td>
<db:para>images/logo.png</db:para>
</db:td>
<db:td>
<db:para>http://qt-project.org/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>http://qt-project.org/index.html</db:para>
</db:td>
<db:td>
<db:para>images/logo.png</db:para>
</db:td>
<db:td>
<db:para>http://qt-project.org/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>http://qt-project.org/content</db:para>
</db:td>
<db:td>
<db:para>images/logo.png</db:para>
</db:td>
<db:td>
<db:para>http://qt-project.org/content/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>http://qt-project.org/content/</db:para>
</db:td>
<db:td>
<db:para>images/logo.png</db:para>
</db:td>
<db:td>
<db:para>http://qt-project.org/content/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>http://qt-project.org/content/index.html</db:para>
</db:td>
<db:td>
<db:para>images/logo.png</db:para>
</db:td>
<db:td>
<db:para>http://qt-project.org/content/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>http://qt-project.org/content/index.html</db:para>
</db:td>
<db:td>
<db:para>../images/logo.png</db:para>
</db:td>
<db:td>
<db:para>http://qt-project.org/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>http://qt-project.org/content/index.html</db:para>
</db:td>
<db:td>
<db:para>/images/logo.png</db:para>
</db:td>
<db:td>
<db:para>http://qt-project.org/images/logo.png</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default value is the url of the QML file instantiating the Text item.</db:para>
</db:section>
<db:section xml:id="clip-prop">
<db:title>clip : bool</db:title>
<db:para>This property holds whether the text is clipped.</db:para>
<db:para>Note that if the text does not fit in the bounding rectangle, it will be abruptly chopped.</db:para>
<db:para>If you want to display potentially long text in a limited space, you probably want to use <db:code>elide</db:code> instead.</db:para>
</db:section>
<db:section xml:id="color-prop">
<db:title>color : color</db:title>
<db:para>The text color.</db:para>
<db:para>An example of green text defined using hexadecimal notation:</db:para>
<db:programlisting language="qml">Text {
    color: &quot;#00FF00&quot;
    text: &quot;green text&quot;
}
</db:programlisting>
<db:para>An example of steel blue text defined using an SVG color name:</db:para>
<db:programlisting language="qml">Text {
    color: &quot;steelblue&quot;
    text: &quot;blue text&quot;
}
</db:programlisting>
</db:section>
<db:section xml:id="contentHeight-prop">
<db:title>[read-only] contentHeight : real</db:title>
<db:para>Returns the height of the text, including height past the height that is covered due to there being more text than fits in the set height.</db:para>
</db:section>
<db:section xml:id="contentWidth-prop">
<db:title>[read-only] contentWidth : real</db:title>
<db:para>Returns the width of the text, including width past the width that is covered due to insufficient wrapping if WrapMode is set.</db:para>
</db:section>
<db:section xml:id="elide-prop">
<db:title>elide : enumeration</db:title>
<db:para>Set this property to elide parts of the text fit to the Text item's width. The text will only elide if an explicit width has been set.</db:para>
<db:para>This property cannot be used with rich text.</db:para>
<db:para>Eliding can be:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Text.ElideNone</db:para>
</db:td>
<db:td>
<db:para>- the default</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.ElideLeft</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.ElideMiddle</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.ElideRight</db:para>
</db:td>
<db:td/>
</db:tr>
</db:informaltable>
<db:para>If this property is set to Text.ElideRight, it can be used with <db:link xlink:href="qml-qtquick-text.xml#wrapMode-prop">wrapped</db:link> text. The text will only elide if <db:code>maximumLineCount</db:code>, or <db:code>height</db:code> has been set. If both <db:code>maximumLineCount</db:code> and <db:code>height</db:code> are set, <db:code>maximumLineCount</db:code> will apply unless the lines do not fit in the height allowed.</db:para>
<db:para>If the text is a multi-length string, and the mode is not <db:code>Text.ElideNone</db:code>, the first string that fits will be used, otherwise the last will be elided.</db:para>
<db:para>Multi-length strings are ordered from longest to shortest, separated by the Unicode &quot;String Terminator&quot; character <db:code>U009C</db:code> (write this in QML with <db:code>&quot;\u009C&quot;</db:code> or <db:code>&quot;\x9C&quot;</db:code>).</db:para>
</db:section>
<db:section xml:id="font.bold-prop">
<db:title>font.bold : bool</db:title>
<db:para>Sets whether the font weight is bold.</db:para>
</db:section>
<db:section xml:id="font.capitalization-prop">
<db:title>font.capitalization : enumeration</db:title>
<db:para>Sets the capitalization for the text.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Font.MixedCase</db:para>
</db:td>
<db:td>
<db:para>the normal case: no capitalization change is applied</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.AllUppercase</db:para>
</db:td>
<db:td>
<db:para>alters the text to be rendered in all uppercase type</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.AllLowercase</db:para>
</db:td>
<db:td>
<db:para>alters the text to be rendered in all lowercase type</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.SmallCaps</db:para>
</db:td>
<db:td>
<db:para>alters the text to be rendered in small-caps type</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.Capitalize</db:para>
</db:td>
<db:td>
<db:para>alters the text to be rendered with the first character of each word as an uppercase character</db:para>
<db:programlisting language="qml">Text { text: &quot;Hello&quot;; font.capitalization: Font.AllLowercase }
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="font.contextFontMerging-prop">
<db:title>[since 6.8] font.contextFontMerging : bool</db:title>
<db:para>If the selected font does not contain a certain character, Qt automatically chooses a similar-looking fallback font that contains the character. By default this is done on a character-by-character basis.</db:para>
<db:para>This means that in certain uncommon cases, many different fonts may be used to represent one string of text even if it's in the same script. Setting <db:code>contextFontMerging</db:code> to true will try finding the fallback font that matches the largest subset of the input string instead. This will be more expensive for strings where missing glyphs occur, but may give more consistent results. By default, <db:code>contextFontMerging</db:code> is <db:code>false</db:code>.</db:para>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#StyleStrategy-enum">QFont::StyleStrategy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font.family-prop">
<db:title>font.family : string</db:title>
<db:para>Sets the family name of the font.</db:para>
<db:para>The family name is case insensitive and may optionally include a foundry name, for example &quot;Helvetica [Cronyx]&quot;. If the family is available from more than one foundry and the foundry isn't specified, an arbitrary foundry is chosen. If the family isn't available a family will be set using the font matching algorithm.</db:para>
</db:section>
<db:section xml:id="font.features-prop">
<db:title>[since 6.6] font.features : object</db:title>
<db:para>Applies integer values to specific OpenType features when shaping the text based on the contents in <db:code role="parameter">features</db:code>. This provides advanced access to the font shaping process, and can be used to support font features that are otherwise not covered in the API.</db:para>
<db:para>The font features are represented by a map from four-letter tags to integer values. This integer value passed along with the tag in most cases represents a boolean value: A zero value means the feature is disabled, and a non-zero value means it is enabled. For certain font features, however, it may have other interpretations. For example, when applied to the <db:code>salt</db:code> feature, the value is an index that specifies the stylistic alternative to use.</db:para>
<db:para>For example, the <db:code>frac</db:code> font feature will convert diagonal fractions separated with a slash (such as <db:code>1/2</db:code>) with a different representation. Typically this will involve baking the full fraction into a single character width (such as <db:code>½</db:code>).</db:para>
<db:para>If a font supports the <db:code>frac</db:code> feature, then it can be enabled in the shaper as in the following code:</db:para>
<db:programlisting language="qml">Text {
    text: &quot;One divided by two is 1/2&quot;
    font.family: &quot;MyFractionFont&quot;
    font.features: { &quot;frac&quot;: 1 }
}
</db:programlisting>
<db:para>Multiple features can be assigned values in the same mapping. For instance, if you would like to also disable kerning for the font, you can explicitly disable this as follows:</db:para>
<db:programlisting language="qml">Text {
    text: &quot;One divided by two is 1/2&quot;
    font.family: &quot;MyFractionFont&quot;
    font.features: { &quot;frac&quot;: 1, &quot;kern&quot;: 0 }
}
</db:programlisting>
<db:para>You can also collect the font properties in an object:</db:para>
<db:programlisting language="qml">Text {
    text: &quot;One divided by two is 1/2&quot;
    font: {
        family: &quot;MyFractionFont&quot;
        features: { &quot;frac&quot;: 1, &quot;kern&quot;: 0 }
    }
}
</db:programlisting>
<db:note>
<db:para>By default, Qt will enable and disable certain font features based on other font properties. In particular, the <db:code>kern</db:code> feature will be enabled/disabled depending on the <db:link xlink:href="qml-qtquick-text.xml#font.kerning-prop">font.kerning</db:link> property of the <db:link xlink:href="qfont.xml">QFont</db:link>. In addition, all ligature features (<db:code>liga</db:code>, <db:code>clig</db:code>, <db:code>dlig</db:code>, <db:code>hlig</db:code>) will be disabled if a <db:link xlink:href="qml-qtquick-text.xml#font.letterSpacing-prop">font.letterSpacing</db:link> is set, but only for writing systems where the use of ligature is cosmetic. For writing systems where ligatures are required, the features will remain in their default state. The values set using <db:code>font.features</db:code> will override the default behavior. If, for instance, <db:code>&quot;kern&quot;</db:code> is set to 1, then kerning will always be enabled, regardless of whether the <db:link xlink:href="qml-qtquick-text.xml#font.kerning-prop">font.kerning</db:link> property is set to false. Similarly, if it is set to <db:code>0</db:code>, it will always be disabled.</db:para>
</db:note>
<db:para>This property was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setFeature">QFont::setFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font.hintingPreference-prop">
<db:title>font.hintingPreference : enumeration</db:title>
<db:para>Sets the preferred hinting on the text. This is a hint to the underlying text rendering system to use a certain level of hinting, and has varying support across platforms. See the table in the documentation for <db:link xlink:href="qfont.xml#HintingPreference-enum">QFont::HintingPreference</db:link> for more details.</db:para>
<db:note>
<db:para>This property only has an effect when used together with render type Text.NativeRendering.</db:para>
</db:note>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Font.PreferDefaultHinting</db:para>
</db:td>
<db:td>
<db:para>Use the default hinting level for the target platform.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.PreferNoHinting</db:para>
</db:td>
<db:td>
<db:para>If possible, render text without hinting the outlines of the glyphs. The text layout will be typographically accurate, using the same metrics as are used, for example, when printing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.PreferVerticalHinting</db:para>
</db:td>
<db:td>
<db:para>If possible, render text with no horizontal hinting, but align glyphs to the pixel grid in the vertical direction. The text will appear crisper on displays where the density is too low to give an accurate rendering of the glyphs. But since the horizontal metrics of the glyphs are unhinted, the text's layout will be scalable to higher density devices (such as printers) without impacting details such as line breaks.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.PreferFullHinting</db:para>
</db:td>
<db:td>
<db:para>If possible, render text with hinting in both horizontal and vertical directions. The text will be altered to optimize legibility on the target device, but since the metrics will depend on the target size of the text, the positions of glyphs, line breaks, and other typographical detail will not scale, meaning that a text layout may look different on devices with different pixel densities.</db:para>
<db:programlisting language="qml">Text { text: &quot;Hello&quot;; renderType: Text.NativeRendering; font.hintingPreference: Font.PreferVerticalHinting }
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="font.italic-prop">
<db:title>font.italic : bool</db:title>
<db:para>Sets whether the font has an italic style.</db:para>
</db:section>
<db:section xml:id="font.kerning-prop">
<db:title>font.kerning : bool</db:title>
<db:para>Enables or disables the kerning OpenType feature when shaping the text. Disabling this may improve performance when creating or changing the text, at the expense of some cosmetic features. The default value is true.</db:para>
<db:programlisting language="qml">Text { text: &quot;OATS FLAVOUR WAY&quot;; font.kerning: false }
</db:programlisting>
</db:section>
<db:section xml:id="font.letterSpacing-prop">
<db:title>font.letterSpacing : real</db:title>
<db:para>Sets the letter spacing for the font.</db:para>
<db:para>Letter spacing changes the default spacing between individual letters in the font. A positive value increases the letter spacing by the corresponding pixels; a negative value decreases the spacing.</db:para>
</db:section>
<db:section xml:id="font.pixelSize-prop">
<db:title>font.pixelSize : int</db:title>
<db:para>Sets the font size in pixels.</db:para>
<db:para>Using this function makes the font device dependent. Use <db:code>pointSize</db:code> to set the size of the font in a device independent manner.</db:para>
</db:section>
<db:section xml:id="font.pointSize-prop">
<db:title>font.pointSize : real</db:title>
<db:para>Sets the font size in points. The point size must be greater than zero.</db:para>
</db:section>
<db:section xml:id="font.preferShaping-prop">
<db:title>font.preferShaping : bool</db:title>
<db:para>Sometimes, a font will apply complex rules to a set of characters in order to display them correctly. In some writing systems, such as Brahmic scripts, this is required in order for the text to be legible, but in for example Latin script, it is merely a cosmetic feature. Setting the <db:code>preferShaping</db:code> property to false will disable all such features when they are not required, which will improve performance in most cases.</db:para>
<db:para>The default value is true.</db:para>
<db:programlisting language="qml">Text { text: &quot;Some text&quot;; font.preferShaping: false }
</db:programlisting>
</db:section>
<db:section xml:id="font.preferTypoLineMetrics-prop">
<db:title>[since 6.8] font.preferTypoLineMetrics : bool</db:title>
<db:para>competing sets of the vertical line metrics that provide the <db:link xlink:href="qfontmetricsf.xml#ascent">ascent</db:link>, <db:link xlink:href="qfontmetricsf.xml#descent">descent</db:link> and <db:link xlink:href="qfontmetricsf.xml#leading">leading</db:link> of the font. These are often referred to as the <db:link xlink:href="https://learn.microsoft.com/en-us/typography/opentype/spec/os2#uswinascent">win</db:link> (Windows) metrics and the <db:link xlink:href="https://learn.microsoft.com/en-us/typography/opentype/spec/os2#sta">typo</db:link> (typographical) metrics. While the specification recommends using the <db:code>typo</db:code> metrics for line spacing, many applications prefer the <db:code>win</db:code> metrics unless the <db:code>USE_TYPO_METRICS</db:code> flag is set in the <db:link xlink:href="https://learn.microsoft.com/en-us/typography/opentype/spec/os2#fsselection">fsSelection</db:link> field of the font. For backwards-compatibility reasons, this is also the case for Qt applications. This is not an issue for fonts that set the <db:code>USE_TYPO_METRICS</db:code> flag to indicate that the <db:code>typo</db:code> metrics are valid, nor for fonts where the <db:code>win</db:code> metrics and <db:code>typo</db:code> metrics match up. However, for certain fonts the <db:code>win</db:code> metrics may be larger than the preferable line spacing and the <db:code>USE_TYPO_METRICS</db:code> flag may be unset by mistake. For such fonts, setting <db:code>font.preferTypoLineMetrics</db:code> may give superior results.</db:para>
<db:para>By default, <db:code>preferTypoLineMetrics</db:code> is <db:code>false</db:code>.</db:para>
<db:para>This property was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#StyleStrategy-enum">QFont::StyleStrategy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font.strikeout-prop">
<db:title>font.strikeout : bool</db:title>
<db:para>Sets whether the font has a strikeout style.</db:para>
</db:section>
<db:section xml:id="font.styleName-prop">
<db:title>font.styleName : string</db:title>
<db:para>Sets the style name of the font.</db:para>
<db:para>The style name is case insensitive. If set, the font will be matched against style name instead of the font properties <db:link xlink:href="qml-qtquick-text.xml#font.weight-prop">font.weight</db:link>, <db:link xlink:href="qml-qtquick-text.xml#font.bold-prop">font.bold</db:link> and <db:link xlink:href="qml-qtquick-text.xml#font.italic-prop">font.italic</db:link>.</db:para>
</db:section>
<db:section xml:id="font.underline-prop">
<db:title>font.underline : bool</db:title>
<db:para>Sets whether the text is underlined.</db:para>
</db:section>
<db:section xml:id="font.variableAxes-prop">
<db:title>[since 6.7] font.variableAxes : object</db:title>
<db:para>Applies floating point values to variable axes in variable fonts.</db:para>
<db:para>Variable fonts provide a way to store multiple variations (with different weights, widths or styles) in the same font file. The variations are given as floating point values for a pre-defined set of parameters, called &quot;variable axes&quot;. Specific instances are typically given names by the font designer, and, in Qt, these can be selected using setStyleName() just like traditional sub-families.</db:para>
<db:para>In some cases, it is also useful to provide arbitrary values for the different axes. For instance, if a font has a Regular and Bold sub-family, you may want a weight in-between these. You could then manually request this by supplying a custom value for the &quot;wght&quot; axis in the font.</db:para>
<db:programlisting language="qml">Text {
    text: &quot;Foobar&quot;
    font.family: &quot;MyVariableFont&quot;
    font.variableAxes: { &quot;wght&quot;: (Font.Normal + Font.Bold) / 2.0 }
}
</db:programlisting>
<db:para>If the &quot;wght&quot; axis is supported by the font and the given value is within its defined range, a font corresponding to the weight 550.0 will be provided.</db:para>
<db:para>There are a few standard axes than many fonts provide, such as &quot;wght&quot; (weight), &quot;wdth&quot; (width), &quot;ital&quot; (italic) and &quot;opsz&quot; (optical size). They each have indivdual ranges defined in the font itself. For instance, &quot;wght&quot; may span from 100 to 900 (<db:link xlink:href="qfont.xml#Weight-enum">QFont::Thin</db:link> to <db:link xlink:href="qfont.xml#Weight-enum">QFont::Black</db:link>) whereas &quot;ital&quot; can span from 0 to 1 (from not italic to fully italic).</db:para>
<db:para>A font may also choose to define custom axes; the only limitation is that the name has to meet the requirements for a <db:link xlink:href="qfont-tag.xml">QFont::Tag</db:link> (sequence of four latin-1 characters.)</db:para>
<db:para>By default, no variable axes are set.</db:para>
<db:note>
<db:para>On Windows, variable axes are not supported if the optional GDI font backend is in use.</db:para>
</db:note>
<db:para>This property was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setVariableAxis">QFont::setVariableAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font.weight-prop">
<db:title>font.weight : int</db:title>
<db:para>The requested weight of the font. The weight requested must be an integer between 1 and 1000, or one of the predefined values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Font.Thin</db:para>
</db:td>
<db:td>
<db:para>100</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.ExtraLight</db:para>
</db:td>
<db:td>
<db:para>200</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.Light</db:para>
</db:td>
<db:td>
<db:para>300</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.Normal</db:para>
</db:td>
<db:td>
<db:para>400 (default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.Medium</db:para>
</db:td>
<db:td>
<db:para>500</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.DemiBold</db:para>
</db:td>
<db:td>
<db:para>600</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.Bold</db:para>
</db:td>
<db:td>
<db:para>700</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.ExtraBold</db:para>
</db:td>
<db:td>
<db:para>800</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Font.Black</db:para>
</db:td>
<db:td>
<db:para>900</db:para>
<db:programlisting language="qml">Text { text: &quot;Hello&quot;; font.weight: Font.DemiBold }
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="font.wordSpacing-prop">
<db:title>font.wordSpacing : real</db:title>
<db:para>Sets the word spacing for the font.</db:para>
<db:para>Word spacing changes the default spacing between individual words. A positive value increases the word spacing by a corresponding amount of pixels, while a negative value decreases the inter-word spacing accordingly.</db:para>
</db:section>
<db:section xml:id="fontInfo.bold-prop">
<db:title>[read-only] fontInfo.bold : bool</db:title>
<db:para>The bold state of the font info that has been resolved for the current font and <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link>. This is true if the weight of the resolved font is bold or higher.</db:para>
</db:section>
<db:section xml:id="fontInfo.family-prop">
<db:title>[read-only] fontInfo.family : string</db:title>
<db:para>The family name of the font that has been resolved for the current font and <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link>.</db:para>
</db:section>
<db:section xml:id="fontInfo.italic-prop">
<db:title>[read-only] fontInfo.italic : bool</db:title>
<db:para>The italic state of the font info that has been resolved for the current font and <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link>.</db:para>
</db:section>
<db:section xml:id="fontInfo.pixelSize-prop">
<db:title>[read-only] fontInfo.pixelSize : int</db:title>
<db:para>The pixel size of the font info that has been resolved for the current font and <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link>.</db:para>
</db:section>
<db:section xml:id="fontInfo.pointSize-prop">
<db:title>[read-only] fontInfo.pointSize : real</db:title>
<db:para>The pointSize of the font info that has been resolved for the current font and <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link>.</db:para>
</db:section>
<db:section xml:id="fontInfo.styleName-prop">
<db:title>[read-only] fontInfo.styleName : string</db:title>
<db:para>The style name of the font info that has been resolved for the current font and <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link>.</db:para>
</db:section>
<db:section xml:id="fontInfo.weight-prop">
<db:title>[read-only] fontInfo.weight : int</db:title>
<db:para>The weight of the font info that has been resolved for the current font and <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link>.</db:para>
</db:section>
<db:section xml:id="fontSizeMode-prop">
<db:title>fontSizeMode : enumeration</db:title>
<db:para>This property specifies how the font size of the displayed text is determined. The possible values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Text.FixedSize</db:para>
</db:td>
<db:td>
<db:para>(default) The size specified by <db:link xlink:href="qml-qtquick-text.xml#font.pixelSize-prop">font.pixelSize</db:link> or <db:link xlink:href="qml-qtquick-text.xml#font.pointSize-prop">font.pointSize</db:link> is used.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.HorizontalFit</db:para>
</db:td>
<db:td>
<db:para>The largest size up to the size specified that fits within the width of the item without wrapping is used.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.VerticalFit</db:para>
</db:td>
<db:td>
<db:para>The largest size up to the size specified that fits the height of the item is used.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.Fit</db:para>
</db:td>
<db:td>
<db:para>The largest size up to the size specified that fits within the width and height of the item is used.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The font size of fitted text has a minimum bound specified by the <db:link xlink:href="qml-qtquick-text.xml#minimumPointSize-prop">minimumPointSize</db:link> or <db:link xlink:href="qml-qtquick-text.xml#minimumPixelSize-prop">minimumPixelSize</db:link> property and maximum bound specified by either the <db:link xlink:href="qml-qtquick-text.xml#font.pointSize-prop">font.pointSize</db:link> or <db:link xlink:href="qml-qtquick-text.xml#font.pixelSize-prop">font.pixelSize</db:link> properties.</db:para>
<db:programlisting language="qml">Text { text: &quot;Hello&quot;; fontSizeMode: Text.Fit; minimumPixelSize: 10; font.pixelSize: 72 }
</db:programlisting>
<db:para>If the text does not fit within the item bounds with the minimum font size the text will be elided as per the <db:link xlink:href="qml-qtquick-text.xml#elide-prop">elide</db:link> property.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-text.xml#textFormat-prop">textFormat</db:link> property is set to <db:code>Text.RichText</db:code>, this will have no effect at all as the property will be ignored completely. If <db:link xlink:href="qml-qtquick-text.xml#textFormat-prop">textFormat</db:link> is set to <db:code>Text.StyledText</db:code>, then the property will be respected provided there is no font size tags inside the text. If there are font size tags, the property will still respect those. This can cause it to not fully comply with the fontSizeMode setting.</db:para>
</db:section>
<db:section xml:id="hoveredLink-prop">
<db:title>[read-only] hoveredLink : string</db:title>
<db:para>This property contains the link string when the user hovers a link embedded in the text. The link must be in rich text or HTML format and the <db:code role="parameter">hoveredLink</db:code> string provides access to the particular link.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#linkHovered-signal">linkHovered</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-text.xml#linkAt-method">linkAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineCount-prop">
<db:title>[read-only] lineCount : int</db:title>
<db:para>Returns the number of lines visible in the text item.</db:para>
<db:para>This property is not supported for rich text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#maximumLineCount-prop">maximumLineCount</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineHeight-prop">
<db:title>lineHeight : real</db:title>
<db:para>Sets the line height for the text. The value can be in pixels or a multiplier depending on <db:link xlink:href="qml-qtquick-text.xml#lineHeightMode-prop">lineHeightMode</db:link>.</db:para>
<db:para>The default value is a multiplier of 1.0. The line height must be a positive value.</db:para>
</db:section>
<db:section xml:id="lineHeightMode-prop">
<db:title>lineHeightMode : enumeration</db:title>
<db:para>This property determines how the line height is specified. The possible values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Text.ProportionalHeight</db:para>
</db:td>
<db:td>
<db:para>(default) sets the spacing proportional to the line (as a multiplier). For example, set to 2 for double spacing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.FixedHeight</db:para>
</db:td>
<db:td>
<db:para>sets the line height to a fixed line height (in pixels).</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="linkColor-prop">
<db:title>linkColor : color</db:title>
<db:para>The color of links in the text.</db:para>
<db:para>This property works with the StyledText <db:link xlink:href="qml-qtquick-text.xml#textFormat-prop">textFormat</db:link>, but not with RichText. Link color in RichText can be specified by including CSS style tags in the text.</db:para>
</db:section>
<db:section xml:id="maximumLineCount-prop">
<db:title>maximumLineCount : int</db:title>
<db:para>Set this property to limit the number of lines that the text item will show. If elide is set to Text.ElideRight, the text will be elided appropriately. By default, this is the value of the largest possible integer.</db:para>
<db:para>This property is not supported for rich text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#lineCount-prop">lineCount</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-text.xml#elide-prop">elide</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumPixelSize-prop">
<db:title>minimumPixelSize : int</db:title>
<db:para>This property specifies the minimum font pixel size of text scaled by the <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link> property.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link> is Text.FixedSize or the <db:link xlink:href="qml-qtquick-text.xml#font.pixelSize-prop">font.pixelSize</db:link> is -1 this property is ignored.</db:para>
</db:section>
<db:section xml:id="minimumPointSize-prop">
<db:title>minimumPointSize : int</db:title>
<db:para>This property specifies the minimum font point <db:link xlink:href="qml-size.xml">size</db:link> of text scaled by the <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link> property.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link> is Text.FixedSize or the <db:link xlink:href="qml-qtquick-text.xml#font.pointSize-prop">font.pointSize</db:link> is -1 this property is ignored.</db:para>
</db:section>
<db:section xml:id="renderType-prop">
<db:title>renderType : enumeration</db:title>
<db:para>Override the default rendering type for this component.</db:para>
<db:para>Supported render types are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Text.QtRendering</db:para>
</db:td>
<db:td>
<db:para>Text is rendered using a scalable distance field for each glyph.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.NativeRendering</db:para>
</db:td>
<db:td>
<db:para>Text is rendered using a platform-specific technique.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.CurveRendering</db:para>
</db:td>
<db:td>
<db:para>Text is rendered using a curve rasterizer running directly on the graphics hardware. (Introduced in Qt 6.7.0.)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Select <db:code>Text.NativeRendering</db:code> if you prefer text to look native on the target platform and do not require advanced features such as transformation of the text. Using such features in combination with the NativeRendering render type will lend poor and sometimes pixelated results.</db:para>
<db:para>Both <db:code>Text.QtRendering</db:code> and <db:code>Text.CurveRendering</db:code> are hardware-accelerated techniques. <db:code>QtRendering</db:code> is the faster of the two, but uses more memory and will exhibit rendering artifacts at large sizes. <db:code>CurveRendering</db:code> should be considered as an alternative in cases where <db:code>QtRendering</db:code> does not give good visual results or where reducing graphics memory consumption is a priority.</db:para>
<db:para>The default rendering type is determined by <db:link xlink:href="qquickwindow.xml#textRenderType">QQuickWindow::textRenderType</db:link>().</db:para>
</db:section>
<db:section xml:id="renderTypeQuality-prop">
<db:title>[since 6.0] renderTypeQuality : int</db:title>
<db:para>Override the default rendering type quality for this component. This is a low-level customization which can be ignored in most cases. It currently only has an effect when <db:link xlink:href="qml-qtquick-text.xml#renderType-prop">renderType</db:link> is <db:code>Text.QtRendering</db:code>.</db:para>
<db:para>The rasterization algorithm used by Text.QtRendering may give artifacts at large text sizes, such as sharp corners looking rounder than they should. If this is an issue for specific text items, increase the <db:code>renderTypeQuality</db:code> to improve rendering quality, at the expense of memory consumption.</db:para>
<db:para>The <db:code>renderTypeQuality</db:code> may be any integer over 0, or one of the following predefined values</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Text.DefaultRenderTypeQuality</db:para>
</db:td>
<db:td>
<db:para>-1 (default)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.LowRenderTypeQuality</db:para>
</db:td>
<db:td>
<db:para>26</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.NormalRenderTypeQuality</db:para>
</db:td>
<db:td>
<db:para>52</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.HighRenderTypeQuality</db:para>
</db:td>
<db:td>
<db:para>104</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.VeryHighRenderTypeQuality</db:para>
</db:td>
<db:td>
<db:para>208</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="style-prop">
<db:title>style : enumeration</db:title>
<db:para>Set an additional text style.</db:para>
<db:para>Supported text styles are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Text.Normal</db:para>
</db:td>
<db:td>
<db:para>- the default</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.Outline</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.Raised</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.Sunken</db:para>
</db:td>
<db:td>
<db:programlisting language="qml">Row {
    Text { font.pointSize: 24; text: &quot;Normal&quot; }
    Text { font.pointSize: 24; text: &quot;Raised&quot;; style: Text.Raised; styleColor: &quot;#AAAAAA&quot; }
    Text { font.pointSize: 24; text: &quot;Outline&quot;;style: Text.Outline; styleColor: &quot;red&quot; }
    Text { font.pointSize: 24; text: &quot;Sunken&quot;; style: Text.Sunken; styleColor: &quot;#AAAAAA&quot; }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-textstyle.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="styleColor-prop">
<db:title>styleColor : color</db:title>
<db:para>Defines the secondary color used by text styles.</db:para>
<db:para><db:code>styleColor</db:code> is used as the outline color for outlined text, and as the shadow color for raised or sunken text. If no style has been set, it is not used at all.</db:para>
<db:programlisting language="qml">Text { font.pointSize: 18; text: &quot;hello&quot;; style: Text.Raised; styleColor: &quot;gray&quot; }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#style-prop">style</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : string</db:title>
<db:para>The text to display. Text supports both plain and rich text strings.</db:para>
<db:para>The item will try to automatically determine whether the text should be treated as styled text. This determination is made using <db:link xlink:href="qt-sub-qtgui.xml#mightBeRichText">Qt::mightBeRichText</db:link>(). However, detection of Markdown is not automatic.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#textFormat-prop">textFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textFormat-prop">
<db:title>textFormat : enumeration</db:title>
<db:para>The way the <db:link xlink:href="qml-qtquick-text.xml#text-prop">text</db:link> property should be displayed.</db:para>
<db:para>Supported text formats are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Text.AutoText</db:para>
</db:td>
<db:td>
<db:para>(default) detected via the <db:link xlink:href="qt-sub-qtgui.xml#mightBeRichText">Qt::mightBeRichText</db:link>() heuristic</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.PlainText</db:para>
</db:td>
<db:td>
<db:para>all styling tags are treated as plain text</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.StyledText</db:para>
</db:td>
<db:td>
<db:para>optimized basic rich text as in HTML 3.2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.RichText</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="richtext-html-subset.xml">a subset of HTML 4</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.MarkdownText</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="https://commonmark.org/help/">CommonMark</db:link> plus the <db:link xlink:href="https://guides.github.com/features/mastering-markdown/">GitHub</db:link> extensions for tables and task lists (since 5.14)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If the text format is <db:code>Text.AutoText</db:code>, the Text item will automatically determine whether the text should be treated as styled text. This determination is made using <db:link xlink:href="qt-sub-qtgui.xml#mightBeRichText">Qt::mightBeRichText</db:link>(), which can detect the presence of an HTML tag on the first line of text, but cannot distinguish Markdown from plain text.</db:para>
<db:para><db:code>Text.StyledText</db:code> is an optimized format supporting some basic text styling markup, in the style of HTML 3.2:</db:para>
<db:programlisting language="cpp">&lt;b&gt;&lt;/b&gt; - bold
&lt;del&gt;&lt;/del&gt; - strike out (removed content)
&lt;s&gt;&lt;/s&gt; - strike out (no longer accurate or no longer relevant content)
&lt;strong&gt;&lt;/strong&gt; - bold
&lt;i&gt;&lt;/i&gt; - italic
&lt;br&gt; - new line
&lt;p&gt; - paragraph
&lt;u&gt; - underlined text
&lt;font color=&quot;color_name&quot; size=&quot;1-7&quot;&gt;&lt;/font&gt;
&lt;h1&gt; to &lt;h6&gt; - headers
&lt;a href=&quot;&quot;&gt; - anchor
&lt;img src=&quot;&quot; align=&quot;top,middle,bottom&quot; width=&quot;&quot; height=&quot;&quot;&gt; - inline images
&lt;ol type=&quot;&quot;&gt;, &lt;ul type=&quot;&quot;&gt; and &lt;li&gt; - ordered and unordered lists
&lt;pre&gt;&lt;/pre&gt; - preformatted
All entities
</db:programlisting>
<db:para><db:code>Text.StyledText</db:code> parser is strict, requiring tags to be correctly nested.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">Column {
    Text {
        font.pointSize: 24
        text: &quot;&lt;b&gt;Hello&lt;/b&gt; &lt;i&gt;World!&lt;/i&gt;&quot;
    }
    Text {
        font.pointSize: 24
        textFormat: Text.RichText
        text: &quot;&lt;b&gt;Hello&lt;/b&gt; &lt;i&gt;World!&lt;/i&gt;&quot;
    }
    Text {
        font.pointSize: 24
        textFormat: Text.PlainText
        text: &quot;&lt;b&gt;Hello&lt;/b&gt; &lt;i&gt;World!&lt;/i&gt;&quot;
    }
    Text {
        font.pointSize: 24
        textFormat: Text.MarkdownText
        text: &quot;**Hello** *World!*&quot;
    }
}
</db:programlisting>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-textformat.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:code>Text.RichText</db:code> supports a larger subset of HTML 4, as described on the <db:link xlink:href="richtext-html-subset.xml">Supported HTML Subset</db:link> page. You should prefer using <db:code>Text.PlainText</db:code>, <db:code>Text.StyledText</db:code> or <db:code>Text.MarkdownText</db:code> instead, as they offer better performance.</db:para>
<db:note>
<db:para>With <db:code>Text.MarkdownText</db:code>, and with the supported subset of HTML, some decorative elements are not rendered as they would be in a web browser:</db:para>
</db:note>
<db:itemizedlist>
<db:listitem>
<db:para>code blocks use the <db:link xlink:href="qfontdatabase.xml#SystemFont-enum">default monospace font</db:link> but without a surrounding highlight box</db:para>
</db:listitem>
<db:listitem>
<db:para>block quotes are indented, but there is no vertical line alongside the quote</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="truncated-prop">
<db:title>[read-only] truncated : bool</db:title>
<db:para>Returns true if the text has been truncated due to <db:link xlink:href="qml-qtquick-text.xml#maximumLineCount-prop">maximumLineCount</db:link> or <db:link xlink:href="qml-qtquick-text.xml#elide-prop">elide</db:link>.</db:para>
<db:para>This property is not supported for rich text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#maximumLineCount-prop">maximumLineCount</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-text.xml#elide-prop">elide</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wrapMode-prop">
<db:title>wrapMode : enumeration</db:title>
<db:para>Set this property to wrap the text to the Text item's width. The text will only wrap if an explicit width has been set. wrapMode can be one of:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Text.NoWrap</db:para>
</db:td>
<db:td>
<db:para>(default) no wrapping will be performed. If the text contains insufficient newlines, then <db:link xlink:href="qml-qtquick-text.xml#contentWidth-prop">contentWidth</db:link> will exceed a set width.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.WordWrap</db:para>
</db:td>
<db:td>
<db:para>wrapping is done on word boundaries only. If a word is too long, <db:link xlink:href="qml-qtquick-text.xml#contentWidth-prop">contentWidth</db:link> will exceed a set width.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.WrapAnywhere</db:para>
</db:td>
<db:td>
<db:para>wrapping is done at any point on a line, even if it occurs in the middle of a word.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Text.Wrap</db:para>
</db:td>
<db:td>
<db:para>if possible, wrapping occurs at a word boundary; otherwise it will occur at the appropriate point on the line, even in the middle of a word.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="lineLaidOut-signal">
<db:title>lineLaidOut(object <db:emphasis>line</db:emphasis>)</db:title>
<db:para>This signal is emitted for each line of text that is laid out during the layout process in plain text or styled text mode. It is not emitted in rich text mode. The specified <db:code role="parameter">line</db:code> object provides more details about the line that is currently being laid out.</db:para>
<db:para>This gives the opportunity to position and resize a line as it is being laid out. It can for example be used to create columns or lay out text around objects.</db:para>
<db:para>The properties of the specified <db:code role="parameter">line</db:code> object are:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Property name</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>number (read-only)</db:para>
</db:td>
<db:td>
<db:para>Line number, starts with zero.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>x</db:para>
</db:td>
<db:td>
<db:para>Specifies the line's x position inside the <db:code>Text</db:code> element.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>y</db:para>
</db:td>
<db:td>
<db:para>Specifies the line's y position inside the <db:code>Text</db:code> element.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>width</db:para>
</db:td>
<db:td>
<db:para>Specifies the width of the line.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>height</db:para>
</db:td>
<db:td>
<db:para>Specifies the height of the line.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>implicitWidth (read-only)</db:para>
</db:td>
<db:td>
<db:para>The width that the line would naturally occupy based on its contents, not taking into account any modifications made to <db:emphasis>width</db:emphasis>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>isLast (read-only)</db:para>
</db:td>
<db:td>
<db:para>Whether the line is the last. This property can change if you set the <db:emphasis>width</db:emphasis> property to a different value.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example, this will move the first 5 lines of a Text item by 100 pixels to the right:</db:para>
<db:programlisting language="cpp">onLineLaidOut: (line)=&gt; {
    if (line.number &lt; 5) {
        line.x = line.x + 100
        line.width = line.width - 100
    }
}
</db:programlisting>
<db:para>The following example will allow you to position an item at the end of the last line:</db:para>
<db:programlisting language="cpp">onLineLaidOut: (line)=&gt; {
    if (line.isLast) {
        lastLineMarker.x = line.x + line.implicitWidth
        lastLineMarker.y = line.y + (line.height - lastLineMarker.height) / 2
    }
}
</db:programlisting>
<db:note>
<db:para>The corresponding handler is <db:code>onLineLaidOut</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="linkActivated-signal">
<db:title>linkActivated(string <db:emphasis>link</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user clicks on a link embedded in the text. The link must be in rich text or HTML format and the <db:code role="parameter">link</db:code> string provides access to the particular link.</db:para>
<db:programlisting language="qml">    Text {
            textFormat: Text.RichText
            text: &quot;See the &lt;a href=\&quot;http://qt-project.org\&quot;&gt;Qt Project website&lt;/a&gt;.&quot;
            onLinkActivated: (link)=&gt; console.log(link + &quot; link activated&quot;)
    }
</db:programlisting>
<db:para>The example code will display the text &quot;See the <db:link xlink:href="http://qt-project.org">Qt Project website</db:link>.&quot;</db:para>
<db:para>Clicking on the highlighted link will output <db:code>http://qt-project.org link activated</db:code> to the console.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLinkActivated</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="linkHovered-signal">
<db:title>linkHovered(string <db:emphasis>link</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user hovers a link embedded in the text. The link must be in rich text or HTML format and the <db:code role="parameter">link</db:code> string provides access to the particular link.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLinkHovered</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#hoveredLink-prop">hoveredLink</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-text.xml#linkAt-method">linkAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="forceLayout-method">
<db:title>forceLayout()</db:title>
<db:para>Triggers a re-layout of the displayed text.</db:para>
</db:section>
<db:section xml:id="linkAt-method">
<db:title>linkAt(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns the link string at point <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> in content coordinates, or an empty string if no link exists at that point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#hoveredLink-prop">hoveredLink</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for Text</db:title>
<db:para><db:emphasis role="bold">The following members of QML type <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-method-documentation">
<db:title>Obsolete Method Documentation</db:title>
<db:section xml:id="doLayout-method">
<db:title>[deprecated] doLayout()</db:title>
<db:para>This method is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qml-qtquick-text.xml#forceLayout-method">forceLayout</db:link>() instead.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
