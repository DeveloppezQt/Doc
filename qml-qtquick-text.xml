<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Text QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Specifies how to add formatted text to a scene.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.12</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-label.xml" xlink:role="">Label</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Item</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Text is part of <db:simplelist><db:member>qtquick-visual</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Text items can display both plain and rich text. For example, red text with a specific font and size can be defined like this:</db:para>
<db:programlisting language="qml">Text {
    text: &quot;Hello World!&quot;
    font.family: &quot;Helvetica&quot;
    font.pointSize: 24
    color: &quot;red&quot;
}
</db:programlisting>
<db:para>Rich text is defined using HTML-style markup:</db:para>
<db:programlisting language="qml">Text {
    text: &quot;&amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt; &amp;lt;i&amp;gt;World!&amp;lt;/i&amp;gt;&quot;
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-text.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>If height and width are not explicitly set, Text will attempt to determine how much room is needed and set it accordingly. Unless <db:link xlink:href="qml-qtquick-text.xml#wrapMode-prop">wrapMode</db:link> is set, it will always prefer width to height (all text will be placed on a single line).</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-text.xml#elide-prop">elide</db:link> property can alternatively be used to fit a single line of plain text to a set width.</db:para>
<db:para>Note that the <db:link xlink:href="richtext-html-subset.xml">Supported HTML Subset</db:link> is limited. Also, if the text contains HTML img tags that load remote images, the text is reloaded.</db:para>
<db:para>Text provides read-only text. For editable text, see <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-text-example.xml#fonts">Fonts example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="effectiveHorizontalAlignment-prop">
<db:title>[read-only] effectiveHorizontalAlignment : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>effectiveHorizontalAlignment</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">horizontalAlignment : enumeration</db:bridgehead><db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>horizontalAlignment</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">verticalAlignment : enumeration</db:bridgehead><db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>verticalAlignment</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the horizontal and vertical alignment of the text within the Text items width and height. By default, the text is vertically aligned to the top. Horizontal alignment follows the natural alignment of the text, for example text that is read from left to right will be aligned to the left.</db:para>
<db:para>The valid values for <db:code>horizontalAlignment</db:code> are <db:code>Text.AlignLeft</db:code>, <db:code>Text.AlignRight</db:code>, <db:code>Text.AlignHCenter</db:code> and <db:code>Text.AlignJustify</db:code>. The valid values for <db:code>verticalAlignment</db:code> are <db:code>Text.AlignTop</db:code>, <db:code>Text.AlignBottom</db:code> and <db:code>Text.AlignVCenter</db:code>.</db:para>
<db:para>Note that for a single line of text, the size of the text is the area of the text. In this common case, all alignments are equivalent. If you want the text to be, say, centered in its parent, then you will need to either modify the <db:link xlink:href="qml-qtquick-item.xml#anchors-prop">Item::anchors</db:link>, or set <db:link xlink:href="qml-qtquick-text.xml#horizontalAlignment-prop">horizontalAlignment</db:link> to Text.AlignHCenter and bind the width to that of the parent.</db:para>
<db:para>When using the attached property <db:link xlink:href="qml-qtquick-layoutmirroring.xml#enabled-prop">LayoutMirroring::enabled</db:link> to mirror application layouts, the horizontal alignment of text will also be mirrored. However, the property <db:code>horizontalAlignment</db:code> will remain unchanged. To query the effective horizontal alignment of Text, use the read-only property <db:code>effectiveHorizontalAlignment</db:code>.</db:para>
</db:section>
<db:section xml:id="bottomPadding-prop">
<db:title>[since 5.6] bottomPadding : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>bottomPadding</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">[since 5.6] leftPadding : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>leftPadding</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">[since 5.6] padding : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>padding</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">[since 5.6] rightPadding : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>rightPadding</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">[since 5.6] topPadding : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>topPadding</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties hold the padding around the content. This space is reserved in addition to the <db:link xlink:href="qml-qtquick-text.xml#contentWidth-prop">contentWidth</db:link> and <db:link xlink:href="qml-qtquick-text.xml#contentHeight-prop">contentHeight</db:link>.</db:para>
<db:para>This QML property was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="advance-prop">
<db:title>[read-only, since 5.10] advance : size</db:title>
<db:fieldsynopsis>
<db:type>size</db:type>
<db:varname>advance</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The distance, in pixels, from the baseline origin of the first character of the text item, to the baseline origin of the first character in a text item occurring directly after this one in a text flow.</db:para>
<db:para>Note that the advance can be negative if the text flows from the right to the left.</db:para>
<db:para>This property was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="antialiasing-prop">
<db:title>antialiasing : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>antialiasing</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Used to decide if the Text should use antialiasing or not. Only Text with <db:link xlink:href="qml-qtquick-text.xml#renderType-prop">renderType</db:link> of Text.NativeRendering can disable antialiasing.</db:para>
<db:para>The default is true.</db:para>
</db:section>
<db:section xml:id="baseUrl-prop">
<db:title>baseUrl : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>baseUrl</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property specifies a base URL which is used to resolve relative URLs within the text.</db:para>
<db:para>Urls are resolved to be within the same directory as the target of the base URL meaning any portion of the path after the last '/' will be ignored.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Base URL</db:para>
</db:th>
<db:th>
<db:para>Relative URL</db:para>
</db:th>
<db:th>
<db:para>Resolved URL</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>http://qt-project.org/</db:para>
</db:td>
<db:td>
<db:para>images/logo.png</db:para>
</db:td>
<db:td>
<db:para>http://qt-project.org/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>http://qt-project.org/index.html</db:para>
</db:td>
<db:td>
<db:para>images/logo.png</db:para>
</db:td>
<db:td>
<db:para>http://qt-project.org/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>http://qt-project.org/content</db:para>
</db:td>
<db:td>
<db:para>images/logo.png</db:para>
</db:td>
<db:td>
<db:para>http://qt-project.org/content/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>http://qt-project.org/content/</db:para>
</db:td>
<db:td>
<db:para>images/logo.png</db:para>
</db:td>
<db:td>
<db:para>http://qt-project.org/content/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>http://qt-project.org/content/index.html</db:para>
</db:td>
<db:td>
<db:para>images/logo.png</db:para>
</db:td>
<db:td>
<db:para>http://qt-project.org/content/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>http://qt-project.org/content/index.html</db:para>
</db:td>
<db:td>
<db:para>../images/logo.png</db:para>
</db:td>
<db:td>
<db:para>http://qt-project.org/images/logo.png</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>http://qt-project.org/content/index.html</db:para>
</db:td>
<db:td>
<db:para>/images/logo.png</db:para>
</db:td>
<db:td>
<db:para>http://qt-project.org/images/logo.png</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default value is the url of the QML file instantiating the Text item.</db:para>
</db:section>
<db:section xml:id="clip-prop">
<db:title>clip : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>clip</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the text is clipped.</db:para>
<db:para>Note that if the text does not fit in the bounding rectangle it will be abruptly chopped.</db:para>
<db:para>If you want to display potentially long text in a limited space, you probably want to use <db:code>elide</db:code> instead.</db:para>
</db:section>
<db:section xml:id="color-prop">
<db:title>color : color</db:title>
<db:fieldsynopsis>
<db:type>color</db:type>
<db:varname>color</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The text color.</db:para>
<db:para>An example of green text defined using hexadecimal notation:</db:para>
<db:programlisting language="qml">Text {
    color: &quot;#00FF00&quot;
    text: &quot;green text&quot;
}
</db:programlisting>
<db:para>An example of steel blue text defined using an SVG color name:</db:para>
<db:programlisting language="qml">Text {
    color: &quot;steelblue&quot;
    text: &quot;blue text&quot;
}
</db:programlisting>
</db:section>
<db:section xml:id="contentHeight-prop">
<db:title>[read-only] contentHeight : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>contentHeight</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the height of the text, including height past the height which is covered due to there being more text than fits in the set height.</db:para>
</db:section>
<db:section xml:id="contentWidth-prop">
<db:title>[read-only] contentWidth : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>contentWidth</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the width of the text, including width past the width which is covered due to insufficient wrapping if WrapMode is set.</db:para>
</db:section>
<db:section xml:id="elide-prop">
<db:title>elide : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>elide</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Set this property to elide parts of the text fit to the Text item's width. The text will only elide if an explicit width has been set.</db:para>
<db:para>This property cannot be used with rich text.</db:para>
<db:para>Eliding can be:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Text.ElideNone - the default</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.ElideLeft</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.ElideMiddle</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.ElideRight</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If this property is set to Text.ElideRight, it can be used with <db:link xlink:href="qml-qtquick-text.xml#wrapMode-prop">wrapped</db:link> text. The text will only elide if <db:code>maximumLineCount</db:code>, or <db:code>height</db:code> has been set. If both <db:code>maximumLineCount</db:code> and <db:code>height</db:code> are set, <db:code>maximumLineCount</db:code> will apply unless the lines do not fit in the height allowed.</db:para>
<db:para>If the text is a multi-length string, and the mode is not <db:code>Text.ElideNone</db:code>, the first string that fits will be used, otherwise the last will be elided.</db:para>
<db:para>Multi-length strings are ordered from longest to shortest, separated by the Unicode &quot;String Terminator&quot; character <db:code>U009C</db:code> (write this in QML with <db:code>&quot;\u009C&quot;</db:code> or <db:code>&quot;\x9C&quot;</db:code>).</db:para>
</db:section>
<db:section xml:id="font.bold-prop">
<db:title>font.bold : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>font.bold</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets whether the font weight is bold.</db:para>
</db:section>
<db:section xml:id="font.capitalization-prop">
<db:title>font.capitalization : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>font.capitalization</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the capitalization for the text.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Font.MixedCase - This is the normal text rendering option where no capitalization change is applied.</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.AllUppercase - This alters the text to be rendered in all uppercase type.</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.AllLowercase - This alters the text to be rendered in all lowercase type.</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.SmallCaps - This alters the text to be rendered in small-caps type.</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.Capitalize - This alters the text to be rendered with the first character of each word as an uppercase character.</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="qml">Text { text: &quot;Hello&quot;; font.capitalization: Font.AllLowercase }
</db:programlisting>
</db:section>
<db:section xml:id="font.family-prop">
<db:title>font.family : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>font.family</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the family name of the font.</db:para>
<db:para>The family name is case insensitive and may optionally include a foundry name, e.g. &quot;Helvetica [Cronyx]&quot;. If the family is available from more than one foundry and the foundry isn't specified, an arbitrary foundry is chosen. If the family isn't available a family will be set using the font matching algorithm.</db:para>
</db:section>
<db:section xml:id="font.hintingPreference-prop">
<db:title>[since 5.8] font.hintingPreference : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>font.hintingPreference</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the preferred hinting on the text. This is a hint to the underlying text rendering system to use a certain level of hinting, and has varying support across platforms. See the table in the documentation for <db:link xlink:href="qfont.xml#HintingPreference-enum">QFont::HintingPreference</db:link> for more details.</db:para>
<db:note>
<db:para>This property only has an effect when used together with render type Text.NativeRendering.</db:para>
</db:note>
<db:para>Font.PreferDefaultHinting - Use the default hinting level for the target platform.</db:para>
<db:para>Font.PreferNoHinting - If possible, render text without hinting the outlines of the glyphs. The text layout will be typographically accurate, using the same metrics as are used e.g. when printing.</db:para>
<db:para>Font.PreferVerticalHinting - If possible, render text with no horizontal hinting, but align glyphs to the pixel grid in the vertical direction. The text will appear crisper on displays where the density is too low to give an accurate rendering of the glyphs. But since the horizontal metrics of the glyphs are unhinted, the text's layout will be scalable to higher density devices (such as printers) without impacting details such as line breaks.</db:para>
<db:para>Font.PreferFullHinting - If possible, render text with hinting in both horizontal and vertical directions. The text will be altered to optimize legibility on the target device, but since the metrics will depend on the target size of the text, the positions of glyphs, line breaks, and other typographical detail will not scale, meaning that a text layout may look different on devices with different pixel densities.</db:para>
<db:programlisting language="qml">Text { text: &quot;Hello&quot;; renderType: Text.NativeRendering; font.hintingPreference: Font.PreferVerticalHinting }
</db:programlisting>
<db:para>This property was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="font.italic-prop">
<db:title>font.italic : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>font.italic</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets whether the font has an italic style.</db:para>
</db:section>
<db:section xml:id="font.kerning-prop">
<db:title>[since 5.10] font.kerning : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>font.kerning</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Enables or disables the kerning OpenType feature when shaping the text. Disabling this may improve performance when creating or changing the text, at the expense of some cosmetic features. The default value is true.</db:para>
<db:programlisting language="qml">Text { text: &quot;OATS FLAVOUR WAY&quot;; font.kerning: false }
</db:programlisting>
<db:para>This property was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="font.letterSpacing-prop">
<db:title>font.letterSpacing : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>font.letterSpacing</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the letter spacing for the font.</db:para>
<db:para>Letter spacing changes the default spacing between individual letters in the font. A positive value increases the letter spacing by the corresponding pixels; a negative value decreases the spacing.</db:para>
</db:section>
<db:section xml:id="font.pixelSize-prop">
<db:title>font.pixelSize : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>font.pixelSize</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the font size in pixels.</db:para>
<db:para>Using this function makes the font device dependent. Use <db:code>pointSize</db:code> to set the size of the font in a device independent manner.</db:para>
</db:section>
<db:section xml:id="font.pointSize-prop">
<db:title>font.pointSize : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>font.pointSize</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the font size in points. The point size must be greater than zero.</db:para>
</db:section>
<db:section xml:id="font.preferShaping-prop">
<db:title>[since 5.10] font.preferShaping : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>font.preferShaping</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sometimes, a font will apply complex rules to a set of characters in order to display them correctly. In some writing systems, such as Brahmic scripts, this is required in order for the text to be legible, but in e.g. Latin script, it is merely a cosmetic feature. Setting the <db:code>preferShaping</db:code> property to false will disable all such features when they are not required, which will improve performance in most cases.</db:para>
<db:para>The default value is true.</db:para>
<db:programlisting language="qml">Text { text: &quot;Some text&quot;; font.preferShaping: false }
</db:programlisting>
<db:para>This property was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="font.strikeout-prop">
<db:title>font.strikeout : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>font.strikeout</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets whether the font has a strikeout style.</db:para>
</db:section>
<db:section xml:id="font.styleName-prop">
<db:title>[since 5.6] font.styleName : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>font.styleName</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the style name of the font.</db:para>
<db:para>The style name is case insensitive. If set, the font will be matched against style name instead of the font properties <db:link xlink:href="qml-qtquick-text.xml#font.weight-prop">font.weight</db:link>, <db:link xlink:href="qml-qtquick-text.xml#font.bold-prop">font.bold</db:link> and <db:link xlink:href="qml-qtquick-text.xml#font.italic-prop">font.italic</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="font.underline-prop">
<db:title>font.underline : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>font.underline</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets whether the text is underlined.</db:para>
</db:section>
<db:section xml:id="font.weight-prop">
<db:title>font.weight : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>font.weight</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the font's weight.</db:para>
<db:para>The weight can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Font.Thin</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.Light</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.ExtraLight</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.Normal - the default</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.Medium</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.DemiBold</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.Bold</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.ExtraBold</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.Black</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="qml">Text { text: &quot;Hello&quot;; font.weight: Font.DemiBold }
</db:programlisting>
</db:section>
<db:section xml:id="font.wordSpacing-prop">
<db:title>font.wordSpacing : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>font.wordSpacing</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the word spacing for the font.</db:para>
<db:para>Word spacing changes the default spacing between individual words. A positive value increases the word spacing by a corresponding amount of pixels, while a negative value decreases the inter-word spacing accordingly.</db:para>
</db:section>
<db:section xml:id="fontInfo.bold-prop">
<db:title>[read-only, since 5.9] fontInfo.bold : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>fontInfo.bold</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The bold state of the font info that has been resolved for the current font and <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link>. This is true if the weight of the resolved font is bold or higher.</db:para>
<db:para>This property was introduced in Qt 5.9.</db:para>
</db:section>
<db:section xml:id="fontInfo.family-prop">
<db:title>[read-only, since 5.9] fontInfo.family : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>fontInfo.family</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The family name of the font that has been resolved for the current font and <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.9.</db:para>
</db:section>
<db:section xml:id="fontInfo.italic-prop">
<db:title>[read-only, since 5.9] fontInfo.italic : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>fontInfo.italic</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The italic state of the font info that has been resolved for the current font and <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.9.</db:para>
</db:section>
<db:section xml:id="fontInfo.pixelSize-prop">
<db:title>[read-only, since 5.9] fontInfo.pixelSize : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>fontInfo.pixelSize</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The pixel size of the font info that has been resolved for the current font and <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.9.</db:para>
</db:section>
<db:section xml:id="fontInfo.pointSize-prop">
<db:title>[read-only, since 5.9] fontInfo.pointSize : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>fontInfo.pointSize</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The pointSize of the font info that has been resolved for the current font and <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.9.</db:para>
</db:section>
<db:section xml:id="fontInfo.styleName-prop">
<db:title>[read-only, since 5.9] fontInfo.styleName : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>fontInfo.styleName</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The style name of the font info that has been resolved for the current font and <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.9.</db:para>
</db:section>
<db:section xml:id="fontInfo.weight-prop">
<db:title>[read-only, since 5.9] fontInfo.weight : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>fontInfo.weight</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The weight of the font info that has been resolved for the current font and <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.9.</db:para>
</db:section>
<db:section xml:id="fontSizeMode-prop">
<db:title>fontSizeMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>fontSizeMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property specifies how the font size of the displayed text is determined. The possible values are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Text.FixedSize (default) - The size specified by <db:link xlink:href="qml-qtquick-text.xml#font.pixelSize-prop">font.pixelSize</db:link> or <db:link xlink:href="qml-qtquick-text.xml#font.pointSize-prop">font.pointSize</db:link> is used.</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.HorizontalFit - The largest size up to the size specified that fits within the width of the item without wrapping is used.</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.VerticalFit - The largest size up to the size specified that fits the height of the item is used.</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.Fit - The largest size up to the size specified that fits within the width and height of the item is used.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The font size of fitted text has a minimum bound specified by the <db:link xlink:href="qml-qtquick-text.xml#minimumPointSize-prop">minimumPointSize</db:link> or <db:link xlink:href="qml-qtquick-text.xml#minimumPixelSize-prop">minimumPixelSize</db:link> property and maximum bound specified by either the <db:link xlink:href="qml-qtquick-text.xml#font.pointSize-prop">font.pointSize</db:link> or <db:link xlink:href="qml-qtquick-text.xml#font.pixelSize-prop">font.pixelSize</db:link> properties.</db:para>
<db:programlisting language="qml">Text { text: &quot;Hello&quot;; fontSizeMode: Text.Fit; minimumPixelSize: 10; font.pixelSize: 72 }
</db:programlisting>
<db:para>If the text does not fit within the item bounds with the minimum font size the text will be elided as per the <db:link xlink:href="qml-qtquick-text.xml#elide-prop">elide</db:link> property.</db:para>
</db:section>
<db:section xml:id="hoveredLink-prop">
<db:title>[read-only, since 5.2] hoveredLink : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>hoveredLink</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains the link string when the user hovers a link embedded in the text. The link must be in rich text or HTML format and the <db:code role="parameter">hoveredLink</db:code> string provides access to the particular link.</db:para>
<db:para>This property was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#linkHovered-signal">linkHovered</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-text.xml#linkAt-method">linkAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineCount-prop">
<db:title>[read-only] lineCount : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>lineCount</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the number of lines visible in the text item.</db:para>
<db:para>This property is not supported for rich text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#maximumLineCount-prop">maximumLineCount</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineHeight-prop">
<db:title>lineHeight : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>lineHeight</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the line height for the text. The value can be in pixels or a multiplier depending on <db:link xlink:href="qml-qtquick-text.xml#lineHeightMode-prop">lineHeightMode</db:link>.</db:para>
<db:para>The default value is a multiplier of 1.0. The line height must be a positive value.</db:para>
</db:section>
<db:section xml:id="lineHeightMode-prop">
<db:title>lineHeightMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>lineHeightMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines how the line height is specified. The possible values are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Text.ProportionalHeight (default) - this sets the spacing proportional to the line (as a multiplier). For example, set to 2 for double spacing.</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.FixedHeight - this sets the line height to a fixed line height (in pixels).</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="linkColor-prop">
<db:title>linkColor : color</db:title>
<db:fieldsynopsis>
<db:type>color</db:type>
<db:varname>linkColor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The color of links in the text.</db:para>
<db:para>This property works with the StyledText <db:link xlink:href="qml-qtquick-text.xml#textFormat-prop">textFormat</db:link>, but not with RichText. Link color in RichText can be specified by including CSS style tags in the text.</db:para>
</db:section>
<db:section xml:id="maximumLineCount-prop">
<db:title>maximumLineCount : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>maximumLineCount</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Set this property to limit the number of lines that the text item will show. If elide is set to Text.ElideRight, the text will be elided appropriately. By default, this is the value of the largest possible integer.</db:para>
<db:para>This property is not supported for rich text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#lineCount-prop">lineCount</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-text.xml#elide-prop">elide</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumPixelSize-prop">
<db:title>minimumPixelSize : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>minimumPixelSize</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property specifies the minimum font pixel size of text scaled by the <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link> property.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link> is Text.FixedSize or the <db:link xlink:href="qml-qtquick-text.xml#font.pixelSize-prop">font.pixelSize</db:link> is -1 this property is ignored.</db:para>
</db:section>
<db:section xml:id="minimumPointSize-prop">
<db:title>minimumPointSize : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>minimumPointSize</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property specifies the minimum font point <db:link xlink:href="qml-size.xml">size</db:link> of text scaled by the <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link> property.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-text.xml#fontSizeMode-prop">fontSizeMode</db:link> is Text.FixedSize or the <db:link xlink:href="qml-qtquick-text.xml#font.pointSize-prop">font.pointSize</db:link> is -1 this property is ignored.</db:para>
</db:section>
<db:section xml:id="renderType-prop">
<db:title>renderType : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>renderType</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Override the default rendering type for this component.</db:para>
<db:para>Supported render types are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Text.QtRendering</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.NativeRendering</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Select Text.NativeRendering if you prefer text to look native on the target platform and do not require advanced features such as transformation of the text. Using such features in combination with the NativeRendering render type will lend poor and sometimes pixelated results.</db:para>
<db:para>The default rendering type is determined by <db:link xlink:href="qquickwindow.xml#textRenderType">QQuickWindow::textRenderType</db:link>().</db:para>
</db:section>
<db:section xml:id="style-prop">
<db:title>style : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>style</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Set an additional text style.</db:para>
<db:para>Supported text styles are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Text.Normal - the default</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.Outline</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.Raised</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.Sunken</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="qml">Row {
    Text { font.pointSize: 24; text: &quot;Normal&quot; }
    Text { font.pointSize: 24; text: &quot;Raised&quot;; style: Text.Raised; styleColor: &quot;#AAAAAA&quot; }
    Text { font.pointSize: 24; text: &quot;Outline&quot;;style: Text.Outline; styleColor: &quot;red&quot; }
    Text { font.pointSize: 24; text: &quot;Sunken&quot;; style: Text.Sunken; styleColor: &quot;#AAAAAA&quot; }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-textstyle.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="styleColor-prop">
<db:title>styleColor : color</db:title>
<db:fieldsynopsis>
<db:type>color</db:type>
<db:varname>styleColor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the secondary color used by text styles.</db:para>
<db:para><db:code>styleColor</db:code> is used as the outline color for outlined text, and as the shadow color for raised or sunken text. If no style has been set, it is not used at all.</db:para>
<db:programlisting language="qml">Text { font.pointSize: 18; text: &quot;hello&quot;; style: Text.Raised; styleColor: &quot;gray&quot; }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#style-prop">style</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>text</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The text to display. Text supports both plain and rich text strings.</db:para>
<db:para>The item will try to automatically determine whether the text should be treated as styled text. This determination is made using <db:link xlink:href="qt-sub-qtgui.xml#mightBeRichText">Qt::mightBeRichText</db:link>().</db:para>
</db:section>
<db:section xml:id="textFormat-prop">
<db:title>textFormat : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>textFormat</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The way the text property should be displayed.</db:para>
<db:para>Supported text formats are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Text.AutoText (default)</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.PlainText</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.StyledText</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.RichText</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the text format is <db:code>Text.AutoText</db:code> the Text item will automatically determine whether the text should be treated as styled text. This determination is made using <db:link xlink:href="qt-sub-qtgui.xml#mightBeRichText">Qt::mightBeRichText</db:link>() which uses a fast and therefore simple heuristic. It mainly checks whether there is something that looks like a tag before the first line break. Although the result may be correct for common cases, there is no guarantee.</db:para>
<db:para>Text.StyledText is an optimized format supporting some basic text styling markup, in the style of HTML 3.2:</db:para>
<db:programlisting language="cpp">&amp;lt;b&amp;gt;&amp;lt;/b&amp;gt; - bold
&amp;lt;del&amp;gt;&amp;lt;/del&amp;gt; - strike out (removed content)
&amp;lt;s&amp;gt;&amp;lt;/s&amp;gt; - strike out (no longer accurate or no longer relevant content)
&amp;lt;strong&amp;gt;&amp;lt;/strong&amp;gt; - bold
&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt; - italic
&amp;lt;br&amp;gt; - new line
&amp;lt;p&amp;gt; - paragraph
&amp;lt;u&amp;gt; - underlined text
&amp;lt;font color=&quot;color_name&quot; size=&quot;1-7&quot;&amp;gt;&amp;lt;/font&amp;gt;
&amp;lt;h1&amp;gt; to &amp;lt;h6&amp;gt; - headers
&amp;lt;a href=&quot;&quot;&amp;gt; - anchor
&amp;lt;img src=&quot;&quot; align=&quot;top,middle,bottom&quot; width=&quot;&quot; height=&quot;&quot;&amp;gt; - inline images
&amp;lt;ol type=&quot;&quot;&amp;gt;, &amp;lt;ul type=&quot;&quot;&amp;gt; and &amp;lt;li&amp;gt; - ordered and unordered lists
&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt; - preformatted
&amp;amp;gt; &amp;amp;lt; &amp;amp;amp;
</db:programlisting>
<db:para><db:code>Text.StyledText</db:code> parser is strict, requiring tags to be correctly nested.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">Column {
    Text {
        font.pointSize: 24
        text: &quot;&amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt; &amp;lt;i&amp;gt;World!&amp;lt;/i&amp;gt;&quot;
    }
    Text {
        font.pointSize: 24
        textFormat: Text.RichText
        text: &quot;&amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt; &amp;lt;i&amp;gt;World!&amp;lt;/i&amp;gt;&quot;
    }
    Text {
        font.pointSize: 24
        textFormat: Text.PlainText
        text: &quot;&amp;lt;b&amp;gt;Hello&amp;lt;/b&amp;gt; &amp;lt;i&amp;gt;World!&amp;lt;/i&amp;gt;&quot;
    }
}
    </db:programlisting>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-textformat.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Text.RichText supports a larger subset of HTML 4, as described on the <db:link xlink:href="richtext-html-subset.xml">Supported HTML Subset</db:link> page. You should prefer using Text.PlainText or Text.StyledText instead, as they offer better performance.</db:para>
</db:section>
<db:section xml:id="truncated-prop">
<db:title>[read-only] truncated : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>truncated</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns true if the text has been truncated due to <db:link xlink:href="qml-qtquick-text.xml#maximumLineCount-prop">maximumLineCount</db:link> or <db:link xlink:href="qml-qtquick-text.xml#elide-prop">elide</db:link>.</db:para>
<db:para>This property is not supported for rich text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#maximumLineCount-prop">maximumLineCount</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-text.xml#elide-prop">elide</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wrapMode-prop">
<db:title>wrapMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>wrapMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Set this property to wrap the text to the Text item's width. The text will only wrap if an explicit width has been set. wrapMode can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Text.NoWrap (default) - no wrapping will be performed. If the text contains insufficient newlines, then <db:link xlink:href="qml-qtquick-text.xml#contentWidth-prop">contentWidth</db:link> will exceed a set width.</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.WordWrap - wrapping is done on word boundaries only. If a word is too long, <db:link xlink:href="qml-qtquick-text.xml#contentWidth-prop">contentWidth</db:link> will exceed a set width.</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.WrapAnywhere - wrapping is done at any point on a line, even if it occurs in the middle of a word.</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.Wrap - if possible, wrapping occurs at a word boundary; otherwise it will occur at the appropriate point on the line, even in the middle of a word.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="lineLaidOut-signal">
<db:title>lineLaidOut(object <db:emphasis>line</db:emphasis>)</db:title>
<db:para>This signal is emitted for each line of text that is laid out during the layout process. The specified <db:code role="parameter">line</db:code> object provides more details about the line that is currently being laid out.</db:para>
<db:para>This gives the opportunity to position and resize a line as it is being laid out. It can for example be used to create columns or lay out text around objects.</db:para>
<db:para>The properties of the specified <db:code role="parameter">line</db:code> object are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>number (read-only)</db:para>
</db:listitem>
<db:listitem>
<db:para>x</db:para>
</db:listitem>
<db:listitem>
<db:para>y</db:para>
</db:listitem>
<db:listitem>
<db:para>width</db:para>
</db:listitem>
<db:listitem>
<db:para>height</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, this will move the first 5 lines of a Text item by 100 pixels to the right:</db:para>
<db:programlisting language="cpp">onLineLaidOut: {
    if (line.number &amp;lt; 5) {
        line.x = line.x + 100
        line.width = line.width - 100
    }
}
</db:programlisting>
<db:para>The corresponding handler is <db:code>onLineLaidOut</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLineLaidOut</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="linkActivated-signal">
<db:title>linkActivated(string <db:emphasis>link</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user clicks on a link embedded in the text. The link must be in rich text or HTML format and the <db:code role="parameter">link</db:code> string provides access to the particular link.</db:para>
<db:programlisting language="qml">    Text {
            textFormat: Text.RichText
            text: &quot;See the &amp;lt;a href=\&quot;http://qt-project.org\&quot;&amp;gt;Qt Project website&amp;lt;/a&amp;gt;.&quot;
            onLinkActivated: console.log(link + &quot; link activated&quot;)
    }
</db:programlisting>
<db:para>The example code will display the text &quot;See the <db:link xlink:href="http://qt-project.org">Qt Project website</db:link>.&quot;</db:para>
<db:para>Clicking on the highlighted link will output <db:code>http://qt-project.org link activated</db:code> to the console.</db:para>
<db:para>The corresponding handler is onLinkActivated.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLinkActivated</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="linkHovered-signal">
<db:title>[since 5.2] linkHovered(string <db:emphasis>link</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user hovers a link embedded in the text. The link must be in rich text or HTML format and the <db:code role="parameter">link</db:code> string provides access to the particular link.</db:para>
<db:para>The corresponding handler is onLinkHovered.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLinkHovered</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#hoveredLink-prop">hoveredLink</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-text.xml#linkAt-method">linkAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="forceLayout-method">
<db:title>[since 5.9] forceLayout()</db:title>
<db:para>Triggers a re-layout of the displayed text.</db:para>
<db:para>This method was introduced in Qt 5.9.</db:para>
</db:section>
<db:section xml:id="linkAt-method">
<db:title>[since 5.3] linkAt(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns the link string at point <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> in content coordinates, or an empty string if no link exists at that point.</db:para>
<db:para>This method was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml#hoveredLink-prop">hoveredLink</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for Text</db:title>
<db:para><db:emphasis role="bold">The following members of QML type <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-method-documentation">
<db:title>Obsolete Method Documentation</db:title>
<db:section xml:id="doLayout-method">
<db:title>doLayout()</db:title>
<db:para>This method is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qml-qtquick-text.xml#forceLayout-method">forceLayout</db:link>() instead.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
