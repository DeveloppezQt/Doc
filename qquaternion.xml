<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QQuaternion Class</db:title>
<db:productname>QtGui</db:productname>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquaternion.xml">QQuaternion</db:link> class represents a quaternion consisting of a vector and scalar.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuaternion</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QQuaternion is part of <db:simplelist><db:member><db:link xlink:href="painting-3d.xml">Rendering in 3D</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Quaternions are used to represent rotations in 3D space, and consist of a 3D rotation axis specified by the x, y, and z coordinates, and a scalar representing the rotation angle.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuaternion">
<db:title>QQuaternion::QQuaternion()</db:title>
<db:para>Constructs an identity quaternion, i.e. with coordinates (1, 0, 0, 0).</db:para>
</db:section>
<db:section xml:id="QQuaternion-1">
<db:title>[explicit] QQuaternion::QQuaternion(const QVector4D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:para>Constructs a quaternion from the components of <db:code role="parameter">vector</db:code>.</db:para>
</db:section>
<db:section xml:id="QQuaternion-2">
<db:title>QQuaternion::QQuaternion(float <db:emphasis>scalar</db:emphasis>, const QVector3D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:para>Constructs a quaternion vector from the specified <db:code role="parameter">vector</db:code> and <db:code role="parameter">scalar</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#vector">vector</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#scalar">scalar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QQuaternion-3">
<db:title>QQuaternion::QQuaternion(float <db:emphasis>scalar</db:emphasis>, float <db:emphasis>xpos</db:emphasis>, float <db:emphasis>ypos</db:emphasis>, float <db:emphasis>zpos</db:emphasis>)</db:title>
<db:para>Constructs a quaternion with the vector (<db:code role="parameter">xpos</db:code>, <db:code role="parameter">ypos</db:code>, <db:code role="parameter">zpos</db:code>) and <db:code role="parameter">scalar</db:code>.</db:para>
</db:section>
<db:section xml:id="conjugate">
<db:title>QQuaternion QQuaternion::conjugate() const</db:title>
<db:para>Returns the conjugate of this quaternion, which is (-x, -y, -z, scalar).</db:para>
</db:section>
<db:section xml:id="fromAxisAndAngle">
<db:title>[static] QQuaternion QQuaternion::fromAxisAndAngle(const QVector3D &amp;<db:emphasis>axis</db:emphasis>, float <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Creates a normalized quaternion that corresponds to rotating through <db:code role="parameter">angle</db:code> degrees about the specified 3D <db:code role="parameter">axis</db:code>.</db:para>
</db:section>
<db:section xml:id="fromAxisAndAngle-1">
<db:title>[static] QQuaternion QQuaternion::fromAxisAndAngle(float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>, float <db:emphasis>z</db:emphasis>, float <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Creates a normalized quaternion that corresponds to rotating through <db:code role="parameter">angle</db:code> degrees about the 3D axis (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>).</db:para>
</db:section>
<db:section xml:id="isIdentity">
<db:title>bool QQuaternion::isIdentity() const</db:title>
<db:para>Returns true if the x, y, and z components of this quaternion are set to 0.0, and the scalar component is set to 1.0; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QQuaternion::isNull() const</db:title>
<db:para>Returns true if the x, y, z, and scalar components of this quaternion are set to 0.0; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="length">
<db:title>float QQuaternion::length() const</db:title>
<db:para>Returns the length of the quaternion. This is also called the &quot;norm&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#lengthSquared">lengthSquared</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#normalized">normalized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lengthSquared">
<db:title>float QQuaternion::lengthSquared() const</db:title>
<db:para>Returns the squared length of the quaternion.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nlerp">
<db:title>[static] QQuaternion QQuaternion::nlerp(const QQuaternion &amp;<db:emphasis>q1</db:emphasis>, const QQuaternion &amp;<db:emphasis>q2</db:emphasis>, float <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Interpolates along the shortest linear path between the rotational positions <db:code role="parameter">q1</db:code> and <db:code role="parameter">q2</db:code>. The value <db:code role="parameter">t</db:code> should be between 0 and 1, indicating the distance to travel between <db:code role="parameter">q1</db:code> and <db:code role="parameter">q2</db:code>. The result will be <db:link xlink:href="qquaternion.xml#normalized">normalized</db:link>().</db:para>
<db:para>If <db:code role="parameter">t</db:code> is less than or equal to 0, then <db:code role="parameter">q1</db:code> will be returned. If <db:code role="parameter">t</db:code> is greater than or equal to 1, then <db:code role="parameter">q2</db:code> will be returned.</db:para>
<db:para>The nlerp() function is typically faster than <db:link xlink:href="qquaternion.xml#slerp">slerp</db:link>() and will give approximate results to spherical interpolation that are good enough for some applications.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#slerp">slerp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalize">
<db:title>void QQuaternion::normalize()</db:title>
<db:para>Normalizes the currect quaternion in place. Nothing happens if this is a null quaternion or the length of the quaternion is very close to 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#normalized">normalized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalized">
<db:title>QQuaternion QQuaternion::normalized() const</db:title>
<db:para>Returns the normalized unit form of this quaternion.</db:para>
<db:para>If this quaternion is null, then a null quaternion is returned. If the length of the quaternion is very close to 1, then the quaternion will be returned as-is. Otherwise the normalized form of the quaternion of length 1 will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#normalize">normalize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotatedVector">
<db:title>QVector3D QQuaternion::rotatedVector(const QVector3D &amp;<db:emphasis>vector</db:emphasis>) const</db:title>
<db:para>Rotates <db:code role="parameter">vector</db:code> with this quaternion to produce a new vector in 3D space. The following code:</db:para>
<db:programlisting language="cpp">QVector3D result = q.rotatedVector(vector);
</db:programlisting>
<db:para>is equivalent to the following:</db:para>
<db:programlisting language="cpp">QVector3D result = (q * QQuaternion(0, vector) * q.conjugate()).vector();
</db:programlisting>
</db:section>
<db:section xml:id="scalar">
<db:title>float QQuaternion::scalar() const</db:title>
<db:para>Returns the scalar component of this quaternion.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#setScalar">setScalar</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#z">z</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScalar">
<db:title>void QQuaternion::setScalar(float <db:emphasis>scalar</db:emphasis>)</db:title>
<db:para>Sets the scalar component of this quaternion to <db:code role="parameter">scalar</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#scalar">scalar</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#setY">setY</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#setZ">setZ</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVector">
<db:title>void QQuaternion::setVector(const QVector3D &amp;<db:emphasis>vector</db:emphasis>)</db:title>
<db:para>Sets the vector component of this quaternion to <db:code role="parameter">vector</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#vector">vector</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#setScalar">setScalar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVector-1">
<db:title>void QQuaternion::setVector(float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>, float <db:emphasis>z</db:emphasis>)</db:title>
<db:para>Sets the vector component of this quaternion to (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#vector">vector</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#setScalar">setScalar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setX">
<db:title>void QQuaternion::setX(float <db:emphasis>x</db:emphasis>)</db:title>
<db:para>Sets the x coordinate of this quaternion's vector to the given <db:code role="parameter">x</db:code> coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#setY">setY</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#setZ">setZ</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#setScalar">setScalar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setY">
<db:title>void QQuaternion::setY(float <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Sets the y coordinate of this quaternion's vector to the given <db:code role="parameter">y</db:code> coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#setZ">setZ</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#setScalar">setScalar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setZ">
<db:title>void QQuaternion::setZ(float <db:emphasis>z</db:emphasis>)</db:title>
<db:para>Sets the z coordinate of this quaternion's vector to the given <db:code role="parameter">z</db:code> coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#z">z</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#setY">setY</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#setScalar">setScalar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="slerp">
<db:title>[static] QQuaternion QQuaternion::slerp(const QQuaternion &amp;<db:emphasis>q1</db:emphasis>, const QQuaternion &amp;<db:emphasis>q2</db:emphasis>, float <db:emphasis>t</db:emphasis>)</db:title>
<db:para>Interpolates along the shortest spherical path between the rotational positions <db:code role="parameter">q1</db:code> and <db:code role="parameter">q2</db:code>. The value <db:code role="parameter">t</db:code> should be between 0 and 1, indicating the spherical distance to travel between <db:code role="parameter">q1</db:code> and <db:code role="parameter">q2</db:code>.</db:para>
<db:para>If <db:code role="parameter">t</db:code> is less than or equal to 0, then <db:code role="parameter">q1</db:code> will be returned. If <db:code role="parameter">t</db:code> is greater than or equal to 1, then <db:code role="parameter">q2</db:code> will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#nlerp">nlerp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toVector4D">
<db:title>QVector4D QQuaternion::toVector4D() const</db:title>
<db:para>Returns this quaternion as a 4D vector.</db:para>
</db:section>
<db:section xml:id="vector">
<db:title>QVector3D QQuaternion::vector() const</db:title>
<db:para>Returns the vector component of this quaternion.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#setVector">setVector</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#scalar">scalar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="x">
<db:title>float QQuaternion::x() const</db:title>
<db:para>Returns the x coordinate of this quaternion's vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#z">z</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#scalar">scalar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="y">
<db:title>float QQuaternion::y() const</db:title>
<db:para>Returns the y coordinate of this quaternion's vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#setY">setY</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#z">z</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#scalar">scalar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="z">
<db:title>float QQuaternion::z() const</db:title>
<db:para>Returns the z coordinate of this quaternion's vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#setZ">setZ</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qquaternion.xml#scalar">scalar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QQuaternion::operator QVariant() const</db:title>
<db:para>Returns the quaternion as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-2a-eq">
<db:title>QQuaternion &amp;QQuaternion::operator*=(const QQuaternion &amp;<db:emphasis>quaternion</db:emphasis>)</db:title>
<db:para>Multiplies this quaternion by <db:code role="parameter">quaternion</db:code> and returns a reference to this quaternion.</db:para>
</db:section>
<db:section xml:id="operator-2a-eq-1">
<db:title>QQuaternion &amp;QQuaternion::operator*=(float <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Multiplies this quaternion's components by the given <db:code role="parameter">factor</db:code>, and returns a reference to this quaternion.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#operator-2f-eq">operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QQuaternion &amp;QQuaternion::operator+=(const QQuaternion &amp;<db:emphasis>quaternion</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">quaternion</db:code> to this quaternion and returns a reference to this quaternion.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QQuaternion &amp;QQuaternion::operator-=(const QQuaternion &amp;<db:emphasis>quaternion</db:emphasis>)</db:title>
<db:para>Subtracts the given <db:code role="parameter">quaternion</db:code> from this quaternion and returns a reference to this quaternion.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-eq">
<db:title>QQuaternion &amp;QQuaternion::operator/=(float <db:emphasis>divisor</db:emphasis>)</db:title>
<db:para>Divides this quaternion's components by the given <db:code role="parameter">divisor</db:code>, and returns a reference to this quaternion.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#operator-2a-eq">operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qFuzzyCompare-1">
<db:title>bool qFuzzyCompare(const QQuaternion &amp;<db:emphasis>q1</db:emphasis>, const QQuaternion &amp;<db:emphasis>q2</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">q1</db:code> and <db:code role="parameter">q2</db:code> are equal, allowing for a small fuzziness factor for floating-point comparisons; false otherwise.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QQuaternion &amp;<db:emphasis>q1</db:emphasis>, const QQuaternion &amp;<db:emphasis>q2</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">q1</db:code> is not equal to <db:code role="parameter">q2</db:code>; otherwise returns false. This operator uses an exact floating-point comparison.</db:para>
</db:section>
<db:section xml:id="operator-2a-3">
<db:title>const QQuaternion operator*(const QQuaternion &amp;<db:emphasis>q1</db:emphasis>, const QQuaternion &amp;<db:emphasis>q2</db:emphasis>)</db:title>
<db:para>Multiplies <db:code role="parameter">q1</db:code> and <db:code role="parameter">q2</db:code> using quaternion multiplication. The result corresponds to applying both of the rotations specified by <db:code role="parameter">q1</db:code> and <db:code role="parameter">q2</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#operator-2a-eq">QQuaternion::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-4">
<db:title>const QQuaternion operator*(const QQuaternion &amp;<db:emphasis>quaternion</db:emphasis>, float <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Returns a copy of the given <db:code role="parameter">quaternion</db:code>, multiplied by the given <db:code role="parameter">factor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#operator-2a-eq">QQuaternion::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-5">
<db:title>const QQuaternion operator*(float <db:emphasis>factor</db:emphasis>, const QQuaternion &amp;<db:emphasis>quaternion</db:emphasis>)</db:title>
<db:para>Returns a copy of the given <db:code role="parameter">quaternion</db:code>, multiplied by the given <db:code role="parameter">factor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#operator-2a-eq">QQuaternion::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-1">
<db:title>const QQuaternion operator+(const QQuaternion &amp;<db:emphasis>q1</db:emphasis>, const QQuaternion &amp;<db:emphasis>q2</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qquaternion.xml">QQuaternion</db:link> object that is the sum of the given quaternions, <db:code role="parameter">q1</db:code> and <db:code role="parameter">q2</db:code>; each component is added separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#operator-2b-eq">QQuaternion::operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--2">
<db:title>const QQuaternion operator-(const QQuaternion &amp;<db:emphasis>quaternion</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qquaternion.xml">QQuaternion</db:link> object that is formed by changing the sign of all three components of the given <db:code role="parameter">quaternion</db:code>.</db:para>
<db:para>Equivalent to <db:code>QQuaternion(0,0,0,0) - quaternion</db:code>.</db:para>
</db:section>
<db:section xml:id="operator--3">
<db:title>const QQuaternion operator-(const QQuaternion &amp;<db:emphasis>q1</db:emphasis>, const QQuaternion &amp;<db:emphasis>q2</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qquaternion.xml">QQuaternion</db:link> object that is formed by subtracting <db:code role="parameter">q2</db:code> from <db:code role="parameter">q1</db:code>; each component is subtracted separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#operator--eq">QQuaternion::operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-1">
<db:title>const QQuaternion operator/(const QQuaternion &amp;<db:emphasis>quaternion</db:emphasis>, float <db:emphasis>divisor</db:emphasis>)</db:title>
<db:para>Returns the <db:link xlink:href="qquaternion.xml">QQuaternion</db:link> object formed by dividing all components of the given <db:code role="parameter">quaternion</db:code> by the given <db:code role="parameter">divisor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquaternion.xml#operator-2f-eq">QQuaternion::operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-16">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QQuaternion &amp;<db:emphasis>quaternion</db:emphasis>)</db:title>
<db:para>Writes the given <db:code role="parameter">quaternion</db:code> to the given <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QQuaternion &amp;<db:emphasis>q1</db:emphasis>, const QQuaternion &amp;<db:emphasis>q2</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">q1</db:code> is equal to <db:code role="parameter">q2</db:code>; otherwise returns false. This operator uses an exact floating-point comparison.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-16">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QQuaternion &amp;<db:emphasis>quaternion</db:emphasis>)</db:title>
<db:para>Reads a quaternion from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">quaternion</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
