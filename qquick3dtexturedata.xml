<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuick3DTextureData Class</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Base class for defining custom texture data.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuick3DTextureData</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtquick3d-texturedata.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquick3dobject.xml" xlink:role="class">QQuick3DObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link> class can be used to specify custom texture data for a <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link> in a Qt Quick 3D scene.</db:para>
<db:para>While not strictly required, the typical usage is to inherit from this class. The subclass is then exposed to QML by registering it to the type system. The <db:link xlink:href="qml-qtquick3d-texture.xml#textureData-prop">textureData</db:link> property of a <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link> can then be set to reference an instance of the registered type.</db:para>
<db:para>Example implementation:</db:para>
<db:programlisting language="cpp">class CustomTextureData : public QQuick3DTextureData
{
    Q_OBJECT
    ... properties ...

public:
    CustomTextureData() { regenerateTextureData(); }

    void setProperty(...)
    {
        // Change relevant internal data.
        // ...

        // Update the texture data
        regenerateTextureData();

        // Finally, trigger an update. This is relevant in case nothing else
        // is changed in the scene; this way we make sure a new frame will
        // be rendered
        update();
    }
private:
    void regenerateTextureData()
    {
        QByteArray textureData;
        textureData = generateTextureData();
        setTextureData(textureData);
        setSize(QSize(256, 256));
        setFormat(QQuick3DTextureData::Format::RGBA8)
        setHasTransparency(true);
    }
};
</db:programlisting>
<db:para>This class can then be registered as a QML type and used with <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link>.</db:para>
<db:para>In Qt 5 type registration happened with <db:link xlink:href="qqmlengine.xml#qmlRegisterType-1">qmlRegisterType</db:link>:</db:para>
<db:programlisting language="cpp">qmlRegisterType&amp;lt;MyCustomTextureData&amp;gt;(&quot;Example&quot;, 1, 0, &quot;MyCustomTextureData&quot;);
</db:programlisting>
<db:para>In Qt 6 the default approach is to use automatic registration with the help of the build system. Instead of calling <db:link xlink:href="qqmlengine.xml#qmlRegisterType-1">qmlRegisterType</db:link>, the <db:code>.pro</db:code> file can now contain:</db:para>
<db:programlisting language="cpp">CONFIG += qmltypes
QML_IMPORT_NAME = Example
QML_IMPORT_MAJOR_VERSION = 1
</db:programlisting>
<db:para>With CMake, automatic registration is the default behavior, so no special settings are needed beyond basic QML module setup:</db:para>
<db:programlisting language="cpp">qt_add_qml_module(application
    URI Example
    VERSION 1.0
)
</db:programlisting>
<db:para>The class implementation should add <db:link xlink:href="qqmlengine.xml#QML_NAMED_ELEMENT">QML_NAMED_ELEMENT</db:link>:</db:para>
<db:programlisting language="cpp">class CustomTextureData : public QQuick3DTextureData
{
    Q_OBJECT
    QML_NAMED_ELEMENT(MyCustomTextureData)
    ...
};
</db:programlisting>
<db:para>The QML code can then use the custom type:</db:para>
<db:programlisting language="cpp">import Example 1.0

Model {
    source: &quot;#Cube&quot;
    materials: [
        DefaultMaterial {
            diffuseMap: diffuseMapCustomTexture
        }
    ]
    Texture {
        id: diffuseMapCustomTexture
        textureData: MyCustomTextureData { }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Format-enum">
<db:title>enum QQuick3DTextureData::Format</db:title>
<db:enumsynopsis>
<db:enumname>Format</db:enumname>
<db:enumitem>
<db:enumidentifier>None</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA8</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA16F</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA32F</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBE8</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R8</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R16</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R16F</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R32F</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BC1</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BC2</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BC3</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BC4</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BC5</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BC6H</db:enumidentifier>
<db:enumvalue>14</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BC7</db:enumidentifier>
<db:enumvalue>15</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DXT1_RGBA</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DXT1_RGB</db:enumidentifier>
<db:enumvalue>17</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DXT3_RGBA</db:enumidentifier>
<db:enumvalue>18</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DXT5_RGBA</db:enumidentifier>
<db:enumvalue>19</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ETC2_RGB8</db:enumidentifier>
<db:enumvalue>20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ETC2_RGB8A1</db:enumidentifier>
<db:enumvalue>21</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ETC2_RGBA8</db:enumidentifier>
<db:enumvalue>22</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ASTC_4x4</db:enumidentifier>
<db:enumvalue>23</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ASTC_5x4</db:enumidentifier>
<db:enumvalue>24</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ASTC_5x5</db:enumidentifier>
<db:enumvalue>25</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ASTC_6x5</db:enumidentifier>
<db:enumvalue>26</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ASTC_6x6</db:enumidentifier>
<db:enumvalue>27</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ASTC_8x5</db:enumidentifier>
<db:enumvalue>28</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ASTC_8x6</db:enumidentifier>
<db:enumvalue>29</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ASTC_8x8</db:enumidentifier>
<db:enumvalue>30</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ASTC_10x5</db:enumidentifier>
<db:enumvalue>31</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ASTC_10x6</db:enumidentifier>
<db:enumvalue>32</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ASTC_10x8</db:enumidentifier>
<db:enumvalue>33</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ASTC_10x10</db:enumidentifier>
<db:enumvalue>34</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ASTC_12x10</db:enumidentifier>
<db:enumvalue>35</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ASTC_12x12</db:enumidentifier>
<db:enumvalue>36</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Returns the color format of the texture data assigned in <db:link xlink:href="qquick3dtexturedata.xml#textureData">textureData</db:link> property.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The color format is not defined</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::RGBA8</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The color format is considered as 8-bit integer in R, G, B and alpha channels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::RGBA16F</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The color format is considered as 16-bit float in R,G,B and alpha channels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::RGBA32F</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The color format is considered as 32-bit float in R, G, B and alpha channels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::RGBE8</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The color format is considered as 8-bit mantissa in the R, G, and B channels and 8-bit shared exponent.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::R8</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The color format is considered as 8-bit integer in R channel.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::R16</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The color format is considered as 16-bit integer in R channel.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::R16F</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The color format is considered as 16-bit float in R channel.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::R32F</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The color format is considered as 32-bit float R channel.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::BC1</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>The color format is considred as BC1 compressed format with R, G, B, and alpha channels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::BC2</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>The color format is considred as BC2 compressed format with R, G, B, and alpha channels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::BC3</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>The color format is considred as BC3 compressed format with R, G, B, and alpha channels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::BC4</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>The color format is considred as BC4 compressed format with one color channel.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::BC5</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>The color format is considred as BC5 compressed format with two color channels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::BC6H</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>The color format is considred as BC6H compressed format with three high dynamic range color channels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::BC7</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>The color format is considred as BC7 compressed format with R, G, B, and alpha channels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::DXT1_RGBA</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>The color format is considered as DXT1 compressed format with R, G, B and alpha channels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::DXT1_RGB</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>The color format is considered as DXT1 compressed format with R, G and B channels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::DXT3_RGBA</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>The color format is considered as DXT3 compressed format with R, G, B and alpha channels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::DXT5_RGBA</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>The color format is considered as DXT5 compressed format with R, G, B and alpha channels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ETC2_RGB8</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td>
<db:para>The color format is considered as ETC2 compressed format for RGB888 data</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ETC2_RGB8A1</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td>
<db:para>The color format is considered as ETC2 compressed format for RGBA data where alpha is 1-bit.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ETC2_RGBA8</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td>
<db:para>The color format is considered as ETC2 compressed format with RGBA8888 data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ASTC_4x4</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
<db:td>
<db:para>The color format is considered as ASTC compressed format with 4x4 block footprint.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ASTC_5x4</db:code></db:para>
</db:td>
<db:td><db:code>24</db:code></db:td>
<db:td>
<db:para>The color format is considered as ASTC compressed format with 5x4 block footprint.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ASTC_5x5</db:code></db:para>
</db:td>
<db:td><db:code>25</db:code></db:td>
<db:td>
<db:para>The color format is considered as ASTC compressed format with 5x5 block footprint.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ASTC_6x5</db:code></db:para>
</db:td>
<db:td><db:code>26</db:code></db:td>
<db:td>
<db:para>The color format is considered as ASTC compressed format with 6x5 block footprint.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ASTC_6x6</db:code></db:para>
</db:td>
<db:td><db:code>27</db:code></db:td>
<db:td>
<db:para>The color format is considered as ASTC compressed format with 6x6 block footprint.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ASTC_8x5</db:code></db:para>
</db:td>
<db:td><db:code>28</db:code></db:td>
<db:td>
<db:para>The color format is considered as ASTC compressed format with 8x5 block footprint.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ASTC_8x6</db:code></db:para>
</db:td>
<db:td><db:code>29</db:code></db:td>
<db:td>
<db:para>The color format is considered as ASTC compressed format with 8x6 block footprint.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ASTC_8x8</db:code></db:para>
</db:td>
<db:td><db:code>30</db:code></db:td>
<db:td>
<db:para>The color format is considered as ASTC compressed format with 8x8 block footprint.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ASTC_10x5</db:code></db:para>
</db:td>
<db:td><db:code>31</db:code></db:td>
<db:td>
<db:para>The color format is considered as ASTC compressed format with 10x5 block footprint.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ASTC_10x6</db:code></db:para>
</db:td>
<db:td><db:code>32</db:code></db:td>
<db:td>
<db:para>The color format is considered as ASTC compressed format with 10x6 block footprint.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ASTC_10x8</db:code></db:para>
</db:td>
<db:td><db:code>33</db:code></db:td>
<db:td>
<db:para>The color format is considered as ASTC compressed format with 10x8 block footprint.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ASTC_10x10</db:code></db:para>
</db:td>
<db:td><db:code>34</db:code></db:td>
<db:td>
<db:para>The color format is considered as ASTC compressed format with 10x10 block footprint.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ASTC_12x10</db:code></db:para>
</db:td>
<db:td><db:code>35</db:code></db:td>
<db:td>
<db:para>The color format is considered as ASTC compressed format with 12x10 block footprint.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquick3dtexturedata.xml">QQuick3DTextureData</db:link></db:emphasis>::ASTC_12x12</db:code></db:para>
</db:td>
<db:td><db:code>36</db:code></db:td>
<db:td>
<db:para>The color format is considered as ASTC compressed format with 12x12 block footprint.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>With the exception of <db:code>RGBA8</db:code>, not every format is supported at runtime as this depends on which backend is being used as well which hardware is being used.</db:para>
</db:note>
<db:note>
<db:para><db:code>RGBE</db:code> is internally represented as an <db:code>RGBA8</db:code> but is intepreted as described when used as a lightProbe or skybox texture.</db:para>
</db:note>
<db:note>
<db:para>Using the value <db:code>None</db:code> will assume the default value of <db:code>RGBA8</db:code></db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="depth">
<db:title>int QQuick3DTextureData::depth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>depth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int depth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the depth of the texture data in pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquick3dtexturedata.xml#setDepth">setDepth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>QQuick3DTextureData::Format QQuick3DTextureData::format() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQuick3DTextureData::Format</db:type>
<db:methodname>format</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuick3DTextureData::Format format() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the format of the texture data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquick3dtexturedata.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasTransparency">
<db:title>bool QQuick3DTextureData::hasTransparency() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasTransparency</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasTransparency() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the texture data has transparency.</db:para>
<db:para>The default value is <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquick3dtexturedata.xml#setHasTransparency">setHasTransparency</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDepth">
<db:title>void QQuick3DTextureData::setDepth(int <db:emphasis>depth</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDepth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>depth</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDepth(int depth)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">depth</db:code> of the texture data in pixels. Setting the depth above 0 means that the texture is handled as a 3D texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquick3dtexturedata.xml#depth">depth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>void QQuick3DTextureData::setFormat(QQuick3DTextureData::Format <db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFormat</db:methodname>
<db:methodparam>
<db:type>QQuick3DTextureData::Format</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFormat(QQuick3DTextureData::Format format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">format</db:code> of the texture data.</db:para>
<db:para>The default format is /c RGBA8</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquick3dtexturedata.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHasTransparency">
<db:title>void QQuick3DTextureData::setHasTransparency(bool <db:emphasis>hasTransparency</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHasTransparency</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>hasTransparency</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHasTransparency(bool hasTransparency)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set <db:code role="parameter">hasTransparency</db:code> to true if the texture data has an active alpha channel with non-opaque values.</db:para>
<db:para>This is used as an optimization by the engine so that for formats that do support an alpha channel do not need to have each value checked for non-opaque values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquick3dtexturedata.xml#hasTransparency">hasTransparency</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSize">
<db:title>void QQuick3DTextureData::setSize(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSize</db:methodname>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSize(const QSize &amp;size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">size</db:code> of the texture data in pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquick3dtexturedata.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextureData">
<db:title>void QQuick3DTextureData::setTextureData(const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTextureData</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTextureData(const QByteArray &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the texture data. The contents of <db:code role="parameter">data</db:code> must respect the <db:link xlink:href="qquick3dtexturedata.xml#size">size</db:link> and <db:link xlink:href="qquick3dtexturedata.xml#format">format</db:link> properties as the backend will try and upload and use the data as if it were a texture of size and format, and if there is any deviation the result will be somewhere between incorrect rendering of the texture, or potentially a crash.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquick3dtexturedata.xml#textureData">textureData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>QSize QQuick3DTextureData::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of the texture data in pixels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquick3dtexturedata.xml#setSize">setSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textureData">
<db:title>const QByteArray QQuick3DTextureData::textureData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QByteArray</db:type>
<db:methodname>textureData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QByteArray textureData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current texture data defined by this item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquick3dtexturedata.xml#setTextureData">setTextureData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
