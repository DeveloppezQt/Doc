<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Important Concepts In Qt Quick - The Visual Canvas</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Overview of visual canvas concepts.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The visual canvas provided by the Qt Quick is a two dimensional canvas with z-ordering.</db:para>
<db:section xml:id="coordinate-system">
<db:title>Coordinate System</db:title>
<db:para>The top-left pixel in the Qt Quick coordinate system is the [0, 0] pixel. The coordinate system of a child item is relative to its visual parent item. See the documentation on the <db:link xlink:href="qtquick-visualcanvas-coordinates.xml">Coordinate System</db:link> for in-depth information about the coordinate system utilized by Qt Quick.</db:para>
</db:section>
<db:section xml:id="visual-parent">
<db:title>Visual Parent</db:title>
<db:para>There are two separate kinds of parenting in a QML application which uses Qt Quick. The first kind is the ownership-parent (also known as the <db:link xlink:href="qobject.xml">QObject</db:link> parent) which determines object lifetime semantics. The second kind is the visual parent which determines where on the canvas an item is drawn, and also certain properties (for example, opacity applies to visual children).</db:para>
<db:para>In almost all cases, the visual parent is identical to the ownership-parent. See the documentation about the <db:link xlink:href="qtquick-visualcanvas-visualparent.xml">Visual Parent</db:link> for more in-depth information on the topic.</db:para>
</db:section>
<db:section xml:id="scene-graph">
<db:title>Scene Graph</db:title>
<db:para>Modern computer systems and devices use graphics processing units or GPUs to render graphics. Qt Quick can leverage this graphics hardware by using graphics APIs like <db:link xlink:href="https://www.khronos.org/opengl/">OpenGL</db:link>, <db:link xlink:href="https://www.khronos.org/vulkan/">Vulkan</db:link>, or <db:link xlink:href="https://developer.apple.com/documentation/metal">Metal</db:link>. In Qt 6, the default graphics adaptation for Qt Quick supports multiple graphics APIs, such as OpenGL (ES), Vulkan, Metal and Direct 3D 11, to display applications developed with Qt Quick in QML. In particular, Qt Quick defines a scene graph which is then rendered. See the documentation about the <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml">Scene Graph</db:link> for in-depth information about the concept of a scene graph and why it is beneficial, and about the scene graph adaptations provided by Qt Quick.</db:para>
</db:section>
</db:article>
