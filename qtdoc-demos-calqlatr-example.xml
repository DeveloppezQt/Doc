<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Calqlatr</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt Quick app designed for landscape and portrait devices that uses custom components, responsive layouts, and JavaScript for the application logic.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquick-demo-calqlatr.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Calqlatr</db:emphasis> demonstrates various QML and <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> features, such as displaying custom components and using responsive layouts. The application logic is implemented in JavaScript and the UI is implemented in QML.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="displaying-custom-components">
<db:title>Displaying Custom Components</db:title>
<db:para>In the <db:emphasis>Calqlatr</db:emphasis> application, custom types are used. These are defined in their own separate .qml file:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>BackspaceButton.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>CalculatorButton.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>Display.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>NumberPad.qml</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To use these custom types in Main.qml, add an import statement for the content folder where the types are located:</db:para>
<db:programlisting language="cpp">import &quot;content&quot;
</db:programlisting>
<db:para>For example, the NumberPad type is used in Main.qml to create the number pad of the calculator. This is nested within an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> type, the base type for all visual items in Qt Quick:</db:para>
<db:programlisting language="cpp">        NumberPad {
            id: numberPad;
            Layout.margins: root.margin
        }
</db:programlisting>
<db:para>Custom components are QML types that can be defined in any QML file, they behave the same as the components that are defined in their own .qml file, like NumberPad.qml. In NumberPad.qml the DigitButton component and the OperatorButton component are defined. New properties can be added or exsisting properties can be modified in these components. Here the onReleased handler is overwritten for both of the custom components.</db:para>
<db:programlisting language="cpp">    component DigitButton: CalculatorButton {
        onReleased: {
            root.digitPressed(text)
            updateDimmed()
        }
    }

    component OperatorButton: CalculatorButton {
        onReleased: {
            root.operatorPressed(text)
            updateDimmed()
        }
        textColor: controller.qtGreenColor
        implicitWidth: 48
        dimmable: true
    }
</db:programlisting>
<db:para>In addition, use the CalculatorButton type for the different buttons on NumberPad. CalculatorButton.qml defines basic properties of a button, which you modify for each instance in NumberPad.qml. For the digit and operator buttons, a few extra properties are added, such as the text, width, and dimmable properties. Use dimmable to visually disable (dimmed) buttons whenever the calculator engine does not accept input from that button.</db:para>
<db:programlisting language="cpp">                DigitButton {
                    text: &quot;e&quot;
                    dimmable: true
                    implicitWidth: 48
                }
</db:programlisting>
<db:para>There is another file in the content directory called BackSpaceButton.qml, this is a special case of the CalculatorButton where we would like to render an image onto the button, rather than use text. This button is the same as an OperatorButton, but includes an icon rather than text:</db:para>
<db:programlisting language="cpp">    icon.source: getIcon()
    icon.width: 38
    icon.height: 38
    icon.color: getIconColor()
    // include this text property as the calculator engine
    // differentiates buttons through text. The text is never drawn.
    text: &quot;bs&quot;

    property bool dimmable: true
    property bool dimmed: false
    readonly property color backgroundColor: &quot;#222222&quot;
    readonly property color borderColor: &quot;#A9A9A9&quot;
    readonly property color backspaceRedColor: &quot;#DE2C2C&quot;
    readonly property int buttonRadius: 8

    function getBackgroundColor() {
        if (button.dimmable &amp;amp;&amp;amp; button.dimmed)
            return backgroundColor
        if (button.pressed)
            return backspaceRedColor
        return backgroundColor
</db:programlisting>
</db:section>
<db:section xml:id="responsive-layouts">
<db:title>Responsive Layouts</db:title>
<db:para>In this example, responsive layouts arrange the different UI components for both portrait and landscape modes. It also lets you toggle between these two modes. You can notice this in Main.qml, which defines a ColumnLayout for portrait mode, and RowLayout for landscape.</db:para>
<db:programlisting language="cpp">        ColumnLayout {
            id: portraitMode
            anchors.fill: parent
            visible: true

            LayoutItemProxy {
                target: display
                Layout.minimumHeight: display.minHeight
            }
            LayoutItemProxy {
                target: numberPad
                Layout.alignment: Qt.AlignHCenter
            }
        }

        RowLayout {
            id: landscapeMode
            anchors.fill: parent
            visible: false

            LayoutItemProxy {
                target: display
            }
            LayoutItemProxy {
                target: numberPad
                Layout.alignment: Qt.AlignVCenter
            }
        }
</db:programlisting>
<db:para>The ColumnLayout, represents the portrait layout for the application, and the RowLayout represents the landscape layout. The visible property handles which layout is used at a given time. The id property of the NumberPad and Display components are used to set the target property of the LayoutItemProxy types. This allows both layouts to use the same content items. In addition, properties can be forwarded within the LayoutItemProxy item to the target itself. For example, when the NumberPad is instantiated, both layouts require a different Layout.alignment.</db:para>
<db:para>Toggling between the two layouts is done in the signal handler for the isPortraitMode property, by setting their visibilities:</db:para>
<db:programlisting language="cpp">        onIsPortraitModeChanged: {
            if (isPortraitMode) {
                portraitMode.visible = true
                landscapeMode.visible = false
            } else {
                portraitMode.visible = false
                landscapeMode.visible = true
            }
        }
</db:programlisting>
<db:para>This is possible because QML creates signal handlers for all self-declared properties, in this case the on&lt;Property&gt;Changed handler, where &lt;property&gt; is the isPortraitMode property.</db:para>
<db:para>A responsive layout is also used in NumberPad.qml when defining the portrait and landscape layout for the NumberPad itself.</db:para>
<db:programlisting language="cpp">        RowLayout {
            spacing: controller.spacing

            GridLayout {
                id: scientificGrid
                columns: 3
                columnSpacing: controller.spacing
                rowSpacing: controller.spacing
                visible: !isPortraitMode

                OperatorButton { text: &quot;x²&quot; }
                OperatorButton { text: &quot;⅟x&quot; }
                OperatorButton { text: &quot;√&quot; }
                OperatorButton { text: &quot;x³&quot; }
                OperatorButton { text: &quot;sin&quot; }
                OperatorButton { text: &quot;|x|&quot; }
                OperatorButton { text: &quot;log&quot; }
                OperatorButton { text: &quot;cos&quot; }
                DigitButton {
                    text: &quot;e&quot;
                    dimmable: true
                    implicitWidth: 48
                }
                OperatorButton { text: &quot;ln&quot; }
                OperatorButton { text: &quot;tan&quot; }
                DigitButton {
                    text: &quot;π&quot;
                    dimmable: true
                    implicitWidth: 48
                }
            }

            GridLayout {
                id: mainGrid
                columns: 5
                columnSpacing: controller.spacing
                rowSpacing: controller.spacing

                BackspaceButton {}
                DigitButton { text: &quot;7&quot; }
                DigitButton { text: &quot;8&quot; }
                DigitButton { text: &quot;9&quot; }
                OperatorButton {
                    text: &quot;÷&quot;
                    implicitWidth: 38
                }

                OperatorButton {
                    text: &quot;AC&quot;
                    textColor: controller.backspaceRedColor
                    accentColor: controller.backspaceRedColor
                }
                DigitButton { text: &quot;4&quot; }
                DigitButton { text: &quot;5&quot; }
                DigitButton { text: &quot;6&quot; }
                OperatorButton {
                    text: &quot;×&quot;
                    implicitWidth: 38
                }

                OperatorButton {
                    text: &quot;=&quot;
                    implicitHeight: 81
                    Layout.rowSpan: 2
                }
                DigitButton { text: &quot;1&quot; }
                DigitButton { text: &quot;2&quot; }
                DigitButton { text: &quot;3&quot; }
                OperatorButton {
                    text: &quot;−&quot;
                    implicitWidth: 38
                }

                OperatorButton {
                    text: &quot;±&quot;
                    implicitWidth: 38
                }
                DigitButton { text: &quot;0&quot; }
                DigitButton {
                    text: &quot;.&quot;
                    dimmable: true
                }
                OperatorButton {
                    text: &quot;+&quot;
                    implicitWidth: 38
                }
            }
        } // RowLayout
</db:programlisting>
<db:para>In this case, two LayoutItemProxy items are created. Their target properties are set to scientificGrid, a Grid type, containing all the scientific buttons, and the mainGrid, another Grid type, containing all the standard buttons.</db:para>
</db:section>
<db:section xml:id="performing-calculations">
<db:title></db:title><db:para>In CalculatorButton.qml, the text colors of the number pad buttons are also animated.</db:para>
<db:programlisting language="cpp">        ...
        color: getBackgroundColor()
        border.color: getBorderColor()
    }

    contentItem: Text {
        text: button.text
        font.pixelSize: button.fontSize
        horizontalAlignment: Text.AlignHCenter
        verticalAlignment: Text.AlignVCenter
        color: getTextColor()
        Behavior on color {
            ColorAnimation {
                duration: 120
                easing.type: Easing.OutElastic
            }
</db:programlisting>
<db:para>The color changes are animated by defining a Behavior on the color property. When a button is set to dimmed = true, the button appears darker. When a button is pressed, it lights up green. In order to dynamically change the dimmed property of all the buttons on the NumberPad, the buttonPressed signal calls the NumberPad's updateDimmed() function.</db:para>
<db:programlisting language="cpp">    function updateDimmed(){
        for (let i = 0; i &amp;lt; mainGrid.children.length; i++){
            mainGrid.children[i].dimmed = root.isButtonDisabled(mainGrid.children[i].text)
        }
        for (let j = 0; j &amp;lt; scientificGrid.children.length; j++){
            scientificGrid.children[j].dimmed = root.isButtonDisabled(scientificGrid.children[j].text)
        }
    }
</db:programlisting>
</db:section>
<db:section xml:id="performing-calculations">
<db:title>Performing Calculations</db:title>
<db:para>The calculator.js file defines the calculator's engine. It contains variables to store the calculator's state, and functions that are called when the user presses the digit and operator buttons. To use the engine, import calculator.js into the Main.qml file using the alias CalcEngine:</db:para>
<db:programlisting language="cpp">import &quot;content/calculator.js&quot; as CalcEngine
</db:programlisting>
<db:para>By default, importing a JavaScript file from QML creates a new instance of it, and any state it contains is unique to that instance. The use of .pragma library allows the state to be shared amongst all users of the script.</db:para>
<db:programlisting language="cpp">.pragma library
</db:programlisting>
<db:para>When users press a digit, the text from the digit appears on the display. When they press an operator, the appropriate calculation is performed, and the result can be displayed using the equals (=) operator. The all-clear (AC) operator resets the calculator engine.</db:para>
</db:section>
<db:section xml:id="list-of-files">
<db:title>List of Files</db:title>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdoc.git/tree/examples/demos/calqlatr?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmlapplications.xml">QML Applications</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
