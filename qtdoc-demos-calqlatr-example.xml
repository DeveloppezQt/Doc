<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Calqlatr</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt Quick app designed for portrait devices that uses custom components, animated with <db:link xlink:href="qml-qt3d-animation-animationcontroller.xml">AnimationController</db:link>, and JavaScript for the application logic.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquick-demo-calqlatr.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Calqlatr</db:emphasis> demonstrates various QML and <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> features, such as displaying custom components and using animation to move the components around in the application view. The application logic is implemented in JavaScript and the appearance is implemented in QML.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="displaying-custom-components">
<db:title>Displaying Custom Components</db:title>
<db:para>In the Calqlatr application, we use the following custom types that are each defined in a separate .qml file:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>CalculatorButton.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>Display.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>NumberPad.qml</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To use the custom types, we add an import statement to the main QML file, calqlatr.qml that imports the folder called content where the types are located:</db:para>
<db:programlisting language="cpp">import &quot;content&quot;
</db:programlisting>
<db:para>We can then display custom components by adding the component types to any QML file. For example, we use the NumberPad type in calqlatr.qml to create the number pad of the calculator. We place the type inside an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> QML type, which is the base type for all visual items in Qt Quick:</db:para>
<db:programlisting language="cpp">    Item {
        id: pad
        width: 180
        NumberPad {
            id: numPad
            y: 10
            anchors.horizontalCenter: pad.horizontalCenter
            display: display
        }
    }
</db:programlisting>
<db:para>Further, we use the CalculatorButton type in the NumberPad type to create the calculator buttons. CalculatorButton.qml specifies the basic properties for a button that we can modify for each button instance in NumberPad.qml. For the digit and separator buttons, we additionally specify the text property.</db:para>
<db:para>For the operator buttons, we also specify another color (green) using the property alias color and set the operator property to true. We use the operator property in functions that perform the calculations.</db:para>
<db:para>We place the buttons inside a <db:link xlink:href="qml-qtquick-grid.xml">Grid</db:link> QML type to position them in a grid:</db:para>
<db:programlisting language="cpp">Grid {
    id: root
    columns: 3
    columnSpacing: 2
    rowSpacing: 2

    required property Display display

    function updateDimmed() {
        for (let i = 0; i &amp;lt; children.length; i++) {
            children[i].dimmed = CalcEngine.isOperationDisabled(children[i].text)
        }
    }

    component DigitButton: CalculatorButton {
        onPressed: function() {
            CalcEngine.digitPressed(text, root.display)
            root.updateDimmed()
        }
    }

    component OperatorButton: CalculatorButton {
        onPressed: function() {
            CalcEngine.operatorPressed(text, root.display)
            root.updateDimmed()
        }
        textColor: &quot;#6da43d&quot;
        dimmable: true
    }

    Component.onCompleted: updateDimmed()

    DigitButton {
        text: &quot;7&quot;
    }
    DigitButton {
        text: &quot;8&quot;
    }
    DigitButton {
        text: &quot;9&quot;
    }
    DigitButton {
        text: &quot;4&quot;
    }
    DigitButton {
        text: &quot;5&quot;
    }
    DigitButton {
        text: &quot;6&quot;
    }
    DigitButton {
        text: &quot;1&quot;
    }
    DigitButton {
        text: &quot;2&quot;
    }
    DigitButton {
        text: &quot;3&quot;
    }
    DigitButton {
        text: &quot;0&quot;
    }
    DigitButton {
        text: &quot;.&quot;
        dimmable: true
    }
    DigitButton {
        text: &quot; &quot;
    }
    OperatorButton {
        text: &quot;±&quot;
    }
    OperatorButton {
        text: &quot;−&quot;
    }
    OperatorButton {
        text: &quot;+&quot;
    }
    OperatorButton {
        text: &quot;√&quot;
    }
    OperatorButton {
        text: &quot;÷&quot;
    }
    OperatorButton {
        text: &quot;×&quot;
    }
    OperatorButton {
        text: &quot;C&quot;
    }
    OperatorButton {
        text: &quot; &quot;
    }
    OperatorButton {
        text: &quot;=&quot;
    }
}
</db:programlisting>
<db:para>Some of the buttons also have a dimmable property set, meaning that they can be visually disabled (dimmed) whenever the calculator engine does not accept input from that button. As an example, the button for square root operator is dimmed for negative values.</db:para>
</db:section>
<db:section xml:id="animating-components">
<db:title>Animating Components</db:title>
<db:para>We use the Display type to display calculations. In Display.qml, we use images to make the display component look like a slip of paper that contains a grip. Users can drag the grip to move the display from left to right.</db:para>
<db:para>When users release the grip, the <db:link xlink:href="qml-qtquick-animationcontroller.xml">AnimationController</db:link> QML type that we define in the calqlatr.qml file finishes running the controlled animation in either a forwards or a backwards direction. To run the animation, we call either completeToEnd() or completeToBeginning(), depending on the direction. We do this in the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>'s onReleased signal handler, where controller is the id of our <db:link xlink:href="qml-qtquick-animationcontroller.xml">AnimationController</db:link>:</db:para>
<db:programlisting language="cpp">        MouseArea {
            ...
            onReleased: {
                if (rewind)
                    controller.completeToBeginning()
                else
                    controller.completeToEnd()
            }
        }
</db:programlisting>
<db:para>Unlike other QML animation types, <db:link xlink:href="qml-qtquick-animationcontroller.xml">AnimationController</db:link> is not driven by internal timers but by explicitly setting its progress property to a value between 0.0 and 1.0.</db:para>
<db:para>Inside the <db:link xlink:href="qml-qtquick-animationcontroller.xml">AnimationController</db:link>, we run two <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> instances in parallel to move the number pad and the display components simultaneously to the opposite sides of the view. In addition, we run a <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> instance to scale the number pad during the transition, giving the animation some depth.</db:para>
<db:programlisting language="cpp">    AnimationController {
        id: controller
        animation: ParallelAnimation {
            NumberAnimation {
                target: display
                property: &quot;x&quot;
                duration: 400
                from: -16
                to: window.width - display.width
                easing.type: Easing.InOutQuad
            }
            NumberAnimation {
                target: pad
                property: &quot;x&quot;
                duration: 400
                from: window.width - pad.width
                to: 0
                easing.type: Easing.InOutQuad
            }
            SequentialAnimation {
                NumberAnimation {
                    target: pad
                    property: &quot;scale&quot;
                    duration: 200
                    from: 1
                    to: 0.97
                    easing.type: Easing.InOutQuad
                }
                NumberAnimation {
                    target: pad
                    property: &quot;scale&quot;
                    duration: 200
                    from: 0.97
                    to: 1
                    easing.type: Easing.InOutQuad
                }
            }
        }
    }
</db:programlisting>
<db:para>We use the easing curve of the type Easing.InOutQuad to accelerate the motion until halfway and then decelerate it.</db:para>
<db:para>In CalculatorButton.qml, the text colors of the number pad buttons are also animated.</db:para>
<db:programlisting language="cpp">        ...
        color: button.dimmable &amp;amp;&amp;amp; button.dimmed
            ? Qt.darker(button.textColor)
            : (button.pressed ? Qt.lighter(button.textColor) : button.textColor)
        Behavior on color {
            ColorAnimation {
                duration: 120
                easing.type: Easing.OutElastic
            }
        }
</db:programlisting>
<db:para>We use <db:link xlink:href="qml-qtqml-qt.xml#darker-method">Qt.darker</db:link>() to darken the color when the button is dimmed, and <db:link xlink:href="qml-qtqml-qt.xml#lighter-method">Qt.lighter</db:link>() to <db:emphasis>light up</db:emphasis> the button when pressed. The latter is done in a separate <db:link xlink:href="qml-qtquick-state.xml">state</db:link> called <db:emphasis>&quot;pressed&quot;</db:emphasis>, which activates when the pressed property of the button's <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is set.</db:para>
<db:para>The color changes are animated by defining a <db:link xlink:href="qml-qtquick-behavior.xml">Behavior</db:link> on the color property.</db:para>
<db:para>In order to dynamically change the dimmed property of all the buttons of the NumberPad, we connect its buttonPressed signal to the NumberPad's updateDimmed() function.</db:para>
<db:programlisting language="cpp">    function updateDimmed() {
        for (let i = 0; i &amp;lt; children.length; i++) {
            children[i].dimmed = CalcEngine.isOperationDisabled(children[i].text)
        }
    }

    component DigitButton: CalculatorButton {
        onPressed: function() {
            CalcEngine.digitPressed(text, root.display)
            root.updateDimmed()
        }
    }

    component OperatorButton: CalculatorButton {
        onPressed: function() {
            CalcEngine.operatorPressed(text, root.display)
            root.updateDimmed()
        }
        textColor: &quot;#6da43d&quot;
        dimmable: true
    }
</db:programlisting>
<db:para>This way, when a button is pressed, all buttons on the NumPad receive a buttonPressed signal and are activated or deactivated according to the state of the calculator engine.</db:para>
</db:section>
<db:section xml:id="performing-calculations">
<db:title>Performing Calculations</db:title>
<db:para>The calculator.js file defines our calculator engine. It contains variables to store the calculator state, and functions that are called when the user presses the digit and operator buttons. To use the engine, we import calculator.js in the calqlatr.qml file as CalcEngine:</db:para>
<db:programlisting language="cpp">import &quot;content/calculator.js&quot; as CalcEngine
</db:programlisting>
<db:para>By default, <db:link xlink:href="qtqml-javascript-resources.xml">importing a JavaScript file from QML creates a new instance of it</db:link>, and any state it contains is unique to that instance. For this example we want the state to be shared amongst all users of the script, so we use .pragma library to indicate that:</db:para>
<db:programlisting language="cpp">.pragma library
</db:programlisting>
<db:para>When users press a digit, the text from the digit appears on the display. When they press an operator, the appropriate calculation is performed, and the result can be displayed using the equals (=) operator. The clear (C) operator resets the calculator engine.</db:para>
<db:programlisting language="cpp">function isOperationDisabled(op) {
    if (digits === &quot;&quot; &amp;amp;&amp;amp; !((op &amp;gt;= &quot;0&quot; &amp;amp;&amp;amp; op &amp;lt;= &quot;9&quot;) || op === &quot;.&quot;))
        return true
    else if (op === '=' &amp;amp;&amp;amp; previousOperator.length !== 1)
        return true
    else if (op === &quot;.&quot; &amp;amp;&amp;amp; digits.toString().search(/\./) !== -1) {
        return true
    } else if (op === &quot;√&quot; &amp;amp;&amp;amp;  digits.toString().search(/-/) !== -1) {
        return true
    } else {
        return false
    }
}

function digitPressed(op, display) {
    if (isOperationDisabled(op))
        return
    if (digits.toString().length &amp;gt;= display.maxDigits)
        return
    if (lastOp.toString().length === 1 &amp;amp;&amp;amp; ((lastOp &amp;gt;= &quot;0&quot; &amp;amp;&amp;amp; lastOp &amp;lt;= &quot;9&quot;) || lastOp === &quot;.&quot;) ) {
        digits = digits + op.toString()
        display.appendDigit(op.toString())
    } else {
        digits = op
        display.appendDigit(op.toString())
    }
    lastOp = op
}

function operatorPressed(op, display) {
    if (isOperationDisabled(op))
        return
    lastOp = op

    if (op === &quot;±&quot;) {
            digits = Number(digits.valueOf() * -1)
            display.setDigit(display.displayNumber(digits))
            return
        }

    if (previousOperator === &quot;+&quot;) {
        digits = Number(digits.valueOf()) + Number(curVal.valueOf())
    } else if (previousOperator === &quot;−&quot;) {
        digits = Number(curVal.valueOf()) - Number(digits.valueOf())
    } else if (previousOperator === &quot;×&quot;) {
        digits = Number(curVal) * Number(digits.valueOf())
    } else if (previousOperator === &quot;÷&quot;) {
        digits = Number(curVal) / Number(digits.valueOf())
    }

    if (op === &quot;+&quot; || op === &quot;−&quot; || op === &quot;×&quot; || op === &quot;÷&quot;) {
        previousOperator = op
        curVal = digits.valueOf()
        digits = &quot;&quot;
        display.displayOperator(previousOperator)
        return
    }

    if (op === &quot;=&quot;) {
        display.newLine(&quot;=&quot;, digits.valueOf())
    }
</db:programlisting>
</db:section>
<db:section xml:id="list-of-files">
<db:title>List of Files</db:title>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdoc.git/tree/examples/demos/calqlatr?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmlapplications.xml">QML Applications</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
