<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Controls 2 - Gallery</db:title>
<db:productname>QtQuickControls2</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 2 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A gallery of controls.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.6
import QtQuick.Layouts 1.1
import QtQuick.Controls 2.1

Pane {
    padding: 0

    property var delegateComponentMap: {
        &quot;ItemDelegate&quot;: itemDelegateComponent,
        &quot;SwipeDelegate&quot;: swipeDelegateComponent,
        &quot;CheckDelegate&quot;: checkDelegateComponent,
        &quot;RadioDelegate&quot;: radioDelegateComponent,
        &quot;SwitchDelegate&quot;: switchDelegateComponent
    }

    Component {
        id: itemDelegateComponent

        ItemDelegate {
            text: labelText
            width: parent.width
        }
    }

    Component {
        id: swipeDelegateComponent

        SwipeDelegate {
            id: swipeDelegate
            text: labelText
            width: parent.width

            Component {
                id: removeComponent

                Rectangle {
                    color: SwipeDelegate.pressed ? &quot;#333&quot; : &quot;#444&quot;
                    width: parent.width
                    height: parent.height
                    clip: true

                    SwipeDelegate.onClicked: view.model.remove(ourIndex)

                    Label {
                        font.pixelSize: swipeDelegate.font.pixelSize
                        text: &quot;Remove&quot;
                        color: &quot;white&quot;
                        anchors.centerIn: parent
                    }
                }
            }

            swipe.left: removeComponent
            swipe.right: removeComponent
        }
    }

    Component {
        id: checkDelegateComponent

        CheckDelegate {
            text: labelText
            width: parent.width
        }
    }

    ButtonGroup {
        id: radioButtonGroup
    }

    Component {
        id: radioDelegateComponent

        RadioDelegate {
            text: labelText
            ButtonGroup.group: radioButtonGroup
        }
    }

    Component {
        id: switchDelegateComponent

        SwitchDelegate {
            text: labelText
        }
    }

    ColumnLayout {
        id: column
        spacing: 40
        anchors.fill: parent
        anchors.topMargin: 20

        Label {
            Layout.fillWidth: true
            wrapMode: Label.Wrap
            horizontalAlignment: Qt.AlignHCenter
            text: &quot;Delegate controls are used as delegates in views such as ListView.&quot;
        }

        ListView {
            id: listView
            Layout.fillWidth: true
            Layout.fillHeight: true
            clip: true
            model: ListModel {
                ListElement { type: &quot;ItemDelegate&quot;; text: &quot;ItemDelegate&quot; }
                ListElement { type: &quot;ItemDelegate&quot;; text: &quot;ItemDelegate&quot; }
                ListElement { type: &quot;ItemDelegate&quot;; text: &quot;ItemDelegate&quot; }
                ListElement { type: &quot;SwipeDelegate&quot;; text: &quot;SwipeDelegate&quot; }
                ListElement { type: &quot;SwipeDelegate&quot;; text: &quot;SwipeDelegate&quot; }
                ListElement { type: &quot;SwipeDelegate&quot;; text: &quot;SwipeDelegate&quot; }
                ListElement { type: &quot;CheckDelegate&quot;; text: &quot;CheckDelegate&quot; }
                ListElement { type: &quot;CheckDelegate&quot;; text: &quot;CheckDelegate&quot; }
                ListElement { type: &quot;CheckDelegate&quot;; text: &quot;CheckDelegate&quot; }
                ListElement { type: &quot;RadioDelegate&quot;; text: &quot;RadioDelegate&quot; }
                ListElement { type: &quot;RadioDelegate&quot;; text: &quot;RadioDelegate&quot; }
                ListElement { type: &quot;RadioDelegate&quot;; text: &quot;RadioDelegate&quot; }
                ListElement { type: &quot;SwitchDelegate&quot;; text: &quot;SwitchDelegate&quot; }
                ListElement { type: &quot;SwitchDelegate&quot;; text: &quot;SwitchDelegate&quot; }
                ListElement { type: &quot;SwitchDelegate&quot;; text: &quot;SwitchDelegate&quot; }
            }

            section.property: &quot;type&quot;
            section.delegate: Pane {
                width: listView.width
                height: sectionLabel.implicitHeight + 20

                Label {
                    id: sectionLabel
                    text: section
                    anchors.centerIn: parent
                }
            }

            delegate: Loader {
                id: delegateLoader
                width: listView.width
                sourceComponent: delegateComponentMap[text]

                property string labelText: text
                property ListView view: listView
                property int ourIndex: index

                // Can't find a way to do this in the SwipeDelegate component itself,
                // so do it here instead.
                ListView.onRemove: SequentialAnimation {
                    PropertyAction {
                        target: delegateLoader
                        property: &quot;ListView.delayRemove&quot;
                        value: true
                    }
                    NumberAnimation {
                        target: item
                        property: &quot;height&quot;
                        to: 0
                        easing.type: Easing.InOutQuad
                    }
                    PropertyAction {
                        target: delegateLoader
                        property: &quot;ListView.delayRemove&quot;
                        value: false
                    }
                }
            }
        }
    }
}

</db:programlisting>
</db:article>
