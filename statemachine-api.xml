<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The State Machine Framework</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of the State Machine framework for constructing and executing state graphs.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The State Machine framework provides classes for creating and executing state graphs. The concepts and notation are based on those from Harel's <db:link xlink:href="http://www.wisdom.weizmann.ac.il/~dharel/SCANNED.PAPERS/Statecharts.pdf">Statecharts: A visual formalism for complex systems</db:link>, which is also the basis of UML state diagrams. The semantics of state machine execution are based on <db:link xlink:href="">State Chart XML (SCXML)</db:link>.</db:para>
<db:para>Statecharts provide a graphical way of modeling how a system reacts to stimuli. This is done by defining the possible <db:emphasis>states</db:emphasis> that the system can be in, and how the system can move from one state to another (<db:emphasis>transitions</db:emphasis> between states). A key characteristic of event-driven systems (such as Qt applications) is that behavior often depends not only on the last or current event, but also the events that preceded it. With statecharts, this information is easy to express.</db:para>
<db:para>The State Machine framework provides an API and execution model that can be used to effectively embed the elements and semantics of statecharts in Qt applications. The framework integrates tightly with Qt's meta-object system; for example, transitions between states can be triggered by signals, and states can be configured to set properties and invoke methods on {<db:link xlink:href="qobject.xml">QObject</db:link>}s. Qt's event system is used to drive the state machines.</db:para>
<db:para>The state graph in the State Machine framework is hierarchical. States can be nested inside of other states, and the current configuration of the state machine consists of the set of states which are currently active. All the states in a valid configuration of the state machine will have a common ancestor.</db:para>
<db:section xml:id="classes-in-the-state-machine-framework">
<db:title>Classes in the State Machine Framework</db:title>
<db:para>These classes are provided by qt for creating event-driven state machines.</db:para>
<db:variablelist role="statemachine">
<db:varlistentry>
<db:term><db:link xlink:href="qabstractstate.xml" xlink:role="class">QAbstractState</db:link></db:term>
<db:listitem>
<db:para>The QAbstractState class is the base class of states of a QStateMachine.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qabstracttransition.xml" xlink:role="class">QAbstractTransition</db:link></db:term>
<db:listitem>
<db:para>The QAbstractTransition class is the base class of transitions between QAbstractState objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qeventtransition.xml" xlink:role="class">QEventTransition</db:link></db:term>
<db:listitem>
<db:para>The QEventTransition class provides a QObject-specific transition for Qt events.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qfinalstate.xml" xlink:role="class">QFinalState</db:link></db:term>
<db:listitem>
<db:para>The QFinalState class provides a final state.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qhistorystate.xml" xlink:role="class">QHistoryState</db:link></db:term>
<db:listitem>
<db:para>The QHistoryState class provides a means of returning to a previously active substate.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsignaltransition.xml" xlink:role="class">QSignalTransition</db:link></db:term>
<db:listitem>
<db:para>The QSignalTransition class provides a transition based on a Qt signal.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstate.xml" xlink:role="class">QState</db:link></db:term>
<db:listitem>
<db:para>The QState class provides a general-purpose state for QStateMachine.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstatemachine.xml" xlink:role="class">QStateMachine</db:link></db:term>
<db:listitem>
<db:para>The QStateMachine class provides a hierarchical finite state machine.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstatemachine-signalevent.xml" xlink:role="class">QStateMachine::SignalEvent</db:link></db:term>
<db:listitem>
<db:para>The SignalEvent class represents a Qt signal event.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstatemachine-wrappedevent.xml" xlink:role="class">QStateMachine::WrappedEvent</db:link></db:term>
<db:listitem>
<db:para>The WrappedEvent class inherits QEvent and holds a clone of an event associated with a QObject.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="a-simple-state-machine">
<db:title>A Simple State Machine</db:title>
<db:para>To demonstrate the core functionality of the State Machine API, let's look at a small example: A state machine with three states, s1, s2 and s3. The state machine is controlled by a single QPushButton; when the button is clicked, the machine transitions to another state. Initially, the state machine is in state s1. The statechart for this machine is as follows:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/statemachine-button.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The following snippet shows the code needed to create such a state machine. First, we create the state machine and states:</db:para>
<db:programlisting language="cpp">    QStateMachine machine;
    QState *s1 = new QState();
    QState *s2 = new QState();
    QState *s3 = new QState();
</db:programlisting>
<db:para>Then, we create the transitions by using the <db:link xlink:href="qstate.xml#addTransition">QState::addTransition</db:link>() function:</db:para>
<db:programlisting language="cpp">    s1-&gt;addTransition(button, SIGNAL(clicked()), s2);
    s2-&gt;addTransition(button, SIGNAL(clicked()), s3);
    s3-&gt;addTransition(button, SIGNAL(clicked()), s1);
</db:programlisting>
<db:para>Next, we add the states to the machine and set the machine's initial state:</db:para>
<db:programlisting language="cpp">    machine.addState(s1);
    machine.addState(s2);
    machine.addState(s3);
    machine.setInitialState(s1);
</db:programlisting>
<db:para>Finally, we start the state machine:</db:para>
<db:programlisting language="cpp">    machine.start();
</db:programlisting>
<db:para>The state machine executes asynchronously, i.e. it becomes part of your application's event loop.</db:para>
</db:section>
<db:section xml:id="doing-useful-work-on-state-entry-and-exit">
<db:title>Doing Useful Work on State Entry and Exit</db:title>
<db:para>The above state machine merely transitions from one state to another, it doesn't perform any operations. The QState::assignProperty() function can be used to have a state set a property of a <db:link xlink:href="qobject.xml">QObject</db:link> when the state is entered. In the following snippet, the value that should be assigned to a QLabel's text property is specified for each state:</db:para>
<db:programlisting language="cpp">    s1-&gt;assignProperty(label, &quot;text&quot;, &quot;In state s1&quot;);
    s2-&gt;assignProperty(label, &quot;text&quot;, &quot;In state s2&quot;);
    s3-&gt;assignProperty(label, &quot;text&quot;, &quot;In state s3&quot;);
</db:programlisting>
<db:para>When any of the states is entered, the label's text will be changed accordingly.</db:para>
<db:para>The <db:link xlink:href="qabstractstate.xml#entered">QState::entered</db:link>() signal is emitted when the state is entered, and the <db:link xlink:href="qabstractstate.xml#exited">QState::exited</db:link>() signal is emitted when the state is exited. In the following snippet, the button's <db:link xlink:href="">showMaximized()</db:link> slot will be called when state s3 is entered, and the button's <db:link xlink:href="">showMinimized()</db:link> slot will be called when s3 is exited:</db:para>
<db:programlisting language="cpp">    QObject::connect(s3, SIGNAL(entered()), button, SLOT(showMaximized()));
    QObject::connect(s3, SIGNAL(exited()), button, SLOT(showMinimized()));
</db:programlisting>
<db:para>Custom states can reimplement <db:link xlink:href="qabstractstate.xml#onEntry">QAbstractState::onEntry</db:link>() and <db:link xlink:href="qabstractstate.xml#onExit">QAbstractState::onExit</db:link>().</db:para>
</db:section>
<db:section xml:id="state-machines-that-finish">
<db:title>State Machines That Finish</db:title>
<db:para>The state machine defined in the previous section never finishes. In order for a state machine to be able to finish, it needs to have a top-level <db:emphasis>final</db:emphasis> state (<db:link xlink:href="qfinalstate.xml">QFinalState</db:link> object). When the state machine enters a top-level final state, the machine will emit the <db:link xlink:href="qstate.xml#finished">QStateMachine::finished</db:link>() signal and halt.</db:para>
<db:para>All you need to do to introduce a final state in the graph is create a <db:link xlink:href="qfinalstate.xml">QFinalState</db:link> object and use it as the target of one or more transitions.</db:para>
</db:section>
<db:section xml:id="sharing-transitions-by-grouping-states">
<db:title>Sharing Transitions By Grouping States</db:title>
<db:para>Assume we wanted the user to be able to quit the application at any time by clicking a Quit button. In order to achieve this, we need to create a final state and make it the target of a transition associated with the Quit button's <db:link xlink:href="">clicked()</db:link> signal. We could add a transition from each of s1, s2 and s3; however, this seems redundant, and one would also have to remember to add such a transition from every new state that is added in the future.</db:para>
<db:para>We can achieve the same behavior (namely that clicking the Quit button quits the state machine, regardless of which state the state machine is in) by grouping states s1, s2 and s3. This is done by creating a new top-level state and making the three original states children of the new state. The following diagram shows the new state machine.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/statemachine-button-nested.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The three original states have been renamed s11, s12 and s13 to reflect that they are now children of the new top-level state, s1. Child states implicitly inherit the transitions of their parent state. This means it is now sufficient to add a single transition from s1 to the final state s2. New states added to s1 will also automatically inherit this transition.</db:para>
<db:para>All that's needed to group states is to specify the proper parent when the state is created. You also need to specify which of the child states is the initial one (i.e. which child state the state machine should enter when the parent state is the target of a transition).</db:para>
<db:programlisting language="cpp">    QState *s1 = new QState();
    QState *s11 = new QState(s1);
    QState *s12 = new QState(s1);
    QState *s13 = new QState(s1);
    s1-&gt;setInitialState(s11);
    machine.addState(s1);
    QFinalState *s2 = new QFinalState();
    s1-&gt;addTransition(quitButton, SIGNAL(clicked()), s2);
    machine.addState(s2);
    machine.setInitialState(s1);

    QObject::connect(&amp;machine, SIGNAL(finished()), QApplication::instance(), SLOT(quit()));
</db:programlisting>
<db:para>In this case we want the application to quit when the state machine is finished, so the machine's <db:link xlink:href="qstate.xml#finished">finished</db:link>() signal is connected to the application's <db:link xlink:href="">quit()</db:link> slot.</db:para>
<db:para>A child state can override an inherited transition. For example, the following code adds a transition that effectively causes the Quit button to be ignored when the state machine is in state s12.</db:para>
<db:programlisting language="cpp">    s12-&gt;addTransition(quitButton, SIGNAL(clicked()), s12);
</db:programlisting>
<db:para>A transition can have any state as its target, i.e. the target state does not have to be on the same level in the state hierarchy as the source state.</db:para>
</db:section>
<db:section xml:id="using-history-states-to-save-and-restore-the-current-state">
<db:title>Using History States to Save and Restore the Current State</db:title>
<db:para>Imagine that we wanted to add an &quot;interrupt&quot; mechanism to the example discussed in the previous section; the user should be able to click a button to have the state machine perform some non-related task, after which the state machine should resume whatever it was doing before (i.e. return to the old state, which is one of s11, s12 and s13 in this case).</db:para>
<db:para>Such behavior can easily be modeled using <db:emphasis>history states</db:emphasis>. A history state (<db:link xlink:href="qhistorystate.xml">QHistoryState</db:link> object) is a pseudo-state that represents the child state that the parent state was in the last time the parent state was exited.</db:para>
<db:para>A history state is created as a child of the state for which we wish to record the current child state; when the state machine detects the presence of such a state at runtime, it automatically records the current (real) child state when the parent state is exited. A transition to the history state is in fact a transition to the child state that the state machine had previously saved; the state machine automatically &quot;forwards&quot; the transition to the real child state.</db:para>
<db:para>The following diagram shows the state machine after the interrupt mechanism has been added.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/statemachine-button-history.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The following code shows how it can be implemented; in this example we simply display a message box when s3 is entered, then immediately return to the previous child state of s1 via the history state.</db:para>
<db:programlisting language="cpp">    QHistoryState *s1h = new QHistoryState(s1);

    QState *s3 = new QState();
    s3-&gt;assignProperty(label, &quot;text&quot;, &quot;In s3&quot;);
    QMessageBox *mbox = new QMessageBox(mainWindow);
    mbox-&gt;addButton(QMessageBox::Ok);
    mbox-&gt;setText(&quot;Interrupted!&quot;);
    mbox-&gt;setIcon(QMessageBox::Information);
    QObject::connect(s3, SIGNAL(entered()), mbox, SLOT(exec()));
    s3-&gt;addTransition(s1h);
    machine.addState(s3);

    s1-&gt;addTransition(interruptButton, SIGNAL(clicked()), s3);
</db:programlisting>
</db:section>
<db:section xml:id="using-parallel-states-to-avoid-a-combinatorial-explosion-of-states">
<db:title>Using Parallel States to Avoid a Combinatorial Explosion of States</db:title>
<db:para>Assume that you wanted to model a set of mutually exclusive properties of a car in a single state machine. Let's say the properties we are interested in are Clean vs Dirty, and Moving vs Not moving. It would take four mutually exclusive states and eight transitions to be able to represent and freely move between all possible combinations.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/statemachine-nonparallel.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>If we added a third property (say, Red vs Blue), the total number of states would double, to eight; and if we added a fourth property (say, Enclosed vs Convertible), the total number of states would double again, to 16.</db:para>
<db:para>Using parallel states, the total number of states and transitions grows linearly as we add more properties, instead of exponentially. Furthermore, states can be added to or removed from the parallel state without affecting any of their sibling states.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/statemachine-parallel.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>To create a parallel state group, pass <db:link xlink:href="qstate.xml#ChildMode-enum">QState::ParallelStates</db:link> to the <db:link xlink:href="qstate.xml">QState</db:link> constructor.</db:para>
<db:programlisting language="cpp">    QState *s1 = new QState(QState::ParallelStates);
    // s11 and s12 will be entered in parallel
    QState *s11 = new QState(s1);
    QState *s12 = new QState(s1);
</db:programlisting>
<db:para>When a parallel state group is entered, all its child states will be simultaneously entered. Transitions within the individual child states operate normally. However, any of the child states may take a transition which exits the parent state. When this happens, the parent state and all of its child states are exited.</db:para>
<db:para>The parallelism in the State Machine framework follows an interleaved semantics. All parallel operations will be executed in a single, atomic step of the event processing, so no event can interrupt the parallel operations. However, events will still be processed sequentially, since the machine itself is single threaded. As an example: Consider the situation where there are two transitions that exit the same parallel state group, and their conditions become true simultaneously. In this case, the event that is processed last of the two will not have any effect, since the first event will already have caused the machine to exit from the parallel state.</db:para>
</db:section>
<db:section xml:id="detecting-that-a-composite-state-has-finished">
<db:title>Detecting that a Composite State has Finished</db:title>
<db:para>A child state can be final (a <db:link xlink:href="qfinalstate.xml">QFinalState</db:link> object); when a final child state is entered, the parent state emits the <db:link xlink:href="qstate.xml#finished">QState::finished</db:link>() signal. The following diagram shows a composite state s1 which does some processing before entering a final state:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/statemachine-finished.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>When s1 's final state is entered, s1 will automatically emit <db:link xlink:href="qstate.xml#finished">finished</db:link>(). We use a signal transition to cause this event to trigger a state change:</db:para>
<db:programlisting language="cpp">  s1-&gt;addTransition(s1, SIGNAL(finished()), s2);
</db:programlisting>
<db:para>Using final states in composite states is useful when you want to hide the internal details of a composite state; i.e. the only thing the outside world should be able to do is enter the state, and get a notification when the state has completed its work. This is a very powerful abstraction and encapsulation mechanism when building complex (deeply nested) state machines. (In the above example, you could of course create a transition directly from s1 's done state rather than relying on s1 's <db:link xlink:href="qstate.xml#finished">finished</db:link>() signal, but with the consequence that implementation details of s1 are exposed and depended on).</db:para>
<db:para>For parallel state groups, the <db:link xlink:href="qstate.xml#finished">QState::finished</db:link>() signal is emitted when <db:emphasis>all</db:emphasis> the child states have entered final states.</db:para>
</db:section>
<db:section xml:id="targetless-transitions">
<db:title>Targetless Transitions</db:title>
<db:para>A transition need not have a target state. A transition without a target can be triggered the same way as any other transition; the difference is that when a targetless transition is triggered, it doesn't cause any state changes. This allows you to react to a signal or event when your machine is in a certain state, without having to leave that state. Example:</db:para>
<db:programlisting language="cpp">QStateMachine machine;
QState *s1 = new QState(&amp;machine);

QPushButton button;
QSignalTransition *trans = new QSignalTransition(&amp;button, SIGNAL(clicked()));
s1-&gt;addTransition(trans);

QMessageBox msgBox;
msgBox.setText(&quot;The button was clicked; carry on.&quot;);
QObject::connect(trans, SIGNAL(triggered()), &amp;msgBox, SLOT(exec()));

machine.setInitialState(s1);
</db:programlisting>
<db:para>The message box will be displayed each time the button is clicked, but the state machine will remain in its current state (s1). If the target state were explicitly set to s1, however, s1 would be exited and re-entered each time (e.g. the <db:link xlink:href="qabstractstate.xml#entered">QAbstractState::entered</db:link>() and <db:link xlink:href="qabstractstate.xml#exited">QAbstractState::exited</db:link>() signals would be emitted).</db:para>
</db:section>
<db:section xml:id="events-transitions-and-guards">
<db:title>Events, Transitions and Guards</db:title>
<db:para>A <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link> runs its own event loop. For signal transitions (<db:link xlink:href="qsignaltransition.xml">QSignalTransition</db:link> objects), <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link> automatically posts a <db:link xlink:href="qstatemachine-signalevent.xml">QStateMachine::SignalEvent</db:link> to itself when it intercepts the corresponding signal; similarly, for <db:link xlink:href="qobject.xml">QObject</db:link> event transitions (<db:link xlink:href="qeventtransition.xml">QEventTransition</db:link> objects) a <db:link xlink:href="qstatemachine-wrappedevent.xml">QStateMachine::WrappedEvent</db:link> is posted.</db:para>
<db:para>You can post your own events to the state machine using <db:link xlink:href="qstatemachine.xml#postEvent">QStateMachine::postEvent</db:link>().</db:para>
<db:para>When posting a custom event to the state machine, you typically also have one or more custom transitions that can be triggered from events of that type. To create such a transition, you subclass <db:link xlink:href="qabstracttransition.xml">QAbstractTransition</db:link> and reimplement <db:link xlink:href="qabstracttransition.xml#eventTest">QAbstractTransition::eventTest</db:link>(), where you check if an event matches your event type (and optionally other criteria, e.g. attributes of the event object).</db:para>
<db:para>Here we define our own custom event type, StringEvent, for posting strings to the state machine:</db:para>
<db:programlisting language="cpp">struct StringEvent : public QEvent
{
    StringEvent(const QString &amp;val)
    : QEvent(QEvent::Type(QEvent::User+1)),
      value(val) {}

    QString value;
};
</db:programlisting>
<db:para>Next, we define a transition that only triggers when the event's string matches a particular string (a <db:emphasis>guarded</db:emphasis> transition):</db:para>
<db:programlisting language="cpp">class StringTransition : public QAbstractTransition
{
    Q_OBJECT

public:
    StringTransition(const QString &amp;value)
        : m_value(value) {}

protected:
    virtual bool eventTest(QEvent *e)
    {
        if (e-&gt;type() != QEvent::Type(QEvent::User+1)) // StringEvent
            return false;
        StringEvent *se = static_cast&lt;StringEvent*&gt;(e);
        return (m_value == se-&gt;value);
    }

    virtual void onTransition(QEvent *) {}

private:
    QString m_value;
};
</db:programlisting>
<db:para>In the <db:link xlink:href="qabstracttransition.xml#eventTest">eventTest</db:link>() reimplementation, we first check if the event type is the desired one; if so, we cast the event to a StringEvent and perform the string comparison.</db:para>
<db:para>The following is a statechart that uses the custom event and transition:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/statemachine-customevents.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Here's what the implementation of the statechart looks like:</db:para>
<db:programlisting language="cpp">    QStateMachine machine;
    QState *s1 = new QState();
    QState *s2 = new QState();
    QFinalState *done = new QFinalState();

    StringTransition *t1 = new StringTransition(&quot;Hello&quot;);
    t1-&gt;setTargetState(s2);
    s1-&gt;addTransition(t1);
    StringTransition *t2 = new StringTransition(&quot;world&quot;);
    t2-&gt;setTargetState(done);
    s2-&gt;addTransition(t2);

    machine.addState(s1);
    machine.addState(s2);
    machine.addState(done);
    machine.setInitialState(s1);
</db:programlisting>
<db:para>Once the machine is started, we can post events to it.</db:para>
<db:programlisting language="cpp">    machine.postEvent(new StringEvent(&quot;Hello&quot;));
    machine.postEvent(new StringEvent(&quot;world&quot;));
</db:programlisting>
<db:para>An event that is not handled by any relevant transition will be silently consumed by the state machine. It can be useful to group states and provide a default handling of such events; for example, as illustrated in the following statechart:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/statemachine-customevents2.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>For deeply nested statecharts, you can add such &quot;fallback&quot; transitions at the level of granularity that's most appropriate.</db:para>
</db:section>
<db:section xml:id="using-restore-policy-to-automatically-restore-properties">
<db:title>Using Restore Policy To Automatically Restore Properties</db:title>
<db:para>In some state machines it can be useful to focus the attention on assigning properties in states, not on restoring them when the state is no longer active. If you know that a property should always be restored to its initial value when the machine enters a state that does not explicitly give the property a value, you can set the global restore policy to QStateMachine::RestoreProperties.</db:para>
<db:programlisting language="cpp">QStateMachine machine;
machine.setGlobalRestorePolicy(QStateMachine::RestoreProperties);
</db:programlisting>
<db:para>When this restore policy is set, the machine will automatically restore all properties. If it enters a state where a given property is not set, it will first search the hierarchy of ancestors to see if the property is defined there. If it is, the property will be restored to the value defined by the closest ancestor. If not, it will be restored to its initial value (i.e. the value of the property before any property assignments in states were executed.)</db:para>
<db:para>Take the following code:</db:para>
<db:programlisting language="cpp">    QStateMachine machine;
    machine.setGlobalRestorePolicy(QStateMachine::RestoreProperties);

    QState *s1 = new QState();
    s1-&gt;assignProperty(object, &quot;fooBar&quot;, 1.0);
    machine.addState(s1);
    machine.setInitialState(s1);

    QState *s2 = new QState();
    machine.addState(s2);
</db:programlisting>
<db:para>Lets say the property fooBar is 0.0 when the machine starts. When the machine is in state s1, the property will be 1.0, since the state explicitly assigns this value to it. When the machine is in state s2, no value is explicitly defined for the property, so it will implicitly be restored to 0.0.</db:para>
<db:para>If we are using nested states, the parent defines a value for the property which is inherited by all descendants that do not explicitly assign a value to the property.</db:para>
<db:programlisting language="cpp">    QStateMachine machine;
    machine.setGlobalRestorePolicy(QStateMachine::RestoreProperties);

    QState *s1 = new QState();
    s1-&gt;assignProperty(object, &quot;fooBar&quot;, 1.0);
    machine.addState(s1);
    machine.setInitialState(s1);

    QState *s2 = new QState(s1);
    s2-&gt;assignProperty(object, &quot;fooBar&quot;, 2.0);
    s1-&gt;setInitialState(s2);

    QState *s3 = new QState(s1);
</db:programlisting>
<db:para>Here s1 has two children: s2 and s3. When s2 is entered, the property fooBar will have the value 2.0, since this is explicitly defined for the state. When the machine is in state s3, no value is defined for the state, but s1 defines the property to be 1.0, so this is the value that will be assigned to fooBar.</db:para>
</db:section>
<db:section xml:id="animating-property-assignments">
<db:title>Animating Property Assignments</db:title>
<db:para>The State Machine API connects with the Animation API in Qt to allow automatically animating properties as they are assigned in states.</db:para>
<db:para>Say we have the following code:</db:para>
<db:programlisting language="cpp">    QState *s1 = new QState();
    QState *s2 = new QState();

    s1-&gt;assignProperty(button, &quot;geometry&quot;, QRectF(0, 0, 50, 50));
    s2-&gt;assignProperty(button, &quot;geometry&quot;, QRectF(0, 0, 100, 100));

    s1-&gt;addTransition(button, SIGNAL(clicked()), s2);
</db:programlisting>
<db:para>Here we define two states of a user interface. In s1 the button is small, and in s2 it is bigger. If we click the button to transition from s1 to s2, the geometry of the button will be set immediately when a given state has been entered. If we want the transition to be smooth, however, all we need to do is make a QPropertyAnimation and add this to the transition object.</db:para>
<db:programlisting language="cpp">    QState *s1 = new QState();
    QState *s2 = new QState();

    s1-&gt;assignProperty(button, &quot;geometry&quot;, QRectF(0, 0, 50, 50));
    s2-&gt;assignProperty(button, &quot;geometry&quot;, QRectF(0, 0, 100, 100));

    QSignalTransition *transition = s1-&gt;addTransition(button, SIGNAL(clicked()), s2);
    transition-&gt;addAnimation(new QPropertyAnimation(button, &quot;geometry&quot;));
</db:programlisting>
<db:para>Adding an animation for the property in question means that the property assignment will no longer take immediate effect when the state has been entered. Instead, the animation will start playing when the state has been entered and smoothly animate the property assignment. Since we do not set the start value or end value of the animation, these will be set implicitly. The start value of the animation will be the property's current value when the animation starts, and the end value will be set based on the property assignments defined for the state.</db:para>
<db:para>If the global restore policy of the state machine is set to QStateMachine::RestoreProperties, it is possible to also add animations for the property restorations.</db:para>
</db:section>
<db:section xml:id="detecting-that-all-properties-have-been-set-in-a-state">
<db:title>Detecting That All Properties Have Been Set In A State</db:title>
<db:para>When animations are used to assign properties, a state no longer defines the exact values that a property will have when the machine is in the given state. While the animation is running, the property can potentially have any value, depending on the animation.</db:para>
<db:para>In some cases, it can be useful to be able to detect when the property has actually been assigned the value defined by a state.</db:para>
<db:para>Say we have the following code:</db:para>
<db:programlisting language="cpp">    QMessageBox *messageBox = new QMessageBox(mainWindow);
    messageBox-&gt;addButton(QMessageBox::Ok);
    messageBox-&gt;setText(&quot;Button geometry has been set!&quot;);
    messageBox-&gt;setIcon(QMessageBox::Information);

    QState *s1 = new QState();

    QState *s2 = new QState();
    s2-&gt;assignProperty(button, &quot;geometry&quot;, QRectF(0, 0, 50, 50));
    connect(s2, SIGNAL(entered()), messageBox, SLOT(exec()));

    s1-&gt;addTransition(button, SIGNAL(clicked()), s2);
</db:programlisting>
<db:para>When button is clicked, the machine will transition into state s2, which will set the geometry of the button, and then pop up a message box to alert the user that the geometry has been changed.</db:para>
<db:para>In the normal case, where animations are not used, this will operate as expected. However, if an animation for the geometry of button is set on the transition between s1 and s2, the animation will be started when s2 is entered, but the geometry property will not actually reach its defined value before the animation is finished running. In this case, the message box will pop up before the geometry of the button has actually been set.</db:para>
<db:para>To ensure that the message box does not pop up until the geometry actually reaches its final value, we can use the state's <db:link xlink:href="qstate.xml#propertiesAssigned">propertiesAssigned</db:link>() signal. The <db:link xlink:href="qstate.xml#propertiesAssigned">propertiesAssigned</db:link>() signal will be emitted when the property is assigned its final value, whether this is done immediately or after the animation has finished playing.</db:para>
<db:programlisting language="cpp">    QMessageBox *messageBox = new QMessageBox(mainWindow);
    messageBox-&gt;addButton(QMessageBox::Ok);
    messageBox-&gt;setText(&quot;Button geometry has been set!&quot;);
    messageBox-&gt;setIcon(QMessageBox::Information);

    QState *s1 = new QState();

    QState *s2 = new QState();
    s2-&gt;assignProperty(button, &quot;geometry&quot;, QRectF(0, 0, 50, 50));

    QState *s3 = new QState();
    connect(s3, SIGNAL(entered()), messageBox, SLOT(exec()));

    s1-&gt;addTransition(button, SIGNAL(clicked()), s2);
    s2-&gt;addTransition(s2, SIGNAL(propertiesAssigned()), s3);
</db:programlisting>
<db:para>In this example, when button is clicked, the machine will enter s2. It will remain in state s2 until the geometry property has been set to QRect(0, 0, 50, 50). Then it will transition into s3. When s3 is entered, the message box will pop up. If the transition into s2 has an animation for the geometry property, then the machine will stay in s2 until the animation has finished playing. If there is no such animation, it will simply set the property and immediately enter state s3.</db:para>
<db:para>Either way, when the machine is in state s3, you are guaranteed that the property geometry has been assigned the defined value.</db:para>
<db:para>If the global restore policy is set to QStateMachine::RestoreProperties, the state will not emit the <db:link xlink:href="qstate.xml#propertiesAssigned">propertiesAssigned</db:link>() signal until these have been executed as well.</db:para>
</db:section>
<db:section xml:id="what-happens-if-a-state-is-exited-before-the-animation-has-finished">
<db:title>What Happens If A State Is Exited Before The Animation Has Finished</db:title>
<db:para>If a state has property assignments, and the transition into the state has animations for the properties, the state can potentially be exited before the properties have been assigned to the values defines by the state. This is true in particular when there are transitions out from the state that do not depend on the <db:link xlink:href="qstate.xml#propertiesAssigned">propertiesAssigned</db:link>() signal, as described in the previous section.</db:para>
<db:para>The State Machine API guarantees that a property assigned by the state machine either:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Has a value explicitly assigned to the property.</db:para>
</db:listitem>
<db:listitem>
<db:para>Is currently being animated into a value explicitly assigned to the property.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When a state is exited prior to the animation finishing, the behavior of the state machine depends on the target state of the transition. If the target state explicitly assigns a value to the property, no additional action will be taken. The property will be assigned the value defined by the target state.</db:para>
<db:para>If the target state does not assign any value to the property, there are two options: By default, the property will be assigned the value defined by the state it is leaving (the value it would have been assigned if the animation had been permitted to finish playing). If a global restore policy is set, however, this will take precedence, and the property will be restored as usual.</db:para>
</db:section>
<db:section xml:id="default-animations">
<db:title>Default Animations</db:title>
<db:para>As described earlier, you can add animations to transitions to make sure property assignments in the target state are animated. If you want a specific animation to be used for a given property regardless of which transition is taken, you can add it as a default animation to the state machine. This is in particular useful when the properties assigned (or restored) by specific states is not known when the machine is constructed.</db:para>
<db:programlisting language="cpp">QState *s1 = new QState();
QState *s2 = new QState();

s2-&gt;assignProperty(object, &quot;fooBar&quot;, 2.0);
s1-&gt;addTransition(s2);

QStateMachine machine;
machine.setInitialState(s1);
machine.addDefaultAnimation(new QPropertyAnimation(object, &quot;fooBar&quot;));
</db:programlisting>
<db:para>When the machine is in state s2, the machine will play the default animation for the property fooBar since this property is assigned by s2.</db:para>
<db:para>Note that animations explicitly set on transitions will take precedence over any default animation for the given property.</db:para>
</db:section>
<db:section xml:id="nesting-state-machines">
<db:title>Nesting State Machines</db:title>
<db:para><db:link xlink:href="qstatemachine.xml">QStateMachine</db:link> is a subclass of <db:link xlink:href="qstate.xml">QState</db:link>. This allows for a state machine to be a child state of another machine. <db:link xlink:href="qstatemachine.xml">QStateMachine</db:link> reimplements <db:link xlink:href="qstate.xml#onEntry">QState::onEntry</db:link>() and calls <db:link xlink:href="qstatemachine.xml#start">QStateMachine::start</db:link>(), so that when the child state machine is entered, it will automatically start running.</db:para>
<db:para>The parent state machine treats the child machine as an <db:emphasis>atomic</db:emphasis> state in the state machine algorithm. The child state machine is self-contained; it maintains its own event queue and configuration. In particular, note that the <db:link xlink:href="qstatemachine.xml#configuration">configuration</db:link>() of the child machine is not part of the parent machine's configuration (only the child machine itself is).</db:para>
<db:para>States of the child state machine cannot be specified as targets of transitions in the parent state machine; only the child state machine itself can. Conversely, states of the parent state machine cannot be specified as targets of transitions in the child state machine. The child state machine's <db:link xlink:href="qstate.xml#finished">finished</db:link>() signal can be used to trigger a transition in the parent machine.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">The Declarative State Machine Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
