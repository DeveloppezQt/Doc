<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Charts Overview</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Visualizing data as 2D charts.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Charts enables creating stylish, interactive, data centric user interfaces. Qt Charts uses the <db:link xlink:href="graphicsview.xml">Graphics View Framework</db:link> for ease of integration. The chart components can be used as <db:link xlink:href="qwidget.xml">QWidget</db:link> or <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> objects or QML types.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_chartthemes_light.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qchart.xml">QChart</db:link> class manages the graphical representation of different types of series and other chart related objects, such as legend and axes. <db:link xlink:href="qchart.xml">QChart</db:link> is a <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> that can be shown in a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>. A simpler solution is to display a chart in a layout by using the convenience class <db:link xlink:href="qchartview.xml">QChartView</db:link> instead of <db:link xlink:href="qchart.xml">QChart</db:link>. In QML, charts are displayed using the <db:link xlink:href="qml-qtcharts-chartview.xml">ChartView</db:link> type.</db:para>
<db:para>Some chart components can also be presented as polar charts by using the the <db:link xlink:href="qpolarchart.xml">QPolarChart</db:link> class that is a specialization of the <db:link xlink:href="qchart.xml">QChart</db:link> class or the <db:link xlink:href="qml-qtcharts-polarchartview.xml">PolarChartView</db:link> QML type that is a specialization of the <db:link xlink:href="qml-qtcharts-chartview.xml">ChartView</db:link> type.</db:para>
<db:para>The look and feel of charts can be customized by using themes, modifying colors and properties, hiding chart components, or animating charts.</db:para>
<db:para>Model mappers enable using a data model derived from the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class as a data source for a chart. Model mappers can be either horizontal or vertical.</db:para>
<db:section xml:id="chart-types">
<db:title>Chart Types</db:title>
<db:para>The Qt Charts module provides the following chart types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtcharts-overview.xml#line-and-spline-charts">Line and spline charts</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtcharts-overview.xml#area-and-scatter-charts">Area and scatter charts</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtcharts-overview.xml#bar-charts">Bar charts</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtcharts-overview.xml#pie-charts">Pie charts</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtcharts-overview.xml#box-and-whiskers-charts">Box-and-whiskers charts</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtcharts-overview.xml#candlestick-charts">Candlestick charts</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtcharts-overview.xml#polar-charts">Polar charts</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Each chart type is represented by an <db:link xlink:href="qabstractseries.xml">QAbstractSeries</db:link> derived class or <db:link xlink:href="qml-qtcharts-abstractseries.xml">AbstractSeries</db:link> derived type in QML. Charts are created by using an instance of a series class and adding it to a <db:link xlink:href="qchart.xml">QChart</db:link> or <db:link xlink:href="qml-qtcharts-chartview.xml">ChartView</db:link> instance.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">QLineSeries* series = new QLineSeries();
series-&amp;gt;add(0, 6);
series-&amp;gt;add(2, 4);
...
chartView-&amp;gt;chart()-&amp;gt;addSeries(series);
chartView-&amp;gt;chart()-&amp;gt;createDefaultAxes();
</db:programlisting>
<db:para>Or, in QML:</db:para>
<db:programlisting language="qml">import QtQuick 2.0
import QtCharts 2.0

ChartView {
    width: 400
    height: 300
    theme: ChartView.ChartThemeBrownSand
    antialiasing: true

    PieSeries {
        id: pieSeries
        PieSlice { label: &quot;eaten&quot;; value: 94.9 }
        PieSlice { label: &quot;not yet eaten&quot;; value: 5.1 }
    }
}
</db:programlisting>
<db:para>You can combine different types of series in one chart.</db:para>
<db:section xml:id="line-and-spline-charts">
<db:title>Line and Spline Charts</db:title>
<db:para>Line and spline charts present data as a series of data points connected by lines. In a line chart, the data points are connected by straight lines, whereas in a spline chart they are connected by a spline. The spline is drawn by using <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link>.</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_linechart.png"/>
</db:imageobject>
</db:inlinemediaobject> <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_splinechart.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:para>A line chart is implemented by using the <db:link xlink:href="qlineseries.xml">QLineSeries</db:link> class or the <db:link xlink:href="qml-qtcharts-lineseries.xml">LineSeries</db:link> QML type.</db:para>
<db:para>A spline chart is implemented by using the <db:link xlink:href="qsplineseries.xml">QSplineSeries</db:link> class that inherits <db:link xlink:href="qlineseries.xml">QLineSeries</db:link> or the <db:link xlink:href="qml-qtcharts-splineseries.xml">SplineSeries</db:link> type that inherits <db:link xlink:href="qml-qtcharts-lineseries.xml">LineSeries</db:link>.</db:para>
<db:para>For more information, see <db:link xlink:href="qtcharts-linechart-example.xml">LineChart Example</db:link>, <db:link xlink:href="qtcharts-splinechart-example.xml">SplineChart Example</db:link>, and <db:link xlink:href="qtcharts-dynamicspline-example.xml">Dynamic Spline Example</db:link>. For an example of combining a line chart with a bar chart and using a common axis for both, see <db:link xlink:href="qtcharts-lineandbar-example.xml">Line and BarChart Example</db:link>.</db:para>
</db:section>
<db:section xml:id="area-and-scatter-charts">
<db:title>Area and Scatter Charts</db:title>
<db:para>Area charts present data as an area bound by two lines, whereas scatter charts present data as a collection of points.</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_areachart.png"/>
</db:imageobject>
</db:inlinemediaobject> <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_scatterchart.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:para>An area chart is implemented by using the <db:link xlink:href="qareaseries.xml">QAreaSeries</db:link> class or the <db:link xlink:href="qml-qtcharts-areaseries.xml">AreaSeries</db:link> QML type. By default, the x-axis is used as one boundary and <db:link xlink:href="qlineseries.xml">QLineSeries</db:link> or <db:link xlink:href="qml-qtcharts-lineseries.xml">LineSeries</db:link> as the other. However, you can use <db:link xlink:href="qlineseries.xml">QLineSeries</db:link> or <db:link xlink:href="qml-qtcharts-lineseries.xml">LineSeries</db:link> as both boundaries.</db:para>
<db:para>A scatter chart is implemented by using the <db:link xlink:href="qscatterseries.xml">QScatterSeries</db:link> class or the <db:link xlink:href="qml-qtcharts-scatterseries.xml">ScatterSeries</db:link> QML type.</db:para>
<db:para>For more information, see <db:link xlink:href="qtcharts-areachart-example.xml">AreaChart Example</db:link>, <db:link xlink:href="qtcharts-scatterchart-example.xml">ScatterChart Example</db:link>, and <db:link xlink:href="qtcharts-scatterinteractions-example.xml">Scatter Interactions Example</db:link>.</db:para>
</db:section>
<db:section xml:id="bar-charts">
<db:title>Bar Charts</db:title>
<db:para>A bar chart presents data as horizontal or vertical bars that are grouped by category. The <db:link xlink:href="qbarset.xml">QBarSet</db:link> class and the <db:link xlink:href="qml-qtcharts-barset.xml">BarSet</db:link> QML type represent one set of bars in a bar chart. The <db:link xlink:href="qabstractbarseries.xml">QAbstractBarSeries</db:link> class is an abstract parent class for all bar series classes, and the <db:link xlink:href="qml-qtcharts-abstractbarseries.xml">AbstractBarSeries</db:link> type is the parent type of bar series types. The series type determines how the data is presented.</db:para>
<db:para>The <db:link xlink:href="qbarseries.xml">QBarSeries</db:link> class and the <db:link xlink:href="qml-qtcharts-barseries.xml">BarSeries</db:link> QML type present data as vertical bars grouped by category. Similarly, the <db:link xlink:href="qhorizontalbarseries.xml">QHorizontalBarSeries</db:link> class and the <db:link xlink:href="qml-qtcharts-horizontalbarseries.xml">HorizontalBarSeries</db:link> QML type present data as horizontal bars.</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_barchart.png"/>
</db:imageobject>
</db:inlinemediaobject> <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_horizontalbarchart.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:para>The <db:link xlink:href="qstackedbarseries.xml">QStackedBarSeries</db:link> class and the <db:link xlink:href="qml-qtcharts-stackedbarseries.xml">StackedBarSeries</db:link> type present a series of data as vertically stacked bars, with one bar per category. The corresponding horizontal class and type are <db:link xlink:href="qhorizontalstackedbarseries.xml">QHorizontalStackedBarSeries</db:link> and <db:link xlink:href="qml-qtcharts-horizontalstackedbarseries.xml">HorizontalStackedBarSeries</db:link>, respectively.</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_stackedbarchart.png"/>
</db:imageobject>
</db:inlinemediaobject> <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_horizontalstackedbarchart.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:para>The <db:link xlink:href="qpercentbarseries.xml">QPercentBarSeries</db:link> class and <db:link xlink:href="qml-qtcharts-percentbarseries.xml">PercentBarSeries</db:link> QML type present a series of categorized data as a percentage of each category. The corresponding horizontal class and type are <db:link xlink:href="qhorizontalpercentbarseries.xml">QHorizontalPercentBarSeries</db:link> and <db:link xlink:href="qml-qtcharts-horizontalpercentbarseries.xml">HorizontalPercentBarSeries</db:link>, respectively.</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_percentbarchart.png"/>
</db:imageobject>
</db:inlinemediaobject> <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_horizontalpercentbarchart.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:para>For more information, see <db:link xlink:href="qtcharts-barchart-example.xml">BarChart Example</db:link>, <db:link xlink:href="qtcharts-horizontalbarchart-example.xml">HorizontalBarChart Example</db:link>, <db:link xlink:href="qtcharts-stackedbarchart-example.xml">StackedBarChart Example</db:link>, <db:link xlink:href="qtcharts-horizontalstackedbarchart-example.xml">HorizontalStackedBarChart Example</db:link>, <db:link xlink:href="qtcharts-percentbarchart-example.xml">PercentBarChart Example</db:link>, and <db:link xlink:href="qtcharts-horizontalpercentbarchart-example.xml">HorizontalPercentBarChart Example</db:link>.</db:para>
</db:section>
<db:section xml:id="pie-charts">
<db:title>Pie Charts</db:title>
<db:para>Pie charts present data as a pie that consists of pie slices. The pie is implemented using the <db:link xlink:href="qpieseries.xml">QPieSeries</db:link> class or the <db:link xlink:href="qml-qtcharts-pieseries.xml">PieSeries</db:link> QML type and the pie slices are added using the <db:link xlink:href="qpieslice.xml">QPieSlice</db:link> class or the <db:link xlink:href="qml-qtcharts-pieslice.xml">PieSlice</db:link> QML type.</db:para>
<db:para>The pie can be turned into a donut by specifying a hole size between 0.0 and 1.0.</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_piechart.png"/>
</db:imageobject>
</db:inlinemediaobject> <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_donutchart.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:para>For more information, see <db:link xlink:href="qtcharts-piechart-example.xml">PieChart Example</db:link>, <db:link xlink:href="qtcharts-piechartcustomization-example.xml">Pie Chart Customization Example</db:link>, <db:link xlink:href="qtcharts-donutchart-example.xml">DonutChart Example</db:link>, <db:link xlink:href="qtcharts-donutbreakdown-example.xml">Donut Chart Breakdown Example</db:link>, and <db:link xlink:href="qtcharts-nesteddonuts-example.xml">Nested Donuts Example</db:link>.</db:para>
</db:section>
<db:section xml:id="box-and-whiskers-charts">
<db:title>Box-and-Whiskers Charts</db:title>
<db:para>The box-and-whiskers charts present data as quartiles extended with whiskers that show the variability of the values. The items in box plot series are grouped by category, similarly to bar sets in bar series. For each box-and-whiskers item, the lower extreme, lower quartile, median, upper quartile, and upper extreme value are specified.</db:para>
<db:para>A box-and-whiskers chart is implemented by using the <db:link xlink:href="qboxplotseries.xml">QBoxPlotSeries</db:link> and <db:link xlink:href="qboxset.xml">QBoxSet</db:link> classes or the <db:link xlink:href="qml-qtcharts-boxplotseries.xml">BoxPlotSeries</db:link> and <db:link xlink:href="qml-qtcharts-boxset.xml">BoxSet</db:link> QML types.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_boxplotchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>For more information, see <db:link xlink:href="qtcharts-boxplotchart-example.xml">Box and Whiskers Example</db:link>.</db:para>
</db:section>
<db:section xml:id="candlestick-charts">
<db:title>Candlestick Charts</db:title>
<db:para>Candlestick charts presents a series of data shown as candlesticks.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_candlestickchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A candlestick chart is implemented by using the <db:link xlink:href="qcandlestickseries.xml">QCandlestickSeries</db:link> and <db:link xlink:href="qcandlestickset.xml">QCandlestickSet</db:link> classes or the <db:link xlink:href="qml-qtcharts-candlestickseries.xml">CandlestickSeries</db:link> and <db:link xlink:href="qml-qtcharts-candlestickset.xml">CandlestickSet</db:link> QML types.</db:para>
</db:section>
<db:section xml:id="polar-charts">
<db:title>Polar Charts</db:title>
<db:para>Polar charts present data in a circular graph, where the placement of data is based on the angle and distance from the center of the graph, the <db:emphasis>pole</db:emphasis>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_polarchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qpolarchart.xml">QPolarChart</db:link> class is a specialization of the <db:link xlink:href="qchart.xml">QChart</db:link> class. It supports line, spline, area, and scatter series, as well as all the axis types supported by them. The axis can be used either as a radial or an angular axis. In QML, the corresponding type is <db:link xlink:href="qml-qtcharts-polarchartview.xml">PolarChartView</db:link>.</db:para>
<db:para>For more information, see <db:link xlink:href="qtcharts-polarchart-example.xml">Polar Chart Example</db:link> and <db:link xlink:href="qtcharts-qmlpolarchart-example.xml">Qml Polar Chart</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="axes">
<db:title>Axes</db:title>
<db:para>Qt Charts supports the following axis types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Value axis</db:para>
</db:listitem>
<db:listitem>
<db:para>Category axis</db:para>
</db:listitem>
<db:listitem>
<db:para>Bar category axis</db:para>
</db:listitem>
<db:listitem>
<db:para>Date-time axis</db:para>
</db:listitem>
<db:listitem>
<db:para>Logarithmic value axis</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>An axis can be set up to show a line with tick marks, grid lines, and shades. The values on the axis are drawn at the positions of tick marks. All axis types are specializations of the <db:link xlink:href="qabstractaxis.xml">QAbstractAxis</db:link> class or the <db:link xlink:href="qml-qtcharts-abstractaxis.xml">AbstractAxis</db:link> QML type.</db:para>
<db:para>A value axis adds real values to a chart's axis. It is implemented using the <db:link xlink:href="qvalueaxis.xml">QValueAxis</db:link> class or the <db:link xlink:href="qml-qtcharts-valueaxis.xml">ValueAxis</db:link> QML type.</db:para>
<db:para>A category axis is implemented using the <db:link xlink:href="qcategoryaxis.xml">QCategoryAxis</db:link> class or the <db:link xlink:href="qml-qtcharts-categoryaxis.xml">CategoryAxis</db:link> QML type. It has named ranges and adjustable range widths.</db:para>
<db:para>The bar category axis is similar to a category axis, but the range width is the same for all ranges. A bar category axis is implemented using the <db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link> class or the <db:link xlink:href="qml-qtcharts-barcategoryaxis.xml">BarCategoryAxis</db:link> QML type.</db:para>
<db:para>A date-time axis adds dates and times to a chart's axis. It is implemented using the <db:link xlink:href="qdatetimeaxis.xml">QDateTimeAxis</db:link> class or the <db:link xlink:href="qml-qtcharts-datetimeaxis.xml">DateTimeAxis</db:link> QML type.</db:para>
<db:para>A logarithmic axis adds a logarithmic scale to a chart's axis. A logarithmic scale is a nonlinear scale that is based on orders of magnitude, so that each tick mark on the axis is the previous tick mark multiplied by a value. A logarithmic axis is implemented using the <db:link xlink:href="qlogvalueaxis.xml">QLogValueAxis</db:link> class or the <db:link xlink:href="qml-qtcharts-logvalueaxis.xml">LogValueAxis</db:link> QML type.</db:para>
<db:para>Multiple axes can be defined for one chart. The axes can be placed down, up, left, or right of the chart. Further, the axes can be of different types. However, mixing axis types that would result in different domains is not supported, such as specifying <db:link xlink:href="qvalueaxis.xml">QValueAxis</db:link> and <db:link xlink:href="qlogvalueaxis.xml">QLogValueAxis</db:link> on the same orientation.</db:para>
<db:para>For more information, see <db:link xlink:href="qtcharts-datetimeaxis-example.xml">DateTimeAxis Example</db:link>, <db:link xlink:href="qtcharts-logvalueaxis-example.xml">Logarithmic Axis Example</db:link>, <db:link xlink:href="qtcharts-multiaxis-example.xml">Multiple Axes Example</db:link>, and <db:link xlink:href="qtcharts-qmlaxes-example.xml">Qml Axes</db:link>.</db:para>
</db:section>
<db:section xml:id="legend">
<db:title>Legend</db:title>
<db:para>A legend is a graphical object that displays the legend of a chart. Legend objects cannot be created or deleted, but they can be referenced via the <db:link xlink:href="qchart.xml">QChart</db:link> class or the <db:link xlink:href="qml-qtcharts-chartview.xml">ChartView</db:link> QML type. The legend state is updated by <db:link xlink:href="qchart.xml">QChart</db:link> or <db:link xlink:href="qml-qtcharts-chartview.xml">ChartView</db:link> when series change.</db:para>
<db:para>A legend can be positioned below or above the chart, as well as to the left or right of it. By default, the legend is attached to the chart view, but it can be detached to a separate graphics item that can be moved around freely.</db:para>
<db:para>It is possible to hide either individual markers from the legend or the whole legend.</db:para>
<db:para>Legend markers can be modified by using the <db:link xlink:href="qlegendmarker.xml">QLegendMarker</db:link> base class and the subclasses for each series type: <db:link xlink:href="qarealegendmarker.xml">QAreaLegendMarker</db:link>, <db:link xlink:href="qbarlegendmarker.xml">QBarLegendMarker</db:link>, <db:link xlink:href="qboxplotlegendmarker.xml">QBoxPlotLegendMarker</db:link>, <db:link xlink:href="qcandlesticklegendmarker.xml">QCandlestickLegendMarker</db:link>, and <db:link xlink:href="qxylegendmarker.xml">QXYLegendMarker</db:link>.</db:para>
<db:para>In QML, legend markers can be modified by creating custom legends, as illustrated by the <db:link xlink:href="qtcharts-qmlcustomlegend-example.xml">Qml Custom Legend</db:link> example.</db:para>
</db:section>
<db:section xml:id="interacting-with-charts">
<db:title>Interacting with Charts</db:title>
<db:para>End users can interact with charts by dynamically adding values to them, drilling down into data, zooming into and out of charts, scrolling charts, and clicking items in charts or hovering the mouse over them.</db:para>
<db:section xml:id="drawing-data-dynamically">
<db:title>Drawing Data Dynamically</db:title>
<db:para>It is possible to add data to charts dynamically and to make the chart view scroll automatically to display the new data.</db:para>
<db:para>For more information, see <db:link xlink:href="qtcharts-dynamicspline-example.xml">Dynamic Spline Example</db:link>.</db:para>
</db:section>
<db:section xml:id="drilling-down-into-data">
<db:title>Drilling Down into Data</db:title>
<db:para>Drilldown effects can be implemented to bar or pie charts, for example. When users select an item in the chart, a more detailed view of the item is displayed. This is implemented by deleting the first series and adding another one.</db:para>
<db:para>For more information, see <db:link xlink:href="qtcharts-stackedbarchartdrilldown-example.xml">StackedBarChart Drilldown Example</db:link> and <db:link xlink:href="qtcharts-piechartdrilldown-example.xml">PieChart Drilldown Example</db:link>.</db:para>
</db:section>
<db:section xml:id="zooming-and-scrolling">
<db:title>Zooming and Scrolling</db:title>
<db:para>Users can use the keyboard for zooming and scrolling. They can scroll charts by using the arrow keys and zoom into or out of charts by using the plus and minus keys. In addition, <db:link xlink:href="qrubberband.xml">QRubberBand</db:link> can be used for selecting the area to zoom into.</db:para>
<db:para>On touch devices, gestures can be used for panning and zooming.</db:para>
<db:para>For more information, see <db:link xlink:href="qtcharts-zoomlinechart-example.xml">Zoom Line Example</db:link>.</db:para>
</db:section>
<db:section xml:id="clicking-and-hovering">
<db:title>Clicking and Hovering</db:title>
<db:para>You can connect slots to signals emitted when end users click items in charts or hover the mouse over them. This enables you to add elements, such as callouts, to the charts.</db:para>
<db:para>For more information, see <db:link xlink:href="qtcharts-callout-example.xml">Callout Example</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="themes">
<db:title>Themes</db:title>
<db:para>A theme is a built-in collection of UI style related settings applied to all the visual elements of a chart, such as colors, pens, brushes, and fonts of series, as well as axes, title, and legend.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_chartthemes_blue_cerulean.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Qt Charts comes with the following predefined themes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Light theme, which is the default theme</db:para>
</db:listitem>
<db:listitem>
<db:para>Cerulean blue theme</db:para>
</db:listitem>
<db:listitem>
<db:para>Dark theme</db:para>
</db:listitem>
<db:listitem>
<db:para>Sand brown theme</db:para>
</db:listitem>
<db:listitem>
<db:para>Natural color system (NCS) blue theme</db:para>
</db:listitem>
<db:listitem>
<db:para>High contrast theme</db:para>
</db:listitem>
<db:listitem>
<db:para>Icy blue theme</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt theme</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The themes can be customized by changing the colors, pens, brushes, and fonts. New themes can be added by modifying the Qt Charts source code.</db:para>
<db:note>
<db:para>Changing the theme will overwrite all customization previously applied to the series.</db:para>
</db:note>
<db:para>For more information, see the <db:link xlink:href="qtcharts-chartthemes-example.xml">Chart themes example</db:link>.</db:para>
</db:section>
</db:article>
