<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPointingDevice Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link> class describes a device from which mouse, touch or tablet events originate.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPointingDevice</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qinputdevice.xml" xlink:role="class">QInputDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPointingDevice is part of <db:simplelist><db:member>events</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Each <db:link xlink:href="qpointerevent.xml">QPointerEvent</db:link> contains a <db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link> pointer to allow accessing device-specific properties like type and capabilities. It is the responsibility of the platform or generic plug-ins to register the available pointing devices via QWindowSystemInterface before generating any pointer events. Applications do not need to instantiate this class, they should just access the global instances pointed to by <db:link xlink:href="qinputevent.xml#device">QPointerEvent::device</db:link>().</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="GrabTransition-enum">
<db:title>enum QPointingDevice::GrabTransition</db:title>
<db:para>This enum represents a transition of exclusive or passive grab from one object (possibly <db:code>nullptr</db:code>) to another (possibly <db:code>nullptr</db:code>). It is emitted as an argument of the <db:link xlink:href="qpointingdevice.xml#grabChanged">QPointingDevice::grabChanged</db:link>() signal.</db:para>
<db:para>Valid values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::GrabExclusive</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Emitted after <db:link xlink:href="qpointerevent.xml#setExclusiveGrabber">QPointerEvent::setExclusiveGrabber</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::UngrabExclusive</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>Emitted after <db:link xlink:href="qpointerevent.xml#setExclusiveGrabber">QPointerEvent::setExclusiveGrabber</db:link>() when the grabber is set to <db:code>nullptr</db:code>, to notify that the grab has terminated normally.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::CancelGrabExclusive</db:code></db:para>
</db:td>
<db:td><db:code>0x30</db:code></db:td>
<db:td>
<db:para>Emitted after <db:link xlink:href="qpointerevent.xml#setExclusiveGrabber">QPointerEvent::setExclusiveGrabber</db:link>() when the grabber is set to a different object, to notify that the old grabber's grab is &quot;stolen&quot;.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::GrabPassive</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Emitted after <db:link xlink:href="qpointerevent.xml#addPassiveGrabber">QPointerEvent::addPassiveGrabber</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::UngrabPassive</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Emitted when a passive grab is terminated normally, for example after <db:link xlink:href="qpointerevent.xml#removePassiveGrabber">QPointerEvent::removePassiveGrabber</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::CancelGrabPassive</db:code></db:para>
</db:td>
<db:td><db:code>0x03</db:code></db:td>
<db:td>
<db:para>Emitted when a passive grab is terminated abnormally (a gesture is canceled).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::OverrideGrabPassive</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>This value is not currently used.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PointerType-enum">
<db:title>enum QPointingDevice::PointerType</db:title>
<db:bridgehead renderas="sect2">flags QPointingDevice::PointerTypes</db:bridgehead>
<db:para>This enum represents what is interacting with the pointing device.</db:para>
<db:para>There is some redundancy between this property and <db:link xlink:href="qinputdevice.xml#DeviceType-enum">QInputDevice::DeviceType</db:link>. For example, if a touchscreen is used, then the <db:code>DeviceType</db:code> is <db:code>TouchScreen</db:code> and <db:code>PointerType</db:code> is <db:code>Finger</db:code> (always). But on a graphics tablet, it's often possible for both ends of the stylus to be used, and programs need to distinguish them. Therefore the concept is extended so that every <db:link xlink:href="qpointerevent.xml">QPointerEvent</db:link> has a PointerType, and it can simplify some event handling code to ignore the DeviceType and react differently depending on the PointerType alone.</db:para>
<db:para>Valid values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::<db:emphasis role="bold">PointerType</db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The pointer type is unknown.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::<db:emphasis role="bold">PointerType</db:emphasis>::Generic</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>A mouse or something acting like a mouse (the core pointer on X11).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::<db:emphasis role="bold">PointerType</db:emphasis>::Finger</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>The user's finger.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::<db:emphasis role="bold">PointerType</db:emphasis>::Pen</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>The drawing end of a stylus.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::<db:emphasis role="bold">PointerType</db:emphasis>::Eraser</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>The other end of the stylus (if it has a virtual eraser on the other end).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::<db:emphasis role="bold">PointerType</db:emphasis>::Cursor</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>A transparent circle with cross-hairs as found on a <db:link xlink:href="qinputdevice.xml#DeviceType-enum">Puck</db:link> device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::<db:emphasis role="bold">PointerType</db:emphasis>::AllPointerTypes</db:code></db:para>
</db:td>
<db:td><db:code>0x7FFF</db:code></db:td>
<db:td>
<db:para>Any of the above (used as a default filter value).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>PointerTypes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PointerType&gt;. </db:code>It stores an OR combination of <db:code>PointerType</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPointingDevice">
<db:title>QPointingDevice::QPointingDevice(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Creates a new invalid pointing device instance as a child of <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QPointingDevice-1">
<db:title>QPointingDevice::QPointingDevice(const QString &amp;<db:emphasis>name</db:emphasis>, qint64 <db:emphasis>id</db:emphasis>, QInputDevice::DeviceType <db:emphasis>deviceType</db:emphasis>, QPointingDevice::PointerType <db:emphasis>pointerType</db:emphasis>, QInputDevice::Capabilities <db:emphasis>capabilities</db:emphasis>, int <db:emphasis>maxPoints</db:emphasis>, int <db:emphasis>buttonCount</db:emphasis>, const QString &amp;<db:emphasis>seatName</db:emphasis> = QString(), QPointingDeviceUniqueId <db:emphasis>uniqueId</db:emphasis> = QPointingDeviceUniqueId(), QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Creates a new pointing device instance with the given <db:code role="parameter">name</db:code>, <db:code role="parameter">deviceType</db:code>, <db:code role="parameter">pointerType</db:code>, <db:code role="parameter">capabilities</db:code>, <db:code role="parameter">maxPoints</db:code>, <db:code role="parameter">buttonCount</db:code>, <db:code role="parameter">seatName</db:code>, <db:code role="parameter">uniqueId</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="buttonCount">
<db:title>int QPointingDevice::buttonCount() const</db:title>
<db:para>Returns the maximum number of on-device buttons that can be detected.</db:para>
<db:note>
<db:para>Getter function for property buttonCount. </db:para>
</db:note>
</db:section>
<db:section xml:id="grabChanged">
<db:title>void QPointingDevice::grabChanged(QObject *<db:emphasis>grabber</db:emphasis>, QPointingDevice::GrabTransition <db:emphasis>transition</db:emphasis>, const QPointerEvent *<db:emphasis>event</db:emphasis>, const QEventPoint &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>This signal is emitted when the <db:code role="parameter">grabber</db:code> object gains or loses an exclusive or passive grab of <db:code role="parameter">point</db:code> during delivery of <db:code role="parameter">event</db:code>. The <db:code role="parameter">transition</db:code> tells what happened, from the perspective of the <db:code>grabber</db:code> object.</db:para>
<db:note>
<db:para>A grab transition from one object to another results in two signals, to notify that one object has lost its grab, and to notify that there is another grabber. In other cases, when transitioning to or from a non-grabbing state, only one signal is emitted: the <db:code role="parameter">grabber</db:code> argument is never <db:code>nullptr</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointerevent.xml#setExclusiveGrabber">QPointerEvent::setExclusiveGrabber</db:link>()</db:member>
<db:member><db:link xlink:href="qpointerevent.xml#addPassiveGrabber">QPointerEvent::addPassiveGrabber</db:link>()</db:member>
<db:member><db:link xlink:href="qpointerevent.xml#removePassiveGrabber">QPointerEvent::removePassiveGrabber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumPoints">
<db:title>int QPointingDevice::maximumPoints() const</db:title>
<db:para>Returns the maximum number of simultaneous touch points (fingers) that can be detected.</db:para>
<db:note>
<db:para>Getter function for property maximumPoints. </db:para>
</db:note>
</db:section>
<db:section xml:id="pointerType">
<db:title>QPointingDevice::PointerType QPointingDevice::pointerType() const</db:title>
<db:para>Returns the pointer type.</db:para>
<db:note>
<db:para>Getter function for property pointerType. </db:para>
</db:note>
</db:section>
<db:section xml:id="primaryPointingDevice">
<db:title>[static] const QPointingDevice *QPointingDevice::primaryPointingDevice(const QString &amp;<db:emphasis>seatName</db:emphasis> = QString())</db:title>
<db:para>Returns the primary pointing device (the core pointer, traditionally assumed to be a mouse) on the given seat <db:code role="parameter">seatName</db:code>.</db:para>
<db:para>If multiple pointing devices are registered, this function prefers a mouse or touchpad that matches the given <db:code role="parameter">seatName</db:code> and that does not have another device as its parent. Usually only one master or core device does not have a parent device. But if such a device is not found, this function creates a new virtual &quot;core pointer&quot; mouse. Thus Qt continues to work on platforms that are not yet doing input device discovery and registration.</db:para>
</db:section>
<db:section xml:id="uniqueId">
<db:title>QPointingDeviceUniqueId QPointingDevice::uniqueId() const</db:title>
<db:para>Returns a unique ID (of dubious utility) for the device.</db:para>
<db:para>You probably should rather be concerned with QPointerEventPoint::uniqueId().</db:para>
<db:note>
<db:para>Getter function for property uniqueId. </db:para>
</db:note>
</db:section>
</db:section>
</db:article>
