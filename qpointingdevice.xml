<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPointingDevice Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link> class describes a device from which mouse, touch or tablet events originate.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPointingDevice</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qinputdevice.xml" xlink:role="class">QInputDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPointingDevice is part of <db:simplelist><db:member>events</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Each <db:link xlink:href="qpointerevent.xml">QPointerEvent</db:link> contains a <db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link> pointer to allow accessing device-specific properties like type and capabilities. It is the responsibility of the platform or generic plug-ins to register the available pointing devices via QWindowSystemInterface before generating any pointer events. Applications do not need to instantiate this class, they should just access the global instances pointed to by <db:link xlink:href="qinputevent.xml#device">QPointerEvent::device</db:link>().</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PointerType-enum">
<db:title>enum QPointingDevice::PointerType</db:title>
<db:bridgehead renderas="sect2">flags QPointingDevice::PointerTypes</db:bridgehead>
<db:enumsynopsis>
<db:enumname>PointerType</db:enumname>
<db:enumitem>
<db:enumidentifier>Unknown</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Generic</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Finger</db:enumidentifier>
<db:enumvalue>0x0002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Pen</db:enumidentifier>
<db:enumvalue>0x0004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Eraser</db:enumidentifier>
<db:enumvalue>0x0008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Cursor</db:enumidentifier>
<db:enumvalue>0x0010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AllPointerTypes</db:enumidentifier>
<db:enumvalue>0x7FFF</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QPointingDevice::PointerTypes</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum represents what is interacting with the pointing device.</db:para>
<db:para>There is some redundancy between this property and <db:link xlink:href="qinputdevice.xml#DeviceType-enum">QInputDevice::DeviceType</db:link>. For example, if a touchscreen is used, then the <db:code>DeviceType</db:code> is <db:code>TouchScreen</db:code> and <db:code>PointerType</db:code> is <db:code>Finger</db:code> (always). But on a graphics tablet, it's often possible for both ends of the stylus to be used, and programs need to distinguish them. Therefore the concept is extended so that every <db:link xlink:href="qpointerevent.xml">QPointerEvent</db:link> has a PointerType, and it can simplify some event handling code to ignore the DeviceType and react differently depending on the PointerType alone.</db:para>
<db:para>Valid values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::<db:emphasis role="bold">PointerType</db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The pointer type is unknown.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::<db:emphasis role="bold">PointerType</db:emphasis>::Generic</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>A mouse or something acting like a mouse (the core pointer on X11).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::<db:emphasis role="bold">PointerType</db:emphasis>::Finger</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>The user's finger.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::<db:emphasis role="bold">PointerType</db:emphasis>::Pen</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>The drawing end of a stylus.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::<db:emphasis role="bold">PointerType</db:emphasis>::Eraser</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>The other end of the stylus (if it has a virtual eraser on the other end).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::<db:emphasis role="bold">PointerType</db:emphasis>::Cursor</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>A transparent circle with cross-hairs as found on a <db:link xlink:href="qinputdevice.xml#DeviceType-enum">Puck</db:link> device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpointingdevice.xml">QPointingDevice</db:link></db:emphasis>::<db:emphasis role="bold">PointerType</db:emphasis>::AllPointerTypes</db:code></db:para>
</db:td>
<db:td><db:code>0x7FFF</db:code></db:td>
<db:td>
<db:para>Any of the above (used as a default filter value).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>PointerTypes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PointerType&gt;. </db:code>It stores an OR combination of <db:code>PointerType</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPointingDevice">
<db:title>QPointingDevice::QPointingDevice(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QPointingDevice</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointingDevice(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new invalid pointing device instance as a child of <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QPointingDevice-1">
<db:title>QPointingDevice::QPointingDevice(const QString &amp;<db:emphasis>name</db:emphasis>, qint64 <db:emphasis>id</db:emphasis>, QInputDevice::DeviceType <db:emphasis>deviceType</db:emphasis>, QPointingDevice::PointerType <db:emphasis>pointerType</db:emphasis>, QInputDevice::Capabilities <db:emphasis>capabilities</db:emphasis>, int <db:emphasis>maxPoints</db:emphasis>, int <db:emphasis>buttonCount</db:emphasis>, const QString &amp;<db:emphasis>seatName</db:emphasis> = QString(), QPointingDeviceUniqueId <db:emphasis>uniqueId</db:emphasis> = QPointingDeviceUniqueId(), QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QPointingDevice</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QInputDevice::DeviceType</db:type>
<db:parameter>deviceType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPointingDevice::PointerType</db:type>
<db:parameter>pointerType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QInputDevice::Capabilities</db:type>
<db:parameter>capabilities</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>maxPoints</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>buttonCount</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>seatName</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QPointingDeviceUniqueId</db:type>
<db:parameter>uniqueId</db:parameter>
<db:initializer>QPointingDeviceUniqueId()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointingDevice(const QString &amp;name, qint64 id, QInputDevice::DeviceType deviceType, QPointingDevice::PointerType pointerType, QInputDevice::Capabilities capabilities, int maxPoints, int buttonCount, const QString &amp;seatName, QPointingDeviceUniqueId uniqueId, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new pointing device instance with the given <db:code role="parameter">name</db:code>, <db:code role="parameter">deviceType</db:code>, <db:code role="parameter">pointerType</db:code>, <db:code role="parameter">capabilities</db:code>, <db:code role="parameter">maxPoints</db:code>, <db:code role="parameter">buttonCount</db:code>, <db:code role="parameter">seatName</db:code>, <db:code role="parameter">uniqueId</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="buttonCount">
<db:title>int QPointingDevice::buttonCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>buttonCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">buttonCount</db:synopsisinfo>
<db:synopsisinfo role="signature">int buttonCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum number of on-device buttons that can be detected.</db:para>
<db:note>
<db:para>Getter function for property buttonCount. </db:para>
</db:note>
</db:section>
<db:section xml:id="maximumPoints">
<db:title>int QPointingDevice::maximumPoints() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maximumPoints</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">maximumPoints</db:synopsisinfo>
<db:synopsisinfo role="signature">int maximumPoints() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum number of simultaneous touch points (fingers) that can be detected.</db:para>
<db:note>
<db:para>Getter function for property maximumPoints. </db:para>
</db:note>
</db:section>
<db:section xml:id="pointerType">
<db:title>QPointingDevice::PointerType QPointingDevice::pointerType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointingDevice::PointerType</db:type>
<db:methodname>pointerType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">pointerType</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointingDevice::PointerType pointerType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pointer type.</db:para>
<db:note>
<db:para>Getter function for property pointerType. </db:para>
</db:note>
</db:section>
<db:section xml:id="primaryPointingDevice">
<db:title>[static] const QPointingDevice *QPointingDevice::primaryPointingDevice(const QString &amp;<db:emphasis>seatName</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QPointingDevice *</db:type>
<db:methodname>primaryPointingDevice</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>seatName</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QPointingDevice * primaryPointingDevice(const QString &amp;seatName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the primary pointing device (the core pointer, traditionally assumed to be a mouse) on the given seat <db:code role="parameter">seatName</db:code>.</db:para>
<db:para>If multiple pointing devices are registered, this function prefers a mouse or touchpad that matches the given <db:code role="parameter">seatName</db:code> and that does not have another device as its parent. Usually only one master or core device does not have a parent device. But if such a device is not found, this function creates a new virtual &quot;core pointer&quot; mouse. Thus Qt continues to work on platforms that are not yet doing input device discovery and registration.</db:para>
</db:section>
<db:section xml:id="uniqueId">
<db:title>QPointingDeviceUniqueId QPointingDevice::uniqueId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointingDeviceUniqueId</db:type>
<db:methodname>uniqueId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">uniqueId</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointingDeviceUniqueId uniqueId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a unique ID (of dubious utility) for the device.</db:para>
<db:para>You probably should rather be concerned with QPointerEventPoint::uniqueId().</db:para>
<db:note>
<db:para>Getter function for property uniqueId. </db:para>
</db:note>
</db:section>
</db:section>
</db:article>
