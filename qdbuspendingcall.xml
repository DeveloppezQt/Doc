<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDBusPendingCall Class</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt D-Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbuspendingcall.xml">QDBusPendingCall</db:link> class refers to one pending asynchronous call.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusPendingCall</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS DBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::DBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdbuspendingcallwatcher.xml" xlink:role="class">QDBusPendingCallWatcher</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDBusPendingCall is part of <db:simplelist><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qdbuspendingcall.xml">QDBusPendingCall</db:link> object is a reference to a method call that was sent over D-Bus without waiting for a reply. <db:link xlink:href="qdbuspendingcall.xml">QDBusPendingCall</db:link> is an opaque type, meant to be used as a handle for a pending reply.</db:para>
<db:para>In most programs, the <db:link xlink:href="qdbuspendingcall.xml">QDBusPendingCall</db:link> class will not be used directly. It can be safely replaced with the template-based <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link>, in order to access the contents of the reply or wait for it to be complete.</db:para>
<db:para>The <db:link xlink:href="qdbuspendingcallwatcher.xml">QDBusPendingCallWatcher</db:link> class allows one to connect to a signal that will indicate when the reply has arrived or if the call has timed out. It also provides the <db:link xlink:href="qdbuspendingcallwatcher.xml#waitForFinished">QDBusPendingCallWatcher::waitForFinished</db:link>() method which will suspend the execution of the program until the reply has arrived.</db:para>
<db:note>
<db:para>If you create a copy of a <db:link xlink:href="qdbuspendingcall.xml">QDBusPendingCall</db:link> object, all information will be shared among the many copies. Therefore, <db:link xlink:href="qdbuspendingcall.xml">QDBusPendingCall</db:link> is an explicitly-shared object and does not provide a method of detaching the copies (since they refer to the same pending call)</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link></db:member>
<db:member><db:link xlink:href="qdbuspendingcallwatcher.xml">QDBusPendingCallWatcher</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDBusPendingCall">
<db:title>QDBusPendingCall::QDBusPendingCall(const QDBusPendingCall &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusPendingCall</db:methodname>
<db:methodparam>
<db:type>const QDBusPendingCall &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusPendingCall(const QDBusPendingCall &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a copy of the <db:code role="parameter">other</db:code> pending asynchronous call. Note that both objects will refer to the same pending call.</db:para>
</db:section>
<db:section xml:id="dtor.QDBusPendingCall">
<db:title>QDBusPendingCall::~QDBusPendingCall()</db:title>
<db:destructorsynopsis>
<db:methodname>~QDBusPendingCall</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDBusPendingCall()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this copy of the <db:link xlink:href="qdbuspendingcall.xml">QDBusPendingCall</db:link> object. If this copy is also the last copy of a pending asynchronous call, the call will be canceled and no further notifications will be received. There will be no way of accessing the reply's contents when it arrives.</db:para>
</db:section>
<db:section xml:id="fromCompletedCall">
<db:title>[static] QDBusPendingCall QDBusPendingCall::fromCompletedCall(const QDBusMessage &amp;<db:emphasis>msg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDBusPendingCall</db:type>
<db:methodname>fromCompletedCall</db:methodname>
<db:methodparam>
<db:type>const QDBusMessage &amp;</db:type>
<db:parameter>msg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusPendingCall fromCompletedCall(const QDBusMessage &amp;msg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:link xlink:href="qdbuspendingcall.xml">QDBusPendingCall</db:link> object based on the message <db:code role="parameter">msg</db:code>. The message must be of type <db:link xlink:href="qdbusmessage.xml#MessageType-enum">QDBusMessage::ErrorMessage</db:link> or <db:link xlink:href="qdbusmessage.xml#MessageType-enum">QDBusMessage::ReplyMessage</db:link> (that is, a message that is typical of a completed call).</db:para>
<db:para>This function is useful for code that requires simulating a pending call, but that has already finished.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuspendingcall.xml#fromError">fromError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromError">
<db:title>[static] QDBusPendingCall QDBusPendingCall::fromError(const QDBusError &amp;<db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDBusPendingCall</db:type>
<db:methodname>fromError</db:methodname>
<db:methodparam>
<db:type>const QDBusError &amp;</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusPendingCall fromError(const QDBusError &amp;error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:link xlink:href="qdbuspendingcall.xml">QDBusPendingCall</db:link> object based on the error condition <db:code role="parameter">error</db:code>. The resulting pending call object will be in the &quot;finished&quot; state and <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link>&lt;Types...&gt;::isError() will return true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuspendingcall.xml#fromCompletedCall">fromCompletedCall</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QDBusPendingCall::swap(QDBusPendingCall &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QDBusPendingCall &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QDBusPendingCall &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this pending call instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QDBusPendingCall &amp;QDBusPendingCall::operator=(const QDBusPendingCall &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusPendingCall &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDBusPendingCall &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusPendingCall &amp; operator=(const QDBusPendingCall &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a copy of the <db:code role="parameter">other</db:code> pending asynchronous call and drops the reference to the previously-referenced call. Note that both objects will refer to the same pending call after this function.</db:para>
<db:para>If this object contained the last reference of a pending asynchronous call, the call will be canceled and no further notifications will be received. There will be no way of accessing the reply's contents when it arrives.</db:para>
</db:section>
</db:section>
</db:article>
