<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Platform Headers</db:title>
<db:productname>QtPlatformHeaders</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Platform Headers Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Qt Platform Headers module offers header-only inline classes that encapsulate platform-specific information that is tied to a given runtime configuration of a platform plugin.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Some applications may need to interface Qt with other frameworks. This often means using graphics contexts or other types of native handles created by one framework with another. For example, on some platforms, QOpenGLContext offers the ability to wrap an existing native OpenGL context, instead of creating a new one. This existing native context can be created by some other third-party code.</db:para>
<db:para>The type of such native handles is highly platform specific and in some cases the platform plugin will need more information to adopt a handle, just the handle in itself will not be sufficient. Therefore the public API consists of functions taking or returning a <db:link xlink:href="qvariant.xml">QVariant</db:link> that contains a platform-specific value type. See for example QOpenGLContext::setNativeHandle() and QOpenGLContext::nativeHandle(). When running on Linux/X11, using the xcb platform plugin and the GLX windowing system interface, the variant contains a QGLXNativeContext. On other platforms a different class will be used. These classes are all placed in the Qt Platform Headers module.</db:para>
<db:para>Platform headers can be used in conjunction with QGuiApplication::platformFunction() to give a type safe interface to platform specific functionality. It is possible for headers defined in <db:link xlink:href="qtplatformheaders-module.xml">QtPlatformHeaders</db:link> to define typedefs for functions that can be returned by a platform plugin from QGuiApplication::platformFunction(). Headers in <db:link xlink:href="qtplatformheaders-module.xml">QtPlatformHeaders</db:link> can also implement wrapper functions for the function pointer, giving a static function that can be called from any context after the platform integration has been created. An implementation of this pattern is <db:link xlink:href="qxcbwindowfunctions.xml#setWmWindowType">QXcbWindowFunctions::setWmWindowType</db:link>(). This function retrieves a function pointer from QGuiApplication::platformFunction, and executes that function if the requested function was returned.</db:para>
<db:note>
<db:para>Similar to the other QPA APIs, there are no binary compatibility guarantees for these classes, meaning that an application using these classes is only guaranteed to work with the Qt version it was developed against. Unlike QPA however, source compatibility is guaranteed.</db:para>
</db:note>
<db:section xml:id="api-reference">
<db:title>API Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtplatformheaders-module.xml">C++ Classes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:member>
<db:member><db:link xlink:href="qwindowswindowfunctions.xml">QWindowsWindowFunctions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
