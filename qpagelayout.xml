<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QPageLayout Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes the size, orientation and margins of a page.</db:para>
<db:para>This class was introduced in Qt 5.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPageLayout</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qpagelayout.xml">QPageLayout</db:link> class defines the layout of a page in a paged document, with the page size, orientation and margins able to be set and the full page and paintable page rectangles defined by those attributes able to be queried in a variety of units.</db:para>
<db:para>The page size is defined by the <db:link xlink:href="qpagesize.xml">QPageSize</db:link> class which can be queried for page size attributes. Note that the <db:link xlink:href="qpagesize.xml">QPageSize</db:link> itself is always defined in a Portrait orientation.</db:para>
<db:para>The minimum margins can be defined for the layout but normally default to 0. When used in conjunction with Qt's printing support the minimum margins will reflect the minimum printable area defined by the printer.</db:para>
<db:para>In the default <db:link xlink:href="qpagelayout.xml#Mode-enum">StandardMode</db:link> the current margins and minimum margins are always taken into account. The paintable rectangle is the full page rectangle less the current margins, and the current margins can only be set to values between the minimum margins and the maximum margins allowed by the full page size.</db:para>
<db:para>In <db:link xlink:href="qpagelayout.xml#Mode-enum">FullPageMode</db:link> the current margins and minimum margins are not taken into account. The paintable rectangle is the full page rectangle, and the current margins can be set to any values regardless of the minimum margins and page size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagesize.xml">QPageSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Mode-enum">
<db:title>enum QPageLayout::Mode</db:title>
<db:para>Defines the page layout mode</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpagelayout.xml">QPageLayout</db:link></db:emphasis>::StandardMode</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Paint Rect includes margins, margins must fall between the minimum and maximum.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpagelayout.xml">QPageLayout</db:link></db:emphasis>::FullPageMode</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Paint Rect excludes margins, margins can be any value and must be managed manually.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Orientation-enum">
<db:title>enum QPageLayout::Orientation</db:title>
<db:para>This enum type defines the page orientation</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpagelayout.xml">QPageLayout</db:link></db:emphasis>::Portrait</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The page size is used in its default orientation</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpagelayout.xml">QPageLayout</db:link></db:emphasis>::Landscape</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The page size is rotated through 90 degrees</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that some standard page sizes are defined with a width larger than their height, hence the orientation is defined relative to the standard page size and not using the relative page dimensions.</db:para>
</db:section>
<db:section xml:id="Unit-enum">
<db:title>enum QPageLayout::Unit</db:title>
<db:para>This enum type is used to specify the measurement unit for page layout and margins.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpagelayout.xml">QPageLayout</db:link></db:emphasis>::Millimeter</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpagelayout.xml">QPageLayout</db:link></db:emphasis>::Point</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>1/72th of an inch</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpagelayout.xml">QPageLayout</db:link></db:emphasis>::Inch</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpagelayout.xml">QPageLayout</db:link></db:emphasis>::Pica</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>1/72th of a foot, 1/6th of an inch, 12 Points</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpagelayout.xml">QPageLayout</db:link></db:emphasis>::Didot</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>1/72th of a French inch, 0.375 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpagelayout.xml">QPageLayout</db:link></db:emphasis>::Cicero</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>1/6th of a French inch, 12 Didot, 4.5mm</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPageLayout">
<db:title>QPageLayout::QPageLayout()</db:title>
<db:para>Creates an invalid <db:link xlink:href="qpagelayout.xml">QPageLayout</db:link>.</db:para>
</db:section>
<db:section xml:id="QPageLayout-2">
<db:title>QPageLayout::QPageLayout(const QPageSize &amp;<db:emphasis>pageSize</db:emphasis>, QPageLayout::Orientation <db:emphasis>orientation</db:emphasis>, const QMarginsF &amp;<db:emphasis>margins</db:emphasis>, QPageLayout::Unit <db:emphasis>units</db:emphasis> = Point, const QMarginsF &amp;<db:emphasis>minMargins</db:emphasis> = QMarginsF(0, 0, 0, 0))</db:title>
<db:para>Creates a <db:link xlink:href="qpagelayout.xml">QPageLayout</db:link> with the given <db:code role="parameter">pageSize</db:code>, <db:code role="parameter">orientation</db:code> and <db:code role="parameter">margins</db:code> in the given <db:code role="parameter">units</db:code>.</db:para>
<db:para>Optionally define the minimum allowed margins <db:code role="parameter">minMargins</db:code>, e.g. the minimum margins able to be printed by a physical print device.</db:para>
<db:para>The constructed <db:link xlink:href="qpagelayout.xml">QPageLayout</db:link> will be in <db:link xlink:href="qpagelayout.xml#Mode-enum">StandardMode</db:link>.</db:para>
<db:para>The <db:code role="parameter">margins</db:code> given will be clamped to the minimum margins and the maximum margins allowed by the page size.</db:para>
</db:section>
<db:section xml:id="QPageLayout-1">
<db:title>QPageLayout::QPageLayout(const QPageLayout &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copy constructor, copies <db:code role="parameter">other</db:code> to this.</db:para>
</db:section>
<db:section xml:id="dtor.QPageLayout">
<db:title>[noexcept] QPageLayout::~QPageLayout()</db:title>
<db:para>Destroys the page layout.</db:para>
</db:section>
<db:section xml:id="fullRect">
<db:title>QRectF QPageLayout::fullRect() const</db:title>
<db:para>Returns the full page rectangle in the current layout units.</db:para>
<db:para>The page rectangle takes into account the page size and page orientation, but not the page margins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#paintRect">paintRect</db:link>()</db:member>
<db:member><db:link xlink:href="qpagelayout.xml#units">units</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fullRect-1">
<db:title>QRectF QPageLayout::fullRect(QPageLayout::Unit <db:emphasis>units</db:emphasis>) const</db:title>
<db:para>Returns the full page rectangle in the required <db:code role="parameter">units</db:code>.</db:para>
<db:para>The page rectangle takes into account the page size and page orientation, but not the page margins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#paintRect">paintRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fullRectPixels">
<db:title>QRect QPageLayout::fullRectPixels(int <db:emphasis>resolution</db:emphasis>) const</db:title>
<db:para>Returns the full page rectangle in device pixels for the given <db:code role="parameter">resolution</db:code>.</db:para>
<db:para>The page rectangle takes into account the page size and page orientation, but not the page margins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#paintRect">paintRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fullRectPoints">
<db:title>QRect QPageLayout::fullRectPoints() const</db:title>
<db:para>Returns the full page rectangle in Postscript Points (1/72 of an inch).</db:para>
<db:para>The page rectangle takes into account the page size and page orientation, but not the page margins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#paintRect">paintRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEquivalentTo">
<db:title>bool QPageLayout::isEquivalentTo(const QPageLayout &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this page layout is equivalent to the <db:code role="parameter">other</db:code> page layout, i.e. if the page has the same size, margins and orientation.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QPageLayout::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if this page layout is valid.</db:para>
</db:section>
<db:section xml:id="margins">
<db:title>QMarginsF QPageLayout::margins() const</db:title>
<db:para>Returns the margins of the page layout using the currently set units.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#setMargins">setMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qpagelayout.xml#units">units</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="margins-1">
<db:title>QMarginsF QPageLayout::margins(QPageLayout::Unit <db:emphasis>units</db:emphasis>) const</db:title>
<db:para>Returns the margins of the page layout using the requested <db:code role="parameter">units</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#setMargins">setMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qpagelayout.xml#margins">margins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="marginsPixels">
<db:title>QMargins QPageLayout::marginsPixels(int <db:emphasis>resolution</db:emphasis>) const</db:title>
<db:para>Returns the margins of the page layout in device pixels for the given <db:code role="parameter">resolution</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#setMargins">setMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="marginsPoints">
<db:title>QMargins QPageLayout::marginsPoints() const</db:title>
<db:para>Returns the margins of the page layout in Postscript Points (1/72 of an inch).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#setMargins">setMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qpagelayout.xml#margins">margins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumMargins">
<db:title>QMarginsF QPageLayout::maximumMargins() const</db:title>
<db:para>Returns the maximum margins that would be applied if the page layout was in <db:link xlink:href="qpagelayout.xml#Mode-enum">StandardMode</db:link>.</db:para>
<db:para>The maximum margins allowed are calculated as the full size of the page minus the minimum margins set. For example, if the page width is 100 points and the minimum right margin is 10 points, then the maximum left margin will be 90 points.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#setMinimumMargins">setMinimumMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qpagelayout.xml#minimumMargins">minimumMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumMargins">
<db:title>QMarginsF QPageLayout::minimumMargins() const</db:title>
<db:para>Returns the minimum margins of the page layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#setMinimumMargins">setMinimumMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qpagelayout.xml#maximumMargins">maximumMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mode">
<db:title>QPageLayout::Mode QPageLayout::mode() const</db:title>
<db:para>Returns the page layout mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#setMode">setMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="orientation">
<db:title>QPageLayout::Orientation QPageLayout::orientation() const</db:title>
<db:para>Returns the page orientation of the page layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#setOrientation">setOrientation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pageSize">
<db:title>QPageSize QPageLayout::pageSize() const</db:title>
<db:para>Returns the page size of the page layout.</db:para>
<db:para>Note that the <db:link xlink:href="qpagesize.xml">QPageSize</db:link> is always defined in a Portrait orientation. To obtain a size that takes the set orientation into account you must use <db:link xlink:href="qpagelayout.xml#fullRect">fullRect</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#setPageSize">setPageSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintRect">
<db:title>QRectF QPageLayout::paintRect() const</db:title>
<db:para>Returns the page rectangle in the current layout units.</db:para>
<db:para>The paintable rectangle takes into account the page size, orientation and margins.</db:para>
<db:para>If the <db:link xlink:href="qpagelayout.xml#Mode-enum">FullPageMode</db:link> mode is set then the <db:link xlink:href="qpagelayout.xml#fullRect">fullRect</db:link>() is returned and the margins must be manually managed.</db:para>
</db:section>
<db:section xml:id="paintRect-1">
<db:title>QRectF QPageLayout::paintRect(QPageLayout::Unit <db:emphasis>units</db:emphasis>) const</db:title>
<db:para>Returns the page rectangle in the required <db:code role="parameter">units</db:code>.</db:para>
<db:para>The paintable rectangle takes into account the page size, orientation and margins.</db:para>
<db:para>If the <db:link xlink:href="qpagelayout.xml#Mode-enum">FullPageMode</db:link> mode is set then the <db:link xlink:href="qpagelayout.xml#fullRect">fullRect</db:link>() is returned and the margins must be manually managed.</db:para>
</db:section>
<db:section xml:id="paintRectPixels">
<db:title>QRect QPageLayout::paintRectPixels(int <db:emphasis>resolution</db:emphasis>) const</db:title>
<db:para>Returns the paintable rectangle in rounded device pixels for the given <db:code role="parameter">resolution</db:code>.</db:para>
<db:para>The paintable rectangle takes into account the page size, orientation and margins.</db:para>
<db:para>If the <db:link xlink:href="qpagelayout.xml#Mode-enum">FullPageMode</db:link> mode is set then the <db:link xlink:href="qpagelayout.xml#fullRect">fullRect</db:link>() is returned and the margins must be manually managed.</db:para>
</db:section>
<db:section xml:id="paintRectPoints">
<db:title>QRect QPageLayout::paintRectPoints() const</db:title>
<db:para>Returns the paintable rectangle in rounded Postscript Points (1/72 of an inch).</db:para>
<db:para>The paintable rectangle takes into account the page size, orientation and margins.</db:para>
<db:para>If the <db:link xlink:href="qpagelayout.xml#Mode-enum">FullPageMode</db:link> mode is set then the <db:link xlink:href="qpagelayout.xml#fullRect">fullRect</db:link>() is returned and the margins must be manually managed.</db:para>
</db:section>
<db:section xml:id="setBottomMargin">
<db:title>bool QPageLayout::setBottomMargin(qreal <db:emphasis>bottomMargin</db:emphasis>)</db:title>
<db:para>Sets the bottom page margin of the page layout to <db:code role="parameter">bottomMargin</db:code>. Returns true if the margin was successfully set.</db:para>
<db:para>The units used are those currently defined for the layout. To use different units call <db:link xlink:href="qpagelayout.xml#setUnits">setUnits</db:link>() first.</db:para>
<db:para>If in the default <db:link xlink:href="qpagelayout.xml#Mode-enum">StandardMode</db:link> then the new margin must fall between the minimum margin set and the maximum margin allowed by the page size, otherwise the margin will not be set.</db:para>
<db:para>If in <db:link xlink:href="qpagelayout.xml#Mode-enum">FullPageMode</db:link> then any margin values will be accepted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#setMargins">setMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qpagelayout.xml#margins">margins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLeftMargin">
<db:title>bool QPageLayout::setLeftMargin(qreal <db:emphasis>leftMargin</db:emphasis>)</db:title>
<db:para>Sets the left page margin of the page layout to <db:code role="parameter">leftMargin</db:code>. Returns true if the margin was successfully set.</db:para>
<db:para>The units used are those currently defined for the layout. To use different units call <db:link xlink:href="qpagelayout.xml#setUnits">setUnits</db:link>() first.</db:para>
<db:para>If in the default <db:link xlink:href="qpagelayout.xml#Mode-enum">StandardMode</db:link> then the new margin must fall between the minimum margin set and the maximum margin allowed by the page size, otherwise the margin will not be set.</db:para>
<db:para>If in <db:link xlink:href="qpagelayout.xml#Mode-enum">FullPageMode</db:link> then any margin values will be accepted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#setMargins">setMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qpagelayout.xml#margins">margins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMargins">
<db:title>bool QPageLayout::setMargins(const QMarginsF &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:para>Sets the page margins of the page layout to <db:code role="parameter">margins</db:code> Returns true if the margins were successfully set.</db:para>
<db:para>The units used are those currently defined for the layout. To use different units then call <db:link xlink:href="qpagelayout.xml#setUnits">setUnits</db:link>() first.</db:para>
<db:para>If in the default <db:link xlink:href="qpagelayout.xml#Mode-enum">StandardMode</db:link> then all the new margins must fall between the minimum margins set and the maximum margins allowed by the page size, otherwise the margins will not be set.</db:para>
<db:para>If in <db:link xlink:href="qpagelayout.xml#Mode-enum">FullPageMode</db:link> then any margin values will be accepted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#margins">margins</db:link>()</db:member>
<db:member><db:link xlink:href="qpagelayout.xml#units">units</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMinimumMargins">
<db:title>void QPageLayout::setMinimumMargins(const QMarginsF &amp;<db:emphasis>minMargins</db:emphasis>)</db:title>
<db:para>Sets the minimum page margins of the page layout to <db:code role="parameter">minMargins</db:code>.</db:para>
<db:para>It is not recommended to override the default values set for a page size as this may be the minimum printable area for a physical print device.</db:para>
<db:para>If the <db:link xlink:href="qpagelayout.xml#Mode-enum">StandardMode</db:link> mode is set then the existing margins will be clamped to the new <db:code role="parameter">minMargins</db:code> and the maximum allowed by the page size. If the <db:link xlink:href="qpagelayout.xml#Mode-enum">FullPageMode</db:link> is set then the existing margins will be unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#minimumMargins">minimumMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qpagelayout.xml#setMargins">setMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMode">
<db:title>void QPageLayout::setMode(QPageLayout::Mode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets a page layout mode to <db:code role="parameter">mode</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#mode">mode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOrientation">
<db:title>void QPageLayout::setOrientation(QPageLayout::Orientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:para>Sets the page orientation of the page layout to <db:code role="parameter">orientation</db:code>.</db:para>
<db:para>Changing the orientation does not affect the current margins or the minimum margins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#orientation">orientation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPageSize">
<db:title>void QPageLayout::setPageSize(const QPageSize &amp;<db:emphasis>pageSize</db:emphasis>, const QMarginsF &amp;<db:emphasis>minMargins</db:emphasis> = QMarginsF(0, 0, 0, 0))</db:title>
<db:para>Sets the page size of the page layout to <db:code role="parameter">pageSize</db:code>.</db:para>
<db:para>Optionally define the minimum allowed margins <db:code role="parameter">minMargins</db:code>, e.g. the minimum margins able to be printed by a physical print device, otherwise the minimum margins will default to 0.</db:para>
<db:para>If <db:link xlink:href="qpagelayout.xml#Mode-enum">StandardMode</db:link> is set then the existing margins will be clamped to the new minimum margins and the maximum margins allowed by the page size. If <db:link xlink:href="qpagelayout.xml#Mode-enum">FullPageMode</db:link> is set then the existing margins will be unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#pageSize">pageSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRightMargin">
<db:title>bool QPageLayout::setRightMargin(qreal <db:emphasis>rightMargin</db:emphasis>)</db:title>
<db:para>Sets the right page margin of the page layout to <db:code role="parameter">rightMargin</db:code>. Returns true if the margin was successfully set.</db:para>
<db:para>The units used are those currently defined for the layout. To use different units call <db:link xlink:href="qpagelayout.xml#setUnits">setUnits</db:link>() first.</db:para>
<db:para>If in the default <db:link xlink:href="qpagelayout.xml#Mode-enum">StandardMode</db:link> then the new margin must fall between the minimum margin set and the maximum margin allowed by the page size, otherwise the margin will not be set.</db:para>
<db:para>If in <db:link xlink:href="qpagelayout.xml#Mode-enum">FullPageMode</db:link> then any margin values will be accepted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#setMargins">setMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qpagelayout.xml#margins">margins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTopMargin">
<db:title>bool QPageLayout::setTopMargin(qreal <db:emphasis>topMargin</db:emphasis>)</db:title>
<db:para>Sets the top page margin of the page layout to <db:code role="parameter">topMargin</db:code>. Returns true if the margin was successfully set.</db:para>
<db:para>The units used are those currently defined for the layout. To use different units call <db:link xlink:href="qpagelayout.xml#setUnits">setUnits</db:link>() first.</db:para>
<db:para>If in the default <db:link xlink:href="qpagelayout.xml#Mode-enum">StandardMode</db:link> then the new margin must fall between the minimum margin set and the maximum margin allowed by the page size, otherwise the margin will not be set.</db:para>
<db:para>If in <db:link xlink:href="qpagelayout.xml#Mode-enum">FullPageMode</db:link> then any margin values will be accepted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#setMargins">setMargins</db:link>()</db:member>
<db:member><db:link xlink:href="qpagelayout.xml#margins">margins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUnits">
<db:title>void QPageLayout::setUnits(QPageLayout::Unit <db:emphasis>units</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">units</db:code> used to define the page layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#units">units</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QPageLayout::swap(QPageLayout &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this page layout with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="units">
<db:title>QPageLayout::Unit QPageLayout::units() const</db:title>
<db:para>Returns the units the page layout is currently defined in.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#setUnits">setUnits</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QPageLayout &amp;QPageLayout::operator=(QPageLayout &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qpagelayout.xml">QPageLayout</db:link> instance, transferring the ownership of the managed pointer to this instance.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QPageLayout &amp;QPageLayout::operator=(const QPageLayout &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assignment operator, assigns <db:code role="parameter">other</db:code> to this.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QPageLayout &amp;<db:emphasis>lhs</db:emphasis>, const QPageLayout &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if page layout <db:code role="parameter">lhs</db:code> is not equal to page layout <db:code role="parameter">rhs</db:code>, i.e. if any of the attributes differ.</db:para>
<db:para>Note that this is a strict equality, especially for page size where the <db:link xlink:href="qpagesize.xml">QPageSize</db:link> ID, name and size must exactly match, and the margins where the units must match.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#isEquivalentTo">QPageLayout::isEquivalentTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QPageLayout &amp;<db:emphasis>lhs</db:emphasis>, const QPageLayout &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if page layout <db:code role="parameter">lhs</db:code> is equal to page layout <db:code role="parameter">rhs</db:code>, i.e. if all the attributes are exactly equal.</db:para>
<db:para>Note that this is a strict equality, especially for page size where the <db:link xlink:href="qpagesize.xml">QPageSize</db:link> ID, name and size must exactly match, and the margins where the units must match.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagelayout.xml#isEquivalentTo">QPageLayout::isEquivalentTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
