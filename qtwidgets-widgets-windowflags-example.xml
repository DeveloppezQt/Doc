<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Window Flags Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Window Flags example shows how to use the window flags available in Qt.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>A window flag is either a type or a hint. A type is used to specify various window-system properties for the widget. A widget can only have one type, and the default is Qt::Widget. However, a widget can have zero or more hints. The hints are used to customize the appearance of top-level windows.</db:para>
<db:para>A widget's flags are stored in a Qt::WindowFlags type which stores an OR combination of the flags.</db:para>
<db:figure>
<db:title>Screenshot of the Window Flags example</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowflags-example.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:para>The example consists of two classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>ControllerWindow</db:code> is the main application widget that allows the user to choose among the available window flags, and displays the effect on a separate preview window.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>PreviewWindow</db:code> is a custom widget displaying the name of its currently set window flags in a read-only text editor.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>We will start by reviewing the <db:code>ControllerWindow</db:code> class, then we will take a look at the <db:code>PreviewWindow</db:code> class.</db:para>
<db:section xml:id="controllerwindow-class-definition">
<db:title>ControllerWindow Class Definition</db:title>
<db:programlisting language="cpp">class ControllerWindow : public QWidget
{
    Q_OBJECT

public:
    ControllerWindow(QWidget *parent = nullptr);

private slots:
    void updatePreview();

private:
    void createTypeGroupBox();
    void createHintsGroupBox();
    QCheckBox *createCheckBox(const QString &amp;amp;text);
    QRadioButton *createRadioButton(const QString &amp;amp;text);

    PreviewWindow *previewWindow;

    QGroupBox *typeGroupBox;
    QGroupBox *hintsGroupBox;
    QPushButton *quitButton;

    QRadioButton *windowRadioButton;
    QRadioButton *dialogRadioButton;
    QRadioButton *sheetRadioButton;
    QRadioButton *drawerRadioButton;
    QRadioButton *popupRadioButton;
    QRadioButton *toolRadioButton;
    QRadioButton *toolTipRadioButton;
    QRadioButton *splashScreenRadioButton;

    QCheckBox *msWindowsFixedSizeDialogCheckBox;
    QCheckBox *x11BypassWindowManagerCheckBox;
    QCheckBox *framelessWindowCheckBox;
    QCheckBox *windowNoShadowCheckBox;
    QCheckBox *windowTitleCheckBox;
    QCheckBox *windowSystemMenuCheckBox;
    QCheckBox *windowMinimizeButtonCheckBox;
    QCheckBox *windowMaximizeButtonCheckBox;
    QCheckBox *windowCloseButtonCheckBox;
    QCheckBox *windowContextHelpButtonCheckBox;
    QCheckBox *windowShadeButtonCheckBox;
    QCheckBox *windowStaysOnTopCheckBox;
    QCheckBox *windowStaysOnBottomCheckBox;
    QCheckBox *customizeWindowHintCheckBox;
};
</db:programlisting>
<db:para>The <db:code>ControllerWindow</db:code> class inherits QWidget. The widget allows the user to choose among the available window flags, and displays the effect on a separate preview window.</db:para>
<db:para>We declare a private <db:code>updatePreview()</db:code> slot to refresh the preview window whenever the user changes the window flags.</db:para>
<db:para>We also declare several private functions to simplify the constructor: We call the <db:code>createTypeGroupBox()</db:code> function to create a radio button for each available window type, using the private <db:code>createButton()</db:code> function, and gather them within a group box. In a similar way we use the <db:code>createHintsGroupBox()</db:code> function to create a check box for each available hint, using the private <db:code>createCheckBox()</db:code> function.</db:para>
<db:para>In addition to the various radio buttons and checkboxes, we need an associated <db:code>PreviewWindow</db:code> to show the effect of the currently chosen window flags.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the Controller Window</db:alt>
<db:imageobject>
<db:imagedata fileref="images/windowflags_controllerwindow.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="controllerwindow-class-implementation">
<db:title>ControllerWindow Class Implementation</db:title>
<db:programlisting language="cpp">ControllerWindow::ControllerWindow(QWidget *parent)
    : QWidget(parent)
{
    previewWindow = new PreviewWindow(this);

    createTypeGroupBox();
    createHintsGroupBox();

    quitButton = new QPushButton(tr(&quot;&amp;amp;Quit&quot;));
    connect(quitButton, &amp;amp;QPushButton::clicked,
            qApp, &amp;amp;QCoreApplication::quit);

    QHBoxLayout *bottomLayout = new QHBoxLayout;
    bottomLayout-&amp;gt;addStretch();
    bottomLayout-&amp;gt;addWidget(quitButton);

    QHBoxLayout *mainLayout = new QHBoxLayout;
    mainLayout-&amp;gt;addWidget(typeGroupBox);
    mainLayout-&amp;gt;addWidget(hintsGroupBox);
    mainLayout-&amp;gt;addLayout(bottomLayout);
    setLayout(mainLayout);

    setWindowTitle(tr(&quot;Window Flags&quot;));
    updatePreview();
}
</db:programlisting>
<db:para>In the constructor we first create the preview window. Then we create the group boxes containing the available window flags using the private <db:code>createTypeGroupBox()</db:code> and <db:code>createHintsGroupBox()</db:code> functions. In addition we create a <db:guilabel>Quit</db:guilabel> button. We put the button and a stretchable space in a separate layout to make the button appear in the <db:code>WindowFlag</db:code> widget's right bottom corner.</db:para>
<db:para>Finally, we add the button's layout and the two goup boxes to a QVBoxLayout, set the window title and refresh the preview window using the <db:code>updatePreview()</db:code> slot.</db:para>
<db:programlisting language="cpp">void ControllerWindow::updatePreview()
{
    Qt::WindowFlags flags;

    if (windowRadioButton-&amp;gt;isChecked())
        flags = Qt::Window;
    else if (dialogRadioButton-&amp;gt;isChecked())
        flags = Qt::Dialog;
    else if (sheetRadioButton-&amp;gt;isChecked())
        flags = Qt::Sheet;
    else if (drawerRadioButton-&amp;gt;isChecked())
        flags = Qt::Drawer;
    else if (popupRadioButton-&amp;gt;isChecked())
        flags = Qt::Popup;
    else if (toolRadioButton-&amp;gt;isChecked())
        flags = Qt::Tool;
    else if (toolTipRadioButton-&amp;gt;isChecked())
        flags = Qt::ToolTip;
    else if (splashScreenRadioButton-&amp;gt;isChecked())
        flags = Qt::SplashScreen;
</db:programlisting>
<db:para>The <db:code>updatePreview()</db:code> slot is called whenever the user changes any of the window flags. First we create an empty Qt::WindowFlags <db:code>flags</db:code>, then we determine which one of the types that is checked and add it to <db:code>flags</db:code>.</db:para>
<db:programlisting language="cpp">    if (msWindowsFixedSizeDialogCheckBox-&amp;gt;isChecked())
        flags |= Qt::MSWindowsFixedSizeDialogHint;
    if (x11BypassWindowManagerCheckBox-&amp;gt;isChecked())
        flags |= Qt::X11BypassWindowManagerHint;
    if (framelessWindowCheckBox-&amp;gt;isChecked())
        flags |= Qt::FramelessWindowHint;
    if (windowNoShadowCheckBox-&amp;gt;isChecked())
        flags |= Qt::NoDropShadowWindowHint;
    if (windowTitleCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowTitleHint;
    if (windowSystemMenuCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowSystemMenuHint;
    if (windowMinimizeButtonCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowMinimizeButtonHint;
    if (windowMaximizeButtonCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowMaximizeButtonHint;
    if (windowCloseButtonCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowCloseButtonHint;
    if (windowContextHelpButtonCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowContextHelpButtonHint;
    if (windowShadeButtonCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowShadeButtonHint;
    if (windowStaysOnTopCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowStaysOnTopHint;
    if (windowStaysOnBottomCheckBox-&amp;gt;isChecked())
        flags |= Qt::WindowStaysOnBottomHint;
    if (customizeWindowHintCheckBox-&amp;gt;isChecked())
        flags |= Qt::CustomizeWindowHint;

    previewWindow-&amp;gt;setWindowFlags(flags);
</db:programlisting>
<db:para>We also determine which of the hints that are checked, and add them to <db:code>flags</db:code> using an OR operator. We use <db:code>flags</db:code> to set the window flags for the preview window.</db:para>
<db:programlisting language="cpp">    QPoint pos = previewWindow-&amp;gt;pos();
    if (pos.x() &amp;lt; 0)
        pos.setX(0);
    if (pos.y() &amp;lt; 0)
        pos.setY(0);
    previewWindow-&amp;gt;move(pos);
    previewWindow-&amp;gt;show();
}
</db:programlisting>
<db:para>We adjust the position of the preview window. The reason we do that, is that playing around with the window's frame may on some platforms cause the window's position to be changed behind our back. If a window is located in the upper left corner of the screen, parts of the window may not be visible. So we adjust the widget's position to make sure that, if this happens, the window is moved within the screen's boundaries. Finally, we call QWidget::show() to make sure the preview window is visible.</db:para>
<db:programlisting language="cpp">void ControllerWindow::createTypeGroupBox()
{
    typeGroupBox = new QGroupBox(tr(&quot;Type&quot;));

    windowRadioButton = createRadioButton(tr(&quot;Window&quot;));
    dialogRadioButton = createRadioButton(tr(&quot;Dialog&quot;));
    sheetRadioButton = createRadioButton(tr(&quot;Sheet&quot;));
    drawerRadioButton = createRadioButton(tr(&quot;Drawer&quot;));
    popupRadioButton = createRadioButton(tr(&quot;Popup&quot;));
    toolRadioButton = createRadioButton(tr(&quot;Tool&quot;));
    toolTipRadioButton = createRadioButton(tr(&quot;Tooltip&quot;));
    splashScreenRadioButton = createRadioButton(tr(&quot;Splash screen&quot;));
    windowRadioButton-&amp;gt;setChecked(true);

    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(windowRadioButton, 0, 0);
    layout-&amp;gt;addWidget(dialogRadioButton, 1, 0);
    layout-&amp;gt;addWidget(sheetRadioButton, 2, 0);
    layout-&amp;gt;addWidget(drawerRadioButton, 3, 0);
    layout-&amp;gt;addWidget(popupRadioButton, 0, 1);
    layout-&amp;gt;addWidget(toolRadioButton, 1, 1);
    layout-&amp;gt;addWidget(toolTipRadioButton, 2, 1);
    layout-&amp;gt;addWidget(splashScreenRadioButton, 3, 1);
    typeGroupBox-&amp;gt;setLayout(layout);
}
</db:programlisting>
<db:para>The private <db:code>createTypeGroupBox()</db:code> function is called from the constructor.</db:para>
<db:para>First we create a group box, and then we create a radio button (using the private <db:code>createRadioButton()</db:code> function) for each of the available types among the window flags. We make Qt::Window the initially applied type. We put the radio buttons into a QGridLayout and install the layout on the group box.</db:para>
<db:para>We do not include the default Qt::Widget type. The reason is that it behaves somewhat different than the other types. If the type is not specified for a widget, and it has no parent, the widget is a window. However, if it has a parent, it is a standard child widget. The other types are all top-level windows, and since the hints only affect top-level windows, we abandon the Qt::Widget type.</db:para>
<db:programlisting language="cpp">void ControllerWindow::createHintsGroupBox()
{
    hintsGroupBox = new QGroupBox(tr(&quot;Hints&quot;));

    msWindowsFixedSizeDialogCheckBox =
            createCheckBox(tr(&quot;MS Windows fixed size dialog&quot;));
    x11BypassWindowManagerCheckBox =
            createCheckBox(tr(&quot;X11 bypass window manager&quot;));
    framelessWindowCheckBox = createCheckBox(tr(&quot;Frameless window&quot;));
    windowNoShadowCheckBox = createCheckBox(tr(&quot;No drop shadow&quot;));
    windowTitleCheckBox = createCheckBox(tr(&quot;Window title&quot;));
    windowSystemMenuCheckBox = createCheckBox(tr(&quot;Window system menu&quot;));
    windowMinimizeButtonCheckBox = createCheckBox(tr(&quot;Window minimize button&quot;));
    windowMaximizeButtonCheckBox = createCheckBox(tr(&quot;Window maximize button&quot;));
    windowCloseButtonCheckBox = createCheckBox(tr(&quot;Window close button&quot;));
    windowContextHelpButtonCheckBox =
            createCheckBox(tr(&quot;Window context help button&quot;));
    windowShadeButtonCheckBox = createCheckBox(tr(&quot;Window shade button&quot;));
    windowStaysOnTopCheckBox = createCheckBox(tr(&quot;Window stays on top&quot;));
    windowStaysOnBottomCheckBox = createCheckBox(tr(&quot;Window stays on bottom&quot;));
    customizeWindowHintCheckBox= createCheckBox(tr(&quot;Customize window&quot;));

    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(msWindowsFixedSizeDialogCheckBox, 0, 0);
    layout-&amp;gt;addWidget(x11BypassWindowManagerCheckBox, 1, 0);
    layout-&amp;gt;addWidget(framelessWindowCheckBox, 2, 0);
    layout-&amp;gt;addWidget(windowNoShadowCheckBox, 3, 0);
    layout-&amp;gt;addWidget(windowTitleCheckBox, 4, 0);
    layout-&amp;gt;addWidget(windowSystemMenuCheckBox, 5, 0);
    layout-&amp;gt;addWidget(customizeWindowHintCheckBox, 6, 0);
    layout-&amp;gt;addWidget(windowMinimizeButtonCheckBox, 0, 1);
    layout-&amp;gt;addWidget(windowMaximizeButtonCheckBox, 1, 1);
    layout-&amp;gt;addWidget(windowCloseButtonCheckBox, 2, 1);
    layout-&amp;gt;addWidget(windowContextHelpButtonCheckBox, 3, 1);
    layout-&amp;gt;addWidget(windowShadeButtonCheckBox, 4, 1);
    layout-&amp;gt;addWidget(windowStaysOnTopCheckBox, 5, 1);
    layout-&amp;gt;addWidget(windowStaysOnBottomCheckBox, 6, 1);
    hintsGroupBox-&amp;gt;setLayout(layout);
}
</db:programlisting>
<db:para>The private <db:code>createHintsGroupBox()</db:code> function is also called from the constructor.</db:para>
<db:para>Again, the first thing we do is to create a group box. Then we create a checkbox, using the private <db:code>createCheckBox()</db:code> function, for each of the available hints among the window flags. We put the checkboxes into a QGridLayout and install the layout on the group box.</db:para>
<db:programlisting language="cpp">QCheckBox *ControllerWindow::createCheckBox(const QString &amp;amp;text)
{
    QCheckBox *checkBox = new QCheckBox(text);
    connect(checkBox, &amp;amp;QCheckBox::clicked,
            this, &amp;amp;ControllerWindow::updatePreview);
    return checkBox;
}
</db:programlisting>
<db:para>The private <db:code>createCheckBox()</db:code> function is called from <db:code>createHintsGroupBox()</db:code>.</db:para>
<db:para>We simply create a QCheckBox with the provided text, connect it to the private <db:code>updatePreview()</db:code> slot, and return a pointer to the checkbox.</db:para>
<db:programlisting language="cpp">QRadioButton *ControllerWindow::createRadioButton(const QString &amp;amp;text)
{
    QRadioButton *button = new QRadioButton(text);
    connect(button, &amp;amp;QRadioButton::clicked,
            this, &amp;amp;ControllerWindow::updatePreview);
    return button;
}
</db:programlisting>
<db:para>In the private <db:code>createRadioButton()</db:code> function it is a QRadioButton we create with the provided text, and connect to the private <db:code>updatePreview()</db:code> slot. The function is called from <db:code>createTypeGroupBox()</db:code>, and returns a pointer to the button.</db:para>
</db:section>
<db:section xml:id="previewwindow-class-definition">
<db:title>PreviewWindow Class Definition</db:title>
<db:programlisting language="cpp">class PreviewWindow : public QWidget
{
    Q_OBJECT

public:
    PreviewWindow(QWidget *parent = nullptr);

    void setWindowFlags(Qt::WindowFlags flags);

private:
    QTextEdit *textEdit;
    QPushButton *closeButton;
};
</db:programlisting>
<db:para>The <db:code>PreviewWindow</db:code> class inherits QWidget. It is a custom widget that displays the names of its currently set window flags in a read-only text editor. It is also provided with a QPushbutton that closes the window.</db:para>
<db:para>We reimplement the constructor to create the <db:guilabel>Close</db:guilabel> button and the text editor, and the QWidget::setWindowFlags() function to display the names of the window flags.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the Preview Window</db:alt>
<db:imageobject>
<db:imagedata fileref="images/windowflags_previewwindow.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="previewwindow-class-implementation">
<db:title>PreviewWindow Class Implementation</db:title>
<db:programlisting language="cpp">PreviewWindow::PreviewWindow(QWidget *parent)
    : QWidget(parent)
{
    textEdit = new QTextEdit;
    textEdit-&amp;gt;setReadOnly(true);
    textEdit-&amp;gt;setLineWrapMode(QTextEdit::NoWrap);

    closeButton = new QPushButton(tr(&quot;&amp;amp;Close&quot;));
    connect(closeButton, &amp;amp;QPushButton::clicked,
            this, &amp;amp;PreviewWindow::close);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&amp;gt;addWidget(textEdit);
    layout-&amp;gt;addWidget(closeButton);
    setLayout(layout);

    setWindowTitle(tr(&quot;Preview&quot;));
}
</db:programlisting>
<db:para>In the constructor, we first create a QTextEdit and make sure that it is read-only.</db:para>
<db:para>We also prohibit any line wrapping in the text editor using the QTextEdit::setLineWrapMode() function. The result is that a horizontal scrollbar appears when a window flag's name exceeds the width of the editor. This is a reasonable solution since we construct the displayed text with built-in line breaks. If no line breaks were guaranteed, using another QTextEdit::LineWrapMode would perhaps make more sense.</db:para>
<db:para>Then we create the <db:guilabel>Close</db:guilabel> button, and put both the widgets into a QVBoxLayout before we set the window title.</db:para>
<db:programlisting language="cpp">void PreviewWindow::setWindowFlags(Qt::WindowFlags flags)
{
    QWidget::setWindowFlags(flags);

    QString text;

    Qt::WindowFlags type = (flags &amp;amp; Qt::WindowType_Mask);
    if (type == Qt::Window)
        text = &quot;Qt::Window&quot;;
    else if (type == Qt::Dialog)
        text = &quot;Qt::Dialog&quot;;
    else if (type == Qt::Sheet)
        text = &quot;Qt::Sheet&quot;;
    else if (type == Qt::Drawer)
        text = &quot;Qt::Drawer&quot;;
    else if (type == Qt::Popup)
        text = &quot;Qt::Popup&quot;;
    else if (type == Qt::Tool)
        text = &quot;Qt::Tool&quot;;
    else if (type == Qt::ToolTip)
        text = &quot;Qt::ToolTip&quot;;
    else if (type == Qt::SplashScreen)
        text = &quot;Qt::SplashScreen&quot;;

    if (flags &amp;amp; Qt::MSWindowsFixedSizeDialogHint)
        text += &quot;\n| Qt::MSWindowsFixedSizeDialogHint&quot;;
    if (flags &amp;amp; Qt::X11BypassWindowManagerHint)
        text += &quot;\n| Qt::X11BypassWindowManagerHint&quot;;
    if (flags &amp;amp; Qt::FramelessWindowHint)
        text += &quot;\n| Qt::FramelessWindowHint&quot;;
    if (flags &amp;amp; Qt::NoDropShadowWindowHint)
        text += &quot;\n| Qt::NoDropShadowWindowHint&quot;;
    if (flags &amp;amp; Qt::WindowTitleHint)
        text += &quot;\n| Qt::WindowTitleHint&quot;;
    if (flags &amp;amp; Qt::WindowSystemMenuHint)
        text += &quot;\n| Qt::WindowSystemMenuHint&quot;;
    if (flags &amp;amp; Qt::WindowMinimizeButtonHint)
        text += &quot;\n| Qt::WindowMinimizeButtonHint&quot;;
    if (flags &amp;amp; Qt::WindowMaximizeButtonHint)
        text += &quot;\n| Qt::WindowMaximizeButtonHint&quot;;
    if (flags &amp;amp; Qt::WindowCloseButtonHint)
        text += &quot;\n| Qt::WindowCloseButtonHint&quot;;
    if (flags &amp;amp; Qt::WindowContextHelpButtonHint)
        text += &quot;\n| Qt::WindowContextHelpButtonHint&quot;;
    if (flags &amp;amp; Qt::WindowShadeButtonHint)
        text += &quot;\n| Qt::WindowShadeButtonHint&quot;;
    if (flags &amp;amp; Qt::WindowStaysOnTopHint)
        text += &quot;\n| Qt::WindowStaysOnTopHint&quot;;
    if (flags &amp;amp; Qt::CustomizeWindowHint)
        text += &quot;\n| Qt::CustomizeWindowHint&quot;;

    textEdit-&amp;gt;setPlainText(text);
}
</db:programlisting>
<db:para>In our reimplementation of the <db:code>setWindowFlags()</db:code> function, we first set the widgets flags using the QWidget::setWindowFlags() function. Then we run through the available window flags, creating a text that contains the names of the flags that matches the <db:code>flags</db:code> parameter. Finally, we display the text in the widgets text editor.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/widgets/windowflags?h=5.14">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
