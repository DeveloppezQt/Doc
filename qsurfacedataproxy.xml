<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSurfaceDataProxy Class</db:title>
<db:productname>QtGraphs</db:productname>
<db:edition>Qt Graphs | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Graphs Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsurfacedataproxy.xml">QSurfaceDataProxy</db:link> class is the data proxy for a 3D surface graph.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSurfaceDataProxy</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Graphs)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Graphs)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += graphs</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qheightmapsurfacedataproxy.xml" xlink:role="class">QHeightMapSurfaceDataProxy</db:link> and <db:link xlink:href="qitemmodelsurfacedataproxy.xml" xlink:role="class">QItemModelSurfaceDataProxy</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtgraphs-surfacedataproxy.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractdataproxy.xml" xlink:role="class">QAbstractDataProxy</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qheightmapsurfacedataproxy.xml" xlink:role="class">QHeightMapSurfaceDataProxy</db:link> and <db:link xlink:href="qitemmodelsurfacedataproxy.xml" xlink:role="class">QItemModelSurfaceDataProxy</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSurfaceDataProxy is part of <db:simplelist><db:member><db:link xlink:href="graphs-3d.xml">Qt Graphs C++ Classes for 3D</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A surface data proxy handles surface related data in rows. For this it provides two auxiliary type aliases: QtGraphs::QSurfaceDataArray and QtGraphs::QSurfaceDataRow. <db:code>QSurfaceDataArray</db:code> is a <db:link xlink:href="qlist.xml">QList</db:link> that controls the rows. <db:code>QSurfaceDataRow</db:code> is a <db:link xlink:href="qlist.xml">QList</db:link> that contains <db:link xlink:href="qsurfacedataitem.xml">QSurfaceDataItem</db:link> objects. For more information about how to feed the data to the proxy, see the sample code in the <db:link xlink:href="q3dsurface.xml">Q3DSurface</db:link> documentation.</db:para>
<db:para>All rows must have the same number of items.</db:para>
<db:para><db:link xlink:href="qsurfacedataproxy.xml">QSurfaceDataProxy</db:link> takes ownership of all <db:code>QSurfaceDataRow</db:code> objects passed to it, whether directly or in a <db:code>QSurfaceDataArray</db:code> container. To use surface data row pointers to directly modify data after adding the array to the proxy, the appropriate signal must be emitted to update the graph.</db:para>
<db:para>To make a sensible surface, the x-value of each successive item in all rows must be either ascending or descending throughout the row. Similarly, the z-value of each successive item in all columns must be either ascending or descending throughout the column.</db:para>
<db:note>
<db:para>Currently only surfaces with straight rows and columns are fully supported. Any row with items that do not have the exact same z-value or any column with items that do not have the exact same x-value may get clipped incorrectly if the whole surface does not completely fit within the visible x-axis or z-axis ranges.</db:para>
</db:note>
<db:note>
<db:para>Surfaces with less than two rows or columns are not considered valid surfaces and will not be rendered.</db:para>
</db:note>
<db:note>
<db:para>On some environments, surfaces with a lot of visible vertices may not render, because they exceed the per-draw vertex count supported by the graphics driver. This is mostly an issue on 32-bit and OpenGL ES2 platforms.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtgraphs-data-handling.xml">Qt Graphs Data Handling with 3D</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="columnCount-prop">
<db:title>[read-only] columnCount : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>columnCount</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">columnCount</db:synopsisinfo>
<db:synopsisinfo role="notifier">columnCountChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of columns in the data array.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">columnCount</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">columnCountChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>count</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rowCount-prop">
<db:title>[read-only] rowCount : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>rowCount</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">rowCount</db:synopsisinfo>
<db:synopsisinfo role="notifier">rowCountChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of rows in the data array.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">rowCount</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rowCountChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>count</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="series-prop">
<db:title>[read-only] series : QSurface3DSeries* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSurface3DSeries*</db:type>
<db:varname>series</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">series</db:synopsisinfo>
<db:synopsisinfo role="notifier">seriesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the series this proxy is attached to.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsurface3dseries.xml">QSurface3DSeries</db:link></db:type> *<db:emphasis role="bold">series</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">seriesChanged</db:emphasis>(<db:type><db:link xlink:href="qsurface3dseries.xml">QSurface3DSeries</db:link></db:type> *<db:emphasis>series</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSurfaceDataProxy">
<db:title>[explicit] QSurfaceDataProxy::QSurfaceDataProxy(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSurfaceDataProxy</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSurfaceDataProxy(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs <db:link xlink:href="qsurfacedataproxy.xml">QSurfaceDataProxy</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSurfaceDataProxy">
<db:title>[override virtual] QSurfaceDataProxy::~QSurfaceDataProxy()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSurfaceDataProxy</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSurfaceDataProxy() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Deletes the surface data proxy.</db:para>
</db:section>
<db:section xml:id="addRow">
<db:title>int QSurfaceDataProxy::addRow(QSurfaceDataRow <db:emphasis>row</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>addRow</db:methodname>
<db:methodparam>
<db:type>QSurfaceDataRow</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int addRow(QSurfaceDataRow row)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the new row <db:code role="parameter">row</db:code> to the end of an array. The new row must have the same number of columns as the rows in the initial array.</db:para>
<db:para>Returns the index of the added row.</db:para>
</db:section>
<db:section xml:id="addRows">
<db:title>int QSurfaceDataProxy::addRows(QSurfaceDataArray <db:emphasis>rows</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>addRows</db:methodname>
<db:methodparam>
<db:type>QSurfaceDataArray</db:type>
<db:parameter>rows</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int addRows(QSurfaceDataArray rows)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds new <db:code role="parameter">rows</db:code> to the end of an array. The new rows must have the same number of columns as the rows in the initial array.</db:para>
<db:para>Returns the index of the first added row.</db:para>
</db:section>
<db:section xml:id="array">
<db:title>const QSurfaceDataArray &amp;QSurfaceDataProxy::array() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QSurfaceDataArray &amp;</db:type>
<db:methodname>array</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QSurfaceDataArray &amp; array() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pointer to the data array.</db:para>
</db:section>
<db:section xml:id="arrayReset">
<db:title>void QSurfaceDataProxy::arrayReset()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>arrayReset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void arrayReset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the data array is reset. If the contents of the whole array are changed without calling <db:link xlink:href="qsurfacedataproxy.xml#resetArray">resetArray</db:link>(), this signal needs to be emitted to update the graph.</db:para>
</db:section>
<db:section xml:id="insertRow">
<db:title>void QSurfaceDataProxy::insertRow(int <db:emphasis>rowIndex</db:emphasis>, QSurfaceDataRow <db:emphasis>row</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rowIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSurfaceDataRow</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertRow(int rowIndex, QSurfaceDataRow row)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the new row <db:code role="parameter">row</db:code> into <db:code role="parameter">rowIndex</db:code>. If <db:code role="parameter">rowIndex</db:code> is equal to the array size, the rows are added to the end of the array. The new row must have the same number of columns as the rows in the initial array.</db:para>
</db:section>
<db:section xml:id="insertRows">
<db:title>void QSurfaceDataProxy::insertRows(int <db:emphasis>rowIndex</db:emphasis>, QSurfaceDataArray <db:emphasis>rows</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rowIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSurfaceDataArray</db:type>
<db:parameter>rows</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertRows(int rowIndex, QSurfaceDataArray rows)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts new <db:code role="parameter">rows</db:code> into <db:code role="parameter">rowIndex</db:code>. If <db:code role="parameter">rowIndex</db:code> is equal to the array size, the rows are added to the end of the array. The new <db:code role="parameter">rows</db:code> must have the same number of columns as the rows in the initial array.</db:para>
</db:section>
<db:section xml:id="itemAt">
<db:title>const QSurfaceDataItem &amp;QSurfaceDataProxy::itemAt(int <db:emphasis>rowIndex</db:emphasis>, int <db:emphasis>columnIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QSurfaceDataItem &amp;</db:type>
<db:methodname>itemAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rowIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columnIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QSurfaceDataItem &amp; itemAt(int rowIndex, int columnIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pointer to the item at the position specified by <db:code role="parameter">rowIndex</db:code> and <db:code role="parameter">columnIndex</db:code>. It is guaranteed to be valid only until the next call that modifies data.</db:para>
</db:section>
<db:section xml:id="itemAt-1">
<db:title>const QSurfaceDataItem &amp;QSurfaceDataProxy::itemAt(const QPoint &amp;<db:emphasis>position</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QSurfaceDataItem &amp;</db:type>
<db:methodname>itemAt</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QSurfaceDataItem &amp; itemAt(const QPoint &amp;position) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pointer to the item at the position <db:code role="parameter">position</db:code>. The x-value of <db:code role="parameter">position</db:code> indicates the row and the y-value indicates the column. The item is guaranteed to be valid only until the next call that modifies data.</db:para>
</db:section>
<db:section xml:id="itemChanged">
<db:title>void QSurfaceDataProxy::itemChanged(int <db:emphasis>rowIndex</db:emphasis>, int <db:emphasis>columnIndex</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>itemChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rowIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columnIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void itemChanged(int rowIndex, int columnIndex)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the item at the position specified by <db:code role="parameter">rowIndex</db:code> and <db:code role="parameter">columnIndex</db:code> changes. If the item is changed in the array without calling <db:link xlink:href="qsurfacedataproxy.xml#setItem">setItem</db:link>(), this signal needs to be emitted to update the graph.</db:para>
</db:section>
<db:section xml:id="removeRows">
<db:title>void QSurfaceDataProxy::removeRows(int <db:emphasis>rowIndex</db:emphasis>, int <db:emphasis>removeCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rowIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>removeCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeRows(int rowIndex, int removeCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the number of rows specified by <db:code role="parameter">removeCount</db:code> starting at the position <db:code role="parameter">rowIndex</db:code>. Attempting to remove rows past the end of the array does nothing.</db:para>
</db:section>
<db:section xml:id="resetArray">
<db:title>void QSurfaceDataProxy::resetArray()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resetArray</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resetArray()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the existing array and triggers the <db:link xlink:href="qsurfacedataproxy.xml#arrayReset">arrayReset</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="resetArray-1">
<db:title>void QSurfaceDataProxy::resetArray(QSurfaceDataArray <db:emphasis>newArray</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resetArray</db:methodname>
<db:methodparam>
<db:type>QSurfaceDataArray</db:type>
<db:parameter>newArray</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void resetArray(QSurfaceDataArray newArray)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>* Sets the array from <db:code role="parameter">newArray</db:code>. If the new array is equal to the * existing one, this function simply triggers the <db:link xlink:href="qsurfacedataproxy.xml#arrayReset">arrayReset</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="rowsAdded">
<db:title>void QSurfaceDataProxy::rowsAdded(int <db:emphasis>startIndex</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rowsAdded</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>startIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rowsAdded(int startIndex, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the number of rows specified by <db:code role="parameter">count</db:code> is added starting at the position <db:code role="parameter">startIndex</db:code>. If rows are added to the array without calling <db:link xlink:href="qsurfacedataproxy.xml#addRow">addRow</db:link>() or <db:link xlink:href="qsurfacedataproxy.xml#addRows">addRows</db:link>(), this signal needs to be emitted to update the graph.</db:para>
</db:section>
<db:section xml:id="rowsChanged">
<db:title>void QSurfaceDataProxy::rowsChanged(int <db:emphasis>startIndex</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rowsChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>startIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rowsChanged(int startIndex, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the number of rows specified by <db:code role="parameter">count</db:code> is changed starting at the position <db:code role="parameter">startIndex</db:code>. If rows are changed in the array without calling <db:link xlink:href="qsurfacedataproxy.xml#setRow">setRow</db:link>() or <db:link xlink:href="qsurfacedataproxy.xml#setRows">setRows</db:link>(), this signal needs to be emitted to update the graph.</db:para>
</db:section>
<db:section xml:id="rowsInserted">
<db:title>void QSurfaceDataProxy::rowsInserted(int <db:emphasis>startIndex</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rowsInserted</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>startIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rowsInserted(int startIndex, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the number of rows specified by <db:code role="parameter">count</db:code> is inserted at the position <db:code role="parameter">startIndex</db:code>.</db:para>
<db:para>If rows are inserted into the array without calling <db:link xlink:href="qsurfacedataproxy.xml#insertRow">insertRow</db:link>() or <db:link xlink:href="qsurfacedataproxy.xml#insertRows">insertRows</db:link>(), this signal needs to be emitted to update the graph.</db:para>
</db:section>
<db:section xml:id="rowsRemoved">
<db:title>void QSurfaceDataProxy::rowsRemoved(int <db:emphasis>startIndex</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rowsRemoved</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>startIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rowsRemoved(int startIndex, int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the number of rows specified by <db:code role="parameter">count</db:code> is removed starting at the position <db:code role="parameter">startIndex</db:code>.</db:para>
<db:para>The index is the current array size if the rows were removed from the end of the array. If rows are removed from the array without calling <db:link xlink:href="qsurfacedataproxy.xml#removeRows">removeRows</db:link>(), this signal needs to be emitted to update the graph.</db:para>
</db:section>
<db:section xml:id="setItem">
<db:title>void QSurfaceDataProxy::setItem(int <db:emphasis>rowIndex</db:emphasis>, int <db:emphasis>columnIndex</db:emphasis>, QSurfaceDataItem <db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rowIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>columnIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSurfaceDataItem</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setItem(int rowIndex, int columnIndex, QSurfaceDataItem item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes a single item at the position specified by <db:code role="parameter">rowIndex</db:code> and <db:code role="parameter">columnIndex</db:code> to the item <db:code role="parameter">item</db:code>.</db:para>
</db:section>
<db:section xml:id="setItem-1">
<db:title>void QSurfaceDataProxy::setItem(const QPoint &amp;<db:emphasis>position</db:emphasis>, QSurfaceDataItem <db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setItem</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSurfaceDataItem</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setItem(const QPoint &amp;position, QSurfaceDataItem item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes a single item at the position <db:code role="parameter">position</db:code> to the item <db:code role="parameter">item</db:code>. The x-value of <db:code role="parameter">position</db:code> indicates the row and the y-value indicates the column.</db:para>
</db:section>
<db:section xml:id="setRow">
<db:title>void QSurfaceDataProxy::setRow(int <db:emphasis>rowIndex</db:emphasis>, QSurfaceDataRow <db:emphasis>row</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rowIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSurfaceDataRow</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRow(int rowIndex, QSurfaceDataRow row)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes an existing row by replacing the row at the position <db:code role="parameter">rowIndex</db:code> with the new row specified by <db:code role="parameter">row</db:code>. The new row can be the same as the existing row already stored at the <db:code role="parameter">rowIndex</db:code>. The new row must have the same number of columns as the row it is replacing.</db:para>
</db:section>
<db:section xml:id="setRows">
<db:title>void QSurfaceDataProxy::setRows(int <db:emphasis>rowIndex</db:emphasis>, QSurfaceDataArray <db:emphasis>rows</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rowIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSurfaceDataArray</db:type>
<db:parameter>rows</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRows(int rowIndex, QSurfaceDataArray rows)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes existing rows by replacing the rows starting at the position <db:code role="parameter">rowIndex</db:code> with the new rows specifies by <db:code role="parameter">rows</db:code>. The rows in the <db:code role="parameter">rows</db:code> array can be the same as the existing rows already stored at the <db:code role="parameter">rowIndex</db:code>. The new rows must have the same number of columns as the rows they are replacing.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QSurfaceDataArray-typedef">
<db:title>[alias] QSurfaceDataArray</db:title>
<db:typedefsynopsis>
<db:typedefname>QSurfaceDataArray</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A list of pointers to <db:link xlink:href="qsurfacedataproxy.xml#QSurfaceDataRow-typedef">QSurfaceDataRow</db:link> objects.</db:para>
</db:section>
<db:section xml:id="QSurfaceDataRow-typedef">
<db:title>[alias] QSurfaceDataRow</db:title>
<db:typedefsynopsis>
<db:typedefname>QSurfaceDataRow</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A list of <db:link xlink:href="qsurfacedataitem.xml">QSurfaceDataItem</db:link> objects.</db:para>
</db:section>
</db:section>
</db:article>
