<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ForwardRenderer QML Type</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qml-qt3d-extras-forwardrenderer.xml">ForwardRenderer</db:link> provides a default <db:link xlink:href="qt3drender-framegraph.xml">FrameGraph</db:link> implementation of a forward renderer.</db:para>
<db:para>This type was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Qt3D.Extras 2.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In C++:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3dextras-qforwardrenderer.xml">QForwardRenderer</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Forward rendering is what OpenGL traditionally uses. It renders directly to the backbuffer one object at a time shading each one as it goes.</db:para>
<db:para><db:link xlink:href="qml-qt3d-extras-forwardrenderer.xml">ForwardRenderer</db:link> is a single leaf <db:link xlink:href="qt3drender-framegraph.xml">FrameGraph</db:link> tree which contains a Viewport, a <db:link xlink:href="qml-qt3d-render-cameraselector.xml">CameraSelector</db:link>, and a <db:link xlink:href="qml-qt3d-render-clearbuffers.xml">ClearBuffers</db:link>. The <db:link xlink:href="qml-qt3d-extras-forwardrenderer.xml">ForwardRenderer</db:link> has a default requirement filter key whose name is &quot;renderingStyle&quot; and value &quot;forward&quot;. If you need to filter out your techniques, you should do so based on that filter key.</db:para>
<db:para>By default the viewport occupies the whole screen and the clear color is white. Frustum culling is also enabled.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="camera-prop">
<db:title>camera : Entity</db:title>
<db:para>Holds the current camera entity used to render the scene.</db:para>
<db:note>
<db:para>A camera is an Entity that has a <db:link xlink:href="qml-qt3d-render-cameralens.xml">CameraLens</db:link> as one of its components.</db:para>
</db:note>
</db:section>
<db:section xml:id="clearColor-prop">
<db:title>clearColor : color</db:title>
<db:para>Holds the current clear color of the scene. The frame buffer is initialized to the clear color before rendering.</db:para>
</db:section>
<db:section xml:id="surface-prop">
<db:title>surface : Object</db:title>
<db:para>Holds the current render surface.</db:para>
</db:section>
<db:section xml:id="viewportRect-prop">
<db:title>viewportRect : rect</db:title>
<db:para>Holds the current normalized viewport rectangle.</db:para>
</db:section>
</db:section>
</db:article>
