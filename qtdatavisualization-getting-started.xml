<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Data Visualization Getting Started</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Data Visualization Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:section xml:id="installing-the-qt-data-visualization-module">
<db:title>Installing the Qt Data Visualization Module</db:title>
<db:para>Use the <db:code>Package Manager</db:code> in <db:code>Maintenance Tool</db:code> or the <db:code>Online installer</db:code> to install the Qt Data Visualization module. The module can be found under <db:code>Qt Enterprise Add-Ons</db:code> in the package manager.</db:para>
<db:para>After installation Qt Data Visualization documentation and examples are available in Qt Creator. Examples can be found on the examples page of Qt Creator by selecting the Qt Data Visualization component from the drop-down menu.</db:para>
<db:para>The source code is installed into the <db:link xlink:href="qtdatavisualization-module.xml">QtDataVisualization</db:link> folder under EnterpriseAddOns.</db:para>
</db:section>
<db:section xml:id="building-qt-data-visualization">
<db:title>Building Qt Data Visualization</db:title>
<db:para>To build the Qt Data Visualization module from source code yourself, set up a command prompt with an environment for building Qt applications, navigate to the directory containing <db:code>qtdatavisualization.pro</db:code>, and configure the project with qmake:</db:para>
<db:programlisting language="cpp">qmake
</db:programlisting>
<db:para>After running qmake, build the project with make:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>OS</db:para>
</db:th>
<db:th>
<db:para>Make command</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Linux</db:para>
</db:td>
<db:td>
<db:para>make</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows (MinGw)</db:para>
</db:td>
<db:td>
<db:para>mingw32-make</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows (MSVC)</db:para>
</db:td>
<db:td>
<db:para>nmake</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>OS X</db:para>
</db:td>
<db:td>
<db:para>make</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The above generates the default makefiles for your configuration, which is typically the release build if you are using precompiled binary Qt distribution. To build both debug and release, or one specifically, use one of the following qmake lines instead.</db:para>
<db:para>For debug builds:</db:para>
<db:programlisting language="cpp">qmake CONFIG+=debug
make
</db:programlisting>
<db:para>or</db:para>
<db:programlisting language="cpp">qmake CONFIG+=debug_and_release
make debug
</db:programlisting>
<db:para>For release builds:</db:para>
<db:programlisting language="cpp">qmake CONFIG+=release
make
</db:programlisting>
<db:para>or</db:para>
<db:programlisting language="cpp">qmake CONFIG+=debug_and_release
make release
</db:programlisting>
<db:para>For both builds (Windows/OS X only):</db:para>
<db:programlisting language="cpp">qmake CONFIG+=&quot;debug_and_release build_all&quot;
make
</db:programlisting>
<db:para>After building, install the module to your Qt directory:</db:para>
<db:programlisting language="cpp">make install
</db:programlisting>
<db:para>If you want to uninstall the module:</db:para>
<db:programlisting language="cpp">make uninstall
</db:programlisting>
<db:para>To build a statically linked version of the Qt Data Visualization module, give the following commands:</db:para>
<db:programlisting language="cpp">qmake CONFIG+=static
make
make install
</db:programlisting>
</db:section>
<db:section xml:id="creating-a-simple-application">
<db:title>Creating a Simple Application</db:title>
<db:para>To create a simple application, start by creating a new Qt Gui Application project in Qt Creator and add this line to the <db:code>.pro</db:code> file of the project:</db:para>
<db:programlisting language="cpp">QT += datavisualization
</db:programlisting>
<db:para>In the <db:code>main.cpp</db:code> file, include the module headers and declare namespace usage:</db:para>
<db:programlisting language="cpp">#include &lt;QtDataVisualization&gt;

using namespace QtDataVisualization;
</db:programlisting>
<db:para>Then, add the sample code found in one of the following pages, depending on what kind of visualization you are interested in: <db:link xlink:href="">How to construct a minimal Q3DBars graph</db:link>, <db:link xlink:href="">How to construct a minimal Q3DScatter graph</db:link>, or <db:link xlink:href="">How to construct a minimal Q3DSurface graph</db:link>.</db:para>
<db:para>To use Qt Data Visualization graphs in widget based applications, you can use the <db:link xlink:href="qwidget.xml#createWindowContainer">QWidget::createWindowContainer</db:link>() function to wrap the graph into a widget:</db:para>
<db:programlisting language="cpp">Q3DBars *graph = new Q3DBars();
QWidget *container = QWidget::createWindowContainer(graph);
</db:programlisting>
<db:para>For further code examples, see one of the Qt Data Visualization examples:</db:para>
<db:variablelist role="qtdatavisualization_examples">
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-audiolevels-example.xml" xlink:role="page">Audiolevels Example</db:link></db:term>
<db:listitem>
<db:para>Simple application showing real time audio data.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-draggableaxes-example.xml" xlink:role="page">Axis Range Dragging With Labels Example</db:link></db:term>
<db:listitem>
<db:para>Implementing a custom input handler to support axis dragging.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-bars-example.xml" xlink:role="page">Bars Example</db:link></db:term>
<db:listitem>
<db:para>Using Q3DBars in a widget application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-custominput-example.xml" xlink:role="page">Custom Input Example</db:link></db:term>
<db:listitem>
<db:para>Implementing custom input handler in a widget application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-customitems-example.xml" xlink:role="page">Custom Items Example</db:link></db:term>
<db:listitem>
<db:para>Adding custom items to a surface graph.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-customproxy-example.xml" xlink:role="page">Custom Proxy Example</db:link></db:term>
<db:listitem>
<db:para>Using Q3DBars with a custom proxy.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-itemmodel-example.xml" xlink:role="page">Item Model Example</db:link></db:term>
<db:listitem>
<db:para>Using an item model as data source for Q3DBars.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-qmlaxisdrag-example.xml" xlink:role="page">Qt Quick 2 Axis Dragging Example</db:link></db:term>
<db:listitem>
<db:para>Implementing axis dragging in QML</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-qmlaxisformatter-example.xml" xlink:role="page">Qt Quick 2 Axis Formatter Example</db:link></db:term>
<db:listitem>
<db:para>Example of a hybrid C++ and QML application demonstrating different axis formatters.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-qmlbars-example.xml" xlink:role="page">Qt Quick 2 Bars Example</db:link></db:term>
<db:listitem>
<db:para>Using Bars3D in a QML application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-qmlcustominput-example.xml" xlink:role="page">Qt Quick 2 Custom Input Example</db:link></db:term>
<db:listitem>
<db:para>Customizing input in a QML application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-qmllegend-example.xml" xlink:role="page">Qt Quick 2 Legend Example</db:link></db:term>
<db:listitem>
<db:para>Showing graph legend in a QML application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-qmlmultigraph-example.xml" xlink:role="page">Qt Quick 2 Multiple Graphs Example</db:link></db:term>
<db:listitem>
<db:para>Showing multiple graphs simultaneously in a QML application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-qmloscilloscope-example.xml" xlink:role="page">Qt Quick 2 Oscilloscope Example</db:link></db:term>
<db:listitem>
<db:para>Example of a hybrid C++ and QML application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-qmlscatter-example.xml" xlink:role="page">Qt Quick 2 Scatter Example</db:link></db:term>
<db:listitem>
<db:para>Using Scatter3D in a QML application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-qmlspectrogram-example.xml" xlink:role="page">Qt Quick 2 Spectrogram Example</db:link></db:term>
<db:listitem>
<db:para>Showing spectrogram graph in a QML application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-qmlsurface-example.xml" xlink:role="page">Qt Quick 2 Surface Example</db:link></db:term>
<db:listitem>
<db:para>Using Surface3D in a QML application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-qmlsurfacelayers-example.xml" xlink:role="page">Qt Quick 2 Surface Multiseries Example</db:link></db:term>
<db:listitem>
<db:para>Using multiple series with Surface3D in a QML application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-rotations-example.xml" xlink:role="page">Rotations Example</db:link></db:term>
<db:listitem>
<db:para>Using rotated scatter items</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-scatter-example.xml" xlink:role="page">Scatter Example</db:link></db:term>
<db:listitem>
<db:para>Using Q3DScatter in a widget application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-surface-example.xml" xlink:role="page">Surface Example</db:link></db:term>
<db:listitem>
<db:para>Using Q3DSurface in a widget application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-texturesurface-example.xml" xlink:role="page">Textured Surface Example</db:link></db:term>
<db:listitem>
<db:para>Using texture with Q3DSurface.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtdatavisualization-volumetric-example.xml" xlink:role="page">Volumetric rendering Example</db:link></db:term>
<db:listitem>
<db:para>Rendering volumetric objects.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
