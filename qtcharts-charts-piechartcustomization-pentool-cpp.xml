<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Pie Chart Customization Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how the look and feel of a pie chart can be customized.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;pentool.h&quot;
#include &amp;lt;QtWidgets/QPushButton&amp;gt;
#include &amp;lt;QtWidgets/QDoubleSpinBox&amp;gt;
#include &amp;lt;QtWidgets/QComboBox&amp;gt;
#include &amp;lt;QtWidgets/QFormLayout&amp;gt;
#include &amp;lt;QtWidgets/QColorDialog&amp;gt;

PenTool::PenTool(QString title, QWidget *parent)
    : QWidget(parent)
{
    setWindowTitle(title);
    setWindowFlags(Qt::Tool);

    m_colorButton = new QPushButton();

    m_widthSpinBox = new QDoubleSpinBox();

    m_styleCombo = new QComboBox();
    m_styleCombo-&amp;gt;addItem(&quot;NoPen&quot;);
    m_styleCombo-&amp;gt;addItem(&quot;SolidLine&quot;);
    m_styleCombo-&amp;gt;addItem(&quot;DashLine&quot;);
    m_styleCombo-&amp;gt;addItem(&quot;DotLine&quot;);
    m_styleCombo-&amp;gt;addItem(&quot;DashDotLine&quot;);
    m_styleCombo-&amp;gt;addItem(&quot;DashDotDotLine&quot;);

    m_capStyleCombo = new QComboBox();
    m_capStyleCombo-&amp;gt;addItem(&quot;FlatCap&quot;, Qt::FlatCap);
    m_capStyleCombo-&amp;gt;addItem(&quot;SquareCap&quot;, Qt::SquareCap);
    m_capStyleCombo-&amp;gt;addItem(&quot;RoundCap&quot;, Qt::RoundCap);

    m_joinStyleCombo = new QComboBox();
    m_joinStyleCombo-&amp;gt;addItem(&quot;MiterJoin&quot;, Qt::MiterJoin);
    m_joinStyleCombo-&amp;gt;addItem(&quot;BevelJoin&quot;, Qt::BevelJoin);
    m_joinStyleCombo-&amp;gt;addItem(&quot;RoundJoin&quot;, Qt::RoundJoin);
    m_joinStyleCombo-&amp;gt;addItem(&quot;SvgMiterJoin&quot;, Qt::SvgMiterJoin);

    QFormLayout *layout = new QFormLayout();
    layout-&amp;gt;addRow(&quot;Color&quot;, m_colorButton);
    layout-&amp;gt;addRow(&quot;Width&quot;, m_widthSpinBox);
    layout-&amp;gt;addRow(&quot;Style&quot;, m_styleCombo);
    layout-&amp;gt;addRow(&quot;Cap style&quot;, m_capStyleCombo);
    layout-&amp;gt;addRow(&quot;Join style&quot;, m_joinStyleCombo);
    setLayout(layout);

    // Use old style connect on some signals because the signal is overloaded
    connect(m_colorButton, &amp;amp;QPushButton::clicked, this, &amp;amp;PenTool::showColorDialog);
    connect(m_widthSpinBox,
            static_cast&amp;lt;void (QDoubleSpinBox::*)(double)&amp;gt;(&amp;amp;QDoubleSpinBox::valueChanged),
            this, &amp;amp;PenTool::updateWidth);
    connect(m_styleCombo,
            static_cast&amp;lt;void (QComboBox::*)(int)&amp;gt;(&amp;amp;QComboBox::currentIndexChanged),
            this, &amp;amp;PenTool::updateStyle);
    connect(m_capStyleCombo,
            static_cast&amp;lt;void (QComboBox::*)(int)&amp;gt;(&amp;amp;QComboBox::currentIndexChanged),
            this, &amp;amp;PenTool::updateCapStyle);
    connect(m_joinStyleCombo,
            static_cast&amp;lt;void (QComboBox::*)(int)&amp;gt;(&amp;amp;QComboBox::currentIndexChanged),
            this, &amp;amp;PenTool::updateJoinStyle);
}

void PenTool::setPen(const QPen &amp;amp;pen)
{
    m_pen = pen;
    m_colorButton-&amp;gt;setText(m_pen.color().name());
    m_widthSpinBox-&amp;gt;setValue(m_pen.widthF());
    m_styleCombo-&amp;gt;setCurrentIndex(m_pen.style()); // index matches the enum
    m_capStyleCombo-&amp;gt;setCurrentIndex(m_capStyleCombo-&amp;gt;findData(m_pen.capStyle()));
    m_joinStyleCombo-&amp;gt;setCurrentIndex(m_joinStyleCombo-&amp;gt;findData(m_pen.joinStyle()));
}

QPen PenTool::pen() const
{
    return m_pen;
}

QString PenTool::name()
{
    return name(m_pen);
}

QString PenTool::name(const QPen &amp;amp;pen)
{
    return pen.color().name() + &quot;:&quot; + QString::number(pen.widthF());
}

void PenTool::showColorDialog()
{
    QColorDialog dialog(m_pen.color());
    dialog.show();
    dialog.exec();
    m_pen.setColor(dialog.selectedColor());
    m_colorButton-&amp;gt;setText(m_pen.color().name());
    emit changed();
}

void PenTool::updateWidth(double width)
{
    if (!qFuzzyCompare((qreal) width, m_pen.widthF())) {
        m_pen.setWidthF(width);
        emit changed();
    }
}

void PenTool::updateStyle(int style)
{
    if (m_pen.style() != style) {
        m_pen.setStyle((Qt::PenStyle) style);
        emit changed();
    }
}

void PenTool::updateCapStyle(int index)
{
    Qt::PenCapStyle capStyle = (Qt::PenCapStyle) m_capStyleCombo-&amp;gt;itemData(index).toInt();
    if (m_pen.capStyle() != capStyle) {
        m_pen.setCapStyle(capStyle);
        emit changed();
    }
}

void PenTool::updateJoinStyle(int index)
{
    Qt::PenJoinStyle joinStyle = (Qt::PenJoinStyle) m_joinStyleCombo-&amp;gt;itemData(index).toInt();
    if (m_pen.joinStyle() != joinStyle) {
        m_pen.setJoinStyle(joinStyle);
        emit changed();
    }
}

#include &quot;moc_pentool.cpp&quot;

</db:programlisting>
</db:article>
