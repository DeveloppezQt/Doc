<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAccessibleSelectionInterface Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaccessibleselectioninterface.xml">QAccessibleSelectionInterface</db:link> class implements support for selection handling.</db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAccessibleSelectionInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAccessibleSelectionInterface is part of <db:simplelist><db:member>accessibility</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>It provides methods for both, retrieving the current selection as well as modifying the selection.</db:para>
<db:para>Only selections of direct children are supported.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QAccessibleSelectionInterface">
<db:title>[virtual] QAccessibleSelectionInterface::~QAccessibleSelectionInterface()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAccessibleSelectionInterface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAccessibleSelectionInterface()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qaccessibleselectioninterface.xml">QAccessibleSelectionInterface</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>[pure virtual] bool QAccessibleSelectionInterface::clear()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool clear() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unselects all accessible child items.</db:para>
<db:para>Returns whether all accessible child items have actually been removed from the selection, i.e. whether the selection is empty after this method has been called.</db:para>
</db:section>
<db:section xml:id="isSelected">
<db:title>[virtual] bool QAccessibleSelectionInterface::isSelected(QAccessibleInterface *<db:emphasis>childItem</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSelected</db:methodname>
<db:methodparam>
<db:type>QAccessibleInterface *</db:type>
<db:parameter>childItem</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSelected(QAccessibleInterface *childItem) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether <db:code role="parameter">childItem</db:code> is part of the current selection.</db:para>
<db:para>The default implementation checks whether <db:code role="parameter">childItem</db:code> is contained in the list of items retrieved by <db:link xlink:href="qaccessibleselectioninterface.xml#selectedItems">QAccessibleSelectionInterface::selectedItems</db:link>.</db:para>
</db:section>
<db:section xml:id="select">
<db:title>[pure virtual] bool QAccessibleSelectionInterface::select(QAccessibleInterface *<db:emphasis>childItem</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>select</db:methodname>
<db:methodparam>
<db:type>QAccessibleInterface *</db:type>
<db:parameter>childItem</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool select(QAccessibleInterface *childItem) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">childItem</db:code> to the selection. Returns whether <db:code role="parameter">childItem</db:code> has actually been added to the selection.</db:para>
<db:para>For implementations that only allow single selections, this may replace the current selection.</db:para>
</db:section>
<db:section xml:id="selectAll">
<db:title>[pure virtual] bool QAccessibleSelectionInterface::selectAll()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>selectAll</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool selectAll() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Selects all accessible child items.</db:para>
<db:para>Returns whether all accessible child items have actually been added to the selection.</db:para>
</db:section>
<db:section xml:id="selectedItem">
<db:title>[virtual] QAccessibleInterface *QAccessibleSelectionInterface::selectedItem(int <db:emphasis>selectionIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QAccessibleInterface *</db:type>
<db:methodname>selectedItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>selectionIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAccessibleInterface * selectedItem(int selectionIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the selected accessible item at index <db:code role="parameter">selectionIndex</db:code> in the selection.</db:para>
<db:para>Note that the index refers to the n-th selected accessible item (i.e. the index in the current selection), which generally differs from the index that would be passed to <db:link xlink:href="qaccessibleinterface.xml#child">QAccessibleInterface::child</db:link>() in order to retrieve the same item.</db:para>
<db:para>The default implementation uses <db:code role="parameter">selectionIndex</db:code> to retrieve the item from the list of selected items retrieved by <db:link xlink:href="qaccessibleselectioninterface.xml#selectedItems">QAccessibleSelectionInterface::selectedItems</db:link>().</db:para>
<db:para>In particular for implementations dealing with many selected items, reimplementing this method in a more efficient way may be desirable for performance reasons.</db:para>
</db:section>
<db:section xml:id="selectedItemCount">
<db:title>[pure virtual] int QAccessibleSelectionInterface::selectedItemCount() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>selectedItemCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int selectedItemCount() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the total number of selected accessible items.</db:para>
</db:section>
<db:section xml:id="selectedItems">
<db:title>[pure virtual] QList&lt;QAccessibleInterface *&gt; QAccessibleSelectionInterface::selectedItems() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QAccessibleInterface *&gt;</db:type>
<db:methodname>selectedItems</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QAccessibleInterface *&gt; selectedItems() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of selected accessible items.</db:para>
</db:section>
<db:section xml:id="unselect">
<db:title>[pure virtual] bool QAccessibleSelectionInterface::unselect(QAccessibleInterface *<db:emphasis>childItem</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>unselect</db:methodname>
<db:methodparam>
<db:type>QAccessibleInterface *</db:type>
<db:parameter>childItem</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool unselect(QAccessibleInterface *childItem) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">childItem</db:code> from the selection.</db:para>
<db:para>Returns whether the accessible item has actually been removed from the selection.</db:para>
</db:section>
</db:section>
</db:article>
