<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebSockets MQTT Subscription</db:title>
<db:productname>QtMqtt</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt MQTT Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Combining an MQTT client with a web socket connection.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2017 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

#include &quot;clientsubscription.h&quot;

#include &amp;lt;QtCore/QCoreApplication&amp;gt;
#include &amp;lt;QtCore/QCommandLineParser&amp;gt;
#include &amp;lt;QtCore/QLoggingCategory&amp;gt;

using namespace Qt::StringLiterals;

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    QCoreApplication::setApplicationVersion(&quot;1.0&quot;);

    QCommandLineParser parser;
    parser.setApplicationDescription(u&quot;Websocket MQTT subscription tool&quot;_s);
    auto help = parser.addHelpOption();

    // Use http://www.hivemq.com/demos/websocket-client/ in browser to publish
    QCommandLineOption urlOption(QStringList{ u&quot;host&quot;_s, u&quot;url&quot;_s, u&quot;broker&quot;_s },
                                 u&quot;Host to connect to, eg ws://broker.hivemq.com:8000/mqtt&quot;_s,
                                 u&quot;host&quot;_s);
    parser.addOption(urlOption);

    QCommandLineOption subscriptionOption(QStringList{ u&quot;t&quot;_s, u&quot;topic&quot;_s },
                                          u&quot;Topic to subscribe to&quot;_s, u&quot;topic&quot;_s);
    parser.addOption(subscriptionOption);

    QCommandLineOption debugOption(QStringList{ u&quot;d&quot;_s, u&quot;debug&quot;_s }, u&quot;Enable Debug mode&quot;_s);
    parser.addOption(debugOption);

    QCommandLineOption versionOption(QStringList{ u&quot;v&quot;_s, u&quot;version&quot;_s },
                                     u&quot;MQTT protocol version.\n3: MQTT 3.1\n4: MQTT 3.1.1&quot;_s,
                                     u&quot;version&quot;_s, u&quot;3&quot;_s);
    parser.addOption(versionOption);

    parser.process(a.arguments());

    const QString debugLog = QString::fromLatin1(&quot;qtdemo.websocket.mqtt*=%1&quot;).arg(
                                parser.isSet(debugOption) ? &quot;true&quot; : &quot;false&quot;);
    QLoggingCategory::setFilterRules(debugLog);

    ClientSubscription clientsub;
    clientsub.setUrl(QUrl(parser.value(urlOption)));
    clientsub.setTopic(parser.value(subscriptionOption));

    const QString versionString = parser.value(versionOption);

    if (versionString == &quot;4&quot;) {
        clientsub.setVersion(4);
    } else if (versionString == &quot;3&quot;) {
        clientsub.setVersion(3);
    } else {
        qInfo() &amp;lt;&amp;lt; &quot;Unknown MQTT version&quot;;
        return -2;
    }

    clientsub.connectAndSubscribe();
    return a.exec();
}

</db:programlisting>
</db:article>
