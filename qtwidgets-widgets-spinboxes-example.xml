<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Spin Boxes Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Spin Boxes example shows how to use the many different types of spin boxes available in Qt, from a simple <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> widget to more complex editors like the <db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link> widget.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/spinboxes-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The example consists of a single Window class that is used to display the different spin box-based widgets available with Qt.</db:para>
<db:section xml:id="window-class-definition">
<db:title>Window Class Definition</db:title>
<db:para>The Window class inherits <db:link xlink:href="qwidget.xml">QWidget</db:link> and contains two slots that are used to provide interactive features:</db:para>
<db:programlisting language="cpp">class Window : public QWidget
{
    Q_OBJECT

public:
    Window(QWidget *parent = nullptr);

public slots:
    void changePrecision(int decimals);
    void setFormatString(const QString &amp;amp;formatString);

private:
    void createSpinBoxes();
    void createDateTimeEdits();
    void createDoubleSpinBoxes();

    QDateTimeEdit *meetingEdit;
    QDoubleSpinBox *doubleSpinBox;
    QDoubleSpinBox *priceSpinBox;
    QDoubleSpinBox *scaleSpinBox;
    QGroupBox *spinBoxesGroup;
    QGroupBox *editsGroup;
    QGroupBox *doubleSpinBoxesGroup;
    QLabel *meetingLabel;
    QSpinBox *groupSeparatorSpinBox;
    QDoubleSpinBox *groupSeparatorSpinBox_d;
};
</db:programlisting>
<db:para>The private functions are used to set up each type of spin box in the window. We use member variables to keep track of various widgets so that they can be reconfigured when required.</db:para>
</db:section>
<db:section xml:id="window-class-implementation">
<db:title>Window Class Implementation</db:title>
<db:para>The constructor simply calls private functions to set up the different types of spin box used in the example, and places each group in a layout:</db:para>
<db:programlisting language="cpp">Window::Window(QWidget *parent)
    : QWidget(parent)
{
    createSpinBoxes();
    createDateTimeEdits();
    createDoubleSpinBoxes();

    QHBoxLayout *layout = new QHBoxLayout;
    layout-&amp;gt;addWidget(spinBoxesGroup);
    layout-&amp;gt;addWidget(editsGroup);
    layout-&amp;gt;addWidget(doubleSpinBoxesGroup);
    setLayout(layout);

    setWindowTitle(tr(&quot;Spin Boxes&quot;));
}
</db:programlisting>
<db:para>We use the layout to manage the arrangement of the window's child widgets, and change the window title.</db:para>
<db:para>The createSpinBoxes() function constructs a <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> and places three <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> widgets inside it with descriptive labels to indicate the types of input they expect.</db:para>
<db:programlisting language="cpp">void Window::createSpinBoxes()
{
    spinBoxesGroup = new QGroupBox(tr(&quot;Spinboxes&quot;));

    QLabel *integerLabel = new QLabel(tr(&quot;Enter a value between &quot;
        &quot;%1 and %2:&quot;).arg(-20).arg(20));
    QSpinBox *integerSpinBox = new QSpinBox;
    integerSpinBox-&amp;gt;setRange(-20, 20);
    integerSpinBox-&amp;gt;setSingleStep(1);
    integerSpinBox-&amp;gt;setValue(0);
</db:programlisting>
<db:para>The first spin box shows the simplest way to use <db:link xlink:href="qspinbox.xml">QSpinBox</db:link>. It accepts values from -20 to 20, the current value can be increased or decreased by 1 with either the arrow buttons or <db:guilabel>Up</db:guilabel> and <db:guilabel>Down</db:guilabel> keys, and the default value is 0.</db:para>
<db:para>The second spin box uses a larger step size and displays a suffix to provide more information about the type of data the number represents:</db:para>
<db:programlisting language="cpp">    QLabel *zoomLabel = new QLabel(tr(&quot;Enter a zoom value between &quot;
        &quot;%1 and %2:&quot;).arg(0).arg(1000));
    QSpinBox *zoomSpinBox = new QSpinBox;
    zoomSpinBox-&amp;gt;setRange(0, 1000);
    zoomSpinBox-&amp;gt;setSingleStep(10);
    zoomSpinBox-&amp;gt;setSuffix(&quot;%&quot;);
    zoomSpinBox-&amp;gt;setSpecialValueText(tr(&quot;Automatic&quot;));
    zoomSpinBox-&amp;gt;setValue(100);
</db:programlisting>
<db:para>This spin box also displays a <db:link xlink:href="qabstractspinbox.xml#specialValueText-prop">special value</db:link> instead of the minimum value defined for it. This means that it will never show <db:guilabel>0%</db:guilabel>, but will display <db:guilabel>Automatic</db:guilabel> when the minimum value is selected.</db:para>
<db:para>The third spin box shows how a prefix can be used:</db:para>
<db:programlisting language="cpp">    QLabel *priceLabel = new QLabel(tr(&quot;Enter a price between &quot;
        &quot;%1 and %2:&quot;).arg(0).arg(999));
    QSpinBox *priceSpinBox = new QSpinBox;
    priceSpinBox-&amp;gt;setRange(0, 999);
    priceSpinBox-&amp;gt;setSingleStep(1);
    priceSpinBox-&amp;gt;setPrefix(&quot;$&quot;);
    priceSpinBox-&amp;gt;setValue(99);
</db:programlisting>
<db:para>For simplicity, we show a spin box with a prefix and no suffix. It is also possible to use both at the same time.</db:para>
<db:programlisting language="cpp">    groupSeparatorSpinBox = new QSpinBox;
    groupSeparatorSpinBox-&amp;gt;setRange(-99999999, 99999999);
    groupSeparatorSpinBox-&amp;gt;setValue(1000);
    groupSeparatorSpinBox-&amp;gt;setGroupSeparatorShown(true);
    QCheckBox *groupSeparatorChkBox = new QCheckBox;
    groupSeparatorChkBox-&amp;gt;setText(tr(&quot;Show group separator&quot;));
    groupSeparatorChkBox-&amp;gt;setChecked(true);
    connect(groupSeparatorChkBox, &amp;amp;QCheckBox::toggled, groupSeparatorSpinBox,
            &amp;amp;QSpinBox::setGroupSeparatorShown);

    QLabel *hexLabel = new QLabel(tr(&quot;Enter a value between &quot;
        &quot;%1 and %2:&quot;).arg('-' + QString::number(31, 16)).arg(QString::number(31, 16)));
    QSpinBox *hexSpinBox = new QSpinBox;
    hexSpinBox-&amp;gt;setRange(-31, 31);
    hexSpinBox-&amp;gt;setSingleStep(1);
    hexSpinBox-&amp;gt;setValue(0);
    hexSpinBox-&amp;gt;setDisplayIntegerBase(16);

    QVBoxLayout *spinBoxLayout = new QVBoxLayout;
    spinBoxLayout-&amp;gt;addWidget(integerLabel);
    spinBoxLayout-&amp;gt;addWidget(integerSpinBox);
    spinBoxLayout-&amp;gt;addWidget(zoomLabel);
    spinBoxLayout-&amp;gt;addWidget(zoomSpinBox);
    spinBoxLayout-&amp;gt;addWidget(priceLabel);
    spinBoxLayout-&amp;gt;addWidget(priceSpinBox);
    spinBoxLayout-&amp;gt;addWidget(hexLabel);
    spinBoxLayout-&amp;gt;addWidget(hexSpinBox);
    spinBoxLayout-&amp;gt;addWidget(groupSeparatorChkBox);
    spinBoxLayout-&amp;gt;addWidget(groupSeparatorSpinBox);
    spinBoxesGroup-&amp;gt;setLayout(spinBoxLayout);
}
</db:programlisting>
<db:para>The rest of the function sets up a layout for the group box and places each of the widgets inside it.</db:para>
<db:para>The createDateTimeEdits() function constructs another group box with a selection of spin boxes used for editing dates and times.</db:para>
<db:programlisting language="cpp">void Window::createDateTimeEdits()
{
    editsGroup = new QGroupBox(tr(&quot;Date and time spin boxes&quot;));

    QLabel *dateLabel = new QLabel;
    QDateEdit *dateEdit = new QDateEdit(QDate::currentDate());
    dateEdit-&amp;gt;setDateRange(QDate(2005, 1, 1), QDate(2010, 12, 31));
    dateLabel-&amp;gt;setText(tr(&quot;Appointment date (between %0 and %1):&quot;)
                       .arg(dateEdit-&amp;gt;minimumDate().toString(Qt::ISODate))
                       .arg(dateEdit-&amp;gt;maximumDate().toString(Qt::ISODate)));
</db:programlisting>
<db:para>The first spin box is a <db:link xlink:href="qdateedit.xml">QDateEdit</db:link> widget that is able to accept dates within a given range specified using <db:link xlink:href="qdate.xml">QDate</db:link> values. The arrow buttons and <db:guilabel>Up</db:guilabel> and <db:guilabel>Down</db:guilabel> keys can be used to increase and decrease the values for year, month, and day when the cursor is in the relevant section.</db:para>
<db:para>The second spin box is a <db:link xlink:href="qtimeedit.xml">QTimeEdit</db:link> widget:</db:para>
<db:programlisting language="cpp">    QLabel *timeLabel = new QLabel;
    QTimeEdit *timeEdit = new QTimeEdit(QTime::currentTime());
    timeEdit-&amp;gt;setTimeRange(QTime(9, 0, 0, 0), QTime(16, 30, 0, 0));
    timeLabel-&amp;gt;setText(tr(&quot;Appointment time (between %0 and %1):&quot;)
                       .arg(timeEdit-&amp;gt;minimumTime().toString(Qt::ISODate))
                       .arg(timeEdit-&amp;gt;maximumTime().toString(Qt::ISODate)));
</db:programlisting>
<db:para>Acceptable values for the time are defined using <db:link xlink:href="qtime.xml">QTime</db:link> values.</db:para>
<db:para>The third spin box is a <db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link> widget that can display both date and time values, and we place a label above it to indicate the range of allowed times for a meeting. These widgets will be updated when the user changes a format string.</db:para>
<db:programlisting language="cpp">    meetingLabel = new QLabel;
    meetingEdit = new QDateTimeEdit(QDateTime::currentDateTime());
</db:programlisting>
<db:para>The format string used for the date time editor, which is also shown in the string displayed by the label, is chosen from a set of strings in a combobox:</db:para>
<db:programlisting language="cpp">    QLabel *formatLabel = new QLabel(tr(&quot;Format string for the meeting date &quot;
                                        &quot;and time:&quot;));
    QComboBox *formatComboBox = new QComboBox;
    formatComboBox-&amp;gt;addItem(&quot;yyyy-MM-dd hh:mm:ss (zzz 'ms')&quot;);
    formatComboBox-&amp;gt;addItem(&quot;hh:mm:ss MM/dd/yyyy&quot;);
    formatComboBox-&amp;gt;addItem(&quot;hh:mm:ss dd/MM/yyyy&quot;);
    formatComboBox-&amp;gt;addItem(&quot;hh:mm:ss&quot;);
    formatComboBox-&amp;gt;addItem(&quot;hh:mm ap&quot;);

    connect(formatComboBox, &amp;amp;QComboBox::textActivated,
            this, &amp;amp;Window::setFormatString);
</db:programlisting>
<db:para>A signal from this combobox is connected to a slot in the Window class (shown later).</db:para>
<db:programlisting language="cpp">    QVBoxLayout *editsLayout = new QVBoxLayout;
    editsLayout-&amp;gt;addWidget(dateLabel);
    editsLayout-&amp;gt;addWidget(dateEdit);
    editsLayout-&amp;gt;addWidget(timeLabel);
    editsLayout-&amp;gt;addWidget(timeEdit);
    editsLayout-&amp;gt;addWidget(meetingLabel);
    editsLayout-&amp;gt;addWidget(meetingEdit);
    editsLayout-&amp;gt;addWidget(formatLabel);
    editsLayout-&amp;gt;addWidget(formatComboBox);
    editsGroup-&amp;gt;setLayout(editsLayout);
}
</db:programlisting>
<db:para>Each child widget of the group box in placed in a layout.</db:para>
<db:para>The setFormatString() slot is called whenever the user selects a new format string in the combobox. The display format for the <db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link> widget is set using the raw string passed by the signal:</db:para>
<db:programlisting language="cpp">void Window::setFormatString(const QString &amp;amp;formatString)
{
    meetingEdit-&amp;gt;setDisplayFormat(formatString);
</db:programlisting>
<db:para>Depending on the visible sections in the widget, we set a new date or time range, and update the associated label to provide relevant information for the user:</db:para>
<db:programlisting language="cpp">    if (meetingEdit-&amp;gt;displayedSections() &amp;amp; QDateTimeEdit::DateSections_Mask) {
        meetingEdit-&amp;gt;setDateRange(QDate(2004, 11, 1), QDate(2005, 11, 30));
        meetingLabel-&amp;gt;setText(tr(&quot;Meeting date (between %0 and %1):&quot;)
            .arg(meetingEdit-&amp;gt;minimumDate().toString(Qt::ISODate))
            .arg(meetingEdit-&amp;gt;maximumDate().toString(Qt::ISODate)));
    } else {
        meetingEdit-&amp;gt;setTimeRange(QTime(0, 7, 20, 0), QTime(21, 0, 0, 0));
        meetingLabel-&amp;gt;setText(tr(&quot;Meeting time (between %0 and %1):&quot;)
            .arg(meetingEdit-&amp;gt;minimumTime().toString(Qt::ISODate))
            .arg(meetingEdit-&amp;gt;maximumTime().toString(Qt::ISODate)));
    }
}
</db:programlisting>
<db:para>When the format string is changed, there will be an appropriate label and entry widget for dates, times, or both types of input.</db:para>
<db:para>The createDoubleSpinBoxes() function constructs three spin boxes that are used to input double-precision floating point numbers:</db:para>
<db:programlisting language="cpp">void Window::createDoubleSpinBoxes()
{
    doubleSpinBoxesGroup = new QGroupBox(tr(&quot;Double precision spinboxes&quot;));

    QLabel *precisionLabel = new QLabel(tr(&quot;Number of decimal places &quot;
                                           &quot;to show:&quot;));
    QSpinBox *precisionSpinBox = new QSpinBox;
    precisionSpinBox-&amp;gt;setRange(0, 100);
    precisionSpinBox-&amp;gt;setValue(2);
</db:programlisting>
<db:para>Before the <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link> widgets are constructed, we create a spin box to control how many decimal places they show. By default, only two decimal places are shown in the following spin boxes, each of which is the equivalent of a spin box in the group created by the createSpinBoxes() function.</db:para>
<db:para>The first double spin box shows a basic double-precision spin box with the same range, step size, and default value as the first spin box in the createSpinBoxes() function:</db:para>
<db:programlisting language="cpp">    QLabel *doubleLabel = new QLabel(tr(&quot;Enter a value between &quot;
        &quot;%1 and %2:&quot;).arg(-20).arg(20));
    doubleSpinBox = new QDoubleSpinBox;
    doubleSpinBox-&amp;gt;setRange(-20.0, 20.0);
    doubleSpinBox-&amp;gt;setSingleStep(1.0);
    doubleSpinBox-&amp;gt;setValue(0.0);
</db:programlisting>
<db:para>However, this spin box also allows non-integer values to be entered.</db:para>
<db:para>The second spin box displays a suffix and shows a special value instead of the minimum value:</db:para>
<db:programlisting language="cpp">    QLabel *scaleLabel = new QLabel(tr(&quot;Enter a scale factor between &quot;
        &quot;%1 and %2:&quot;).arg(0).arg(1000.0));
    scaleSpinBox = new QDoubleSpinBox;
    scaleSpinBox-&amp;gt;setRange(0.0, 1000.0);
    scaleSpinBox-&amp;gt;setSingleStep(10.0);
    scaleSpinBox-&amp;gt;setSuffix(&quot;%&quot;);
    scaleSpinBox-&amp;gt;setSpecialValueText(tr(&quot;No scaling&quot;));
    scaleSpinBox-&amp;gt;setValue(100.0);
</db:programlisting>
<db:para>The third spin box displays a prefix instead of a suffix:</db:para>
<db:programlisting language="cpp">    QLabel *priceLabel = new QLabel(tr(&quot;Enter a price between &quot;
        &quot;%1 and %2:&quot;).arg(0).arg(1000));
    priceSpinBox = new QDoubleSpinBox;
    priceSpinBox-&amp;gt;setRange(0.0, 1000.0);
    priceSpinBox-&amp;gt;setSingleStep(1.0);
    priceSpinBox-&amp;gt;setPrefix(&quot;$&quot;);
    priceSpinBox-&amp;gt;setValue(99.99);

    connect(precisionSpinBox, &amp;amp;QSpinBox::valueChanged,
</db:programlisting>
<db:para>We connect the <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> widget that specifies the precision to a slot in the Window class.</db:para>
<db:programlisting language="cpp">    QVBoxLayout *spinBoxLayout = new QVBoxLayout;
    spinBoxLayout-&amp;gt;addWidget(precisionLabel);
    spinBoxLayout-&amp;gt;addWidget(precisionSpinBox);
    spinBoxLayout-&amp;gt;addWidget(doubleLabel);
    spinBoxLayout-&amp;gt;addWidget(doubleSpinBox);
    spinBoxLayout-&amp;gt;addWidget(scaleLabel);
    spinBoxLayout-&amp;gt;addWidget(scaleSpinBox);
    spinBoxLayout-&amp;gt;addWidget(priceLabel);
    spinBoxLayout-&amp;gt;addWidget(priceSpinBox);
    spinBoxLayout-&amp;gt;addWidget(groupSeparatorChkBox);
    spinBoxLayout-&amp;gt;addWidget(groupSeparatorSpinBox_d);
    doubleSpinBoxesGroup-&amp;gt;setLayout(spinBoxLayout);
}
</db:programlisting>
<db:para>The rest of the function places each of the widgets into a layout for the group box.</db:para>
<db:para>The changePrecision() slot is called when the user changes the value in the precision spin box:</db:para>
<db:programlisting language="cpp">void Window::changePrecision(int decimals)
{
    doubleSpinBox-&amp;gt;setDecimals(decimals);
    scaleSpinBox-&amp;gt;setDecimals(decimals);
    priceSpinBox-&amp;gt;setDecimals(decimals);
}
</db:programlisting>
<db:para>This function simply uses the integer supplied by the signal to specify the number of decimal places in each of the <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link> widgets. Each one of these will be updated automatically when their <db:link xlink:href="qdoublespinbox.xml#decimals-prop">decimals</db:link> property is changed.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/widgets/spinboxes?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
