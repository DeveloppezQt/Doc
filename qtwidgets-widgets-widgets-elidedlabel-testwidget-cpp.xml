<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Elided Label Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example creates a widget similar to <db:link xlink:href="qlabel.xml">QLabel</db:link>, that elides the last visible line, if the text is too long to fit the widget's geometry.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtCore module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;testwidget.h&quot;
#include &quot;elidedlabel.h&quot;

#include &amp;lt;QtWidgets/QLabel&amp;gt;
#include &amp;lt;QtWidgets/QPushButton&amp;gt;
#include &amp;lt;QtWidgets/QSizePolicy&amp;gt;
#include &amp;lt;QtWidgets/QGridLayout&amp;gt;

TestWidget::TestWidget(QWidget *parent):
    QWidget(parent)
{
    const QString romeo = tr(
        &quot;But soft, what light through yonder window breaks? / &quot;
        &quot;It is the east, and Juliet is the sun. / &quot;
        &quot;Arise, fair sun, and kill the envious moon, / &quot;
        &quot;Who is already sick and pale with grief / &quot;
        &quot;That thou, her maid, art far more fair than she.&quot;
    );

    const QString macbeth = tr(
        &quot;To-morrow, and to-morrow, and to-morrow, / &quot;
        &quot;Creeps in this petty pace from day to day, / &quot;
        &quot;To the last syllable of recorded time; / &quot;
        &quot;And all our yesterdays have lighted fools / &quot;
        &quot;The way to dusty death. Out, out, brief candle! / &quot;
        &quot;Life's but a walking shadow, a poor player, / &quot;
        &quot;That struts and frets his hour upon the stage, / &quot;
        &quot;And then is heard no more. It is a tale / &quot;
        &quot;Told by an idiot, full of sound and fury, / &quot;
        &quot;Signifying nothing.&quot;
    );

    const QString harry = tr(&quot;Feeling lucky, punk?&quot;);

    textSamples &amp;lt;&amp;lt; romeo &amp;lt;&amp;lt; macbeth &amp;lt;&amp;lt; harry;

    sampleIndex = 0;
    elidedText = new ElidedLabel(textSamples[sampleIndex], this);
    elidedText-&amp;gt;setFrameStyle(QFrame::Box);

    QPushButton *switchButton = new QPushButton(tr(&quot;Switch text&quot;));
    connect(switchButton, &amp;amp;QPushButton::clicked, this, &amp;amp;TestWidget::switchText);

    QPushButton *exitButton = new QPushButton(tr(&quot;Exit&quot;));
    connect(exitButton, &amp;amp;QPushButton::clicked, this, &amp;amp;TestWidget::close);

    QLabel *label = new QLabel(tr(&quot;Elided&quot;));
    label-&amp;gt;setVisible(elidedText-&amp;gt;isElided());
    connect(elidedText, &amp;amp;ElidedLabel::elisionChanged, label, &amp;amp;QLabel::setVisible);

    widthSlider = new QSlider(Qt::Horizontal);
    widthSlider-&amp;gt;setMinimum(0);
    connect(widthSlider, &amp;amp;QSlider::valueChanged, this, &amp;amp;TestWidget::onWidthChanged);

    heightSlider = new QSlider(Qt::Vertical);
    heightSlider-&amp;gt;setInvertedAppearance(true);
    heightSlider-&amp;gt;setMinimum(0);
    connect(heightSlider, &amp;amp;QSlider::valueChanged, this, &amp;amp;TestWidget::onHeightChanged);

    QGridLayout *layout = new QGridLayout();
    layout-&amp;gt;addWidget(label, 0, 1, Qt::AlignCenter);
    layout-&amp;gt;addWidget(switchButton, 0, 2);
    layout-&amp;gt;addWidget(exitButton, 0, 3);
    layout-&amp;gt;addWidget(widthSlider, 1, 1, 1, 3);
    layout-&amp;gt;addWidget(heightSlider, 2, 0);
    layout-&amp;gt;addWidget(elidedText, 2, 1, 1, 3, Qt::AlignTop | Qt::AlignLeft);

    setLayout(layout);
}

void TestWidget::resizeEvent(QResizeEvent *event)
{
    Q_UNUSED(event)

    int maxWidth = widthSlider-&amp;gt;width();
    widthSlider-&amp;gt;setMaximum(maxWidth);
    widthSlider-&amp;gt;setValue(maxWidth / 2);

    int maxHeight = heightSlider-&amp;gt;height();
    heightSlider-&amp;gt;setMaximum(maxHeight);
    heightSlider-&amp;gt;setValue(maxHeight / 2);

    elidedText-&amp;gt;setFixedSize(widthSlider-&amp;gt;value(), heightSlider-&amp;gt;value());
}

void TestWidget::switchText()
{
    sampleIndex = (sampleIndex + 1) % textSamples.size();
    elidedText-&amp;gt;setText(textSamples.at(sampleIndex));
}

void TestWidget::onWidthChanged(int width)
{
    elidedText-&amp;gt;setFixedWidth(width);
}

void TestWidget::onHeightChanged(int height)
{
    elidedText-&amp;gt;setFixedHeight(height);
}

</db:programlisting>
</db:article>
