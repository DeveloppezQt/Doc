<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPagedPaintDevice Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpagedpaintdevice.xml">QPagedPaintDevice</db:link> class represents a paint device that supports multiple pages.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPagedPaintDevice</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpaintdevice.xml" xlink:role="class">QPaintDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpdfwriter.xml" xlink:role="class">QPdfWriter</db:link> and <db:link xlink:href="qprinter.xml" xlink:role="class">QPrinter</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPagedPaintDevice is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Paged paint devices are used to generate output for printing or for formats like PDF. <db:link xlink:href="qpdfwriter.xml">QPdfWriter</db:link> and <db:link xlink:href="qprinter.xml">QPrinter</db:link> inherit from it.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PdfVersion-enum">
<db:title>enum QPagedPaintDevice::PdfVersion</db:title>
<db:enumsynopsis>
<db:enumname>PdfVersion</db:enumname>
<db:enumitem>
<db:enumidentifier>PdfVersion_1_4</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PdfVersion_A1b</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PdfVersion_1_6</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The PdfVersion enum describes the version of the PDF file that is produced by <db:link xlink:href="qprinter.xml">QPrinter</db:link> or <db:link xlink:href="qpdfwriter.xml">QPdfWriter</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpagedpaintdevice.xml">QPagedPaintDevice</db:link></db:emphasis>::PdfVersion_1_4</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A PDF 1.4 compatible document is produced.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpagedpaintdevice.xml">QPagedPaintDevice</db:link></db:emphasis>::PdfVersion_A1b</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A PDF/A-1b compatible document is produced.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpagedpaintdevice.xml">QPagedPaintDevice</db:link></db:emphasis>::PdfVersion_1_6</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A PDF 1.6 compatible document is produced. This value was added in Qt 5.12.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QPagedPaintDevice">
<db:title>[virtual] QPagedPaintDevice::~QPagedPaintDevice()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPagedPaintDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPagedPaintDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the object.</db:para>
</db:section>
<db:section xml:id="newPage">
<db:title>[pure virtual] bool QPagedPaintDevice::newPage()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>newPage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool newPage() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts a new page. Returns <db:code>true</db:code> on success.</db:para>
</db:section>
<db:section xml:id="pageLayout">
<db:title>QPageLayout QPagedPaintDevice::pageLayout() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPageLayout</db:type>
<db:methodname>pageLayout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPageLayout pageLayout() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current page layout. Use this method to access the current <db:link xlink:href="qpagesize.xml">QPageSize</db:link>, <db:link xlink:href="qpagelayout.xml#Orientation-enum">QPageLayout::Orientation</db:link>, <db:link xlink:href="qmarginsf.xml">QMarginsF</db:link>, fullRect() and paintRect().</db:para>
<db:para>Note that you cannot use the setters on the returned object, you must either call the individual <db:link xlink:href="qpagedpaintdevice.xml">QPagedPaintDevice</db:link> setters or use <db:link xlink:href="qpagedpaintdevice.xml#setPageLayout">setPageLayout</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagedpaintdevice.xml#setPageLayout">setPageLayout</db:link>()</db:member>
<db:member><db:link xlink:href="qpagedpaintdevice.xml#setPageSize">setPageSize</db:link>()</db:member>
<db:member><db:link xlink:href="qpagedpaintdevice.xml#setPageOrientation">setPageOrientation</db:link>()</db:member>
<db:member><db:link xlink:href="qpagedpaintdevice.xml#setPageMargins">setPageMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pageRanges">
<db:title>[since 6.0] QPageRanges QPagedPaintDevice::pageRanges() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPageRanges</db:type>
<db:methodname>pageRanges</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPageRanges pageRanges() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the page ranges associated with this device.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagedpaintdevice.xml#setPageRanges">setPageRanges</db:link>()</db:member>
<db:member><db:link xlink:href="qpageranges.xml">QPageRanges</db:link></db:member>
<db:member><db:link xlink:href="qprinter.xml#fromPage">QPrinter::fromPage</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#toPage">QPrinter::toPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPageLayout">
<db:title>[virtual] bool QPagedPaintDevice::setPageLayout(const QPageLayout &amp;<db:emphasis>newPageLayout</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setPageLayout</db:methodname>
<db:methodparam>
<db:type>const QPageLayout &amp;</db:type>
<db:parameter>newPageLayout</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setPageLayout(const QPageLayout &amp;newPageLayout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the page layout to <db:code role="parameter">newPageLayout</db:code>.</db:para>
<db:para>You should call this before calling <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>(), or immediately before calling <db:link xlink:href="qpagedpaintdevice.xml#newPage">newPage</db:link>() to apply the new page layout to a new page. You should not call any painting methods between a call to setPageLayout() and <db:link xlink:href="qpagedpaintdevice.xml#newPage">newPage</db:link>() as the wrong paint metrics may be used.</db:para>
<db:para>Returns true if the page layout was successfully set to <db:code role="parameter">newPageLayout</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagedpaintdevice.xml#pageLayout">pageLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPageMargins">
<db:title>[virtual] bool QPagedPaintDevice::setPageMargins(const QMarginsF &amp;<db:emphasis>margins</db:emphasis>, QPageLayout::Unit <db:emphasis>units</db:emphasis> = QPageLayout::Millimeter)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setPageMargins</db:methodname>
<db:methodparam>
<db:type>const QMarginsF &amp;</db:type>
<db:parameter>margins</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPageLayout::Unit</db:type>
<db:parameter>units</db:parameter>
<db:initializer>QPageLayout::Millimeter</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setPageMargins(const QMarginsF &amp;margins, QPageLayout::Unit units)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the page <db:code role="parameter">margins</db:code> defined in the given <db:code role="parameter">units</db:code>.</db:para>
<db:para>You should call this before calling <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>(), or immediately before calling <db:link xlink:href="qpagedpaintdevice.xml#newPage">newPage</db:link>() to apply the new margins to a new page. You should not call any painting methods between a call to setPageMargins() and <db:link xlink:href="qpagedpaintdevice.xml#newPage">newPage</db:link>() as the wrong paint metrics may be used.</db:para>
<db:para>To get the current page margins use <db:link xlink:href="qpagedpaintdevice.xml#pageLayout">pageLayout</db:link>().<db:link xlink:href="qml-qtquick-controls-menu.xml#margins">margins()</db:link>.</db:para>
<db:para>Returns true if the page margins were successfully set to <db:code role="parameter">margins</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagedpaintdevice.xml#pageLayout">pageLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPageOrientation">
<db:title>[virtual] bool QPagedPaintDevice::setPageOrientation(QPageLayout::Orientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setPageOrientation</db:methodname>
<db:methodparam>
<db:type>QPageLayout::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setPageOrientation(QPageLayout::Orientation orientation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the page <db:code role="parameter">orientation</db:code>.</db:para>
<db:para>The page orientation is used to define the orientation of the page size when obtaining the page rect.</db:para>
<db:para>You should call this before calling <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>(), or immediately before calling <db:link xlink:href="qpagedpaintdevice.xml#newPage">newPage</db:link>() to apply the new orientation to a new page. You should not call any painting methods between a call to setPageOrientation() and <db:link xlink:href="qpagedpaintdevice.xml#newPage">newPage</db:link>() as the wrong paint metrics may be used.</db:para>
<db:para>To get the current <db:link xlink:href="qpagelayout.xml#Orientation-enum">QPageLayout::Orientation</db:link> use <db:link xlink:href="qpagedpaintdevice.xml#pageLayout">pageLayout</db:link>().<db:link xlink:href="qsensor.xml#orientation">orientation()</db:link>.</db:para>
<db:para>Returns true if the page orientation was successfully set to <db:code role="parameter">orientation</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagedpaintdevice.xml#pageLayout">pageLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPageRanges">
<db:title>[virtual, since 6.0] void QPagedPaintDevice::setPageRanges(const QPageRanges &amp;<db:emphasis>ranges</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setPageRanges</db:methodname>
<db:methodparam>
<db:type>const QPageRanges &amp;</db:type>
<db:parameter>ranges</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPageRanges(const QPageRanges &amp;ranges)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the page ranges for this device to <db:code role="parameter">ranges</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagedpaintdevice.xml#pageRanges">pageRanges</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPageSize">
<db:title>[virtual] bool QPagedPaintDevice::setPageSize(const QPageSize &amp;<db:emphasis>pageSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setPageSize</db:methodname>
<db:methodparam>
<db:type>const QPageSize &amp;</db:type>
<db:parameter>pageSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setPageSize(const QPageSize &amp;pageSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the page size to <db:code role="parameter">pageSize</db:code>.</db:para>
<db:para>To get the current <db:link xlink:href="qpagesize.xml">QPageSize</db:link> use <db:link xlink:href="qpagedpaintdevice.xml#pageLayout">pageLayout</db:link>().pageSize().</db:para>
<db:para>You should call this before calling <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>(), or immediately before calling <db:link xlink:href="qpagedpaintdevice.xml#newPage">newPage</db:link>() to apply the new page size to a new page. You should not call any painting methods between a call to setPageSize() and <db:link xlink:href="qpagedpaintdevice.xml#newPage">newPage</db:link>() as the wrong paint metrics may be used.</db:para>
<db:para>Returns true if the page size was successfully set to <db:code role="parameter">pageSize</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagedpaintdevice.xml#pageLayout">pageLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
