<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Insight Tracker Overview</db:title>
<db:productname>QtInsightTracker</db:productname>
<db:edition>Qt Insight Tracker | Commercial</db:edition>
<db:titleabbrev>Qt Insight Tracker Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes the Qt Insight Tracker module.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="tracking-application-usage">
<db:title>Tracking Application Usage</db:title>
<db:para>You can use Qt Insight Tracker from your application code to track application usage with two event types: interactions and transitions.</db:para>
<db:para>Use transition events to track the current state of the UI. Transition events can be sent whenever your application changes UI views or states, or whenever there are other UI flow changes such as dialog and notification pop-ups.</db:para>
<db:para>From QML code, this can be done for example with:</db:para>
<db:programlisting language="qml">    onStateChanged: InsightTracker.transition(applicationFlow.state);
</db:programlisting>
<db:para>Use interaction events to track which part of UI users interact with. Interaction events automatically include the current state of the UI, as reported using the transition event. Individual UI elements can send the event with QML code:</db:para>
<db:programlisting language="qml">    MouseArea {
        anchors.fill: parent
        onClicked: {
            root.clicked()
            InsightTracker.interaction(root.text, root.InsightCategory.category);
        }
        onPressed: {
            glow.visible = true
            animation1.start()
            animation2.start()
        }
    }
</db:programlisting>
<db:para>Some additional information about the device (model, variant, screen resolution, and screen type) and the application (version, build, and Qt version) is sent automatically on the application start.</db:para>
<db:para>A UUID is generated on the first use of Qt Insight Tracker and used in all the events sent to the back-end server. It can identify all the events coming from one particular device but not individual users.</db:para>
</db:section>
<db:section xml:id="automatic-event-tracking">
<db:title>Automatic Event Tracking</db:title>
<db:para>Qt Insight Tracker can track any event handled by the Qt's <db:link xlink:href="eventsandfilters.xml">event system</db:link>. Tracking these event does not require any changes to the application, unlike the interaction and transition events. All valid event types in <db:link xlink:href="qevent.xml#Type-enum">QEvent::Type</db:link> can be used. Events are not tracked by default and you need to add events types that you want to track to the JSON configuration file.</db:para>
<db:note>
<db:para>Some of the event types can cause a very large number of tracked events and this may have an impact on your application performance, network usage and event quota in the Qt Insight Console.</db:para>
</db:note>
</db:section>
<db:section xml:id="enabling-tracking">
<db:title>Enabling Tracking</db:title>
<db:para>Qt Insight Tracker does not collect or send any data unless the application explicitly enables it through the API. The application must have user's concent before enabling the tracking.</db:para>
</db:section>
<db:section xml:id="configuration">
<db:title>Configuration</db:title>
<db:para>You can configure Qt Insight Tracker with a JSON configuration file and with C++ and QML APIs. The configuration file is read at startup and you can change the values from application code. You must make all configuration changes before enabling the tracking.</db:para>
<db:para>To configure Qt Insight Tracker using a configuration file, add the following JSON file:</db:para>
<db:programlisting language="cpp">{
    &quot;server&quot; : &quot;collect-insight.qt.io&quot;,
    &quot;token&quot; : &quot;00000000-0000-0000-0000-000000000000&quot;,
}
</db:programlisting>
<db:para>A <db:code>token</db:code> is used to match the data your application sends to your Qt Insight Organization and you can find your token from the <db:link xlink:href="https://insight.qt.io">Qt Insight Console</db:link>.</db:para>
<db:para>To configure Qt Insight Tracker from your application, add the following to your QML code:</db:para>
<db:programlisting language="qml">InsightConfiguration {
    token: &quot;1234&quot;
    syncInterval: 3600
}
</db:programlisting>
<db:para>or your C++ code:</db:para>
<db:programlisting language="cpp">QInsightTracker tracker;
tracker.configuration().syncInterval(3600);
</db:programlisting>
<db:para>For more details on the configuration file syntax and the API, see <db:link xlink:href="qinsightconfiguration.xml">QInsightConfiguration</db:link>.</db:para>
</db:section>
<db:section xml:id="event-caching">
<db:title>Event Caching</db:title>
<db:para>By default, the tracked events are cached locally before being sent to the back-end server. The tracked info is then retained if network connectivity is not available or the application exits before the data has been sent. An SQLite database is used for caching, but the implementation allows adding other storage types later.</db:para>
</db:section>
<db:section xml:id="event-filtering">
<db:title>Event Filtering</db:title>
<db:para>Certain events can be filtered before they are sent to the back-end server. This can be done with categories which can be attached to the QML components using <db:link xlink:href="qml-qtinsighttracker-insightcategory.xml">InsightCategory</db:link> or used in the API calls.</db:para>
<db:para>Then you can configure the tracker with <db:link xlink:href="qinsightconfiguration.xml#setCategories">QInsightConfiguration::setCategories</db:link>() to only track events with matching category.</db:para>
</db:section>
<db:section xml:id="offline-usage">
<db:title>Offline Usage</db:title>
<db:para>You can configure Qt Insight Tracker to work in an offline mode, which means that events are tracked normally to the local event cache but they are never sent to the back-end server. This is useful for devices that do not have network connectivity. To turn on offline mode, omit the <db:code>sync</db:code> interval from the configuration json or set all values to zero.</db:para>
<db:para>Qt Insight Tracker comes with a separate command-line utility (<db:code>Qt Insight Uploader</db:code>) that you can use to send the events to the back-end at a later time. You need to retrive the database file from the device and then run the <db:code>insightuploader</db:code> utility on your PC.</db:para>
</db:section>
</db:article>
