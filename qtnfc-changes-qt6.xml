<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Changes to Qt NFC</db:title>
<db:productname>QtNfc</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt NFC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Migrate Qt NFC to Qt 6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 6 is a result of the conscious effort to make the framework more efficient and easy to use.</db:para>
<db:para>We try to maintain binary and source compatibility for all the public APIs in each release. But some changes were inevitable in an effort to make Qt a better framework.</db:para>
<db:para>In this topic we summarize those changes in Qt NFC, and provide guidance to handle them.</db:para>
<db:section xml:id="new-features-and-methods">
<db:title>New Features and Methods</db:title>
<db:section xml:id="added-qndefrecord-clear">
<db:title>Added <db:link xlink:href="qndefrecord.xml#clear">QNdefRecord::clear()</db:link></db:title>
<db:para>Use this method to clear an NDEF record.</db:para>
</db:section>
<db:section xml:id="added-qndeffilter-match">
<db:title>Added <db:link xlink:href="qndeffilter.xml#match">QNdefFilter::match()</db:link></db:title>
<db:para>Use this method to check if a <db:link xlink:href="qndefmessage.xml">QNdefMessage</db:link> matches the given filter. The method returns <db:code>true</db:code> in case of successful match and <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="extended-qnearfieldtarget-type">
<db:title>Extended <db:link xlink:href="qnearfieldtarget.xml#Type-enum">QNearFieldTarget::Type</db:link></db:title>
<db:para>The enum was extended with two more types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qnearfieldtarget.xml#Type-enum">QNearFieldTarget::NfcTagType4A</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qnearfieldtarget.xml#Type-enum">QNearFieldTarget::NfcTagType4B</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="changes-in-the-features-and-methods">
<db:title>Changes in the Features and Methods</db:title>
<db:section xml:id="renamed-qnearfieldmanager-isavailable">
<db:title>Renamed QNearFieldManager::isAvailable()</db:title>
<db:para>The <db:code>QNearFieldManager::isAvailable()</db:code> was renamed to <db:link xlink:href="qnearfieldmanager.xml#isEnabled">QNearFieldManager::isEnabled</db:link>().</db:para>
</db:section>
<db:section xml:id="added-access-method-argument-to-qnearfieldmanager-issupported">
<db:title>Added access method argument to <db:link xlink:href="qnearfieldmanager.xml#isSupported">QNearFieldManager::isSupported</db:link></db:title>
<db:para>The <db:code>accessMethod</db:code> argument allows to check if a specific feature is supported. This is relevant because different platforms or versions of operating systems can support different options.</db:para>
</db:section>
<db:section xml:id="added-access-method-argument-to-qnearfieldmanager-starttargetdetection">
<db:title>Added access method argument to <db:link xlink:href="qnearfieldmanager.xml#startTargetDetection">QNearFieldManager::startTargetDetection</db:link></db:title>
<db:para>The <db:code>accessMethod</db:code> argument allows to scan for NFC tags with the given access method.</db:para>
</db:section>
<db:section xml:id="changed-qndefnfcsmartposterrecord-typeinfo-from-qbytearray-to-qstring">
<db:title>Changed <db:link xlink:href="qndefnfcsmartposterrecord.xml#typeInfo">QNdefNfcSmartPosterRecord::typeInfo</db:link> from <db:link xlink:href="qbytearray.xml">QByteArray</db:link> to <db:link xlink:href="qstring.xml">QString</db:link></db:title>
<db:para>According to NDEF Smart Poster specification, the type is a UTF-8 formatted string. This affects the <db:link xlink:href="qndefnfcsmartposterrecord.xml#typeInfo">QNdefNfcSmartPosterRecord::typeInfo</db:link>() and <db:link xlink:href="qndefnfcsmartposterrecord.xml#setTypeInfo">QNdefNfcSmartPosterRecord::setTypeInfo</db:link>() methods.</db:para>
</db:section>
<db:section xml:id="updated-return-type-of-qndeffilter-appendrecord">
<db:title>Updated return type of <db:link xlink:href="qndeffilter.xml#appendRecord">QNdefFilter::appendRecord</db:link></db:title>
<db:para><db:link xlink:href="qndeffilter.xml#appendRecord">QNdefFilter::appendRecord</db:link> now performs a basic validation of input parameters and returns a boolean value indicating if the record is appended to the filter or not.</db:para>
</db:section>
</db:section>
<db:section xml:id="removed-features-and-methods">
<db:title>Removed Features and Methods</db:title>
<db:section xml:id="removed-qnearfieldtarget-url">
<db:title>Removed QNearFieldTarget::url</db:title>
<db:para>The method was never implemented in the existing subclasses of <db:link xlink:href="qnearfieldtarget.xml">QNearFieldTarget</db:link>.</db:para>
</db:section>
<db:section xml:id="removed-qnearfieldtarget-sendcommands">
<db:title>Removed QNearFieldTarget::sendCommands</db:title>
<db:para>In Qt 5, the method was not very helpful because it didn't provide a way to track the results of intermediate commands. Normally, an additional command needs to be sent only when the previous command is successfully executed.</db:para>
<db:para>The correct approach would be to manually create a queue of commands, use <db:link xlink:href="qnearfieldtarget.xml#sendCommand">QNearFieldTarget::sendCommand</db:link> to send a command and <db:link xlink:href="qnearfieldtarget.xml#requestCompleted">QNearFieldTarget::requestCompleted</db:link> or <db:link xlink:href="qnearfieldtarget.xml#error">QNearFieldTarget::error</db:link> to handle the results of each command individually.</db:para>
</db:section>
<db:section xml:id="removed-qnearfieldtarget-keepconnection">
<db:title>Removed QNearFieldTarget::keepConnection</db:title>
<db:para>The methods <db:code>QNearFieldTarget::keepConnection()</db:code> and <db:code>QNearFieldTarget::setKeepConnection()</db:code> were removed. Keeping the connection is the default behavior for now.</db:para>
</db:section>
<db:section xml:id="removed-qnearfieldtarget-isprocessingcommand">
<db:title>Removed QNearFieldTarget::isProcessingCommand</db:title>
<db:para>The method was never implemented and always returned <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="made-qnearfieldtarget-setresponseforrequest-private-api">
<db:title>Made QNearFieldTarget::setResponseForRequest private API</db:title>
<db:para>The method should not be exposed as a public API. Use <db:link xlink:href="qnearfieldtarget.xml#ndefMessageRead">QNearFieldTarget::ndefMessageRead</db:link> or <db:link xlink:href="qnearfieldtarget.xml#requestResponse">QNearFieldTarget::requestResponse</db:link> to read the data from an NFC tag.</db:para>
</db:section>
<db:section xml:id="removed-qnearfieldtarget-handleresponse">
<db:title>Removed QNearFieldTarget::handleResponse</db:title>
<db:para>The method was removed as it just forwarded the call to <db:code>QNearFieldManager::setResponseForRequest</db:code>, which became private API.</db:para>
</db:section>
<db:section xml:id="made-qnearfieldtarget-reporterror-private-api">
<db:title>Made QNearFieldTarget::reportError private API</db:title>
<db:para>A <db:link xlink:href="qnearfieldtarget.xml#error">QNearFieldTarget::error</db:link> signal can be used instead.</db:para>
</db:section>
<db:section xml:id="removed-qnearfieldtarget-ndefmessageswritten-signal">
<db:title>Removed QNearFieldTarget::ndefMessagesWritten signal</db:title>
<db:para>The <db:link xlink:href="qnearfieldtarget.xml#requestCompleted">QNearFieldTarget::requestCompleted</db:link> signal is used for both NDEF messages and custom commands. The <db:code>id</db:code> parameter can be used to check which request is actually completed.</db:para>
</db:section>
<db:section xml:id="removed-qnearfieldmanager-un-registerndefmessagehandler">
<db:title>Removed QNearFieldManager::(un)registerNdefMessageHandler</db:title>
<db:para>The methods <db:code>QNearFieldTarget::registerNdefMessageHandler</db:code> and <db:code>QNearFieldTarget::unregisterNdefMessageHandler</db:code> were removed.</db:para>
<db:para>Use <db:link xlink:href="qnearfieldtarget.xml#ndefMessageRead">QNearFieldTarget::ndefMessageRead</db:link>() and <db:link xlink:href="qndeffilter.xml#match">QNdefFilter::match</db:link>() to detect the NDEF messages and filter the required ones.</db:para>
<db:note>
<db:para>The application can still be automatically started once the NDEF Tag is touched. The <db:link xlink:href="qtnfc-annotatedurl-example.xml">Annotated URL</db:link> example shows how to achieve it on Android.</db:para>
</db:note>
</db:section>
<db:section xml:id="removed-qnearfieldmanager-targetaccessmodes">
<db:title>Removed QNearFieldManager::TargetAccessModes</db:title>
<db:para>The <db:code>TargetAccessModes</db:code> enum was removed together with the getter and setter methods (<db:code>QNearFieldManager::setTargetAccessModes()</db:code> and <db:code>QNearFieldManager::targetAccessModes()</db:code>).</db:para>
<db:para>The feature is not supported on Android and iOS platforms.</db:para>
</db:section>
<db:section xml:id="removed-qnearfieldsharemanager-and-qnearfieldsharetarget">
<db:title>Removed QNearFieldShareManager and QNearFieldShareTarget</db:title>
<db:para>File sharing via NFC is deprecated on Android in API 29. Other technologies should be used instead.</db:para>
</db:section>
<db:section xml:id="removed-qml-api">
<db:title>Removed QML API</db:title>
<db:para>The support for QML API is discontinued.</db:para>
</db:section>
</db:section>
</db:article>
