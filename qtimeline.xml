<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTimeLine Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> class provides a timeline for controlling animations.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTimeLine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTimeLine is part of <db:simplelist><db:member><db:link xlink:href="animation.xml">Animation Framework</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>It's most commonly used to animate a GUI control by calling a slot periodically. You can construct a timeline by passing its duration in milliseconds to <db:link xlink:href="qtimeline.xml">QTimeLine</db:link>'s constructor. The timeline's duration describes for how long the animation will run. Then you set a suitable frame range by calling <db:link xlink:href="qtimeline.xml#setFrameRange">setFrameRange</db:link>(). Finally connect the <db:link xlink:href="qtimeline.xml#frameChanged">frameChanged</db:link>() signal to a suitable slot in the widget you wish to animate (for example, <db:link xlink:href="">setValue()</db:link> in QProgressBar). When you proceed to calling <db:link xlink:href="qtimeline.xml#start">start</db:link>(), <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> will enter Running state, and start emitting <db:link xlink:href="qtimeline.xml#frameChanged">frameChanged</db:link>() at regular intervals, causing your widget's connected property's value to grow from the lower end to the upper and of your frame range, at a steady rate. You can specify the update interval by calling <db:link xlink:href="qtimeline.xml#updateInterval-prop">setUpdateInterval</db:link>(). When done, <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> enters <db:link xlink:href="qtimeline.xml#State-enum">NotRunning</db:link> state, and emits <db:link xlink:href="qtimeline.xml#finished">finished</db:link>().</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">...
progressBar = new QProgressBar(this);
progressBar-&gt;setRange(0, 100);

// Construct a 1-second timeline with a frame range of 0 - 100
QTimeLine *timeLine = new QTimeLine(1000, this);
timeLine-&gt;setFrameRange(0, 100);
connect(timeLine, &amp;QTimeLine::frameChanged, progressBar, &amp;QProgressBar::setValue);

// Clicking the push button will start the progress bar animation
pushButton = new QPushButton(tr(&quot;Start animation&quot;), this);
connect(pushButton, &amp;QPushButton::clicked, timeLine, &amp;QTimeLine::start);
...
</db:programlisting>
<db:para>By default the timeline runs once, from its beginning to its end, upon which you must call <db:link xlink:href="qtimeline.xml#start">start</db:link>() again to restart from the beginning. To make the timeline loop, you can call <db:link xlink:href="qtimeline.xml#loopCount-prop">setLoopCount</db:link>(), passing the number of times the timeline should run before finishing. The direction can also be changed, causing the timeline to run backward, by calling <db:link xlink:href="qtimeline.xml#direction-prop">setDirection</db:link>(). You can also pause and unpause the timeline while it's running by calling <db:link xlink:href="qtimeline.xml#setPaused">setPaused</db:link>(). For interactive control, the <db:link xlink:href="qtimeline.xml#currentTime-prop">setCurrentTime</db:link>() function is provided, which sets the time position of the time line directly. Although most useful in <db:link xlink:href="qtimeline.xml#State-enum">NotRunning</db:link> state (e.g., connected to a <db:link xlink:href="qtimeline.xml#valueChanged">valueChanged</db:link>() signal in a QSlider), this function can be called at any time.</db:para>
<db:para>The frame interface is useful for standard widgets, but <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> can be used to control any type of animation. The heart of <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> lies in the <db:link xlink:href="qtimeline.xml#valueForTime">valueForTime</db:link>() function, which generates a <db:emphasis>value</db:emphasis> between 0 and 1 for a given time. This value is typically used to describe the steps of an animation, where 0 is the first step of an animation, and 1 is the last step. When running, <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> generates values between 0 and 1 by calling <db:link xlink:href="qtimeline.xml#valueForTime">valueForTime</db:link>() and emitting <db:link xlink:href="qtimeline.xml#valueChanged">valueChanged</db:link>(). By default, <db:link xlink:href="qtimeline.xml#valueForTime">valueForTime</db:link>() applies an interpolation algorithm to generate these value. You can choose from a set of predefined timeline algorithms by calling <db:link xlink:href="qtimeline.xml#easingCurve-prop">setEasingCurve</db:link>().</db:para>
<db:para>Note that, by default, <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> uses <db:link xlink:href="qeasingcurve.xml#Type-enum">QEasingCurve::InOutSine</db:link>, which provides a value that grows slowly, then grows steadily, and finally grows slowly. For a custom timeline, you can reimplement <db:link xlink:href="qtimeline.xml#valueForTime">valueForTime</db:link>(), in which case <db:link xlink:href="qtimeline.xml">QTimeLine</db:link>'s <db:link xlink:href="qtimeline.xml#easingCurve-prop">easingCurve</db:link> property is ignored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QProgressBar</db:member>
<db:member>QProgressDialog</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Direction-enum">
<db:title>enum QTimeLine::Direction</db:title>
<db:para>This enum describes the direction of the timeline when in <db:link xlink:href="qtimeline.xml#State-enum">Running</db:link> state.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimeline.xml">QTimeLine</db:link></db:emphasis>::Forward</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The current time of the timeline increases with time (i.e., moves from 0 and towards the end / duration).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimeline.xml">QTimeLine</db:link></db:emphasis>::Backward</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The current time of the timeline decreases with time (i.e., moves from the end / duration and towards 0).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#direction-prop">setDirection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="State-enum">
<db:title>enum QTimeLine::State</db:title>
<db:para>This enum describes the state of the timeline.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimeline.xml">QTimeLine</db:link></db:emphasis>::NotRunning</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The timeline is not running. This is the initial state of <db:link xlink:href="qtimeline.xml">QTimeLine</db:link>, and the state <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> reenters when finished. The current time, frame and value remain unchanged until either <db:link xlink:href="qtimeline.xml#currentTime-prop">setCurrentTime</db:link>() is called, or the timeline is started by calling <db:link xlink:href="qtimeline.xml#start">start</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimeline.xml">QTimeLine</db:link></db:emphasis>::Paused</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The timeline is paused (i.e., temporarily suspended). Calling <db:link xlink:href="qtimeline.xml#setPaused">setPaused</db:link>(false) will resume timeline activity.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimeline.xml">QTimeLine</db:link></db:emphasis>::Running</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The timeline is running. While control is in the event loop, <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> will update its current time at regular intervals, emitting <db:link xlink:href="qtimeline.xml#valueChanged">valueChanged</db:link>() and <db:link xlink:href="qtimeline.xml#frameChanged">frameChanged</db:link>() when appropriate.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#stateChanged">stateChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="currentTime-prop">
<db:title>[bindable] currentTime : int</db:title>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the current time of the time line.</db:para>
<db:para>When <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> is in Running state, this value is updated continuously as a function of the duration and direction of the timeline. Otherwise, it is value that was current when <db:link xlink:href="qtimeline.xml#stop">stop</db:link>() was called last, or the value set by setCurrentTime().</db:para>
<db:note>
<db:para>You can bind other properties to currentTime, but it is not recommended setting bindings to it. As animation progresses, the currentTime is updated automatically, which cancels its bindings.</db:para>
</db:note>
<db:para>By default, this property contains a value of 0.</db:para>
</db:section>
<db:section xml:id="direction-prop">
<db:title>[bindable] direction : Direction</db:title>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the direction of the timeline when <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> is in <db:link xlink:href="qtimeline.xml#State-enum">Running</db:link> state.</db:para>
<db:para>This direction indicates whether the time moves from 0 towards the timeline duration, or from the value of the duration and towards 0 after <db:link xlink:href="qtimeline.xml#start">start</db:link>() has been called.</db:para>
<db:para>Any binding of direction will be removed not only by setDirection(), but also by <db:link xlink:href="qtimeline.xml#toggleDirection">toggleDirection</db:link>().</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qtimeline.xml#Direction-enum">Forward</db:link>.</db:para>
</db:section>
<db:section xml:id="duration-prop">
<db:title>[bindable] duration : int</db:title>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the total duration of the timeline in milliseconds.</db:para>
<db:para>By default, this value is 1000 (i.e., 1 second), but you can change this by either passing a duration to <db:link xlink:href="qtimeline.xml">QTimeLine</db:link>'s constructor, or by calling setDuration(). The duration must be larger than 0.</db:para>
<db:note>
<db:para>Changing the duration does not cause the current time to be reset to zero or the new duration. You also need to call <db:link xlink:href="qtimeline.xml#currentTime-prop">setCurrentTime</db:link>() with the desired value.</db:para>
</db:note>
</db:section>
<db:section xml:id="easingCurve-prop">
<db:title>[bindable] easingCurve : QEasingCurve</db:title>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>Specifies the easing curve that the timeline will use. If <db:link xlink:href="qtimeline.xml#valueForTime">valueForTime</db:link>() is reimplemented, this value is ignored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#valueForTime">valueForTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loopCount-prop">
<db:title>[bindable] loopCount : int</db:title>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the number of times the timeline should loop before it's finished.</db:para>
<db:para>A loop count of 0 means that the timeline will loop forever.</db:para>
<db:para>By default, this property contains a value of 1.</db:para>
</db:section>
<db:section xml:id="updateInterval-prop">
<db:title>[bindable] updateInterval : int</db:title>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the time in milliseconds between each time <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> updates its current time.</db:para>
<db:para>When updating the current time, <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> will emit <db:link xlink:href="qtimeline.xml#valueChanged">valueChanged</db:link>() if the current value changed, and <db:link xlink:href="qtimeline.xml#frameChanged">frameChanged</db:link>() if the frame changed.</db:para>
<db:para>By default, the interval is 40 ms, which corresponds to a rate of 25 updates per second.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTimeLine">
<db:title>[explicit] QTimeLine::QTimeLine(int <db:emphasis>duration</db:emphasis> = 1000, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a timeline with a duration of <db:code role="parameter">duration</db:code> milliseconds. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qobject.xml">QObject</db:link>'s constructor. The default duration is 1000 milliseconds.</db:para>
</db:section>
<db:section xml:id="dtor.QTimeLine">
<db:title>[virtual noexcept] QTimeLine::~QTimeLine()</db:title>
<db:para>Destroys the timeline.</db:para>
</db:section>
<db:section xml:id="currentFrame">
<db:title>int QTimeLine::currentFrame() const</db:title>
<db:para>Returns the frame corresponding to the current time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#currentTime-prop">currentTime</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#frameForTime">frameForTime</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#setFrameRange">setFrameRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentValue">
<db:title>qreal QTimeLine::currentValue() const</db:title>
<db:para>Returns the value corresponding to the current time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#valueForTime">valueForTime</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#currentFrame">currentFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endFrame">
<db:title>int QTimeLine::endFrame() const</db:title>
<db:para>Returns the end frame, which is the frame corresponding to the end of the timeline (i.e., the frame for which the current value is 1).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#setEndFrame">setEndFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#setFrameRange">setFrameRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="finished">
<db:title>void QTimeLine::finished()</db:title>
<db:para>This signal is emitted when <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> finishes (i.e., reaches the end of its time line), and does not loop.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
<db:section xml:id="frameChanged">
<db:title>void QTimeLine::frameChanged(int <db:emphasis>frame</db:emphasis>)</db:title>
<db:para><db:link xlink:href="qtimeline.xml">QTimeLine</db:link> emits this signal at regular intervals when in <db:link xlink:href="qtimeline.xml#State-enum">Running</db:link> state, but only if the current frame changes. <db:code role="parameter">frame</db:code> is the current frame number.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#setFrameRange">QTimeLine::setFrameRange</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#updateInterval-prop">QTimeLine::updateInterval</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frameForTime">
<db:title>int QTimeLine::frameForTime(int <db:emphasis>msec</db:emphasis>) const</db:title>
<db:para>Returns the frame corresponding to the time <db:code role="parameter">msec</db:code>. This value is calculated using a linear interpolation of the start and end frame, based on the value returned by <db:link xlink:href="qtimeline.xml#valueForTime">valueForTime</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#valueForTime">valueForTime</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#setFrameRange">setFrameRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resume">
<db:title>void QTimeLine::resume()</db:title>
<db:para>Resumes the timeline from the current time. <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> will reenter Running state, and once it enters the event loop, it will update its current time, frame and value at regular intervals.</db:para>
<db:para>In contrast to <db:link xlink:href="qtimeline.xml#start">start</db:link>(), this function does not restart the timeline before it resumes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#updateInterval-prop">updateInterval</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#frameChanged">frameChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#valueChanged">valueChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEndFrame">
<db:title>void QTimeLine::setEndFrame(int <db:emphasis>frame</db:emphasis>)</db:title>
<db:para>Sets the end frame, which is the frame corresponding to the end of the timeline (i.e., the frame for which the current value is 1), to <db:code role="parameter">frame</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#endFrame">endFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#startFrame">startFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#setFrameRange">setFrameRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFrameRange">
<db:title>void QTimeLine::setFrameRange(int <db:emphasis>startFrame</db:emphasis>, int <db:emphasis>endFrame</db:emphasis>)</db:title>
<db:para>Sets the timeline's frame counter to start at <db:code role="parameter">startFrame</db:code>, and end and <db:code role="parameter">endFrame</db:code>. For each time value, <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> will find the corresponding frame when you call <db:link xlink:href="qtimeline.xml#currentFrame">currentFrame</db:link>() or <db:link xlink:href="qtimeline.xml#frameForTime">frameForTime</db:link>() by interpolating, using the return value of <db:link xlink:href="qtimeline.xml#valueForTime">valueForTime</db:link>().</db:para>
<db:para>When in Running state, <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> also emits the <db:link xlink:href="qtimeline.xml#frameChanged">frameChanged</db:link>() signal when the frame changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#startFrame">startFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#endFrame">endFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#currentFrame">currentFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPaused">
<db:title>void QTimeLine::setPaused(bool <db:emphasis>paused</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">paused</db:code> is true, the timeline is paused, causing <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> to enter Paused state. No updates will be signaled until either <db:link xlink:href="qtimeline.xml#start">start</db:link>() or setPaused(false) is called. If <db:code role="parameter">paused</db:code> is false, the timeline is resumed and continues where it left.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#start">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStartFrame">
<db:title>void QTimeLine::setStartFrame(int <db:emphasis>frame</db:emphasis>)</db:title>
<db:para>Sets the start frame, which is the frame corresponding to the start of the timeline (i.e., the frame for which the current value is 0), to <db:code role="parameter">frame</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#startFrame">startFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#endFrame">endFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#setFrameRange">setFrameRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>void QTimeLine::start()</db:title>
<db:para>Starts the timeline. <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> will enter Running state, and once it enters the event loop, it will update its current time, frame and value at regular intervals. The default interval is 40 ms (i.e., 25 times per second). You can change the update interval by calling <db:link xlink:href="qtimeline.xml#updateInterval-prop">setUpdateInterval</db:link>().</db:para>
<db:para>The timeline will start from position 0, or the end if going backward. If you want to resume a stopped timeline without restarting, you can call <db:link xlink:href="qtimeline.xml#resume">resume</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#resume">resume</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#updateInterval-prop">updateInterval</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#frameChanged">frameChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#valueChanged">valueChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startFrame">
<db:title>int QTimeLine::startFrame() const</db:title>
<db:para>Returns the start frame, which is the frame corresponding to the start of the timeline (i.e., the frame for which the current value is 0).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#setStartFrame">setStartFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#setFrameRange">setFrameRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>QTimeLine::State QTimeLine::state() const</db:title>
<db:para>Returns the state of the timeline.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#setPaused">setPaused</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#stop">stop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QTimeLine::stateChanged(QTimeLine::State <db:emphasis>newState</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever <db:link xlink:href="qtimeline.xml">QTimeLine</db:link>'s state changes. The new state is <db:code role="parameter">newState</db:code>.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
<db:section xml:id="stop">
<db:title>void QTimeLine::stop()</db:title>
<db:para>Stops the timeline, causing <db:link xlink:href="qtimeline.xml">QTimeLine</db:link> to enter <db:link xlink:href="qtimeline.xml#State-enum">NotRunning</db:link> state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#start">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QTimeLine::timerEvent(QTimerEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="toggleDirection">
<db:title>void QTimeLine::toggleDirection()</db:title>
<db:para>Toggles the direction of the timeline. If the direction was Forward, it becomes Backward, and vice verca.</db:para>
<db:para>Existing bindings of <db:link xlink:href="qtimeline.xml#direction-prop">direction</db:link> are removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#direction-prop">setDirection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueChanged">
<db:title>void QTimeLine::valueChanged(qreal <db:emphasis>value</db:emphasis>)</db:title>
<db:para><db:link xlink:href="qtimeline.xml">QTimeLine</db:link> emits this signal at regular intervals when in <db:link xlink:href="qtimeline.xml#State-enum">Running</db:link> state, but only if the current value changes. <db:code role="parameter">value</db:code> is the current value. <db:code role="parameter">value</db:code> is a number between 0.0 and 1.0</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#duration-prop">QTimeLine::setDuration</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#valueForTime">QTimeLine::valueForTime</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml#updateInterval-prop">QTimeLine::updateInterval</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueForTime">
<db:title>[virtual] qreal QTimeLine::valueForTime(int <db:emphasis>msec</db:emphasis>) const</db:title>
<db:para>Returns the timeline value for the time <db:code role="parameter">msec</db:code>. The returned value, which varies depending on the curve shape, is always between 0 and 1. If <db:code role="parameter">msec</db:code> is 0, the default implementation always returns 0.</db:para>
<db:para>Reimplement this function to provide a custom curve shape for your timeline.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimeline.xml#easingCurve-prop">easingCurve</db:link></db:member>
<db:member><db:link xlink:href="qtimeline.xml#frameForTime">frameForTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
