<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMetaMethod Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link> class provides meta-data about a member function.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMetaMethod</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMetaMethod is part of <db:simplelist><db:member>objectmodel</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link> has a <db:link xlink:href="qmetamethod.xml#methodType">methodType</db:link>(), a <db:link xlink:href="qmetamethod.xml#methodSignature">methodSignature</db:link>(), a list of <db:link xlink:href="qmetamethod.xml#parameterTypes">parameterTypes</db:link>() and <db:link xlink:href="qmetamethod.xml#parameterNames">parameterNames</db:link>(), a return <db:link xlink:href="qmetamethod.xml#typeName">typeName</db:link>(), a <db:link xlink:href="qmetamethod.xml#tag">tag</db:link>(), and an <db:link xlink:href="qmetamethod.xml#access">access</db:link>() specifier. You can use <db:link xlink:href="qmetamethod.xml#invoke">invoke</db:link>() to invoke the method on an arbitrary <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml">QMetaObject</db:link></db:member>
<db:member><db:link xlink:href="qmetaenum.xml">QMetaEnum</db:link></db:member>
<db:member><db:link xlink:href="qmetaproperty.xml">QMetaProperty</db:link></db:member>
<db:member><db:link xlink:href="properties.xml">Qt's Property System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Access-enum">
<db:title>enum QMetaMethod::Access</db:title>
<db:para>This enum describes the access level of a method, following the conventions used in C++.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link></db:emphasis>::Private</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link></db:emphasis>::Protected</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link></db:emphasis>::Public</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="MethodType-enum">
<db:title>enum QMetaMethod::MethodType</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link></db:emphasis>::Method</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The function is a plain member function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link></db:emphasis>::Signal</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The function is a signal.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link></db:emphasis>::Slot</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The function is a slot.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link></db:emphasis>::Constructor</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The function is a constructor.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="access">
<db:title>QMetaMethod::Access QMetaMethod::access() const</db:title>
<db:para>Returns the access specification of this method (private, protected, or public).</db:para>
<db:note>
<db:para>Signals are always public, but you should regard that as an implementation detail. It is almost always a bad idea to emit a signal from outside its class.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetamethod.xml#methodType">methodType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromSignal">
<db:title>[static, since 5.0] QMetaMethod QMetaMethod::fromSignal(int <db:emphasis>signal</db:emphasis>)</db:title>
<db:para>Returns the meta-method that corresponds to the given <db:code role="parameter">signal</db:code>, or an invalid <db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link> if <db:code role="parameter">signal</db:code> is not a signal of the class.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QMetaMethod destroyedSignal = QMetaMethod::fromSignal(&amp;QObject::destroyed);
</db:programlisting>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="invoke">
<db:title>bool QMetaMethod::invoke(QObject *<db:emphasis>object</db:emphasis>, Qt::ConnectionType <db:emphasis>connectionType</db:emphasis>, QGenericReturnArgument <db:emphasis>returnValue</db:emphasis>, QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(Q_NULLPTR), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument()) const</db:title>
<db:para>Invokes this method on the object <db:code role="parameter">object</db:code>. Returns true if the member could be invoked. Returns false if there is no such member or the parameters did not match.</db:para>
<db:para>The invocation can be either synchronous or asynchronous, depending on the <db:code role="parameter">connectionType</db:code>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If <db:code role="parameter">connectionType</db:code> is <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::DirectConnection</db:link>, the member will be invoked immediately.</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:code role="parameter">connectionType</db:code> is <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::QueuedConnection</db:link>, a <db:link xlink:href="qevent.xml">QEvent</db:link> will be posted and the member is invoked as soon as the application enters the main event loop.</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:code role="parameter">connectionType</db:code> is <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::AutoConnection</db:link>, the member is invoked synchronously if <db:code role="parameter">object</db:code> lives in the same thread as the caller; otherwise it will invoke the member asynchronously.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The return value of this method call is placed in <db:code role="parameter">returnValue</db:code>. If the invocation is asynchronous, the return value cannot be evaluated. You can pass up to ten arguments (<db:code role="parameter">val0</db:code>, <db:code role="parameter">val1</db:code>, <db:code role="parameter">val2</db:code>, <db:code role="parameter">val3</db:code>, <db:code role="parameter">val4</db:code>, <db:code role="parameter">val5</db:code>, <db:code role="parameter">val6</db:code>, <db:code role="parameter">val7</db:code>, <db:code role="parameter">val8</db:code>, and <db:code role="parameter">val9</db:code>) to this method call.</db:para>
<db:para><db:link xlink:href="qgenericargument.xml">QGenericArgument</db:link> and <db:link xlink:href="qgenericreturnargument.xml">QGenericReturnArgument</db:link> are internal helper classes. Because signals and slots can be dynamically invoked, you must enclose the arguments using the <db:link xlink:href="qmetaobject.xml#Q_ARG">Q_ARG</db:link>() and <db:link xlink:href="qmetaobject.xml#Q_RETURN_ARG">Q_RETURN_ARG</db:link>() macros. <db:link xlink:href="qmetaobject.xml#Q_ARG">Q_ARG</db:link>() takes a type name and a const reference of that type; <db:link xlink:href="qmetaobject.xml#Q_RETURN_ARG">Q_RETURN_ARG</db:link>() takes a type name and a non-const reference.</db:para>
<db:para>To asynchronously invoke the <db:link xlink:href="qabstractbutton.xml#animateClick">animateClick</db:link>() slot on a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>:</db:para>
<db:programlisting language="cpp">int methodIndex = pushButton-&gt;metaObject()-&gt;indexOfMethod(&quot;animateClick()&quot;);
QMetaMethod method = metaObject-&gt;method(methodIndex);
method.invoke(pushButton, Qt::QueuedConnection);
</db:programlisting>
<db:para>With asynchronous method invocations, the parameters must be of types that are known to Qt's meta-object system, because Qt needs to copy the arguments to store them in an event behind the scenes. If you try to use a queued connection and get the error message</db:para>
<db:programlisting language="cpp">QMetaMethod::invoke: Unable to handle unregistered datatype 'MyType'
</db:programlisting>
<db:para>call qRegisterMetaType() to register the data type before you call QMetaMethod::invoke().</db:para>
<db:para>To synchronously invoke the compute(QString, int, double) slot on some arbitrary object obj retrieve its return value:</db:para>
<db:programlisting language="cpp">QString retVal;
QByteArray normalizedSignature = QMetaObject::normalizedSignature(&quot;compute(QString, int, double)&quot;);
int methodIndex = obj-&gt;metaObject()-&gt;indexOfMethod(normalizedSignature);
QMetaMethod method = obj-&gt;metaObject()-&gt;method(methodIndex);
method.invoke(obj,
              Qt::DirectConnection,
              Q_RETURN_ARG(QString, retVal),
              Q_ARG(QString, &quot;sqrt&quot;),
              Q_ARG(int, 42),
              Q_ARG(double, 9.7));
</db:programlisting>
<db:para><db:link xlink:href="qmetaobject.xml#normalizedSignature">QMetaObject::normalizedSignature</db:link>() is used here to ensure that the format of the signature is what invoke() expects. E.g. extra whitespace is removed.</db:para>
<db:para>If the &quot;compute&quot; slot does not take exactly one <db:link xlink:href="qstring.xml">QString</db:link>, one int and one double in the specified order, the call will fail.</db:para>
<db:warning>
<db:para>this method will not test the validity of the arguments: <db:code role="parameter">object</db:code> must be an instance of the class of the <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> of which this <db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link> has been constructed with. The arguments must have the same type as the ones expected by the method, else, the behaviour is undefined.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#Q_ARG">Q_ARG</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#Q_RETURN_ARG">Q_RETURN_ARG</db:link>()</db:member>
<db:member><db:link xlink:href="">qRegisterMetaType()</db:link></db:member>
<db:member><db:link xlink:href="qmetaobject.xml#invokeMethod">QMetaObject::invokeMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invoke-1">
<db:title>bool QMetaMethod::invoke(QObject *<db:emphasis>object</db:emphasis>, QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(0), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument()) const</db:title>
<db:para>This function overloads <db:link xlink:href="qmetamethod.xml#invoke">invoke</db:link>().</db:para>
<db:para>This overload invokes this method using the connection type <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::AutoConnection</db:link> and ignores return values.</db:para>
</db:section>
<db:section xml:id="invoke-2">
<db:title>bool QMetaMethod::invoke(QObject *<db:emphasis>object</db:emphasis>, QGenericReturnArgument <db:emphasis>returnValue</db:emphasis>, QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(0), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument()) const</db:title>
<db:para>This function overloads <db:link xlink:href="qmetamethod.xml#invoke">invoke</db:link>().</db:para>
<db:para>This overload always invokes this method using the connection type <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::AutoConnection</db:link>.</db:para>
</db:section>
<db:section xml:id="invoke-3">
<db:title>bool QMetaMethod::invoke(QObject *<db:emphasis>object</db:emphasis>, Qt::ConnectionType <db:emphasis>connectionType</db:emphasis>, QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(0), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument()) const</db:title>
<db:para>This function overloads <db:link xlink:href="qmetamethod.xml#invoke">invoke</db:link>().</db:para>
<db:para>This overload can be used if the return value of the member is of no interest.</db:para>
</db:section>
<db:section xml:id="invokeOnGadget">
<db:title>[since 5.5] bool QMetaMethod::invokeOnGadget(void *<db:emphasis>gadget</db:emphasis>, QGenericReturnArgument <db:emphasis>returnValue</db:emphasis>, QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(Q_NULLPTR), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument()) const</db:title>
<db:para>Invokes this method on a <db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link>. Returns true if the member could be invoked. Returns false if there is no such member or the parameters did not match.</db:para>
<db:para>The pointer <db:code role="parameter">gadget</db:code> must point to an instance of the gadget class.</db:para>
<db:para>The invocation is always synchronous.</db:para>
<db:para>The return value of this method call is placed in <db:code role="parameter">returnValue</db:code>. You can pass up to ten arguments (<db:code role="parameter">val0</db:code>, <db:code role="parameter">val1</db:code>, <db:code role="parameter">val2</db:code>, <db:code role="parameter">val3</db:code>, <db:code role="parameter">val4</db:code>, <db:code role="parameter">val5</db:code>, <db:code role="parameter">val6</db:code>, <db:code role="parameter">val7</db:code>, <db:code role="parameter">val8</db:code>, and <db:code role="parameter">val9</db:code>) to this method call.</db:para>
<db:warning>
<db:para>this method will not test the validity of the arguments: <db:code role="parameter">gadget</db:code> must be an instance of the class of the <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> of which this <db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link> has been constructed with. The arguments must have the same type as the ones expected by the method, else, the behavior is undefined.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml#Q_ARG">Q_ARG</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaobject.xml#Q_RETURN_ARG">Q_RETURN_ARG</db:link>()</db:member>
<db:member><db:link xlink:href="">qRegisterMetaType()</db:link></db:member>
<db:member><db:link xlink:href="qmetaobject.xml#invokeMethod">QMetaObject::invokeMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invokeOnGadget-1">
<db:title>[since 5.5] bool QMetaMethod::invokeOnGadget(void *<db:emphasis>gadget</db:emphasis>, QGenericArgument <db:emphasis>val0</db:emphasis> = QGenericArgument(0), QGenericArgument <db:emphasis>val1</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val2</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val3</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val4</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val5</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val6</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val7</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val8</db:emphasis> = QGenericArgument(), QGenericArgument <db:emphasis>val9</db:emphasis> = QGenericArgument()) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This overload invokes this method for a <db:code role="parameter">gadget</db:code> and ignores return values.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>[since 5.0] bool QMetaMethod::isValid() const</db:title>
<db:para>Returns true if this method is valid (can be introspected and invoked), otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="methodIndex">
<db:title>[since 4.6] int QMetaMethod::methodIndex() const</db:title>
<db:para>Returns this method's index.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="methodSignature">
<db:title>[since 5.0] QByteArray QMetaMethod::methodSignature() const</db:title>
<db:para>Returns the signature of this method (e.g., setValue(double)).</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetamethod.xml#parameterTypes">parameterTypes</db:link>()</db:member>
<db:member><db:link xlink:href="qmetamethod.xml#parameterNames">parameterNames</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="methodType">
<db:title>QMetaMethod::MethodType QMetaMethod::methodType() const</db:title>
<db:para>Returns the type of this method (signal, slot, or method).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetamethod.xml#access">access</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>[since 5.0] QByteArray QMetaMethod::name() const</db:title>
<db:para>Returns the name of this method.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetamethod.xml#methodSignature">methodSignature</db:link>()</db:member>
<db:member><db:link xlink:href="qmetamethod.xml#parameterCount">parameterCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parameterCount">
<db:title>[since 5.0] int QMetaMethod::parameterCount() const</db:title>
<db:para>Returns the number of parameters of this method.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetamethod.xml#parameterType">parameterType</db:link>()</db:member>
<db:member><db:link xlink:href="qmetamethod.xml#parameterNames">parameterNames</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parameterNames">
<db:title>QList&lt;QByteArray&gt; QMetaMethod::parameterNames() const</db:title>
<db:para>Returns a list of parameter names.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetamethod.xml#parameterTypes">parameterTypes</db:link>()</db:member>
<db:member><db:link xlink:href="qmetamethod.xml#methodSignature">methodSignature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parameterType">
<db:title>[since 5.0] int QMetaMethod::parameterType(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the type of the parameter at the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>The return value is one of the types that are registered with <db:link xlink:href="qmetatype.xml">QMetaType</db:link>, or <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::UnknownType</db:link> if the type is not registered.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetamethod.xml#parameterCount">parameterCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetamethod.xml#returnType">returnType</db:link>()</db:member>
<db:member><db:link xlink:href="qmetatype.xml">QMetaType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parameterTypes">
<db:title>QList&lt;QByteArray&gt; QMetaMethod::parameterTypes() const</db:title>
<db:para>Returns a list of parameter types.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetamethod.xml#parameterNames">parameterNames</db:link>()</db:member>
<db:member><db:link xlink:href="qmetamethod.xml#methodSignature">methodSignature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="returnType">
<db:title>[since 5.0] int QMetaMethod::returnType() const</db:title>
<db:para>Returns the return type of this method.</db:para>
<db:para>The return value is one of the types that are registered with <db:link xlink:href="qmetatype.xml">QMetaType</db:link>, or <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::UnknownType</db:link> if the type is not registered.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetamethod.xml#parameterType">parameterType</db:link>()</db:member>
<db:member><db:link xlink:href="qmetatype.xml">QMetaType</db:link></db:member>
<db:member><db:link xlink:href="qmetamethod.xml#typeName">typeName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="revision">
<db:title>[since 5.1] int QMetaMethod::revision() const</db:title>
<db:para>Returns the method revision if one was specified by <db:link xlink:href="qobject.xml#Q_REVISION">Q_REVISION</db:link>, otherwise returns 0.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="tag">
<db:title>const char *QMetaMethod::tag() const</db:title>
<db:para>Returns the tag associated with this method.</db:para>
<db:para>Tags are special macros recognized by moc that make it possible to add extra information about a method.</db:para>
<db:para>Tag information can be added in the following way in the function declaration:</db:para>
<db:programlisting language="cpp">// In the class MainWindow declaration
#ifndef Q_MOC_RUN
// define the tag text as empty, so the compiler doesn't see it
#  define MY_CUSTOM_TAG
#endif
...
private slots:
    MY_CUSTOM_TAG void testFunc();
</db:programlisting>
<db:para>and the information can be accessed by using:</db:para>
<db:programlisting language="cpp">MainWindow win;
win.show();

int functionIndex = win.metaObject()-&gt;indexOfSlot(&quot;testFunc()&quot;);
QMetaMethod mm = win.metaObject()-&gt;method(functionIndex);
qDebug() &lt;&lt; mm.tag(); // prints MY_CUSTOM_TAG
</db:programlisting>
<db:para>For the moment, moc will extract and record all tags, but it will not handle any of them specially. You can use the tags to annotate your methods differently, and treat them according to the specific needs of your application.</db:para>
<db:note>
<db:para>Since Qt 5.0, moc expands preprocessor macros, so it is necessary to surround the definition with #ifndef Q_MOC_RUN, as shown in the example above. This was not required in Qt 4. The code as shown above works with Qt 4 too.</db:para>
</db:note>
</db:section>
<db:section xml:id="typeName">
<db:title>const char *QMetaMethod::typeName() const</db:title>
<db:para>Returns the return type name of this method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetamethod.xml#returnType">returnType</db:link>()</db:member>
<db:member><db:link xlink:href="qmetatype.xml#type">QMetaType::type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq-1">
<db:title>[since 5.0] bool operator!=(const QMetaMethod &amp;<db:emphasis>m1</db:emphasis>, const QMetaMethod &amp;<db:emphasis>m2</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if method <db:code role="parameter">m1</db:code> is not equal to method <db:code role="parameter">m2</db:code>, otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>[since 5.0] bool operator==(const QMetaMethod &amp;<db:emphasis>m1</db:emphasis>, const QMetaMethod &amp;<db:emphasis>m2</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns true if method <db:code role="parameter">m1</db:code> is equal to method <db:code role="parameter">m2</db:code>, otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_METAMETHOD_INVOKE_MAX_ARGS">
<db:title>Q_METAMETHOD_INVOKE_MAX_ARGS</db:title>
<db:para>Equals maximum number of arguments available for execution of the method via <db:link xlink:href="qmetamethod.xml#invoke">QMetaMethod::invoke</db:link>()</db:para>
</db:section>
</db:section>
</db:article>
