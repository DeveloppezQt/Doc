<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QChart Class</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qchart.xml">QChart</db:link> class manages the graphical representation of the chart's series, legends, and axes.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QChart</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicswidget.xml" xlink:role="class">QGraphicsWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpolarchart.xml" xlink:role="class">QPolarChart</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qchart.xml">QChart</db:link> is a <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> that you can show in a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>. It manages the graphical representation of different types of series and other chart related objects like legend and axes. To simply show a chart in a layout, the convenience class <db:link xlink:href="qchartview.xml">QChartView</db:link> can be used instead of <db:link xlink:href="qchart.xml">QChart</db:link>. In addition, line, spline, area, and scatter series can be presented as polar charts by using the <db:link xlink:href="qpolarchart.xml">QPolarChart</db:link> class.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchartview.xml">QChartView</db:link></db:member>
<db:member><db:link xlink:href="qpolarchart.xml">QPolarChart</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AnimationOption-enum">
<db:title>enum QChart::AnimationOption</db:title>
<db:bridgehead renderas="sect2">flags QChart::AnimationOptions</db:bridgehead>
<db:enumsynopsis>
<db:enumname>AnimationOption</db:enumname>
<db:enumitem>
<db:enumidentifier>NoAnimation</db:enumidentifier>
<db:enumvalue>0x0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>GridAxisAnimations</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SeriesAnimations</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AllAnimations</db:enumidentifier>
<db:enumvalue>0x3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QChart::AnimationOptions</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes the animations enabled in the chart.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::NoAnimation</db:code></db:para>
</db:td>
<db:td><db:code>0x0</db:code></db:td>
<db:td>
<db:para>Animation is disabled in the chart. This is the default value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::GridAxisAnimations</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Grid axis animation is enabled in the chart.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::SeriesAnimations</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>Series animation is enabled in the chart.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::AllAnimations</db:code></db:para>
</db:td>
<db:td><db:code>0x3</db:code></db:td>
<db:td>
<db:para>All animation types are enabled in the chart.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>AnimationOptions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;AnimationOption&gt;. </db:code>It stores an OR combination of <db:code>AnimationOption</db:code> values.</db:para>
</db:section>
<db:section xml:id="ChartTheme-enum">
<db:title>enum QChart::ChartTheme</db:title>
<db:enumsynopsis>
<db:enumname>ChartTheme</db:enumname>
<db:enumitem>
<db:enumidentifier>ChartThemeLight</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChartThemeBlueCerulean</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChartThemeDark</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChartThemeBrownSand</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChartThemeBlueNcs</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChartThemeHighContrast</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChartThemeBlueIcy</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChartThemeQt</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the theme used by the chart.</db:para>
<db:para>A theme is a built-in collection of UI style related settings applied to all the visual elements of a chart, such as colors, pens, brushes, and fonts of series, as well as axes, title, and legend. The <db:link xlink:href="qtcharts-chartsgallery-example.xml">Charts with Widgets Gallery</db:link> illustrates how to use themes.</db:para>
<db:note>
<db:para>Changing the theme will overwrite all customizations previously applied to the series.</db:para>
</db:note>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::ChartThemeLight</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The light theme, which is the default theme.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::ChartThemeBlueCerulean</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The cerulean blue theme.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::ChartThemeDark</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The dark theme.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::ChartThemeBrownSand</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The sand brown theme.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::ChartThemeBlueNcs</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The natural color system (NCS) blue theme.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::ChartThemeHighContrast</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The high contrast theme.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::ChartThemeBlueIcy</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The icy blue theme.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::ChartThemeQt</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The Qt theme.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ChartType-enum">
<db:title>enum QChart::ChartType</db:title>
<db:enumsynopsis>
<db:enumname>ChartType</db:enumname>
<db:enumitem>
<db:enumidentifier>ChartTypeUndefined</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChartTypeCartesian</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ChartTypePolar</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the chart type.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::ChartTypeUndefined</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The chart type is not defined.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::ChartTypeCartesian</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A cartesian chart.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchart.xml">QChart</db:link></db:emphasis>::ChartTypePolar</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A polar chart.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="animationDuration-prop">
<db:title>animationDuration : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>animationDuration</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">animationDuration</db:synopsisinfo>
<db:synopsisinfo role="setter">setAnimationDuration</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the duration of the animation for the chart.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">animationDuration</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAnimationDuration</db:emphasis>(<db:type>int</db:type> <db:emphasis>msecs</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="animationEasingCurve-prop">
<db:title>animationEasingCurve : QEasingCurve</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QEasingCurve</db:type>
<db:varname>animationEasingCurve</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">animationEasingCurve</db:synopsisinfo>
<db:synopsisinfo role="setter">setAnimationEasingCurve</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the easing curve of the animation for the chart.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:type> <db:emphasis role="bold">animationEasingCurve</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAnimationEasingCurve</db:emphasis>(const <db:type><db:link xlink:href="qeasingcurve.xml">QEasingCurve</db:link></db:type> &amp;<db:emphasis>curve</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="animationOptions-prop">
<db:title>animationOptions : QChart::AnimationOptions</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QChart::AnimationOptions</db:type>
<db:varname>animationOptions</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">animationOptions</db:synopsisinfo>
<db:synopsisinfo role="setter">setAnimationOptions</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the animation options for the chart.</db:para>
<db:para>Animations are enabled or disabled based on this setting.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qchart.xml#AnimationOption-enum">QChart::AnimationOptions</db:link></db:type> <db:emphasis role="bold">animationOptions</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAnimationOptions</db:emphasis>(<db:type><db:link xlink:href="qchart.xml#AnimationOption-enum">QChart::AnimationOptions</db:link></db:type> <db:emphasis>options</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="backgroundRoundness-prop">
<db:title>backgroundRoundness : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>backgroundRoundness</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">backgroundRoundness</db:synopsisinfo>
<db:synopsisinfo role="setter">setBackgroundRoundness</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the diameter of the rounding circle at the corners of the chart background.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">backgroundRoundness</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBackgroundRoundness</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>diameter</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="backgroundVisible-prop">
<db:title>backgroundVisible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>backgroundVisible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isBackgroundVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setBackgroundVisible</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the chart background is visible.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isBackgroundVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBackgroundVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#setBackgroundBrush">setBackgroundBrush</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#setBackgroundPen">setBackgroundPen</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#plotAreaBackgroundVisible-prop">plotAreaBackgroundVisible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chartType-prop">
<db:title>[read-only] chartType : const QChart::ChartType</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QChart::ChartType</db:type>
<db:varname>chartType</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">chartType</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the chart is a cartesian chart or a polar chart.</db:para>
<db:para>This property is set internally and it is read only.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qchart.xml#ChartType-enum">QChart::ChartType</db:link></db:type> <db:emphasis role="bold">chartType</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpolarchart.xml">QPolarChart</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropShadowEnabled-prop">
<db:title>dropShadowEnabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>dropShadowEnabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isDropShadowEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setDropShadowEnabled</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the background drop shadow effect is enabled.</db:para>
<db:para>If set to <db:code>true</db:code>, the background drop shadow effect is enabled. If set to <db:code>false</db:code>, it is disabled.</db:para>
<db:note>
<db:para>The drop shadow effect depends on the theme, and therefore the setting may change if the theme is changed.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isDropShadowEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDropShadowEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="locale-prop">
<db:title>locale : QLocale</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QLocale</db:type>
<db:varname>locale</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">locale</db:synopsisinfo>
<db:synopsisinfo role="setter">setLocale</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the locale used to format various chart labels.</db:para>
<db:para>Labels are localized only when <db:link xlink:href="qchart.xml#localizeNumbers-prop">localizeNumbers</db:link> is <db:code>true</db:code>, except for <db:link xlink:href="qdatetimeaxis.xml">QDateTimeAxis</db:link> labels, which always use the <db:link xlink:href="qlocale.xml">QLocale</db:link> set with this property.</db:para>
<db:para>Defaults to the application default locale at the time when the chart is constructed.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlocale.xml">QLocale</db:link></db:type> <db:emphasis role="bold">locale</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLocale</db:emphasis>(const <db:type><db:link xlink:href="qlocale.xml">QLocale</db:link></db:type> &amp;<db:emphasis>locale</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#localizeNumbers-prop">localizeNumbers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localizeNumbers-prop">
<db:title>localizeNumbers : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>localizeNumbers</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">localizeNumbers</db:synopsisinfo>
<db:synopsisinfo role="setter">setLocalizeNumbers</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether numbers are localized.</db:para>
<db:para>When <db:code>true</db:code>, all generated numbers appearing in various series and axis labels will be localized using the <db:link xlink:href="qlocale.xml">QLocale</db:link> set with the <db:link xlink:href="qchart.xml#locale-prop">locale</db:link> property. When <db:code>false</db:code>, the <db:emphasis>C</db:emphasis> locale is always used. Defaults to <db:code>false</db:code>.</db:para>
<db:note>
<db:para>This property does not affect <db:link xlink:href="qdatetimeaxis.xml">QDateTimeAxis</db:link> labels, which always use the <db:link xlink:href="qlocale.xml">QLocale</db:link> set with the locale property.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">localizeNumbers</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLocalizeNumbers</db:emphasis>(<db:type>bool</db:type> <db:emphasis>localize</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#locale-prop">locale</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="margins-prop">
<db:title>margins : QMargins</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMargins</db:type>
<db:varname>margins</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">margins</db:synopsisinfo>
<db:synopsisinfo role="setter">setMargins</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum margins allowed between the edge of the chart rectangle and the plot area.</db:para>
<db:para>The margins are used for drawing the title, axes, and legend.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmargins.xml">QMargins</db:link></db:type> <db:emphasis role="bold">margins</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMargins</db:emphasis>(const <db:type><db:link xlink:href="qmargins.xml">QMargins</db:link></db:type> &amp;<db:emphasis>margins</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="plotArea-prop">
<db:title>plotArea : QRectF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRectF</db:type>
<db:varname>plotArea</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">plotArea</db:synopsisinfo>
<db:synopsisinfo role="setter">setPlotArea</db:synopsisinfo>
<db:synopsisinfo role="notifier">plotAreaChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the rectangle within which the chart is drawn.</db:para>
<db:para>The plot area does not include the area defined by margins. By default this will resize if inside a <db:link xlink:href="qchartview.xml">QChartView</db:link>. If an explicit size is set for the plot area then it will respect this, to revert back to the default behavior, then calling <db:code>setPlotArea(QRectF());</db:code> will achieve this.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> <db:emphasis role="bold">plotArea</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPlotArea</db:emphasis>(const <db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> &amp;<db:emphasis>rect</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">plotAreaChanged</db:emphasis>(const <db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> &amp;<db:emphasis>plotArea</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="plotAreaBackgroundVisible-prop">
<db:title>plotAreaBackgroundVisible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>plotAreaBackgroundVisible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isPlotAreaBackgroundVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setPlotAreaBackgroundVisible</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the chart plot area background is visible.</db:para>
<db:note>
<db:para>By default, the plot area background is invisible and the plot area uses the general chart background.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isPlotAreaBackgroundVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPlotAreaBackgroundVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#setPlotAreaBackgroundBrush">setPlotAreaBackgroundBrush</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#setPlotAreaBackgroundPen">setPlotAreaBackgroundPen</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#backgroundVisible-prop">backgroundVisible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="theme-prop">
<db:title>theme : QChart::ChartTheme</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QChart::ChartTheme</db:type>
<db:varname>theme</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">theme</db:synopsisinfo>
<db:synopsisinfo role="setter">setTheme</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the theme used for the chart.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qchart.xml#ChartTheme-enum">QChart::ChartTheme</db:link></db:type> <db:emphasis role="bold">theme</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTheme</db:emphasis>(<db:type><db:link xlink:href="qchart.xml#ChartTheme-enum">QChart::ChartTheme</db:link></db:type> <db:emphasis>theme</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="title-prop">
<db:title>title : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>title</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">title</db:synopsisinfo>
<db:synopsisinfo role="setter">setTitle</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the title of the chart.</db:para>
<db:para>The title is shown as a headline on top of the chart. Chart titles support HTML formatting.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">title</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTitle</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>title</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QChart">
<db:title>[explicit] QChart::QChart(QGraphicsItem *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>wFlags</db:emphasis> = Qt::WindowFlags())</db:title>
<db:constructorsynopsis>
<db:methodname>QChart</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WindowFlags</db:type>
<db:parameter>wFlags</db:parameter>
<db:initializer>Qt::WindowFlags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QChart(QGraphicsItem *parent, Qt::WindowFlags wFlags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a chart object that is a child of <db:code role="parameter">parent</db:code>. The properties specified by <db:code role="parameter">wFlags</db:code> are passed to the <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QChart">
<db:title>[virtual] QChart::~QChart()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QChart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QChart()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Deletes the chart object and its children, such as the series and axis objects added to it.</db:para>
</db:section>
<db:section xml:id="addAxis">
<db:title>void QChart::addAxis(QAbstractAxis *<db:emphasis>axis</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addAxis</db:methodname>
<db:methodparam>
<db:type>QAbstractAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addAxis(QAbstractAxis *axis, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the axis <db:code role="parameter">axis</db:code> to the chart aligned as specified by <db:code role="parameter">alignment</db:code>. The chart takes the ownership of the axis.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#removeAxis">removeAxis</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#createDefaultAxes">createDefaultAxes</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractseries.xml#attachAxis">QAbstractSeries::attachAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSeries">
<db:title>void QChart::addSeries(QAbstractSeries *<db:emphasis>series</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addSeries</db:methodname>
<db:methodparam>
<db:type>QAbstractSeries *</db:type>
<db:parameter>series</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addSeries(QAbstractSeries *series)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the series <db:code role="parameter">series</db:code> to the chart and takes ownership of it.</db:para>
<db:note>
<db:para>A newly added series is not attached to any axes by default, not even those that might have been created for the chart using <db:link xlink:href="qchart.xml#createDefaultAxes">createDefaultAxes</db:link>() before the series was added to the chart. If no axes are attached to the newly added series before the chart is shown, the series will get drawn as if it had axes with ranges that exactly fit the series to the plot area of the chart. This can be confusing if the same chart also displays other series that have properly attached axes, so always make sure you either call <db:link xlink:href="qchart.xml#createDefaultAxes">createDefaultAxes</db:link>() after a series has been added or explicitly attach axes for the series.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#removeSeries">removeSeries</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#removeAllSeries">removeAllSeries</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#createDefaultAxes">createDefaultAxes</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractseries.xml#attachAxis">QAbstractSeries::attachAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="axes">
<db:title>QList&lt;QAbstractAxis *&gt; QChart::axes(Qt::Orientations <db:emphasis>orientation</db:emphasis> = Qt::Horizontal|Qt::Vertical, QAbstractSeries *<db:emphasis>series</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QAbstractAxis *&gt;</db:type>
<db:methodname>axes</db:methodname>
<db:methodparam>
<db:type>Qt::Orientations</db:type>
<db:parameter>orientation</db:parameter>
<db:initializer>Qt::Horizontal|Qt::Vertical</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractSeries *</db:type>
<db:parameter>series</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QAbstractAxis *&gt; axes(Qt::Orientations orientation, QAbstractSeries *series) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the axes attached to the series <db:code role="parameter">series</db:code> with the orientation specified by <db:code role="parameter">orientation</db:code>. If no series is specified, all axes added to the chart with the specified orientation are returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#createDefaultAxes">createDefaultAxes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="backgroundBrush">
<db:title>QBrush QChart::backgroundBrush() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>backgroundBrush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush backgroundBrush() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Gets the brush that is used for painting the background of the chart area.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#setBackgroundBrush">setBackgroundBrush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="backgroundPen">
<db:title>QPen QChart::backgroundPen() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPen</db:type>
<db:methodname>backgroundPen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen backgroundPen() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Gets the pen that is used for painting the background of the chart area.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#setBackgroundPen">setBackgroundPen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createDefaultAxes">
<db:title>void QChart::createDefaultAxes()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>createDefaultAxes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void createDefaultAxes()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates axes for the chart based on the series that have already been added to the chart. Any axes previously added to the chart will be deleted.</db:para>
<db:note>
<db:para>This function has to be called after all series have been added to the chart. The axes created by this function will NOT get automatically attached to any series added to the chart after this function has been called. A series with no axes attached will by default scale to utilize the entire plot area of the chart, which can be confusing if there are other series with properly attached axes also present.</db:para>
</db:note>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Series type</db:para>
</db:th>
<db:th>
<db:para>Horizontal axis (X)</db:para>
</db:th>
<db:th>
<db:para>Vertical axis (Y)</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qxyseries.xml">QXYSeries</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qvalueaxis.xml">QValueAxis</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qvalueaxis.xml">QValueAxis</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qbarseries.xml">QBarSeries</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qvalueaxis.xml">QValueAxis</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpieseries.xml">QPieSeries</db:link></db:para>
</db:td>
<db:td>
<db:para>None</db:para>
</db:td>
<db:td>
<db:para>None</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If there are several <db:link xlink:href="qxyseries.xml">QXYSeries</db:link> derived series added to the chart and no series of other types have been added, then only one pair of axes is created. If there are several series of different types added to the chart, then each series gets its own axes pair.</db:para>
<db:para>The axes specific to the series can be later obtained from the chart by providing the series as the parameter for the <db:link xlink:href="qchart.xml#axes">axes</db:link>() function call. <db:link xlink:href="qpieseries.xml">QPieSeries</db:link> does not create any axes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#axes">axes</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractseries.xml#attachAxis">QAbstractSeries::attachAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isZoomed">
<db:title>bool QChart::isZoomed()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>isZoomed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isZoomed()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if any series has a zoomed domain.</db:para>
</db:section>
<db:section xml:id="legend">
<db:title>QLegend *QChart::legend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLegend *</db:type>
<db:methodname>legend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLegend * legend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the legend object of the chart. Ownership stays with the chart.</db:para>
</db:section>
<db:section xml:id="mapToPosition">
<db:title>QPointF QChart::mapToPosition(const QPointF &amp;<db:emphasis>value</db:emphasis>, QAbstractSeries *<db:emphasis>series</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:type>QPointF</db:type>
<db:methodname>mapToPosition</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractSeries *</db:type>
<db:parameter>series</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapToPosition(const QPointF &amp;value, QAbstractSeries *series)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position on the chart that corresponds to the value <db:code role="parameter">value</db:code> in the series specified by <db:code role="parameter">series</db:code>.</db:para>
</db:section>
<db:section xml:id="mapToValue">
<db:title>QPointF QChart::mapToValue(const QPointF &amp;<db:emphasis>position</db:emphasis>, QAbstractSeries *<db:emphasis>series</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:type>QPointF</db:type>
<db:methodname>mapToValue</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractSeries *</db:type>
<db:parameter>series</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF mapToValue(const QPointF &amp;position, QAbstractSeries *series)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value in the series specified by <db:code role="parameter">series</db:code> at the position specified by <db:code role="parameter">position</db:code> in a chart.</db:para>
</db:section>
<db:section xml:id="plotAreaBackgroundBrush">
<db:title>QBrush QChart::plotAreaBackgroundBrush() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>plotAreaBackgroundBrush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush plotAreaBackgroundBrush() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush used to fill the background of the plot area of the chart.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#plotArea-prop">plotArea</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#plotAreaBackgroundVisible-prop">plotAreaBackgroundVisible</db:link></db:member>
<db:member><db:link xlink:href="qchart.xml#plotAreaBackgroundPen">plotAreaBackgroundPen</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#setPlotAreaBackgroundBrush">setPlotAreaBackgroundBrush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="plotAreaBackgroundPen">
<db:title>QPen QChart::plotAreaBackgroundPen() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPen</db:type>
<db:methodname>plotAreaBackgroundPen</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPen plotAreaBackgroundPen() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pen used to draw the background of the plot area of the chart.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#plotArea-prop">plotArea</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#plotAreaBackgroundVisible-prop">plotAreaBackgroundVisible</db:link></db:member>
<db:member><db:link xlink:href="qchart.xml#plotAreaBackgroundBrush">plotAreaBackgroundBrush</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#setPlotAreaBackgroundPen">setPlotAreaBackgroundPen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAllSeries">
<db:title>void QChart::removeAllSeries()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeAllSeries</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeAllSeries()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes and deletes all series objects that have been added to the chart.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#addSeries">addSeries</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#removeSeries">removeSeries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAxis">
<db:title>void QChart::removeAxis(QAbstractAxis *<db:emphasis>axis</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeAxis</db:methodname>
<db:methodparam>
<db:type>QAbstractAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeAxis(QAbstractAxis *axis)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the axis <db:code role="parameter">axis</db:code> from the chart. The chart releases the ownership of the specified <db:code role="parameter">axis</db:code> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#createDefaultAxes">createDefaultAxes</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractseries.xml#detachAxis">QAbstractSeries::detachAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeSeries">
<db:title>void QChart::removeSeries(QAbstractSeries *<db:emphasis>series</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeSeries</db:methodname>
<db:methodparam>
<db:type>QAbstractSeries *</db:type>
<db:parameter>series</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeSeries(QAbstractSeries *series)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the series <db:code role="parameter">series</db:code> from the chart. The chart releases the ownership of the specified <db:code role="parameter">series</db:code> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#addSeries">addSeries</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#removeAllSeries">removeAllSeries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scroll">
<db:title>void QChart::scroll(qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scroll</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scroll(qreal dx, qreal dy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scrolls the visible area of the chart by the distance specified by <db:code role="parameter">dx</db:code> and <db:code role="parameter">dy</db:code>.</db:para>
<db:para>For polar charts, <db:code role="parameter">dx</db:code> indicates the angle along the angular axis instead of distance.</db:para>
</db:section>
<db:section xml:id="series">
<db:title>QList&lt;QAbstractSeries *&gt; QChart::series() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QAbstractSeries *&gt;</db:type>
<db:methodname>series</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QAbstractSeries *&gt; series() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns all series that are added to the chart.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#addSeries">addSeries</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#removeSeries">removeSeries</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#removeAllSeries">removeAllSeries</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBackgroundBrush">
<db:title>void QChart::setBackgroundBrush(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBackgroundBrush</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBackgroundBrush(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the brush that is used for painting the background of the chart area to <db:code role="parameter">brush</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#backgroundBrush">backgroundBrush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBackgroundPen">
<db:title>void QChart::setBackgroundPen(const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBackgroundPen</db:methodname>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBackgroundPen(const QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pen that is used for painting the background of the chart area to <db:code role="parameter">pen</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#backgroundPen">backgroundPen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPlotAreaBackgroundBrush">
<db:title>void QChart::setPlotAreaBackgroundBrush(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPlotAreaBackgroundBrush</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPlotAreaBackgroundBrush(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the brush used to fill the background of the plot area of the chart to <db:code role="parameter">brush</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#plotArea-prop">plotArea</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#plotAreaBackgroundVisible-prop">plotAreaBackgroundVisible</db:link></db:member>
<db:member><db:link xlink:href="qchart.xml#setPlotAreaBackgroundPen">setPlotAreaBackgroundPen</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#plotAreaBackgroundBrush">plotAreaBackgroundBrush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPlotAreaBackgroundPen">
<db:title>void QChart::setPlotAreaBackgroundPen(const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPlotAreaBackgroundPen</db:methodname>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPlotAreaBackgroundPen(const QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the pen used to draw the background of the plot area of the chart to <db:code role="parameter">pen</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#plotArea-prop">plotArea</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#plotAreaBackgroundVisible-prop">plotAreaBackgroundVisible</db:link></db:member>
<db:member><db:link xlink:href="qchart.xml#setPlotAreaBackgroundBrush">setPlotAreaBackgroundBrush</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#plotAreaBackgroundPen">plotAreaBackgroundPen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTitleBrush">
<db:title>void QChart::setTitleBrush(const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTitleBrush</db:methodname>
<db:methodparam>
<db:type>const QBrush &amp;</db:type>
<db:parameter>brush</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTitleBrush(const QBrush &amp;brush)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the brush used for drawing the title text to <db:code role="parameter">brush</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#titleBrush">titleBrush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTitleFont">
<db:title>void QChart::setTitleFont(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTitleFont</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTitleFont(const QFont &amp;font)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the font that is used for drawing the chart title to <db:code role="parameter">font</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#titleFont">titleFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="titleBrush">
<db:title>QBrush QChart::titleBrush() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBrush</db:type>
<db:methodname>titleBrush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBrush titleBrush() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the brush used for drawing the title text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#setTitleBrush">setTitleBrush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="titleFont">
<db:title>QFont QChart::titleFont() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont</db:type>
<db:methodname>titleFont</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont titleFont() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Gets the font that is used for drawing the chart title.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#setTitleFont">setTitleFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="zoom">
<db:title>void QChart::zoom(qreal <db:emphasis>factor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>zoom</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void zoom(qreal factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Zooms into the view by the custom factor <db:code role="parameter">factor</db:code>.</db:para>
<db:para>A factor over 1.0 zooms into the view and a factor between 0.0 and 1.0 zooms out of it.</db:para>
</db:section>
<db:section xml:id="zoomIn">
<db:title>void QChart::zoomIn()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>zoomIn</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void zoomIn()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Zooms into the view by a factor of two.</db:para>
</db:section>
<db:section xml:id="zoomIn-1">
<db:title>void QChart::zoomIn(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>zoomIn</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void zoomIn(const QRectF &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Zooms into the view to a maximum level at which the rectangle <db:code role="parameter">rect</db:code> is still fully visible.</db:para>
<db:note>
<db:para>Applying a zoom may modify properties of attached axes, for instance QAbstractAxis::min and QAbstractAxis::max.</db:para>
</db:note>
<db:note>
<db:para>This is not supported for polar charts.</db:para>
</db:note>
</db:section>
<db:section xml:id="zoomOut">
<db:title>void QChart::zoomOut()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>zoomOut</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void zoomOut()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Zooms out of the view by a factor of two.</db:para>
<db:note>
<db:para>This will do nothing if the result would contain an invalid logarithmic axis range.</db:para>
</db:note>
</db:section>
<db:section xml:id="zoomReset">
<db:title>void QChart::zoomReset()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>zoomReset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void zoomReset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the series domains to what they were before any zoom method was called.</db:para>
<db:note>
<db:para>This will also reset scrolling and explicit axis range settings specified between the first zoom operation and calling this method. If no zoom operation has been performed, this method does nothing.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QChart</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qchart.xml">QChart</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="axisX">
<db:title>QAbstractAxis *QChart::axisX(QAbstractSeries *<db:emphasis>series</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractAxis *</db:type>
<db:methodname>axisX</db:methodname>
<db:methodparam>
<db:type>QAbstractSeries *</db:type>
<db:parameter>series</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractAxis * axisX(QAbstractSeries *series) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qchart.xml#axes">axes</db:link>() instead.</db:para>
<db:para>Returns a pointer to the horizontal axis attached to the specified <db:code role="parameter">series</db:code>. If no series is specified, the first horizontal axis added to the chart is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#setAxisX">setAxisX</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractseries.xml#attachAxis">QAbstractSeries::attachAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="axisY">
<db:title>QAbstractAxis *QChart::axisY(QAbstractSeries *<db:emphasis>series</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractAxis *</db:type>
<db:methodname>axisY</db:methodname>
<db:methodparam>
<db:type>QAbstractSeries *</db:type>
<db:parameter>series</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractAxis * axisY(QAbstractSeries *series) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qchart.xml#axes">axes</db:link>() instead.</db:para>
<db:para>Returns a pointer to the vertical axis attached to the specified <db:code role="parameter">series</db:code>. If no series is specified, the first vertical axis added to the chart is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#setAxisY">setAxisY</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#addAxis">addAxis</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractseries.xml#attachAxis">QAbstractSeries::attachAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAxisX">
<db:title>void QChart::setAxisX(QAbstractAxis *<db:emphasis>axis</db:emphasis>, QAbstractSeries *<db:emphasis>series</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAxisX</db:methodname>
<db:methodparam>
<db:type>QAbstractAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractSeries *</db:type>
<db:parameter>series</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAxisX(QAbstractAxis *axis, QAbstractSeries *series)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qchart.xml#addAxis">addAxis</db:link>() instead.</db:para>
<db:para>Adds the axis <db:code role="parameter">axis</db:code> to the chart and attaches it to the series <db:code role="parameter">series</db:code> as a bottom-aligned horizontal axis. The chart takes ownership of both the axis and the series. Any horizontal axes previously attached to the series are deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#axisX">axisX</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#axisY">axisY</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#setAxisY">setAxisY</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#createDefaultAxes">createDefaultAxes</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractseries.xml#attachAxis">QAbstractSeries::attachAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAxisY">
<db:title>void QChart::setAxisY(QAbstractAxis *<db:emphasis>axis</db:emphasis>, QAbstractSeries *<db:emphasis>series</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAxisY</db:methodname>
<db:methodparam>
<db:type>QAbstractAxis *</db:type>
<db:parameter>axis</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractSeries *</db:type>
<db:parameter>series</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAxisY(QAbstractAxis *axis, QAbstractSeries *series)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qchart.xml#addAxis">addAxis</db:link>() instead.</db:para>
<db:para>Adds the axis <db:code role="parameter">axis</db:code> to the chart and attaches it to the series <db:code role="parameter">series</db:code> as a left-aligned vertical axis. The chart takes ownership of both the axis and the series. Any vertical axes previously attached to the series are deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchart.xml#axisX">axisX</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#axisY">axisY</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#setAxisX">setAxisX</db:link>()</db:member>
<db:member><db:link xlink:href="qchart.xml#createDefaultAxes">createDefaultAxes</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractseries.xml#attachAxis">QAbstractSeries::attachAxis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
