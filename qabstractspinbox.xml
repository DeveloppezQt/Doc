<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QAbstractSpinBox Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link> class provides a spinbox and a line edit to display values.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractSpinBox</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdatetimeedit.xml" xlink:role="class">QDateTimeEdit</db:link>, <db:link xlink:href="qdoublespinbox.xml" xlink:role="class">QDoubleSpinBox</db:link>, and <db:link xlink:href="qspinbox.xml" xlink:role="class">QSpinBox</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractSpinBox is part of <db:simplelist><db:member>abstractwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class is designed as a common super class for widgets like <db:link xlink:href="qspinbox.xml">QSpinBox</db:link>, <db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link> and <db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:para>
<db:para>Here are the main properties of the class:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>text: The text that is displayed in the <db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="stylesheet-reference.xml#alignment">alignment</db:link>: The alignment of the text in the <db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>wrapping: Whether the <db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link> wraps from the minimum value to the maximum value and vica versa.</db:para>
</db:listitem>
</db:orderedlist>
<db:para><db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link> provides a virtual <db:link xlink:href="qabstractspinbox.xml#stepBy">stepBy</db:link>() function that is called whenever the user triggers a step. This function takes an integer value to signify how many steps were taken. E.g. Pressing <db:link xlink:href="qt.xml#Key-enum">Qt::Key_Down</db:link> will trigger a call to <db:link xlink:href="qabstractspinbox.xml#stepBy">stepBy</db:link>(-1).</db:para>
<db:para><db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link> also provide a virtual function <db:link xlink:href="qabstractspinbox.xml#stepEnabled">stepEnabled</db:link>() to determine whether stepping up/down is allowed at any point. This function returns a bitset of <db:link xlink:href="qabstractspinbox.xml#StepEnabledFlag-enum">StepEnabled</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link></db:member>
<db:member><db:link xlink:href="qspinbox.xml">QSpinBox</db:link></db:member>
<db:member><db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-spinboxes-example.xml">Spin Boxes Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ButtonSymbols-enum">
<db:title>enum QAbstractSpinBox::ButtonSymbols</db:title>
<db:para>This enum type describes the symbols that can be displayed on the buttons in a spin box.</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qspinbox-updown.png"/>
</db:imageobject>
</db:inlinemediaobject> <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qspinbox-plusminus.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link></db:emphasis>::UpDownArrows</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Little arrows in the classic style.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link></db:emphasis>::PlusMinus</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:emphasis role="bold">+</db:emphasis> and <db:emphasis role="bold">-</db:emphasis> symbols.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link></db:emphasis>::NoButtons</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Don't display buttons.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QAbstractSpinBox::buttonSymbols</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="CorrectionMode-enum">
<db:title>enum QAbstractSpinBox::CorrectionMode</db:title>
<db:para>This enum type describes the mode the spinbox will use to correct an <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link> value if editing finishes.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link></db:emphasis>::CorrectToPreviousValue</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The spinbox will revert to the last valid value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link></db:emphasis>::CorrectToNearestValue</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The spinbox will revert to the nearest valid value.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>correctionMode</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="StepEnabledFlag-enum">
<db:title>enum QAbstractSpinBox::StepEnabledFlag</db:title>
<db:bridgehead renderas="sect2">flags QAbstractSpinBox::StepEnabled</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link></db:emphasis>::StepNone</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link></db:emphasis>::StepUpEnabled</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link></db:emphasis>::StepDownEnabled</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>StepEnabled</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;StepEnabledFlag&gt;. </db:code>It stores an OR combination of <db:code>StepEnabledFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractSpinBox">
<db:title>[explicit] QAbstractSpinBox::QAbstractSpinBox(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs an abstract spinbox with the given <db:code role="parameter">parent</db:code> with default wrapping, and <db:link xlink:href="stylesheet-reference.xml#alignment">alignment</db:link> properties.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractSpinBox">
<db:title>[virtual noexcept] QAbstractSpinBox::~QAbstractSpinBox()</db:title>
<db:para>Called when the <db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link> is destroyed.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::changeEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>[virtual] void QAbstractSpinBox::clear()</db:title>
<db:para>Clears the lineedit of all text but prefix and suffix.</db:para>
</db:section>
<db:section xml:id="closeEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::closeEvent(QCloseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#closeEvent" role="function">QWidget::closeEvent(QCloseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::contextMenuEvent(QContextMenuEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#contextMenuEvent" role="function">QWidget::contextMenuEvent(QContextMenuEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="editingFinished">
<db:title>void QAbstractSpinBox::editingFinished()</db:title>
<db:para>This signal is emitted editing is finished. This happens when the spinbox loses focus and when enter is pressed.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual] bool QAbstractSpinBox::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="fixup">
<db:title>[virtual] void QAbstractSpinBox::fixup(QString &amp;<db:emphasis>input</db:emphasis>) const</db:title>
<db:para>This virtual function is called by the <db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link> if the <db:code role="parameter">input</db:code> is not validated to <db:link xlink:href="qvalidator.xml#State-enum">QValidator::Acceptable</db:link> when Return is pressed or <db:link xlink:href="qabstractspinbox.xml#interpretText">interpretText</db:link>() is called. It will try to change the text so it is valid. Reimplemented in the various subclasses.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::focusInEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::focusOutEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::hideEvent(QHideEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#hideEvent" role="function">QWidget::hideEvent(QHideEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[protected] void QAbstractSpinBox::initStyleOption(QStyleOptionSpinBox *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qspinbox.xml">QSpinBox</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptionspinbox.xml">QStyleOptionSpinBox</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodQuery">
<db:title>[override virtual] QVariant QAbstractSpinBox::inputMethodQuery(Qt::InputMethodQuery <db:emphasis>query</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodQuery" role="function">QWidget::inputMethodQuery(Qt::InputMethodQuery query) const</db:link>.</db:para>
</db:section>
<db:section xml:id="interpretText">
<db:title>void QAbstractSpinBox::interpretText()</db:title>
<db:para>This function interprets the text of the spin box. If the value has changed since last interpretation it will emit signals.</db:para>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::keyPressEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
<db:para>This function handles keyboard input.</db:para>
<db:para>The following keys are handled specifically:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Enter/Return</db:para>
</db:td>
<db:td>
<db:para>This will reinterpret the text and emit a signal even if the value has not changed since last time a signal was emitted.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Up</db:para>
</db:td>
<db:td>
<db:para>This will invoke <db:link xlink:href="qabstractspinbox.xml#stepBy">stepBy</db:link>(1)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Down</db:para>
</db:td>
<db:td>
<db:para>This will invoke <db:link xlink:href="qabstractspinbox.xml#stepBy">stepBy</db:link>(-1)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Page up</db:para>
</db:td>
<db:td>
<db:para>This will invoke <db:link xlink:href="qabstractspinbox.xml#stepBy">stepBy</db:link>(10)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Page down</db:para>
</db:td>
<db:td>
<db:para>This will invoke <db:link xlink:href="qabstractspinbox.xml#stepBy">stepBy</db:link>(-10)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::keyReleaseEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyReleaseEvent" role="function">QWidget::keyReleaseEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="lineEdit">
<db:title>[protected] QLineEdit *QAbstractSpinBox::lineEdit() const</db:title>
<db:para>This function returns a pointer to the line edit of the spin box.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractspinbox.xml#setLineEdit">setLineEdit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QAbstractSpinBox::minimumSizeHint() const</db:title>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::mouseMoveEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::mousePressEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::mouseReleaseEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::resizeEvent(QResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="selectAll">
<db:title>void QAbstractSpinBox::selectAll()</db:title>
<db:para>Selects all the text in the spinbox except the prefix and suffix.</db:para>
</db:section>
<db:section xml:id="setLineEdit">
<db:title>[protected] void QAbstractSpinBox::setLineEdit(QLineEdit *<db:emphasis>lineEdit</db:emphasis>)</db:title>
<db:para>Sets the line edit of the spinbox to be <db:code role="parameter">lineEdit</db:code> instead of the current line edit widget. <db:code role="parameter">lineEdit</db:code> can not be 0.</db:para>
<db:para><db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link> takes ownership of the new <db:link xlink:href="qabstractspinbox.xml#lineEdit">lineEdit</db:link></db:para>
<db:para>If <db:link xlink:href="qlineedit.xml#validator">QLineEdit::validator</db:link>() for the <db:code role="parameter">lineEdit</db:code> returns 0, the internal validator of the spinbox will be set on the line edit.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractspinbox.xml#lineEdit">lineEdit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::showEvent(QShowEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QAbstractSpinBox::sizeHint() const</db:title>
</db:section>
<db:section xml:id="stepBy">
<db:title>[virtual] void QAbstractSpinBox::stepBy(int <db:emphasis>steps</db:emphasis>)</db:title>
<db:para>Virtual function that is called whenever the user triggers a step. The <db:code role="parameter">steps</db:code> parameter indicates how many steps were taken, e.g. Pressing <db:link xlink:href="qt.xml#Key-enum">Qt::Key_Down</db:link> will trigger a call to stepBy(-1), whereas pressing Qt::Key_Prior will trigger a call to stepBy(10).</db:para>
<db:para>If you subclass <db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link> you must reimplement this function. Note that this function is called even if the resulting value will be outside the bounds of minimum and maximum. It's this function's job to handle these situations.</db:para>
</db:section>
<db:section xml:id="stepDown">
<db:title>void QAbstractSpinBox::stepDown()</db:title>
<db:para>Steps down by one linestep Calling this slot is analogous to calling <db:link xlink:href="qabstractspinbox.xml#stepBy">stepBy</db:link>(-1);</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractspinbox.xml#stepBy">stepBy</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractspinbox.xml#stepUp">stepUp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stepEnabled">
<db:title>[virtual protected] QAbstractSpinBox::StepEnabled QAbstractSpinBox::stepEnabled() const</db:title>
<db:para>Virtual function that determines whether stepping up and down is legal at any given time.</db:para>
<db:para>The up arrow will be painted as disabled unless (stepEnabled() &amp; <db:link xlink:href="qabstractspinbox.xml#StepEnabledFlag-enum">StepUpEnabled</db:link>) != 0.</db:para>
<db:para>The default implementation will return (<db:link xlink:href="qabstractspinbox.xml#StepEnabledFlag-enum">StepUpEnabled</db:link>| <db:link xlink:href="qabstractspinbox.xml#StepEnabledFlag-enum">StepDownEnabled</db:link>) if wrapping is turned on. Else it will return <db:link xlink:href="qabstractspinbox.xml#StepEnabledFlag-enum">StepDownEnabled</db:link> if value is &gt; minimum() or'ed with <db:link xlink:href="qabstractspinbox.xml#StepEnabledFlag-enum">StepUpEnabled</db:link> if value &lt; maximum().</db:para>
<db:para>If you subclass <db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link> you will need to reimplement this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QSpinBox::minimum()</db:link></db:member>
<db:member><db:link xlink:href="">QSpinBox::maximum()</db:link></db:member>
<db:member><db:link xlink:href="">wrapping()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stepUp">
<db:title>void QAbstractSpinBox::stepUp()</db:title>
<db:para>Steps up by one linestep Calling this slot is analogous to calling <db:link xlink:href="qabstractspinbox.xml#stepBy">stepBy</db:link>(1);</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractspinbox.xml#stepBy">stepBy</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractspinbox.xml#stepDown">stepDown</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::timerEvent(QTimerEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="validate">
<db:title>[virtual] QValidator::State QAbstractSpinBox::validate(QString &amp;<db:emphasis>input</db:emphasis>, int &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>This virtual function is called by the <db:link xlink:href="qabstractspinbox.xml">QAbstractSpinBox</db:link> to determine whether <db:code role="parameter">input</db:code> is valid. The <db:code role="parameter">pos</db:code> parameter indicates the position in the string. Reimplemented in the various subclasses.</db:para>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QAbstractSpinBox::wheelEvent(QWheelEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#wheelEvent" role="function">QWidget::wheelEvent(QWheelEvent *event)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
