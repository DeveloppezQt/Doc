<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Serial Terminal</db:title>
<db:productname>QtSerialPort</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Port Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to use various features of <db:link xlink:href="qserialport.xml">QSerialPort</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Terminal</db:emphasis> shows how to create a terminal for a simple serial interface by using <db:link xlink:href="qtserialport-index.xml">Qt Serial Port</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/terminal-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example shows the main features of the <db:link xlink:href="qserialport.xml">QSerialPort</db:link> class, like configuration, I/O implementation and so forth. Also, the class <db:link xlink:href="qserialportinfo.xml">QSerialPortInfo</db:link> is invoked to display information about the serial ports available in the system.</db:para>
<db:para><db:link xlink:href="qserialport.xml">QSerialPort</db:link> supports two general programming approaches:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">The asynchronous (non-blocking) approach.</db:emphasis> Operations are scheduled and performed when the control returns to Qt's event loop. <db:link xlink:href="qserialport.xml">QSerialPort</db:link> emits a signal when the operation is finished. For example, <db:link xlink:href="qiodevice.xml#write">QSerialPort::write</db:link>() returns immediately. When the data is sent to the serial port, <db:link xlink:href="qserialport.xml">QSerialPort</db:link> emits <db:link xlink:href="qiodevice.xml#bytesWritten">bytesWritten</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">The synchronous (blocking) approach.</db:emphasis> In non-GUI and multithreaded applications, the <db:code>waitFor...()</db:code> functions can be called (i.e. <db:link xlink:href="qserialport.xml#waitForReadyRead">QSerialPort::waitForReadyRead</db:link>()) to suspend the calling thread until the operation has completed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In this example, the asynchronous approach is demonstrated. The <db:link xlink:href="qtserialport-blockingreceiver-example.xml">Blocking Receiver</db:link> example illustrates the synchronous approach.</db:para>
<db:para>Our example contains some GUI widgets:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>MainWindow</db:code> (<db:code>terminal/mainwindow.cpp</db:code>) - is the main application window that contains all the working logic for the serial port programming, including configuration, I/O processing and so forth, while inheriting the <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Console</db:code> (<db:code>terminal/console.cpp</db:code>) - is the central widget of the main window, displaying the transmitted or received data. The widget is derived from the <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> class.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>SettingsDialog</db:code> (<db:code>terminal/settingsdialog.cpp</db:code>) - is a dialog for configuring the serial port, as well as for displaying the available serial ports and information about them.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The serial port is instantiated in the <db:code>MainWindow</db:code> constructor. The main widget is passed as the parent, so the object deletion happens automatically according to the parent and child mechanism in Qt:</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    m_ui(new Ui::MainWindow),
    m_serial(new QSerialPort(this))
{
    ...
</db:programlisting>
<db:para>This example demonstrates the following <db:link xlink:href="qserialport.xml">QSerialPort</db:link> signals:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() - shows that new data has been received and hence available</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qiodevice.xml#bytesWritten">bytesWritten</db:link>() - used to check that all data was written successfully</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">    ...
    connect(m_serial, &amp;amp;QSerialPort::readyRead, this, &amp;amp;MainWindow::readData);
    connect(m_serial, &amp;amp;QSerialPort::bytesWritten, this, &amp;amp;MainWindow::handleBytesWritten);
    ...
}
</db:programlisting>
<db:para>Clicking on the <db:emphasis role="bold">Connect</db:emphasis> button invokes the <db:code>openSerialPort()</db:code> slot:</db:para>
<db:programlisting language="cpp">void MainWindow::openSerialPort()
{
    const SettingsDialog::Settings p = m_settings-&amp;gt;settings();
    m_serial-&amp;gt;setPortName(p.name);
    m_serial-&amp;gt;setBaudRate(p.baudRate);
    m_serial-&amp;gt;setDataBits(p.dataBits);
    m_serial-&amp;gt;setParity(p.parity);
    m_serial-&amp;gt;setStopBits(p.stopBits);
    m_serial-&amp;gt;setFlowControl(p.flowControl);
    if (m_serial-&amp;gt;open(QIODevice::ReadWrite)) {
        m_console-&amp;gt;setEnabled(true);
        m_console-&amp;gt;setLocalEchoEnabled(p.localEchoEnabled);
        m_ui-&amp;gt;actionConnect-&amp;gt;setEnabled(false);
        m_ui-&amp;gt;actionDisconnect-&amp;gt;setEnabled(true);
        m_ui-&amp;gt;actionConfigure-&amp;gt;setEnabled(false);
        showStatusMessage(tr(&quot;Connected to %1 : %2, %3, %4, %5, %6&quot;)
                          .arg(p.name, p.stringBaudRate, p.stringDataBits,
                               p.stringParity, p.stringStopBits, p.stringFlowControl));
    } else {
        QMessageBox::critical(this, tr(&quot;Error&quot;), m_serial-&amp;gt;errorString());

        showStatusMessage(tr(&quot;Open error&quot;));
    }
}
</db:programlisting>
<db:para>In this slot, the settings are read from <db:code>SettingsDialog</db:code> and an attempt is made to open and initialize the serial port accordingly. If successful, the status bar displays a message that the opening was successful with the given configuration; otherwise, a messagebox is displayed with the appropriate error code and message. If the serial port settings have never been called then the terminal attempts to open the port with the default settings: 9600 8N1.</db:para>
<db:para>Clicking on the <db:emphasis role="bold">Disconnect</db:emphasis> button invokes the <db:code>closeSerialPort()</db:code> slot:</db:para>
<db:programlisting language="cpp">void MainWindow::closeSerialPort()
{
    if (m_serial-&amp;gt;isOpen())
        m_serial-&amp;gt;close();
    m_console-&amp;gt;setEnabled(false);
    m_ui-&amp;gt;actionConnect-&amp;gt;setEnabled(true);
    m_ui-&amp;gt;actionDisconnect-&amp;gt;setEnabled(false);
    m_ui-&amp;gt;actionConfigure-&amp;gt;setEnabled(true);
    showStatusMessage(tr(&quot;Disconnected&quot;));
}
</db:programlisting>
<db:para>In this case, handled by the closure of the serial port.</db:para>
<db:para>Clicking on the <db:emphasis role="bold">Configure</db:emphasis> button invokes the <db:code>show()</db:code> slot which belongs to the <db:code>SettingsDialog</db:code> widget.</db:para>
<db:para>This method (<db:code>terminal/settingsdialog.cpp</db:code>) displays the <db:code>SettingsDialog</db:code>, in which the user can choose the desired serial port, see the information about the selected port, and set the desired parameters of the given serial port.</db:para>
<db:section xml:id="writing-data">
<db:title>Writing Data</db:title>
<db:para>Typing characters in the console invokes the <db:code>writeData()</db:code> slot:</db:para>
<db:programlisting language="cpp">void MainWindow::writeData(const QByteArray &amp;amp;data)
{
    const qint64 written = m_serial-&amp;gt;write(data);
    if (written == data.size()) {
        m_bytesToWrite += written;
        m_timer-&amp;gt;start(kWriteTimeout);
    } else {
        const QString error = tr(&quot;Failed to write all data to port %1.\n&quot;
                                 &quot;Error: %2&quot;).arg(m_serial-&amp;gt;portName(),
                                                  m_serial-&amp;gt;errorString());
        showWriteError(error);
    }
}
</db:programlisting>
<db:para>This slot sends the characters typed in the given Console widget to the serial port - see <db:code>terminal/console.cpp</db:code>. It also starts a timer to track if the write actually succeeded or not. We use the <db:link xlink:href="qiodevice.xml#bytesWritten">bytesWritten</db:link>() signal to make sure that all bytes are actually written. It is connected to the <db:code>MainWindow::handleBytesWritten()</db:code> slot:</db:para>
<db:programlisting language="cpp">void MainWindow::handleBytesWritten(qint64 bytes)
{
    m_bytesToWrite -= bytes;
    if (m_bytesToWrite == 0)
        m_timer-&amp;gt;stop();
}
</db:programlisting>
</db:section>
<db:section xml:id="reading-data">
<db:title>Reading Data</db:title>
<db:para>When the serial port receives new data, the signal <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() is emitted, and that signal is connected to the <db:code>MainWindow::readData()</db:code> slot:</db:para>
<db:programlisting language="cpp">void MainWindow::readData()
{
    const QByteArray data = m_serial-&amp;gt;readAll();
    m_console-&amp;gt;putData(data);
}
</db:programlisting>
<db:para>This slot reads the data from the serial port and displays that in the Console widget.</db:para>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtserialport.git/tree/examples/serialport/terminal?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtserialport-blockingreceiver-example.xml">Blocking Receiver</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
