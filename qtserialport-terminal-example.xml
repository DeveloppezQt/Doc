<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Terminal Example</db:title>
<db:productname>QtSerialPort</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Port Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to use various features of <db:link xlink:href="qserialport.xml">QSerialPort</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Terminal</db:emphasis> shows how to create a terminal for a simple serial interface by using <db:link xlink:href="qtserialport-index.xml">Qt Serial Port</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/terminal-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example shows the main features of the <db:link xlink:href="qserialport.xml">QSerialPort</db:link> class, like configuration, I/O implementation and so forth. Also, the class <db:link xlink:href="qserialportinfo.xml">QSerialPortInfo</db:link> is invoked to display information about the serial ports available in the system.</db:para>
<db:para><db:link xlink:href="qserialport.xml">QSerialPort</db:link> supports two general programming approaches:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>The asynchronous (non-blocking) approach.</db:emphasis> Operations are scheduled and performed when the control returns to Qt's event loop. <db:link xlink:href="qserialport.xml">QSerialPort</db:link> emits a signal when the operation is finished. For example, <db:link xlink:href="qiodevice.xml#write">QSerialPort::write</db:link>() returns immediately. When the data is sent to the serial port, <db:link xlink:href="qserialport.xml">QSerialPort</db:link> emits <db:link xlink:href="qiodevice.xml#bytesWritten">bytesWritten</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>The synchronous (blocking) approach.</db:emphasis> In non-GUI and multithreaded applications, the <db:code>waitFor...()</db:code> functions can be called (i.e. <db:link xlink:href="qserialport.xml#waitForReadyRead">QSerialPort::waitForReadyRead</db:link>()) to suspend the calling thread until the operation has completed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In this example, the asynchronous approach is demonstrated. The <db:link xlink:href="qtserialport-blockingslave-example.xml">Blocking Slave</db:link> example illustrates the synchronous approach.</db:para>
<db:para>Our example contains some GUI widgets:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>MainWindow - is the main application window that contains all the working logic for the serial port programming, including configuration, I/O processing and so forth, while inheriting the <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Console - is the central widget of the main window, displaying the transmitted or received data. The widget is derived from the <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> class.</db:para>
</db:listitem>
<db:listitem>
<db:para>SettingsDialog - is a dialog for configuring the serial port, as well as for displaying the available serial ports and information about them.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The serial port is instantiated in the MainWindow constructor. The main widget is passed as the parent, so the object deletion happens automatically according to the parent and child mechanism in Qt:</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ...
    serial = new QSerialPort(this);
</db:programlisting>
<db:para>The only <db:link xlink:href="qserialport.xml">QSerialPort</db:link> signal invoked in this example is <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>(), which shows that new data has been received and hence available:</db:para>
<db:programlisting language="cpp">    ...
    connect(serial, &amp;QSerialPort::readyRead, this, &amp;MainWindow::readData);
    ...
}
</db:programlisting>
<db:para>Clicking on the <db:emphasis role="bold">Connect</db:emphasis> button invokes the <db:code>openSerialPort()</db:code> slot:</db:para>
<db:programlisting language="cpp">void MainWindow::openSerialPort()
{
    SettingsDialog::Settings p = settings-&gt;settings();
    serial-&gt;setPortName(p.name);
    serial-&gt;setBaudRate(p.baudRate);
    serial-&gt;setDataBits(p.dataBits);
    serial-&gt;setParity(p.parity);
    serial-&gt;setStopBits(p.stopBits);
    serial-&gt;setFlowControl(p.flowControl);
    if (serial-&gt;open(QIODevice::ReadWrite)) {
        console-&gt;setEnabled(true);
        console-&gt;setLocalEchoEnabled(p.localEchoEnabled);
        ui-&gt;actionConnect-&gt;setEnabled(false);
        ui-&gt;actionDisconnect-&gt;setEnabled(true);
        ui-&gt;actionConfigure-&gt;setEnabled(false);
        showStatusMessage(tr(&quot;Connected to %1 : %2, %3, %4, %5, %6&quot;)
                          .arg(p.name).arg(p.stringBaudRate).arg(p.stringDataBits)
                          .arg(p.stringParity).arg(p.stringStopBits).arg(p.stringFlowControl));
    } else {
        QMessageBox::critical(this, tr(&quot;Error&quot;), serial-&gt;errorString());

        showStatusMessage(tr(&quot;Open error&quot;));
    }
}
</db:programlisting>
<db:para>In this slot, the settings are read from SettingsDialog and an attempt is made to open and initialize the serial port accordingly. If successful, the status bar displays a message that the opening was successful with the given configuration; otherwise, a messagebox is displayed with the appropriate error code and message. If the serial port settings have never been called SettingsDialog, then the terminal attempts to open the port with the default settings: 9600 8N1.</db:para>
<db:para>Clicking on the <db:emphasis role="bold">Disconnect</db:emphasis> button invokes the <db:code>closeSerialPort()</db:code> slot:</db:para>
<db:programlisting language="cpp">void MainWindow::closeSerialPort()
{
    if (serial-&gt;isOpen())
        serial-&gt;close();
    console-&gt;setEnabled(false);
    ui-&gt;actionConnect-&gt;setEnabled(true);
    ui-&gt;actionDisconnect-&gt;setEnabled(false);
    ui-&gt;actionConfigure-&gt;setEnabled(true);
    showStatusMessage(tr(&quot;Disconnected&quot;));
}
</db:programlisting>
<db:para>In this case, handled by the closure of the serial port.</db:para>
<db:para>Typing characters in the console invokes the <db:code>writeData()</db:code> slot:</db:para>
<db:programlisting language="cpp">void MainWindow::writeData(const QByteArray &amp;data)
{
    serial-&gt;write(data);
}
</db:programlisting>
<db:para>This slot sends the characters typed in the given Console widget to the serial port.</db:para>
<db:para>When the serial port receives new data, the signal <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() is emitted, and that signal is connected to the <db:code>MainWindow::readData()</db:code> slot:</db:para>
<db:programlisting language="cpp">void MainWindow::readData()
{
    QByteArray data = serial-&gt;readAll();
    console-&gt;putData(data);
}
</db:programlisting>
<db:para>This slot reads the data from the serial port and displays that in the Console widget.</db:para>
<db:para>Clicking on the <db:emphasis role="bold">Configure</db:emphasis> button invokes the <db:code>show()</db:code> slot which belongs to the SettingsDialog widget.</db:para>
<db:para>This method displays the SettingsDialog in which the user can choose the desired serial port, see the information about the selected port, and set the desired parameters of the given serial port.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="terminal/console.cpp">terminal/console.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="terminal/console.h">terminal/console.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="terminal/main.cpp">terminal/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="terminal/mainwindow.cpp">terminal/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="terminal/mainwindow.h">terminal/mainwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="terminal/mainwindow.ui">terminal/mainwindow.ui</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="terminal/settingsdialog.cpp">terminal/settingsdialog.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="terminal/settingsdialog.h">terminal/settingsdialog.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="terminal/settingsdialog.ui">terminal/settingsdialog.ui</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="terminal/terminal.pro">terminal/terminal.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="terminal/terminal.qrc">terminal/terminal.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="terminal/images/application-exit.png">terminal/images/application-exit.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="terminal/images/clear.png">terminal/images/clear.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="terminal/images/connect.png">terminal/images/connect.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="terminal/images/disconnect.png">terminal/images/disconnect.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="terminal/images/settings.png">terminal/images/settings.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtserialport-blockingslave-example.xml">Blocking Slave Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section></db:section></db:article>
