<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Chapter 5: Writing a Benchmark</db:title>
<db:productname>QtTestLib</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Test Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qttestlib-tutorial4-example.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Chapter 4"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qttestlib-tutorial6.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Chapter 6"/></db:extendedlink>
<db:abstract>
<db:para>How to write a benchmark.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This chapter demonstrates how to write benchmarks using Qt Test.</db:para>
<db:section xml:id="writing-a-benchmark">
<db:title>Writing a Benchmark</db:title>
<db:para>To create a benchmark we extend a test function with a QBENCHMARK macro. A benchmark test function will then typically consist of setup code and a QBENCHMARK macro that contains the code to be measured. This test function benchmarks <db:link xlink:href="qstring.xml#localeAwareCompare">QString::localeAwareCompare</db:link>().</db:para>
<db:programlisting language="cpp">void TestBenchmark::simple()
{
    QString str1 = QLatin1String(&quot;This is a test string&quot;);
    QString str2 = QLatin1String(&quot;This is a test string&quot;);

    QCOMPARE(str1.localeAwareCompare(str2), 0);

    QBENCHMARK {
        str1.localeAwareCompare(str2);
    }
}
</db:programlisting>
<db:para>Setup can be done at the beginning of the function. At this point, the clock is not running. The code inside the QBENCHMARK macro will be measured, and possibly repeated several times in order to get an accurate measurement.</db:para>
<db:para>Several <db:link xlink:href="qtest-overview.xml#testlib-benchmarking-measurement">back-ends</db:link> are available and can be selected on the command line.</db:para>
</db:section>
<db:section xml:id="data-functions">
<db:title>Data Functions</db:title>
<db:para>Data functions are useful for creating benchmarks that compare multiple data inputs, for example locale aware compare against standard compare.</db:para>
<db:programlisting language="cpp">void TestBenchmark::multiple_data()
{
    QTest::addColumn&amp;lt;bool&amp;gt;(&quot;useLocaleCompare&quot;);
    QTest::newRow(&quot;locale-aware-compare&quot;) &amp;lt;&amp;lt; true;
    QTest::newRow(&quot;standard-compare&quot;) &amp;lt;&amp;lt; false;
}
</db:programlisting>
<db:para>The test function then uses the data to determine what to benchmark.</db:para>
<db:programlisting language="cpp">void TestBenchmark::multiple()
{
    QFETCH(bool, useLocaleCompare);
    QString str1 = QLatin1String(&quot;This is a test string&quot;);
    QString str2 = QLatin1String(&quot;This is a test string&quot;);

    int result;
    if (useLocaleCompare) {
        QBENCHMARK {
            result = str1.localeAwareCompare(str2);
        }
    } else {
        QBENCHMARK {
            result = (str1 == str2);
        }
    }
    Q_UNUSED(result);
}
</db:programlisting>
<db:para>The <db:code>if (useLocaleCompare)</db:code> switch is placed outside the QBENCHMARK macro to avoid measuring its overhead. Each benchmark test function can have one active QBENCHMARK macro.</db:para>
</db:section>
<db:section xml:id="building-the-executable">
<db:title>Building the Executable</db:title>
<db:para>You can build the test case executable using CMake or qmake.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Configure your build settings in your CMakeLists.txt file:</db:para>
<db:programlisting language="cpp"># Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

cmake_minimum_required(VERSION 3.16)
project(tutorial5 LANGUAGES CXX)

find_package(Qt6 REQUIRED COMPONENTS Core Gui Test Widgets)

qt_standard_project_setup()

qt_add_executable(tutorial5
    benchmarking.cpp
)

set_target_properties(tutorial5 PROPERTIES
    WIN32_EXECUTABLE TRUE
    MACOSX_BUNDLE TRUE
)

target_link_libraries(tutorial5 PRIVATE
    Qt6::Core
    Qt6::Gui
    Qt6::Test
    Qt6::Widgets
)

install(TARGETS tutorial5
    BUNDLE  DESTINATION .
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

qt_generate_deploy_app_script(
    TARGET tutorial5
    OUTPUT_SCRIPT deploy_script
    NO_UNSUPPORTED_PLATFORM_ERROR
)
install(SCRIPT ${deploy_script})
</db:programlisting>
<db:para>Next, from the command line, run either <db:code>cmake</db:code> or use the <db:code>qt-cmake</db:code> convenience script located in <db:code>Qt-prefix/&lt;version&gt;/&lt;platform&gt;/bin/qt-cmake</db:code>:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;Qt-prefix&amp;gt;/&amp;lt;version&amp;gt;/&amp;lt;platform&amp;gt;/bin/qt-cmake &amp;lt;source-dir&amp;gt; &amp;lt;build-dir&amp;gt; -G Ninja
</db:programlisting>
<db:para>Then, run your preferred generator tool to build the executable. Here, we're using Ninja:</db:para>
<db:programlisting language="cpp" role="bad">ninja
</db:programlisting>
</db:section>
<db:section xml:id="building-with-qmake">
<db:title>Building with qmake</db:title>
<db:para>Configure your build settings in your <db:code>.pro</db:code> file:</db:para>
<db:programlisting language="cpp">QT += widgets testlib

SOURCES = benchmarking.cpp

# install
target.path = $$[QT_INSTALL_EXAMPLES]/qtestlib/tutorial5
INSTALLS += target
</db:programlisting>
<db:para>Next, run <db:code>qmake</db:code>, and, finally, run <db:code>make</db:code> to build your executable:</db:para>
<db:programlisting language="cpp" role="bad">qmake
make
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="running-the-executable">
<db:title>Running the Executable</db:title>
<db:para>Running the resulting executable should give you the following output:</db:para>
<db:programlisting language="cpp">********* Start testing of TestBenchmark *********
Config: Using QtTest library %VERSION%, Qt %VERSION%
PASS   : TestBenchmark::initTestCase()
PASS   : TestBenchmark::simple()
RESULT : TestBenchmark::simple():
     0.00030 msecs per iteration (total: 79, iterations: 262144)
PASS   : TestBenchmark::multiple(locale-aware-compare)
RESULT : TestBenchmark::multiple():&quot;locale-aware-compare&quot;:
     0.00029 msecs per iteration (total: 78, iterations: 262144)
.....
PASS   : TestBenchmark::series(locale-aware-compare:8001)
RESULT : TestBenchmark::series():&quot;locale-aware-compare:8001&quot;:
     0.039 msecs per iteration (total: 81, iterations: 2048)
Totals: 15 passed, 0 failed, 0 skipped, 0 blacklisted, 3971ms
********* Finished testing of TestBenchmark *********
</db:programlisting>
</db:section>
</db:article>
