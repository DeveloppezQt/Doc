<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_target_qml_sources</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Add qml files and resources to an existing QML module target.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This command was introduced in Qt 6.2.</db:para>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_target_qml_sources(
    target
    [QML_FILES ...]
    [RESOURCES ...]
    [PREFIX resource_path]
    [OUTPUT_TARGETS out_targets_var]
    [NO_LINT]
    [NO_CACHEGEN]
    [NO_QMLDIR_TYPES]
)
</db:programlisting>
<db:para>If <db:link xlink:href="">versionless commands</db:link> are disabled, use qt6_target_qml_sources() instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:note>
<db:para>This command requires CMake 3.19 or later.</db:para>
</db:note>
<db:para>qt_target_qml_sources() provides the ability to add more files to a QML module after <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module()</db:link> has been called. Typically, you pass the set of .qml files and resources to <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module()</db:link> directly, but in some cases, it may be desirable, or even necessary, to add files after <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module()</db:link> has been called. For example, you may wish to add files conditionally based on an if statement expression, or from subdirectories that will only be added if certain criteria are met. You might want to add a set of files with different characteristics to the others, such as a different resource prefix, or with linting and bytecode compilation disabled. The qt_target_qml_sources() command enables these scenarios.</db:para>
</db:section>
<db:section xml:id="arguments">
<db:title>Arguments</db:title>
<db:para>The target must be the backing target of a QML module, or if the QML module has no separate backing target, it must be the module's plugin target.</db:para>
<db:para>QML_FILES is a list of .qml, .js and .mjs files to be added to the QML module. This option has exactly the same effect as the QML_FILES option of the <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module()</db:link> command, including the automatic compilation to bytecode and lint processing.</db:para>
<db:para>The NO_CACHEGEN and NO_LINT options also have the same effect as they do for <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module()</db:link>. They disable the bytecode compilation and lint processing for the files listed with QML_FILES. This behavior can also be specified just for individual files using <db:link xlink:href="qt-target-qml-sources.xml#source-file-properties">source file properties</db:link>.</db:para>
<db:para>NO_QMLDIR_TYPES prevents the QML_FILES from being added as types to the generated <db:link xlink:href="qt-add-qml-module.xml#auto-generating-qmldir-and-typeinfo-files">qmldir</db:link> file.</db:para>
<db:para>RESOURCES has exactly the same effect as the RESOURCES option of the <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module()</db:link> command. It provides a list of files to be added to the target as ordinary resources. These files are typically things like images, shaders, etc. that the QML code refers to in some way.</db:para>
<db:anchor xml:id="prefix"/>
<db:para>Files added to the module via QML_FILES or RESOURCES will be placed under the same resource prefix and target path as they would if they were added by the <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module()</db:link> command. This can be overridden by providing a different location with the PREFIX option. The value following the PREFIX keyword will be used directly, without appending any target path. The final resource path of each file will be the prefix, plus the path of the file below the CMAKE_CURRENT_SOURCE_DIR. The <db:link xlink:href="qt-target-qml-sources.xml#qt-resource-alias">QT_RESOURCE_ALIAS</db:link> source file property can also be used to override that relative path.</db:para>
<db:programlisting language="cpp" role="bad">qt_add_qml_module(backing
    URI Example
    VERSION 1.0
    RESOURCE_PREFIX /my.company.com/imports
)

qt_target_qml_sources(backing
    QML_FILES special/First.qml
    RESOURCES icons/logo.png
)

qt_target_qml_sources(backing
    PREFIX /other.company.com/debugging
    QML_FILES Inspector.qml
)
</db:programlisting>
<db:para>In the above example, the backing target's resources will end up with the following contents:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>/my.company.com/imports/Example/special/First.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>/my.company.com/imports/Example/icons/logo.png</db:para>
</db:listitem>
<db:listitem>
<db:para>/other.company.com/debugging/Inspector.qml</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>OUTPUT_TARGETS is also analogous to the same option for <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module()</db:link>. Use it to specify the name of a variable in which to store any additional targets created for static builds. If the target will be installed, these additional targets will also need to be installed to satisfy linking requirements.</db:para>
<db:anchor xml:id="qml-source-file-properties"/>
</db:section>
<db:section xml:id="source-file-properties">
<db:title>Source File Properties</db:title>
<db:para>A number of source file properties can be used to influence how each individual .qml file is treated at various points in the QML module processing. These override any higher level options specified in calls to qt_target_qml_sources() or <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module()</db:link>. All of these properties need to be set before the files are added with either of those two commands.</db:para>
<db:para>QT_QML_SKIP_QMLLINT can be set to TRUE on a source file to prevent it from being included in the <db:link xlink:href="qt-add-qml-module.xml#linting-qml-sources">automatic qmllint processing</db:link>. By default, all .qml files will be included in the target's lint run, but this option can be used to exclude specific files.</db:para>
<db:para>QT_QML_SKIP_CACHEGEN does a similar thing, preventing a source file from being compiled to byte code when this property is set to TRUE. Note that the file will still be added to the target as a resource in uncompiled form (see <db:link xlink:href="qt-add-qml-module.xml#caching-compiled-qml-sources">Caching compiled QML sources</db:link>).</db:para>
<db:para>Set the QT_QML_SKIP_QMLDIR_ENTRY source file property to TRUE to prevent that QML or JavaScript file from being added as a type to the QML module's qmldir file (see <db:link xlink:href="qt-add-qml-module.xml#auto-generating-qmldir-and-typeinfo-files">Auto-generating qmldir and typeinfo files</db:link>). This would normally be used for a file that does not expose a public type, such as a private JavaScript file. For JavaScript files with upper case names that are neither ECMAScript modules nor declared as stateless libraries via .pragma library you should consider this option. If you include them in the qmldir file, they are re-evaluated in the scope of every QML document that explicitly or implicitly imports the module they belong to.</db:para>
<db:para>By default, when <db:link xlink:href="qt-add-qml-module.xml#auto-generating-qmldir-and-typeinfo-files">generating the qmldir file</db:link>, a single type entry will be generated for each .qml file that provides a type. It will be given a version number X.0 where X is the major version of the QML module. If the QML module has any PAST_MAJOR_VERSIONS set, the same pattern will be applied to those too, appending X.0 for each past major version X. For situations where a file needs to provide type entries for a different set of versions instead (e.g. it was first added in a minor patch version after the .0 release), specify those versions in the source file's QT_QML_SOURCE_VERSIONS property. One type entry will be created for each version.</db:para>
<db:para>If the type that a .qml file provides is a singleton, set its QT_QML_SINGLETON_TYPE property to TRUE. Similarly, the file's QT_QML_INTERNAL_TYPE source property can be set to TRUE to indicate that the type it provides is an internal one. The name of the type itself can also be overridden using the QT_QML_SOURCE_TYPENAME property. All three of these will be reflected in the file's type entries in the <db:link xlink:href="qt-add-qml-module.xml#auto-generating-qmldir-and-typeinfo-files">generated qmldir file</db:link>. The source properties must be set before <db:link xlink:href="qt-add-qml-module.xml">creating</db:link> the module the singleton belongs to.</db:para>
<db:anchor xml:id="qt-resource-alias"/>
<db:para>All files listed with QML_FILES or RESOURCES will be added to the target's resources. Their location in the resources consists of a base point and a relative path. The base point defaults to the concatenation of the QML module's resource prefix and its target path, but these can be overridden with the <db:link xlink:href="qt-target-qml-sources.xml#prefix">PREFIX</db:link> argument. The relative path will default to the path of the file relative to the target's SOURCE_DIR target property. This relative path can be overridden by setting the QT_RESOURCE_ALIAS property on the source file. This is commonly used to collect files from different directories and have them appear in the resources under a common location. However, since Qt 6.8, enabling <db:link xlink:href="qt-cmake-policy-qtp0004.xml">QTP0004</db:link> is often a better option if the goal is that all files of the QML module can be found in the implicit import. In cases where such a manual setup is still necessary, it is advisable to pass NO_GENERATE_EXTRA_QMLDIRS to qt_add_qml_module, as the extra qmldirs do not take resource file aliasing into consideration.</db:para>
<db:anchor xml:id="qt-target-qml-sources-example"/>
<db:programlisting language="cpp">set_source_files_properties(nested/way/down/File.qml PROPERTIES
    QT_RESOURCE_ALIAS File.qml
)
set_source_files_properties(TemplateFile.qml PROPERTIES
    QT_RESOURCE_ALIAS templates/File.qml
    QT_QML_SKIP_QMLDIR_ENTRY TRUE
    QT_QML_SKIP_QMLLINT TRUE
    QT_QML_SKIP_CACHEGEN TRUE
)
set_source_files_properties(FunnySingleton.qml PROPERTIES
    QT_QML_SINGLETON_TYPE TRUE
)
qt_add_qml_module(qt_target_qml_sources_example
    URI Example
    VERSION 2.3
    RESOURCE_PREFIX /my.company.com/imports
    NO_GENERATE_EXTRA_QMLDIRS
    QML_FILES
        nested/way/down/File.qml
        TemplateFile.qml
        FunnySingleton.qml
)

set_source_files_properties(some_old_thing.qml PROPERTIES
    QT_QML_SOURCE_VERSIONS &quot;1.1;2.0&quot;
    QT_QML_SOURCE_TYPENAME OldThing
)
set_source_files_properties(../../../images/button-types.png PROPERTIES
    QT_RESOURCE_ALIAS button-types.png
)
qt_target_qml_sources(qt_target_qml_sources_example
    QML_FILES some_old_thing.qml
    RESOURCES
        ../../../images/button-types.png
        doc/README.txt
)
</db:programlisting>
<db:para>In the above example, the qt_target_qml_sources_example target's resources will end up with the following contents:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>/my.company.com/imports/Example/File.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>/my.company.com/imports/Example/FunnySingleton.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>/my.company.com/imports/Example/templates/File.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>/my.company.com/imports/Example/some_old_thing.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>/my.company.com/imports/Example/button-types.png</db:para>
</db:listitem>
<db:listitem>
<db:para>/my.company.com/imports/Example/doc/README.txt</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The generated qmldir file will contain the following type entries:</db:para>
<db:programlisting language="cpp" role="bad">File 2.0 File.qml
singleton FunnySingleton 2.0 FunnySingleton.qml
OldThing 1.1 some_old_thing.qml
OldThing 2.0 some_old_thing.qml
</db:programlisting>
<db:note>
<db:para>The source FunnySingleton.qml file must already contain the pragma Singleton statement. Setting the QT_QML_SINGLETON_TYPE source property does not automatically generate the pragma.</db:para>
</db:note>
<db:programlisting language="qml">pragma Singleton
import QtQml

QtObject {}
</db:programlisting>
</db:section>
</db:article>
