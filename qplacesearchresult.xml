<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPlaceSearchResult Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qplacesearchresult.xml">QPlaceSearchResult</db:link> class is the base class for search results.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPlaceSearchResult</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qplaceproposedsearchresult.xml" xlink:role="class">QPlaceProposedSearchResult</db:link> and <db:link xlink:href="qplaceresult.xml" xlink:role="class">QPlaceResult</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPlaceSearchResult is part of <db:simplelist><db:member>QtLocation-places</db:member><db:member>QtLocation-places-data</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A list of search results can be retrieved from the <db:link xlink:href="qplacesearchreply.xml">QPlaceSearchReply</db:link> after it has successfully completed the request. Common to all search results are the <db:link xlink:href="qplacesearchresult.xml#title">title</db:link> and <db:link xlink:href="qplacesearchresult.xml#icon">icon</db:link>, which can be used to present the search result to the user.</db:para>
<db:para>The intended usage is that depending on the <db:link xlink:href="qplacesearchresult.xml#type">type</db:link>, the search result can be converted to a more detailed subclass like so:</db:para>
<db:programlisting language="cpp">if (result.type() == QPlaceSearchResult::PlaceResult) {
    QPlaceResult placeResult = result;
    qDebug() &lt;&lt; placeResult.place().name();
    qDebug() &lt;&lt; placeResult.place().location().coordinate();
    qDebug() &lt;&lt; placeResult.distance();
}
</db:programlisting>
<db:para>The implementation is handled in such a way that object slicing is not an issue. It is not expected that client applications or backend plugins instantiate a <db:link xlink:href="qplacesearchresult.xml">QPlaceSearchResult</db:link> directly, but rather client applications simply convert to search result subclasses and backend plugins only instantiate subclasses.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaceresult.xml">QPlaceResult</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SearchResultType-enum">
<db:title>enum QPlaceSearchResult::SearchResultType</db:title>
<db:para>Defines the type of search result</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacesearchresult.xml">QPlaceSearchResult</db:link></db:emphasis>::UnknownSearchResult</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The contents of the search result are unknown.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacesearchresult.xml">QPlaceSearchResult</db:link></db:emphasis>::PlaceResult</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The search result contains a place.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacesearchresult.xml">QPlaceSearchResult</db:link></db:emphasis>::ProposedSearchResult</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The search result contains a proposed search which may be relevant.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPlaceSearchResult">
<db:title>QPlaceSearchResult::QPlaceSearchResult()</db:title>
<db:para>Constructs a new search result.</db:para>
</db:section>
<db:section xml:id="QPlaceSearchResult-1">
<db:title>QPlaceSearchResult::QPlaceSearchResult(const QPlaceSearchResult &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code></db:para>
</db:section>
<db:section xml:id="dtor.QPlaceSearchResult">
<db:title>[virtual noexcept] QPlaceSearchResult::~QPlaceSearchResult()</db:title>
<db:para>Destroys the search result.</db:para>
</db:section>
<db:section xml:id="icon">
<db:title>QPlaceIcon QPlaceSearchResult::icon() const</db:title>
<db:para>Returns an icon that can be used to represent the search result.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchresult.xml#setIcon">setIcon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIcon">
<db:title>void QPlaceSearchResult::setIcon(const QPlaceIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:para>Sets the icon of the search result to <db:code role="parameter">icon</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchresult.xml#icon">icon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTitle">
<db:title>void QPlaceSearchResult::setTitle(const QString &amp;<db:emphasis>title</db:emphasis>)</db:title>
<db:para>Sets the title of the search result to <db:code role="parameter">title</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchresult.xml#title">title</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title">
<db:title>QString QPlaceSearchResult::title() const</db:title>
<db:para>Returns the title of the search result. This string can be used to display the search result to the user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacesearchresult.xml#setTitle">setTitle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>QPlaceSearchResult::SearchResultType QPlaceSearchResult::type() const</db:title>
<db:para>Returns the result type.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QPlaceSearchResult::operator!=(const QPlaceSearchResult &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> not equal to this search result, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QPlaceSearchResult &amp;QPlaceSearchResult::operator=(const QPlaceSearchResult &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this search result and returns a reference to this search result.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QPlaceSearchResult::operator==(const QPlaceSearchResult &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">other</db:code> is equal to this search result, otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
