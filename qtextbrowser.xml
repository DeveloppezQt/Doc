<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextBrowser Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextbrowser.xml">QTextBrowser</db:link> class provides a rich text browser with hypertext navigation.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextBrowser</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtextedit.xml" xlink:role="class">QTextEdit</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextBrowser is part of <db:simplelist><db:member>richtext-processing</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class extends <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> (in read-only mode), adding some navigation functionality so that users can follow links in hypertext documents.</db:para>
<db:para>If you want to provide your users with an editable rich text editor, use <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>. If you want a text browser without hypertext navigation use <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>, and use <db:link xlink:href="qtextedit.xml#readOnly-prop">QTextEdit::setReadOnly</db:link>() to disable editing. If you just need to display a small piece of rich text use <db:link xlink:href="qlabel.xml">QLabel</db:link>.</db:para>
<db:section xml:id="document-source-and-contents">
<db:title>Document Source and Contents</db:title>
<db:para>The contents of <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> are set with <db:link xlink:href="qtextedit.xml#html-prop">setHtml</db:link>() or <db:link xlink:href="qtextedit.xml#setPlainText">setPlainText</db:link>(), but <db:link xlink:href="qtextbrowser.xml">QTextBrowser</db:link> also implements the <db:link xlink:href="qtextbrowser.xml#setSource">setSource</db:link>() function, making it possible to use a named document as the source text. The name is looked up in a list of search paths and in the directory of the current document factory.</db:para>
<db:para>If a document name ends with an anchor (for example, &quot;#anchor&quot;), the text browser automatically scrolls to that position (using <db:link xlink:href="qtextedit.xml#scrollToAnchor">scrollToAnchor</db:link>()). When the user clicks on a hyperlink, the browser will call <db:link xlink:href="qtextbrowser.xml#setSource">setSource</db:link>() itself with the link's href value as argument. You can track the current source by connecting to the <db:link xlink:href="qtextbrowser.xml#sourceChanged">sourceChanged</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="navigation">
<db:title>Navigation</db:title>
<db:para><db:link xlink:href="qtextbrowser.xml">QTextBrowser</db:link> provides <db:link xlink:href="qtextbrowser.xml#backward">backward</db:link>() and <db:link xlink:href="qtextbrowser.xml#forward">forward</db:link>() slots which you can use to implement Back and Forward buttons. The <db:link xlink:href="qtextbrowser.xml#home">home</db:link>() slot sets the text to the very first document displayed. The <db:link xlink:href="qtextbrowser.xml#anchorClicked">anchorClicked</db:link>() signal is emitted when the user clicks an anchor. To override the default navigation behavior of the browser, call the <db:link xlink:href="qtextbrowser.xml#setSource">setSource</db:link>() function to supply new document text in a slot connected to this signal.</db:para>
<db:para>If you want to load documents stored in the Qt resource system use qrc as the scheme in the URL to load. For example, for the document resource path :/docs/index.html use qrc:/docs/index.html as the URL with <db:link xlink:href="qtextbrowser.xml#setSource">setSource</db:link>().</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextedit.xml">QTextEdit</db:link></db:member>
<db:member><db:link xlink:href="qtextdocument.xml">QTextDocument</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="modified-prop">
<db:title>[read-only] modified : const bool</db:title>
<db:para>This property holds whether the contents of the text browser have been modified</db:para>
</db:section>
<db:section xml:id="openExternalLinks-prop">
<db:title>openExternalLinks : bool</db:title>
<db:para>Specifies whether <db:link xlink:href="qtextbrowser.xml">QTextBrowser</db:link> should automatically open links to external sources using <db:link xlink:href="qdesktopservices.xml#openUrl">QDesktopServices::openUrl</db:link>() instead of emitting the <db:link xlink:href="qtextbrowser.xml#anchorClicked">anchorClicked</db:link> signal. Links are considered external if their scheme is neither file or qrc.</db:para>
<db:para>The default value is false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">openExternalLinks</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOpenExternalLinks</db:emphasis>(<db:type>bool</db:type> <db:emphasis>open</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="openLinks-prop">
<db:title>openLinks : bool</db:title>
<db:para>This property specifies whether <db:link xlink:href="qtextbrowser.xml">QTextBrowser</db:link> should automatically open links the user tries to activate by mouse or keyboard.</db:para>
<db:para>Regardless of the value of this property the <db:link xlink:href="qtextbrowser.xml#anchorClicked">anchorClicked</db:link> signal is always emitted.</db:para>
<db:para>The default value is true.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">openLinks</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOpenLinks</db:emphasis>(<db:type>bool</db:type> <db:emphasis>open</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="readOnly-prop">
<db:title>readOnly : const bool</db:title>
<db:para>This property holds whether the text browser is read-only</db:para>
<db:para>By default, this property is true.</db:para>
</db:section>
<db:section xml:id="searchPaths-prop">
<db:title>searchPaths : QStringList</db:title>
<db:para>This property holds the search paths used by the text browser to find supporting content</db:para>
<db:para><db:link xlink:href="qtextbrowser.xml">QTextBrowser</db:link> uses this list to locate images and documents.</db:para>
<db:para>By default, this property contains an empty string list.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold">searchPaths</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSearchPaths</db:emphasis>(const <db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> &amp;<db:emphasis>paths</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : QUrl</db:title>
<db:para>This property holds the name of the displayed document.</db:para>
<db:para>This is a an invalid url if no document is displayed or if the source is unknown.</db:para>
<db:para>When setting this property <db:link xlink:href="qtextbrowser.xml">QTextBrowser</db:link> tries to find a document with the specified name in the paths of the <db:link xlink:href="qtextbrowser.xml#searchPaths-prop">searchPaths</db:link> property and directory of the current source, unless the value is an absolute file path. It also checks for optional anchors and scrolls the document accordingly</db:para>
<db:para>If the first tag in the document is &lt;qt type=detail&gt;, the document is displayed as a popup rather than as new document in the browser window itself. Otherwise, the document is displayed normally in the text browser with the text set to the contents of the named document with <db:link xlink:href="qtextdocument.xml#setHtml">QTextDocument::setHtml</db:link>() or <db:link xlink:href="qtextdocument.xml#setMarkdown">QTextDocument::setMarkdown</db:link>(), depending on whether the filename ends with any of the known Markdown file extensions.</db:para>
<db:para>If you would like to avoid automatic type detection and specify the type explicitly, call <db:link xlink:href="qtextbrowser.xml#setSource">setSource</db:link>() rather than setting this property.</db:para>
<db:para>By default, this property contains an empty URL.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">source</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qtextbrowser.xml#setSource">setSource</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>, <db:type><db:link xlink:href="qtextdocument.xml#ResourceType-enum">QTextDocument::ResourceType</db:link></db:type> <db:emphasis>type</db:emphasis> = QTextDocument::UnknownResource)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sourceType-prop">
<db:title>[read-only] sourceType : const QTextDocument::ResourceType</db:title>
<db:para>This property holds the type of the displayed document</db:para>
<db:para>This is <db:link xlink:href="qtextdocument.xml#ResourceType-enum">QTextDocument::UnknownResource</db:link> if no document is displayed or if the type of the source is unknown. Otherwise it holds the type that was detected, or the type that was specified when <db:link xlink:href="qtextbrowser.xml#setSource">setSource</db:link>() was called.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtextdocument.xml#ResourceType-enum">QTextDocument::ResourceType</db:link></db:type> <db:emphasis role="bold">sourceType</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="undoRedoEnabled-prop">
<db:title>undoRedoEnabled : const bool</db:title>
<db:para>This property holds whether the text browser supports undo/redo operations</db:para>
<db:para>By default, this property is false.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextBrowser">
<db:title>[explicit] QTextBrowser::QTextBrowser(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs an empty <db:link xlink:href="qtextbrowser.xml">QTextBrowser</db:link> with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="anchorClicked">
<db:title>void QTextBrowser::anchorClicked(const QUrl &amp;<db:emphasis>link</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user clicks an anchor. The URL referred to by the anchor is passed in <db:code role="parameter">link</db:code>.</db:para>
<db:para>Note that the browser will automatically handle navigation to the location specified by <db:code role="parameter">link</db:code> unless the <db:link xlink:href="qtextbrowser.xml#openLinks-prop">openLinks</db:link> property is set to false or you call <db:link xlink:href="qtextbrowser.xml#setSource">setSource</db:link>() in a slot connected. This mechanism is used to override the default navigation features of the browser.</db:para>
</db:section>
<db:section xml:id="backward">
<db:title>[virtual] void QTextBrowser::backward()</db:title>
<db:para>Changes the document displayed to the previous document in the list of documents built by navigating links. Does nothing if there is no previous document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextbrowser.xml#forward">forward</db:link>()</db:member>
<db:member><db:link xlink:href="qtextbrowser.xml#backwardAvailable">backwardAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="backwardAvailable">
<db:title>void QTextBrowser::backwardAvailable(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:para>This signal is emitted when the availability of <db:link xlink:href="qtextbrowser.xml#backward">backward</db:link>() changes. <db:code role="parameter">available</db:code> is false when the user is at <db:link xlink:href="qtextbrowser.xml#home">home</db:link>(); otherwise it is true.</db:para>
</db:section>
<db:section xml:id="backwardHistoryCount">
<db:title>int QTextBrowser::backwardHistoryCount() const</db:title>
<db:para>Returns the number of locations backward in the history.</db:para>
</db:section>
<db:section xml:id="clearHistory">
<db:title>void QTextBrowser::clearHistory()</db:title>
<db:para>Clears the history of visited documents and disables the forward and backward navigation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextbrowser.xml#backward">backward</db:link>()</db:member>
<db:member><db:link xlink:href="qtextbrowser.xml#forward">forward</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="doSetSource">
<db:title>[virtual protected] void QTextBrowser::doSetSource(const QUrl &amp;<db:emphasis>url</db:emphasis>, QTextDocument::ResourceType <db:emphasis>type</db:emphasis> = QTextDocument::UnknownResource)</db:title>
<db:para>Attempts to load the document at the given <db:code role="parameter">url</db:code> with the specified <db:code role="parameter">type</db:code>.</db:para>
<db:para><db:link xlink:href="qtextbrowser.xml#setSource">setSource</db:link>() calls doSetSource. In Qt 5, <db:link xlink:href="qtextbrowser.xml#setSource">setSource</db:link>(const <db:link xlink:href="qurl.xml">QUrl</db:link> &amp;url) was virtual. In Qt 6, doSetSource() is virtual instead, so that it can be overridden in subclasses.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QTextBrowser::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#event" role="function">QAbstractScrollArea::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusNextPrevChild">
<db:title>[override virtual protected] bool QTextBrowser::focusNextPrevChild(bool <db:emphasis>next</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qtextedit.xml#focusNextPrevChild" role="function">QTextEdit::focusNextPrevChild(bool next)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QTextBrowser::focusOutEvent(QFocusEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qtextedit.xml#focusOutEvent" role="function">QTextEdit::focusOutEvent(QFocusEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="forward">
<db:title>[virtual] void QTextBrowser::forward()</db:title>
<db:para>Changes the document displayed to the next document in the list of documents built by navigating links. Does nothing if there is no next document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextbrowser.xml#backward">backward</db:link>()</db:member>
<db:member><db:link xlink:href="qtextbrowser.xml#forwardAvailable">forwardAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="forwardAvailable">
<db:title>void QTextBrowser::forwardAvailable(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:para>This signal is emitted when the availability of <db:link xlink:href="qtextbrowser.xml#forward">forward</db:link>() changes. <db:code role="parameter">available</db:code> is true after the user navigates <db:link xlink:href="qtextbrowser.xml#backward">backward</db:link>() and false when the user navigates or goes <db:link xlink:href="qtextbrowser.xml#forward">forward</db:link>().</db:para>
</db:section>
<db:section xml:id="forwardHistoryCount">
<db:title>int QTextBrowser::forwardHistoryCount() const</db:title>
<db:para>Returns the number of locations forward in the history.</db:para>
</db:section>
<db:section xml:id="highlighted">
<db:title>void QTextBrowser::highlighted(const QUrl &amp;<db:emphasis>link</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user has selected but not activated an anchor in the document. The URL referred to by the anchor is passed in <db:code role="parameter">link</db:code>.</db:para>
</db:section>
<db:section xml:id="historyChanged">
<db:title>void QTextBrowser::historyChanged()</db:title>
<db:para>This signal is emitted when the history changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextbrowser.xml#historyTitle">historyTitle</db:link>()</db:member>
<db:member><db:link xlink:href="qtextbrowser.xml#historyUrl">historyUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="historyTitle">
<db:title>QString QTextBrowser::historyTitle(int <db:emphasis>i</db:emphasis>) const</db:title>
<db:para>Returns the <db:link xlink:href="qtextedit.xml#documentTitle-prop">documentTitle</db:link>() of the HistoryItem.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Input</db:para>
</db:th>
<db:th>
<db:para>Return</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code role="parameter">i</db:code> &lt; 0</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtextbrowser.xml#backward">backward</db:link>() history</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code role="parameter">i</db:code> == 0</db:para>
</db:td>
<db:td>
<db:para>current, see <db:link xlink:href="qtextbrowser.xml#source-prop">QTextBrowser::source</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code role="parameter">i</db:code> &gt; 0</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtextbrowser.xml#forward">forward</db:link>() history</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:programlisting language="cpp">backaction.setToolTip(browser.historyTitle(-1));
forwardaction.setToolTip(browser.historyTitle(+1));
</db:programlisting>
</db:section>
<db:section xml:id="historyUrl">
<db:title>QUrl QTextBrowser::historyUrl(int <db:emphasis>i</db:emphasis>) const</db:title>
<db:para>Returns the url of the HistoryItem.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Input</db:para>
</db:th>
<db:th>
<db:para>Return</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code role="parameter">i</db:code> &lt; 0</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtextbrowser.xml#backward">backward</db:link>() history</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code role="parameter">i</db:code> == 0</db:para>
</db:td>
<db:td>
<db:para>current, see <db:link xlink:href="qtextbrowser.xml#source-prop">QTextBrowser::source</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code role="parameter">i</db:code> &gt; 0</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtextbrowser.xml#forward">forward</db:link>() history</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="home">
<db:title>[virtual] void QTextBrowser::home()</db:title>
<db:para>Changes the document displayed to be the first document from the history.</db:para>
</db:section>
<db:section xml:id="isBackwardAvailable">
<db:title>bool QTextBrowser::isBackwardAvailable() const</db:title>
<db:para>Returns true if the text browser can go backward in the document history using <db:link xlink:href="qtextbrowser.xml#backward">backward</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextbrowser.xml#backwardAvailable">backwardAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qtextbrowser.xml#backward">backward</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isForwardAvailable">
<db:title>bool QTextBrowser::isForwardAvailable() const</db:title>
<db:para>Returns true if the text browser can go forward in the document history using <db:link xlink:href="qtextbrowser.xml#forward">forward</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextbrowser.xml#forwardAvailable">forwardAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qtextbrowser.xml#forward">forward</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QTextBrowser::keyPressEvent(QKeyEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qtextedit.xml#keyPressEvent" role="function">QTextEdit::keyPressEvent(QKeyEvent *e)</db:link>.</db:para>
<db:para>The event <db:code role="parameter">ev</db:code> is used to provide the following keyboard shortcuts:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Keypress</db:para>
</db:th>
<db:th>
<db:para>Action</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Alt+Left Arrow</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtextbrowser.xml#backward">backward</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Alt+Right Arrow</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtextbrowser.xml#forward">forward</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Alt+Up Arrow</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtextbrowser.xml#home">home</db:link>()</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="loadResource">
<db:title>[override virtual] QVariant QTextBrowser::loadResource(int <db:emphasis>type</db:emphasis>, const QUrl &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qtextedit.xml#loadResource" role="function">QTextEdit::loadResource(int type, const QUrl &amp;name)</db:link>.</db:para>
<db:para>This function is called when the document is loaded and for each image in the document. The <db:code role="parameter">type</db:code> indicates the type of resource to be loaded. An invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> is returned if the resource cannot be loaded.</db:para>
<db:para>The default implementation ignores <db:code role="parameter">type</db:code> and tries to locate the resources by interpreting <db:code role="parameter">name</db:code> as a file name. If it is not an absolute path it tries to find the file in the paths of the <db:link xlink:href="qtextbrowser.xml#searchPaths-prop">searchPaths</db:link> property and in the same directory as the current source. On success, the result is a <db:link xlink:href="qvariant.xml">QVariant</db:link> that stores a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> with the contents of the file.</db:para>
<db:para>If you reimplement this function, you can return other <db:link xlink:href="qvariant.xml">QVariant</db:link> types. The table below shows which variant types are supported depending on the resource type:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>ResourceType</db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Type</db:link></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtextdocument.xml#ResourceType-enum">QTextDocument::HtmlResource</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> or <db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtextdocument.xml#ResourceType-enum">QTextDocument::ImageResource</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qimage.xml">QImage</db:link>, <db:link xlink:href="qpixmap.xml">QPixmap</db:link> or <db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtextdocument.xml#ResourceType-enum">QTextDocument::StyleSheetResource</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> or <db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtextdocument.xml#ResourceType-enum">QTextDocument::MarkdownResource</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> or <db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QTextBrowser::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qtextedit.xml#mouseMoveEvent" role="function">QTextEdit::mouseMoveEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QTextBrowser::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qtextedit.xml#mousePressEvent" role="function">QTextEdit::mousePressEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QTextBrowser::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qtextedit.xml#mouseReleaseEvent" role="function">QTextEdit::mouseReleaseEvent(QMouseEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QTextBrowser::paintEvent(QPaintEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qtextedit.xml#paintEvent" role="function">QTextEdit::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="reload">
<db:title>[virtual] void QTextBrowser::reload()</db:title>
<db:para>Reloads the current set source.</db:para>
</db:section>
<db:section xml:id="setSource">
<db:title>void QTextBrowser::setSource(const QUrl &amp;<db:emphasis>url</db:emphasis>, QTextDocument::ResourceType <db:emphasis>type</db:emphasis> = QTextDocument::UnknownResource)</db:title>
<db:para>Attempts to load the document at the given <db:code role="parameter">url</db:code> with the specified <db:code role="parameter">type</db:code>.</db:para>
<db:para>If <db:code role="parameter">type</db:code> is <db:link xlink:href="qtextdocument.xml#ResourceType-enum">UnknownResource</db:link> (the default), the document type will be detected: that is, if the url ends with an extension of .md, .mkd or .markdown, the document will be loaded via <db:link xlink:href="qtextdocument.xml#setMarkdown">QTextDocument::setMarkdown</db:link>(); otherwise it will be loaded via <db:link xlink:href="qtextdocument.xml#setHtml">QTextDocument::setHtml</db:link>(). This detection can be bypassed by specifying the <db:code role="parameter">type</db:code> explicitly.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qtextbrowser.xml#source-prop">source</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextbrowser.xml#source-prop">source</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceChanged">
<db:title>void QTextBrowser::sourceChanged(const QUrl &amp;<db:emphasis>src</db:emphasis>)</db:title>
<db:para>This signal is emitted when the source has changed, <db:code role="parameter">src</db:code> being the new source.</db:para>
<db:para>Source changes happen both programmatically when calling <db:link xlink:href="qtextbrowser.xml#setSource">setSource</db:link>(), <db:link xlink:href="qtextbrowser.xml#forward">forward</db:link>(), <db:link xlink:href="qtextbrowser.xml#backward">backward</db:link>() or <db:link xlink:href="qtextbrowser.xml#home">home</db:link>() or when the user clicks on links or presses the equivalent key sequences.</db:para>
</db:section>
</db:section>
</db:article>
