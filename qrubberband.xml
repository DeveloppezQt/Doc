<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QRubberBand Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qrubberband.xml">QRubberBand</db:link> class provides a rectangle or line that can indicate a selection or a boundary.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRubberBand</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A rubber band is often used to show a new bounding area (as in a <db:link xlink:href="qsplitter.xml">QSplitter</db:link> or a <db:link xlink:href="qdockwidget.xml">QDockWidget</db:link> that is undocking). Historically this has been implemented using a <db:link xlink:href="qpainter.xml">QPainter</db:link> and XOR, but this approach doesn't always work properly since rendering can happen in the window below the rubber band, but before the rubber band has been &quot;erased&quot;.</db:para>
<db:para>You can create a <db:link xlink:href="qrubberband.xml">QRubberBand</db:link> whenever you need to render a rubber band around a given area (or to represent a single line), then call <db:link xlink:href="qrubberband.xml#setGeometry">setGeometry</db:link>(), <db:link xlink:href="qrubberband.xml#move">move</db:link>() or <db:link xlink:href="qrubberband.xml#resize">resize</db:link>() to position and size it. A common pattern is to do this in conjunction with mouse events. For example:</db:para>
<db:programlisting language="cpp">void Widget::mousePressEvent(QMouseEvent *event)
{
    origin = event-&gt;pos();
    if (!rubberBand)
        rubberBand = new QRubberBand(QRubberBand::Rectangle, this);
    rubberBand-&gt;setGeometry(QRect(origin, QSize()));
    rubberBand-&gt;show();
}

void Widget::mouseMoveEvent(QMouseEvent *event)
{
    rubberBand-&gt;setGeometry(QRect(origin, event-&gt;pos()).normalized());
}

void Widget::mouseReleaseEvent(QMouseEvent *event)
{
    rubberBand-&gt;hide();
    // determine selection, for example using QRect::intersects()
    // and QRect::contains().
}
</db:programlisting>
<db:para>If you pass a parent to <db:link xlink:href="qrubberband.xml">QRubberBand</db:link>'s constructor, the rubber band will display only inside its parent, but stays on top of other child widgets. If no parent is passed, <db:link xlink:href="qrubberband.xml">QRubberBand</db:link> will act as a top-level widget.</db:para>
<db:para>Call <db:link xlink:href="qwidget.xml#show">show</db:link>() to make the rubber band visible; also when the rubber band is not a top-level. Hiding or destroying the widget will make the rubber band disappear. The rubber band can be a <db:link xlink:href="qrubberband.xml#Shape-enum">Rectangle</db:link> or a <db:link xlink:href="qrubberband.xml#Shape-enum">Line</db:link> (vertical or horizontal), depending on the <db:link xlink:href="qrubberband.xml#shape">shape</db:link>() it was given when constructed.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Shape-enum">
<db:title>enum QRubberBand::Shape</db:title>
<db:para>This enum specifies what shape a <db:link xlink:href="qrubberband.xml">QRubberBand</db:link> should have. This is a drawing hint that is passed down to the style system, and can be interpreted by each <db:link xlink:href="qstyle.xml">QStyle</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrubberband.xml">QRubberBand</db:link></db:emphasis>::Line</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qrubberband.xml">QRubberBand</db:link> can represent a vertical or horizontal line. Geometry is still given in rect() and the line will fill the given geometry on most styles.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrubberband.xml">QRubberBand</db:link></db:emphasis>::Rectangle</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qrubberband.xml">QRubberBand</db:link> can represent a rectangle. Some styles will interpret this as a filled (often semi-transparent) rectangle, or a rectangular outline.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRubberBand">
<db:title>[explicit] QRubberBand::QRubberBand(QRubberBand::Shape <db:emphasis>s</db:emphasis>, QWidget *<db:emphasis>p</db:emphasis> = 0)</db:title>
<db:para>Constructs a rubber band of shape <db:code role="parameter">s</db:code>, with parent <db:code role="parameter">p</db:code>.</db:para>
<db:para>By default a rectangular rubber band (<db:code role="parameter">s</db:code> is <db:code>Rectangle</db:code>) will use a mask, so that a small border of the rectangle is all that is visible. Some styles (e.g., native Mac OS X) will change this and call QWidget::setWindowOpacity() to make a semi-transparent filled selection rectangle.</db:para>
</db:section>
<db:section xml:id="dtor.QRubberBand">
<db:title>[virtual noexcept] QRubberBand::~QRubberBand()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QRubberBand::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QRubberBand::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[protected] void QRubberBand::initStyleOption(QStyleOptionRubberBand *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qrubberband.xml">QRubberBand</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptionrubberband.xml">QStyleOptionRubberBand</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="move">
<db:title>void QRubberBand::move(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Moves the rubberband to point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrubberband.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="move-1">
<db:title>void QRubberBand::move(const QPoint &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Moves the rubberband to point <db:code role="parameter">p</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrubberband.xml#resize">resize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveEvent">
<db:title>[override virtual protected] void QRubberBand::moveEvent(<db:emphasis>QMoveEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#moveEvent" role="function">QWidget::moveEvent(QMoveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QRubberBand::paintEvent(<db:emphasis>QPaintEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="resize">
<db:title>void QRubberBand::resize(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Resizes the rubberband so that its width is <db:code role="parameter">width</db:code>, and its height is <db:code role="parameter">height</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrubberband.xml#move">move</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resize-1">
<db:title>void QRubberBand::resize(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Resizes the rubberband so that its new size is <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrubberband.xml#move">move</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QRubberBand::resizeEvent(<db:emphasis>QResizeEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="setGeometry">
<db:title>void QRubberBand::setGeometry(const QRect &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>Sets the geometry of the rubber band to <db:code role="parameter">rect</db:code>, specified in the coordinate system of its parent widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QWidget::geometry</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry-1">
<db:title>void QRubberBand::setGeometry(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the geometry of the rubberband to the rectangle whose top-left corner lies at the point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), and with dimensions specified by <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>. The geometry is specified in the parent widget's coordinate system.</db:para>
</db:section>
<db:section xml:id="shape">
<db:title>QRubberBand::Shape QRubberBand::shape() const</db:title>
<db:para>Returns the shape of this rubber band. The shape can only be set upon construction.</db:para>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QRubberBand::showEvent(QShowEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
