<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>PathView QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Lays out model-provided items on a path.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-item.xml">Item</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>PathView is part of <db:simplelist><db:member>qtquick-paths</db:member><db:member>qtquick-views</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link> displays data from models created from built-in QML types like ListModel and XmlListModel, or custom model classes defined in C++ that inherit from <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link>.</db:para>
<db:para>The view has a <db:link xlink:href="qml-qtquick-pathview.xml#model-prop">model</db:link>, which defines the data to be displayed, and a <db:link xlink:href="qml-qtquick-pathview.xml#delegate-prop">delegate</db:link>, which defines how the data should be displayed. The <db:link xlink:href="qml-qtquick-pathview.xml#delegate-prop">delegate</db:link> is instantiated for each item on the <db:link xlink:href="qml-qtquick-pathview.xml#path-prop">path</db:link>. The items may be flicked to move them along the path.</db:para>
<db:para>For example, if there is a simple list model defined in a file <db:code>ContactModel.qml</db:code> like this:</db:para>
<db:programlisting language="qml">import QtQuick

ListModel {
    ListElement {
        name: &quot;Bill Jones&quot;
        icon: &quot;pics/qtlogo.png&quot;
    }
    ListElement {
        name: &quot;Jane Doe&quot;
        icon: &quot;pics/qtlogo.png&quot;
    }
    ListElement {
        name: &quot;John Smith&quot;
        icon: &quot;pics/qtlogo.png&quot;
    }
}
</db:programlisting>
<db:para>This data can be represented as a <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link>, like this:</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle {
    width: 240; height: 200

    Component {
        id: delegate
        Column {
            id: wrapper

            required property url icon
            required property string name

            opacity: PathView.isCurrentItem ? 1 : 0.5

            Image {
                anchors.horizontalCenter: nameText.horizontalCenter
                width: 64; height: 64
                source: wrapper.icon
            }
            Text {
                id: nameText
                text: wrapper.name
                font.pointSize: 16
            }
        }
    }

    PathView {
        anchors.fill: parent
        model: ContactModel {}
        delegate: delegate
        path: Path {
            startX: 120; startY: 100
            PathQuad { x: 120; y: 25; controlX: 260; controlY: 75 }
            PathQuad { x: 120; y: 100; controlX: -20; controlY: 75 }
        }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pathview.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>(Note the above example uses <db:link xlink:href="qml-qtquick-pathattribute.xml">PathAttribute</db:link> to scale and modify the opacity of the items as they rotate. This additional code can be seen in the <db:link xlink:href="qml-qtquick-pathattribute.xml">PathAttribute</db:link> documentation.)</db:para>
<db:para><db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link> does not automatically handle keyboard navigation. This is because the keys to use for navigation will depend upon the shape of the path. Navigation can be added quite simply by setting <db:code>focus</db:code> to <db:code>true</db:code> and calling <db:link xlink:href="qml-qtquick-pathview.xml#decrementCurrentIndex-method">decrementCurrentIndex</db:link>() or <db:link xlink:href="qml-qtquick-pathview.xml#incrementCurrentIndex-method">incrementCurrentIndex</db:link>(), for example to navigate using the left and right arrow keys:</db:para>
<db:programlisting language="qml">PathView {
    // ...
    focus: true
    Keys.onLeftPressed: decrementCurrentIndex()
    Keys.onRightPressed: incrementCurrentIndex()
}
</db:programlisting>
<db:para>The path view itself is a focus scope (see <db:link xlink:href="qtquick-input-focus.xml">Keyboard Focus in Qt Quick</db:link> for more details).</db:para>
<db:para>Delegates are instantiated as needed and may be destroyed at any time. State should <db:emphasis>never</db:emphasis> be stored in a delegate.</db:para>
<db:para><db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link> attaches a number of properties to the root item of the delegate, for example <db:code>PathView.isCurrentItem</db:code>. In the following example, the root delegate item can access this attached property directly as <db:code>PathView.isCurrentItem</db:code>, while the child <db:code>nameText</db:code> object must refer to this property as <db:code>wrapper.PathView.isCurrentItem</db:code>.</db:para>
<db:programlisting language="qml">    Component {
        id: delegate
        Column {
            id: wrapper

            required property url icon
            required property string name

            opacity: PathView.isCurrentItem ? 1 : 0.5

            Image {
                anchors.horizontalCenter: nameText.horizontalCenter
                width: 64; height: 64
                source: wrapper.icon
            }
            Text {
                id: nameText
                text: wrapper.name
                font.pointSize: 16
            }
        }
    }
</db:programlisting>
<db:para><db:emphasis role="bold">Note</db:emphasis> that views do not enable <db:emphasis>clip</db:emphasis> automatically. If the view is not clipped by another item or the screen, it will be necessary to set <db:emphasis>clip: true</db:emphasis> in order to have the out of view items clipped nicely.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-path.xml">Path</db:link></db:member>
<db:member><db:link xlink:href="qtquick-modelviewsdata-modelview.xml#models">QML Data Models</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link></db:member>
<db:member><db:link xlink:href="qtquick-views-example.xml">Qt Quick Examples - Views</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="highlightRangeMode-prop">
<db:title>highlightRangeMode : enumeration</db:title>
<db:bridgehead renderas="sect2">preferredHighlightBegin : real</db:bridgehead><db:bridgehead renderas="sect2">preferredHighlightEnd : real</db:bridgehead><db:para>These properties set the preferred range of the highlight (current item) within the view. The preferred values must be in the range from <db:code>0</db:code> to <db:code>1</db:code>.</db:para>
<db:para>Valid values for <db:code>highlightRangeMode</db:code> are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>PathView.NoHighlightRange</db:para>
</db:td>
<db:td>
<db:para>no range is applied: the highlight will move freely within the view.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PathView.ApplyRange</db:para>
</db:td>
<db:td>
<db:para>the view will attempt to maintain the highlight within the range, however the highlight can move outside of the range at the ends of the path or due to a mouse interaction.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PathView.StrictlyEnforceRange</db:para>
</db:td>
<db:td>
<db:para>the highlight will never move outside of the range. This means that the current item will change if a keyboard or mouse action would cause the highlight to move outside of the range.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default value is <db:emphasis>PathView.StrictlyEnforceRange</db:emphasis>.</db:para>
<db:para>Defining a highlight range is the correct way to influence where the current item ends up when the view moves. For example, if you want the currently selected item to be in the middle of the path, then set the highlight range to be 0.5,0.5 and <db:link xlink:href="qml-qtquick-pathview.xml#highlightRangeMode-prop">highlightRangeMode</db:link> to <db:emphasis>PathView.StrictlyEnforceRange</db:emphasis>. Then, when the path scrolls, the currently selected item will be the item at that position. This also applies to when the currently selected item changes - it will scroll to within the preferred highlight range. Furthermore, the behaviour of the current item index will occur whether or not a highlight exists.</db:para>
<db:note>
<db:para>A valid range requires <db:code>preferredHighlightEnd</db:code> to be greater than or equal to <db:code>preferredHighlightBegin</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="cacheItemCount-prop">
<db:title>cacheItemCount : int</db:title>
<db:para>This property holds the maximum number of items to cache off the path.</db:para>
<db:para>For example, a <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link> with a model containing 20 items, a <db:link xlink:href="qml-qtquick-pathview.xml#pathItemCount-prop">pathItemCount</db:link> of 10, and an cacheItemCount of 4 will create up to 14 items, with 10 visible on the path and 4 invisible cached items.</db:para>
<db:para>The cached delegates are created asynchronously, allowing creation to occur across multiple frames and reducing the likelihood of skipping frames.</db:para>
<db:note>
<db:para>Setting this property is not a replacement for creating efficient delegates. It can improve the smoothness of scrolling behavior at the expense of additional memory usage. The fewer objects and bindings in a delegate, the faster a view can be scrolled. It is important to realize that setting cacheItemCount will only postpone issues caused by slow-loading delegates, it is not a solution for this scenario.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pathview.xml#pathItemCount-prop">pathItemCount</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:para>This property holds the number of items in the model.</db:para>
</db:section>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : int</db:title>
<db:para>This property holds the index of the current item.</db:para>
</db:section>
<db:section xml:id="currentItem-prop">
<db:title>[read-only] currentItem : Item</db:title>
<db:para>This property holds the current item in the view.</db:para>
</db:section>
<db:section xml:id="delegate-prop">
<db:title>delegate : Component</db:title>
<db:para>The delegate provides a template defining each item instantiated by the view. The index is exposed as an accessible <db:code>index</db:code> property. Properties of the model are also available depending upon the type of <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#models">Data Model</db:link>.</db:para>
<db:para>The number of objects and bindings in the delegate has a direct effect on the flicking performance of the view when <db:link xlink:href="qml-qtquick-pathview.xml#pathItemCount-prop">pathItemCount</db:link> is specified. If at all possible, place functionality that is not needed for the normal display of the delegate in a <db:link xlink:href="qml-qtquick-loader.xml">Loader</db:link> which can load additional components when needed.</db:para>
<db:para>Note that the <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link> will layout the items based on the size of the root item in the delegate.</db:para>
<db:para>Here is an example delegate:</db:para>
<db:programlisting language="qml">    Component {
        id: delegate
        Column {
            id: wrapper

            required property url icon
            required property string name

            opacity: PathView.isCurrentItem ? 1 : 0.5

            Image {
                anchors.horizontalCenter: nameText.horizontalCenter
                width: 64; height: 64
                source: wrapper.icon
            }
            Text {
                id: nameText
                text: wrapper.name
                font.pointSize: 16
            }
        }
    }
</db:programlisting>
</db:section>
<db:section xml:id="dragMargin-prop">
<db:title>dragMargin : real</db:title>
<db:para>This property holds the maximum distance from the path that initiates mouse dragging.</db:para>
<db:para>By default the path can only be dragged by clicking on an item. If dragMargin is greater than zero, a drag can be initiated by clicking within dragMargin pixels of the path.</db:para>
</db:section>
<db:section xml:id="dragging-prop">
<db:title>[read-only] dragging : bool</db:title>
<db:para>This property holds whether the view is currently moving due to the user dragging the view.</db:para>
</db:section>
<db:section xml:id="flickDeceleration-prop">
<db:title>flickDeceleration : real</db:title>
<db:para>This property holds the rate at which a flick will decelerate.</db:para>
<db:para>The default is 100.</db:para>
</db:section>
<db:section xml:id="flicking-prop">
<db:title>[read-only] flicking : bool</db:title>
<db:para>This property holds whether the view is currently moving due to the user flicking the view.</db:para>
</db:section>
<db:section xml:id="highlight-prop">
<db:title>highlight : Component</db:title>
<db:para>This property holds the component to use as the highlight.</db:para>
<db:para>An instance of the highlight component will be created for each view. The geometry of the resultant component instance will be managed by the view so as to stay with the current item.</db:para>
<db:para>The below example demonstrates how to make a simple highlight. Note the use of the <db:link xlink:href="qml-qtquick-pathview.xml#onPath-attached-prop">PathView.onPath</db:link> attached property to ensure that the highlight is hidden when flicked away from the path.</db:para>
<db:programlisting language="qml">Component {
    Rectangle {
        visible: PathView.onPath
        // ...
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pathview.xml#highlightItem-prop">highlightItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-pathview.xml#highlightRangeMode-prop">highlightRangeMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="highlightItem-prop">
<db:title>[read-only] highlightItem : Item</db:title>
<db:para><db:code>highlightItem</db:code> holds the highlight item, which was created from the <db:link xlink:href="qml-qtquick-pathview.xml#highlight-prop">highlight</db:link> component.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pathview.xml#highlight-prop">highlight</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="highlightMoveDuration-prop">
<db:title>highlightMoveDuration : int</db:title>
<db:para>This property holds the move animation duration of the highlight delegate.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-pathview.xml#highlightRangeMode-prop">highlightRangeMode</db:link> is StrictlyEnforceRange then this property determines the speed that the items move along the path.</db:para>
<db:para>The default value for the duration is 300ms.</db:para>
</db:section>
<db:section xml:id="interactive-prop">
<db:title>interactive : bool</db:title>
<db:para>A user cannot drag or flick a <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link> that is not interactive.</db:para>
<db:para>This property is useful for temporarily disabling flicking. This allows special interaction with <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link>'s children.</db:para>
</db:section>
<db:section xml:id="maximumFlickVelocity-prop">
<db:title>maximumFlickVelocity : real</db:title>
<db:para>This property holds the approximate maximum velocity that the user can flick the view in pixels/second.</db:para>
<db:para>The default value is platform dependent.</db:para>
</db:section>
<db:section xml:id="model-prop">
<db:title>model : model</db:title>
<db:para>This property holds the model providing data for the view.</db:para>
<db:para>The model provides a set of data that is used to create the items for the view. For large or dynamic datasets the model is usually provided by a C++ model object. Models can also be created directly in QML, using the ListModel type.</db:para>
<db:note>
<db:para>changing the model will reset the offset and <db:link xlink:href="qml-qtquick-pathview.xml#currentIndex-prop">currentIndex</db:link> to 0.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-modelviewsdata-modelview.xml#models">Data Models</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="movementDirection-prop">
<db:title>movementDirection : enumeration</db:title>
<db:para>This property determines the direction in which items move when setting the current index. The possible values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>PathView.Shortest</db:para>
</db:td>
<db:td>
<db:para>(default) the items move in the direction that requires the least movement, which could be either <db:code>Negative</db:code> or <db:code>Positive</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PathView.Negative</db:para>
</db:td>
<db:td>
<db:para>the items move backwards towards their destination.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PathView.Positive</db:para>
</db:td>
<db:td>
<db:para>the items move forwards towards their destination.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example, suppose that there are 5 items in the model, and <db:link xlink:href="qml-qtquick-pathview.xml#currentIndex-prop">currentIndex</db:link> is <db:code>0</db:code>. If <db:link xlink:href="qml-qtquick-pathview.xml#currentIndex-prop">currentIndex</db:link> is set to <db:code>2</db:code>,</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>a <db:code>Positive</db:code> movement direction will result in the following order: 0, 1, 2</db:para>
</db:listitem>
<db:listitem>
<db:para>a <db:code>Negative</db:code> movement direction will result in the following order: 0, 5, 4, 3, 2</db:para>
</db:listitem>
<db:listitem>
<db:para>a <db:code>Shortest</db:code> movement direction will result in same order with <db:code>Positive</db:code> .</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>this property doesn't affect the movement of <db:link xlink:href="qml-qtquick-pathview.xml#incrementCurrentIndex-method">incrementCurrentIndex</db:link>() and <db:link xlink:href="qml-qtquick-pathview.xml#decrementCurrentIndex-method">decrementCurrentIndex</db:link>().</db:para>
</db:note>
</db:section>
<db:section xml:id="moving-prop">
<db:title>[read-only] moving : bool</db:title>
<db:para>This property holds whether the view is currently moving due to the user either dragging or flicking the view.</db:para>
</db:section>
<db:section xml:id="offset-prop">
<db:title>offset : real</db:title>
<db:para>The offset specifies how far along the path the items are from their initial positions. This is a real number that ranges from <db:code>0</db:code> to the count of items in the model.</db:para>
</db:section>
<db:section xml:id="path-prop">
<db:title>path : Path</db:title>
<db:para>This property holds the path used to lay out the items. For more information see the <db:link xlink:href="qml-qtquick-path.xml">Path</db:link> documentation.</db:para>
</db:section>
<db:section xml:id="pathItemCount-prop">
<db:title>pathItemCount : int</db:title>
<db:para>This property holds the number of items visible on the path at any one time.</db:para>
<db:para>Setting pathItemCount to undefined will show all items on the path.</db:para>
</db:section>
<db:section xml:id="snapMode-prop">
<db:title>snapMode : enumeration</db:title>
<db:para>This property determines how the items will settle following a drag or flick. The possible values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>PathView.NoSnap</db:para>
</db:td>
<db:td>
<db:para>(default) the items stop anywhere along the path.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PathView.SnapToItem</db:para>
</db:td>
<db:td>
<db:para>the items settle with an item aligned with the <db:link xlink:href="qml-qtquick-pathview.xml#preferredHighlightBegin-prop">preferredHighlightBegin</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PathView.SnapOneItem</db:para>
</db:td>
<db:td>
<db:para>the items settle no more than one item away from the item nearest <db:link xlink:href="qml-qtquick-pathview.xml#preferredHighlightBegin-prop">preferredHighlightBegin</db:link> at the time the press is released. This mode is particularly useful for moving one page at a time.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:code>snapMode</db:code> does not affect the <db:link xlink:href="qml-qtquick-pathview.xml#currentIndex-prop">currentIndex</db:link>. To update the <db:link xlink:href="qml-qtquick-pathview.xml#currentIndex-prop">currentIndex</db:link> as the view is moved, set <db:link xlink:href="qml-qtquick-pathview.xml#highlightRangeMode-prop">highlightRangeMode</db:link> to <db:code>PathView.StrictlyEnforceRange</db:code> (default for <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pathview.xml#highlightRangeMode-prop">highlightRangeMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="attached-property-documentation">
<db:title>Attached Property Documentation</db:title>
<db:section xml:id="isCurrentItem-attached-prop">
<db:title>[read-only] PathView.isCurrentItem : bool</db:title>
<db:para>This attached property is true if this delegate is the current item; otherwise false.</db:para>
<db:para>It is attached to each instance of the delegate.</db:para>
<db:para>This property may be used to adjust the appearance of the current item.</db:para>
<db:programlisting language="qml">    Component {
        id: delegate
        Column {
            id: wrapper

            required property url icon
            required property string name

            opacity: PathView.isCurrentItem ? 1 : 0.5

            Image {
                anchors.horizontalCenter: nameText.horizontalCenter
                width: 64; height: 64
                source: wrapper.icon
            }
            Text {
                id: nameText
                text: wrapper.name
                font.pointSize: 16
            }
        }
    }
</db:programlisting>
</db:section>
<db:section xml:id="onPath-attached-prop">
<db:title>[read-only] PathView.onPath : bool</db:title>
<db:para>This attached property holds whether the item is currently on the path.</db:para>
<db:para>If a <db:link xlink:href="qml-qtquick-pathview.xml#pathItemCount-prop">pathItemCount</db:link> has been set, it is possible that some items may be instantiated, but not considered to be currently on the path. Usually, these items would be set invisible, for example:</db:para>
<db:programlisting language="qml">Component {
    Rectangle {
        visible: PathView.onPath
        // ...
    }
}
</db:programlisting>
<db:para>It is attached to each instance of the delegate.</db:para>
</db:section>
<db:section xml:id="view-attached-prop">
<db:title>[read-only] PathView.view : PathView</db:title>
<db:para>This attached property holds the view that manages this delegate instance.</db:para>
<db:para>It is attached to each instance of the delegate.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="dragEnded-signal">
<db:title>dragEnded()</db:title>
<db:para>This signal is emitted when the user stops dragging the view.</db:para>
<db:para>If the velocity of the drag is suffient at the time the touch/mouse button is released then a flick will start.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDragEnded</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="dragStarted-signal">
<db:title>dragStarted()</db:title>
<db:para>This signal is emitted when the view starts to be dragged due to user interaction.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDragStarted</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="flickEnded-signal">
<db:title>flickEnded()</db:title>
<db:para>This signal is emitted when the view stops moving due to a flick.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onFlickEnded</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="flickStarted-signal">
<db:title>flickStarted()</db:title>
<db:para>This signal is emitted when the view is flicked. A flick starts from the point that the mouse or touch is released, while still in motion.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onFlickStarted</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="movementEnded-signal">
<db:title>movementEnded()</db:title>
<db:para>This signal is emitted when the view stops moving due to user interaction. If a flick was generated, this signal will be emitted once the flick stops. If a flick was not generated, this signal will be emitted when the user stops dragging - i.e. a mouse or touch release.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onMovementEnded</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="movementStarted-signal">
<db:title>movementStarted()</db:title>
<db:para>This signal is emitted when the view begins moving due to user interaction.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onMovementStarted</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="decrementCurrentIndex-method">
<db:title>decrementCurrentIndex()</db:title>
<db:para>Decrements the current index.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: methods should only be called after the Component has completed.</db:para>
</db:section>
<db:section xml:id="incrementCurrentIndex-method">
<db:title>incrementCurrentIndex()</db:title>
<db:para>Increments the current index.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: methods should only be called after the Component has completed.</db:para>
</db:section>
<db:section xml:id="indexAt-method">
<db:title>int indexAt(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns the index of the item containing the point <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> in content coordinates. If there is no item at the point specified, -1 is returned.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: methods should only be called after the Component has completed.</db:para>
</db:section>
<db:section xml:id="itemAt-method">
<db:title>Item itemAt(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns the item containing the point <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> in content coordinates. If there is no item at the point specified, null is returned.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: methods should only be called after the Component has completed.</db:para>
</db:section>
<db:section xml:id="itemAtIndex-method">
<db:title>Item itemAtIndex(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the item for <db:code role="parameter">index</db:code>. If there is no item for that index, for example because it has not been created yet, or because it has been panned out of the visible area and removed from the cache, null is returned.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: this method should only be called after the Component has completed. The returned value should also not be stored since it can turn to null as soon as control goes out of the calling scope, if the view releases that item.</db:para>
</db:section>
<db:section xml:id="positionViewAtIndex-method">
<db:title>positionViewAtIndex(int <db:emphasis>index</db:emphasis>, PositionMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Positions the view such that the <db:code role="parameter">index</db:code> is at the position specified by <db:code role="parameter">mode</db:code>:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>PathView.Beginning</db:para>
</db:td>
<db:td>
<db:para>position item at the beginning of the path.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PathView.Center</db:para>
</db:td>
<db:td>
<db:para>position item in the center of the path.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PathView.End</db:para>
</db:td>
<db:td>
<db:para>position item at the end of the path.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PathView.Contain</db:para>
</db:td>
<db:td>
<db:para>ensure the item is positioned on the path.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PathView.SnapPosition</db:para>
</db:td>
<db:td>
<db:para>position the item at <db:link xlink:href="qml-qtquick-pathview.xml#preferredHighlightBegin-prop">preferredHighlightBegin</db:link>. This mode is only valid if <db:link xlink:href="qml-qtquick-pathview.xml#highlightRangeMode-prop">highlightRangeMode</db:link> is StrictlyEnforceRange or snapping is enabled via <db:link xlink:href="qml-qtquick-pathview.xml#snapMode-prop">snapMode</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:emphasis role="bold">Note</db:emphasis>: methods should only be called after the Component has completed. To position the view at startup, this method should be called by Component.onCompleted. For example, to position the view at the end:</db:para>
<db:programlisting language="cpp">Component.onCompleted: positionViewAtIndex(count - 1, PathView.End)
</db:programlisting>
</db:section>
</db:section>
</db:article>
