<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Icons Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Icons example shows how <db:link xlink:href="qicon.xml">QIcon</db:link> can generate pixmaps reflecting an icon's state, mode and size.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;iconpreviewarea.h&quot;

IconPreviewArea::IconPreviewArea(QWidget *parent)
    : QWidget(parent)
{
    QGridLayout *mainLayout = new QGridLayout(this);

    for (int row = 0; row &amp;lt; NumStates; ++row) {
        stateLabels[row] = createHeaderLabel(IconPreviewArea::iconStateNames().at(row));
        mainLayout-&amp;gt;addWidget(stateLabels[row], row + 1, 0);
    }
    Q_ASSERT(NumStates == 2);

    for (int column = 0; column &amp;lt; NumModes; ++column) {
        modeLabels[column] = createHeaderLabel(IconPreviewArea::iconModeNames().at(column));
        mainLayout-&amp;gt;addWidget(modeLabels[column], 0, column + 1);
    }
    Q_ASSERT(NumModes == 4);

    for (int column = 0; column &amp;lt; NumModes; ++column) {
        for (int row = 0; row &amp;lt; NumStates; ++row) {
            pixmapLabels[column][row] = createPixmapLabel();
            mainLayout-&amp;gt;addWidget(pixmapLabels[column][row], row + 1, column + 1);
        }
    }
}

#ifdef Q_COMPILER_INITIALIZER_LISTS

QVector&amp;lt;QIcon::Mode&amp;gt; IconPreviewArea::iconModes()
{
    static const QVector&amp;lt;QIcon::Mode&amp;gt; result = {QIcon::Normal, QIcon::Active, QIcon::Disabled, QIcon::Selected};
    return result;
}

QVector&amp;lt;QIcon::State&amp;gt; IconPreviewArea::iconStates()
{
    static const QVector&amp;lt;QIcon::State&amp;gt; result = {QIcon::Off, QIcon::On};
    return result;
}

QStringList IconPreviewArea::iconModeNames()
{
    static const QStringList result = {tr(&quot;Normal&quot;), tr(&quot;Active&quot;), tr(&quot;Disabled&quot;), tr(&quot;Selected&quot;)};
    return result;
}

QStringList IconPreviewArea::iconStateNames()
{
    static const QStringList result = {tr(&quot;Off&quot;), tr(&quot;On&quot;)};
    return result;
}

#else // Q_COMPILER_INITIALIZER_LISTS

QVector&amp;lt;QIcon::Mode&amp;gt; IconPreviewArea::iconModes()
{
    static QVector&amp;lt;QIcon::Mode&amp;gt; result;
    if (result.isEmpty())
        result &amp;lt;&amp;lt; QIcon::Normal &amp;lt;&amp;lt; QIcon::Active &amp;lt;&amp;lt; QIcon::Disabled &amp;lt;&amp;lt; QIcon::Selected;
    return result;
}

QVector&amp;lt;QIcon::State&amp;gt; IconPreviewArea::iconStates()
{
    static QVector&amp;lt;QIcon::State&amp;gt; result;
    if (result.isEmpty())
        result &amp;lt;&amp;lt; QIcon::Off &amp;lt;&amp;lt; QIcon::On;
    return result;
}

QStringList IconPreviewArea::iconModeNames()
{
    static QStringList result;
    if (result.isEmpty())
        result &amp;lt;&amp;lt; tr(&quot;Normal&quot;) &amp;lt;&amp;lt; tr(&quot;Active&quot;) &amp;lt;&amp;lt; tr(&quot;Disabled&quot;) &amp;lt;&amp;lt; tr(&quot;Selected&quot;);
    return result;
}

QStringList IconPreviewArea::iconStateNames()
{
    static QStringList result;
    if (result.isEmpty())
        result &amp;lt;&amp;lt; tr(&quot;Off&quot;) &amp;lt;&amp;lt; tr(&quot;On&quot;);
    return result;
}

#endif // !Q_COMPILER_INITIALIZER_LISTS

void IconPreviewArea::setIcon(const QIcon &amp;amp;icon)
{
    this-&amp;gt;icon = icon;
    updatePixmapLabels();
}

void IconPreviewArea::setSize(const QSize &amp;amp;size)
{
    if (size != this-&amp;gt;size) {
        this-&amp;gt;size = size;
        updatePixmapLabels();
    }
}

QLabel *IconPreviewArea::createHeaderLabel(const QString &amp;amp;text)
{
    QLabel *label = new QLabel(tr(&quot;&amp;lt;b&amp;gt;%1&amp;lt;/b&amp;gt;&quot;).arg(text));
    label-&amp;gt;setAlignment(Qt::AlignCenter);
    return label;
}

QLabel *IconPreviewArea::createPixmapLabel()
{
    QLabel *label = new QLabel;
    label-&amp;gt;setEnabled(false);
    label-&amp;gt;setAlignment(Qt::AlignCenter);
    label-&amp;gt;setFrameShape(QFrame::Box);
    label-&amp;gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    label-&amp;gt;setBackgroundRole(QPalette::Base);
    label-&amp;gt;setAutoFillBackground(true);
    label-&amp;gt;setMinimumSize(132, 132);
    return label;
}

void IconPreviewArea::updatePixmapLabels()
{
    QWindow *window = nullptr;
    if (const QWidget *nativeParent = nativeParentWidget())
        window = nativeParent-&amp;gt;windowHandle();
    for (int column = 0; column &amp;lt; NumModes; ++column) {
        for (int row = 0; row &amp;lt; NumStates; ++row) {
            const QPixmap pixmap =
                icon.pixmap(window, size, IconPreviewArea::iconModes().at(column),
                            IconPreviewArea::iconStates().at(row));
            QLabel *pixmapLabel = pixmapLabels[column][row];
            pixmapLabel-&amp;gt;setPixmap(pixmap);
            pixmapLabel-&amp;gt;setEnabled(!pixmap.isNull());
            QString toolTip;
            if (!pixmap.isNull()) {
                const QSize actualSize = icon.actualSize(size);
                toolTip =
                    tr(&quot;Size: %1x%2\nActual size: %3x%4\nDevice pixel ratio: %5&quot;)
                        .arg(size.width()).arg(size.height())
                        .arg(actualSize.width()).arg(actualSize.height())
                        .arg(pixmap.devicePixelRatioF());
            }
            pixmapLabel-&amp;gt;setToolTip(toolTip);
        }
    }
}

</db:programlisting>
</db:article>
