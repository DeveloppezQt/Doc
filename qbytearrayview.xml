<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QByteArrayView Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> class provides a view on an array of bytes with a read-only subset of the <db:link xlink:href="qbytearray.xml">QByteArray</db:link> API.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QByteArrayView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QByteArrayView is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member><db:member>string-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> references a contiguous portion of raw bytes it does not own. It acts as an interface type to all kinds of byte-array-like data, without the need to construct a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> first.</db:para>
<db:para>The byte array data may be represented as an array (or an array-compatible data-structure such as <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, std::basic_string, etc.) of <db:code>char</db:code>, <db:code>signed char</db:code>, <db:code>unsigned char</db:code> or <db:code>std::byte</db:code>.</db:para>
<db:para><db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> is designed as an interface type; its main use-case is as a function parameter type. When QByteArrayViews are used as automatic variables or data members, care must be taken to ensure that the referenced data (for example, owned by a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>) outlives the <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> on all code paths, lest the byte array view ends up referencing deleted data.</db:para>
<db:para>When used as an interface type, <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> allows a single function to accept a wide variety of byte-array-like data sources. One function accepting <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> thus replaces several function overloads (taking, for example, <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, const char *, etc.) while at the same time enabling even more byte array data sources to be passed to the function.</db:para>
<db:para><db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> should be passed by value, not by reference-to-const:</db:para>
<db:programlisting language="cpp">    void myfun1(QByteArrayView bv);        // preferred
    void myfun2(const QByteArrayView &amp;amp;bv); // compiles and works, but slower
</db:programlisting>
<db:para>If you want to give your users maximum freedom in what type of data they can pass to your function, accompany the <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> overload with overloads for</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>char</db:emphasis>: this overload can delegate to the <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> version:</db:para>
<db:programlisting language="cpp">    void fun(QByteArrayView bv);
    void fun(char ch) { fun(QByteArrayView(&amp;amp;ch, 1)); }
</db:programlisting>
<db:para>even though, for technical reasons, <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> cannot provide a char constructor by itself.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>QByteArray</db:emphasis>: if you store an unmodified copy of the byte array and thus would like to take advantage of <db:link xlink:href="qbytearray.xml">QByteArray</db:link>'s implicit sharing.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> can also be used as the return value of a function. If you call a function returning <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>, take extra care to not keep the <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> around longer than the function promises to keep the referenced data alive. If in doubt, obtain a strong reference to the data by calling <db:link xlink:href="qbytearrayview.xml#toByteArray">toByteArray</db:link>() to convert the <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> into a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>The methods supported by <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> reflect those of <db:link xlink:href="qbytearray.xml">QByteArray</db:link>. In particular, to the limited degree that it ascribes semantics (such as character case, spacing, digits of numbers) to the character data viewed, it uses the C locale and ASCII encoding. See <db:link xlink:href="qbytearray.xml#c-locale-and-ascii-functions">C locale and ASCII functions</db:link> for details and the limitations on these methods.</db:para>
<db:section xml:id="compatible-byte-types">
<db:title>Compatible Byte Types</db:title>
<db:para><db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> can be constructed on any container of bytes, where the byte type is one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>char</db:code> (both signed and unsigned)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>std::byte</db:code></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:member>
<db:member><db:link xlink:href="qstringview.xml">QStringView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="const_iterator-typedef">
<db:title>QByteArrayView::const_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const iterator for <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#iterator-typedef">iterator</db:link></db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="const_pointer-typedef">
<db:title>QByteArrayView::const_pointer</db:title>
<db:typedefsynopsis>
<db:typedefname>const_pointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type *</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="const_reference-typedef">
<db:title>QByteArrayView::const_reference</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type &amp;</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="const_reverse_iterator-typedef">
<db:title>QByteArrayView::const_reverse_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reverse_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const reverse iterator for <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#reverse_iterator-typedef">reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#const_iterator-typedef">const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="difference_type-typedef">
<db:title>QByteArrayView::difference_type</db:title>
<db:typedefsynopsis>
<db:typedefname>difference_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>std::ptrdiff_t</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="iterator-typedef">
<db:title>QByteArrayView::iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const iterator for <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
<db:para><db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> does not support mutable iterators, so this is the same as <db:link xlink:href="qbytearrayview.xml#const_iterator-typedef">const_iterator</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#const_iterator-typedef">const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#reverse_iterator-typedef">reverse_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointer-typedef">
<db:title>QByteArrayView::pointer</db:title>
<db:typedefsynopsis>
<db:typedefname>pointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type *</db:code>. Provided for compatibility with the STL.</db:para>
<db:para><db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> does not support mutable pointers, so this is the same as <db:link xlink:href="qbytearrayview.xml#const_pointer-typedef">const_pointer</db:link>.</db:para>
</db:section>
<db:section xml:id="reference-typedef">
<db:title>QByteArrayView::reference</db:title>
<db:typedefsynopsis>
<db:typedefname>reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type &amp;</db:code>. Provided for compatibility with the STL.</db:para>
<db:para><db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> does not support mutable references, so this is the same as <db:link xlink:href="qbytearrayview.xml#const_reference-typedef">const_reference</db:link>.</db:para>
</db:section>
<db:section xml:id="reverse_iterator-typedef">
<db:title>QByteArrayView::reverse_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>reverse_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const reverse iterator for <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
<db:para><db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> does not support mutable reverse iterators, so this is the same as <db:link xlink:href="qbytearrayview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#const_reverse_iterator-typedef">const_reverse_iterator</db:link></db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#iterator-typedef">iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size_type-typedef">
<db:title>QByteArrayView::size_type</db:title>
<db:typedefsynopsis>
<db:typedefname>size_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for qsizetype. Provided for compatibility with the STL.</db:para>
</db:section>
<db:section xml:id="storage_type-typedef">
<db:title>QByteArrayView::storage_type</db:title>
<db:typedefsynopsis>
<db:typedefname>storage_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>char</db:code>.</db:para>
</db:section>
<db:section xml:id="value_type-typedef">
<db:title>QByteArrayView::value_type</db:title>
<db:typedefsynopsis>
<db:typedefname>value_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>const char</db:code>. Provided for compatibility with the STL.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="startsWith">
<db:title>bool QByteArrayView::startsWith(QByteArrayView <db:emphasis>bv</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="startsWith-1">bool QByteArrayView::startsWith(char <db:emphasis>ch</db:emphasis>) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if this byte array view starts with byte array view <db:code role="parameter">bv</db:code> or character <db:code role="parameter">ch</db:code>, respectively; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endsWith">
<db:title>bool QByteArrayView::endsWith(QByteArrayView <db:emphasis>bv</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="endsWith-1">bool QByteArrayView::endsWith(char <db:emphasis>ch</db:emphasis>) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if this byte array view ends with byte array view <db:code role="parameter">bv</db:code> or character <db:code role="parameter">ch</db:code>, respectively; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#startsWith">startsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf">
<db:title>qsizetype QByteArrayView::indexOf(QByteArrayView <db:emphasis>bv</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:bridgehead renderas="sect2" xml:id="indexOf-1">qsizetype QByteArrayView::indexOf(char <db:emphasis>ch</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0) const</db:bridgehead>
<db:para>Returns the index position of either the start of the first occurrence of the sequence of bytes viewed by <db:code role="parameter">bv</db:code> or the first occurrence of byte <db:code role="parameter">ch</db:code>, respectively, in this byte array view, searching forward from index position <db:code role="parameter">from.Returns</db:code> -1 if no match is found.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is -1, the search starts at the last character; if it is -2, at the next to last character and so on.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QByteArrayView::contains(QByteArrayView <db:emphasis>bv</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="contains-1">bool QByteArrayView::contains(char <db:emphasis>ch</db:emphasis>) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if this byte array view contains an occurrence of the sequence of bytes viewed by <db:code role="parameter">bv</db:code> or character <db:code role="parameter">ch</db:code>, respectively; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf">
<db:title>qsizetype QByteArrayView::lastIndexOf(QByteArrayView <db:emphasis>bv</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="lastIndexOf-2">qsizetype QByteArrayView::lastIndexOf(char <db:emphasis>ch</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = -1) const</db:bridgehead>
<db:para>Returns the index position of either the start of the last occurrence of the sequence of bytes viewed by <db:code role="parameter">bv</db:code> or the last occurrence of byte <db:code role="parameter">ch</db:code>, respectively, in this byte array view, searching backward from index position <db:code role="parameter">from</db:code>.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is -1, the search starts at the last character; if it is -2, at the next to last character and so on.</db:para>
<db:para>Returns -1 if no match is found.</db:para>
<db:note>
<db:para>When searching for a 0-length <db:code role="parameter">bv</db:code>, the match at the end of the data is excluded from the search by a negative <db:code role="parameter">from</db:code>, even though <db:code>-1</db:code> is normally thought of as searching from the end of the view: the match at the end is <db:emphasis>after</db:emphasis> the last character, so it is excluded. To include such a final empty match, either give a positive value for <db:code role="parameter">from</db:code> or omit the <db:code role="parameter">from</db:code> parameter entirely.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QByteArrayView">
<db:title>[constexpr] QByteArrayView::QByteArrayView()</db:title>
<db:constructorsynopsis>
<db:methodname>QByteArrayView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null byte array view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QByteArrayView-1">
<db:title>[constexpr] QByteArrayView::QByteArrayView(<db:emphasis>std::nullptr_t</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QByteArrayView</db:methodname>
<db:methodparam>
<db:type>std::nullptr_t</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView(std::nullptr_t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null byte array view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QByteArrayView-2">
<db:title>[constexpr] QByteArrayView::QByteArrayView(const Byte *<db:emphasis>data</db:emphasis>, qsizetype <db:emphasis>len</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QByteArrayView</db:methodname>
<db:methodparam>
<db:type>const Byte *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView(const Byte *data, qsizetype len)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a byte array view on <db:code role="parameter">data</db:code> with length <db:code role="parameter">len</db:code>.</db:para>
<db:para>The range <db:code>[data,len)</db:code> must remain valid for the lifetime of this <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
<db:para>Passing <db:code>nullptr</db:code> as <db:code role="parameter">data</db:code> is safe if <db:code role="parameter">len</db:code> is 0, too, and results in a null byte array view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">len</db:code> is negative or, when positive, if <db:code role="parameter">data</db:code> is <db:code>nullptr</db:code>.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code>Byte</db:code> is a compatible byte type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#compatible-byte-types">Compatible Byte Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QByteArrayView-3">
<db:title>[constexpr] QByteArrayView::QByteArrayView(const Byte *<db:emphasis>first</db:emphasis>, const Byte *<db:emphasis>last</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QByteArrayView</db:methodname>
<db:methodparam>
<db:type>const Byte *</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const Byte *</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView(const Byte *first, const Byte *last)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a byte array view on <db:code role="parameter">first</db:code> with length (<db:code role="parameter">last</db:code> - <db:code role="parameter">first</db:code>).</db:para>
<db:para>The range <db:code>[first,last)</db:code> must remain valid for the lifetime of this <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
<db:para>Passing <db:code>\nullptr</db:code> as <db:code role="parameter">first</db:code> is safe if <db:code role="parameter">last</db:code> is <db:code>nullptr</db:code>, too, and results in a null byte array view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">last</db:code> precedes <db:code role="parameter">first</db:code>, or <db:code role="parameter">first</db:code> is <db:code>nullptr</db:code> and <db:code role="parameter">last</db:code> is not.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code>Byte</db:code> is a compatible byte type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#compatible-byte-types">Compatible Byte Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QByteArrayView-4">
<db:title>[constexpr] QByteArrayView::QByteArrayView(const Byte *<db:emphasis>data</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QByteArrayView</db:methodname>
<db:methodparam>
<db:type>const Byte *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView(const Byte *data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a byte array view on <db:code role="parameter">data</db:code>. The length is determined by scanning for the first <db:code>Byte(0)</db:code>.</db:para>
<db:para><db:code role="parameter">data</db:code> must remain valid for the lifetime of this byte array view object.</db:para>
<db:para>Passing <db:code>nullptr</db:code> as <db:code role="parameter">data</db:code> is safe and results in a null byte array view.</db:para>
<db:para>This constructor only participates in overload resolution if <db:code role="parameter">data</db:code> is not an array and if <db:code>Byte</db:code> is a compatible byte type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#compatible-byte-types">Compatible Byte Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QByteArrayView-5">
<db:title>QByteArrayView::QByteArrayView(const QByteArray &amp;<db:emphasis>byteArray</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QByteArrayView</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>byteArray</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView(const QByteArray &amp;byteArray)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a byte array view on <db:code role="parameter">byteArray</db:code>.</db:para>
<db:para><db:code>byteArray.data()</db:code> must remain valid for the lifetime of this byte array view object.</db:para>
<db:para>The byte array view will be null if and only if <db:code>byteArray.isNull()</db:code>.</db:para>
</db:section>
<db:section xml:id="QByteArrayView-6">
<db:title>[constexpr] QByteArrayView::QByteArrayView(const Container &amp;<db:emphasis>c</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QByteArrayView</db:methodname>
<db:methodparam>
<db:type>const Container &amp;</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView(const Container &amp;c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a byte array view on the array-like container <db:code role="parameter">c</db:code>. The length and data are set via <db:code>std::size(c)</db:code> and <db:code>std::data(c)</db:code> respectively.</db:para>
<db:para>The container's data must remain valid for the lifetime of this byte array view object.</db:para>
<db:para>This constructor participates in overload resolution if <db:code role="parameter">c</db:code> is any contiguous container with elements of a compatible byte type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#compatible-byte-types">Compatible Byte Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QByteArrayView-7">
<db:title>[constexpr] QByteArrayView::QByteArrayView(const char (&amp;)[Size] <db:emphasis>data</db:emphasis> = Size)</db:title>
<db:constructorsynopsis>
<db:methodname>QByteArrayView</db:methodname>
<db:methodparam>
<db:type>const char (&amp;)[Size]</db:type>
<db:parameter>data</db:parameter>
<db:initializer>Size</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView(const char (&amp;)[Size] data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a byte array view on the char array <db:code role="parameter">data</db:code>. The view covers the array until the first <db:code>'\0'</db:code> is encountered, or <db:code>Size</db:code>, whichever comes first. If you need the full array, use <db:link xlink:href="qbytearrayview.xml#fromArray">fromArray</db:link>() instead.</db:para>
<db:para><db:code role="parameter">data</db:code> must remain valid for the lifetime of this byte array view object.</db:para>
<db:note>
<db:para>This constructor is only available for char array literals. The reasoning behind that is for compatibility with C-libraries which predefine &quot;large-enough&quot; arrays, but only use some of the preallocated space. To support this in an intuitive way in an implicit constructor overload, we need to stop at the first <db:code>char(0)</db:code>. This is logical for a char array, but not for a <db:code>std::byte</db:code> array.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#fromArray">fromArray</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="at">
<db:title>[constexpr] char QByteArrayView::at(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>char</db:type>
<db:methodname>at</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">char at(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the character at position <db:code role="parameter">n</db:code> in this byte array view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">n</db:code> is negative or not less than <db:link xlink:href="qbytearrayview.xml#size">size</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#back">back</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="back">
<db:title>[constexpr] char QByteArrayView::back() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>char</db:type>
<db:methodname>back</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">char back() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last byte in the byte array view.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty byte array view constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#front">front</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin">
<db:title>[constexpr] QByteArrayView::const_iterator QByteArrayView::begin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView::const_iterator</db:type>
<db:methodname>begin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView::const_iterator begin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first byte in the byte array view.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cbegin">
<db:title>[constexpr] QByteArrayView::const_iterator QByteArrayView::cbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView::const_iterator</db:type>
<db:methodname>cbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView::const_iterator cbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qbytearrayview.xml#begin">begin</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cend">
<db:title>[constexpr] QByteArrayView::const_iterator QByteArrayView::cend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView::const_iterator</db:type>
<db:methodname>cend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView::const_iterator cend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qbytearrayview.xml#end">end</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#crend">crend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chop">
<db:title>[constexpr] void QByteArrayView::chop(qsizetype <db:emphasis>length</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>chop</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void chop(qsizetype length)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Truncates this byte array view by <db:code role="parameter">length</db:code> characters.</db:para>
<db:para>Same as <db:code>*this = first(size() - length)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">length</db:code> &lt; 0 or <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qbytearrayview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chopped">
<db:title>[constexpr] QByteArrayView QByteArrayView::chopped(qsizetype <db:emphasis>length</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView</db:type>
<db:methodname>chopped</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView chopped(qsizetype length) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this byte array view that omits its last <db:code role="parameter">length</db:code> bytes. In other words, returns a byte array view of length <db:link xlink:href="qbytearrayview.xml#size">size</db:link>() - <db:code role="parameter">length</db:code> starting at the beginning of this object.</db:para>
<db:para>Same as <db:code>first(size() - length)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">length</db:code> &lt; 0 or <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qbytearrayview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare">
<db:title>[since 6.2] int QByteArrayView::compare(QByteArrayView <db:emphasis>bv</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>compare</db:methodname>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>bv</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::CaseSensitivity</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>Qt::CaseSensitive</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int compare(QByteArrayView bv, Qt::CaseSensitivity cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an integer less than, equal to, or greater than zero depending on whether this <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> sorts before, at the same position as, or after the <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> <db:code role="parameter">bv</db:code>. The comparison is performed according to case sensitivity <db:code role="parameter">cs</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constData">
<db:title>[constexpr] QByteArrayView::const_pointer QByteArrayView::constData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView::const_pointer</db:type>
<db:methodname>constData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView::const_pointer constData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:code>char</db:code> pointer to the first byte in the byte array view.</db:para>
<db:note>
<db:para>The character array represented by the return value is <db:emphasis>not</db:emphasis> guaranteed to be null-terminated. The returned pointer is only safe to use for accessing bytes at indices that are less than this byte array view's <db:link xlink:href="qbytearrayview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>qsizetype QByteArrayView::count(QByteArrayView <db:emphasis>bv</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>count</db:methodname>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>bv</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype count(QByteArrayView bv) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of (potentially overlapping) occurrences of the sequence of bytes viewed by <db:code role="parameter">bv</db:code> in this byte array view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-1">
<db:title>qsizetype QByteArrayView::count(char <db:emphasis>ch</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>count</db:methodname>
<db:methodparam>
<db:type>char</db:type>
<db:parameter>ch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype count(char ch) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the number of occurrences of byte <db:code role="parameter">ch</db:code> in this byte array view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crbegin">
<db:title>[constexpr] QByteArrayView::const_reverse_iterator QByteArrayView::crbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView::const_reverse_iterator</db:type>
<db:methodname>crbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView::const_reverse_iterator crbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qbytearrayview.xml#rbegin">rbegin</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#crend">crend</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#cbegin">cbegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crend">
<db:title>[constexpr] QByteArrayView::const_reverse_iterator QByteArrayView::crend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView::const_reverse_iterator</db:type>
<db:methodname>crend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView::const_reverse_iterator crend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qbytearrayview.xml#rend">rend</db:link>().</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#rend">rend</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#cend">cend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>[constexpr] QByteArrayView::const_pointer QByteArrayView::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView::const_pointer</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView::const_pointer data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:code>char</db:code> pointer to the first byte in the byte array view.</db:para>
<db:note>
<db:para>The character array represented by the return value is <db:emphasis>not</db:emphasis> guaranteed to be null-terminated. The returned pointer is only safe to use for accessing bytes at indices that are less than this byte array view's <db:link xlink:href="qbytearrayview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="empty">
<db:title>[constexpr] bool QByteArrayView::empty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>empty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool empty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this byte array view is empty - that is, <db:code>size() == 0</db:code>.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="end">
<db:title>[constexpr] QByteArrayView::const_iterator QByteArrayView::end() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView::const_iterator</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView::const_iterator end() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing just after the last byte in the byte array view.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="first">
<db:title>[constexpr] QByteArrayView QByteArrayView::first(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView</db:type>
<db:methodname>first</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView first(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a byte array view that points to the first <db:code role="parameter">n</db:code> bytes of this byte array view. Equivalent to <db:code>sliced(0, n)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qbytearrayview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#startsWith">startsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromArray">
<db:title>[static constexpr] QByteArrayView QByteArrayView::fromArray(const Byte (&amp;)[Size] <db:emphasis>data</db:emphasis> = Size)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QByteArrayView</db:type>
<db:methodname>fromArray</db:methodname>
<db:methodparam>
<db:type>const Byte (&amp;)[Size]</db:type>
<db:parameter>data</db:parameter>
<db:initializer>Size</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView fromArray(const Byte (&amp;)[Size] data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a byte array view on the array literal <db:code role="parameter">data</db:code>. The view covers the full array. That includes the trailing null-terminator of <db:code>char</db:code> array literals. If you don't want the null-terminator included in the view, you can <db:link xlink:href="qbytearrayview.xml#chop">chop</db:link>() it off when you are certain it is at the end. Alternatively you can use the constructor overload taking a char array literal which will create a view up to, but not including, the first null-terminator in the data.</db:para>
<db:para>This function will work with any array literal of a compatible byte type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#compatible-byte-types">Compatible Byte Types</db:link></db:member>
<db:member><db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="front">
<db:title>[constexpr] char QByteArrayView::front() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>char</db:type>
<db:methodname>front</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">char front() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the first byte in the byte array view.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty byte array view constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#back">back</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[constexpr] bool QByteArrayView::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this byte array view is empty - that is, <db:code>size() == 0</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>[constexpr] bool QByteArrayView::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this byte array view is null - that is, <db:code>data() == nullptr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValidUtf8">
<db:title>[since 6.3] bool QByteArrayView::isValidUtf8() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValidUtf8</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValidUtf8() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this byte array view contains valid UTF-8 encoded data, or <db:code>false</db:code> otherwise.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="last">
<db:title>[constexpr] QByteArrayView QByteArrayView::last(qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView</db:type>
<db:methodname>last</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView last(qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a byte array view that points to the last <db:code role="parameter">n</db:code> bytes of this byte array view.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">n</db:code> &lt; 0 or <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qbytearrayview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#endsWith">endsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-1">
<db:title>[since 6.2] qsizetype QByteArrayView::lastIndexOf(QByteArrayView <db:emphasis>bv</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>lastIndexOf</db:methodname>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>bv</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype lastIndexOf(QByteArrayView bv) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the index position of the start of the last occurrence of the sequence of bytes viewed by <db:code role="parameter">bv</db:code> in this byte array view, searching backward from the end of this byte array view. Returns -1 if no match is found.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="length">
<db:title>[constexpr] qsizetype QByteArrayView::length() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>length</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype length() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qbytearrayview.xml#size">size</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rbegin">
<db:title>[constexpr] QByteArrayView::const_reverse_iterator QByteArrayView::rbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView::const_reverse_iterator</db:type>
<db:methodname>rbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView::const_reverse_iterator rbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style</db:link> reverse iterator pointing to the first byte in the byte array view, in reverse order.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#rend">rend</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#begin">begin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rend">
<db:title>[constexpr] QByteArrayView::const_reverse_iterator QByteArrayView::rend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView::const_reverse_iterator</db:type>
<db:methodname>rend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView::const_reverse_iterator rend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="containers.xml#stl-style-iterators">STL-style</db:link> reverse iterator pointing to one past the last byte in the byte array view, in reverse order.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#crend">crend</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>[constexpr] qsizetype QByteArrayView::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of bytes in this byte array view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#empty">empty</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliced">
<db:title>[constexpr] QByteArrayView QByteArrayView::sliced(qsizetype <db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView</db:type>
<db:methodname>sliced</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView sliced(qsizetype pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a byte array view starting at position <db:code role="parameter">pos</db:code> in this object, and extending to its end.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0 or <db:code role="parameter">pos</db:code> &gt; <db:link xlink:href="qbytearrayview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sliced-1">
<db:title>[constexpr] QByteArrayView QByteArrayView::sliced(qsizetype <db:emphasis>pos</db:emphasis>, qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView</db:type>
<db:methodname>sliced</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView sliced(qsizetype pos, qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a byte array view that points to <db:code role="parameter">n</db:code> bytes of this byte array view, starting at position <db:code role="parameter">pos</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">pos</db:code> &lt; 0, <db:code role="parameter">n</db:code> &lt; 0, or <db:code role="parameter">pos</db:code> + <db:code role="parameter">n</db:code> &gt; <db:link xlink:href="qbytearrayview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toByteArray">
<db:title>QByteArray QByteArrayView::toByteArray() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toByteArray</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toByteArray() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a deep copy of this byte array view's data as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>The return value will be a null <db:link xlink:href="qbytearray.xml">QByteArray</db:link> if and only if this byte array view is null.</db:para>
</db:section>
<db:section xml:id="toDouble">
<db:title>[since 6.3] double QByteArrayView::toDouble(bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>toDouble</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double toDouble(bool *ok) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this byte array view converted to a <db:code>double</db:code> value.</db:para>
<db:para>Returns an infinity if the conversion overflows or 0.0 if the conversion fails for other reasons (e.g. underflow).</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:warning>
<db:para>The <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> content may only contain valid numerical characters which includes the plus/minus sign, the character e used in scientific notation, and the decimal point. Including the unit or additional characters leads to a conversion error.</db:para>
</db:warning>
<db:note>
<db:para>The conversion of the number is performed in the default C locale, regardless of the user's locale. Use <db:link xlink:href="qlocale.xml">QLocale</db:link> to perform locale-aware conversions between numbers and strings.</db:para>
</db:note>
<db:para>This function ignores leading and trailing spacing characters.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="toFloat">
<db:title>[since 6.3] float QByteArrayView::toFloat(bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>toFloat</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float toFloat(bool *ok) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this byte array view converted to a <db:code>float</db:code> value.</db:para>
<db:para>Returns an infinity if the conversion overflows or 0.0 if the conversion fails for other reasons (e.g. underflow).</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:programlisting language="cpp">QByteArrayView string(&quot;1234.56 Volt&quot;);
bool ok;
float a = str.toFloat(&amp;amp;ok);       // a == 0, ok == false
a = string.first(7).toFloat(&amp;amp;ok); // a == 1234.56, ok == true
</db:programlisting>
<db:warning>
<db:para>The <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> content may only contain valid numerical characters which includes the plus/minus sign, the character e used in scientific notation, and the decimal point. Including the unit or additional characters leads to a conversion error.</db:para>
</db:warning>
<db:note>
<db:para>The conversion of the number is performed in the default C locale, regardless of the user's locale. Use <db:link xlink:href="qlocale.xml">QLocale</db:link> to perform locale-aware conversions between numbers and strings.</db:para>
</db:note>
<db:para>This function ignores leading and trailing whitespace.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="toInt">
<db:title>[since 6.3] int QByteArrayView::toInt(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>toInt</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int toInt(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this byte array view converted to an <db:code>int</db:code> using base <db:code role="parameter">base</db:code>, which is ten by default. Bases 0 and 2 through 36 are supported, using letters for digits beyond 9; A is ten, B is eleven and so on.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the base is determined automatically using the following rules: if the byte array view begins with &quot;0x&quot;, the rest of it is read as hexadecimal (base 16); otherwise, if it begins with &quot;0&quot;, the rest of it is read as octal (base 8); otherwise it is read as decimal.</db:para>
<db:para>Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:programlisting language="cpp">QByteArrayView str(&quot;FF&quot;);
bool ok;
int hex = str.toInt(&amp;amp;ok, 16);     // hex == 255, ok == true
int dec = str.toInt(&amp;amp;ok, 10);     // dec == 0, ok == false
</db:programlisting>
<db:note>
<db:para>The conversion of the number is performed in the default C locale, regardless of the user's locale. Use <db:link xlink:href="qlocale.xml">QLocale</db:link> to perform locale-aware conversions between numbers and strings.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="toLong">
<db:title>[since 6.3] long QByteArrayView::toLong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>long</db:type>
<db:methodname>toLong</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">long toLong(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this byte array view converted to a <db:code>long</db:code> int using base <db:code role="parameter">base</db:code>, which is ten by default. Bases 0 and 2 through 36 are supported, using letters for digits beyond 9; A is ten, B is eleven and so on.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the base is determined automatically using the following rules: if the byte array view begins with &quot;0x&quot;, the rest of it is read as hexadecimal (base 16); otherwise, if it begins with &quot;0&quot;, the rest of it is read as octal (base 8); otherwise it is read as decimal.</db:para>
<db:para>Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:programlisting language="cpp">QByteArrayView str(&quot;FF&quot;);
bool ok;
long hex = str.toLong(&amp;amp;ok, 16);   // hex == 255, ok == true
long dec = str.toLong(&amp;amp;ok, 10);   // dec == 0, ok == false
</db:programlisting>
<db:note>
<db:para>The conversion of the number is performed in the default C locale, regardless of the user's locale. Use <db:link xlink:href="qlocale.xml">QLocale</db:link> to perform locale-aware conversions between numbers and strings.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="toLongLong">
<db:title>[since 6.3] qlonglong QByteArrayView::toLongLong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qlonglong</db:type>
<db:methodname>toLongLong</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qlonglong toLongLong(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this byte array view converted to a <db:code>long long</db:code> using base <db:code role="parameter">base</db:code>, which is ten by default. Bases 0 and 2 through 36 are supported, using letters for digits beyond 9; A is ten, B is eleven and so on.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the base is determined automatically using the following rules: if the byte array view begins with &quot;0x&quot;, the rest of it is read as hexadecimal (base 16); otherwise, if it begins with &quot;0&quot;, the rest of it is read as octal (base 8); otherwise it is read as decimal.</db:para>
<db:para>Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:note>
<db:para>The conversion of the number is performed in the default C locale, regardless of the user's locale. Use <db:link xlink:href="qlocale.xml">QLocale</db:link> to perform locale-aware conversions between numbers and strings.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="toShort">
<db:title>[since 6.3] short QByteArrayView::toShort(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>short</db:type>
<db:methodname>toShort</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">short toShort(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this byte array view converted to a <db:code>short</db:code> using base <db:code role="parameter">base</db:code>, which is ten by default. Bases 0 and 2 through 36 are supported, using letters for digits beyond 9; A is ten, B is eleven and so on.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the base is determined automatically using the following rules: if the byte array view begins with &quot;0x&quot;, the rest of it is read as hexadecimal (base 16); otherwise, if it begins with &quot;0&quot;, the rest of it is read as octal (base 8); otherwise it is read as decimal.</db:para>
<db:para>Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:note>
<db:para>The conversion of the number is performed in the default C locale, regardless of the user's locale. Use <db:link xlink:href="qlocale.xml">QLocale</db:link> to perform locale-aware conversions between numbers and strings.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="toUInt">
<db:title>[since 6.3] uint QByteArrayView::toUInt(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>uint</db:type>
<db:methodname>toUInt</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint toUInt(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this byte array view converted to an <db:code>unsigned int</db:code> using base <db:code role="parameter">base</db:code>, which is ten by default. Bases 0 and 2 through 36 are supported, using letters for digits beyond 9; A is ten, B is eleven and so on.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the base is determined automatically using the following rules: if the byte array view begins with &quot;0x&quot;, the rest of it is read as hexadecimal (base 16); otherwise, if it begins with &quot;0&quot;, the rest of it is read as octal (base 8); otherwise it is read as decimal.</db:para>
<db:para>Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:note>
<db:para>The conversion of the number is performed in the default C locale, regardless of the user's locale. Use <db:link xlink:href="qlocale.xml">QLocale</db:link> to perform locale-aware conversions between numbers and strings.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="toULong">
<db:title>[since 6.3] ulong QByteArrayView::toULong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>ulong</db:type>
<db:methodname>toULong</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">ulong toULong(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this byte array view converted to an <db:code>unsigned long int</db:code> using base <db:code role="parameter">base</db:code>, which is ten by default. Bases 0 and 2 through 36 are supported, using letters for digits beyond 9; A is ten, B is eleven and so on.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the base is determined automatically using the following rules: if the byte array view begins with &quot;0x&quot;, the rest of it is read as hexadecimal (base 16); otherwise, if it begins with &quot;0&quot;, the rest of it is read as octal (base 8); otherwise it is read as decimal.</db:para>
<db:para>Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:note>
<db:para>The conversion of the number is performed in the default C locale, regardless of the user's locale. Use <db:link xlink:href="qlocale.xml">QLocale</db:link> to perform locale-aware conversions between numbers and strings.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="toULongLong">
<db:title>[since 6.3] qulonglong QByteArrayView::toULongLong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qulonglong</db:type>
<db:methodname>toULongLong</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qulonglong toULongLong(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this byte array view converted to an <db:code>unsigned long long</db:code> using base <db:code role="parameter">base</db:code>, which is ten by default. Bases 0 and 2 through 36 are supported, using letters for digits beyond 9; A is ten, B is eleven and so on.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the base is determined automatically using the following rules: if the byte array view begins with &quot;0x&quot;, the rest of it is read as hexadecimal (base 16); otherwise, if it begins with &quot;0&quot;, the rest of it is read as octal (base 8); otherwise it is read as decimal.</db:para>
<db:para>Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:note>
<db:para>The conversion of the number is performed in the default C locale, regardless of the user's locale. Use <db:link xlink:href="qlocale.xml">QLocale</db:link> to perform locale-aware conversions between numbers and strings.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="toUShort">
<db:title>[since 6.3] ushort QByteArrayView::toUShort(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>ushort</db:type>
<db:methodname>toUShort</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>base</db:parameter>
<db:initializer>10</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">ushort toUShort(bool *ok, int base) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this byte array view converted to an <db:code>unsigned short</db:code> using base <db:code role="parameter">base</db:code>, which is ten by default. Bases 0 and 2 through 36 are supported, using letters for digits beyond 9; A is ten, B is eleven and so on.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the base is determined automatically using the following rules: if the byte array view begins with &quot;0x&quot;, the rest of it is read as hexadecimal (base 16); otherwise, if it begins with &quot;0&quot;, the rest of it is read as octal (base 8); otherwise it is read as decimal.</db:para>
<db:para>Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:note>
<db:para>The conversion of the number is performed in the default C locale, regardless of the user's locale. Use <db:link xlink:href="qlocale.xml">QLocale</db:link> to perform locale-aware conversions between numbers and strings.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="trimmed">
<db:title>[since 6.3] QByteArrayView QByteArrayView::trimmed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView</db:type>
<db:methodname>trimmed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView trimmed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this byte array view with spacing characters removed from the start and end.</db:para>
<db:para>The spacing characters are those for which the standard C++ <db:code>isspace()</db:code> function returns <db:code>true</db:code> in the C locale; these are the ASCII characters tabulation '\t', line feed '\n', carriage return '\r', vertical tabulation '\v', form feed '\f', and space ' '.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#SpecialCharacter-enum">QChar::SpecialCharacter</db:link></db:member>
<db:member><db:link xlink:href="qbytearray.xml#spacing-characters">Spacing Characters</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="truncate">
<db:title>[constexpr] void QByteArrayView::truncate(qsizetype <db:emphasis>length</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>truncate</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void truncate(qsizetype length)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Truncates this byte array view to length <db:code role="parameter">length</db:code>.</db:para>
<db:para>Same as <db:code>*this = first(length)</db:code>.</db:para>
<db:note>
<db:para>The behavior is undefined when <db:code role="parameter">length</db:code> &lt; 0 or <db:code role="parameter">length</db:code> &gt; <db:link xlink:href="qbytearrayview.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chop">chop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-std-3a-3astring_view">
<db:title>[constexpr, since 6.7] std::string_view QByteArrayView::operator std::string_view() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::string_view</db:type>
<db:methodname>operator std::string_view</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::string_view operator std::string_view() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts this <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> object to a <db:code>std::string_view</db:code> object. The returned view will have the same data pointer and length of this view.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>[constexpr] char QByteArrayView::operator[](qsizetype <db:emphasis>n</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>char</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">char operator[](qsizetype n) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the character at position <db:code role="parameter">n</db:code> in this byte array view.</db:para>
<db:para>The behavior is undefined if <db:code role="parameter">n</db:code> is negative or not less than <db:link xlink:href="qbytearrayview.xml#size">size</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#back">back</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(QByteArrayView <db:emphasis>lhs</db:emphasis>, QByteArrayView <db:emphasis>rhs</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-lt">bool operator&lt;(QByteArrayView <db:emphasis>lhs</db:emphasis>, QByteArrayView <db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-lt-eq">bool operator&lt;=(QByteArrayView <db:emphasis>lhs</db:emphasis>, QByteArrayView <db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-eq-eq">bool operator==(QByteArrayView <db:emphasis>lhs</db:emphasis>, QByteArrayView <db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-gt">bool operator&gt;(QByteArrayView <db:emphasis>lhs</db:emphasis>, QByteArrayView <db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-gt-eq">bool operator&gt;=(QByteArrayView <db:emphasis>lhs</db:emphasis>, QByteArrayView <db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:para>Comparison operators for <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QByteArrayView</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="left">
<db:title>[constexpr, since 6.5] QByteArrayView QByteArrayView::left(qsizetype <db:emphasis>length</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView</db:type>
<db:methodname>left</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView left(qsizetype length) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qbytearrayview.xml#first">first</db:link>() instead in new code.</db:para>
<db:para>Returns the subarray of length <db:code role="parameter">length</db:code> starting at position 0 in this object.</db:para>
<db:para>The entire byte array view is returned if <db:code role="parameter">length</db:code> is greater than or equal to <db:link xlink:href="qbytearrayview.xml#size">size</db:link>(), or less than zero.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#startsWith">startsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mid">
<db:title>[constexpr, since 6.5] QByteArrayView QByteArrayView::mid(qsizetype <db:emphasis>start</db:emphasis>, qsizetype <db:emphasis>length</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView</db:type>
<db:methodname>mid</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView mid(qsizetype start, qsizetype length) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qbytearrayview.xml#sliced">sliced</db:link>() instead in new code.</db:para>
<db:para>Returns the subarray of length <db:code role="parameter">length</db:code> starting at position <db:code role="parameter">start</db:code> in this object.</db:para>
<db:para>Returns an empty byte array view if <db:code role="parameter">start</db:code> exceeds the length of the byte array view. If there are less than <db:code role="parameter">length</db:code> characters available in the byte array view starting at <db:code role="parameter">start</db:code>, or if <db:code role="parameter">length</db:code> is negative (default), the function returns all characters that are available from <db:code role="parameter">start</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="right">
<db:title>[constexpr, since 6.5] QByteArrayView QByteArrayView::right(qsizetype <db:emphasis>length</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArrayView</db:type>
<db:methodname>right</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArrayView right(qsizetype length) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qbytearrayview.xml#last">last</db:link>() instead in new code.</db:para>
<db:para>Returns the subarray of length <db:code role="parameter">length</db:code> starting at position <db:link xlink:href="qbytearrayview.xml#size">size</db:link>() - <db:code role="parameter">length</db:code> in this object.</db:para>
<db:para>The entire byte array view is returned if <db:code role="parameter">length</db:code> is greater than or equal to <db:link xlink:href="qbytearrayview.xml#size">size</db:link>(), or less than zero.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearrayview.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#sliced">sliced</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#endsWith">endsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearrayview.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
