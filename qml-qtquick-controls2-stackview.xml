<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>StackView QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a stack-based navigation model.</db:para>
<db:para>This type was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 2.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Control</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>StackView is part of <db:simplelist><db:member>qtquickcontrols2-navigation</db:member><db:member>qtquickcontrols2-containers</db:member><db:member>qtquickcontrols2-focusscopes</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-stackview-wireframe.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> can be used with a set of inter-linked information pages. For example, an email application with separate views to list the latest emails, view a specific email, and list/view the attachments. The email list view is pushed onto the stack as users open an email, and popped out as they choose to go back.</db:para>
<db:para>The following snippet demonstrates a simple use case, where the <db:code>mainView</db:code> is pushed onto and popped out of the stack on relevant button click:</db:para>
<db:programlisting language="qml">ApplicationWindow {
    title: qsTr(&quot;Hello World&quot;)
    width: 640
    height: 480
    visible: true

    StackView {
        id: stack
        initialItem: mainView
        anchors.fill: parent
    }

    Component {
        id: mainView

        Row {
            spacing: 10

            Button {
                text: &quot;Push&quot;
                onClicked: stack.push(mainView)
            }
            Button {
                text: &quot;Pop&quot;
                enabled: stack.depth &amp;gt; 1
                onClicked: stack.pop()

            }
            Text {
                text: stack.depth
            }
        }
    }
}
</db:programlisting>
<db:section xml:id="using-stackview-in-an-application">
<db:title>Using StackView in an Application</db:title>
<db:para>Using <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> in an application is as simple as adding it as a child to a Window. The stack is usually anchored to the edges of the window, except at the top or bottom where it might be anchored to a status bar, or some other similar UI component. The stack can then be used by invoking its navigation methods. The first item to show in the <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> is the one that was assigned to <db:link xlink:href="qml-qtquick-controls2-stackview.xml#initialItem-prop">initialItem</db:link>, or the topmost item if <db:link xlink:href="qml-qtquick-controls2-stackview.xml#initialItem-prop">initialItem</db:link> is not set.</db:para>
</db:section>
<db:section xml:id="basic-navigation">
<db:title>Basic Navigation</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> supports three primary navigation operations: <db:link xlink:href="qml-qtquick-controls2-stackview.xml#push-method">push</db:link>(), <db:link xlink:href="qml-qtquick-controls2-stackview.xml#pop-method">pop</db:link>(), and <db:link xlink:href="qml-qtquick-controls2-stackview.xml#replace-method">replace</db:link>(). These correspond to classic stack operations where &quot;push&quot; adds an item to the top of a stack, &quot;pop&quot; removes the top item from the stack, and &quot;replace&quot; is like a pop followed by a push, which replaces the topmost item with the new item. The topmost item in the stack corresponds to the one that is <db:link xlink:href="qml-qtquick-controls2-stackview.xml#currentItem-prop">currently</db:link> visible on screen. Logically, &quot;push&quot; navigates forward or deeper into the application UI, &quot;pop&quot; navigates backward, and &quot;replace&quot; replaces the <db:link xlink:href="qml-qtquick-controls2-stackview.xml#currentItem-prop">currentItem</db:link>.</db:para>
<db:section xml:id="pushing-items">
<db:title>Pushing Items</db:title>
<db:para>In the following animation, three <db:link xlink:href="qml-qtquick-controls2-label.xml">Label</db:link> controls are pushed onto a stack view with the <db:link xlink:href="qml-qtquick-controls2-stackview.xml#push-method">push</db:link>() function:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-stackview-push.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>The stack now contains the following items: <db:code>[A, B, C]</db:code>.</db:para>
<db:note>
<db:para>When the stack is empty, a <db:link xlink:href="qml-qtquick-controls2-stackview.xml#push-method">push</db:link>() operation will not have a transition animation because there is nothing to transition from (typically on application start-up).</db:para>
</db:note>
</db:section>
<db:section xml:id="popping-items">
<db:title>Popping Items</db:title>
<db:para>Continuing on from the example above, the topmost item on the stack is removed with a call to <db:link xlink:href="qml-qtquick-controls2-stackview.xml#pop-method">pop</db:link>():</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-stackview-pop.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>The stack now contains the following items: <db:code>[A, B]</db:code>.</db:para>
<db:note>
<db:para>A <db:link xlink:href="qml-qtquick-controls2-stackview.xml#pop-method">pop</db:link>() operation on a stack with depth 1 or 0 does nothing. In such cases, the stack can be emptied using the <db:link xlink:href="qml-qtquick-controls2-stackview.xml#clear-method">clear</db:link>() method.</db:para>
</db:note>
<db:section xml:id="unwinding-items-via-pop">
<db:title>Unwinding Items via Pop</db:title>
<db:para>Sometimes, it is necessary to go back more than a single step in the stack. For example, to return to a &quot;main&quot; item or some kind of section item in the application. In such cases, it is possible to specify an item as a parameter for <db:link xlink:href="qml-qtquick-controls2-stackview.xml#pop-method">pop</db:link>(). This is called an &quot;unwind&quot; operation, where the stack unwinds till the specified item. If the item is not found, stack unwinds until it is left with one item, which becomes the <db:link xlink:href="qml-qtquick-controls2-stackview.xml#currentItem-prop">currentItem</db:link>. To explicitly unwind to the bottom of the stack, it is recommended to use <db:link xlink:href="qml-qtquick-controls2-stackview.xml#pop-method">pop</db:link>(null), although any non-existent item will do.</db:para>
<db:para>In the following animation, we unwind the stack to the first item by calling <db:code>pop(null)</db:code>:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-stackview-unwind.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>The stack now contains a single item: <db:code>[A]</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="replacing-items">
<db:title>Replacing Items</db:title>
<db:para>In the following animation, we <db:link xlink:href="qml-qtquick-controls2-stackview.xml#replace-method">replace</db:link> the topmost item with <db:code>D</db:code>:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-stackview-replace.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>The stack now contains the following items: <db:code>[A, B, D]</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="deep-linking">
<db:title>Deep Linking</db:title>
<db:para><db:emphasis>Deep linking</db:emphasis> means launching an application into a particular state. For example, a newspaper application could be launched into showing a particular article, bypassing the topmost item. In terms of <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link>, deep linking means the ability to modify the state of the stack, so much so that it is possible to push a set of items to the top of the stack, or to completely reset the stack to a given state.</db:para>
<db:para>The API for deep linking in <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> is the same as for basic navigation. Pushing an array instead of a single item adds all the items in that array to the stack. The transition animation, however, is applied only for the last item in the array. The normal semantics of <db:link xlink:href="qml-qtquick-controls2-stackview.xml#push-method">push</db:link>() apply for deep linking, that is, it adds whatever is pushed onto the stack.</db:para>
<db:note>
<db:para>Only the last item of the array is loaded. The rest of the items are loaded only when needed, either on subsequent calls to pop or on request to get an item using <db:link xlink:href="qml-qtquick-controls2-stackview.xml#get-method">get</db:link>().</db:para>
</db:note>
<db:para>This gives us the following result, given the stack [A, B, C]:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls2-stackview.xml#push-method">push</db:link>([D, E, F]) =&gt; [A, B, C, D, E, F] - &quot;push&quot; transition animation between C and F</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls2-stackview.xml#replace-method">replace</db:link>([D, E, F]) =&gt; [A, B, D, E, F] - &quot;replace&quot; transition animation between C and F</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls2-stackview.xml#clear-method">clear</db:link>() followed by <db:link xlink:href="qml-qtquick-controls2-stackview.xml#push-method">push</db:link>([D, E, F]) =&gt; [D, E, F] - no transition animation for pushing items as the stack was empty.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="finding-items">
<db:title>Finding Items</db:title>
<db:para>An Item for which the application does not have a reference can be found by calling <db:link xlink:href="qml-qtquick-controls2-stackview.xml#find-method">find</db:link>(). The method needs a callback function, which is invoked for each item in the stack (starting at the top) until a match is found. If the callback returns <db:code>true</db:code>, <db:link xlink:href="qml-qtquick-controls2-stackview.xml#find-method">find</db:link>() stops and returns the matching item, otherwise <db:code>null</db:code> is returned.</db:para>
<db:para>The code below searches the stack for an item named &quot;order_id&quot; and unwinds to that item.</db:para>
<db:programlisting language="cpp" role="bad">stackView.pop(stackView.find(function(item) {
    return item.name == &quot;order_id&quot;;
}));
</db:programlisting>
<db:para>You can also get to an item in the stack using <db:link xlink:href="qml-qtquick-controls2-stackview.xml#get-method">get</db:link>(index).</db:para>
<db:programlisting language="cpp" role="bad">previousItem = stackView.get(myItem.StackView.index - 1));
</db:programlisting>
</db:section>
<db:section xml:id="transitions">
<db:title>Transitions</db:title>
<db:para>For each push or pop operation, different transition animations are applied to entering and exiting items. These animations define how the entering item should animate in, and the exiting item should animate out. The animations can be customized by assigning different <db:link xlink:href="qml-qtquick-transition.xml">Transition</db:link>s for the <db:link xlink:href="qml-qtquick-controls2-stackview.xml#pushEnter-prop">pushEnter</db:link>, <db:link xlink:href="qml-qtquick-controls2-stackview.xml#pushExit-prop">pushExit</db:link>, <db:link xlink:href="qml-qtquick-controls2-stackview.xml#popEnter-prop">popEnter</db:link>, <db:link xlink:href="qml-qtquick-controls2-stackview.xml#popExit-prop">popExit</db:link>, <db:link xlink:href="qml-qtquick-controls2-stackview.xml#replaceEnter-prop">replaceEnter</db:link>, and <db:link xlink:href="qml-qtquick-controls2-stackview.xml#replaceExit-prop">replaceExit</db:link> properties of <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link>.</db:para>
<db:note>
<db:para>The transition animations affect each others' transitional behavior. Customizing the animation for one and leaving the other may give unexpected results.</db:para>
</db:note>
<db:para>The following snippet defines a simple fade transition for push and pop operations:</db:para>
<db:programlisting language="qml">StackView {
    id: stackview
    anchors.fill: parent

    pushEnter: Transition {
        PropertyAnimation {
            property: &quot;opacity&quot;
            from: 0
            to:1
            duration: 200
        }
    }
    pushExit: Transition {
        PropertyAnimation {
            property: &quot;opacity&quot;
            from: 1
            to:0
            duration: 200
        }
    }
    popEnter: Transition {
        PropertyAnimation {
            property: &quot;opacity&quot;
            from: 0
            to:1
            duration: 200
        }
    }
    popExit: Transition {
        PropertyAnimation {
            property: &quot;opacity&quot;
            from: 1
            to:0
            duration: 200
        }
    }
}
</db:programlisting>
<db:note>
<db:para>Using anchors on the items added to a <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> is not supported. Typically push, pop, and replace transitions animate the position, which is not possible when anchors are applied. Notice that this only applies to the root of the item. Using anchors for its children works as expected.</db:para>
</db:note>
</db:section>
<db:section xml:id="item-ownership">
<db:title>Item Ownership</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> only takes ownership of items that it creates itself. This means that any item pushed onto a <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> will never be destroyed by the <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link>; only items that <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> creates from <db:link xlink:href="qml-qtqml-component.xml">Components</db:link> or <db:link xlink:href="qml-url.xml">URLs</db:link> are destroyed by the <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link>. To illustrate this, the messages in the example below will only be printed when the <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> is destroyed, not when the items are popped off the stack:</db:para>
<db:programlisting language="qml">Component {
    id: itemComponent

    Item {
        Component.onDestruction: print(&quot;Destroying second item&quot;)
    }
}

StackView {
    initialItem: Item {
        Component.onDestruction: print(&quot;Destroying initial item&quot;)
    }

    Component.onCompleted: push(itemComponent.createObject(window))
}
</db:programlisting>
<db:para>However, both of the items created from the URL and Component in the following example will be destroyed by the <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> when they are popped off of it:</db:para>
<db:programlisting language="qml">Component {
    id: itemComponent

    Item {
        Component.onDestruction: print(&quot;Destroying second item&quot;)
    }
}

StackView {
    initialItem: &quot;Item1.qml&quot;

    Component.onCompleted: push(itemComponent)
}
</db:programlisting>
</db:section>
<db:section xml:id="size">
<db:title>Size</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> does not inherit an implicit size from items that are pushed onto it. This means that using it as the <db:link xlink:href="qml-qtquick-controls2-popup.xml#contentItem-prop">contentItem</db:link> of a <db:link xlink:href="qml-qtquick-controls2-dialog.xml">Dialog</db:link>, for example, will not work as expected:</db:para>
<db:programlisting language="cpp">Dialog {
    StackView {
        initialItem: Rectangle {
            width: 200
            height: 200
            color: &quot;salmon&quot;
        }
    }
}
</db:programlisting>
<db:para>There are several ways to ensure that <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> has a size in this situation:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Set implicitWidth and implicitHeight on the <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> itself.</db:para>
</db:listitem>
<db:listitem>
<db:para>Set implicitWidth and implicitHeight on the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Set <db:link xlink:href="qml-qtquick-controls2-popup.xml#contentWidth-prop">contentWidth</db:link> and <db:link xlink:href="qml-qtquick-controls2-popup.xml#contentHeight-prop">contentHeight</db:link> on the Dialog.</db:para>
</db:listitem>
<db:listitem>
<db:para>Give the Dialog a size.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols2-customize.xml#customizing-stackview">Customizing StackView</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols2-navigation.xml">Navigation Controls</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols2-containers.xml">Container Controls</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols2-focus.xml">Focus Management in Qt Quick Controls 2</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="busy-prop">
<db:title>[read-only] busy : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>busy</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether a transition is running.</db:para>
</db:section>
<db:section xml:id="currentItem-prop">
<db:title>[read-only] currentItem : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>currentItem</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current top-most item in the stack.</db:para>
</db:section>
<db:section xml:id="depth-prop">
<db:title>[read-only] depth : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>depth</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of items currently pushed onto the stack.</db:para>
</db:section>
<db:section xml:id="empty-prop">
<db:title>[read-only, since QtQuick.Controls 2.3 (Qt 5.10)] empty : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>empty</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the stack is empty.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-stackview.xml#depth-prop">depth</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initialItem-prop">
<db:title>initialItem : var</db:title>
<db:fieldsynopsis>
<db:type>var</db:type>
<db:varname>initialItem</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the initial item that should be shown when the <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> is created. The initial item can be an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>, <db:link xlink:href="qml-qtqml-component.xml">Component</db:link>, or a <db:link xlink:href="qml-url.xml">url</db:link>. Specifying an initial item is equivalent to:</db:para>
<db:programlisting language="cpp">Component.onCompleted: stackView.push(myInitialItem)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-stackview.xml#push-method">push</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="popEnter-prop">
<db:title>popEnter : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>popEnter</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the transition that is applied to the item that enters the stack when another item is popped off of it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols2-customize.xml#customizing-stackview">Customizing StackView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="popExit-prop">
<db:title>popExit : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>popExit</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the transition that is applied to the item that exits the stack when the item is popped off of it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols2-customize.xml#customizing-stackview">Customizing StackView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pushEnter-prop">
<db:title>pushEnter : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>pushEnter</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the transition that is applied to the item that enters the stack when the item is pushed onto it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols2-customize.xml#customizing-stackview">Customizing StackView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pushExit-prop">
<db:title>pushExit : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>pushExit</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the transition that is applied to the item that exits the stack when another item is pushed onto it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols2-customize.xml#customizing-stackview">Customizing StackView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replaceEnter-prop">
<db:title>replaceEnter : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>replaceEnter</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the transition that is applied to the item that enters the stack when another item is replaced by it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols2-customize.xml#customizing-stackview">Customizing StackView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replaceExit-prop">
<db:title>replaceExit : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>replaceExit</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the transition that is applied to the item that exits the stack when it is replaced by another item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols2-customize.xml#customizing-stackview">Customizing StackView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="attached-property-documentation">
<db:title>Attached Property Documentation</db:title>
<db:section xml:id="index-attached-prop">
<db:title>[read-only] StackView.index : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>StackView.index</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This attached property holds the stack index of the item it's attached to, or <db:code>-1</db:code> if the item is not in a stack.</db:para>
</db:section>
<db:section xml:id="status-attached-prop">
<db:title>[read-only] StackView.status : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>StackView.status</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This attached property holds the stack status of the item it's attached to, or <db:code>StackView.Inactive</db:code> if the item is not in a stack.</db:para>
<db:para>Available values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>StackView.Inactive</db:para>
</db:td>
<db:td>
<db:para>The item is inactive (or not in a stack).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.Deactivating</db:para>
</db:td>
<db:td>
<db:para>The item is being deactivated (popped off).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.Activating</db:para>
</db:td>
<db:td>
<db:para>The item is being activated (becoming the current item).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.Active</db:para>
</db:td>
<db:td>
<db:para>The item is active, that is, the current item.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="view-attached-prop">
<db:title>[read-only] StackView.view : StackView</db:title>
<db:fieldsynopsis>
<db:type>StackView</db:type>
<db:varname>StackView.view</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This attached property holds the stack view of the item it's attached to, or <db:code>null</db:code> if the item is not in a stack.</db:para>
</db:section>
<db:section xml:id="visible-attached-prop">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] StackView.visible : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>StackView.visible</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This attached property holds the visibility of the item it's attached to. The value follows the value of <db:link xlink:href="qml-qtquick-item.xml#visible-prop">Item::visible</db:link>.</db:para>
<db:para>By default, <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> shows incoming items when the enter transition begins, and hides outgoing items when the exit transition ends. Setting this property explicitly allows the default behavior to be overridden, making it possible to keep items that are below the top-most item visible.</db:para>
<db:note>
<db:para>The default transitions of most styles slide outgoing items outside the view, and may also animate their opacity. In order to keep a full stack of items visible, consider customizing the <db:link xlink:href="qml-qtquick-controls2-stackview.xml#transitions">transitions</db:link> so that the items underneath can be seen.</db:para>
</db:note>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-stackview-visible.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">StackView {
    id: stackView
    property real offset: 10
    width: 100; height: 100

    initialItem: Component {
        id: page
        Rectangle {
            property real pos: StackView.index * stackView.offset
            property real hue: Math.random()
            color: Qt.hsla(hue, 0.5, 0.8, 0.6)
            border.color: Qt.hsla(hue, 0.5, 0.5, 0.9)
            StackView.visible: true
        }
    }

    pushEnter: Transition {
        id: pushEnter
        ParallelAnimation {
            PropertyAction { property: &quot;x&quot;; value: pushEnter.ViewTransition.item.pos }
            NumberAnimation { properties: &quot;y&quot;; from: pushEnter.ViewTransition.item.pos + stackView.offset; to: pushEnter.ViewTransition.item.pos; duration: 400; easing.type: Easing.OutCubic }
            NumberAnimation { property: &quot;opacity&quot;; from: 0; to: 1; duration: 400; easing.type: Easing.OutCubic }
        }
    }
    popExit: Transition {
        id: popExit
        ParallelAnimation {
            PropertyAction { property: &quot;x&quot;; value: popExit.ViewTransition.item.pos }
            NumberAnimation { properties: &quot;y&quot;; from: popExit.ViewTransition.item.pos; to: popExit.ViewTransition.item.pos + stackView.offset; duration: 400; easing.type: Easing.OutCubic }
            NumberAnimation { property: &quot;opacity&quot;; from: 1; to: 0; duration: 400; easing.type: Easing.OutCubic }
        }
    }

    pushExit: Transition {
        id: pushExit
        PropertyAction { property: &quot;x&quot;; value: pushExit.ViewTransition.item.pos }
        PropertyAction { property: &quot;y&quot;; value: pushExit.ViewTransition.item.pos }
    }
    popEnter: Transition {
        id: popEnter
        PropertyAction { property: &quot;x&quot;; value: popEnter.ViewTransition.item.pos }
        PropertyAction { property: &quot;y&quot;; value: popEnter.ViewTransition.item.pos }
    }
}
</db:programlisting>
<db:para>This property was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
</db:section>
</db:section>
<db:section xml:id="attached-signal-documentation">
<db:title>Attached Signal Documentation</db:title>
<db:section xml:id="activated-signal">
<db:title>[since QtQuick.Controls 2.1 (Qt 5.8)] activated()</db:title>
<db:para>This attached signal is emitted when the item it's attached to is activated in the stack.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onActivated</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 2.1 (Qt 5.8).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-stackview.xml#status-attached-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activating-signal">
<db:title>[since QtQuick.Controls 2.1 (Qt 5.8)] activating()</db:title>
<db:para>This attached signal is emitted when the item it's attached to is in the process of being activated in the stack.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onActivating</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 2.1 (Qt 5.8).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-stackview.xml#status-attached-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deactivated-signal">
<db:title>[since QtQuick.Controls 2.1 (Qt 5.8)] deactivated()</db:title>
<db:para>This attached signal is emitted when the item it's attached to is deactivated in the stack.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDeactivated</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 2.1 (Qt 5.8).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-stackview.xml#status-attached-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deactivating-signal">
<db:title>[since QtQuick.Controls 2.1 (Qt 5.8)] deactivating()</db:title>
<db:para>This attached signal is emitted when the item it's attached to is in the process of being dectivated in the stack.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDeactivating</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 2.1 (Qt 5.8).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-stackview.xml#status-attached-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removed-signal">
<db:title>[since QtQuick.Controls 2.1 (Qt 5.8)] removed()</db:title>
<db:para>This attached signal is emitted when the item it's attached to has been removed from the stack. It can be used to safely destroy an Item that was pushed onto the stack, for example:</db:para>
<db:programlisting language="cpp">Item {
    StackView.onRemoved: destroy() // Will be destroyed sometime after this call.
}
</db:programlisting>
<db:note>
<db:para>The corresponding handler is <db:code>onRemoved</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 2.1 (Qt 5.8).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-stackview.xml#status-attached-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="clear-method">
<db:title>void clear(<db:emphasis>transition</db:emphasis>)</db:title>
<db:para>Removes all items from the stack.</db:para>
<db:para>Only items that <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> created itself (from a <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> or <db:link xlink:href="qml-url.xml">url</db:link>) will be destroyed when popped. See <db:link xlink:href="qml-qtquick-controls2-stackview.xml#item-ownership">Item Ownership</db:link> for more information.</db:para>
<db:para>Since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.3, a <db:code role="parameter">transition</db:code> can be optionally specified. Supported transitions:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>StackView.Immediate</db:para>
</db:td>
<db:td>
<db:para>Clear the stack immediately without any transition (default).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.PushTransition</db:para>
</db:td>
<db:td>
<db:para>Clear the stack with a push transition.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.ReplaceTransition</db:para>
</db:td>
<db:td>
<db:para>Clear the stack with a replace transition.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.PopTransition</db:para>
</db:td>
<db:td>
<db:para>Clear the stack with a pop transition.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="find-method">
<db:title>Item find(<db:emphasis>callback</db:emphasis>, <db:emphasis>behavior</db:emphasis>)</db:title>
<db:para>Search for a specific item inside the stack. The <db:code role="parameter">callback</db:code> function is called for each item in the stack (with the item and index as arguments) until the callback function returns <db:code>true</db:code>. The return value is the item found. For example:</db:para>
<db:programlisting language="cpp">stackView.find(function(item, index) {
    return item.isTheOne
})
</db:programlisting>
<db:para>Supported behavior values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>StackView.DontLoad</db:para>
</db:td>
<db:td>
<db:para>Unloaded items are skipped (the callback function is not called for them).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.ForceLoad</db:para>
</db:td>
<db:td>
<db:para>Unloaded items are forced to load.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="get-method">
<db:title>Item get(<db:emphasis>index</db:emphasis>, <db:emphasis>behavior</db:emphasis>)</db:title>
<db:para>Returns the item at position <db:code role="parameter">index</db:code> in the stack, or <db:code>null</db:code> if the index is out of bounds.</db:para>
<db:para>Supported behavior values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>StackView.DontLoad</db:para>
</db:td>
<db:td>
<db:para>The item is not forced to load (and <db:code>null</db:code> is returned if not yet loaded).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.ForceLoad</db:para>
</db:td>
<db:td>
<db:para>The item is forced to load.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="pop-method">
<db:title>Item pop(<db:emphasis>item</db:emphasis>, <db:emphasis>operation</db:emphasis>)</db:title>
<db:para>Pops one or more items off the stack. Returns the last item removed from the stack.</db:para>
<db:para>If the <db:code role="parameter">item</db:code> argument is specified, all items down to (but not including) <db:code role="parameter">item</db:code> will be popped. If <db:code role="parameter">item</db:code> is <db:code>null</db:code>, all items down to (but not including) the first item is popped. If not specified, only the current item is popped.</db:para>
<db:note>
<db:para>A pop() operation on a stack with depth 1 or 0 does nothing. In such cases, the stack can be emptied using the <db:link xlink:href="qml-qtquick-controls2-stackview.xml#clear-method">clear</db:link>() method.</db:para>
</db:note>
<db:para>Only items that <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> created itself (from a <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> or <db:link xlink:href="qml-url.xml">url</db:link>) will be destroyed when popped. See <db:link xlink:href="qml-qtquick-controls2-stackview.xml#item-ownership">Item Ownership</db:link> for more information.</db:para>
<db:para>An <db:code role="parameter">operation</db:code> can be optionally specified as the last argument. Supported operations:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>StackView.Transition</db:para>
</db:td>
<db:td>
<db:para>An operation with default transitions (default).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.Immediate</db:para>
</db:td>
<db:td>
<db:para>An immediate operation without transitions.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.PushTransition</db:para>
</db:td>
<db:td>
<db:para>An operation with push transitions (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.1).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.ReplaceTransition</db:para>
</db:td>
<db:td>
<db:para>An operation with replace transitions (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.1).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.PopTransition</db:para>
</db:td>
<db:td>
<db:para>An operation with pop transitions (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.1).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Examples:</db:para>
<db:programlisting language="cpp">stackView.pop()
stackView.pop(someItem, StackView.Immediate)
stackView.pop(StackView.Immediate)
stackView.pop(null)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-stackview.xml#clear-method">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-stackview.xml#popping-items">Popping Items</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-stackview.xml#unwinding-items-via-pop">Unwinding Items via Pop</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="push-method">
<db:title>Item push(<db:emphasis>item</db:emphasis>, <db:emphasis>properties</db:emphasis>, <db:emphasis>operation</db:emphasis>)</db:title>
<db:para>Pushes an <db:code role="parameter">item</db:code> onto the stack using the specified <db:code role="parameter">operation</db:code>, and optionally applies a set of <db:code role="parameter">properties</db:code> on the item. The item can be an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>, <db:link xlink:href="qml-qtqml-component.xml">Component</db:link>, or a <db:link xlink:href="qml-url.xml">url</db:link>. Returns the item that became current.</db:para>
<db:para><db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> creates an instance automatically if the pushed item is a <db:link xlink:href="qml-qtqml-component.xml">Component</db:link>, or a <db:link xlink:href="qml-url.xml">url</db:link>, and the instance will be destroyed when it is popped off the stack. See <db:link xlink:href="qml-qtquick-controls2-stackview.xml#item-ownership">Item Ownership</db:link> for more information.</db:para>
<db:para>The optional <db:code role="parameter">properties</db:code> argument specifies a map of initial property values for the pushed item. For dynamically created items, these values are applied before the creation is finalized. This is more efficient than setting property values after creation, particularly where large sets of property values are defined, and also allows property bindings to be set up (using <db:link xlink:href="qml-qtqml-qt.xml#binding-method">Qt.binding</db:link>()) before the item is created.</db:para>
<db:para>Pushing a single item:</db:para>
<db:programlisting language="cpp">stackView.push(rect)

// or with properties:
stackView.push(rect, {&quot;color&quot;: &quot;red&quot;})
</db:programlisting>
<db:para>Multiple items can be pushed at the same time either by passing them as additional arguments, or as an array. The last item becomes the current item. Each item can be followed by a set of properties to apply.</db:para>
<db:para>Passing a variable amount of arguments:</db:para>
<db:programlisting language="cpp">stackView.push(rect1, rect2, rect3)

// or with properties:
stackView.push(rect1, {&quot;color&quot;: &quot;red&quot;}, rect2, {&quot;color&quot;: &quot;green&quot;}, rect3, {&quot;color&quot;: &quot;blue&quot;})
</db:programlisting>
<db:para>Pushing an array of items:</db:para>
<db:programlisting language="cpp">stackView.push([rect1, rect2, rect3])

// or with properties:
stackView.push([rect1, {&quot;color&quot;: &quot;red&quot;}, rect2, {&quot;color&quot;: &quot;green&quot;}, rect3, {&quot;color&quot;: &quot;blue&quot;}])
</db:programlisting>
<db:para>An <db:code role="parameter">operation</db:code> can be optionally specified as the last argument. Supported operations:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>StackView.Transition</db:para>
</db:td>
<db:td>
<db:para>An operation with default transitions (default).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.Immediate</db:para>
</db:td>
<db:td>
<db:para>An immediate operation without transitions.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.PushTransition</db:para>
</db:td>
<db:td>
<db:para>An operation with push transitions (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.1).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.ReplaceTransition</db:para>
</db:td>
<db:td>
<db:para>An operation with replace transitions (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.1).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.PopTransition</db:para>
</db:td>
<db:td>
<db:para>An operation with pop transitions (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.1).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Items that already exist in the stack are not pushed.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-stackview.xml#initialItem-prop">initialItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-stackview.xml#pushing-items">Pushing Items</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace-method">
<db:title>Item replace(<db:emphasis>target</db:emphasis>, <db:emphasis>item</db:emphasis>, <db:emphasis>properties</db:emphasis>, <db:emphasis>operation</db:emphasis>)</db:title>
<db:para>Replaces one or more items on the stack with the specified <db:code role="parameter">item</db:code> and <db:code role="parameter">operation</db:code>, and optionally applies a set of <db:code role="parameter">properties</db:code> on the item. The item can be an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>, <db:link xlink:href="qml-qtqml-component.xml">Component</db:link>, or a <db:link xlink:href="qml-url.xml">url</db:link>. Returns the item that became current.</db:para>
<db:para>Only items that <db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> created itself (from a <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> or <db:link xlink:href="qml-url.xml">url</db:link>) will be destroyed when popped. See <db:link xlink:href="qml-qtquick-controls2-stackview.xml#item-ownership">Item Ownership</db:link> for more information.</db:para>
<db:para>If the <db:code role="parameter">target</db:code> argument is specified, all items down to the  item will be replaced. If <db:code role="parameter">target</db:code> is <db:code>null</db:code>, all items in the stack will be replaced. If not specified, only the top item will be replaced.</db:para>
<db:para><db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> creates an instance automatically if the replacing item is a <db:link xlink:href="qml-qtqml-component.xml">Component</db:link>, or a <db:link xlink:href="qml-url.xml">url</db:link>. The optional <db:code role="parameter">properties</db:code> argument specifies a map of initial property values for the replacing item. For dynamically created items, these values are applied before the creation is finalized. This is more efficient than setting property values after creation, particularly where large sets of property values are defined, and also allows property bindings to be set up (using <db:link xlink:href="qml-qtqml-qt.xml#binding-method">Qt.binding</db:link>()) before the item is created.</db:para>
<db:para>Replace the top item:</db:para>
<db:programlisting language="cpp">stackView.replace(rect)

// or with properties:
stackView.replace(rect, {&quot;color&quot;: &quot;red&quot;})
</db:programlisting>
<db:para>Multiple items can be replaced at the same time either by passing them as additional arguments, or as an array. Each item can be followed by a set of properties to apply.</db:para>
<db:para>Passing a variable amount of arguments:</db:para>
<db:programlisting language="cpp">stackView.replace(rect1, rect2, rect3)

// or with properties:
stackView.replace(rect1, {&quot;color&quot;: &quot;red&quot;}, rect2, {&quot;color&quot;: &quot;green&quot;}, rect3, {&quot;color&quot;: &quot;blue&quot;})
</db:programlisting>
<db:para>Replacing an array of items:</db:para>
<db:programlisting language="cpp">stackView.replace([rect1, rect2, rect3])

// or with properties:
stackView.replace([rect1, {&quot;color&quot;: &quot;red&quot;}, rect2, {&quot;color&quot;: &quot;green&quot;}, rect3, {&quot;color&quot;: &quot;blue&quot;}])
</db:programlisting>
<db:para>An <db:code role="parameter">operation</db:code> can be optionally specified as the last argument. Supported operations:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>StackView.Transition</db:para>
</db:td>
<db:td>
<db:para>An operation with default transitions (default).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.Immediate</db:para>
</db:td>
<db:td>
<db:para>An immediate operation without transitions.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.PushTransition</db:para>
</db:td>
<db:td>
<db:para>An operation with push transitions (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.1).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.ReplaceTransition</db:para>
</db:td>
<db:td>
<db:para>An operation with replace transitions (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.1).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StackView.PopTransition</db:para>
</db:td>
<db:td>
<db:para>An operation with pop transitions (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.1).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The following example illustrates the use of push and pop transitions with replace().</db:para>
<db:programlisting language="cpp">StackView {
    id: stackView

    initialItem: Component {
        id: page

        Page {
            Row {
                spacing: 20
                anchors.centerIn: parent

                Button {
                    text: &quot;&amp;lt;&quot;
                    onClicked: stackView.replace(page, StackView.PopTransition)
                }
                Button {
                    text: &quot;&amp;gt;&quot;
                    onClicked: stackView.replace(page, StackView.PushTransition)
                }
            }
        }
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-stackview.xml#push-method">push</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-stackview.xml#replacing-items">Replacing Items</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
