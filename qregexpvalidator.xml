<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRegExpValidator Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qregexpvalidator.xml">QRegExpValidator</db:link> class is used to check a string against a regular expression.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRegExpValidator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtquick-regexpvalidator.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qvalidator.xml" xlink:role="class">QValidator</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qregexpvalidator.xml">QRegExpValidator</db:link> uses a regular expression (regexp) to determine whether an input string is <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link>, <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link>, or <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link>. The regexp can either be supplied when the <db:link xlink:href="qregexpvalidator.xml">QRegExpValidator</db:link> is constructed, or at a later time.</db:para>
<db:para>When <db:link xlink:href="qregexpvalidator.xml">QRegExpValidator</db:link> determines whether a string is <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link> or not, the regexp is treated as if it begins with the start of string assertion (<db:emphasis role="bold">^</db:emphasis>) and ends with the end of string assertion (<db:emphasis role="bold">$</db:emphasis>); the match is against the entire input string, or from the given position if a start position greater than zero is given.</db:para>
<db:para>If a string is a prefix of an <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link> string, it is considered <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link>. For example, &quot;&quot; and &quot;A&quot; are <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link> for the regexp <db:emphasis role="bold">[A-Z][0-9]</db:emphasis> (whereas &quot;_&quot; would be <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link>).</db:para>
<db:para>For a brief introduction to Qt's regexp engine, see <db:link xlink:href="qregexp.xml">QRegExp</db:link>.</db:para>
<db:para>Example of use:</db:para>
<db:programlisting language="cpp">// regexp: optional '-' followed by between 1 and 3 digits
QRegExp rx(&quot;-?\\d{1,3}&quot;);
QValidator *validator = new QRegExpValidator(rx, this);

QLineEdit *edit = new QLineEdit(this);
edit-&amp;gt;setValidator(validator);
</db:programlisting>
<db:para>Below we present some examples of validators. In practice they would normally be associated with a widget as in the example above.</db:para>
<db:programlisting language="cpp">// integers 1 to 9999
QRegExp rx(&quot;[1-9]\\d{0,3}&quot;);
// the validator treats the regexp as &quot;^[1-9]\\d{0,3}$&quot;
QRegExpValidator v(rx, 0);
QString s;
int pos = 0;

s = &quot;0&quot;;     v.validate(s, pos);    // returns Invalid
s = &quot;12345&quot;; v.validate(s, pos);    // returns Invalid
s = &quot;1&quot;;     v.validate(s, pos);    // returns Acceptable

rx.setPattern(&quot;\\S+&quot;);            // one or more non-whitespace characters
v.setRegExp(rx);
s = &quot;myfile.txt&quot;;  v.validate(s, pos); // Returns Acceptable
s = &quot;my file.txt&quot;; v.validate(s, pos); // Returns Invalid

// A, B or C followed by exactly five digits followed by W, X, Y or Z
rx.setPattern(&quot;[A-C]\\d{5}[W-Z]&quot;);
v.setRegExp(rx);
s = &quot;a12345Z&quot;; v.validate(s, pos);        // Returns Invalid
s = &quot;A12345Z&quot;; v.validate(s, pos);        // Returns Acceptable
s = &quot;B12&quot;;     v.validate(s, pos);        // Returns Intermediate

// match most 'readme' files
rx.setPattern(&quot;read\\S?me(\.(txt|asc|1st))?&quot;);
rx.setCaseSensitive(false);
v.setRegExp(rx);
s = &quot;readme&quot;;      v.validate(s, pos); // Returns Acceptable
s = &quot;README.1ST&quot;;  v.validate(s, pos); // Returns Acceptable
s = &quot;read me.txt&quot;; v.validate(s, pos); // Returns Invalid
s = &quot;readm&quot;;       v.validate(s, pos); // Returns Intermediate
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregexp.xml">QRegExp</db:link></db:member>
<db:member><db:link xlink:href="qintvalidator.xml">QIntValidator</db:link></db:member>
<db:member><db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-tools-settingseditor-example.xml">Settings Editor Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="regExp-prop">
<db:title>regExp : QRegExp</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRegExp</db:type>
<db:varname>regExp</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">regExp</db:synopsisinfo>
<db:synopsisinfo role="setter">setRegExp</db:synopsisinfo>
<db:synopsisinfo role="notifier">regExpChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the regular expression used for validation</db:para>
<db:para>By default, this property contains a regular expression with the pattern <db:code>.*</db:code> that matches any string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>const <db:type><db:link xlink:href="qregexp.xml">QRegExp</db:link></db:type> &amp;<db:emphasis role="bold">regExp</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRegExp</db:emphasis>(const <db:type><db:link xlink:href="qregexp.xml">QRegExp</db:link></db:type> &amp;<db:emphasis>rx</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">regExpChanged</db:emphasis>(const <db:type><db:link xlink:href="qregexp.xml">QRegExp</db:link></db:type> &amp;<db:emphasis>regExp</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRegExpValidator">
<db:title>[explicit] QRegExpValidator::QRegExpValidator(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QRegExpValidator</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegExpValidator(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a validator with a <db:code role="parameter">parent</db:code> object that accepts any string (including an empty one) as valid.</db:para>
</db:section>
<db:section xml:id="QRegExpValidator-1">
<db:title>[explicit] QRegExpValidator::QRegExpValidator(const QRegExp &amp;<db:emphasis>rx</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QRegExpValidator</db:methodname>
<db:methodparam>
<db:type>const QRegExp &amp;</db:type>
<db:parameter>rx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegExpValidator(const QRegExp &amp;rx, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a validator with a <db:code role="parameter">parent</db:code> object that accepts all strings that match the regular expression <db:code role="parameter">rx</db:code>.</db:para>
<db:para>The match is made against the entire string; e.g. if the regexp is <db:emphasis role="bold">[A-Fa-f0-9]+</db:emphasis> it will be treated as <db:emphasis role="bold">^[A-Fa-f0-9]+$</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="dtor.QRegExpValidator">
<db:title>[virtual] QRegExpValidator::~QRegExpValidator()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QRegExpValidator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QRegExpValidator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the validator.</db:para>
</db:section>
<db:section xml:id="validate">
<db:title>[override virtual] QValidator::State QRegExpValidator::validate(QString &amp;<db:emphasis>input</db:emphasis>, int &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QValidator::State</db:type>
<db:methodname>validate</db:methodname>
<db:methodparam>
<db:type>QString &amp;</db:type>
<db:parameter>input</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QValidator::State validate(QString &amp;input, int &amp;pos) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qvalidator.xml#validate" role="function">QValidator::validate(QString &amp;input, int &amp;pos) const</db:link>.</db:para>
<db:para>Returns <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link> if <db:code role="parameter">input</db:code> is matched by the regular expression for this validator, <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link> if it has matched partially (i.e. could be a valid match if additional valid characters are added), and <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link> if <db:code role="parameter">input</db:code> is not matched.</db:para>
<db:para>Additionally, if <db:code role="parameter">input</db:code> is not matched, the <db:code role="parameter">pos</db:code> parameter is set to the length of the <db:code role="parameter">input</db:code> parameter.</db:para>
<db:para>For example, if the regular expression is <db:emphasis role="bold">\w\d\d</db:emphasis> (word-character, digit, digit) then &quot;A57&quot; is <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link>, &quot;E5&quot; is <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link>, and &quot;+9&quot; is <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregexp.xml#exactMatch">QRegExp::exactMatch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
