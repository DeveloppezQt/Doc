<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLDebugMessage Class</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link> class wraps an OpenGL debug message.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLDebugMessage</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS OpenGL)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::OpenGL)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opengl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOpenGLDebugMessage is part of <db:simplelist><db:member>shared</db:member><db:member>painting-3D</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Debug messages are usually created by the OpenGL server and then read by OpenGL clients (either from the OpenGL internal debug log, or logged in real-time). A debug message has a textual representation, a vendor-specific numeric id, a source, a type and a severity.</db:para>
<db:para>It's also possible for applications or third-party libraries and toolkits to create and insert messages in the debug log. In order to do so, you can use the <db:link xlink:href="qopengldebugmessage.xml#createApplicationMessage">createApplicationMessage</db:link>() or the <db:link xlink:href="qopengldebugmessage.xml#createThirdPartyMessage">createThirdPartyMessage</db:link>() static functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengldebuglogger.xml">QOpenGLDebugLogger</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Severity-enum">
<db:title>enum QOpenGLDebugMessage::Severity</db:title>
<db:bridgehead renderas="sect2">flags QOpenGLDebugMessage::Severities</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Severity</db:enumname>
<db:enumitem>
<db:enumidentifier>InvalidSeverity</db:enumidentifier>
<db:enumvalue>0x00000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HighSeverity</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediumSeverity</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LowSeverity</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotificationSeverity</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LastSeverity</db:enumidentifier>
<db:enumvalue>NotificationSeverity</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnySeverity</db:enumidentifier>
<db:enumvalue>0xffffffff</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QOpenGLDebugMessage::Severities</db:typedefname>
</db:typedefsynopsis>
<db:para>The Severity enum defines the severity of the debug message.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::InvalidSeverity</db:code></db:para>
</db:td>
<db:td><db:code>0x00000000</db:code></db:td>
<db:td>
<db:para>The severity of the message is invalid; this is the severity of a default-constructed <db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link> object.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::HighSeverity</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>The message has a high severity.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::MediumSeverity</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>The message has a medium severity.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::LowSeverity</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>The message has a low severity.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::NotificationSeverity</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>The message is a notification.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::AnySeverity</db:code></db:para>
</db:td>
<db:td><db:code>0xffffffff</db:code></db:td>
<db:td>
<db:para>This value corresponds to a mask of all possible message severities.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Severities</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Severity&gt;. </db:code>It stores an OR combination of <db:code>Severity</db:code> values.</db:para>
</db:section>
<db:section xml:id="Source-enum">
<db:title>enum QOpenGLDebugMessage::Source</db:title>
<db:bridgehead renderas="sect2">flags QOpenGLDebugMessage::Sources</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Source</db:enumname>
<db:enumitem>
<db:enumidentifier>InvalidSource</db:enumidentifier>
<db:enumvalue>0x00000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>APISource</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WindowSystemSource</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ShaderCompilerSource</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ThirdPartySource</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ApplicationSource</db:enumidentifier>
<db:enumvalue>0x00000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OtherSource</db:enumidentifier>
<db:enumvalue>0x00000020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LastSource</db:enumidentifier>
<db:enumvalue>OtherSource</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnySource</db:enumidentifier>
<db:enumvalue>0xffffffff</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QOpenGLDebugMessage::Sources</db:typedefname>
</db:typedefsynopsis>
<db:para>The Source enum defines the source of the debug message.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::InvalidSource</db:code></db:para>
</db:td>
<db:td><db:code>0x00000000</db:code></db:td>
<db:td>
<db:para>The source of the message is invalid; this is the source of a default-constructed <db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link> object.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::APISource</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>The message was generated in response to OpenGL API calls.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::WindowSystemSource</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>The message was generated by the window system.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::ShaderCompilerSource</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>The message was generated by the shader compiler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::ThirdPartySource</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>The message was generated by a third party, for instance an OpenGL framework a or debugging toolkit.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::ApplicationSource</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>The message was generated by the application itself.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::OtherSource</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>The message was generated by a source not included in this enumeration.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::AnySource</db:code></db:para>
</db:td>
<db:td><db:code>0xffffffff</db:code></db:td>
<db:td>
<db:para>This value corresponds to a mask of all possible message sources.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Sources</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Source&gt;. </db:code>It stores an OR combination of <db:code>Source</db:code> values.</db:para>
</db:section>
<db:section xml:id="Type-enum">
<db:title>enum QOpenGLDebugMessage::Type</db:title>
<db:bridgehead renderas="sect2">flags QOpenGLDebugMessage::Types</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Type</db:enumname>
<db:enumitem>
<db:enumidentifier>InvalidType</db:enumidentifier>
<db:enumvalue>0x00000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ErrorType</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DeprecatedBehaviorType</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UndefinedBehaviorType</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PortabilityType</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PerformanceType</db:enumidentifier>
<db:enumvalue>0x00000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OtherType</db:enumidentifier>
<db:enumvalue>0x00000020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MarkerType</db:enumidentifier>
<db:enumvalue>0x00000040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>GroupPushType</db:enumidentifier>
<db:enumvalue>0x00000080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>GroupPopType</db:enumidentifier>
<db:enumvalue>0x00000100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LastType</db:enumidentifier>
<db:enumvalue>GroupPopType</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnyType</db:enumidentifier>
<db:enumvalue>0xffffffff</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QOpenGLDebugMessage::Types</db:typedefname>
</db:typedefsynopsis>
<db:para>The Type enum defines the type of the debug message.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::InvalidType</db:code></db:para>
</db:td>
<db:td><db:code>0x00000000</db:code></db:td>
<db:td>
<db:para>The type of the message is invalid; this is the type of a default-constructed <db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link> object.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::ErrorType</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>The message represents an error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::DeprecatedBehaviorType</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>The message represents an usage of deprecated behavior.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::UndefinedBehaviorType</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>The message represents an usage of undefined behavior.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::PortabilityType</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>The message represents an usage of vendor-specific behavior, that might pose portability concerns.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::PerformanceType</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>The message represents a performance issue.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::OtherType</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>The message represents a type not included in this enumeration.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::MarkerType</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
<db:td>
<db:para>The message represents a marker in the debug log.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::GroupPushType</db:code></db:para>
</db:td>
<db:td><db:code>0x00000080</db:code></db:td>
<db:td>
<db:para>The message represents a debug group push operation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::GroupPopType</db:code></db:para>
</db:td>
<db:td><db:code>0x00000100</db:code></db:td>
<db:td>
<db:para>The message represents a debug group pop operation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopengldebugmessage.xml">QOpenGLDebugMessage</db:link></db:emphasis>::AnyType</db:code></db:para>
</db:td>
<db:td><db:code>0xffffffff</db:code></db:td>
<db:td>
<db:para>This value corresponds to a mask of all possible message types.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Types</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Type&gt;. </db:code>It stores an OR combination of <db:code>Type</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpenGLDebugMessage">
<db:title>QOpenGLDebugMessage::QOpenGLDebugMessage()</db:title>
<db:constructorsynopsis>
<db:methodname>QOpenGLDebugMessage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLDebugMessage()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a debug message with an empty message string, id set to 0, source set to <db:link xlink:href="qopengldebugmessage.xml#Source-enum">InvalidSource</db:link>, type set to <db:link xlink:href="qopengldebugmessage.xml#Type-enum">InvalidType</db:link>, and severity set to <db:link xlink:href="qopengldebugmessage.xml#Severity-enum">InvalidSeverity</db:link>.</db:para>
<db:note>
<db:para>This constructor should not be used to create a debug message; instead, use the <db:link xlink:href="qopengldebugmessage.xml#createApplicationMessage">createApplicationMessage</db:link>() or the <db:link xlink:href="qopengldebugmessage.xml#createThirdPartyMessage">createThirdPartyMessage</db:link>() static functions.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengldebugmessage.xml#createApplicationMessage">createApplicationMessage</db:link>()</db:member>
<db:member><db:link xlink:href="qopengldebugmessage.xml#createThirdPartyMessage">createThirdPartyMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QOpenGLDebugMessage-1">
<db:title>QOpenGLDebugMessage::QOpenGLDebugMessage(const QOpenGLDebugMessage &amp;<db:emphasis>debugMessage</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QOpenGLDebugMessage</db:methodname>
<db:methodparam>
<db:type>const QOpenGLDebugMessage &amp;</db:type>
<db:parameter>debugMessage</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLDebugMessage(const QOpenGLDebugMessage &amp;debugMessage)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a debug message as a copy of <db:code role="parameter">debugMessage</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengldebugmessage.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QOpenGLDebugMessage">
<db:title>QOpenGLDebugMessage::~QOpenGLDebugMessage()</db:title>
<db:destructorsynopsis>
<db:methodname>~QOpenGLDebugMessage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QOpenGLDebugMessage()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this debug message.</db:para>
</db:section>
<db:section xml:id="createApplicationMessage">
<db:title>[static] QOpenGLDebugMessage QOpenGLDebugMessage::createApplicationMessage(const QString &amp;<db:emphasis>text</db:emphasis>, GLuint <db:emphasis>id</db:emphasis> = 0, QOpenGLDebugMessage::Severity <db:emphasis>severity</db:emphasis> = NotificationSeverity, QOpenGLDebugMessage::Type <db:emphasis>type</db:emphasis> = OtherType)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QOpenGLDebugMessage</db:type>
<db:methodname>createApplicationMessage</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLuint</db:type>
<db:parameter>id</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLDebugMessage::Severity</db:type>
<db:parameter>severity</db:parameter>
<db:initializer>NotificationSeverity</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLDebugMessage::Type</db:type>
<db:parameter>type</db:parameter>
<db:initializer>OtherType</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLDebugMessage createApplicationMessage(const QString &amp;text, GLuint id, QOpenGLDebugMessage::Severity severity, QOpenGLDebugMessage::Type type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs and returns a debug message with <db:code role="parameter">text</db:code> as its text, <db:code role="parameter">id</db:code> as id, <db:code role="parameter">severity</db:code> as severity, and <db:code role="parameter">type</db:code> as type. The message source will be set to <db:link xlink:href="qopengldebugmessage.xml#Source-enum">ApplicationSource</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengldebuglogger.xml#logMessage">QOpenGLDebugLogger::logMessage</db:link>()</db:member>
<db:member><db:link xlink:href="qopengldebugmessage.xml#createThirdPartyMessage">createThirdPartyMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createThirdPartyMessage">
<db:title>[static] QOpenGLDebugMessage QOpenGLDebugMessage::createThirdPartyMessage(const QString &amp;<db:emphasis>text</db:emphasis>, GLuint <db:emphasis>id</db:emphasis> = 0, QOpenGLDebugMessage::Severity <db:emphasis>severity</db:emphasis> = NotificationSeverity, QOpenGLDebugMessage::Type <db:emphasis>type</db:emphasis> = OtherType)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QOpenGLDebugMessage</db:type>
<db:methodname>createThirdPartyMessage</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>GLuint</db:type>
<db:parameter>id</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLDebugMessage::Severity</db:type>
<db:parameter>severity</db:parameter>
<db:initializer>NotificationSeverity</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLDebugMessage::Type</db:type>
<db:parameter>type</db:parameter>
<db:initializer>OtherType</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLDebugMessage createThirdPartyMessage(const QString &amp;text, GLuint id, QOpenGLDebugMessage::Severity severity, QOpenGLDebugMessage::Type type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs and returns a debug message with <db:code role="parameter">text</db:code> as its text, <db:code role="parameter">id</db:code> as id, <db:code role="parameter">severity</db:code> as severity, and <db:code role="parameter">type</db:code> as type. The message source will be set to <db:link xlink:href="qopengldebugmessage.xml#Source-enum">ThirdPartySource</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengldebuglogger.xml#logMessage">QOpenGLDebugLogger::logMessage</db:link>()</db:member>
<db:member><db:link xlink:href="qopengldebugmessage.xml#createApplicationMessage">createApplicationMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="id">
<db:title>GLuint QOpenGLDebugMessage::id() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLuint</db:type>
<db:methodname>id</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint id() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the id of the debug message. Ids are generally vendor-specific.</db:para>
</db:section>
<db:section xml:id="message">
<db:title>QString QOpenGLDebugMessage::message() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>message</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString message() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the textual message contained by this debug message.</db:para>
</db:section>
<db:section xml:id="severity">
<db:title>QOpenGLDebugMessage::Severity QOpenGLDebugMessage::severity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLDebugMessage::Severity</db:type>
<db:methodname>severity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLDebugMessage::Severity severity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the severity of the debug message.</db:para>
</db:section>
<db:section xml:id="source">
<db:title>QOpenGLDebugMessage::Source QOpenGLDebugMessage::source() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLDebugMessage::Source</db:type>
<db:methodname>source</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLDebugMessage::Source source() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the source of the debug message.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>void QOpenGLDebugMessage::swap(QOpenGLDebugMessage &amp;<db:emphasis>debugMessage</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QOpenGLDebugMessage &amp;</db:type>
<db:parameter>debugMessage</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QOpenGLDebugMessage &amp;debugMessage)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the message <db:code role="parameter">debugMessage</db:code> with this message. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>QOpenGLDebugMessage::Type QOpenGLDebugMessage::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLDebugMessage::Type</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLDebugMessage::Type type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of the debug message.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QOpenGLDebugMessage::operator!=(const QOpenGLDebugMessage &amp;<db:emphasis>debugMessage</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QOpenGLDebugMessage &amp;</db:type>
<db:parameter>debugMessage</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QOpenGLDebugMessage &amp;debugMessage) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this message is different from <db:code role="parameter">debugMessage</db:code>, or false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengldebugmessage.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QOpenGLDebugMessage &amp;QOpenGLDebugMessage::operator=(const QOpenGLDebugMessage &amp;<db:emphasis>debugMessage</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QOpenGLDebugMessage &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QOpenGLDebugMessage &amp;</db:type>
<db:parameter>debugMessage</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLDebugMessage &amp; operator=(const QOpenGLDebugMessage &amp;debugMessage)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the message <db:code role="parameter">debugMessage</db:code> to this object, and returns a reference to the copy.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QOpenGLDebugMessage &amp;QOpenGLDebugMessage::operator=(QOpenGLDebugMessage &amp;&amp;<db:emphasis>debugMessage</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QOpenGLDebugMessage &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QOpenGLDebugMessage &amp;&amp;</db:type>
<db:parameter>debugMessage</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLDebugMessage &amp; operator=(QOpenGLDebugMessage &amp;&amp;debugMessage)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">debugMessage</db:code> to this object.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QOpenGLDebugMessage::operator==(const QOpenGLDebugMessage &amp;<db:emphasis>debugMessage</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QOpenGLDebugMessage &amp;</db:type>
<db:parameter>debugMessage</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QOpenGLDebugMessage &amp;debugMessage) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this debug message is equal to <db:code role="parameter">debugMessage</db:code>, or false otherwise. Two debugging messages are equal if they have the same textual message, the same id, the same source, the same type and the same severity.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengldebugmessage.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, QOpenGLDebugMessage::Source <db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLDebugMessage::Source</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, QOpenGLDebugMessage::Source source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the source <db:code role="parameter">source</db:code> into the debug object <db:code role="parameter">debug</db:code> for debugging purposes.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, QOpenGLDebugMessage::Type <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLDebugMessage::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, QOpenGLDebugMessage::Type type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the type <db:code role="parameter">type</db:code> into the debug object <db:code role="parameter">debug</db:code> for debugging purposes.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-2">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, QOpenGLDebugMessage::Severity <db:emphasis>severity</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLDebugMessage::Severity</db:type>
<db:parameter>severity</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, QOpenGLDebugMessage::Severity severity)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the severity <db:code role="parameter">severity</db:code> into the debug object <db:code role="parameter">debug</db:code> for debugging purposes.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-3">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QOpenGLDebugMessage &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpenGLDebugMessage &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, const QOpenGLDebugMessage &amp;message)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the message <db:code role="parameter">message</db:code> into the debug object <db:code role="parameter">debug</db:code> for debugging purposes.</db:para>
</db:section>
</db:section>
</db:article>
