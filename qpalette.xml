<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPalette Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpalette.xml">QPalette</db:link> class contains color groups for each widget state.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPalette</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPalette is part of <db:simplelist><db:member>appearance</db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A palette consists of three color groups: <db:emphasis>Active</db:emphasis>, <db:emphasis>Disabled</db:emphasis>, and <db:emphasis>Inactive</db:emphasis>. All widgets in Qt contain a palette and use their palette to draw themselves. This makes the user interface easily configurable and easier to keep consistent.</db:para>
<db:para>If you create a new widget we strongly recommend that you use the colors in the palette rather than hard-coding specific colors.</db:para>
<db:para>The color groups:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The Active group is used for the window that has keyboard focus.</db:para>
</db:listitem>
<db:listitem>
<db:para>The Inactive group is used for other windows.</db:para>
</db:listitem>
<db:listitem>
<db:para>The Disabled group is used for widgets (not windows) that are disabled for some reason.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Both active and inactive windows can contain disabled widgets. (Disabled widgets are often called <db:emphasis>inaccessible</db:emphasis> or <db:emphasis>grayed out</db:emphasis>.)</db:para>
<db:para>In most styles, Active and Inactive look the same.</db:para>
<db:para>Colors and brushes can be set for particular roles in any of a palette's color groups with <db:link xlink:href="qpalette.xml#setColor">setColor</db:link>() and <db:link xlink:href="qpalette.xml#setBrush">setBrush</db:link>(). A color group contains a group of colors used by widgets for drawing themselves. We recommend that widgets use color group roles from the palette such as &quot;foreground&quot; and &quot;base&quot; rather than literal colors like &quot;red&quot; or &quot;turquoise&quot;. The color roles are enumerated and defined in the <db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link> documentation.</db:para>
<db:para>We strongly recommend that you use the default palette of the current style (returned by <db:link xlink:href="qguiapplication.xml#palette">QGuiApplication::palette</db:link>()) and modify that as necessary. This is done by Qt's widgets when they are drawn.</db:para>
<db:para>To modify a color group you call the functions <db:link xlink:href="qpalette.xml#setColor">setColor</db:link>() and <db:link xlink:href="qpalette.xml#setBrush">setBrush</db:link>(), depending on whether you want a pure color or a pixmap pattern.</db:para>
<db:para>There are also corresponding <db:link xlink:href="qpalette.xml#color">color</db:link>() and <db:link xlink:href="qpalette.xml#brush">brush</db:link>() getters, and a commonly used convenience function to get the <db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link> for the current <db:link xlink:href="qpalette.xml#ColorGroup-enum">ColorGroup</db:link>: <db:link xlink:href="qpalette.xml#window">window</db:link>(), <db:link xlink:href="qpalette.xml#windowText">windowText</db:link>(), <db:link xlink:href="qpalette.xml#base">base</db:link>(), etc.</db:para>
<db:para>You can copy a palette using the copy constructor and test to see if two palettes are <db:emphasis>identical</db:emphasis> using <db:link xlink:href="qpalette.xml#isCopyOf">isCopyOf</db:link>().</db:para>
<db:para><db:link xlink:href="qpalette.xml">QPalette</db:link> is optimized by the use of <db:link xlink:href="implicit-sharing.xml">implicit sharing</db:link>, so it is very efficient to pass <db:link xlink:href="qpalette.xml">QPalette</db:link> objects as arguments.</db:para>
<db:warning>
<db:para>Some styles do not use the palette for all drawing, for instance, if they make use of native theme engines. This is the case for both the Windows XP, Windows Vista, and the macOS styles.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#setPalette">QApplication::setPalette</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#palette-prop">QWidget::setPalette</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml">QColor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ColorGroup-enum">
<db:title>enum QPalette::ColorGroup</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Disabled</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Active</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Inactive</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Normal</db:code></db:para>
</db:td>
<db:td><db:code>Active</db:code></db:td>
<db:td>
<db:para>synonym for Active</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ColorRole-enum">
<db:title>enum QPalette::ColorRole</db:title>
<db:mediaobject>
<db:alt>Color Roles</db:alt>
<db:imageobject>
<db:imagedata fileref="images/palette.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The ColorRole enum defines the different symbolic color roles used in current GUIs.</db:para>
<db:para>The central roles are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Window</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>A general background color.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Background</db:code></db:para>
</db:td>
<db:td><db:code>Window</db:code></db:td>
<db:td>
<db:para>This value is obsolete. Use Window instead.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::WindowText</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A general foreground color.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Foreground</db:code></db:para>
</db:td>
<db:td><db:code>WindowText</db:code></db:td>
<db:td>
<db:para>This value is obsolete. Use WindowText instead.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Base</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Used mostly as the background color for text entry widgets, but can also be used for other painting - such as the background of combobox drop down lists and toolbar handles. It is usually white or another light color.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::AlternateBase</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Used as the alternate background color in views with alternating row colors (see <db:link xlink:href="qabstractitemview.xml#alternatingRowColors-prop">QAbstractItemView::setAlternatingRowColors</db:link>()).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::ToolTipBase</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>Used as the background color for <db:link xlink:href="qtooltip.xml">QToolTip</db:link> and <db:link xlink:href="qwhatsthis.xml">QWhatsThis</db:link>. Tool tips use the Inactive color group of <db:link xlink:href="qpalette.xml">QPalette</db:link>, because tool tips are not active windows.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::ToolTipText</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>Used as the foreground color for <db:link xlink:href="qtooltip.xml">QToolTip</db:link> and <db:link xlink:href="qwhatsthis.xml">QWhatsThis</db:link>. Tool tips use the Inactive color group of <db:link xlink:href="qpalette.xml">QPalette</db:link>, because tool tips are not active windows.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Text</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The foreground color used with <db:code>Base</db:code>. This is usually the same as the <db:code>WindowText</db:code>, in which case it must provide good contrast with <db:code>Window</db:code> and <db:code>Base</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Button</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The general button background color. This background can be different from <db:code>Window</db:code> as some styles require a different background color for buttons.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::ButtonText</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>A foreground color used with the <db:code>Button</db:code> color.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::BrightText</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>A text color that is very different from <db:code>WindowText</db:code>, and contrasts well with e.g. <db:code>Dark</db:code>. Typically used for text that needs to be drawn where <db:code>Text</db:code> or <db:code>WindowText</db:code> would give poor contrast, such as on pressed push buttons. Note that text colors can be used for things other than just words; text colors are <db:emphasis>usually</db:emphasis> used for text, but it's quite common to use the text color roles for lines, icons, etc.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>There are some color roles used mostly for 3D bevel and shadow effects. All of these are normally derived from <db:code>Window</db:code>, and used in ways that depend on that relationship. For example, buttons depend on it to make the bevels look attractive, and Motif scroll bars depend on <db:code>Mid</db:code> to be slightly different from <db:code>Window</db:code>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Light</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Lighter than <db:code>Button</db:code> color.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Midlight</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Between <db:code>Button</db:code> and <db:code>Light</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Dark</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Darker than <db:code>Button</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Mid</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Between <db:code>Button</db:code> and <db:code>Dark</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Shadow</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>A very dark color. By default, the shadow color is <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::black</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Selected (marked) items have two roles:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Highlight</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>A color to indicate a selected item or the current item. By default, the highlight color is <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::darkBlue</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::HighlightedText</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>A text color that contrasts with <db:code>Highlight</db:code>. By default, the highlighted text color is <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::white</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>There are two color roles related to hyperlinks:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::Link</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>A text color used for unvisited hyperlinks. By default, the link color is <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::blue</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::LinkVisited</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>A text color used for already visited hyperlinks. By default, the linkvisited color is <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::magenta</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that we do not use the <db:code>Link</db:code> and <db:code>LinkVisited</db:code> roles when rendering rich text in Qt, and that we recommend that you use CSS and the <db:link xlink:href="qtextdocument.xml#defaultStyleSheet-prop">QTextDocument::setDefaultStyleSheet</db:link>() function to alter the appearance of links. For example:</db:para>
<db:programlisting language="cpp">    QTextBrowser browser;
    QColor linkColor(Qt::red);
    QString sheet = QString::fromLatin1(&quot;a { text-decoration: underline; color: %1 }&quot;).arg(linkColor.name());
    browser.document()-&gt;setDefaultStyleSheet(sheet);
</db:programlisting>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpalette.xml">QPalette</db:link></db:emphasis>::NoRole</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>No role; this special role is often used to indicate that a role has not been assigned.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPalette">
<db:title>QPalette::QPalette()</db:title>
<db:para>Constructs a palette object that uses the application's default palette.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#setPalette">QApplication::setPalette</db:link>()</db:member>
<db:member><db:link xlink:href="qapplication.xml#palette">QApplication::palette</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPalette-2">
<db:title>QPalette::QPalette(Qt::GlobalColor <db:emphasis>button</db:emphasis>)</db:title>
<db:para>Constructs a palette from the <db:code role="parameter">button</db:code> color. The other colors are automatically calculated, based on this color. <db:code>Window</db:code> will be the button color as well.</db:para>
</db:section>
<db:section xml:id="QPalette-3">
<db:title>QPalette::QPalette(const QColor &amp;<db:emphasis>button</db:emphasis>)</db:title>
<db:para>Constructs a palette from the <db:code role="parameter">button</db:code> color. The other colors are automatically calculated, based on this color. <db:code>Window</db:code> will be the button color as well.</db:para>
</db:section>
<db:section xml:id="QPalette-5">
<db:title>QPalette::QPalette(const QColor &amp;<db:emphasis>button</db:emphasis>, const QColor &amp;<db:emphasis>window</db:emphasis>)</db:title>
<db:para>Constructs a palette from a <db:code role="parameter">button</db:code> color and a <db:code role="parameter">window</db:code>. The other colors are automatically calculated, based on these colors.</db:para>
</db:section>
<db:section xml:id="QPalette-7">
<db:title>QPalette::QPalette(const QBrush &amp;<db:emphasis>windowText</db:emphasis>, const QBrush &amp;<db:emphasis>button</db:emphasis>, const QBrush &amp;<db:emphasis>light</db:emphasis>, const QBrush &amp;<db:emphasis>dark</db:emphasis>, const QBrush &amp;<db:emphasis>mid</db:emphasis>, const QBrush &amp;<db:emphasis>text</db:emphasis>, const QBrush &amp;<db:emphasis>bright_text</db:emphasis>, const QBrush &amp;<db:emphasis>base</db:emphasis>, const QBrush &amp;<db:emphasis>window</db:emphasis>)</db:title>
<db:para>Constructs a palette. You can pass either brushes, pixmaps or plain colors for <db:code role="parameter">windowText</db:code>, <db:code role="parameter">button</db:code>, <db:code role="parameter">light</db:code>, <db:code role="parameter">dark</db:code>, <db:code role="parameter">mid</db:code>, <db:code role="parameter">text</db:code>, <db:code role="parameter">bright_text</db:code>, <db:code role="parameter">base</db:code> and <db:code role="parameter">window</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml">QBrush</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPalette-4">
<db:title>QPalette::QPalette(const QPalette &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">p</db:code>.</db:para>
<db:para>This constructor is fast thanks to <db:link xlink:href="implicit-sharing.xml">implicit sharing</db:link>.</db:para>
</db:section>
<db:section xml:id="QPalette-1">
<db:title>[noexcept, since 5.4] QPalette::QPalette(QPalette &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-constructs a <db:link xlink:href="qpalette.xml">QPalette</db:link> instance, making it point at the same object that <db:code role="parameter">other</db:code> was pointing to.</db:para>
<db:para>After being moved from, you can only assign to or destroy <db:code role="parameter">other</db:code>. Any other operation will result in undefined behavior.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="dtor.QPalette">
<db:title>[noexcept] QPalette::~QPalette()</db:title>
<db:para>Destroys the palette.</db:para>
</db:section>
<db:section xml:id="alternateBase">
<db:title>const QBrush &amp;QPalette::alternateBase() const</db:title>
<db:para>Returns the alternate base brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="base">
<db:title>const QBrush &amp;QPalette::base() const</db:title>
<db:para>Returns the base brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="brightText">
<db:title>const QBrush &amp;QPalette::brightText() const</db:title>
<db:para>Returns the bright text foreground brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="brush">
<db:title>const QBrush &amp;QPalette::brush(QPalette::ColorGroup <db:emphasis>group</db:emphasis>, QPalette::ColorRole <db:emphasis>role</db:emphasis>) const</db:title>
<db:para>Returns the brush in the specified color <db:code role="parameter">group</db:code>, used for the given color <db:code role="parameter">role</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#color">color</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#setBrush">setBrush</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="brush-1">
<db:title>const QBrush &amp;QPalette::brush(QPalette::ColorRole <db:emphasis>role</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the brush that has been set for the given color <db:code role="parameter">role</db:code> in the current <db:link xlink:href="qpalette.xml#ColorGroup-enum">ColorGroup</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#color">color</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#setBrush">setBrush</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="button">
<db:title>const QBrush &amp;QPalette::button() const</db:title>
<db:para>Returns the button brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buttonText">
<db:title>const QBrush &amp;QPalette::buttonText() const</db:title>
<db:para>Returns the button text foreground brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cacheKey">
<db:title>qint64 QPalette::cacheKey() const</db:title>
<db:para>Returns a number that identifies the contents of this <db:link xlink:href="qpalette.xml">QPalette</db:link> object. Distinct <db:link xlink:href="qpalette.xml">QPalette</db:link> objects can have the same key if they refer to the same contents.</db:para>
<db:para>The cacheKey() will change when the palette is altered.</db:para>
</db:section>
<db:section xml:id="color">
<db:title>const QColor &amp;QPalette::color(QPalette::ColorGroup <db:emphasis>group</db:emphasis>, QPalette::ColorRole <db:emphasis>role</db:emphasis>) const</db:title>
<db:para>Returns the color in the specified color <db:code role="parameter">group</db:code>, used for the given color <db:code role="parameter">role</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#setColor">setColor</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="color-1">
<db:title>const QColor &amp;QPalette::color(QPalette::ColorRole <db:emphasis>role</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the color that has been set for the given color <db:code role="parameter">role</db:code> in the current <db:link xlink:href="qpalette.xml#ColorGroup-enum">ColorGroup</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentColorGroup">
<db:title>QPalette::ColorGroup QPalette::currentColorGroup() const</db:title>
<db:para>Returns the palette's current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#setCurrentColorGroup">setCurrentColorGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dark">
<db:title>const QBrush &amp;QPalette::dark() const</db:title>
<db:para>Returns the dark brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="highlight">
<db:title>const QBrush &amp;QPalette::highlight() const</db:title>
<db:para>Returns the highlight brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="highlightedText">
<db:title>const QBrush &amp;QPalette::highlightedText() const</db:title>
<db:para>Returns the highlighted text brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isBrushSet">
<db:title>[since 4.2] bool QPalette::isBrushSet(QPalette::ColorGroup <db:emphasis>cg</db:emphasis>, QPalette::ColorRole <db:emphasis>cr</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qpalette.xml#ColorGroup-enum">ColorGroup</db:link> <db:code role="parameter">cg</db:code> and <db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link> <db:code role="parameter">cr</db:code> has been set previously on this palette; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#setBrush">setBrush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCopyOf">
<db:title>bool QPalette::isCopyOf(const QPalette &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this palette and <db:code role="parameter">p</db:code> are copies of each other, i.e. one of them was created as a copy of the other and neither was subsequently modified; otherwise returns <db:code>false</db:code>. This is much stricter than equality.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#operator-eq">operator=</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEqual">
<db:title>bool QPalette::isEqual(QPalette::ColorGroup <db:emphasis>cg1</db:emphasis>, QPalette::ColorGroup <db:emphasis>cg2</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> (usually quickly) if color group <db:code role="parameter">cg1</db:code> is equal to <db:code role="parameter">cg2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="light">
<db:title>const QBrush &amp;QPalette::light() const</db:title>
<db:para>Returns the light brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="link">
<db:title>const QBrush &amp;QPalette::link() const</db:title>
<db:para>Returns the unvisited link text brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="linkVisited">
<db:title>const QBrush &amp;QPalette::linkVisited() const</db:title>
<db:para>Returns the visited link text brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mid">
<db:title>const QBrush &amp;QPalette::mid() const</db:title>
<db:para>Returns the mid brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="midlight">
<db:title>const QBrush &amp;QPalette::midlight() const</db:title>
<db:para>Returns the midlight brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resolve">
<db:title>QPalette QPalette::resolve(const QPalette &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns a new <db:link xlink:href="qpalette.xml">QPalette</db:link> that has attributes copied from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="setBrush">
<db:title>void QPalette::setBrush(QPalette::ColorRole <db:emphasis>role</db:emphasis>, const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:para>Sets the brush for the given color <db:code role="parameter">role</db:code> to the specified <db:code role="parameter">brush</db:code> for all groups in the palette.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#setColor">setColor</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBrush-1">
<db:title>void QPalette::setBrush(QPalette::ColorGroup <db:emphasis>group</db:emphasis>, QPalette::ColorRole <db:emphasis>role</db:emphasis>, const QBrush &amp;<db:emphasis>brush</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the brush in the specified color <db:code role="parameter">group</db:code>, used for the given color <db:code role="parameter">role</db:code>, to <db:code role="parameter">brush</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#setColor">setColor</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColor">
<db:title>void QPalette::setColor(QPalette::ColorGroup <db:emphasis>group</db:emphasis>, QPalette::ColorRole <db:emphasis>role</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:para>Sets the color in the specified color <db:code role="parameter">group</db:code>, used for the given color <db:code role="parameter">role</db:code>, to the specified solid <db:code role="parameter">color</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#setBrush">setBrush</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#color">color</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColor-1">
<db:title>void QPalette::setColor(QPalette::ColorRole <db:emphasis>role</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the color used for the given color <db:code role="parameter">role</db:code>, in all color groups, to the specified solid <db:code role="parameter">color</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#setColor">setColor</db:link>()</db:member>
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColorGroup">
<db:title>void QPalette::setColorGroup(QPalette::ColorGroup <db:emphasis>cg</db:emphasis>, const QBrush &amp;<db:emphasis>windowText</db:emphasis>, const QBrush &amp;<db:emphasis>button</db:emphasis>, const QBrush &amp;<db:emphasis>light</db:emphasis>, const QBrush &amp;<db:emphasis>dark</db:emphasis>, const QBrush &amp;<db:emphasis>mid</db:emphasis>, const QBrush &amp;<db:emphasis>text</db:emphasis>, const QBrush &amp;<db:emphasis>bright_text</db:emphasis>, const QBrush &amp;<db:emphasis>base</db:emphasis>, const QBrush &amp;<db:emphasis>window</db:emphasis>)</db:title>
<db:para>Sets a the group at <db:code role="parameter">cg</db:code>. You can pass either brushes, pixmaps or plain colors for <db:code role="parameter">windowText</db:code>, <db:code role="parameter">button</db:code>, <db:code role="parameter">light</db:code>, <db:code role="parameter">dark</db:code>, <db:code role="parameter">mid</db:code>, <db:code role="parameter">text</db:code>, <db:code role="parameter">bright_text</db:code>, <db:code role="parameter">base</db:code> and <db:code role="parameter">window</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbrush.xml">QBrush</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentColorGroup">
<db:title>void QPalette::setCurrentColorGroup(QPalette::ColorGroup <db:emphasis>cg</db:emphasis>)</db:title>
<db:para>Set the palette's current color group to <db:code role="parameter">cg</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#currentColorGroup">currentColorGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shadow">
<db:title>const QBrush &amp;QPalette::shadow() const</db:title>
<db:para>Returns the shadow brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 5.0] void QPalette::swap(QPalette &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this palette instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="text">
<db:title>const QBrush &amp;QPalette::text() const</db:title>
<db:para>Returns the text foreground brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toolTipBase">
<db:title>[since 4.4] const QBrush &amp;QPalette::toolTipBase() const</db:title>
<db:para>Returns the tool tip base brush of the current color group. This brush is used by <db:link xlink:href="qtooltip.xml">QToolTip</db:link> and <db:link xlink:href="qwhatsthis.xml">QWhatsThis</db:link>.</db:para>
<db:note>
<db:para>Tool tips use the Inactive color group of <db:link xlink:href="qpalette.xml">QPalette</db:link>, because tool tips are not active windows.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toolTipText">
<db:title>[since 4.4] const QBrush &amp;QPalette::toolTipText() const</db:title>
<db:para>Returns the tool tip text brush of the current color group. This brush is used by <db:link xlink:href="qtooltip.xml">QToolTip</db:link> and <db:link xlink:href="qwhatsthis.xml">QWhatsThis</db:link>.</db:para>
<db:note>
<db:para>Tool tips use the Inactive color group of <db:link xlink:href="qpalette.xml">QPalette</db:link>, because tool tips are not active windows.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="window">
<db:title>const QBrush &amp;QPalette::window() const</db:title>
<db:para>Returns the window (general background) brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowText">
<db:title>const QBrush &amp;QPalette::windowText() const</db:title>
<db:para>Returns the window text (general foreground) brush of the current color group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#ColorRole-enum">ColorRole</db:link></db:member>
<db:member><db:link xlink:href="qpalette.xml#brush">brush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QPalette::operator QVariant() const</db:title>
<db:para>Returns the palette as a <db:link xlink:href="qvariant.xml">QVariant</db:link></db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QPalette::operator!=(const QPalette &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> (slowly) if this palette is different from <db:code role="parameter">p</db:code>; otherwise returns <db:code>false</db:code> (usually quickly).</db:para>
<db:note>
<db:para>The current <db:link xlink:href="qpalette.xml#ColorGroup-enum">ColorGroup</db:link> is not taken into account when comparing palettes</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept, since 5.2] QPalette &amp;QPalette::operator=(QPalette &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qpalette.xml">QPalette</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QPalette &amp;QPalette::operator=(const QPalette &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">p</db:code> to this palette and returns a reference to this palette.</db:para>
<db:para>This operation is fast thanks to <db:link xlink:href="implicit-sharing.xml">implicit sharing</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QPalette::operator==(const QPalette &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> (usually quickly) if this palette is equal to <db:code role="parameter">p</db:code>; otherwise returns <db:code>false</db:code> (slowly).</db:para>
<db:note>
<db:para>The current <db:link xlink:href="qpalette.xml#ColorGroup-enum">ColorGroup</db:link> is not taken into account when comparing palettes</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>s</db:emphasis>, const QPalette &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:para>Writes the palette, <db:code role="parameter">p</db:code> to the stream <db:code role="parameter">s</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-11">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>s</db:emphasis>, QPalette &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:para>Reads a palette from the stream, <db:code role="parameter">s</db:code> into the palette <db:code role="parameter">p</db:code>, and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Format of the QDataStream operators</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QPalette</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qpalette.xml">QPalette</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="QPalette-6">
<db:title>[deprecated] QPalette::QPalette(const QColor &amp;<db:emphasis>windowText</db:emphasis>, const QColor &amp;<db:emphasis>window</db:emphasis>, const QColor &amp;<db:emphasis>light</db:emphasis>, const QColor &amp;<db:emphasis>dark</db:emphasis>, const QColor &amp;<db:emphasis>mid</db:emphasis>, const QColor &amp;<db:emphasis>text</db:emphasis>, const QColor &amp;<db:emphasis>base</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Constructs a palette with the specified <db:code role="parameter">windowText</db:code>, <db:code role="parameter">window</db:code>, <db:code role="parameter">light</db:code>, <db:code role="parameter">dark</db:code>, <db:code role="parameter">mid</db:code>, <db:code role="parameter">text</db:code>, and <db:code role="parameter">base</db:code> colors. The button color will be set to the window color.</db:para>
</db:section>
<db:section xml:id="background">
<db:title>[deprecated] const QBrush &amp;QPalette::background() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qpalette.xml#window">window</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="foreground">
<db:title>[deprecated] const QBrush &amp;QPalette::foreground() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qpalette.xml#windowText">windowText</db:link>() instead.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
