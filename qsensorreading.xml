<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSensorReading Class</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsensorreading.xml">QSensorReading</db:link> class holds the readings from the sensor.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSensorReading</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Sensors)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Sensors)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sensors</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qaccelerometerreading.xml" xlink:role="class">QAccelerometerReading</db:link>, <db:link xlink:href="qambientlightreading.xml" xlink:role="class">QAmbientLightReading</db:link>, <db:link xlink:href="qambienttemperaturereading.xml" xlink:role="class">QAmbientTemperatureReading</db:link>, <db:link xlink:href="qcompassreading.xml" xlink:role="class">QCompassReading</db:link>, <db:link xlink:href="qgyroscopereading.xml" xlink:role="class">QGyroscopeReading</db:link>, <db:link xlink:href="qhumidityreading.xml" xlink:role="class">QHumidityReading</db:link>, <db:link xlink:href="qlightreading.xml" xlink:role="class">QLightReading</db:link>, <db:link xlink:href="qmagnetometerreading.xml" xlink:role="class">QMagnetometerReading</db:link>, <db:link xlink:href="qorientationreading.xml" xlink:role="class">QOrientationReading</db:link>, <db:link xlink:href="qpressurereading.xml" xlink:role="class">QPressureReading</db:link>, <db:link xlink:href="qproximityreading.xml" xlink:role="class">QProximityReading</db:link>, <db:link xlink:href="qrotationreading.xml" xlink:role="class">QRotationReading</db:link>, and <db:link xlink:href="qtiltreading.xml" xlink:role="class">QTiltReading</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSensorReading is part of <db:simplelist><db:member>sensors_main</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Note that <db:link xlink:href="qsensorreading.xml">QSensorReading</db:link> is not particularly useful by itself. The interesting data for each sensor is defined in a sub-class of <db:link xlink:href="qsensorreading.xml">QSensorReading</db:link>.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="timestamp-prop">
<db:title>[read-only] timestamp : const quint64</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>quint64</db:type>
<db:varname>timestamp</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">timestamp</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the timestamp of the reading.</db:para>
<db:para>Timestamps values are microseconds since a fixed point. You can use timestamps to see how far apart two sensor readings are.</db:para>
<db:para>Note that sensor timestamps from different sensors may not be directly comparable (as they may choose different fixed points for their reference).</db:para>
<db:para><db:emphasis role="bold">Note that some platforms do not deliver timestamps correctly</db:emphasis>. Applications should be prepared for occasional issues that cause timestamps to jump backwards.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#quint64-typedef">quint64</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qsensorreading.xml#timestamp">timestamp</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="setTimestamp">
<db:title>void QSensorReading::setTimestamp(quint64 <db:emphasis>timestamp</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTimestamp</db:methodname>
<db:methodparam>
<db:type>quint64</db:type>
<db:parameter>timestamp</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTimestamp(quint64 timestamp)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">timestamp</db:code> of the reading.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsensorreading.xml#timestamp">timestamp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timestamp">
<db:title>quint64 QSensorReading::timestamp() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint64</db:type>
<db:methodname>timestamp</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">timestamp</db:synopsisinfo>
<db:synopsisinfo role="signature">quint64 timestamp() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the timestamp of the reading.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsensorreading.xml#timestamp-prop">timestamp</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsensorreading.xml#setTimestamp">setTimestamp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>QVariant QSensorReading::value(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant value(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the property at <db:code role="parameter">index</db:code>.</db:para>
<db:para>Note that this function is slower than calling the data function directly.</db:para>
<db:para>Here is an example of getting a property via the different mechanisms available.</db:para>
<db:para>Accessing directly provides the best performance but requires compile-time knowledge of the data you are accessing.</db:para>
<db:programlisting language="cpp">QAccelerometerReading *reading = ...;
qreal x = reading-&amp;gt;x();
</db:programlisting>
<db:para>You can also access a property by name. To do this you must call <db:link xlink:href="qobject.xml#property">QObject::property</db:link>().</db:para>
<db:programlisting language="cpp">qreal x = reading-&amp;gt;property(&quot;x&quot;).value&amp;lt;qreal&amp;gt;();
</db:programlisting>
<db:para>Finally, you can access values via numeric index.</db:para>
<db:programlisting language="cpp">qreal x = reading-&amp;gt;value(0).value&amp;lt;qreal&amp;gt;();
</db:programlisting>
<db:para>Note that value() can only access properties declared with <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>() in sub-classes of <db:link xlink:href="qsensorreading.xml">QSensorReading</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsensorreading.xml#valueCount">valueCount</db:link>()</db:member>
<db:member><db:link xlink:href="qobject.xml#property">QObject::property</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueCount">
<db:title>int QSensorReading::valueCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>valueCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int valueCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of extra properties that the reading has.</db:para>
<db:para>Note that this does not count properties declared in <db:link xlink:href="qsensorreading.xml">QSensorReading</db:link>.</db:para>
<db:para>As an example, this returns 3 for <db:link xlink:href="qaccelerometerreading.xml">QAccelerometerReading</db:link> because there are 3 properties defined in that class.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="DECLARE_READING">
<db:title>DECLARE_READING(<db:emphasis>classname</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>DECLARE_READING</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>classname</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">DECLARE_READING(classname)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The DECLARE_READING macro adds some required methods to a reading class.</db:para>
<db:para>This macro should be used for all reading classes. Pass the <db:code role="parameter">classname</db:code> of your reading class.</db:para>
<db:programlisting language="cpp">class MyReading : public QSensorReading
{
    \Q_OBJECT
    Q_PROPERTY(qreal myprop READ myprop)
    DECLARE_READING(MyReading)
public:
    qreal myprop() const;
    vod setMyprop(qreal myprop);
};
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsensorreading.xml#IMPLEMENT_READING">IMPLEMENT_READING</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="IMPLEMENT_READING">
<db:title>IMPLEMENT_READING(<db:emphasis>classname</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>IMPLEMENT_READING</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>classname</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">IMPLEMENT_READING(classname)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The IMPLEMENT_READING macro implements the required methods for a reading class.</db:para>
<db:para>This macro should be used for all reading classes. It should be placed into a single compilation unit (source file), not into a header file. Pass the <db:code role="parameter">classname</db:code> of your reading class.</db:para>
<db:programlisting language="cpp">IMPLEMENT_READING(MyReading)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsensorreading.xml#DECLARE_READING">DECLARE_READING</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
