<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlItem Class</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> class contains either an XML node or an atomic value.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xmlpatterns</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlItem is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In XQuery, all expressions evaluate to a sequence of items, where each item is either an XML node or an atomic value. The query in the following snippet evaluates to sequence of five items.</db:para>
<db:programlisting language="cpp">&amp;lt;aNode/&amp;gt;,
xs:base64Binary(&quot;FFFF&quot;),
current-date(),
3e3, (: A floating point value :)
attribute {&quot;name&quot;} {()}
</db:programlisting>
<db:para>The five items are: An element, an atomic value (binary data encoded in base64), a date, a float, and an attribute.</db:para>
<db:para><db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> is the class that represents these XQuery items in the Qt XML Patterns API. A non-null instance of <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> is either a node or an atomic value. Calling <db:link xlink:href="qxmlitem.xml#isNode">isNode</db:link>() or <db:link xlink:href="qxmlitem.xml#isAtomicValue">isAtomicValue</db:link>() tells you which it is. Atomic values are represented elsewhere in the Qt API as instances of <db:link xlink:href="qvariant.xml">QVariant</db:link>, and an instance of <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> that represents an atomic value can be converted to a <db:link xlink:href="qvariant.xml">QVariant</db:link> by calling <db:link xlink:href="qxmlitem.xml#toAtomicValue">toAtomicValue</db:link>(). A <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> that wraps a node is represented elsewhere as an instance of <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link>. A node <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> can be converted to a <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> by calling <db:link xlink:href="qxmlitem.xml#toNodeModelIndex">toNodeModelIndex</db:link>().</db:para>
<db:para>A default constructed <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> instance is neither a node nor an atomic value. It is considered null, in which case <db:link xlink:href="qxmlitem.xml#isNull">isNull</db:link>() returns true.</db:para>
<db:para>An instance of <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> will be left dangling if the <db:link xlink:href="qabstractxmlnodemodel.xml">XML node model</db:link> it refers to is deleted, if it is a <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link>.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Iterator-typedef">
<db:title>QXmlItem::Iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>Iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A QAbstractXmlForwardIterator over <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlItem">
<db:title>QXmlItem::QXmlItem()</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlItem()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> that is neither a node nor an atomic value. <db:link xlink:href="qxmlitem.xml#isNull">isNull</db:link>() returns true for a default constructed instance.</db:para>
</db:section>
<db:section xml:id="QXmlItem-2">
<db:title>QXmlItem::QXmlItem(const QXmlNodeModelIndex &amp;<db:emphasis>node</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlItem</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>node</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlItem(const QXmlNodeModelIndex &amp;node)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a node <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> that is a copy of <db:code role="parameter">node</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlitem.xml#isNode">isNode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QXmlItem-3">
<db:title>QXmlItem::QXmlItem(const QVariant &amp;<db:emphasis>atomicValue</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlItem</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>atomicValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlItem(const QVariant &amp;atomicValue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an atomic value <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> with <db:code role="parameter">atomicValue</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlitem.xml#isAtomicValue">isAtomicValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QXmlItem-1">
<db:title>QXmlItem::QXmlItem(const QXmlItem &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlItem</db:methodname>
<db:methodparam>
<db:type>const QXmlItem &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlItem(const QXmlItem &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>The copy constructor constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QXmlItem">
<db:title>QXmlItem::~QXmlItem()</db:title>
<db:destructorsynopsis>
<db:methodname>~QXmlItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QXmlItem()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="isAtomicValue">
<db:title>bool QXmlItem::isAtomicValue() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAtomicValue</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAtomicValue() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this item is an atomic value. Returns false if it is a node or null.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlitem.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlitem.xml#isNode">isNode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNode">
<db:title>bool QXmlItem::isNode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this item is a Node. Returns false if it is an atomic value or null.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlitem.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlitem.xml#isAtomicValue">isAtomicValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QXmlItem::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> is neither a node nor an atomic value. Default constructed instances of <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> are null.</db:para>
</db:section>
<db:section xml:id="toAtomicValue">
<db:title>QVariant QXmlItem::toAtomicValue() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>toAtomicValue</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant toAtomicValue() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If this <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> represents an atomic value, it is converted to an appropriate <db:link xlink:href="qvariant.xml">QVariant</db:link> and returned. If this <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> is not an atomic value, the return value is a default constructed <db:link xlink:href="qvariant.xml">QVariant</db:link>. You can call <db:link xlink:href="qxmlitem.xml#isAtomicValue">isAtomicValue</db:link>() to test whether the item is an atomic value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlitem.xml#isAtomicValue">isAtomicValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toNodeModelIndex">
<db:title>QXmlNodeModelIndex QXmlItem::toNodeModelIndex() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QXmlNodeModelIndex</db:type>
<db:methodname>toNodeModelIndex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlNodeModelIndex toNodeModelIndex() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If this <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> represents a node, it returns the item as a <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link>. If this <db:link xlink:href="qxmlitem.xml">QXmlItem</db:link> is not a node, the return value is undefined. You can call <db:link xlink:href="qxmlitem.xml#isNode">isNode</db:link>() to test whether the item is a node.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlitem.xml#isNode">isNode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QXmlItem &amp;QXmlItem::operator=(const QXmlItem &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QXmlItem &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QXmlItem &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlItem &amp; operator=(const QXmlItem &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to <db:code>this</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
