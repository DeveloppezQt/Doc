<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Chart Themes Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows the look and feel of the different built-in themes.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;themewidget.h&quot;
#include &quot;ui_themewidget.h&quot;

#include &amp;lt;QtCharts/QChartView&amp;gt;
#include &amp;lt;QtCharts/QPieSeries&amp;gt;
#include &amp;lt;QtCharts/QPieSlice&amp;gt;
#include &amp;lt;QtCharts/QAbstractBarSeries&amp;gt;
#include &amp;lt;QtCharts/QPercentBarSeries&amp;gt;
#include &amp;lt;QtCharts/QStackedBarSeries&amp;gt;
#include &amp;lt;QtCharts/QBarSeries&amp;gt;
#include &amp;lt;QtCharts/QBarSet&amp;gt;
#include &amp;lt;QtCharts/QLineSeries&amp;gt;
#include &amp;lt;QtCharts/QSplineSeries&amp;gt;
#include &amp;lt;QtCharts/QScatterSeries&amp;gt;
#include &amp;lt;QtCharts/QAreaSeries&amp;gt;
#include &amp;lt;QtCharts/QLegend&amp;gt;
#include &amp;lt;QtWidgets/QGridLayout&amp;gt;
#include &amp;lt;QtWidgets/QFormLayout&amp;gt;
#include &amp;lt;QtWidgets/QComboBox&amp;gt;
#include &amp;lt;QtWidgets/QSpinBox&amp;gt;
#include &amp;lt;QtWidgets/QCheckBox&amp;gt;
#include &amp;lt;QtWidgets/QGroupBox&amp;gt;
#include &amp;lt;QtWidgets/QLabel&amp;gt;
#include &amp;lt;QtCore/QRandomGenerator&amp;gt;
#include &amp;lt;QtCharts/QBarCategoryAxis&amp;gt;
#include &amp;lt;QtWidgets/QApplication&amp;gt;
#include &amp;lt;QtCharts/QValueAxis&amp;gt;

ThemeWidget::ThemeWidget(QWidget *parent) :
    QWidget(parent),
    m_listCount(3),
    m_valueMax(10),
    m_valueCount(7),
    m_dataTable(generateRandomData(m_listCount, m_valueMax, m_valueCount)),
    m_ui(new Ui_ThemeWidgetForm)
{
    m_ui-&amp;gt;setupUi(this);
    populateThemeBox();
    populateAnimationBox();
    populateLegendBox();

    //create charts

    QChartView *chartView;

    chartView = new QChartView(createAreaChart());
    m_ui-&amp;gt;gridLayout-&amp;gt;addWidget(chartView, 1, 0);
    m_charts &amp;lt;&amp;lt; chartView;

    chartView = new QChartView(createPieChart());
    // Funny things happen if the pie slice labels do not fit the screen, so we ignore size policy
    chartView-&amp;gt;setSizePolicy(QSizePolicy::Ignored, QSizePolicy::Ignored);
    m_ui-&amp;gt;gridLayout-&amp;gt;addWidget(chartView, 1, 1);
    m_charts &amp;lt;&amp;lt; chartView;

    chartView = new QChartView(createLineChart());
    m_ui-&amp;gt;gridLayout-&amp;gt;addWidget(chartView, 1, 2);
    m_charts &amp;lt;&amp;lt; chartView;

    chartView = new QChartView(createBarChart(m_valueCount));
    m_ui-&amp;gt;gridLayout-&amp;gt;addWidget(chartView, 2, 0);
    m_charts &amp;lt;&amp;lt; chartView;

    chartView = new QChartView(createSplineChart());
    m_ui-&amp;gt;gridLayout-&amp;gt;addWidget(chartView, 2, 1);
    m_charts &amp;lt;&amp;lt; chartView;

    chartView = new QChartView(createScatterChart());
    m_ui-&amp;gt;gridLayout-&amp;gt;addWidget(chartView, 2, 2);
    m_charts &amp;lt;&amp;lt; chartView;

    // Set defaults
    m_ui-&amp;gt;antialiasCheckBox-&amp;gt;setChecked(true);

    // Set the colors from the light theme as default ones
    QPalette pal = qApp-&amp;gt;palette();
    pal.setColor(QPalette::Window, QRgb(0xf0f0f0));
    pal.setColor(QPalette::WindowText, QRgb(0x404044));
    qApp-&amp;gt;setPalette(pal);

    updateUI();
}

ThemeWidget::~ThemeWidget()
{
    delete m_ui;
}

DataTable ThemeWidget::generateRandomData(int listCount, int valueMax, int valueCount) const
{
    DataTable dataTable;

    // generate random data
    for (int i(0); i &amp;lt; listCount; i++) {
        DataList dataList;
        qreal yValue(0);
        for (int j(0); j &amp;lt; valueCount; j++) {
            yValue = yValue + QRandomGenerator::global()-&amp;gt;bounded(valueMax / (qreal) valueCount);
            QPointF value((j + QRandomGenerator::global()-&amp;gt;generateDouble()) * ((qreal) m_valueMax / (qreal) valueCount),
                          yValue);
            QString label = &quot;Slice &quot; + QString::number(i) + &quot;:&quot; + QString::number(j);
            dataList &amp;lt;&amp;lt; Data(value, label);
        }
        dataTable &amp;lt;&amp;lt; dataList;
    }

    return dataTable;
}

void ThemeWidget::populateThemeBox()
{
    // add items to theme combobox
    m_ui-&amp;gt;themeComboBox-&amp;gt;addItem(&quot;Light&quot;, QChart::ChartThemeLight);
    m_ui-&amp;gt;themeComboBox-&amp;gt;addItem(&quot;Blue Cerulean&quot;, QChart::ChartThemeBlueCerulean);
    m_ui-&amp;gt;themeComboBox-&amp;gt;addItem(&quot;Dark&quot;, QChart::ChartThemeDark);
    m_ui-&amp;gt;themeComboBox-&amp;gt;addItem(&quot;Brown Sand&quot;, QChart::ChartThemeBrownSand);
    m_ui-&amp;gt;themeComboBox-&amp;gt;addItem(&quot;Blue NCS&quot;, QChart::ChartThemeBlueNcs);
    m_ui-&amp;gt;themeComboBox-&amp;gt;addItem(&quot;High Contrast&quot;, QChart::ChartThemeHighContrast);
    m_ui-&amp;gt;themeComboBox-&amp;gt;addItem(&quot;Blue Icy&quot;, QChart::ChartThemeBlueIcy);
    m_ui-&amp;gt;themeComboBox-&amp;gt;addItem(&quot;Qt&quot;, QChart::ChartThemeQt);
}

void ThemeWidget::populateAnimationBox()
{
    // add items to animation combobox
    m_ui-&amp;gt;animatedComboBox-&amp;gt;addItem(&quot;No Animations&quot;, QChart::NoAnimation);
    m_ui-&amp;gt;animatedComboBox-&amp;gt;addItem(&quot;GridAxis Animations&quot;, QChart::GridAxisAnimations);
    m_ui-&amp;gt;animatedComboBox-&amp;gt;addItem(&quot;Series Animations&quot;, QChart::SeriesAnimations);
    m_ui-&amp;gt;animatedComboBox-&amp;gt;addItem(&quot;All Animations&quot;, QChart::AllAnimations);
}

void ThemeWidget::populateLegendBox()
{
    // add items to legend combobox
    m_ui-&amp;gt;legendComboBox-&amp;gt;addItem(&quot;No Legend &quot;, 0);
    m_ui-&amp;gt;legendComboBox-&amp;gt;addItem(&quot;Legend Top&quot;, Qt::AlignTop);
    m_ui-&amp;gt;legendComboBox-&amp;gt;addItem(&quot;Legend Bottom&quot;, Qt::AlignBottom);
    m_ui-&amp;gt;legendComboBox-&amp;gt;addItem(&quot;Legend Left&quot;, Qt::AlignLeft);
    m_ui-&amp;gt;legendComboBox-&amp;gt;addItem(&quot;Legend Right&quot;, Qt::AlignRight);
}

QChart *ThemeWidget::createAreaChart() const
{
    QChart *chart = new QChart();
    chart-&amp;gt;setTitle(&quot;Area chart&quot;);

    // The lower series initialized to zero values
    QLineSeries *lowerSeries = 0;
    QString name(&quot;Series &quot;);
    int nameIndex = 0;
    for (int i(0); i &amp;lt; m_dataTable.count(); i++) {
        QLineSeries *upperSeries = new QLineSeries(chart);
        for (int j(0); j &amp;lt; m_dataTable[i].count(); j++) {
            Data data = m_dataTable[i].at(j);
            if (lowerSeries) {
                const QVector&amp;lt;QPointF&amp;gt;&amp;amp; points = lowerSeries-&amp;gt;pointsVector();
                upperSeries-&amp;gt;append(QPointF(j, points[i].y() + data.first.y()));
            } else {
                upperSeries-&amp;gt;append(QPointF(j, data.first.y()));
            }
        }
        QAreaSeries *area = new QAreaSeries(upperSeries, lowerSeries);
        area-&amp;gt;setName(name + QString::number(nameIndex));
        nameIndex++;
        chart-&amp;gt;addSeries(area);
        lowerSeries = upperSeries;
    }

    chart-&amp;gt;createDefaultAxes();
    chart-&amp;gt;axes(Qt::Horizontal).first()-&amp;gt;setRange(0, m_valueCount - 1);
    chart-&amp;gt;axes(Qt::Vertical).first()-&amp;gt;setRange(0, m_valueMax);
    // Add space to label to add space between labels and axis
    QValueAxis *axisY = qobject_cast&amp;lt;QValueAxis*&amp;gt;(chart-&amp;gt;axes(Qt::Vertical).first());
    Q_ASSERT(axisY);
    axisY-&amp;gt;setLabelFormat(&quot;%.1f  &quot;);

    return chart;
}

QChart *ThemeWidget::createBarChart(int valueCount) const
{
    Q_UNUSED(valueCount);
    QChart *chart = new QChart();
    chart-&amp;gt;setTitle(&quot;Bar chart&quot;);

    QStackedBarSeries *series = new QStackedBarSeries(chart);
    for (int i(0); i &amp;lt; m_dataTable.count(); i++) {
        QBarSet *set = new QBarSet(&quot;Bar set &quot; + QString::number(i));
        for (const Data &amp;amp;data : m_dataTable[i])
            *set &amp;lt;&amp;lt; data.first.y();
        series-&amp;gt;append(set);
    }
    chart-&amp;gt;addSeries(series);

    chart-&amp;gt;createDefaultAxes();
    chart-&amp;gt;axes(Qt::Vertical).first()-&amp;gt;setRange(0, m_valueMax * 2);
    // Add space to label to add space between labels and axis
    QValueAxis *axisY = qobject_cast&amp;lt;QValueAxis*&amp;gt;(chart-&amp;gt;axes(Qt::Vertical).first());
    Q_ASSERT(axisY);
    axisY-&amp;gt;setLabelFormat(&quot;%.1f  &quot;);

    return chart;
}

QChart *ThemeWidget::createLineChart() const
{
    QChart *chart = new QChart();
    chart-&amp;gt;setTitle(&quot;Line chart&quot;);

    QString name(&quot;Series &quot;);
    int nameIndex = 0;
    for (const DataList &amp;amp;list : m_dataTable) {
        QLineSeries *series = new QLineSeries(chart);
        for (const Data &amp;amp;data : list)
            series-&amp;gt;append(data.first);
        series-&amp;gt;setName(name + QString::number(nameIndex));
        nameIndex++;
        chart-&amp;gt;addSeries(series);
    }

    chart-&amp;gt;createDefaultAxes();
    chart-&amp;gt;axes(Qt::Horizontal).first()-&amp;gt;setRange(0, m_valueMax);
    chart-&amp;gt;axes(Qt::Vertical).first()-&amp;gt;setRange(0, m_valueCount);
    // Add space to label to add space between labels and axis
    QValueAxis *axisY = qobject_cast&amp;lt;QValueAxis*&amp;gt;(chart-&amp;gt;axes(Qt::Vertical).first());
    Q_ASSERT(axisY);
    axisY-&amp;gt;setLabelFormat(&quot;%.1f  &quot;);

    return chart;
}

QChart *ThemeWidget::createPieChart() const
{
    QChart *chart = new QChart();
    chart-&amp;gt;setTitle(&quot;Pie chart&quot;);

    QPieSeries *series = new QPieSeries(chart);
    for (const Data &amp;amp;data : m_dataTable[0]) {
        QPieSlice *slice = series-&amp;gt;append(data.second, data.first.y());
        if (data == m_dataTable[0].first()) {
            // Show the first slice exploded with label
            slice-&amp;gt;setLabelVisible();
            slice-&amp;gt;setExploded();
            slice-&amp;gt;setExplodeDistanceFactor(0.5);
        }
    }
    series-&amp;gt;setPieSize(0.4);
    chart-&amp;gt;addSeries(series);

    return chart;
}

QChart *ThemeWidget::createSplineChart() const
{
    QChart *chart = new QChart();
    chart-&amp;gt;setTitle(&quot;Spline chart&quot;);
    QString name(&quot;Series &quot;);
    int nameIndex = 0;
    for (const DataList &amp;amp;list : m_dataTable) {
        QSplineSeries *series = new QSplineSeries(chart);
        for (const Data &amp;amp;data : list)
            series-&amp;gt;append(data.first);
        series-&amp;gt;setName(name + QString::number(nameIndex));
        nameIndex++;
        chart-&amp;gt;addSeries(series);
    }

    chart-&amp;gt;createDefaultAxes();
    chart-&amp;gt;axes(Qt::Horizontal).first()-&amp;gt;setRange(0, m_valueMax);
    chart-&amp;gt;axes(Qt::Vertical).first()-&amp;gt;setRange(0, m_valueCount);

    // Add space to label to add space between labels and axis
    QValueAxis *axisY = qobject_cast&amp;lt;QValueAxis*&amp;gt;(chart-&amp;gt;axes(Qt::Vertical).first());
    Q_ASSERT(axisY);
    axisY-&amp;gt;setLabelFormat(&quot;%.1f  &quot;);
    return chart;
}

QChart *ThemeWidget::createScatterChart() const
{
    // scatter chart
    QChart *chart = new QChart();
    chart-&amp;gt;setTitle(&quot;Scatter chart&quot;);
    QString name(&quot;Series &quot;);
    int nameIndex = 0;
    for (const DataList &amp;amp;list : m_dataTable) {
        QScatterSeries *series = new QScatterSeries(chart);
        for (const Data &amp;amp;data : list)
            series-&amp;gt;append(data.first);
        series-&amp;gt;setName(name + QString::number(nameIndex));
        nameIndex++;
        chart-&amp;gt;addSeries(series);
    }

    chart-&amp;gt;createDefaultAxes();
    chart-&amp;gt;axes(Qt::Horizontal).first()-&amp;gt;setRange(0, m_valueMax);
    chart-&amp;gt;axes(Qt::Vertical).first()-&amp;gt;setRange(0, m_valueCount);
    // Add space to label to add space between labels and axis
    QValueAxis *axisY = qobject_cast&amp;lt;QValueAxis*&amp;gt;(chart-&amp;gt;axes(Qt::Vertical).first());
    Q_ASSERT(axisY);
    axisY-&amp;gt;setLabelFormat(&quot;%.1f  &quot;);
    return chart;
}

void ThemeWidget::updateUI()
{
    QChart::ChartTheme theme = static_cast&amp;lt;QChart::ChartTheme&amp;gt;(
                m_ui-&amp;gt;themeComboBox-&amp;gt;itemData(m_ui-&amp;gt;themeComboBox-&amp;gt;currentIndex()).toInt());
    const auto charts = m_charts;
    if (!m_charts.isEmpty() &amp;amp;&amp;amp; m_charts.at(0)-&amp;gt;chart()-&amp;gt;theme() != theme) {
        for (QChartView *chartView : charts) {
            chartView-&amp;gt;chart()-&amp;gt;setTheme(theme);
        }

        // Set palette colors based on selected theme
        QPalette pal = window()-&amp;gt;palette();
        if (theme == QChart::ChartThemeLight) {
            pal.setColor(QPalette::Window, QRgb(0xf0f0f0));
            pal.setColor(QPalette::WindowText, QRgb(0x404044));
        } else if (theme == QChart::ChartThemeDark) {
            pal.setColor(QPalette::Window, QRgb(0x121218));
            pal.setColor(QPalette::WindowText, QRgb(0xd6d6d6));
        } else if (theme == QChart::ChartThemeBlueCerulean) {
            pal.setColor(QPalette::Window, QRgb(0x40434a));
            pal.setColor(QPalette::WindowText, QRgb(0xd6d6d6));
        } else if (theme == QChart::ChartThemeBrownSand) {
            pal.setColor(QPalette::Window, QRgb(0x9e8965));
            pal.setColor(QPalette::WindowText, QRgb(0x404044));
        } else if (theme == QChart::ChartThemeBlueNcs) {
            pal.setColor(QPalette::Window, QRgb(0x018bba));
            pal.setColor(QPalette::WindowText, QRgb(0x404044));
        } else if (theme == QChart::ChartThemeHighContrast) {
            pal.setColor(QPalette::Window, QRgb(0xffab03));
            pal.setColor(QPalette::WindowText, QRgb(0x181818));
        } else if (theme == QChart::ChartThemeBlueIcy) {
            pal.setColor(QPalette::Window, QRgb(0xcee7f0));
            pal.setColor(QPalette::WindowText, QRgb(0x404044));
        } else {
            pal.setColor(QPalette::Window, QRgb(0xf0f0f0));
            pal.setColor(QPalette::WindowText, QRgb(0x404044));
        }
        window()-&amp;gt;setPalette(pal);
    }

    // Update antialiasing
    bool checked = m_ui-&amp;gt;antialiasCheckBox-&amp;gt;isChecked();
    for (QChartView *chart : charts)
        chart-&amp;gt;setRenderHint(QPainter::Antialiasing, checked);

    // Update animation options
    QChart::AnimationOptions options(
                m_ui-&amp;gt;animatedComboBox-&amp;gt;itemData(m_ui-&amp;gt;animatedComboBox-&amp;gt;currentIndex()).toInt());
    if (!m_charts.isEmpty() &amp;amp;&amp;amp; m_charts.at(0)-&amp;gt;chart()-&amp;gt;animationOptions() != options) {
        for (QChartView *chartView : charts)
            chartView-&amp;gt;chart()-&amp;gt;setAnimationOptions(options);
    }

    // Update legend alignment
    Qt::Alignment alignment(
                m_ui-&amp;gt;legendComboBox-&amp;gt;itemData(m_ui-&amp;gt;legendComboBox-&amp;gt;currentIndex()).toInt());

    if (!alignment) {
        for (QChartView *chartView : charts)
            chartView-&amp;gt;chart()-&amp;gt;legend()-&amp;gt;hide();
    } else {
        for (QChartView *chartView : charts) {
            chartView-&amp;gt;chart()-&amp;gt;legend()-&amp;gt;setAlignment(alignment);
            chartView-&amp;gt;chart()-&amp;gt;legend()-&amp;gt;show();
        }
    }
}

</db:programlisting>
</db:article>
