<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Morphing Animation</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick 3D Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>Morphing animation (also known as <db:emphasis>vertex animation</db:emphasis>) is a way to simulate deformations of soft materials. It transforms one shape smoothly into another. This is done by creating a mesh that contains multiple positions for each vertex. Each additional set of positions defines a shape, called a <db:link xlink:href="qml-qtquick3d-morphtarget.xml">morph target</db:link>. When animating, a <db:link xlink:href="qml-qtquick3d-morphtarget.xml#weight-prop">weight</db:link> is assigned to each target. The effective position of each vertex is calculated by linear interpolation between the positions for that target, according to the weights.</db:para>
<db:para>Morphing differs from <db:link xlink:href="quick3d-vertex-skinning.xml">skeletal animation</db:link> where we create an imagined skeleton, and rig the model by defining the relationship between each vertex of the model and the nodes of that skeleton.</db:para>
<db:para>Note that the fundamental structure of each morph target must be the same: If three vertices form a triangle in the base model, they will form a triangle in all the morph targets. The triangle can have a completely different position, orientation, and size; or it can even be effectively removed by making it a degenerate triangle with size zero.</db:para>
<db:para>In most cases, the mesh will be created by an external tool, and imported using the <db:link xlink:href="qtquick3d-tool-balsam.xml">Balsam</db:link> asset import tool. For example, in the Blender 3D editor, morph targets are called &quot;shape keys&quot;, and in Autodesk Maya they are called &quot;blend shapes&quot;.</db:para>
<db:para>The <db:link xlink:href="qtquick3d-morphing-example.xml">morphing example</db:link> shows how to control the weights of a model imported from Blender.</db:para>
<db:para>The <db:link xlink:href="qtquick3d-custommorphing-example.xml">custom morphing animation example</db:link> shows how to create a morph target in C++ by subclassing <db:link xlink:href="qquick3dgeometry.xml">QQuick3DGeometry</db:link>.</db:para>
</db:section>
</db:article>
