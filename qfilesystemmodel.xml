<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFileSystemModel Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link> class provides a data model for the local filesystem.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFileSystemModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemmodel.xml" xlink:role="class">QAbstractItemModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFileSystemModel is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class provides access to the local filesystem, providing functions for renaming and removing files and directories, and for creating new directories. In the simplest case, it can be used with a suitable display widget as part of a browser or filter.</db:para>
<db:para><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link> can be accessed using the standard interface provided by <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>, but it also provides some convenience functions that are specific to a directory model. The <db:link xlink:href="qfilesystemmodel.xml#fileInfo">fileInfo</db:link>(), <db:link xlink:href="qfilesystemmodel.xml#isDir">isDir</db:link>(), <db:link xlink:href="qfilesystemmodel.xml#fileName">fileName</db:link>() and <db:link xlink:href="qfilesystemmodel.xml#filePath">filePath</db:link>() functions provide information about the underlying files and directories related to items in the model. Directories can be created and removed using <db:link xlink:href="qfilesystemmodel.xml#mkdir">mkdir</db:link>(), <db:link xlink:href="qfilesystemmodel.xml#rmdir">rmdir</db:link>().</db:para>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:para>A directory model that displays the contents of a default directory is usually constructed with a parent object:</db:para>
<db:programlisting language="cpp">    QFileSystemModel *model = new QFileSystemModel;
    model-&gt;setRootPath(QDir::currentPath());
</db:programlisting>
<db:para>A tree view can be used to display the contents of the model</db:para>
<db:programlisting language="cpp">    QTreeView *tree = new QTreeView(splitter);
    tree-&gt;setModel(model);
</db:programlisting>
<db:para>and the contents of a particular directory can be displayed by setting the tree view's root index:</db:para>
<db:programlisting language="cpp">    tree-&gt;setRootIndex(model-&gt;index(QDir::currentPath()));
</db:programlisting>
<db:para>The view's root index can be used to control how much of a hierarchical model is displayed. <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link> provides a convenience function that returns a suitable model index for a path to a directory within the model.</db:para>
</db:section>
<db:section xml:id="caching-and-performance">
<db:title>Caching and Performance</db:title>
<db:para><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link> uses a separate thread to populate itself, so it will not cause the main thread to hang as the file system is being queried. Calls to <db:link xlink:href="qfilesystemmodel.xml#rowCount">rowCount</db:link>() will return <db:code>0</db:code> until the model populates a directory. The thread in which the <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link> lives needs to run an event loop to process the incoming data.</db:para>
<db:para><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link> will not start populating itself until <db:link xlink:href="qfilesystemmodel.xml#setRootPath">setRootPath</db:link>() is called. This prevents any unnecessary querying of the system's root file system, such as enumerating the drives on Windows, until that point.</db:para>
<db:para><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link> keeps a cache with file information. The cache is automatically kept up to date using the <db:link xlink:href="qfilesystemwatcher.xml">QFileSystemWatcher</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Model Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Option-enum">
<db:title>enum QFileSystemModel::Option</db:title>
<db:bridgehead renderas="sect2">flags QFileSystemModel::Options</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link></db:emphasis>::DontWatchForChanges</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Do not add file watchers to the paths. This reduces overhead when using the model for simple tasks like line edit completion.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link></db:emphasis>::DontResolveSymlinks</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Don't resolve symlinks in the file system model. By default, symlinks are resolved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link></db:emphasis>::DontUseCustomDirectoryIcons</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>Always use the default directory icon. Some platforms allow the user to set a different icon. Custom icon lookup causes a big performance impact over network or removable drives. This sets the QFileIconProvider::DontUseCustomDirectoryIcons option in the icon provider accordingly.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Options</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Option&gt;. </db:code>It stores an OR combination of <db:code>Option</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#resolveSymlinks-prop">resolveSymlinks</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Roles-enum">
<db:title>enum QFileSystemModel::Roles</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link></db:emphasis>::FileIconRole</db:code></db:para>
</db:td>
<db:td><db:code>Qt::DecorationRole</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link></db:emphasis>::FilePathRole</db:code></db:para>
</db:td>
<db:td><db:code>Qt::UserRole + 1</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link></db:emphasis>::FileNameRole</db:code></db:para>
</db:td>
<db:td><db:code>Qt::UserRole + 2</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link></db:emphasis>::FilePermissions</db:code></db:para>
</db:td>
<db:td><db:code>Qt::UserRole + 3</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link></db:emphasis>::FileInfoRole</db:code></db:para>
</db:td>
<db:td><db:code>Qt::UserRole - 4</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object for the index</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="nameFilterDisables-prop">
<db:title>nameFilterDisables : bool</db:title>
<db:para>This property holds whether files that don't pass the name filter are hidden or disabled</db:para>
<db:para>This property is <db:code>true</db:code> by default</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">nameFilterDisables</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setNameFilterDisables</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="options-prop">
<db:title>options : Options</db:title>
<db:para>This property holds the various options that affect the model</db:para>
<db:para>By default, all options are disabled.</db:para>
<db:para>Options should be set before changing properties.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfilesystemmodel.xml#Option-enum">QFileSystemModel::Options</db:link></db:type> <db:emphasis role="bold">options</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOptions</db:emphasis>(<db:type><db:link xlink:href="qfilesystemmodel.xml#Option-enum">QFileSystemModel::Options</db:link></db:type> <db:emphasis>options</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#setOption">setOption</db:link>()</db:member>
<db:member><db:link xlink:href="qfilesystemmodel.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readOnly-prop">
<db:title>readOnly : bool</db:title>
<db:para>This property holds whether the directory model allows writing to the file system</db:para>
<db:para>If this property is set to false, the directory model will allow renaming, copying and deleting of files and directories.</db:para>
<db:para>This property is <db:code>true</db:code> by default</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isReadOnly</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setReadOnly</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="resolveSymlinks-prop">
<db:title>resolveSymlinks : bool</db:title>
<db:para>This property holds whether the directory model should resolve symbolic links</db:para>
<db:para>This is only relevant on Windows.</db:para>
<db:para>By default, this property is <db:code>true</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">resolveSymlinks</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setResolveSymlinks</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#Option-enum">QFileSystemModel::Options</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFileSystemModel">
<db:title>[explicit] QFileSystemModel::QFileSystemModel(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a file system model with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QFileSystemModel">
<db:title>[virtual noexcept] QFileSystemModel::~QFileSystemModel()</db:title>
<db:para>Destroys this file system model.</db:para>
</db:section>
<db:section xml:id="canFetchMore">
<db:title>[override virtual] bool QFileSystemModel::canFetchMore(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#canFetchMore" role="function">QAbstractItemModel::canFetchMore(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="columnCount">
<db:title>[override virtual] int QFileSystemModel::columnCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#columnCount" role="function">QAbstractItemModel::columnCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[override virtual] QVariant QFileSystemModel::data(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#data" role="function">QAbstractItemModel::data(const QModelIndex &amp;index, int role) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="directoryLoaded">
<db:title>void QFileSystemModel::directoryLoaded(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>This signal is emitted when the gatherer thread has finished to load the <db:code role="parameter">path</db:code>.</db:para>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[override virtual] bool QFileSystemModel::dropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#dropMimeData" role="function">QAbstractItemModel::dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</db:link>.</db:para>
<db:para>Handles the <db:code role="parameter">data</db:code> supplied by a drag and drop operation that ended with the given <db:code role="parameter">action</db:code> over the row in the model specified by the <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> and by the <db:code role="parameter">parent</db:code> index. Returns true if the operation was successful.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#supportedDropActions">supportedDropActions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QFileSystemModel::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="fetchMore">
<db:title>[override virtual] void QFileSystemModel::fetchMore(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#fetchMore" role="function">QAbstractItemModel::fetchMore(const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="fileIcon">
<db:title>QIcon QFileSystemModel::fileIcon(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the icon for the item stored in the model under the given <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="fileInfo">
<db:title>QFileInfo QFileSystemModel::fileInfo(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> for the item stored in the model under the given <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QFileSystemModel::fileName(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the file name for the item stored in the model under the given <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="filePath">
<db:title>QString QFileSystemModel::filePath(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the path of the item stored in the model under the <db:code role="parameter">index</db:code> given.</db:para>
</db:section>
<db:section xml:id="fileRenamed">
<db:title>void QFileSystemModel::fileRenamed(const QString &amp;<db:emphasis>path</db:emphasis>, const QString &amp;<db:emphasis>oldName</db:emphasis>, const QString &amp;<db:emphasis>newName</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a file with the <db:code role="parameter">oldName</db:code> is successfully renamed to <db:code role="parameter">newName</db:code>. The file is located in the directory <db:code role="parameter">path</db:code>.</db:para>
</db:section>
<db:section xml:id="filter">
<db:title>QDir::Filters QFileSystemModel::filter() const</db:title>
<db:para>Returns the filter specified for the directory model.</db:para>
<db:para>If a filter has not been set, the default filter is <db:link xlink:href="qdir.xml#Filter-enum">QDir::AllEntries</db:link> | <db:link xlink:href="qdir.xml#Filter-enum">QDir::NoDotAndDotDot</db:link> | <db:link xlink:href="qdir.xml#Filter-enum">QDir::AllDirs</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#setFilter">setFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#Filter-enum">QDir::Filters</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags">
<db:title>[override virtual] Qt::ItemFlags QFileSystemModel::flags(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#flags" role="function">QAbstractItemModel::flags(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="hasChildren">
<db:title>[override virtual] bool QFileSystemModel::hasChildren(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#hasChildren" role="function">QAbstractItemModel::hasChildren(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="headerData">
<db:title>[override virtual] QVariant QFileSystemModel::headerData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#headerData" role="function">QAbstractItemModel::headerData(int section, Qt::Orientation orientation, int role) const</db:link>.</db:para>
</db:section>
<db:section xml:id="iconProvider">
<db:title>QAbstractFileIconProvider *QFileSystemModel::iconProvider() const</db:title>
<db:para>Returns the file icon provider for this directory model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#setIconProvider">setIconProvider</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="index">
<db:title>[override virtual] QModelIndex QFileSystemModel::index(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#index" role="function">QAbstractItemModel::index(int row, int column, const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="index-1">
<db:title>QModelIndex QFileSystemModel::index(const QString &amp;<db:emphasis>path</db:emphasis>, int <db:emphasis>column</db:emphasis> = 0) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the model item index for the given <db:code role="parameter">path</db:code> and <db:code role="parameter">column</db:code>.</db:para>
</db:section>
<db:section xml:id="isDir">
<db:title>bool QFileSystemModel::isDir(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the model item <db:code role="parameter">index</db:code> represents a directory; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="lastModified">
<db:title>QDateTime QFileSystemModel::lastModified(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the date and time (in local time) when <db:code role="parameter">index</db:code> was last modified.</db:para>
<db:para>This is an overloaded function, equivalent to calling:</db:para>
<db:programlisting language="cpp">lastModified(index, QTimeZone::LocalTime);
</db:programlisting>
<db:para>If <db:code role="parameter">index</db:code> is invalid, a default constructed <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is returned.</db:para>
</db:section>
<db:section xml:id="lastModified-1">
<db:title>[since 6.6] QDateTime QFileSystemModel::lastModified(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, const QTimeZone &amp;<db:emphasis>tz</db:emphasis>) const</db:title>
<db:para>Returns the date and time, in the time zone <db:code role="parameter">tz</db:code>, when <db:code role="parameter">index</db:code> was last modified.</db:para>
<db:para>Typical arguments for <db:code role="parameter">tz</db:code> are <db:code>QTimeZone::UTC</db:code> or <db:code>QTimeZone::LocalTime</db:code>. UTC does not require any conversion from the time returned by the native file system API, therefore getting the time in UTC is potentially faster. LocalTime is typically chosen if the time is shown to the user.</db:para>
<db:para>If <db:code role="parameter">index</db:code> is invalid, a default constructed <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is returned.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="mimeData">
<db:title>[override virtual] QMimeData *QFileSystemModel::mimeData(const QModelIndexList &amp;<db:emphasis>indexes</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#mimeData" role="function">QAbstractItemModel::mimeData(const QModelIndexList &amp;indexes) const</db:link>.</db:para>
<db:para>Returns an object that contains a serialized description of the specified <db:code role="parameter">indexes</db:code>. The format used to describe the items corresponding to the indexes is obtained from the <db:link xlink:href="qfilesystemmodel.xml#mimeTypes">mimeTypes</db:link>() function.</db:para>
<db:para>If the list of indexes is empty, <db:code>nullptr</db:code> is returned rather than a serialized empty list.</db:para>
</db:section>
<db:section xml:id="mimeTypes">
<db:title>[override virtual] QStringList QFileSystemModel::mimeTypes() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#mimeTypes" role="function">QAbstractItemModel::mimeTypes() const</db:link>.</db:para>
<db:para>Returns a list of MIME types that can be used to describe a list of items in the model.</db:para>
</db:section>
<db:section xml:id="mkdir">
<db:title>QModelIndex QFileSystemModel::mkdir(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Create a directory with the <db:code role="parameter">name</db:code> in the <db:code role="parameter">parent</db:code> model index.</db:para>
</db:section>
<db:section xml:id="myComputer">
<db:title>QVariant QFileSystemModel::myComputer(int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Returns the data stored under the given <db:code role="parameter">role</db:code> for the item &quot;My Computer&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nameFilters">
<db:title>QStringList QFileSystemModel::nameFilters() const</db:title>
<db:para>Returns a list of filters applied to the names in the model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#setNameFilters">setNameFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parent">
<db:title>[override virtual] QModelIndex QFileSystemModel::parent(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#parent" role="function">QAbstractItemModel::parent(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="permissions">
<db:title>QFileDevice::Permissions QFileSystemModel::permissions(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the complete OR-ed together combination of QFile::Permission for the <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>bool QFileSystemModel::remove(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes the model item <db:code role="parameter">index</db:code> from the file system model and <db:emphasis role="bold">deletes the corresponding file from the file system</db:emphasis>, returning true if successful. If the item cannot be removed, false is returned.</db:para>
<db:warning>
<db:para>This function deletes files from the file system; it does <db:emphasis role="bold">not</db:emphasis> move them to a location where they can be recovered.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#rmdir">rmdir</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rmdir">
<db:title>bool QFileSystemModel::rmdir(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes the directory corresponding to the model item <db:code role="parameter">index</db:code> in the file system model and <db:emphasis role="bold">deletes the corresponding directory from the file system</db:emphasis>, returning true if successful. If the directory cannot be removed, false is returned.</db:para>
<db:warning>
<db:para>This function deletes directories from the file system; it does <db:emphasis role="bold">not</db:emphasis> move them to a location where they can be recovered.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="roleNames">
<db:title>[override virtual] QHash&lt;int, QByteArray&gt; QFileSystemModel::roleNames() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#roleNames" role="function">QAbstractItemModel::roleNames() const</db:link>.</db:para>
</db:section>
<db:section xml:id="rootDirectory">
<db:title>QDir QFileSystemModel::rootDirectory() const</db:title>
<db:para>The currently set directory</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#rootPath">rootPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rootPath">
<db:title>QString QFileSystemModel::rootPath() const</db:title>
<db:para>The currently set root path</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#setRootPath">setRootPath</db:link>()</db:member>
<db:member><db:link xlink:href="qfilesystemmodel.xml#rootDirectory">rootDirectory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rootPathChanged">
<db:title>void QFileSystemModel::rootPathChanged(const QString &amp;<db:emphasis>newPath</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the root path has been changed to a <db:code role="parameter">newPath</db:code>.</db:para>
</db:section>
<db:section xml:id="rowCount">
<db:title>[override virtual] int QFileSystemModel::rowCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#rowCount" role="function">QAbstractItemModel::rowCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="setData">
<db:title>[override virtual] bool QFileSystemModel::setData(const QModelIndex &amp;<db:emphasis>idx</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#setData" role="function">QAbstractItemModel::setData(const QModelIndex &amp;index, const QVariant &amp;value, int role)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilter">
<db:title>void QFileSystemModel::setFilter(QDir::Filters <db:emphasis>filters</db:emphasis>)</db:title>
<db:para>Sets the directory model's filter to that specified by <db:code role="parameter">filters</db:code>.</db:para>
<db:para>Note that the filter you set should always include the <db:link xlink:href="qdir.xml#Filter-enum">QDir::AllDirs</db:link> enum value, otherwise <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link> won't be able to read the directory structure.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#filter">filter</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#Filter-enum">QDir::Filters</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIconProvider">
<db:title>void QFileSystemModel::setIconProvider(QAbstractFileIconProvider *<db:emphasis>provider</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">provider</db:code> of file icons for the directory model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#iconProvider">iconProvider</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNameFilters">
<db:title>void QFileSystemModel::setNameFilters(const QStringList &amp;<db:emphasis>filters</db:emphasis>)</db:title>
<db:para>Sets the name <db:code role="parameter">filters</db:code> to apply against the existing files.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#nameFilters">nameFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOption">
<db:title>void QFileSystemModel::setOption(QFileSystemModel::Option <db:emphasis>option</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:para>Sets the given <db:code role="parameter">option</db:code> to be enabled if <db:code role="parameter">on</db:code> is true; otherwise, clears the given <db:code role="parameter">option</db:code>.</db:para>
<db:para>Options should be set before changing properties.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#options-prop">options</db:link></db:member>
<db:member><db:link xlink:href="qfilesystemmodel.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRootPath">
<db:title>QModelIndex QFileSystemModel::setRootPath(const QString &amp;<db:emphasis>newPath</db:emphasis>)</db:title>
<db:para>Sets the directory that is being watched by the model to <db:code role="parameter">newPath</db:code> by installing a <db:link xlink:href="qfilesystemwatcher.xml">file system watcher</db:link> on it. Any changes to files and directories within this directory will be reflected in the model.</db:para>
<db:para>If the path is changed, the <db:link xlink:href="qfilesystemmodel.xml#rootPathChanged">rootPathChanged</db:link>() signal will be emitted.</db:para>
<db:note>
<db:para>This function does not change the structure of the model or modify the data available to views. In other words, the &quot;root&quot; of the model is <db:emphasis>not</db:emphasis> changed to include only files and directories within the directory specified by <db:code role="parameter">newPath</db:code> in the file system.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#rootPath">rootPath</db:link>()</db:member>
<db:member><db:link xlink:href="">QTreeView::setRootIndex()</db:link></db:member>
<db:member><db:link xlink:href="">TreeView::rootIndex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sibling">
<db:title>[override virtual] QModelIndex QFileSystemModel::sibling(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>idx</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#sibling" role="function">QAbstractItemModel::sibling(int row, int column, const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="size">
<db:title>qint64 QFileSystemModel::size(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the size in bytes of <db:code role="parameter">index</db:code>. If the file does not exist, 0 is returned.</db:para>
</db:section>
<db:section xml:id="sort">
<db:title>[override virtual] void QFileSystemModel::sort(int <db:emphasis>column</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::AscendingOrder)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#sort" role="function">QAbstractItemModel::sort(int column, Qt::SortOrder order)</db:link>.</db:para>
</db:section>
<db:section xml:id="supportedDropActions">
<db:title>[override virtual] Qt::DropActions QFileSystemModel::supportedDropActions() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#supportedDropActions" role="function">QAbstractItemModel::supportedDropActions() const</db:link>.</db:para>
</db:section>
<db:section xml:id="testOption">
<db:title>bool QFileSystemModel::testOption(QFileSystemModel::Option <db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the given <db:code role="parameter">option</db:code> is enabled; otherwise, returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemmodel.xml#options-prop">options</db:link></db:member>
<db:member><db:link xlink:href="qfilesystemmodel.xml#setOption">setOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QFileSystemModel::timerEvent(QTimerEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>QString QFileSystemModel::type(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the type of file <db:code role="parameter">index</db:code> such as &quot;Directory&quot; or &quot;JPEG file&quot;.</db:para>
</db:section>
</db:section>
</db:article>
