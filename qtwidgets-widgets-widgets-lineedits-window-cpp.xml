<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Line Edits Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Line Edits example demonstrates the many ways that <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> can be used, and shows the effects of various properties and validators on the input and output supplied by the user.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;window.h&quot;

Window::Window()
{
    QGroupBox *echoGroup = new QGroupBox(tr(&quot;Echo&quot;));

    QLabel *echoLabel = new QLabel(tr(&quot;Mode:&quot;));
    QComboBox *echoComboBox = new QComboBox;
    echoComboBox-&amp;gt;addItem(tr(&quot;Normal&quot;));
    echoComboBox-&amp;gt;addItem(tr(&quot;Password&quot;));
    echoComboBox-&amp;gt;addItem(tr(&quot;PasswordEchoOnEdit&quot;));
    echoComboBox-&amp;gt;addItem(tr(&quot;No Echo&quot;));

    echoLineEdit = new QLineEdit;
    echoLineEdit-&amp;gt;setPlaceholderText(&quot;Placeholder Text&quot;);
    echoLineEdit-&amp;gt;setFocus();

    QGroupBox *validatorGroup = new QGroupBox(tr(&quot;Validator&quot;));

    QLabel *validatorLabel = new QLabel(tr(&quot;Type:&quot;));
    QComboBox *validatorComboBox = new QComboBox;
    validatorComboBox-&amp;gt;addItem(tr(&quot;No validator&quot;));
    validatorComboBox-&amp;gt;addItem(tr(&quot;Integer validator&quot;));
    validatorComboBox-&amp;gt;addItem(tr(&quot;Double validator&quot;));

    validatorLineEdit = new QLineEdit;
    validatorLineEdit-&amp;gt;setPlaceholderText(&quot;Placeholder Text&quot;);

    QGroupBox *alignmentGroup = new QGroupBox(tr(&quot;Alignment&quot;));

    QLabel *alignmentLabel = new QLabel(tr(&quot;Type:&quot;));
    QComboBox *alignmentComboBox = new QComboBox;
    alignmentComboBox-&amp;gt;addItem(tr(&quot;Left&quot;));
    alignmentComboBox-&amp;gt;addItem(tr(&quot;Centered&quot;));
    alignmentComboBox-&amp;gt;addItem(tr(&quot;Right&quot;));

    alignmentLineEdit = new QLineEdit;
    alignmentLineEdit-&amp;gt;setPlaceholderText(&quot;Placeholder Text&quot;);

    QGroupBox *inputMaskGroup = new QGroupBox(tr(&quot;Input mask&quot;));

    QLabel *inputMaskLabel = new QLabel(tr(&quot;Type:&quot;));
    QComboBox *inputMaskComboBox = new QComboBox;
    inputMaskComboBox-&amp;gt;addItem(tr(&quot;No mask&quot;));
    inputMaskComboBox-&amp;gt;addItem(tr(&quot;Phone number&quot;));
    inputMaskComboBox-&amp;gt;addItem(tr(&quot;ISO date&quot;));
    inputMaskComboBox-&amp;gt;addItem(tr(&quot;License key&quot;));

    inputMaskLineEdit = new QLineEdit;
    inputMaskLineEdit-&amp;gt;setPlaceholderText(&quot;Placeholder Text&quot;);

    QGroupBox *accessGroup = new QGroupBox(tr(&quot;Access&quot;));

    QLabel *accessLabel = new QLabel(tr(&quot;Read-only:&quot;));
    QComboBox *accessComboBox = new QComboBox;
    accessComboBox-&amp;gt;addItem(tr(&quot;False&quot;));
    accessComboBox-&amp;gt;addItem(tr(&quot;True&quot;));

    accessLineEdit = new QLineEdit;
    accessLineEdit-&amp;gt;setPlaceholderText(&quot;Placeholder Text&quot;);

    connect(echoComboBox, SIGNAL(activated(int)),
            this, SLOT(echoChanged(int)));
    connect(validatorComboBox, SIGNAL(activated(int)),
            this, SLOT(validatorChanged(int)));
    connect(alignmentComboBox, SIGNAL(activated(int)),
            this, SLOT(alignmentChanged(int)));
    connect(inputMaskComboBox, SIGNAL(activated(int)),
            this, SLOT(inputMaskChanged(int)));
    connect(accessComboBox, SIGNAL(activated(int)),
            this, SLOT(accessChanged(int)));

    QGridLayout *echoLayout = new QGridLayout;
    echoLayout-&amp;gt;addWidget(echoLabel, 0, 0);
    echoLayout-&amp;gt;addWidget(echoComboBox, 0, 1);
    echoLayout-&amp;gt;addWidget(echoLineEdit, 1, 0, 1, 2);
    echoGroup-&amp;gt;setLayout(echoLayout);

    QGridLayout *validatorLayout = new QGridLayout;
    validatorLayout-&amp;gt;addWidget(validatorLabel, 0, 0);
    validatorLayout-&amp;gt;addWidget(validatorComboBox, 0, 1);
    validatorLayout-&amp;gt;addWidget(validatorLineEdit, 1, 0, 1, 2);
    validatorGroup-&amp;gt;setLayout(validatorLayout);

    QGridLayout *alignmentLayout = new QGridLayout;
    alignmentLayout-&amp;gt;addWidget(alignmentLabel, 0, 0);
    alignmentLayout-&amp;gt;addWidget(alignmentComboBox, 0, 1);
    alignmentLayout-&amp;gt;addWidget(alignmentLineEdit, 1, 0, 1, 2);
    alignmentGroup-&amp;gt; setLayout(alignmentLayout);

    QGridLayout *inputMaskLayout = new QGridLayout;
    inputMaskLayout-&amp;gt;addWidget(inputMaskLabel, 0, 0);
    inputMaskLayout-&amp;gt;addWidget(inputMaskComboBox, 0, 1);
    inputMaskLayout-&amp;gt;addWidget(inputMaskLineEdit, 1, 0, 1, 2);
    inputMaskGroup-&amp;gt;setLayout(inputMaskLayout);

    QGridLayout *accessLayout = new QGridLayout;
    accessLayout-&amp;gt;addWidget(accessLabel, 0, 0);
    accessLayout-&amp;gt;addWidget(accessComboBox, 0, 1);
    accessLayout-&amp;gt;addWidget(accessLineEdit, 1, 0, 1, 2);
    accessGroup-&amp;gt;setLayout(accessLayout);

    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(echoGroup, 0, 0);
    layout-&amp;gt;addWidget(validatorGroup, 1, 0);
    layout-&amp;gt;addWidget(alignmentGroup, 2, 0);
    layout-&amp;gt;addWidget(inputMaskGroup, 0, 1);
    layout-&amp;gt;addWidget(accessGroup, 1, 1);
    setLayout(layout);

    setWindowTitle(tr(&quot;Line Edits&quot;));
}

void Window::echoChanged(int index)
{
    switch (index) {
    case 0:
        echoLineEdit-&amp;gt;setEchoMode(QLineEdit::Normal);
        break;
    case 1:
        echoLineEdit-&amp;gt;setEchoMode(QLineEdit::Password);
        break;
    case 2:
        echoLineEdit-&amp;gt;setEchoMode(QLineEdit::PasswordEchoOnEdit);
        break;
    case 3:
        echoLineEdit-&amp;gt;setEchoMode(QLineEdit::NoEcho);
    }
}

void Window::validatorChanged(int index)
{
    switch (index) {
    case 0:
        validatorLineEdit-&amp;gt;setValidator(0);
        break;
    case 1:
        validatorLineEdit-&amp;gt;setValidator(new QIntValidator(
            validatorLineEdit));
        break;
    case 2:
        validatorLineEdit-&amp;gt;setValidator(new QDoubleValidator(-999.0,
            999.0, 2, validatorLineEdit));
    }

    validatorLineEdit-&amp;gt;clear();
}

void Window::alignmentChanged(int index)
{
    switch (index) {
    case 0:
        alignmentLineEdit-&amp;gt;setAlignment(Qt::AlignLeft);
        break;
    case 1:
        alignmentLineEdit-&amp;gt;setAlignment(Qt::AlignCenter);
        break;
    case 2:
        alignmentLineEdit-&amp;gt;setAlignment(Qt::AlignRight);
    }
}

void Window::inputMaskChanged(int index)
{
    switch (index) {
    case 0:
        inputMaskLineEdit-&amp;gt;setInputMask(&quot;&quot;);
        break;
    case 1:
        inputMaskLineEdit-&amp;gt;setInputMask(&quot;+99 99 99 99 99;_&quot;);
        break;
    case 2:
        inputMaskLineEdit-&amp;gt;setInputMask(&quot;0000-00-00&quot;);
        inputMaskLineEdit-&amp;gt;setText(&quot;00000000&quot;);
        inputMaskLineEdit-&amp;gt;setCursorPosition(0);
        break;
    case 3:
        inputMaskLineEdit-&amp;gt;setInputMask(&quot;&amp;gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#&quot;);
    }
}

void Window::accessChanged(int index)
{
    switch (index) {
    case 0:
        accessLineEdit-&amp;gt;setReadOnly(false);
        break;
    case 1:
        accessLineEdit-&amp;gt;setReadOnly(true);
    }
}

</db:programlisting>
</db:article>
