<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Pixel Buffers Example</db:title>
<db:productname>qtopengl</db:productname>
<db:titleabbrev>qtopengl Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Pixel Buffers example demonstrates how to use the QGLPixelBuffer class to render into an off-screen buffer and use the contents as a dynamic texture in a <db:link xlink:href="qglwidget.xml">QGLWidget</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#ifndef CUBE_H
#define CUBE_H

#include &lt;QtOpenGL/qgl.h&gt;
#include &lt;QtCore/qvector.h&gt;
#include &lt;QtCore/qsequentialanimationgroup.h&gt;
#include &lt;QtGui/qmatrix4x4.h&gt;
#include &lt;QtGui/qvector3d.h&gt;
#include &lt;QtGui/qvector2d.h&gt;

class QPropertyAnimation;

class Geometry
{
public:
    void loadArrays() const;
    void addQuad(const QVector3D &amp;a, const QVector3D &amp;b,
                 const QVector3D &amp;c, const QVector3D &amp;d,
                 const QVector&lt;QVector2D&gt; &amp;tex);
    void setColors(int start, GLfloat colors[4][4]);
    const GLushort *indices() const { return faces.constData(); }
    int count() const { return faces.count(); }
private:
    QVector&lt;GLushort&gt; faces;
    QVector&lt;QVector3D&gt; vertices;
    QVector&lt;QVector3D&gt; normals;
    QVector&lt;QVector2D&gt; texCoords;
    QVector&lt;QVector4D&gt; colors;
    int append(const QVector3D &amp;a, const QVector3D &amp;n, const QVector2D &amp;t);
    void addTri(const QVector3D &amp;a, const QVector3D &amp;b, const QVector3D &amp;c, const QVector3D &amp;n);
    friend class Tile;
};

class Tile
{
public:
    void draw() const;
    void setColors(GLfloat[4][4]);
protected:
    Tile(const QVector3D &amp;loc = QVector3D());
    QVector3D location;
    QQuaternion orientation;
private:
    int start;
    int count;
    bool useFlatColor;
    GLfloat faceColor[4];
    Geometry *geom;
    friend class TileBuilder;
};

class TileBuilder
{
public:
    enum { bl, br, tr, tl };
    explicit TileBuilder(Geometry *, qreal depth = 0.0f, qreal size = 1.0f);
    Tile *newTile(const QVector3D &amp;loc = QVector3D()) const;
    void setColor(QColor c) { color = c; }
protected:
    void initialize(Tile *) const;
    QVector&lt;QVector3D&gt; verts;
    QVector&lt;QVector2D&gt; tex;
    int start;
    int count;
    Geometry *geom;
    QColor color;
};

class Cube : public QObject, public Tile
{
    Q_OBJECT
    Q_PROPERTY(qreal range READ range WRITE setRange)
    Q_PROPERTY(qreal altitude READ altitude WRITE setAltitude)
    Q_PROPERTY(qreal rotation READ rotation WRITE setRotation)
public:
    Cube(const QVector3D &amp;loc = QVector3D());
    ~Cube();
    qreal range() { return location.x(); }
    void setRange(qreal r);
    qreal altitude() { return location.y(); }
    void setAltitude(qreal a);
    qreal rotation() { return rot; }
    void setRotation(qreal r);
    void removeBounce();
    void startAnimation();
    void setAnimationPaused(bool paused);
signals:
    void changed();
private:
    qreal rot;
    QPropertyAnimation *r;
    QPropertyAnimation *rtn;
    QSequentialAnimationGroup *animGroup;
    qreal startx;
    friend class CubeBuilder;
};

class CubeBuilder : public TileBuilder
{
public:
    explicit CubeBuilder(Geometry *, qreal depth = 0.0f, qreal size = 1.0f);
    Cube *newCube(const QVector3D &amp;loc = QVector3D()) const;
private:
    mutable int ix;
};

#endif // CUBE_H

</db:programlisting>
</db:article>
