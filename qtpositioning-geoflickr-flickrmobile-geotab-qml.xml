<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>GeoFlickr (QML)</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The GeoFlickr example shows how to use the user's current position to fetch local content from a web service.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.0
import QtPositioning 5.2

Rectangle {
    id: container
    property int maxX: parent.width; property int maxY: parent.height
    property variant coordinate

    Binding {
        target: container
        property: &quot;coordinate&quot;
        value: positionSource.position.coordinate
    }

    width: 300; height: 130
    color: &quot;blue&quot;
    opacity: 0.7
    border.color: &quot;black&quot;
    border.width: 1
    radius: 5
    gradient: Gradient {
        GradientStop {position: 0.0; color: &quot;grey&quot;}
        GradientStop {position: 1.0; color: &quot;black&quot;}
    }
    MouseArea {
        anchors.fill: parent
        drag.target: parent
        drag.axis: Drag.XandYAxis
        drag.minimumX: -(parent.width * (2/3)); drag.maximumX: parent.maxX - (parent.width/3)
        drag.minimumY: -(parent.height/2); drag.maximumY: parent.maxY - (parent.height/2)
    }
    Button {
        id: locateButton
        text: &quot;Locate &amp; update&quot;
        anchors {left: parent.left; leftMargin: 5}
        y: 3; height: 32; width: parent.width - 10
        onClicked: {
            if (positionSource.supportedPositioningMethods ===
                    PositionSource.NoPositioningMethods) {
                positionSource.nmeaSource = &quot;nmealog.txt&quot;;
                sourceText.text = &quot;(filesource): &quot; + printableMethod(positionSource.supportedPositioningMethods);
            }
            positionSource.update();
        }
    }
    PositionSource {
        id: positionSource
        onPositionChanged: { planet.source = &quot;images/sun.png&quot;; }

        onSourceErrorChanged: {
            if (sourceError == PositionSource.NoError)
                return

            console.log(&quot;Source error: &quot; + sourceError)
            activityText.fadeOut = true
            stop()
        }

        onUpdateTimeout: {
            activityText.fadeOut = true
        }
    }
    function printableMethod(method) {
        if (method === PositionSource.SatellitePositioningMethods)
            return &quot;Satellite&quot;;
        else if (method === PositionSource.NoPositioningMethods)
            return &quot;Not available&quot;
        else if (method === PositionSource.NonSatellitePositioningMethods)
            return &quot;Non-satellite&quot;
        else if (method === PositionSource.AllPositioningMethods)
            return &quot;Multiple&quot;
        return &quot;source error&quot;;
    }

    Grid {
        id: locationGrid
        columns: 2
        anchors {left: parent.left; leftMargin: 5; top: locateButton.bottom; topMargin: 5}
        spacing: 5
        Text {color: &quot;white&quot;; font.bold: true
            text: &quot;Lat:&quot;; style: Text.Raised; styleColor: &quot;black&quot;
        }
        Text {id: latitudeValue; color: &quot;white&quot;; font.bold: true
            text: positionSource.position.coordinate.latitude; style: Text.Raised; styleColor: &quot;black&quot;;
        }
        Text {color: &quot;white&quot;; font.bold: true
            text: &quot;Lon:&quot;; style: Text.Raised; styleColor: &quot;black&quot;
        }
        Text {id: longitudeValue; color: &quot;white&quot;; font.bold: true
            text: positionSource.position.coordinate.longitude; style: Text.Raised; styleColor: &quot;black&quot;
        }
    }
    Image {
        id: planet
        anchors {top: locationGrid.bottom; left: parent.left; leftMargin: locationGrid.anchors.leftMargin}
        source: &quot;images/moon.png&quot;
        width: 30; height: 30
    }
    Text {id: sourceText; color: &quot;white&quot;; font.bold: true;
        anchors {left: planet.right; leftMargin: 5; verticalCenter: planet.verticalCenter}
        text: &quot;Source: &quot; + printableMethod(positionSource.supportedPositioningMethods); style: Text.Raised; styleColor: &quot;black&quot;;
    }

    Text {
        id: activityText; color: &quot;white&quot;; font.bold: true;
        anchors { top: planet.bottom; horizontalCenter: parent.horizontalCenter }
        property bool fadeOut: false

        text: {
            if (fadeOut)
                return qsTr(&quot;Timeout occurred!&quot;);
            else if (positionSource.active)
                return qsTr(&quot;Retrieving update...&quot;)
            else
                return &quot;&quot;
        }

        Timer {
            id: fadeoutTimer; repeat: false; interval: 3000; running: activityText.fadeOut
            onTriggered: { activityText.fadeOut = false; }
        }
    }
}

</db:programlisting>
</db:article>
