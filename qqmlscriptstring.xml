<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlScriptString Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlscriptstring.xml">QQmlScriptString</db:link> class encapsulates a script and its context.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlScriptString</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qqmlscriptstring.xml">QQmlScriptString</db:link> is used to create <db:link xlink:href="qobject.xml">QObject</db:link> properties that accept a script &quot;assignment&quot; from QML.</db:para>
<db:para>Normally, the following QML would result in a binding being established for the <db:code>script</db:code> property; i.e. <db:code>script</db:code> would be assigned the value obtained from running <db:code>myObj.value = Math.max(myValue, 100)</db:code></db:para>
<db:programlisting language="qml">MyType {
    script: myObj.value = Math.max(myValue, 100)
}
</db:programlisting>
<db:para>If instead the property had a type of <db:link xlink:href="qqmlscriptstring.xml">QQmlScriptString</db:link>, the script itself – <db:emphasis>myObj.value = Math.max(myValue, 100)</db:emphasis> – would be passed to the <db:code>script</db:code> property and the class could choose how to handle it. Typically, the class will evaluate the script at some later time using a <db:link xlink:href="qqmlexpression.xml">QQmlExpression</db:link>.</db:para>
<db:programlisting language="cpp">QQmlExpression expr(scriptString);
expr.evaluate();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlexpression.xml">QQmlExpression</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlScriptString">
<db:title>QQmlScriptString::QQmlScriptString()</db:title>
<db:para>Constructs an empty instance.</db:para>
</db:section>
<db:section xml:id="QQmlScriptString-1">
<db:title>QQmlScriptString::QQmlScriptString(const QQmlScriptString &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copies <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="booleanLiteral">
<db:title>bool QQmlScriptString::booleanLiteral(bool *<db:emphasis>ok</db:emphasis>) const</db:title>
<db:para>If the content of the <db:link xlink:href="qqmlscriptstring.xml">QQmlScriptString</db:link> is a boolean literal, returns the boolean value and sets <db:code role="parameter">ok</db:code> to true. Otherwise returns false and sets <db:code role="parameter">ok</db:code> to false.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QQmlScriptString::isEmpty() const</db:title>
<db:para>Returns whether the <db:link xlink:href="qqmlscriptstring.xml">QQmlScriptString</db:link> is empty.</db:para>
</db:section>
<db:section xml:id="isNullLiteral">
<db:title>bool QQmlScriptString::isNullLiteral() const</db:title>
<db:para>Returns whether the content of the <db:link xlink:href="qqmlscriptstring.xml">QQmlScriptString</db:link> is the <db:code>null</db:code> literal.</db:para>
</db:section>
<db:section xml:id="isUndefinedLiteral">
<db:title>bool QQmlScriptString::isUndefinedLiteral() const</db:title>
<db:para>Returns whether the content of the <db:link xlink:href="qqmlscriptstring.xml">QQmlScriptString</db:link> is the <db:code>undefined</db:code> literal.</db:para>
</db:section>
<db:section xml:id="numberLiteral">
<db:title>qreal QQmlScriptString::numberLiteral(bool *<db:emphasis>ok</db:emphasis>) const</db:title>
<db:para>If the content of the <db:link xlink:href="qqmlscriptstring.xml">QQmlScriptString</db:link> is a number literal, returns that number and sets <db:code role="parameter">ok</db:code> to true. Otherwise returns 0.0 and sets <db:code role="parameter">ok</db:code> to false.</db:para>
</db:section>
<db:section xml:id="stringLiteral">
<db:title>QString QQmlScriptString::stringLiteral() const</db:title>
<db:para>If the content of the <db:link xlink:href="qqmlscriptstring.xml">QQmlScriptString</db:link> is a string literal, returns that string. Otherwise returns a null <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QQmlScriptString::operator!=(const QQmlScriptString &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this and the <db:code role="parameter">other</db:code> <db:link xlink:href="qqmlscriptstring.xml">QQmlScriptString</db:link> objects are different.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlscriptstring.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QQmlScriptString &amp;QQmlScriptString::operator=(const QQmlScriptString &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QQmlScriptString::operator==(const QQmlScriptString &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this and the <db:code role="parameter">other</db:code> <db:link xlink:href="qqmlscriptstring.xml">QQmlScriptString</db:link> objects are equal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlscriptstring.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
