<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Maps</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Maps deals with maps, their contents and navigation.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> type allows the display of a map and placing objects within the map. Various points of interest can be defined and added to the map for display. Also the <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> has features to control how the map is displayed. With the Map item you can center the map, zoom, pinch and make the item flickable.</db:para>
<db:para>The places to be added to the map are <db:link xlink:href="location-maps-qml.xml#putting-objects-on-a-map-map-overlay-objects">MapItems</db:link>. The item's position is defined by a <db:link xlink:href="qml-coordinate.xml">coordinate</db:link> which includes latitude, longitude and altitude. The item is then displayed automatically after it is added to the <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link>.</db:para>
<db:section xml:id="position-on-map">
<db:title>Position on map</db:title>
<db:para>All position APIs are part of the <db:link xlink:href="qtpositioning-module.xml">QtPositioning</db:link> module. The basic piece of position information is the <db:link xlink:href="qml-coordinate.xml">coordinate</db:link>. A coordinate encapsulates data for the latitude, longitude and altitude of the location. Altitude is in meters. It also has a method to determine distance to another <db:link xlink:href="qml-coordinate.xml">coordinate</db:link>. The <db:link xlink:href="qml-coordinate.xml">coordinate</db:link> type may also be held within a <db:link xlink:href="mobiledevelopment.xml#location">Location</db:link> element, this will also have information on a bounding box size to determine sufficient proximity to the location and a location address.</db:para>
<db:para>Here is an example of a client that uses a <db:link xlink:href="qml-qtpositioning-positionsource.xml">position source</db:link> to center a <db:link xlink:href="qml-qtlocation-map.xml">map</db:link> on the current position:</db:para>
<db:programlisting language="cpp">Rectangle {

    import QtPositioning 5.2
    import QtLocation 5.3
    ...

    Map {
        id: map
        // initialize map
        ...
    }

    PositionSource {
        onPositionChanged: {
            // center the map on the current position
            map.center = position.coordinate
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="geocoding">
<db:title>Geocoding</db:title>
<db:para><db:link xlink:href="http://en.wikipedia.org/wiki/Geocoding">Geocoding</db:link> is the derivation of geographical coordinates (latitude and longitude) from other geographical references to the locations. For example, this can be a street address. Reverse geocoding is also possible with a street address being used to determine a geographical coordinate. Geocoding is performed by using the <db:link xlink:href="qml-qtlocation-geocodemodel.xml">GeocodeModel</db:link> type.</db:para>
<db:para>The following code examples are a small part of the map component in the <db:link xlink:href="qtlocation-mapviewer-example.xml">Map Viewer (QML)</db:link> example. The snippets demonstrate the declaration of the <db:link xlink:href="qml-qtlocation-geocodemodel.xml">GeocodeModel</db:link> component.</db:para>
<db:para>In the snippet we see that the [QML]{<db:link xlink:href="qml-qtlocation-geocodemodel.xml">GeocodeModel</db:link>} contains the plugin and two signal handlers. One for changes in status <db:link xlink:href="qml-qtlocation-geocodemodel.xml#status-prop">onStatusChanged</db:link> and the other to update the centering of the Map object <db:link xlink:href="qml-qtlocation-geocodemodel.xml#locationsChanged-signal">onLocationsChanged</db:link>.</db:para>
<db:programlisting language="qml">GeocodeModel {
    id: geocodeModel
    plugin: map.plugin
    onStatusChanged: {
        if ((status == GeocodeModel.Ready) || (status == GeocodeModel.Error))
            map.geocodeFinished()
    }
    onLocationsChanged:
    {
        if (count == 1) {
            map.center.latitude = get(0).coordinate.latitude
            map.center.longitude = get(0).coordinate.longitude
        }
    }
}

MapItemView {
    model: geocodeModel
    delegate: pointDelegate
}
</db:programlisting>
<db:para>The geocoding features are called from a higher level piece of code. In this snippet we see an <db:link xlink:href="qml-qtpositioning-address.xml">Address</db:link> object filled with the desired parameters.</db:para>
<db:programlisting language="qml">Address {
    id :fromAddress
    street: &quot;Sandakerveien 116&quot;
    city: &quot;Oslo&quot;
    country: &quot;Norway&quot;
    state : &quot;&quot;
    postalCode: &quot;0484&quot;
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtpositioning-address.xml">Address</db:link> is later used in a query for the <db:link xlink:href="qml-qtlocation-geocodemodel.xml">GeocodeModel</db:link> to process and determine the geographical <db:link xlink:href="qml-coordinate.xml">coordinates</db:link>.</db:para>
<db:programlisting language="qml">// send the geocode request
geocodeModel.query = fromAddress
geocodeModel.update()
</db:programlisting>
</db:section>
<db:section xml:id="navigation">
<db:title>Navigation</db:title>
<db:para>A very important function of the <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> type is navigation from one place to a destination with possible waypoints along the route. The route will be divided up into a series of segments. At the end of each segment is a vertex called a <db:emphasis>maneuver</db:emphasis>. The <db:emphasis>segments</db:emphasis> contain information about the time and distance to the end of the segment. The <db:emphasis>maneuvers</db:emphasis> contain information about what to do next, how to get onto the next segment, if there is one. So a <db:emphasis>maneuver</db:emphasis> contains navigational information, for example &quot;turn right now&quot;.</db:para>
<db:para>To find a suitable route we will need to use a <db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link> to define the selection criteria and adding any required waypoints. The <db:link xlink:href="qml-qtlocation-routemodel.xml">RouteModel</db:link> should return a list of <db:link xlink:href="qml-qtlocation-routesegment.xml">RouteSegment</db:link>s that defines the route to the destination complete with navigation advice at the joins between segments, called <db:link xlink:href="qml-qtlocation-routemaneuver.xml">RouteManeuver</db:link>s</db:para>
<db:para>There are many options that you can add to the query to narrow the criteria. The <db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link> properties can include</db:para>
<db:informaltable style="generic" width="60%">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml#numberAlternativeRoutes-prop">numberAlternativeRoutes</db:link></db:para>
</db:td>
<db:td>
<db:para>The number of alternative routes</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml#travelModes-prop">travelModes</db:link></db:para>
</db:td>
<db:td>
<db:para>Travel modes</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml#routeOptimizations-prop">routeOptimizations</db:link></db:para>
</db:td>
<db:td>
<db:para>Required route optimizations</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml#segmentDetail-prop">segmentDetail</db:link></db:para>
</db:td>
<db:td>
<db:para>Level of detail in segments</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml#maneuverDetail-prop">maneuverDetail</db:link></db:para>
</db:td>
<db:td>
<db:para>Level of detail in maneuvers between segments</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml#waypoints-prop">waypoints</db:link></db:para>
</db:td>
<db:td>
<db:para>A list of waypoints</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml#excludedAreas-prop">excludedAreas</db:link></db:para>
</db:td>
<db:td>
<db:para>A list of excluded areas that the route must not cross</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml#featureTypes-prop">featureTypes</db:link></db:para>
</db:td>
<db:td>
<db:para>Relevant map features, for example highway, ferry</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In the following example a default <db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link> is declared within <db:link xlink:href="qml-qtlocation-routemodel.xml">RouteModel</db:link>.</db:para>
<db:programlisting language="qml">RouteModel {
    id: routeModel
    plugin : map.plugin
    query:  RouteQuery {
        id: routeQuery
    }
    onStatusChanged: {
        if (status == RouteModel.Ready) {
            switch (count) {
            case 0:
                // technically not an error
                map.routeError()
                break
            case 1:
                map.showRouteList()
                break
            }
        } else if (status == RouteModel.Error) {
            map.routeError()
        }
    }
}
</db:programlisting>
<db:para>The user enters some information such as the starting point of the route, some waypoints and the destination. All of these locations are waypoints so the locations from start to finish will be entered as a sequence of waypoints. Then other query properties can be set that may be specific to this trip.</db:para>
<db:programlisting language="qml">// clear away any old data in the query
routeQuery.clearWaypoints();

// add the start and end coords as waypoints on the route
routeQuery.addWaypoint(startCoordinate)
routeQuery.addWaypoint(endCoordinate)
routeQuery.travelModes = RouteQuery.CarTravel
routeQuery.routeOptimizations = RouteQuery.FastestRoute

routeModel.update();

</db:programlisting>
<db:para>The routeInfoModel <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#listmodel">ListModel</db:link> is used to grab the results of the query and construct a suitable list for display.</db:para>
<db:programlisting language="qml">ListView {
    interactive: true
    model: ListModel { id: routeInfoModel }
    header: RouteListHeader {}
    delegate:  RouteListDelegate{
        routeIndex.text: index + 1
        routeInstruction.text: instruction
        routeDistance.text: distance
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#listmodel">ListModel</db:link> routeInfoModel can be filled with values using a code, that loops through the segments extracting the segment length, instruction text and distance to the next instruction. The extracted data is formatted for display as it is retrieved.</db:para>
<db:programlisting language="qml">routeInfoModel.clear()
if (routeModel.count &gt; 0) {
    for (var i = 0; i &lt; routeModel.get(0).segments.length; i++) {
        routeInfoModel.append({
            &quot;instruction&quot;: routeModel.get(0).segments[i].maneuver.instructionText,
             &quot;distance&quot;: Helper.formatDistance(routeModel.get(0).segments[i].maneuver.distanceToNextInstruction)
        });
    }
}
</db:programlisting>
<db:para>For more information on the example see the <db:link xlink:href="qtlocation-mapviewer-example.xml">Map Viewer (QML)</db:link> example.</db:para>
</db:section>
<db:section xml:id="zoom-pinch-and-flickable">
<db:title>Zoom, Pinch and Flickable</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> item also supports user interface interactions with the map using tactile and mouse gestures. That is features such as swiping to pan, pinching to zoom.</db:para>
<db:para>Enabling and configuring pinch and flickable is easy within the <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> type.</db:para>
<db:programlisting language="qml">Map {
    id: map
    // Enable pan, flick, and pinch gestures to zoom in and out
    gesture.acceptedGestures: MapGestureArea.PanGesture | MapGestureArea.FlickGesture | MapGestureArea.PinchGesture
    gesture.flickDeceleration: 3000
    gesture.enabled: true
}
</db:programlisting>
<db:para>Zoom can also be controlled by other objects like sliders, with binding to the Map <db:link xlink:href="qml-qtlocation-map.xml#zoomLevel-prop">zoomLevel</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="qml-types">
<db:title>QML Types</db:title>
<db:section xml:id="maps">
<db:title>Maps</db:title>
<db:variablelist role="qml-QtLocation5-maps">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-map.xml" xlink:role="">Map</db:link></db:term>
<db:listitem>
<db:para>The Map type displays a map.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-mapcircle.xml" xlink:role="">MapCircle</db:link></db:term>
<db:listitem>
<db:para>The MapCircle type displays a geographic circle on a Map.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-mapgesturearea.xml" xlink:role="">MapGestureArea</db:link></db:term>
<db:listitem>
<db:para>The MapGestureArea type provides Map gesture interaction.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-mapitemview.xml" xlink:role="">MapItemView</db:link></db:term>
<db:listitem>
<db:para>The MapItemView is used to populate Map from a model.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-mappinchevent.xml" xlink:role="">MapPinchEvent</db:link></db:term>
<db:listitem>
<db:para>MapPinchEvent type provides basic information about pinch event.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-mappolygon.xml" xlink:role="">MapPolygon</db:link></db:term>
<db:listitem>
<db:para>The MapPolygon type displays a polygon on a Map</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-mappolyline.xml" xlink:role="">MapPolyline</db:link></db:term>
<db:listitem>
<db:para>The MapPolyline type displays a polyline on a map.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-mapquickitem.xml" xlink:role="">MapQuickItem</db:link></db:term>
<db:listitem>
<db:para>The MapQuickItem type displays an arbitrary Qt Quick object on a Map.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-maprectangle.xml" xlink:role="">MapRectangle</db:link></db:term>
<db:listitem>
<db:para>The MapRectangle type displays a rectangle on a Map.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-maproute.xml" xlink:role="">MapRoute</db:link></db:term>
<db:listitem>
<db:para>The MapRoute type displays a Route on a Map.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-maptype.xml" xlink:role="">MapType</db:link></db:term>
<db:listitem>
<db:para>The MapType type holds information about a map type.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qml-types-geocoding-7">
<db:title>Geocoding</db:title>
<db:variablelist role="qml-QtLocation5-geocoding">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-geocodemodel.xml" xlink:role="">GeocodeModel</db:link></db:term>
<db:listitem>
<db:para>The GeocodeModel type provides support for searching operations related to geographic information.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="routing">
<db:title>Routing</db:title>
<db:variablelist role="qml-QtLocation5-routing">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-route.xml" xlink:role="">Route</db:link></db:term>
<db:listitem>
<db:para>The Route type represents one geographical route.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-routemaneuver.xml" xlink:role="">RouteManeuver</db:link></db:term>
<db:listitem>
<db:para>The RouteManeuver type represents the information relevant to the point at which two RouteSegments meet.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-routemodel.xml" xlink:role="">RouteModel</db:link></db:term>
<db:listitem>
<db:para>The RouteModel type provides access to routes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-routequery.xml" xlink:role="">RouteQuery</db:link></db:term>
<db:listitem>
<db:para>The RouteQuery type is used to provide query parameters to a RouteModel.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtlocation-routesegment.xml" xlink:role="">RouteSegment</db:link></db:term>
<db:listitem>
<db:para>The RouteSegment type represents a segment of a Route.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
<db:section xml:id="example">
<db:title>Example</db:title>
<db:para>The above snippets are taken from the <db:link xlink:href="qtlocation-mapviewer-example.xml">Map Viewer (QML)</db:link> example.</db:para>
</db:section>
</db:article>
