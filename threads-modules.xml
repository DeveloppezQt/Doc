<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Thread-Support in Qt Modules</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="threads-qobject.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Threads and QObjects"/></db:extendedlink>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="threads-and-the-sql-module">
<db:title>Threads and the SQL Module</db:title>
<db:para>A connection can only be used from within the thread that created it. Moving connections between threads or creating queries from a different thread is not supported.</db:para>
<db:para>In addition, the third party libraries used by the QSqlDrivers can impose further restrictions on using the SQL Module in a multithreaded program. Consult the manual of your database client for more information</db:para>
</db:section>
<db:section xml:id="painting-in-threads">
<db:title>Painting in Threads</db:title>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link> can be used in a thread to paint onto <db:link xlink:href="qimage.xml">QImage</db:link>, <db:link xlink:href="qprinter.xml">QPrinter</db:link>, and <db:link xlink:href="qpicture.xml">QPicture</db:link> paint devices. Painting onto QPixmaps and QWidgets is <db:emphasis>not</db:emphasis> supported. On macOS the automatic progress dialog will not be displayed if you are printing from outside the GUI thread.</db:para>
<db:para>Any number of threads can paint at any given time, however only one thread at a time can paint on a given paint device. In other words, two threads can paint at the same time if each paints onto separate QImages, but the two threads cannot paint onto the same <db:link xlink:href="qimage.xml">QImage</db:link> at the same time.</db:para>
</db:section>
<db:section xml:id="threads-and-rich-text-processing">
<db:title>Threads and Rich Text Processing</db:title>
<db:para>The <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>, <db:link xlink:href="qtextcursor.xml">QTextCursor</db:link>, and <db:link xlink:href="richtext.xml">all related classes</db:link> are reentrant.</db:para>
<db:para>Note that a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> instance created in the GUI thread may contain <db:link xlink:href="qpixmap.xml">QPixmap</db:link> image resources. Use <db:link xlink:href="qtextdocument.xml#clone">QTextDocument::clone</db:link>() to create a copy of the document, and pass the copy to another thread for further processing (such as printing).</db:para>
</db:section>
<db:section xml:id="threads-and-the-svg-module">
<db:title>Threads and the SVG Module</db:title>
<db:para>The <db:link xlink:href="qsvggenerator.xml">QSvgGenerator</db:link> and <db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link> classes in the <db:link xlink:href="qtsvg-module.xml">QtSvg</db:link> module are reentrant.</db:para>
</db:section>
<db:section xml:id="threads-and-implicitly-shared-classes">
<db:title>Threads and Implicitly Shared Classes</db:title>
<db:para>Qt uses an optimization called <db:link xlink:href="implicit-sharing.xml">implicit sharing</db:link> for many of its value class, notably <db:link xlink:href="qimage.xml">QImage</db:link> and <db:link xlink:href="qstring.xml">QString</db:link>. Beginning with Qt 4, implicit shared classes can safely be copied across threads, like any other value classes. They are fully <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>. The implicit sharing is really <db:emphasis>implicit</db:emphasis>.</db:para>
<db:para>In many people's minds, implicit sharing and multithreading are incompatible concepts, because of the way the reference counting is typically done. Qt, however, uses atomic reference counting to ensure the integrity of the shared data, avoiding potential corruption of the reference counter.</db:para>
<db:para>Note that atomic reference counting does not guarantee <db:link xlink:href="threads-reentrancy.xml">thread-safety</db:link>. Proper locking should be used when sharing an instance of an implicitly shared class between threads. This is the same requirement placed on all <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link> classes, shared or not. Atomic reference counting does, however, guarantee that a thread working on its own, local instance of an implicitly shared class is safe. We recommend using <db:link xlink:href="threads-qobject.xml#signals-and-slots-across-threads">signals and slots</db:link> to pass data between threads, as this can be done without the need for any explicit locking.</db:para>
<db:para>To sum it up, implicitly shared classes in Qt 4 are really <db:emphasis>implicitly</db:emphasis> shared. Even in multithreaded applications, you can safely use them as if they were plain, non-shared, reentrant value-based classes.</db:para>
</db:section>
</db:article>
