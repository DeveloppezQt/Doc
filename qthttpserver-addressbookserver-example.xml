<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>RESTful server Address Book Example</db:title>
<db:productname>QtHttpServer</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Lightweight HTTP Server Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Example of how to create a RESTful API server using the <db:link xlink:href="qhttpserver.xml">QHttpServer</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/restful-address-book-server-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example shows how to set up a RESTful API server using the <db:link xlink:href="qhttpserver.xml">QHttpServer</db:link> class. The Address Book API allows create, read, update and delete operations of name and address entries.</db:para>
<db:programlisting language="cpp">httpServer.route(&quot;/v2/contact&quot;, QHttpServerRequest::Method::Get,
                 [&amp;amp;contacts](const QHttpServerRequest &amp;amp;) {
                     QJsonArray array;
                     std::transform(contacts.cbegin(), contacts.cend(),
                                    std::inserter(array, array.begin()),
                                    [](const auto &amp;amp;it) { return it.toJson(); });

                     return QHttpServerResponse(array);
                 });
</db:programlisting>
<db:para>In the example above, the route is specified for the GET method, which returns the JSON array with all address entries stored. To achieve that, the <db:link xlink:href="qhttpserver.xml#route">QHttpServer::route</db:link>() method is used with the <db:link xlink:href="qhttpserverrequest.xml#Method-enum">QHttpServerRequest::Method::Get</db:link> enumeration.</db:para>
<db:programlisting language="cpp">httpServer.route(
        &quot;/v2/contact&quot;, QHttpServerRequest::Method::Post,
        [&amp;amp;contacts](const QHttpServerRequest &amp;amp;request) {
            if (!checkApiKeyHeader(request.headers())) {
                return QHttpServerResponse(QHttpServerResponder::StatusCode::Unauthorized);
            }
            const auto json = byteArrayToJsonObject(request.body());
            if (!json || !json-&amp;gt;contains(&quot;address&quot;) || !json-&amp;gt;contains(&quot;name&quot;))
                return QHttpServerResponse(QHttpServerResponder::StatusCode::BadRequest);
            const auto entry = insertAddress(contacts, json-&amp;gt;value(&quot;name&quot;).toString(),
                                             json-&amp;gt;value(&quot;address&quot;).toString());
            return QHttpServerResponse(entry, QHttpServerResponder::StatusCode::Created);
        });
</db:programlisting>
<db:para>In this example, the route is specified for the POST method, which adds a new entry to the address book and returns a JSON object that represents the added entry. This JSON object also contains an HTTP status code: <db:code>Created</db:code> for new entries, or <db:code>AlreadyReported</db:code> for pre-existing entries. This example makes use of an overload of <db:link xlink:href="qhttpserverresponse.xml">QHttpServerResponse::QHttpServerResponse</db:link> to send a JSON object and corresponding HTTP status code.</db:para>
<db:para>To create an entry the request body must be a JSON object with <db:code>address</db:code> and <db:code>name</db:code> fields. For example:</db:para>
<db:programlisting language="cpp">{
    &quot;address&quot;: &quot;Example Street 1, Big City&quot;
    &quot;name&quot;: &quot;John Smith&quot;
}
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="addressbookserver/CMakeLists.txt">addressbookserver/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="addressbookserver/main.cpp">addressbookserver/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtdoc-demos-addressbook-example.xml">Qt Quick Demo - RESTful API client Address Book</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section></db:article>
