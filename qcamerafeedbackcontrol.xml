<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCameraFeedbackControl Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcamerafeedbackcontrol.xml">QCameraFeedbackControl</db:link> class allows controlling feedback (sounds etc) during camera operation.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCameraFeedbackControl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediacontrol.xml" xlink:role="class">QMediaControl</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCameraFeedbackControl is part of <db:simplelist><db:member>multimedia_control</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>When using a camera, there are several times when some form of feedback to the user is given - for example, when an image is taken, or when recording is started. You can enable or disable some of this feedback, or adjust what sound might be played for these actions.</db:para>
<db:para>In some cases it may be undesirable to play a sound effect - for example, when initiating video recording the sound itself may be recorded.</db:para>
<db:note>
<db:para>In some countries or regions, feedback sounds or other indications (e.g. a red light) are mandatory during camera operation. In these cases, you can check <db:code>isEventFeedbackLocked</db:code> to check if that type of feedback can be modified. Any attempts to change a locked feedback type will be ignored.</db:para>
</db:note>
<db:para>The interface name of <db:link xlink:href="qcamerafeedbackcontrol.xml">QCameraFeedbackControl</db:link> is <db:code>org.qt-project.qt.camerafeedbackcontrol/5.0</db:code> as defined in <db:link xlink:href="qcamerafeedbackcontrol.xml#QCameraFeedbackControl_iid">QCameraFeedbackControl_iid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml">QCamera</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="EventType-enum">
<db:title>enum QCameraFeedbackControl::EventType</db:title>
<db:para>This enumeration describes certain events that occur during camera usage. You can associate some form of feedback to be given when the event occurs, or check whether feedback for this event is enabled or locked so that changes cannot be made.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafeedbackcontrol.xml">QCameraFeedbackControl</db:link></db:emphasis>::ViewfinderStarted</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The viewfinder stream was started (even if not visible)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafeedbackcontrol.xml">QCameraFeedbackControl</db:link></db:emphasis>::ViewfinderStopped</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The viewfinder stream was stopped</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafeedbackcontrol.xml">QCameraFeedbackControl</db:link></db:emphasis>::ImageCaptured</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An image was captured but not yet fully processed</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafeedbackcontrol.xml">QCameraFeedbackControl</db:link></db:emphasis>::ImageSaved</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>An image is fully available and saved somewhere.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafeedbackcontrol.xml">QCameraFeedbackControl</db:link></db:emphasis>::ImageError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>An error occurred while capturing an image</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafeedbackcontrol.xml">QCameraFeedbackControl</db:link></db:emphasis>::RecordingStarted</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Video recording has started</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafeedbackcontrol.xml">QCameraFeedbackControl</db:link></db:emphasis>::RecordingInProgress</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Video recording is in progress</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafeedbackcontrol.xml">QCameraFeedbackControl</db:link></db:emphasis>::RecordingStopped</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Video recording has stopped</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafeedbackcontrol.xml">QCameraFeedbackControl</db:link></db:emphasis>::AutoFocusInProgress</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>The camera is trying to automatically focus</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafeedbackcontrol.xml">QCameraFeedbackControl</db:link></db:emphasis>::AutoFocusLocked</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>The camera has automatically focused successfully</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafeedbackcontrol.xml">QCameraFeedbackControl</db:link></db:emphasis>::AutoFocusFailed</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>The camera was unable to focus automatically</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCameraFeedbackControl">
<db:title>[explicit protected] QCameraFeedbackControl::QCameraFeedbackControl(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a camera feedback control object with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QCameraFeedbackControl">
<db:title>[virtual noexcept] QCameraFeedbackControl::~QCameraFeedbackControl()</db:title>
<db:para>Destroys the camera feedback control object.</db:para>
</db:section>
<db:section xml:id="isEventFeedbackEnabled">
<db:title>[pure virtual, since 5.0] bool QCameraFeedbackControl::isEventFeedbackEnabled(QCameraFeedbackControl::EventType <db:emphasis>event</db:emphasis>) const</db:title>
<db:para>Returns true if the feedback for <db:code role="parameter">event</db:code> is enabled.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="isEventFeedbackLocked">
<db:title>[pure virtual, since 5.0] bool QCameraFeedbackControl::isEventFeedbackLocked(QCameraFeedbackControl::EventType <db:emphasis>event</db:emphasis>) const</db:title>
<db:para>Returns true if the feedback setting for <db:code role="parameter">event</db:code> is locked. This may be true because of legal compliance issues, or because configurability of this event's feedback is not supported.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="resetEventFeedback">
<db:title>[pure virtual, since 5.0] void QCameraFeedbackControl::resetEventFeedback(QCameraFeedbackControl::EventType <db:emphasis>event</db:emphasis>)</db:title>
<db:para>Restores the feedback setting for this <db:code role="parameter">event</db:code> to its default setting.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="setEventFeedbackEnabled">
<db:title>[pure virtual, since 5.0] bool QCameraFeedbackControl::setEventFeedbackEnabled(QCameraFeedbackControl::EventType <db:emphasis>event</db:emphasis>, bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:para>Turns on feedback for the specific <db:code role="parameter">event</db:code> if <db:code role="parameter">enabled</db:code> is true, otherwise disables the feedback. Returns true if the feedback could be modified, or false otherwise (e.g. this feedback type is locked).</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamerafeedbackcontrol.xml#isEventFeedbackEnabled">isEventFeedbackEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEventFeedbackSound">
<db:title>[pure virtual, since 5.0] bool QCameraFeedbackControl::setEventFeedbackSound(QCameraFeedbackControl::EventType <db:emphasis>event</db:emphasis>, const QString &amp;<db:emphasis>filePath</db:emphasis>)</db:title>
<db:para>When the given <db:code role="parameter">event</db:code> occurs, the sound effect referenced by <db:code role="parameter">filePath</db:code> will be played instead of the default sound.</db:para>
<db:para>If this feedback type is locked, or if the supplied path is inaccessible, this function will return false. In addition, some forms of feedback may be non-auditory (e.g. a red light, or a vibration), and false may be returned in this case.</db:para>
<db:para>The file referenced should be linear PCM (WAV format).</db:para>
<db:note>
<db:para>In the case that a valid file path to an unsupported file is given, this function will return true but the feedback will use the original setting.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QCameraFeedbackControl_iid">
<db:title>QCameraFeedbackControl_iid</db:title>
<db:para><db:code>org.qt-project.qt.camerafeedbackcontrol/5.0</db:code></db:para>
<db:para>Defines the interface name of the <db:link xlink:href="qcamerafeedbackcontrol.xml">QCameraFeedbackControl</db:link> class.</db:para>
</db:section>
</db:section>
</db:article>
