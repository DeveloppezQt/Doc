<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDesignerFormEditorInterface Class</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> class allows you to access Qt Designer's various components.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDesignerFormEditorInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += designer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:emphasis>Qt Designer</db:emphasis>'s current <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> object holds information about all <db:emphasis>Qt Designer</db:emphasis>'s components: The action editor, the object inspector, the property editor, the widget box, and the extension and form window managers. <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> contains a collection of functions that provides interfaces to all these components. They are typically used to query (and manipulate) the respective component. For example:</db:para>
<db:programlisting language="cpp">        QDesignerObjectInspectorInterface *objectInspector = 0;
        objectInspector = formEditor-&gt;objectInspector();

        QDesignerFormWindowManagerInterface *manager = 0;
        manager = formEditor-&gt;formWindowManager();

        objectInspector-&gt;setFormWindow(manager-&gt;formWindow(0));
</db:programlisting>
<db:para><db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> is not intended to be instantiated directly. A pointer to <db:emphasis>Qt Designer</db:emphasis>'s current <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> object (<db:code>formEditor</db:code> in the example above) is provided by the <db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">QDesignerCustomWidgetInterface::initialize</db:link>() function's parameter. When implementing a custom widget plugin, you must subclass the <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> to expose your plugin to <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:para><db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> also provides functions that can set the action editor, property editor, object inspector and widget box. These are only useful if you want to provide your own custom components.</db:para>
<db:para>If designer is embedded in another program, one could to provide its own settings manager. The manager is used by the components of <db:emphasis>Qt Designer</db:emphasis> to store/retrieve persistent configuration settings. The default manager uses <db:link xlink:href="qsettings.xml">QSettings</db:link> as the backend.</db:para>
<db:para>Finally, <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> provides the <db:link xlink:href="qdesignerformeditorinterface.xml#topLevel">topLevel</db:link>() function that returns <db:emphasis>Qt Designer</db:emphasis>'s top-level widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDesignerFormEditorInterface">
<db:title>[explicit] QDesignerFormEditorInterface::QDesignerFormEditorInterface(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> object with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QDesignerFormEditorInterface">
<db:title>[virtual noexcept] QDesignerFormEditorInterface::~QDesignerFormEditorInterface()</db:title>
<db:para>Destroys the <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> object.</db:para>
</db:section>
<db:section xml:id="actionEditor">
<db:title>QDesignerActionEditorInterface *QDesignerFormEditorInterface::actionEditor() const</db:title>
<db:para>Returns an interface to <db:emphasis>Qt Designer</db:emphasis>'s action editor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformeditorinterface.xml#setActionEditor">setActionEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extensionManager">
<db:title>QExtensionManager *QDesignerFormEditorInterface::extensionManager() const</db:title>
<db:para>Returns an interface to <db:emphasis>Qt Designer</db:emphasis>'s extension manager.</db:para>
</db:section>
<db:section xml:id="formWindowManager">
<db:title>QDesignerFormWindowManagerInterface *QDesignerFormEditorInterface::formWindowManager() const</db:title>
<db:para>Returns an interface to <db:emphasis>Qt Designer</db:emphasis>'s form window manager.</db:para>
</db:section>
<db:section xml:id="objectInspector">
<db:title>QDesignerObjectInspectorInterface *QDesignerFormEditorInterface::objectInspector() const</db:title>
<db:para>Returns an interface to <db:emphasis>Qt Designer</db:emphasis>'s object inspector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformeditorinterface.xml#setObjectInspector">setObjectInspector</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyEditor">
<db:title>QDesignerPropertyEditorInterface *QDesignerFormEditorInterface::propertyEditor() const</db:title>
<db:para>Returns an interface to <db:emphasis>Qt Designer</db:emphasis>'s property editor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformeditorinterface.xml#setPropertyEditor">setPropertyEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setActionEditor">
<db:title>void QDesignerFormEditorInterface::setActionEditor(QDesignerActionEditorInterface *<db:emphasis>actionEditor</db:emphasis>)</db:title>
<db:para>Sets <db:emphasis>Qt Designer</db:emphasis>'s action editor to be the specified <db:code role="parameter">actionEditor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformeditorinterface.xml#actionEditor">actionEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setObjectInspector">
<db:title>void QDesignerFormEditorInterface::setObjectInspector(QDesignerObjectInspectorInterface *<db:emphasis>objectInspector</db:emphasis>)</db:title>
<db:para>Sets <db:emphasis>Qt Designer</db:emphasis>'s object inspector to be the specified <db:code role="parameter">objectInspector</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformeditorinterface.xml#objectInspector">objectInspector</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPropertyEditor">
<db:title>void QDesignerFormEditorInterface::setPropertyEditor(QDesignerPropertyEditorInterface *<db:emphasis>propertyEditor</db:emphasis>)</db:title>
<db:para>Sets <db:emphasis>Qt Designer</db:emphasis>'s property editor to be the specified <db:code role="parameter">propertyEditor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformeditorinterface.xml#propertyEditor">propertyEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWidgetBox">
<db:title>void QDesignerFormEditorInterface::setWidgetBox(QDesignerWidgetBoxInterface *<db:emphasis>widgetBox</db:emphasis>)</db:title>
<db:para>Sets <db:emphasis>Qt Designer</db:emphasis>'s widget box to be the specified <db:code role="parameter">widgetBox</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformeditorinterface.xml#widgetBox">widgetBox</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="topLevel">
<db:title>QWidget *QDesignerFormEditorInterface::topLevel() const</db:title>
<db:para>Returns <db:emphasis>Qt Designer</db:emphasis>'s top-level widget.</db:para>
</db:section>
<db:section xml:id="widgetBox">
<db:title>QDesignerWidgetBoxInterface *QDesignerFormEditorInterface::widgetBox() const</db:title>
<db:para>Returns an interface to <db:emphasis>Qt Designer</db:emphasis>'s widget box.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformeditorinterface.xml#setWidgetBox">setWidgetBox</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
