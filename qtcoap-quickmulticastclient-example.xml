<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Quick CoAP Multicast Discovery</db:title>
<db:productname>QtCoap</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt CoAP Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using the CoAP client for a multicast resource discovery with a Qt Quick user interface.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/quickmulticastclient.webp"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:emphasis>Quick CoAP Multicast Discovery</db:emphasis> example demonstrates how to register QCoapClient as a QML type and use it in a Qt Quick application for CoAP multicast resource discovery.</db:para>
<db:note>
<db:para>Qt CoAP does not provide a QML API in its current version. However, you can make the C++ classes of the module available to QML as shown in this example.</db:para>
</db:note>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="setting-up-a-coap-server">
<db:title>Setting Up a CoAP Server</db:title>
<db:para>To run the example application, you first need to set up and start at least one CoAP server supporting multicast resource discovery. You have the following options:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Manually build and run CoAP servers using <db:link xlink:href="https://github.com/obgm/libcoap">libcoap</db:link>, <db:link xlink:href="https://github.com/eclipse/californium/">Californium</db:link>, or any other CoAP server implementation, which supports multicast and resource discovery features.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use the ready Docker image available at Docker Hub, which builds and starts CoAP server based on Californium's <db:link xlink:href="https://github.com/eclipse/californium/tree/2.0.0/demo-apps/cf-helloworld-server">multicast server example</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="using-the-docker-based-test-server">
<db:title>Using the Docker-based Test Server</db:title>
<db:para>The following command pulls the docker container for the CoAP server from the Docker Hub and starts it:</db:para>
<db:programlisting language="cpp" role="bad">docker run --name coap-multicast-server -d --rm --net=host tqtc/coap-multicast-test-server:californium-2.0.0
</db:programlisting>
<db:note>
<db:para>You can run more than one multicast CoAP servers (on the same host or other hosts in the network) by passing a different <db:code>--name</db:code> to the command above.</db:para>
</db:note>
<db:para>To terminate the docker container after usage, first obtain the container's ID by executing the <db:code>docker ps</db:code> command. The output will look like this:</db:para>
<db:programlisting language="cpp" role="bad">$ docker ps
CONTAINER ID   IMAGE
8b991fae7789   tqtc/coap-multicast-test-server:californium-2.0.0
</db:programlisting>
<db:para>After that, use this ID to stop the container:</db:para>
<db:programlisting language="cpp" role="bad">docker stop &amp;lt;container_id&amp;gt;
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="exposign-c-classes-to-qml">
<db:title>Exposign C++ Classes to QML</db:title>
<db:para>In this example, you need to expose the QCoapResource and QCoapClient classes, as well as the <db:link xlink:href="qtcoap.xml">QtCoap</db:link> namespace, to QML. To achieve this, create custom wrapper classes and use the special <db:link xlink:href="qtqml-cppintegration-definetypes.xml">registration macros</db:link>.</db:para>
<db:para>Create the <db:code>QmlCoapResource</db:code> class as a wrapper around QCoapResource. Use the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> macro to make several properties accessible from QML. The class does not need to be directly instantiable from QML, so use the <db:link xlink:href="qqmlengine.xml#QML_ANONYMOUS">QML_ANONYMOUS</db:link> macro to register it.</db:para>
<db:programlisting language="cpp">class QmlCoapResource : public QCoapResource
{
    Q_GADGET
    Q_PROPERTY(QString title READ title)
    Q_PROPERTY(QString host READ hostStr)
    Q_PROPERTY(QString path READ path)

    QML_ANONYMOUS
public:
    QmlCoapResource() : QCoapResource() {}
    QmlCoapResource(const QCoapResource &amp;amp;resource)
        : QCoapResource(resource) {}

    QString hostStr() const { return host().toString(); }
};
</db:programlisting>
<db:para>After that, create the <db:code>QmlCoapMulticastClient</db:code> class with the QCoapClient class as a base class. Use the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> macro to expose a custom property, and also create several <db:link xlink:href="qobject.xml#Q_INVOKABLE">Q_INVOKABLE</db:link> methods. Both the property and the invokable methods can be accessed from QML. Unlike <db:code>QmlCoapResource</db:code>, you want to be able to create this class from QML, so use the <db:link xlink:href="qqmlengine.xml#QML_NAMED_ELEMENT">QML_NAMED_ELEMENT</db:link> macro to register the class in QML.</db:para>
<db:programlisting language="cpp">class QmlCoapMulticastClient : public QCoapClient
{
    Q_OBJECT

    Q_PROPERTY(bool isDiscovering READ isDiscovering NOTIFY isDiscoveringChanged)

    QML_NAMED_ELEMENT(CoapMulticastClient)
public:
    QmlCoapMulticastClient(QObject *parent = nullptr);

    Q_INVOKABLE void discover(const QString &amp;amp;host, int port, const QString &amp;amp;discoveryPath);
    Q_INVOKABLE void discover(QtCoap::MulticastGroup group, int port, const QString &amp;amp;discoveryPath);
    Q_INVOKABLE void stopDiscovery();

    bool isDiscovering() const;

Q_SIGNALS:
    void discovered(const QmlCoapResource &amp;amp;resource);
    void finished(int error);
    // The bool parameter is not provided, because the signal is only used by
    // the QML property system, and it does not use the passed value anyway.
    void isDiscoveringChanged();

public slots:
    void onDiscovered(QCoapResourceDiscoveryReply *reply, const QList&amp;lt;QCoapResource&amp;gt; &amp;amp;resources);

private:
    QCoapResourceDiscoveryReply *m_reply = nullptr;
};
</db:programlisting>
<db:para>Finally, register the <db:link xlink:href="qtcoap.xml">QtCoap</db:link> namespace, so that you can use the enums provided there:</db:para>
<db:programlisting language="cpp">namespace QCoapForeignNamespace
{
    Q_NAMESPACE
    QML_FOREIGN_NAMESPACE(QtCoap)
    QML_NAMED_ELEMENT(QtCoap)
}
</db:programlisting>
</db:section>
<db:section xml:id="adjusting-build-files">
<db:title>Adjusting Build Files</db:title>
<db:para>To make the custom types available from QML, update the build system files accordingly.</db:para>
<db:section xml:id="cmake-build">
<db:title>CMake Build</db:title>
<db:para>For a CMake-based build, add the following to the <db:code>CMakeLists.txt</db:code>:</db:para>
<db:programlisting language="cpp">qt_add_qml_module(quickmulticastclient
    URI CoapClientModule
    VERSION 1.0
    SOURCES
        qmlcoapmulticastclient.cpp qmlcoapmulticastclient.h
    QML_FILES
        Main.qml
)
</db:programlisting>
</db:section>
<db:section xml:id="qmake-build">
<db:title>qmake Build</db:title>
<db:para>For a qmake build, modify the <db:code>quickmulticastclient.pro</db:code> file in the following way:</db:para>
<db:programlisting language="cpp">CONFIG += qmltypes
QML_IMPORT_NAME = CoapClientModule
QML_IMPORT_MAJOR_VERSION = 1
    ...
qml_resources.files = \
    qmldir \
    Main.qml

qml_resources.prefix = /qt/qml/CoapClientModule

RESOURCES += qml_resources
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="using-new-qml-types">
<db:title>Using New QML Types</db:title>
<db:para>Now, when the C++ classes are properly exposed to QML, you can use the new types:</db:para>
<db:programlisting language="qml">CoapMulticastClient {
    id: client
    onDiscovered: (resource) =&amp;gt; { root.addResource(resource) }

    onFinished: (error) =&amp;gt; {
        statusLabel.text = (error === QtCoap.Error.Ok)
                ? qsTr(&quot;Finished resource discovery.&quot;)
                : qsTr(&quot;Resource discovery failed with error code: %1&quot;).arg(error)
    }
}
</db:programlisting>
<db:para>The <db:code>QmlCoapMulticastClient::finished()</db:code> signal triggers the <db:code>onFinished</db:code> signal handler, to show the request's status in the UI. Note that the example does not use QCoapClient's signals directly, because both <db:link xlink:href="">error()</db:link> and <db:link xlink:href="">finished()</db:link> signals take a QCoapReply as a parameter (which is not exposed to QML), and the example only requires the error code.</db:para>
<db:para>The <db:code>QmlCoapMulticastClient</db:code>'s constructor forwards the QCoapClient's signals to <db:code>QmlCoapMulticastClient::finished()</db:code> signal:</db:para>
<db:programlisting language="cpp">QmlCoapMulticastClient::QmlCoapMulticastClient(QObject *parent)
    : QCoapClient(QtCoap::SecurityMode::NoSecurity, parent)
{
    connect(this, &amp;amp;QCoapClient::finished, this,
            [this](QCoapReply *reply) {
                if (reply) {
                    emit finished(static_cast&amp;lt;int&amp;gt;(reply-&amp;gt;errorReceived()));
                    reply-&amp;gt;deleteLater();
                    if (m_reply == reply) {
                        m_reply = nullptr;
                        emit isDiscoveringChanged();
                    }
                } else {
                    qCWarning(lcCoapClient, &quot;Something went wrong, received a null reply&quot;);
                }
            });

    connect(this, &amp;amp;QCoapClient::error, this,
            [this](QCoapReply *, QtCoap::Error err) {
                emit finished(static_cast&amp;lt;int&amp;gt;(err));
            });
}
</db:programlisting>
<db:para>When the <db:guilabel>Discover</db:guilabel> button is pressed, one of the overloaded <db:code>discover()</db:code> methods is invoked, based on the selected multicast group:</db:para>
<db:programlisting language="qml">Button {
    id: discoverButton
    text: client.isDiscovering ? qsTr(&quot;Stop Discovery&quot;) : qsTr(&quot;Discover&quot;)
    Layout.preferredWidth: 100

    onClicked: {
        if (client.isDiscovering) {
            client.stopDiscovery()
        } else {
            var currentGroup = groupComboBox.model.get(groupComboBox.currentIndex).value;

            var path = &quot;&quot;;
            if (currentGroup !== - 1) {
                client.discover(currentGroup, parseInt(portField.text),
                                discoveryPathField.text);
                path = groupComboBox.currentText;
            } else {
                client.discover(customGroupField.text, parseInt(portField.text),
                                discoveryPathField.text);
                path = customGroupField.text + discoveryPathField.text;
            }
            statusLabel.text = qsTr(&quot;Discovering resources at %1...&quot;).arg(path);
        }
    }
}
</db:programlisting>
<db:para>This overload is called when a custom multicast group or a host address is selected:</db:para>
<db:programlisting language="cpp">void QmlCoapMulticastClient::discover(const QString &amp;amp;host, int port, const QString &amp;amp;discoveryPath)
{
    QUrl url;
    url.setHost(host);
    url.setPort(port);

    m_reply = QCoapClient::discover(url, discoveryPath);
    if (m_reply) {
        connect(m_reply, &amp;amp;QCoapResourceDiscoveryReply::discovered,
                this, &amp;amp;QmlCoapMulticastClient::onDiscovered);
        emit isDiscoveringChanged();
    } else {
        qCWarning(lcCoapClient, &quot;Discovery request failed.&quot;);
    }
}
</db:programlisting>
<db:para>And this overload is called when one of the suggested multicast groups is selected in the UI:</db:para>
<db:programlisting language="cpp">void QmlCoapMulticastClient::discover(QtCoap::MulticastGroup group, int port,
                                      const QString &amp;amp;discoveryPath)
{
    m_reply = QCoapClient::discover(group, port, discoveryPath);
    if (m_reply) {
        connect(m_reply, &amp;amp;QCoapResourceDiscoveryReply::discovered,
                this, &amp;amp;QmlCoapMulticastClient::onDiscovered);
        emit isDiscoveringChanged();
    } else {
        qCWarning(lcCoapClient, &quot;Discovery request failed.&quot;);
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="">QCoapResourceDiscoveryReply::discovered()</db:link> signal delivers a list of QCoapResources, which is not a QML type. To make the resources available in QML, forward each resource in the list to the <db:code>QmlCoapMulticastClient::discovered()</db:code> signal, which takes a <db:code>QmlCoapResource</db:code> instead:</db:para>
<db:programlisting language="cpp">void QmlCoapMulticastClient::onDiscovered(QCoapResourceDiscoveryReply *reply,
                                          const QList&amp;lt;QCoapResource&amp;gt; &amp;amp;resources)
{
    Q_UNUSED(reply)
    for (const auto &amp;amp;resource : resources)
        emit discovered(resource);
}
</db:programlisting>
<db:para>The discovered resources are added to the <db:code>resourceModel</db:code> of the list view in the UI:</db:para>
<db:programlisting language="qml">function addResource(resource) {
    resourceModel.insert(0, {&quot;host&quot; : resource.host,
                             &quot;path&quot; : resource.path,
                             &quot;title&quot; : resource.title})
}
</db:programlisting>
<db:para>While the discovery is in progress, press the <db:guilabel>Stop Discovery</db:guilabel> button to stop the discovery. Internally it is done by aborting the current request:</db:para>
<db:programlisting language="cpp">void QmlCoapMulticastClient::stopDiscovery()
{
    if (m_reply)
        m_reply-&amp;gt;abortRequest();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="quickmulticastclient/CMakeLists.txt">quickmulticastclient/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quickmulticastclient/Main.qml">quickmulticastclient/Main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quickmulticastclient/main.cpp">quickmulticastclient/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quickmulticastclient/qmlcoapmulticastclient.cpp">quickmulticastclient/qmlcoapmulticastclient.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quickmulticastclient/qmlcoapmulticastclient.h">quickmulticastclient/qmlcoapmulticastclient.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quickmulticastclient/qmldir">quickmulticastclient/qmldir</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quickmulticastclient/quickmulticastclient.pro">quickmulticastclient/quickmulticastclient.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
