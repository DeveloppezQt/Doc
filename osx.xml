<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for macOS</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Platform support for macOS.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>macOS (previously known as OS X or Mac OS X) is a UNIX platform and behaves similarly to other Unix-like platforms. The main difference is that X11 is not used as the windowing system. Instead, macOS uses its own native windowing system that is accessible through the Cocoa API. Application development on macOS is done using Xcode, which is available from <db:link xlink:href="https://developer.apple.com/xcode/">https://developer.apple.com/xcode/</db:link>.</db:para>
<db:section xml:id="downloading-and-installing-qt">
<db:title>Downloading and Installing Qt</db:title>
<db:para>There are two ways to install Qt:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>through the <db:emphasis>Qt Installers</db:emphasis> - downloads and installs Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>through the <db:emphasis>Qt sources</db:emphasis>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>You can download the Qt 5 installers and sources from the <db:link xlink:href="http://qt.io/download">Downloads</db:link> page. For more information, visit the <db:link xlink:href="gettingstarted.xml">Getting Started with Qt</db:link> page.</db:para>
<db:section xml:id="building-qt-5-from-source">
<db:title>Building Qt 5 from Source</db:title>
<db:para>Below, you will find more information about building Qt from source.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="osx-building.xml">Qt for macOS - Building from Source</db:link> - building and installing from source</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Qt 5 uses Cocoa, therefore, building for Carbon is not possible.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="macos-versions">
<db:title>macOS Versions</db:title>
<db:para>See <db:link xlink:href="supported-platforms.xml">Supported Platforms</db:link> for the list of macOS versions supported by Qt.</db:para>
<db:para>Qt can be built for either x86 or x86_64. 64-bit is used by default. To select a 32-bit build, use the macx-clang-32 or macx-g++32 mkspec. This is selectable at configure time:</db:para>
<db:programlisting language="cpp">./configure -platform macx-clang-32
</db:programlisting>
<db:para>The Qt build system does not support building unversal binaries directly. Instead, use the lipo tool to glue two Qt builds together.</db:para>
<db:note>
<db:para>Qt 5 does not support OS X on PowerPC.</db:para>
</db:note>
<db:note>
<db:para>Static builds are not tested.</db:para>
</db:note>
</db:section>
<db:section xml:id="additional-command-line-options">
<db:title>Additional Command-Line Options</db:title>
<db:para>On the command-line, applications can be built using qmake and make. Optionally, qmake can generate project files for Xcode with -spec macx-xcode. If you are using the binary package, qmake generates Xcode projects by default; use -spec macx-gcc to generate makefiles. For example:</db:para>
<db:programlisting language="cpp">qmake -spec macx-xcode project.pro
</db:programlisting>
<db:para>Configuring with -spec macx-xcode generates an Xcode project file from project.pro. With <db:link xlink:href="qmake-manual.xml">qmake</db:link> you do not have to worry about rules for Qt's preprocessors (<db:link xlink:href="moc.xml">moc</db:link> and <db:link xlink:href="uic.xml">uic</db:link>) since <db:link xlink:href="qmake-manual.xml">qmake</db:link> automatically handles them and ensures that everything necessary is linked into your application.</db:para>
<db:para>Qt does not entirely interact with the development environment (for example plugins to set a file to &quot;mocable&quot; from within the Xcode user interface).</db:para>
<db:para>The result of the build process is an application bundle, which is a directory structure that contains the actual application executable. The application can be launched by double-clicking it in Finder, or by referring directly to its executable from the command line, for example, myApp.app/Contents/MacOS/myApp.</db:para>
<db:para>If you wish to have a command-line tool that does not use the GUI for example, moc, uic or ls, you can tell qmake to disable bundle creation from the CONFIG variable in the project file:</db:para>
<db:programlisting language="cpp">CONFIG -= app_bundle
</db:programlisting>
</db:section>
<db:section xml:id="deploying-applications-on-macos">
<db:title>Deploying Applications on macOS</db:title>
<db:para>In general, Qt supports building on one macOS version and deploying to earlier or later macOS versions. The recommended way is to build on the latest version and deploy to an earlier macOS version.</db:para>
<db:para>macOS applications are typically deployed as self-contained application bundles. The application bundle contains the application executable as well as dependencies such as the Qt libraries, plugins, translations and other resources you may need. Third party libraries like Qt are normally not installed system-wide; each application provides its own copy.</db:para>
<db:para>A common way to distribute applications is to provide a compressed disk image (.dmg file) that the user can mount in Finder. The deployment tool, macdeployqt (available from the macOS installers), can be used to create the self-contained bundles, and optionally also create a .dmg archive. Applications can also be distributed through the Mac App Store. Qt 5 aims to stay within the app store sandbox rules. macdeployqt (bin/macdeployqt) can be used as a starting point for app store deployment.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="osx-deployment.xml">Qt for macOS - Deployment</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="macos-issues">
<db:title>macOS Issues</db:title>
<db:para>The page below covers specific issues and recommendations for creating macOS applications.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="osx-issues.xml">Qt for macOS - Specific Issues</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="where-to-go-from-here">
<db:title>Where to Go from Here</db:title>
<db:para>We invite you to explore the rest of Qt. We prepared overviews to help you decide which APIs to use and our examples demonstrate how to use our API.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="overviews-main.xml">Qt Overviews</db:link> - list of topics about application development</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtexamplesandtutorials.xml">Examples and Tutorials</db:link> - code samples and tutorials</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="reference-overview.xml">Qt Reference Pages</db:link> - a listing of C++ and QML APIs</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Qt's vibrant and active community site, <db:link xlink:href="http://qt.io">http://qt.io</db:link> houses a wiki, a forum, and additional learning guides and presentations.</db:para>
</db:section>
</db:article>
