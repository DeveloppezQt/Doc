<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Container Extension Example</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>Creating a custom multi-page plugin for <db:emphasis>Qt Designer</db:emphasis>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QComboBox&amp;gt;
#include &amp;lt;QVBoxLayout&amp;gt;
#include &amp;lt;QStackedWidget&amp;gt;

#include &quot;multipagewidget.h&quot;

MultiPageWidget::MultiPageWidget(QWidget *parent)
    : QWidget(parent)
    , stackWidget(new QStackedWidget)
    , comboBox(new QComboBox)
{
    comboBox-&amp;gt;setObjectName(QStringLiteral(&quot;__qt__passive_comboBox&quot;));

    connect(comboBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QComboBox::activated),
            this, &amp;amp;MultiPageWidget::setCurrentIndex);

    QVBoxLayout *layout = new QVBoxLayout(this);
    layout-&amp;gt;addWidget(comboBox);
    layout-&amp;gt;addWidget(stackWidget);
}

QSize MultiPageWidget::sizeHint() const
{
    return QSize(200, 150);
}

void MultiPageWidget::addPage(QWidget *page)
{
    insertPage(count(), page);
}

void MultiPageWidget::removePage(int index)
{
    QWidget *widget = stackWidget-&amp;gt;widget(index);
    stackWidget-&amp;gt;removeWidget(widget);

    comboBox-&amp;gt;removeItem(index);
}

int MultiPageWidget::count() const
{
    return stackWidget-&amp;gt;count();
}

int MultiPageWidget::currentIndex() const
{
    return stackWidget-&amp;gt;currentIndex();
}

void MultiPageWidget::insertPage(int index, QWidget *page)
{
    page-&amp;gt;setParent(stackWidget);

    stackWidget-&amp;gt;insertWidget(index, page);

    QString title = page-&amp;gt;windowTitle();
    if (title.isEmpty()) {
        title = tr(&quot;Page %1&quot;).arg(comboBox-&amp;gt;count() + 1);
        page-&amp;gt;setWindowTitle(title);
    }
    connect(page, &amp;amp;QWidget::windowTitleChanged,
            this, &amp;amp;MultiPageWidget::pageWindowTitleChanged);
    comboBox-&amp;gt;insertItem(index, title);
}

void MultiPageWidget::setCurrentIndex(int index)
{
    if (index != currentIndex()) {
        stackWidget-&amp;gt;setCurrentIndex(index);
        comboBox-&amp;gt;setCurrentIndex(index);
        emit currentIndexChanged(index);
    }
}

void MultiPageWidget::pageWindowTitleChanged()
{
    QWidget *page = qobject_cast&amp;lt;QWidget *&amp;gt;(sender());
    const int index = stackWidget-&amp;gt;indexOf(page);
    comboBox-&amp;gt;setItemText(index, page-&amp;gt;windowTitle());
}

QWidget* MultiPageWidget::widget(int index)
{
    return stackWidget-&amp;gt;widget(index);
}

QString MultiPageWidget::pageTitle() const
{
    if (const QWidget *currentWidget = stackWidget-&amp;gt;currentWidget())
        return currentWidget-&amp;gt;windowTitle();
    return QString();
}

void MultiPageWidget::setPageTitle(QString const &amp;amp;newTitle)
{
    if (QWidget *currentWidget = stackWidget-&amp;gt;currentWidget())
        currentWidget-&amp;gt;setWindowTitle(newTitle);
    emit pageTitleChanged(newTitle);
}

</db:programlisting>
</db:article>
