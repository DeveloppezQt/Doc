<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Text Object Example</db:title>
<db:productname>QtSvg</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt SVG Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt SVG Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Text Object example shows how to insert an SVG file into a QTextDocument.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/textobject-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A QTextDocument consists of a hierarchy of elements, such as text blocks and frames. A text object describes the structure or format of one or more of these elements. For instance, images imported from HTML are implemented using text objects. Text objects are used by the document's layout to lay out and render (paint) the document. Each object knows how to paint the elements they govern, and calculates their size.</db:para>
<db:para>To be able to insert an SVG image into a text document, we create a text object, and implement painting for that object. This object can then be set on a QTextCharFormat. We also register the text object with the layout of the document, enabling it to draw QTextCharFormats governed by our text object. We can summarize the procedure with the following steps:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Implement the text object.</db:para>
</db:listitem>
<db:listitem>
<db:para>Register the text object with the layout of the text document.</db:para>
</db:listitem>
<db:listitem>
<db:para>Set the text object on a QTextCharFormat.</db:para>
</db:listitem>
<db:listitem>
<db:para>Insert a QChar::ObjectReplacementCharacter with that text char format into the document.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The example consists of the following classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>SvgTextObject</db:code> implements the text object.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Window</db:code> shows a QTextEdit into which SVG images can be inserted.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="svgtextobject-class-definition">
<db:title>SvgTextObject Class Definition</db:title>
<db:para>Let's take a look at the header file of <db:code>SvgTextObject</db:code>:</db:para>
<db:programlisting language="cpp">class SvgTextObject : public QObject, public QTextObjectInterface
{
    Q_OBJECT
    Q_INTERFACES(QTextObjectInterface)

public:
    QSizeF intrinsicSize(QTextDocument *doc, int posInDocument,
                         const QTextFormat &amp;amp;format) override;
    void drawObject(QPainter *painter, const QRectF &amp;amp;rect, QTextDocument *doc,
                    int posInDocument, const QTextFormat &amp;amp;format) override;
};
</db:programlisting>
<db:para>A text object is a QObject that implements QTextObjectInterface. Note that the first class inherited must be QObject, and that you must use <db:link xlink:href="qobject-proxy.xml#Q_INTERFACES">Q_INTERFACES</db:link> to let Qt know that your class implements QTextObjectInterface.</db:para>
<db:para>The document layout keeps a collection of text objects stored as <db:link xlink:href="qobject-proxy.xml">QObject</db:link>s, each of which has an associated object type. The layout casts the QObject for the associated object type into the QTextObjectInterface.</db:para>
<db:para>The <db:link xlink:href="">intrinsicSize()</db:link> and <db:link xlink:href="">drawObject()</db:link> functions are then used to calculate the size of the text object and draw it.</db:para>
</db:section>
<db:section xml:id="svgtextobject-class-implementation">
<db:title>SvgTextObject Class Implementation</db:title>
<db:para>We start of by taking a look at the <db:link xlink:href="">intrinsicSize()</db:link> function:</db:para>
<db:programlisting language="cpp">QSizeF SvgTextObject::intrinsicSize(QTextDocument * /*doc*/, int /*posInDocument*/,
                                    const QTextFormat &amp;amp;format)
{
    QImage bufferedImage = qvariant_cast&amp;lt;QImage&amp;gt;(format.property(Window::SvgData));
    QSize size = bufferedImage.size();

    if (size.height() &amp;gt; 25)
        size *= 25.0 / (double) size.height();

    return QSizeF(size);
}
</db:programlisting>
<db:para><db:code>intrinsicSize()</db:code> is called by the layout to calculate the size of the text object. Notice that we have drawn the SVG image on a QImage. This is because SVG rendering is quite expensive. The example would lag seriously for large images if we drew them with a QSvgRenderer each time.</db:para>
<db:programlisting language="cpp">void SvgTextObject::drawObject(QPainter *painter, const QRectF &amp;amp;rect,
                               QTextDocument * /*doc*/, int /*posInDocument*/,
                               const QTextFormat &amp;amp;format)
{
    QImage bufferedImage = qvariant_cast&amp;lt;QImage&amp;gt;(format.property(Window::SvgData));

    painter-&amp;gt;drawImage(rect, bufferedImage);
}
</db:programlisting>
<db:para>In <db:code>drawObject()</db:code>, we paint the SVG image using the QPainter provided by the layout.</db:para>
</db:section>
<db:section xml:id="window-class-definition">
<db:title>Window Class Definition</db:title>
<db:para>The <db:code>Window</db:code> class is a self-contained window that has a QTextEdit in which SVG images can be inserted.</db:para>
<db:programlisting language="cpp">class Window : public QWidget
{
    Q_OBJECT

public:
    enum { SvgTextFormat = QTextFormat::UserObject + 1 };
    enum SvgProperties { SvgData = 1 };

    Window();

private slots:
    void insertTextObject();

private:
    void setupTextObject();
    void setupGui();

private:
    QTextEdit *textEdit;
    QLabel *fileNameLabel;
    QLineEdit *fileNameLineEdit;
    QPushButton *insertTextObjectButton;
};
</db:programlisting>
<db:para>The <db:code>insertTextObject()</db:code> slot inserts an SVG image at the current cursor position, while <db:code>setupTextObject()</db:code> creates and registers the SvgTextObject with the layout of the text edit's document.</db:para>
<db:para>The constructor simply calls <db:code>setupTextObject()</db:code> and <db:code>setupGui()</db:code>, which creates and lays out the widgets of the <db:code>Window</db:code>.</db:para>
</db:section>
<db:section xml:id="window-class-implementation">
<db:title>Window Class Implementation</db:title>
<db:para>We will now take a closer look at the functions that are relevant to our text object, starting with the <db:code>setupTextObject()</db:code> function.</db:para>
<db:programlisting language="cpp">void Window::setupTextObject()
{
    QObject *svgInterface = new SvgTextObject;
    svgInterface-&amp;gt;setParent(this);
    textEdit-&amp;gt;document()-&amp;gt;documentLayout()-&amp;gt;registerHandler(SvgTextFormat, svgInterface);
}
</db:programlisting>
<db:para><db:code>SvgTextFormat</db:code>'s value is the number of our object type. It is used to identify object types by the document layout.</db:para>
<db:para>Note that we only create one SvgTextObject instance; it will be used for all QTextCharFormat's with the <db:code>SvgTextFormat</db:code> object type.</db:para>
<db:para>Let's move on to the <db:code>insertTextObject()</db:code> function:</db:para>
<db:programlisting language="cpp">void Window::insertTextObject()
{
    QString fileName = fileNameLineEdit-&amp;gt;text();
    QFile file(fileName);
    if (!file.open(QIODevice::ReadOnly)) {
        QMessageBox::warning(this, tr(&quot;Error Opening File&quot;),
                             tr(&quot;Could not open '%1'&quot;).arg(fileName));
    }

    QByteArray svgData = file.readAll();
</db:programlisting>
<db:para>First, the <db:code>.svg</db:code> file is opened and its contents are read into the <db:code>svgData</db:code> array.</db:para>
<db:programlisting language="cpp">    QTextCharFormat svgCharFormat;
    svgCharFormat.setObjectType(SvgTextFormat);
    QSvgRenderer renderer(svgData);

    QImage svgBufferImage(renderer.defaultSize(), QImage::Format_ARGB32);
    QPainter painter(&amp;amp;svgBufferImage);
    renderer.render(&amp;amp;painter, svgBufferImage.rect());

    svgCharFormat.setProperty(SvgData, svgBufferImage);

    QTextCursor cursor = textEdit-&amp;gt;textCursor();
    cursor.insertText(QString(QChar::ObjectReplacementCharacter), svgCharFormat);
    textEdit-&amp;gt;setTextCursor(cursor);
}
</db:programlisting>
<db:para>To speed things up, we buffer the SVG image in a QImage. We use <db:link xlink:href="">setProperty()</db:link> to store the QImage in the in the QTextCharFormat. We can retrieve it later with <db:link xlink:href="">property()</db:link>.</db:para>
<db:para>We insert the char format in the standard way - using a QTextCursor. Notice that we use the special QChar ObjectReplacementCharacter.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtsvg.git/tree/examples/svg/richtext/textobject?h=5.13">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
