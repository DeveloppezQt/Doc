<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Chapter 5: Writing a Benchmark</db:title>
<db:productname>QtTestLib</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Test Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qttestlib-tutorial4-example.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Chapter 4"/></db:extendedlink>
<db:abstract>
<db:para>Qt Test Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the test suite of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/
// This file contains benchmarks for comparing QVector against std::vector

#include &lt;QtCore&gt;
#include &lt;QVector&gt;
#include &lt;vector&gt;

#include &lt;qtest.h&gt;

template &lt;typename T&gt; // T is the item type
class UseCases {
public:
    virtual ~UseCases() {}

    // Use case: Insert \a size items into the vector.
    virtual void insert(int size) = 0;

    // Use case: Lookup \a size items from the vector.
    virtual void lookup(int size) = 0;
};

template &lt;typename T&gt;
T * f(T *ts) // dummy function to prevent code from being optimized away by the compiler
{
    return ts;
}

// This subclass implements the use cases using QVector as efficiently as possible.
template &lt;typename T&gt;
class UseCases_QVector : public UseCases&lt;T&gt;
{
    void insert(int size)
    {
        QVector&lt;T&gt; v;
        T t;
        QBENCHMARK {
            for (int i = 0; i &lt; size; ++i)
                v.append(t);
        }
    }

    void lookup(int size)
    {
        QVector&lt;T&gt; v;

        T t;
        for (int i = 0; i &lt; size; ++i)
            v.append(t);

        T *ts = new T[size];
        QBENCHMARK {
            for (int i = 0; i &lt; size; ++i)
                ts[i] = v.value(i);
        }
        f&lt;T&gt;(ts);
        delete[] ts;
    }
};

// This subclass implements the use cases using std::vector as efficiently as possible.
template &lt;typename T&gt;
class UseCases_stdvector : public UseCases&lt;T&gt;
{
    void insert(int size)
    {
        std::vector&lt;T&gt; v;
        T t;
        QBENCHMARK {
            for (int i = 0; i &lt; size; ++i)
                v.push_back(t);
        }
    }

    void lookup(int size)
    {
        std::vector&lt;T&gt; v;

        T t;
        for (int i = 0; i &lt; size; ++i)
            v.push_back(t);

        T *ts = new T[size];
        QBENCHMARK {
            for (int i = 0; i &lt; size; ++i)
                ts[i] = v[i];
        }
        f&lt;T&gt;(ts);
        delete[] ts;
    }
};

struct Large { // A &quot;large&quot; item type
    int x[1000];
};

// Symbian devices typically have limited memory
#  define LARGE_MAX_SIZE 20000

class tst_vector_vs_std : public QObject
{
    Q_OBJECT
public:
    tst_vector_vs_std()
    {
        useCases_QVector_int = new UseCases_QVector&lt;int&gt;;
        useCases_stdvector_int = new UseCases_stdvector&lt;int&gt;;

        useCases_QVector_Large = new UseCases_QVector&lt;Large&gt;;
        useCases_stdvector_Large = new UseCases_stdvector&lt;Large&gt;;
    }

private:
    UseCases&lt;int&gt; *useCases_QVector_int;
    UseCases&lt;int&gt; *useCases_stdvector_int;
    UseCases&lt;Large&gt; *useCases_QVector_Large;
    UseCases&lt;Large&gt; *useCases_stdvector_Large;

private slots:
    void insert_int_data();
    void insert_int();
    void insert_Large_data();
    void insert_Large();
    void lookup_int_data();
    void lookup_int();
    void lookup_Large_data();
    void lookup_Large();
};

void tst_vector_vs_std::insert_int_data()
{
    QTest::addColumn&lt;bool&gt;(&quot;useStd&quot;);
    QTest::addColumn&lt;int&gt;(&quot;size&quot;);

    for (int size = 10; size &lt; 20000; size += 100) {
        const QByteArray sizeString = QByteArray::number(size);
        QTest::newRow((&quot;std::vector-int--&quot; + sizeString).constData()) &lt;&lt; true &lt;&lt; size;
        QTest::newRow((&quot;QVector-int--&quot; + sizeString).constData()) &lt;&lt; false &lt;&lt; size;
    }
}

void tst_vector_vs_std::insert_int()
{
    QFETCH(bool, useStd);
    QFETCH(int, size);

    if (useStd)
        useCases_stdvector_int-&gt;insert(size);
    else
        useCases_QVector_int-&gt;insert(size);
}

void tst_vector_vs_std::insert_Large_data()
{
    QTest::addColumn&lt;bool&gt;(&quot;useStd&quot;);
    QTest::addColumn&lt;int&gt;(&quot;size&quot;);

    for (int size = 10; size &lt; LARGE_MAX_SIZE; size += 100) {
        const QByteArray sizeString = QByteArray::number(size);
        QTest::newRow((&quot;std::vector-Large--&quot; + sizeString).constData()) &lt;&lt; true &lt;&lt; size;
        QTest::newRow((&quot;QVector-Large--&quot; + sizeString).constData()) &lt;&lt; false &lt;&lt; size;
    }
}

void tst_vector_vs_std::insert_Large()
{
    QFETCH(bool, useStd);
    QFETCH(int, size);

    if (useStd)
        useCases_stdvector_Large-&gt;insert(size);
    else
        useCases_QVector_Large-&gt;insert(size);
}

void tst_vector_vs_std::lookup_int_data()
{
    QTest::addColumn&lt;bool&gt;(&quot;useStd&quot;);
    QTest::addColumn&lt;int&gt;(&quot;size&quot;);

    for (int size = 10; size &lt; 20000; size += 100) {
        const QByteArray sizeString = QByteArray::number(size);
        QTest::newRow((&quot;std::vector-int--&quot; + sizeString).constData()) &lt;&lt; true &lt;&lt; size;
        QTest::newRow((&quot;QVector-int--&quot; + sizeString).constData()) &lt;&lt; false &lt;&lt; size;
    }
}

void tst_vector_vs_std::lookup_int()
{
    QFETCH(bool, useStd);
    QFETCH(int, size);

    if (useStd)
        useCases_stdvector_int-&gt;lookup(size); // Create a std::vector and run the benchmark.
    else
        useCases_QVector_int-&gt;lookup(size); // Create a QVector and run the benchmark.
}

void tst_vector_vs_std::lookup_Large_data()
{
    QTest::addColumn&lt;bool&gt;(&quot;useStd&quot;);
    QTest::addColumn&lt;int&gt;(&quot;size&quot;);

    for (int size = 10; size &lt; LARGE_MAX_SIZE; size += 100) {
        const QByteArray sizeString = QByteArray::number(size);
        QTest::newRow((&quot;std::vector-Large--&quot; + sizeString).constData()) &lt;&lt; true &lt;&lt; size;
        QTest::newRow((&quot;QVector-Large--&quot; + sizeString).constData()) &lt;&lt; false &lt;&lt; size;
    }
}

void tst_vector_vs_std::lookup_Large()
{
    QFETCH(bool, useStd);
    QFETCH(int, size);

    if (useStd)
        useCases_stdvector_Large-&gt;lookup(size);
    else
        useCases_QVector_Large-&gt;lookup(size);
}

QTEST_MAIN(tst_vector_vs_std)
#include &quot;main.moc&quot;

</db:programlisting>
</db:article>
