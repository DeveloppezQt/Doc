<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoCodingManagerEngine Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeocodingmanagerengine.xml">QGeoCodingManagerEngine</db:link> class provides an interface and convenience methods to implementers of <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> plugins who want to provide support for geocoding operations.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoCodingManagerEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoCodingManagerEngine is part of <db:simplelist><db:member>QtLocation-impl</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In the default implementation, supportsGeocoding() and supportsReverseGeocoding() returns false while <db:link xlink:href="qgeocodingmanagerengine.xml#geocode">geocode</db:link>() and <db:link xlink:href="qgeocodingmanagerengine.xml#reverseGeocode">reverseGeocode</db:link>() cause <db:link xlink:href="qgeocodereply.xml#Error-enum">QGeoCodeReply::UnsupportedOptionError</db:link> to occur.</db:para>
<db:para>If the service provider supports geocoding the subclass should provide an implementation of <db:link xlink:href="qgeocodingmanagerengine.xml#geocode">geocode</db:link>() and call setSupportsGeocoding(true) at some point in time before <db:link xlink:href="qgeocodingmanagerengine.xml#geocode">geocode</db:link>() is called.</db:para>
<db:para>Similarly, if the service provider supports reverse geocoding the subclass should provide an implementation <db:link xlink:href="qgeocodingmanagerengine.xml#reverseGeocode">reverseGeocode</db:link>() and call setSupportsReverseGeocoding(true) at some point in time before <db:link xlink:href="qgeocodingmanagerengine.xml#reverseGeocode">reverseGeocode</db:link>() is called.</db:para>
<db:para>A subclass of <db:link xlink:href="qgeocodingmanagerengine.xml">QGeoCodingManagerEngine</db:link> will often make use of a subclass fo <db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link> internally, in order to add any engine-specific data (such as a <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> object for network-based services) to the <db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link> instances used by the engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodingmanager.xml">QGeoCodingManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoCodingManagerEngine">
<db:title>[explicit] QGeoCodingManagerEngine::QGeoCodingManagerEngine(const QVariantMap &amp;<db:emphasis>parameters</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoCodingManagerEngine</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCodingManagerEngine(const QVariantMap &amp;parameters, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new engine with the specified <db:code role="parameter">parent</db:code>, using <db:code role="parameter">parameters</db:code> to pass any implementation specific data to the engine.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoCodingManagerEngine">
<db:title>[virtual] QGeoCodingManagerEngine::~QGeoCodingManagerEngine()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGeoCodingManagerEngine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGeoCodingManagerEngine()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this engine.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>void QGeoCodingManagerEngine::error(QGeoCodeReply *<db:emphasis>reply</db:emphasis>, QGeoCodeReply::Error <db:emphasis>error</db:emphasis>, QString <db:emphasis>errorString</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>error</db:methodname>
<db:methodparam>
<db:type>QGeoCodeReply *</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGeoCodeReply::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QString</db:type>
<db:parameter>errorString</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void error(QGeoCodeReply *reply, QGeoCodeReply::Error error, QString errorString)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an error has been detected in the processing of <db:code role="parameter">reply</db:code>. The <db:link xlink:href="qgeocodingmanagerengine.xml#finished">QGeoCodingManagerEngine::finished</db:link>() signal will probably follow.</db:para>
<db:para>The error will be described by the error code <db:code role="parameter">error</db:code>. If <db:code role="parameter">errorString</db:code> is not empty it will contain a textual description of the error.</db:para>
<db:para>This signal and <db:link xlink:href="qgeocodereply.xml#error">QGeoCodeReply::error</db:link>() will be emitted at the same time.</db:para>
<db:note>
<db:para>Do not delete the <db:code role="parameter">reply</db:code> object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="finished">
<db:title>void QGeoCodingManagerEngine::finished(QGeoCodeReply *<db:emphasis>reply</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>finished</db:methodname>
<db:methodparam>
<db:type>QGeoCodeReply *</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void finished(QGeoCodeReply *reply)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when <db:code role="parameter">reply</db:code> has finished processing.</db:para>
<db:para>If reply::error() equals <db:link xlink:href="qgeocodereply.xml#Error-enum">QGeoCodeReply::NoError</db:link> then the processing finished successfully.</db:para>
<db:para>This signal and <db:link xlink:href="qgeocodereply.xml#finished">QGeoCodeReply::finished</db:link>() will be emitted at the same time.</db:para>
<db:note>
<db:para>Do not delete the <db:code role="parameter">reply</db:code> object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="geocode">
<db:title>[virtual] QGeoCodeReply *QGeoCodingManagerEngine::geocode(const QGeoAddress &amp;<db:emphasis>address</db:emphasis>, const QGeoShape &amp;<db:emphasis>bounds</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QGeoCodeReply *</db:type>
<db:methodname>geocode</db:methodname>
<db:methodparam>
<db:type>const QGeoAddress &amp;</db:type>
<db:parameter>address</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoShape &amp;</db:type>
<db:parameter>bounds</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCodeReply * geocode(const QGeoAddress &amp;address, const QGeoShape &amp;bounds)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begins the geocoding of <db:code role="parameter">address</db:code>. Geocoding is the process of finding a coordinate that corresponds to a given address.</db:para>
<db:para>A <db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link> object will be returned, which can be used to manage the geocoding operation and to return the results of the operation.</db:para>
<db:para>This engine and the returned <db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link> object will emit signals indicating if the operation completes or if errors occur.</db:para>
<db:para>If supportsGeocoding() returns false an <db:link xlink:href="qgeocodereply.xml#Error-enum">QGeoCodeReply::UnsupportedOptionError</db:link> will occur.</db:para>
<db:para>Once the operation has completed, <db:link xlink:href="qgeocodereply.xml#locations">QGeoCodeReply::locations</db:link>() can be used to retrieve the results, which will consist of a list of <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link> objects. These objects represent a combination of coordinate and address data.</db:para>
<db:para>The address data returned in the results may be different from <db:code role="parameter">address</db:code>. This will usually occur if the geocoding service backend uses a different canonical form of addresses or if <db:code role="parameter">address</db:code> was only partially filled out.</db:para>
<db:para>If <db:code role="parameter">bounds</db:code> is non-null and a valid <db:link xlink:href="qgeoshape.xml">QGeoShape</db:link> it will be used to limit the results to those that are contained by <db:code role="parameter">bounds</db:code>. This is particularly useful if <db:code role="parameter">address</db:code> is only partially filled out, as the service will attempt to geocode all matches for the specified data.</db:para>
<db:para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to <db:link xlink:href="qgeocodingmanagerengine.xml#finished">QGeoCodingManagerEngine::finished</db:link>(), <db:link xlink:href="qgeocodingmanagerengine.xml#error">QGeoCodingManagerEngine::error</db:link>(), <db:link xlink:href="qgeocodereply.xml#finished">QGeoCodeReply::finished</db:link>() or <db:link xlink:href="qgeocodereply.xml#error">QGeoCodeReply::error</db:link>() with <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>().</db:para>
</db:section>
<db:section xml:id="geocode-1">
<db:title>[virtual] QGeoCodeReply *QGeoCodingManagerEngine::geocode(const QString &amp;<db:emphasis>address</db:emphasis>, int <db:emphasis>limit</db:emphasis>, int <db:emphasis>offset</db:emphasis>, const QGeoShape &amp;<db:emphasis>bounds</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QGeoCodeReply *</db:type>
<db:methodname>geocode</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>address</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>limit</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoShape &amp;</db:type>
<db:parameter>bounds</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCodeReply * geocode(const QString &amp;address, int limit, int offset, const QGeoShape &amp;bounds)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begins geocoding for a location matching <db:code role="parameter">address</db:code>.</db:para>
<db:para>A <db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link> object will be returned, which can be used to manage the geocoding operation and to return the results of the operation.</db:para>
<db:para>This engine and the returned <db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link> object will emit signals indicating if the operation completes or if errors occur.</db:para>
<db:para>Once the operation has completed, <db:link xlink:href="qgeocodereply.xml#locations">QGeoCodeReply::locations</db:link>() can be used to retrieve the results, which will consist of a list of <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link> objects. These objects represent a combination of coordinate and address data.</db:para>
<db:para>If <db:code role="parameter">limit</db:code> is -1 the entire result set will be returned, otherwise at most <db:code role="parameter">limit</db:code> results will be returned.</db:para>
<db:para>The <db:code role="parameter">offset</db:code> parameter is used to ask the geocoding service to not return the first <db:code role="parameter">offset</db:code> results.</db:para>
<db:para>The <db:code role="parameter">limit</db:code> and <db:code role="parameter">offset</db:code> results are used together to implement paging.</db:para>
<db:para>If <db:code role="parameter">bounds</db:code> is non-null and a valid <db:link xlink:href="qgeoshape.xml">QGeoShape</db:link> it will be used to limit the results to those that are contained by <db:code role="parameter">bounds</db:code>.</db:para>
<db:para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to <db:link xlink:href="qgeocodingmanagerengine.xml#finished">QGeoCodingManagerEngine::finished</db:link>(), <db:link xlink:href="qgeocodingmanagerengine.xml#error">QGeoCodingManagerEngine::error</db:link>(), <db:link xlink:href="qgeocodereply.xml#finished">QGeoCodeReply::finished</db:link>() or <db:link xlink:href="qgeocodereply.xml#error">QGeoCodeReply::error</db:link>() with <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>().</db:para>
</db:section>
<db:section xml:id="locale">
<db:title>QLocale QGeoCodingManagerEngine::locale() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLocale</db:type>
<db:methodname>locale</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLocale locale() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the locale used to hint to this geocoding manager about what language to use for the results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodingmanagerengine.xml#setLocale">setLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="managerName">
<db:title>QString QGeoCodingManagerEngine::managerName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>managerName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString managerName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name which this engine implementation uses to distinguish itself from the implementations provided by other plugins.</db:para>
<db:para>The combination of managerName() and <db:link xlink:href="qgeocodingmanagerengine.xml#managerVersion">managerVersion</db:link>() should be unique amongst plugin implementations.</db:para>
</db:section>
<db:section xml:id="managerVersion">
<db:title>int QGeoCodingManagerEngine::managerVersion() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>managerVersion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int managerVersion() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the version of this engine implementation.</db:para>
<db:para>The combination of <db:link xlink:href="qgeocodingmanagerengine.xml#managerName">managerName</db:link>() and managerVersion() should be unique amongst plugin implementations.</db:para>
</db:section>
<db:section xml:id="reverseGeocode">
<db:title>[virtual] QGeoCodeReply *QGeoCodingManagerEngine::reverseGeocode(const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>, const QGeoShape &amp;<db:emphasis>bounds</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QGeoCodeReply *</db:type>
<db:methodname>reverseGeocode</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoShape &amp;</db:type>
<db:parameter>bounds</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCodeReply * reverseGeocode(const QGeoCoordinate &amp;coordinate, const QGeoShape &amp;bounds)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begins the reverse geocoding of <db:code role="parameter">coordinate</db:code>. Reverse geocoding is the process of finding an address that corresponds to a given coordinate.</db:para>
<db:para>A <db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link> object will be returned, which can be used to manage the reverse geocoding operation and to return the results of the operation.</db:para>
<db:para>This engine and the returned <db:link xlink:href="qgeocodereply.xml">QGeoCodeReply</db:link> object will emit signals indicating if the operation completes or if errors occur.</db:para>
<db:para>If supportsReverseGeocoding() returns false an <db:link xlink:href="qgeocodereply.xml#Error-enum">QGeoCodeReply::UnsupportedOptionError</db:link> will occur.</db:para>
<db:para>At that point <db:link xlink:href="qgeocodereply.xml#locations">QGeoCodeReply::locations</db:link>() can be used to retrieve the results, which will consist of a list of <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link> objects. These objects represent a combination of coordinate and address data.</db:para>
<db:para>The coordinate data returned in the results may be different from <db:code role="parameter">coordinate</db:code>. This will usually occur if the reverse geocoding service backend shifts the coordinates to be closer to the matching addresses, or if the backend returns results at multiple levels of detail.</db:para>
<db:para>If multiple results are returned by the reverse geocoding service backend they will be provided in order of specificity. This normally occurs if the backend is configured to reverse geocode across multiple levels of detail. As an example, some services will return address and coordinate pairs for the street address, the city, the state and the country.</db:para>
<db:para>If <db:code role="parameter">bounds</db:code> is non-null and a valid <db:link xlink:href="qgeoshape.xml">QGeoShape</db:link> it will be used to limit the results to those that are contained by <db:code role="parameter">bounds</db:code>.</db:para>
<db:para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to <db:link xlink:href="qgeocodingmanagerengine.xml#finished">QGeoCodingManagerEngine::finished</db:link>(), <db:link xlink:href="qgeocodingmanagerengine.xml#error">QGeoCodingManagerEngine::error</db:link>(), <db:link xlink:href="qgeocodereply.xml#finished">QGeoCodeReply::finished</db:link>() or <db:link xlink:href="qgeocodereply.xml#error">QGeoCodeReply::error</db:link>() with <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>().</db:para>
</db:section>
<db:section xml:id="setLocale">
<db:title>void QGeoCodingManagerEngine::setLocale(const QLocale &amp;<db:emphasis>locale</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLocale</db:methodname>
<db:methodparam>
<db:type>const QLocale &amp;</db:type>
<db:parameter>locale</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLocale(const QLocale &amp;locale)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the locale to be used by this manager to <db:code role="parameter">locale</db:code>.</db:para>
<db:para>If this geocoding manager supports returning the results in different languages, they will be returned in the language of <db:code role="parameter">locale</db:code>.</db:para>
<db:para>The locale used defaults to the system locale if this is not set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocodingmanagerengine.xml#locale">locale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
