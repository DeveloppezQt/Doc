<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Application Permissions</db:title>
<db:productname>QtQmlCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Managing application permissions via QML.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Many features of today's devices and operating systems can have significant privacy, security, and performance implications if misused. It's therefore increasingly common for platforms to require explicit consent from the user before accessing these features.</db:para>
<db:para>The <db:link xlink:href="qtqmlcore-index.xml">Qt Qml Core</db:link> module exposes the Qt C++ <db:link xlink:href="permissions.xml">Application Permissions</db:link> functionality to QML via a set of permission types that can be used to check or request permission in a cross platform manner.</db:para>
<db:variablelist role="qml-permissions">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtcore-bluetoothpermission.xml" xlink:role="">BluetoothPermission</db:link></db:term>
<db:listitem>
<db:para>Access to the user's Bluetooth peripherals.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtcore-calendarpermission.xml" xlink:role="">CalendarPermission</db:link></db:term>
<db:listitem>
<db:para>Access to the user's calendar.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtcore-camerapermission.xml" xlink:role="">CameraPermission</db:link></db:term>
<db:listitem>
<db:para>Access to the user's camera.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtcore-contactspermission.xml" xlink:role="">ContactsPermission</db:link></db:term>
<db:listitem>
<db:para>Access to the user's contacts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtcore-locationpermission.xml" xlink:role="">LocationPermission</db:link></db:term>
<db:listitem>
<db:para>Access to the user's location.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtcore-microphonepermission.xml" xlink:role="">MicrophonePermission</db:link></db:term>
<db:listitem>
<db:para>Access to the user's microphone.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="usage">
<db:title>Usage</db:title>
<db:para>To check and request a specific permission in your application, include an instance of the appropriate permission type, and set any of its properties if needed:</db:para>
<db:programlisting language="qml">CalendarPermission {
    id: calendarPermission
    accessMode: CalendarPermission.ReadWrite
}
</db:programlisting>
<db:para>The type can be used to check the current state of the permissions, for example to drive a state based UI:</db:para>
<db:programlisting language="qml">states: [
    State {
        name: &quot;waitingForPermission&quot;
        when: calendarPermission.status == Qt.PermissionStatus.Undetermined
        PropertyChanges { target: permissionRequestItem; visible: true }
    },
    State {
        name: &quot;permissionDenied&quot;
        when: calendarPermission.status == Qt.PermissionStatus.Denied
        PropertyChanges { target: permissionDeniedItem; visible: true }
    }
]
</db:programlisting>
<db:para>In the example above, two permission specific items will be overlaid if the permission status is not granted. The request UI could perhaps look like:</db:para>
<db:programlisting language="qml">Rectangle {
    id: permissionRequestItem
    anchors.fill: parent
    visible: false

    Text {
        anchors.centerIn: parent
        text: qsTr(&quot;We need your permission to access the calendar.&quot;
            + &quot;Please tap this screen to request permission.&quot;)

    }

    MouseArea {
        anchors.fill: parent
        onClicked: calendarPermission.request()
    }
}
</db:programlisting>
<db:para>With a corresponding denied UI:</db:para>
<db:programlisting language="qml">Rectangle {
    id: permissionDeniedItem
    anchors.fill: parent
    color: &quot;red&quot;
    visible: false
    Text {
        anchors.centerIn: parent
        text: qsTr(&quot;We need your permission to access the calendar,&quot;
            + &quot;but permission was not granted. Please resolve.&quot;)
    }
}
</db:programlisting>
<db:section xml:id="changing-permission-properties">
<db:title>Changing permission properties</db:title>
<db:para>The properties of a permission can be changed, even after a request has been initiated by calling `request()`. This will update the status, if it changes a result of the new property values, but will not result in an automatic request using the new set of properties.</db:para>
<db:para>For example, if upgrading an already granted calendar permission for access mode <db:code>Qt.CalendarPermission.ReadOnly</db:code> to <db:code>Qt.CalendarPermission.ReadWrite</db:code>, the platform will respond in one of three ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>By implicitly granting the extended permission, for example because the platform doesn't distinguish between the two access modes, which will result in no state change.</db:para>
</db:listitem>
<db:listitem>
<db:para>By moving the status back to Undetermined, so that the user can be consulted again for access to the now extended permission.</db:para>
</db:listitem>
<db:listitem>
<db:para>By moving the status to <db:code>Denied</db:code>, for example if permissions can not be upgraded once initially requested.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>All these states should then move the application's UI into the appropriate state, where the user is informed of the new state, with the possibility of requesting the new permission if possible, or reverting to a less extensive permission.</db:para>
</db:section>
<db:section xml:id="interaction-between-permission-items">
<db:title>Interaction between permission items</db:title>
<db:para>Although the permission state is ultimately tied to the underlying application, each permission item reports its own status independently of all other items, and needs to be independently requested if needed.</db:para>
<db:para>For example, requesting calendar access for one item will not update the status of another <db:link xlink:href="qml-qtcore-calendarpermission.xml">CalendarPermission</db:link> item, even if these have the exact same properties.</db:para>
</db:section>
</db:section>
</db:article>
