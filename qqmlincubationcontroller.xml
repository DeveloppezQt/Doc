<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QQmlIncubationController Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qqmlincubationcontroller.xml">QQmlIncubationController</db:link> instances drive the progress of QQmlIncubators.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlIncubationController</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In order to behave asynchronously and not introduce stutters or freezes in an application, the process of creating objects a QQmlIncubators must be driven only during the application's idle time. <db:link xlink:href="qqmlincubationcontroller.xml">QQmlIncubationController</db:link> allows the application to control exactly when, how often and for how long this processing occurs.</db:para>
<db:para>A <db:link xlink:href="qqmlincubationcontroller.xml">QQmlIncubationController</db:link> derived instance should be created and set on a <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> by calling the <db:link xlink:href="qqmlengine.xml#setIncubationController">QQmlEngine::setIncubationController</db:link>() method. Processing is then controlled by calling the <db:link xlink:href="qqmlincubationcontroller.xml#incubateFor">QQmlIncubationController::incubateFor</db:link>() or <db:link xlink:href="qqmlincubationcontroller.xml#incubateWhile">QQmlIncubationController::incubateWhile</db:link>() methods as dictated by the application's requirements.</db:para>
<db:para>For example, this is an example of a incubation controller that will incubate for a maximum of 5 milliseconds out of every 16 milliseconds.</db:para>
<db:programlisting language="cpp">class PeriodicIncubationController : public QObject,
                                     public QQmlIncubationController
{
public:
    PeriodicIncubationController() {
        startTimer(16);
    }

protected:
    virtual void timerEvent(QTimerEvent *) {
        incubateFor(5);
    }
};
</db:programlisting>
<db:para>Although the previous example would work, it is not optimal. Real world incubation controllers should try and maximize the amount of idle time they consume - rather than a static amount like 5 milliseconds - while not disturbing the application.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlIncubationController">
<db:title>QQmlIncubationController::QQmlIncubationController()</db:title>
<db:para>Create a new incubation controller.</db:para>
</db:section>
<db:section xml:id="engine">
<db:title>QQmlEngine *QQmlIncubationController::engine() const</db:title>
<db:para>Return the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> this incubation controller is set on, or 0 if it has not been set on any engine.</db:para>
</db:section>
<db:section xml:id="incubateFor">
<db:title>void QQmlIncubationController::incubateFor(int <db:emphasis>msecs</db:emphasis>)</db:title>
<db:para>Incubate objects for <db:code role="parameter">msecs</db:code>, or until there are no more objects to incubate.</db:para>
</db:section>
<db:section xml:id="incubateWhile">
<db:title>void QQmlIncubationController::incubateWhile(volatile bool *<db:emphasis>flag</db:emphasis>, int <db:emphasis>msecs</db:emphasis> = 0)</db:title>
<db:para>Incubate objects while the bool pointed to by <db:code role="parameter">flag</db:code> is true, or until there are no more objects to incubate, or up to <db:code role="parameter">msecs</db:code> if <db:code role="parameter">msecs</db:code> is not zero.</db:para>
<db:para>Generally this method is used in conjunction with a thread or a UNIX signal that sets the bool pointed to by <db:code role="parameter">flag</db:code> to false when it wants incubation to be interrupted.</db:para>
</db:section>
<db:section xml:id="incubatingObjectCount">
<db:title>int QQmlIncubationController::incubatingObjectCount() const</db:title>
<db:para>Return the number of objects currently incubating.</db:para>
</db:section>
<db:section xml:id="incubatingObjectCountChanged">
<db:title>[virtual protected] void QQmlIncubationController::incubatingObjectCountChanged(int <db:emphasis>incubatingObjectCount</db:emphasis>)</db:title>
<db:para>Called when the number of incubating objects changes. <db:code role="parameter">incubatingObjectCount</db:code> is the new number of incubating objects.</db:para>
<db:para>The default implementation does nothing.</db:para>
</db:section>
</db:section>
</db:article>
