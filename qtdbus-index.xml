<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt D-Bus</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>QtDBus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An introduction to Inter-Process Communication and Remote Procedure Calling with D-Bus.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>D-Bus is an Inter-Process Communication (IPC) and Remote Procedure Calling (RPC) mechanism originally developed for Linux to replace existing and competing IPC solutions with one unified protocol. It has also been designed to allow communication between system-level processes (such as printer and hardware driver services) and normal user processes.</db:para>
<db:para>It uses a fast, binary message-passing protocol, which is suitable for same-machine communication due to its low latency and low overhead. Its specification is currently defined by the <db:code>freedesktop.org</db:code> project, and is available to all parties.</db:para>
<db:para>Communication in general happens through a central server application, called the &quot;bus&quot; (hence the name), but direct application-to-application communication is also possible. When communicating on a bus, applications can query which other applications and services are available, as well as activate one on demand.</db:para>
</db:section>
<db:section xml:id="the-buses">
<db:title>The Buses</db:title>
<db:para>D-Bus buses are used to when many-to-many communication is desired. In order to achieve that, a central server is launched before any applications can connect to the bus: this server is responsible for keeping track of the applications that are connected and for properly routing messages from their source to their destination.</db:para>
<db:para>In addition, D-Bus defines two well-known buses, called the system bus and the session bus. These buses are special in the sense that they have well-defined semantics: some services are defined to be found in one or both of these buses.</db:para>
<db:para>For example, an application wishing to query the list of hardware devices attached to the computer will probably communicate to a service available on the system bus, while the service providing opening of the user's web browser will be probably found on the session bus.</db:para>
<db:para>On the system bus, one can also expect to find restrictions on what services each application is allowed to offer. Therefore, one can be reasonably certain that, if a certain service is present, it is being offered by a trusted application.</db:para>
</db:section>
<db:section xml:id="concepts">
<db:title>Concepts</db:title>
<db:section xml:id="messages">
<db:title>Messages</db:title>
<db:para>On the low level, applications communicate over D-Bus by sending messages to one another. Messages are used to relay the remote procedure calls as well as the replies and errors associated with them. When used over a bus, messages have a destination, which means they are routed only to the interested parties, avoiding congestion due to &quot;swarming&quot; or broadcasting.</db:para>
<db:para>A special kind of message called a &quot;signal message&quot; (a concept based on Qt's <db:link xlink:href="signalsandslots.xml">Signals and Slots</db:link> mechanism), however, does not have a pre-defined destination. Since its purpose is to be used in a one-to-many context, signal messages are designed to work over an &quot;opt-in&quot; mechanism.</db:para>
<db:para>The Qt D-Bus module fully encapsulates the low-level concept of messages into a simpler, object-oriented approach familiar to Qt developers. In most cases, the developer need not worry about sending or receiving messages.</db:para>
</db:section>
<db:section xml:id="service-names">
<db:title>Service Names</db:title>
<db:para>When communicating over a bus, applications obtain what is called a &quot;service name&quot;: it is how that application chooses to be known by other applications on the same bus. The service names are brokered by the D-Bus bus daemon and are used to route messages from one application to another. An analogous concept to service names are IP addresses and hostnames: a computer normally has one IP address and may have one or more hostnames associated with it, according to the services that it provides to the network.</db:para>
<db:para>On the other hand, if a bus is not used, service names are also not used. If we compare this to a computer network again, this would equate to a point-to-point network: since the peer is known, there is no need to use hostnames to find it or its IP address.</db:para>
<db:para>The format of a D-Bus service name is in fact very similar to a host name: it is a dot-separated sequence of letters and digits. The common practice is even to name one's service name according to the domain name of the organization that defined that service.</db:para>
<db:para>For example, the D-Bus service is defined by <db:code>freedesktop.org</db:code> and can be found on the bus under the service name:</db:para>
<db:programlisting language="cpp">org.freedesktop.DBus
</db:programlisting>
</db:section>
<db:section xml:id="object-paths">
<db:title>Object Paths</db:title>
<db:para>Like network hosts, applications provide specific services to other applications by exporting objects. Those objects are hierarchically organised, much like the parent-child relationship that classes derived from <db:link xlink:href="qobject.xml">QObject</db:link> possess. One difference, however, is that there is the concept of &quot;root object&quot;, that all objects have as ultimate parent.</db:para>
<db:para>If we continue our analogy with Web services, object paths equate to the path part of a URL:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qurl-ftppath.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Like them, object paths in D-Bus are formed resembling path names on the filesystem: they are slash-separated labels, each consisting of letters, digits and the underscore character (&quot;_&quot;). They must always start with a slash and must not end with one.</db:para>
</db:section>
<db:section xml:id="interfaces">
<db:title>Interfaces</db:title>
<db:para>Interfaces are similar to C++ abstract classes and Java's interface keyword and declare the &quot;contract&quot; that is established between caller and callee. That is, they establish the names of the methods, signals and properties that are available as well as the behavior that is expected from either side when communication is established.</db:para>
<db:para>Qt uses a very similar mechanism in its <db:link xlink:href="">Plugin system</db:link>: Base classes in C++ are associated with a unique identifier by way of the <db:link xlink:href="qtplugin.xml#Q_DECLARE_INTERFACE">Q_DECLARE_INTERFACE</db:link>() macro.</db:para>
<db:para>D-Bus interface names are, in fact, named in a manner similar to what is suggested by the Qt Plugin System: an identifier usually constructed from the domain name of the entity that defined that interface.</db:para>
</db:section>
<db:section xml:id="cheat-sheet">
<db:title>Cheat Sheet</db:title>
<db:para>To facilitate remembering of the naming formats and their purposes, the following table can be used:</db:para>
<db:informaltable style="generic" width="90%">
<db:thead>
<db:tr>
<db:th>
<db:para>D-Bus Concept</db:para>
</db:th>
<db:th>
<db:para>Analogy</db:para>
</db:th>
<db:th>
<db:para>Name format</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Service name</db:para>
</db:td>
<db:td>
<db:para>Network hostnames</db:para>
</db:td>
<db:td>
<db:para>Dot-separated (&quot;looks like a hostname&quot;)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Object path</db:para>
</db:td>
<db:td>
<db:para>URL path component</db:para>
</db:td>
<db:td>
<db:para>Slash-separated (&quot;looks like a path&quot;)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Interface</db:para>
</db:td>
<db:td>
<db:para>Plugin identifier</db:para>
</db:td>
<db:td>
<db:para>Dot-separated</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="debugging">
<db:title>Debugging</db:title>
<db:para>When developing applications that use D-Bus, it is sometimes useful to be able to see information about the messages that are sent and received across the bus by each application.</db:para>
<db:para>This feature can be enabled on a per-application basis by setting the QDBUS_DEBUG environment variable before running each application. For example, we can enable debugging only for the car in the <db:link xlink:href="qtdbus-remotecontrolledcar-example.xml">D-Bus Remote Controlled Car Example</db:link> by running the controller and the car in the following way:</db:para>
<db:programlisting language="cpp">examples/dbus/remotecontrolledcar/controller/controller &amp;
QDBUS_DEBUG=1 examples/dbus/remotecontrolledcar/car/car &amp;
</db:programlisting>
<db:para>Information about the messages will be written to the console the application was launched from.</db:para>
</db:section>
<db:section xml:id="further-reading">
<db:title>Further Reading</db:title>
<db:para>The following documents contain information about Qt's D-Bus integration features, and provide details about the mechanisms used to send and receive type information over the bus:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="usingadaptors.xml">Using Qt D-Bus Adaptors</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdbustypesystem.xml">The Qt D-Bus Type System</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdbusxml2cpp.xml">Qt D-Bus XML compiler (qdbusxml2cpp)</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtdbus-module.xml">Qt D-Bus C++ Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="examples-dbus.xml">Qt D-Bus Examples</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdbusviewer.xml">D-Bus Viewer</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
