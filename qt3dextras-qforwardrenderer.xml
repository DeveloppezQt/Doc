<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QForwardRenderer Class</db:title>
<db:subtitle>Qt3DExtras::QForwardRenderer</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qt3dextras-qforwardrenderer.xml">QForwardRenderer</db:link> provides a default <db:link xlink:href="qt3drender-framegraph.xml">FrameGraph</db:link> implementation of a forward renderer.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QForwardRenderer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3dextras)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3dextras)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3dextras</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qt3d-extras-forwardrenderer.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-qtechniquefilter.xml" xlink:role="class">Qt3DRender::QTechniqueFilter</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Forward rendering is what OpenGL traditionally uses. It renders directly to the backbuffer one object at a time shading each one as it goes.</db:para>
<db:para><db:link xlink:href="qt3dextras-qforwardrenderer.xml">QForwardRenderer</db:link> is a single leaf <db:link xlink:href="qt3drender-framegraph.xml">FrameGraph</db:link> tree which contains a <db:link xlink:href="qt3drender-qviewport.xml">Qt3DRender::QViewport</db:link>, a <db:link xlink:href="qt3drender-qcameraselector.xml">Qt3DRender::QCameraSelector</db:link>, and a <db:link xlink:href="qt3drender-qclearbuffers.xml">Qt3DRender::QClearBuffers</db:link>. The <db:link xlink:href="qt3dextras-qforwardrenderer.xml">QForwardRenderer</db:link> has a default requirement filter key whose name is &quot;renderingStyle&quot; and value &quot;forward&quot;. If you need to filter out your techniques, you should do so based on that filter key.</db:para>
<db:para>By default the viewport occupies the whole screen and the clear color is white. Frustum culling is also enabled.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="buffersToClear-prop">
<db:title>buffersToClear : Qt3DRender::QClearBuffers::BufferType</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt3DRender::QClearBuffers::BufferType</db:type>
<db:varname>buffersToClear</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">buffersToClear</db:synopsisinfo>
<db:synopsisinfo role="setter">setBuffersToClear</db:synopsisinfo>
<db:synopsisinfo role="notifier">buffersToClearChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current buffers to be cleared. Default value is ColorDepthBuffer</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3drender-qclearbuffers.xml#BufferType-enum">Qt3DRender::QClearBuffers::BufferType</db:link></db:type> <db:emphasis role="bold">buffersToClear</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBuffersToClear</db:emphasis>(<db:emphasis>Qt3DRender::QClearBuffers::BufferType</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">buffersToClearChanged</db:emphasis>(<db:emphasis>Qt3DRender::QClearBuffers::BufferType</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="camera-prop">
<db:title>camera : Qt3DCore::QEntity*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt3DCore::QEntity*</db:type>
<db:varname>camera</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">camera</db:synopsisinfo>
<db:synopsisinfo role="setter">setCamera</db:synopsisinfo>
<db:synopsisinfo role="notifier">cameraChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current camera entity used to render the scene.</db:para>
<db:note>
<db:para>A camera is a QEntity that has a QCameraLens as one of its components.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link></db:type> *<db:emphasis role="bold">camera</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCamera</db:emphasis>(<db:type><db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link></db:type> *<db:emphasis>camera</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">cameraChanged</db:emphasis>(<db:type><db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link></db:type> *<db:emphasis>camera</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="clearColor-prop">
<db:title>clearColor : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>clearColor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">clearColor</db:synopsisinfo>
<db:synopsisinfo role="setter">setClearColor</db:synopsisinfo>
<db:synopsisinfo role="notifier">clearColorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current clear color of the scene. The frame buffer is initialized to the clear color before rendering.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">clearColor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setClearColor</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>clearColor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">clearColorChanged</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>clearColor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="externalRenderTargetSize-prop">
<db:title>externalRenderTargetSize : QSize</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSize</db:type>
<db:varname>externalRenderTargetSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">externalRenderTargetSize</db:synopsisinfo>
<db:synopsisinfo role="setter">setExternalRenderTargetSize</db:synopsisinfo>
<db:synopsisinfo role="notifier">externalRenderTargetSizeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Contains the size of the external render target. External render targets are relevant when rendering does not target a window surface (as set in <db:link xlink:href="qt3dextras-qforwardrenderer.xml#surface">surface</db:link>).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">externalRenderTargetSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setExternalRenderTargetSize</db:emphasis>(const <db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">externalRenderTargetSizeChanged</db:emphasis>(const <db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="frustumCulling-prop">
<db:title>frustumCulling : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>frustumCulling</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isFrustumCullingEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setFrustumCullingEnabled</db:synopsisinfo>
<db:synopsisinfo role="notifier">frustumCullingEnabledChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Indicates if the renderer applies frustum culling to the scene.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isFrustumCullingEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFrustumCullingEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">frustumCullingEnabledChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="gamma-prop">
<db:title>gamma : float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>gamma</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">gamma</db:synopsisinfo>
<db:synopsisinfo role="setter">setGamma</db:synopsisinfo>
<db:synopsisinfo role="notifier">gammaChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the gamma value the renderer applies to the scene.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">gamma</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setGamma</db:emphasis>(<db:type>float</db:type> <db:emphasis>gamma</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">gammaChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>gamma</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="showDebugOverlay-prop">
<db:title>showDebugOverlay : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>showDebugOverlay</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">showDebugOverlay</db:synopsisinfo>
<db:synopsisinfo role="setter">setShowDebugOverlay</db:synopsisinfo>
<db:synopsisinfo role="notifier">showDebugOverlayChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If true, a debug overlay will be rendered over the scene. It will show detailed information about the runtime rendering state, let the user turn logging on and off, etc.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">showDebugOverlay</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setShowDebugOverlay</db:emphasis>(<db:type>bool</db:type> <db:emphasis>showDebugOverlay</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">showDebugOverlayChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>showDebugOverlay</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="surface-prop">
<db:title>surface : QObject*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QObject*</db:type>
<db:varname>surface</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">surface</db:synopsisinfo>
<db:synopsisinfo role="setter">setSurface</db:synopsisinfo>
<db:synopsisinfo role="notifier">surfaceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current render surface.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qobject.xml#QObject">QObject</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qt3dextras-qforwardrenderer.xml#surface">surface</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3dextras-qforwardrenderer.xml#setSurface">setSurface</db:link></db:emphasis>(<db:type><db:link xlink:href="qobject.xml#QObject">QObject</db:link></db:type> *<db:emphasis>surface</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3dextras-qforwardrenderer.xml#surfaceChanged">surfaceChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qobject.xml#QObject">QObject</db:link></db:type> *<db:emphasis>surface</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="viewportRect-prop">
<db:title>viewportRect : QRectF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRectF</db:type>
<db:varname>viewportRect</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">viewportRect</db:synopsisinfo>
<db:synopsisinfo role="setter">setViewportRect</db:synopsisinfo>
<db:synopsisinfo role="notifier">viewportRectChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current normalized viewport rectangle.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> <db:emphasis role="bold">viewportRect</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setViewportRect</db:emphasis>(const <db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> &amp;<db:emphasis>viewportRect</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">viewportRectChanged</db:emphasis>(const <db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> &amp;<db:emphasis>viewportRect</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QForwardRenderer</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qt3dextras-qforwardrenderer.xml">QForwardRenderer</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-property-documentation">
<db:title>Obsolete Property Documentation</db:title>
<db:section xml:id="window-prop">
<db:title>window : QObject*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QObject*</db:type>
<db:varname>window</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">surface</db:synopsisinfo>
<db:synopsisinfo role="setter">setSurface</db:synopsisinfo>
<db:synopsisinfo role="notifier">surfaceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Holds the current render surface.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qobject.xml#QObject">QObject</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qt3dextras-qforwardrenderer.xml#surface">surface</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3dextras-qforwardrenderer.xml#setSurface">setSurface</db:link></db:emphasis>(<db:type><db:link xlink:href="qobject.xml#QObject">QObject</db:link></db:type> *<db:emphasis>surface</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3dextras-qforwardrenderer.xml#surfaceChanged">surfaceChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qobject.xml#QObject">QObject</db:link></db:type> *<db:emphasis>surface</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:section>
</db:article>
