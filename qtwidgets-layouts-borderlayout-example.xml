<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Border Layout Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to arrange child widgets along a border.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Border Layout</db:emphasis> implements a layout that arranges child widgets to surround the main area.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/borderlayout-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The constructor of the Window class creates a <db:link xlink:href="qtextbrowser.xml">QTextBrowser</db:link> object, to which a BorderLayout named layout is added. The declaration of the BorderLayout class is quoted at the end of this document.</db:para>
<db:programlisting language="cpp">Window::Window()
{
    QTextBrowser *centralWidget = new QTextBrowser;
    centralWidget-&amp;gt;setPlainText(tr(&quot;Central widget&quot;));

    BorderLayout *layout = new BorderLayout;
</db:programlisting>
<db:para>Several labeled widgets are added to layout with the orientation Center, North, West, East 1, East 2, and South.</db:para>
<db:programlisting language="cpp">    layout-&amp;gt;addWidget(centralWidget, BorderLayout::Center);
    layout-&amp;gt;addWidget(createLabel(&quot;North&quot;), BorderLayout::North);
    layout-&amp;gt;addWidget(createLabel(&quot;West&quot;), BorderLayout::West);
    layout-&amp;gt;addWidget(createLabel(&quot;East 1&quot;), BorderLayout::East);
    layout-&amp;gt;addWidget(createLabel(&quot;East 2&quot;) , BorderLayout::East);
    layout-&amp;gt;addWidget(createLabel(&quot;South&quot;), BorderLayout::South);
    setLayout(layout);

    setWindowTitle(tr(&quot;Border Layout&quot;));
</db:programlisting>
<db:para>createLabel() in class Window sets the text of the labeled widgets and the style.</db:para>
<db:programlisting language="cpp">QLabel *Window::createLabel(const QString &amp;amp;text)
{
    QLabel *label = new QLabel(text);
    label-&amp;gt;setFrameStyle(QFrame::Box | QFrame::Raised);
    return label;
}
</db:programlisting>
<db:para>Class BorderLayout contains all the utilitarian functions for formatting the widgets it contains.</db:para>
<db:programlisting language="cpp">class BorderLayout : public QLayout
{
public:
    enum Position { West, North, South, East, Center };

    explicit BorderLayout(QWidget *parent, int margin = 0, int spacing = -1);
    BorderLayout(int spacing = -1);
    ~BorderLayout();

    void addItem(QLayoutItem *item) override;
    void addWidget(QWidget *widget, Position position);
    Qt::Orientations expandingDirections() const override;
    bool hasHeightForWidth() const override;
    int count() const override;
    QLayoutItem *itemAt(int index) const override;
    QSize minimumSize() const override;
    void setGeometry(const QRect &amp;amp;rect) override;
    QSize sizeHint() const override;
    QLayoutItem *takeAt(int index) override;

    void add(QLayoutItem *item, Position position);

private:
    struct ItemWrapper
    {
        ItemWrapper(QLayoutItem *i, Position p) {
            item = i;
            position = p;
        }

        QLayoutItem *item;
        Position position;
    };

    enum SizeType { MinimumSize, SizeHint };
    QSize calculateSize(SizeType sizeType) const;

    QList&amp;lt;ItemWrapper *&amp;gt; list;
};
</db:programlisting>
<db:para>For more information, visit the <db:link xlink:href="layout.xml">Layout Management</db:link> page.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="layouts/borderlayout/borderlayout.cpp">layouts/borderlayout/borderlayout.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="layouts/borderlayout/borderlayout.h">layouts/borderlayout/borderlayout.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="layouts/borderlayout/borderlayout.pro">layouts/borderlayout/borderlayout.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="layouts/borderlayout/main.cpp">layouts/borderlayout/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="layouts/borderlayout/window.cpp">layouts/borderlayout/window.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="layouts/borderlayout/window.h">layouts/borderlayout/window.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
