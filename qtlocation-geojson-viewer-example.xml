<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>GeoJson Viewer (C++/QML)</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The GeoJson viewer example demonstrates how to manipulate MapItems, handle user input and I/O to and from a GeoJson file.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/geojson_viewer.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The example displays a map with various MapItems. The MapItems are either imported from a GeoJson file, using the <db:link xlink:href="qgeojson.xml">QGeoJson</db:link> API of <db:link xlink:href="qtlocation-module.xml">QtLocation</db:link> or drawn by the user using <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandlers</db:link>.</db:para>
<db:para>Examples for GeoJson files can be found in the directory data within the example directory. They are read and written using the <db:link xlink:href="qgeojson.xml#importGeoJson">importGeoJson</db:link> and <db:link xlink:href="qgeojson.xml#exportGeoJson">exportGeoJson</db:link> functions.</db:para>
<db:para>To draw a MapItem, right click on an empty part of the map and select an item type of your choice in the appearing menu. The next clicks will define the chosen item. The example allows to draw <db:link xlink:href="qml-qtlocation-mapcircle.xml">MapCircles</db:link>, <db:link xlink:href="qml-qtlocation-maprectangle.xml">MapRectangles</db:link>, <db:link xlink:href="qml-qtlocation-mappolygon.xml">MapPolygons</db:link> and <db:link xlink:href="qml-qtlocation-mappolyline.xml">MapPolylines</db:link>. Items that are fully defined by two points, i.e. circles and rectangles, are drawn with two clicks of the left mouse button. Items that are defined by multiple points, i.e. polygons and polylines, are created by an arbitrary amount of left button clicks and completed with the right mouse button. Items drawn this way are saved as points, polygons and polylines to fit the GeoJson specification, see <db:link xlink:href="https://geojson.org/">https://geojson.org/</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-a-mapview">
<db:title>Creating a MapView</db:title>
<db:para>First we create a base map on which all items can be placed on. We take advantage of a <db:link xlink:href="qml-qtlocation-mapview.xml">MapView</db:link> element that combines a basic <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> with input handling (mouse wheel, drag, etc.). The underlying <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> can be accessed with <db:link xlink:href="qml-qtlocation-mapview.xml#map-prop">map</db:link> property. If you miss a property in <db:link xlink:href="qml-qtlocation-mapview.xml">MapView</db:link> it can be most likely accessed with <db:link xlink:href="qml-qtlocation-mapview.xml#map-prop">MapView.map</db:link>.</db:para>
<db:programlisting language="qml">MapView {
    id: view
    anchors.fill: parent
    map.plugin: Plugin { name: &quot;osm&quot; }
    map.zoomLevel: 4
</db:programlisting>
</db:section>
<db:section xml:id="setting-up-the-geojson-model-display-mapitems">
<db:title>Setting up the GeoJson Model / Display MapItems</db:title>
<db:para>In order to display file contents on the map we will use a design pattern known as <db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link>. First we need to set up a suitable view, in this example a <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link> element. Its parent must be set to the underlying map of the <db:link xlink:href="qml-qtlocation-mapview.xml">MapView</db:link> to correctly display all items placed in it.</db:para>
<db:programlisting language="qml">MapItemView {
    id: miv
    parent: view.map
</db:programlisting>
<db:para>Next we need a suitable model, representing a GeoJson file. The GeoJson file is converted into a tree of <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMaps</db:link> and <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantLists</db:link> within a C++ class in this example.</db:para>
<db:programlisting language="cpp">class GeoJsoner: public QObject
{
    Q_OBJECT
    Q_PROPERTY(QVariant model MEMBER m_importedGeoJson NOTIFY modelChanged)
</db:programlisting>
<db:para>The class contains a member <db:code>model</db:code> which will be set after reading a GeoJson file.</db:para>
<db:programlisting language="cpp">QVariantList modelList = QGeoJson::importGeoJson(loadDoc);
m_importedGeoJson =  modelList;
emit modelChanged();
</db:programlisting>
<db:para>The class is made available to the QML Engine to further process the model in QML.</db:para>
<db:programlisting language="cpp">qmlRegisterType&amp;lt;GeoJsoner&amp;gt;(&quot;Qt.GeoJson&quot;, 1, 0, &quot;GeoJsoner&quot;);
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtlocation-mapitemview.xml#model-prop">model</db:link> property of the <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link> element can then be set to the <db:link xlink:href="qvariant.xml">QVariant</db:link> representation of the model:</db:para>
<db:programlisting language="qml">model: geoJsoner.model
</db:programlisting>
<db:para>Finally we need a delegate, translating the model data into a representation of items, filling the <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link>. It is set to the <db:link xlink:href="qml-qtlocation-mapitemview.xml#delegate-prop">delegate</db:link> property of the <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link>:</db:para>
<db:programlisting language="qml">delegate: GeoJsonDelegate {
}
</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qt-labs-qmlmodels-delegatechooser.xml">DelegateChooser</db:link> element defined the file <db:code>GeoJsonDelegate.qml</db:code> to take into account the varying representation of different geometry types of GeoJson objects.</db:para>
<db:programlisting language="qml">DelegateChooser {
    id: dc
    role: &quot;type&quot;
</db:programlisting>
<db:para>Various <db:link xlink:href="qml-qt-labs-qmlmodels-delegatechoice.xml">DelegateChoices</db:link> are included, each representing a different geometry type to be found in a GeoJson file. The property <db:link xlink:href="qml-qt-labs-qmlmodels-delegatechooser.xml#role-prop">role</db:link> will be matched with <db:link xlink:href="qml-qt-labs-qmlmodels-delegatechoice.xml#roleValue-prop">DelegateChoice.roleValue</db:link> to determine the correct delegate.</db:para>
<db:para>As an example, a point, described with <db:code>&quot;type&quot;:&quot;Point&quot;</db:code> in GeoJson, is represented by a <db:link xlink:href="qml-qtlocation-mapcircle.xml">MapCircle</db:link> on the <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link>:</db:para>
<db:programlisting language="qml">DelegateChoice {
    roleValue: &quot;Point&quot;
    delegate: MapCircle {
        property string geojsonType: &quot;Point&quot;
        property var props: modelData.properties
        geoShape: modelData.data
        radius: (props &amp;amp;&amp;amp; props.radius) || 20*1000
        border.width: 2
        border.color: hh.hovered ? &quot;magenta&quot; : Qt.darker(color)
        opacity: dc.defaultOpacity
        color: (props &amp;amp;&amp;amp; props.color) || (parent &amp;amp;&amp;amp; parent.props &amp;amp;&amp;amp; parent.props.color) || dc.defaultColor
        autoFadeIn: false
</db:programlisting>
<db:para>Properties of the <db:link xlink:href="qml-qtlocation-mapcircle.xml">MapCircle</db:link>, such as <db:link xlink:href="qml-qtlocation-mapcircle.xml#color-prop">color</db:link> or <db:link xlink:href="qml-qtlocation-mapcircle.xml#radius-prop">radius</db:link> are attempted to be read from the GeoJson file that is available in form of the modelData property. However, this is not a strict standard of GeoJson and fallback values are set for all properties.</db:para>
</db:section>
<db:section xml:id="writing-mapitems-to-geojson">
<db:title>Writing MapItems to GeoJson</db:title>
<db:para>To write MapItems to a GeoJson file we first will convert the Mapitems into a representation of <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMaps</db:link> and <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantLists</db:link>. This is conducted in C++ in this example, as part of the <db:code>GeoJsoner</db:code> class used before:</db:para>
<db:programlisting language="cpp">Q_INVOKABLE QVariantList toVariant(QDeclarativeGeoMapItemView *mapItemView)
{
    QVariantList res;
    QDeclarativeGeoMapItemView *root = mapItemView;
    QVariantMap miv = extractor::toVariant(root);
    if (!miv.isEmpty())
        res.append(miv);
    return res;
}
</db:programlisting>
<db:para><db:code>extractor</db:code> is a helper class that converts Mapitems into <db:link xlink:href="qvariant.xml">QVariant</db:link> representations, for example the <db:link xlink:href="qml-qtlocation-mapcircle.xml">MapCircle</db:link>:</db:para>
<db:programlisting language="cpp">static QVariantMap toVariant(QDeclarativeCircleMapItem *mapCircle)
{
    QVariantMap pt;
    pt[&quot;type&quot;] = &quot;Point&quot;;
    pt[&quot;data&quot;] = QVariant::fromValue(mapCircle-&amp;gt;geoShape());
    QVariantMap propMap = mapCircle-&amp;gt;property(&quot;props&quot;).toMap();
    propMap[&quot;radius&quot;] = mapCircle-&amp;gt;radius();
    pt[&quot;properties&quot;] = propMap;
    return pt;
}
</db:programlisting>
<db:para>In a second step the <db:link xlink:href="qvariant.xml">QVariant</db:link> representation can be dumped into a file using <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link>.</db:para>
<db:programlisting language="cpp">Q_INVOKABLE void dumpGeoJSON(QVariantList geoJson, QUrl url)
{
    QJsonDocument json = QGeoJson::exportGeoJson(geoJson);
    QFile jsonFile(url.toLocalFile());
    jsonFile.open(QIODevice::WriteOnly);
    jsonFile.write(json.toJson());
    jsonFile.close();
}
</db:programlisting>
<db:para>The two C++ functions that are required for writing files can be called from QML, thanks to the definition as <db:link xlink:href="qobject.xml#Q_INVOKABLE">Q_INVOKABLE</db:link>:</db:para>
<db:programlisting language="qml">onAccepted: {
    geoJsoner.dumpGeoJSON(geoJsoner.toVariant(miv), fileWriteDialog.selectedFile);
}
</db:programlisting>
<db:para>Note that we could use <db:code>geoJsoner.model</db:code> instead of rebuilding the <db:link xlink:href="qvariant.xml">QVariant</db:link> representation. However, the latter is done for demonstration purposes here.</db:para>
</db:section>
<db:section xml:id="user-interaction-with-mapitems">
<db:title>User Interaction with MapItems</db:title>
<db:para>To handle user interactions we will use <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandlers</db:link>. They are especially well suited for the task as they conform to the exact shape of the underlying item, in contrast to <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>, which always covers a square shape. MapItems that are imported from a GeoJson file get their own <db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandler</db:link> and <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> directly in the delegate:</db:para>
<db:programlisting language="qml">TapHandler {
    onTapped: {
        if (props !== undefined)
            console.log(props.name)
        else if (parent.parent.geojsonType == &quot;MultiPoint&quot;)
            console.log(parent.parent.props.name)
        else
            console.log(&quot;NO NAME!&quot;, props)
    }
}
HoverHandler {
    id: hh
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> is used to write some information about the item on the console when the item is tapped. The <db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandler</db:link> is used to highlight items that lie beneath the mouse pointer. This is implemented by describing the property <db:link xlink:href="qml-qtlocation-mapcircle.xml#border.color-prop">border.color</db:link> depending on the property / state <db:link xlink:href="qml-qtquick-hoverhandler.xml#hovered-prop">hovered</db:link> of the <db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandler</db:link>.</db:para>
</db:section>
<db:section xml:id="adding-new-items">
<db:title>Adding new Items</db:title>
<db:para>A combination of <db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandler</db:link> and <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> for the <db:link xlink:href="qml-qtlocation-mapview.xml">MapView</db:link> allows us to react to mouse movements and clicks by the user.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> emits a <db:link xlink:href="qml-qtquick-taphandler.xml#singleTapped-signal">singleTapped</db:link> signal, we will create or modify a new MapItem on <db:link xlink:href="qt.xml#MouseButton-enum">LeftButton</db:link> and finish the MapItem on <db:link xlink:href="qt.xml#MouseButton-enum">RightButton</db:link>. If there is no item to finish then the <db:link xlink:href="qt.xml#MouseButton-enum">RightButton</db:link> will open a menu.</db:para>
<db:programlisting language="qml">onSingleTapped: (eventPoint, button) =&amp;gt; {
    lastCoordinate = view.map.toCoordinate(tapHandler.point.position)
    if (button === Qt.RightButton) {
        if (view.unfinishedItem !== undefined) {
            view.finishGeoItem()
        } else
            mapPopupMenu.show(lastCoordinate)
    } else if (button === Qt.LeftButton) {
        if (view.unfinishedItem !== undefined) {
            if (view.unfinishedItem.addGeometry(view.map.toCoordinate(tapHandler.point.position), false)) {
                view.finishGeoItem()
            }
        }
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-singlepointhandler.xml#point-prop">pointChanged</db:link> signal is used to temporarily update a MapItem, giving the user a preview.</db:para>
<db:programlisting language="qml">HoverHandler {
    id: hoverHandler
    property variant currentCoordinate
    grabPermissions: PointerHandler.CanTakeOverFromItems | PointerHandler.CanTakeOverFromHandlersOfDifferentType

    onPointChanged: {
        currentCoordinate = view.map.toCoordinate(hoverHandler.point.position)
        if (view.unfinishedItem !== undefined)
            view.unfinishedItem.addGeometry(view.map.toCoordinate(hoverHandler.point.position), true)
    }
}
</db:programlisting>
<db:para>Mapitems are generated from prototypes that are defined in separate qml files. They are created using the <db:link xlink:href="qml-qtqml-qt.xml#createComponent-method">createComponent</db:link> function and added to the map with <db:link xlink:href="qml-qtlocation-map.xml#addMapItem-method">addMapItem</db:link>. A reference to the new item is stored for further manipulation by the user.</db:para>
<db:programlisting language="qml">function addGeoItem(item)
{
    var co = Qt.createComponent('mapitems/'+item+'.qml')
    if (co.status === Component.Ready) {
        unfinishedItem = co.createObject(map)
        unfinishedItem.setGeometry(tapHandler.lastCoordinate)
        unfinishedItem.addGeometry(hoverHandler.currentCoordinate, false)
        view.map.addMapItem(unfinishedItem)
    } else {
        console.log(item + &quot; is not supported right now, please call us later.&quot;)
    }
}
</db:programlisting>
<db:para>Adding the item to the <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> is sufficient to display the item. However, in order to further use the item (e.g. saving it to a file), it has has to be registered with the model. This is done after editing is finished:</db:para>
<db:programlisting language="qml">function finishGeoItem()
{
    unfinishedItem.finishAddGeometry()
    geoJsoner.addItem(unfinishedItem)
    map.removeMapItem(unfinishedItem)
    unfinishedItem = undefined
}
</db:programlisting>
<db:para>The class GeoJsoner converts the new item into a <db:link xlink:href="qvariant.xml">QVariant</db:link> representation and inserts the respective result into the existing <db:link xlink:href="qvariant.xml">QVariant</db:link> representation of all items:</db:para>
<db:programlisting language="cpp">Q_INVOKABLE void addItem(QQuickItem *item)
{
    QVariant entry;
    if (QDeclarativePolylineMapItem *polyline = qobject_cast&amp;lt;QDeclarativePolylineMapItem *&amp;gt;(item)) {
        entry = extractor::toVariant(polyline);
    } else if (QDeclarativePolygonMapItem *polygon = qobject_cast&amp;lt;QDeclarativePolygonMapItem *&amp;gt;(item)) {
        entry = extractor::toVariant(polygon);
    } else if (QDeclarativeCircleMapItem *circle = qobject_cast&amp;lt;QDeclarativeCircleMapItem *&amp;gt;(item)) {
        entry = extractor::toVariant(circle);
    } else if (QDeclarativeRectangleMapItem *rectangle = qobject_cast&amp;lt;QDeclarativeRectangleMapItem *&amp;gt;(item)) {
        entry = extractor::toVariant(rectangle);
    } else {
        return;
    }
    QVariantList geoJson = m_importedGeoJson.toList();
    if (!geoJson.isEmpty()){
        QVariantList geoData = (geoJson[0].toMap()[&quot;type&quot;] == &quot;FeatureCollection&quot;) ? geoJson[0].toMap()[&quot;data&quot;].toList() : geoJson;
        geoData.append(entry);
        geoJson[0] = QVariantMap{{&quot;type&quot;, &quot;FeatureCollection&quot;}, {&quot;data&quot;, geoData}};
    }
    else {
        geoJson.append(entry);
    }
    m_importedGeoJson = geoJson;
    emit modelChanged();
}
</db:programlisting>
</db:section>
<db:section xml:id="removing-items">
<db:title>Removing Items</db:title>
<db:para>To remove all items from the map, we simply reset the model to an empty <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link>. This is possible because we registered all new items with the model and items not added to the mode will not be affected. This is implemented in C++,</db:para>
<db:programlisting language="cpp">Q_INVOKABLE void clear()
{
    m_importedGeoJson = QVariantList();
    emit modelChanged();
}
</db:programlisting>
<db:para>and executed from QML</db:para>
<db:programlisting language="qml">function clearAllItems()
{
    geoJsoner.clear();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtlocation.git/tree/examples/location/geojson_viewer?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
