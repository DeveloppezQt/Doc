<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>GeoJson Viewer (QML)</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The GeoJson viewer example demonstrates how to manipulate MapItems, handle user input and I/O to and from a GeoJson file.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/geojson_viewer.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The example displays a map with various MapItems. The MapItems are either imported from a GeoJson file, using the <db:link xlink:href="qml-qtlocation-geojsondata.xml">GeoJsonData</db:link> API of <db:link xlink:href="qtlocation-module.xml">QtLocation</db:link> or drawn by the user using <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandlers</db:link>.</db:para>
<db:para>Examples for GeoJson files can be found in the directory data within the example directory.</db:para>
<db:para>To draw a MapItem, right click on an empty part of the map and select an item type of your choice in the appearing menu. The next clicks will define the chosen item. The example allows to draw <db:link xlink:href="qml-qtlocation-mapcircle.xml">MapCircles</db:link>, <db:link xlink:href="qml-qtlocation-maprectangle.xml">MapRectangles</db:link>, <db:link xlink:href="qml-qtlocation-mappolygon.xml">MapPolygons</db:link> and <db:link xlink:href="qml-qtlocation-mappolyline.xml">MapPolylines</db:link>. Items that are fully defined by two points, i.e. circles and rectangles, are drawn with two clicks of the left mouse button. Items that are defined by multiple points, i.e. polygons and polylines, are created by an arbitrary amount of left button clicks and completed with the right mouse button. Items drawn this way are saved as points, polygons and polylines to fit the GeoJson specification, see <db:link xlink:href="https://geojson.org/">https://geojson.org/</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-a-mapview">
<db:title>Creating a MapView</db:title>
<db:para>First we create a base map on which all items can be placed on. We take advantage of a <db:link xlink:href="qml-qtlocation-mapview.xml">MapView</db:link> element that combines a basic <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> with input handling (mouse wheel, drag, etc.). The underlying <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> can be accessed with <db:link xlink:href="qml-qtlocation-mapview.xml#map-prop">map</db:link> property. If you miss a property in <db:link xlink:href="qml-qtlocation-mapview.xml">MapView</db:link> it can be most likely accessed with <db:link xlink:href="qml-qtlocation-mapview.xml#map-prop">MapView.map</db:link>.</db:para>
<db:programlisting language="qml">MapView {
    id: view
    anchors.fill: parent
    map.plugin: Plugin { name: &quot;osm&quot; }
    map.zoomLevel: 4
    map.center: QtPositioning.coordinate(3, 8)
}
</db:programlisting>
</db:section>
<db:section xml:id="setting-up-the-geojson-model-display-mapitems">
<db:title>Setting up the GeoJson Model / Display MapItems</db:title>
<db:para>In order to display file contents on the map we will use a design pattern known as <db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link>. First we need to set up a suitable view, in this example a <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link> element. Its parent must be set to the underlying map of the <db:link xlink:href="qml-qtlocation-mapview.xml">MapView</db:link> to correctly display all items placed in it.</db:para>
<db:programlisting language="qml">MapItemView {
    id: miv
    parent: view.map
}
</db:programlisting>
<db:para>Next we need a suitable model, representing a GeoJSON document. For this purpose <db:link xlink:href="qtlocation-module.xml">QtLocation</db:link> offers the <db:link xlink:href="qml-qtlocation-geojsondata.xml">GeoJsonData</db:link> element that can read and write GeoJSON files. It can be easily instantiated</db:para>
<db:programlisting language="qml">GeoJsonData {
    id: geoDatabase
    sourceUrl: &quot;:/data/11-full.json&quot;
}
</db:programlisting>
<db:para>and assigned to the <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link>.</db:para>
<db:programlisting language="qml">model: geoDatabase.model
</db:programlisting>
<db:para>The file <db:code>11-full.json</db:code> is loaded on start-up as an example.</db:para>
<db:para>Finally we need a <db:link xlink:href="qml-qtlocation-mapitemview.xml#delegate-prop">delegate</db:link>, translating the model data into a representation of items, filling the <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link>.</db:para>
<db:programlisting language="qml">delegate: GeoJsonDelegate {}
</db:programlisting>
<db:para>The <db:code>GeoJsonDelegate</db:code> element is declared in the file <db:code>GeoJsonDelegate.qml</db:code>. It is a <db:link xlink:href="qml-qt-labs-qmlmodels-delegatechooser.xml">DelegateChooser</db:link> element, to take into account the varying properties of different geometry types.</db:para>
<db:programlisting language="qml">DelegateChooser {
    id: dc
    role: &quot;type&quot;
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qt-labs-qmlmodels-delegatechooser.xml">DelegateChooser</db:link> contains a <db:link xlink:href="qml-qt-labs-qmlmodels-delegatechoice.xml">DelegateChoice</db:link> for each geometry type that can be found in a GeoJson file. The property <db:link xlink:href="qml-qt-labs-qmlmodels-delegatechooser.xml#role-prop">role</db:link> will be matched with <db:link xlink:href="qml-qt-labs-qmlmodels-delegatechoice.xml#roleValue-prop">DelegateChoice.roleValue</db:link> to determine the correct delegate.</db:para>
<db:para>As an example, a point, described with <db:code>&quot;type&quot;:&quot;Point&quot;</db:code> in GeoJson, is represented by a <db:link xlink:href="qml-qtlocation-mapcircle.xml">MapCircle</db:link> on the <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link>:</db:para>
<db:programlisting language="qml">DelegateChoice {
    roleValue: &quot;Point&quot;
    delegate: MapCircle {
        property string geojsonType: &quot;Point&quot;
        property var props: modelData.properties
        geoShape: modelData.data
        radius: (props &amp;amp;&amp;amp; props.radius) || 20*1000
        border.width: 2
        border.color: hh.hovered ? &quot;magenta&quot; : Qt.darker(color)
        opacity: dc.defaultOpacity
        color: (props &amp;amp;&amp;amp; props.color) || (parent &amp;amp;&amp;amp; parent.props &amp;amp;&amp;amp; parent.props.color) || dc.defaultColor
    }
}
</db:programlisting>
<db:para>Properties of the <db:link xlink:href="qml-qtlocation-mapcircle.xml">MapCircle</db:link>, such as <db:link xlink:href="qml-qtlocation-mapcircle.xml#color-prop">color</db:link> or <db:link xlink:href="qml-qtlocation-mapcircle.xml#radius-prop">radius</db:link> are attempted to be read from the GeoJson file that is available in form of the modelData property. However, this is not a strict standard of GeoJson and fallback values are set for all properties.</db:para>
</db:section>
<db:section xml:id="writing-mapitems-to-geojson">
<db:title>Writing MapItems to GeoJson</db:title>
<db:para>To write MapItems to a GeoJson file we can simply call the <db:link xlink:href="qml-qtlocation-geojsondata.xml#saveAs-method">GeoJsonData::saveAs</db:link> function with the designated filename. This writes all items in the current model to the designated file. Any other items that should be written to the file have to be added to the model first using the function <db:link xlink:href="qml-qtlocation-geojsondata.xml#addItem-method">GeoJsonData::addItem</db:link> or <db:link xlink:href="qml-qtlocation-geojsondata.xml#setModelToMapContents-method">GeoJsonData::setModelToMapContents</db:link>.</db:para>
<db:programlisting language="qml">geoDatabase.saveAs(fileWriteDialog.selectedFile)
</db:programlisting>
</db:section>
<db:section xml:id="user-interaction-with-mapitems">
<db:title>User Interaction with MapItems</db:title>
<db:para>To handle user interactions we will use <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandlers</db:link>. They are especially well suited for the task as they conform to the exact shape of the underlying item, in contrast to <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>, which always covers a square shape. MapItems that are imported from a GeoJson file get their own <db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandler</db:link> and <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> directly in the delegate:</db:para>
<db:programlisting language="qml">TapHandler {
    onTapped: {
        if (props !== undefined)
            console.log(props.name)
        else if (parent.parent.geojsonType == &quot;MultiPoint&quot;)
            console.log(parent.parent.props.name)
        else
            console.log(&quot;NO NAME!&quot;, props)
    }
}
HoverHandler {
    id: hh
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> is used to write some information about the item on the console when the item is tapped. The <db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandler</db:link> is used to highlight items that lie beneath the mouse pointer. This is implemented by describing the property <db:link xlink:href="qml-qtlocation-mapcircle.xml#border.color-prop">border.color</db:link> depending on the property / state <db:link xlink:href="qml-qtquick-hoverhandler.xml#hovered-prop">hovered</db:link> of the <db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandler</db:link>.</db:para>
</db:section>
<db:section xml:id="adding-new-items">
<db:title>Adding new Items</db:title>
<db:para>A combination of <db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandler</db:link> and <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> for the <db:link xlink:href="qml-qtlocation-mapview.xml">MapView</db:link> allows us to react to mouse movements and clicks by the user.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> emits a <db:link xlink:href="qml-qtquick-taphandler.xml#singleTapped-signal">singleTapped</db:link> signal, we will create or modify a new MapItem on <db:link xlink:href="qt.xml#MouseButton-enum">LeftButton</db:link> and finish the MapItem on <db:link xlink:href="qt.xml#MouseButton-enum">RightButton</db:link>. If there is no item to finish then the <db:link xlink:href="qt.xml#MouseButton-enum">RightButton</db:link> will open a menu.</db:para>
<db:programlisting language="qml">onSingleTapped: (eventPoint, button) =&amp;gt; {
    lastCoordinate = view.map.toCoordinate(tapHandler.point.position)
    if (button === Qt.RightButton) {
        if (view.unfinishedItem !== undefined) {
            view.finishGeoItem()
        } else
            mapPopupMenu.show(lastCoordinate)
    } else if (button === Qt.LeftButton) {
        if (view.unfinishedItem !== undefined) {
            if (view.unfinishedItem.addGeometry(view.map.toCoordinate(tapHandler.point.position), false)) {
                view.finishGeoItem()
            }
        }
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-singlepointhandler.xml#point-prop">pointChanged</db:link> signal is used to temporarily update a MapItem, giving the user a preview.</db:para>
<db:programlisting language="qml">HoverHandler {
    id: hoverHandler
    property variant currentCoordinate
    grabPermissions: PointerHandler.CanTakeOverFromItems | PointerHandler.CanTakeOverFromHandlersOfDifferentType

    onPointChanged: {
        currentCoordinate = view.map.toCoordinate(hoverHandler.point.position)
        if (view.unfinishedItem !== undefined)
            view.unfinishedItem.addGeometry(view.map.toCoordinate(hoverHandler.point.position), true)
    }
}
</db:programlisting>
<db:para>Mapitems are generated from prototypes that are defined in separate qml files. They are created using the <db:link xlink:href="qml-qtqml-qt.xml#createComponent-method">createComponent</db:link> function and added to the map with <db:link xlink:href="qml-qtlocation-map.xml#addMapItem-method">addMapItem</db:link>. A reference to the new item is stored for further manipulation by the user.</db:para>
<db:programlisting language="qml">function addGeoItem(item)
{
    var co = Qt.createComponent('mapitems/'+item+'.qml')
    if (co.status === Component.Ready) {
        unfinishedItem = co.createObject(map)
        unfinishedItem.setGeometry(tapHandler.lastCoordinate)
        unfinishedItem.addGeometry(hoverHandler.currentCoordinate, false)
        view.map.addMapItem(unfinishedItem)
    } else {
        console.log(item + &quot; is not supported right now, please call us later.&quot;)
    }
}
</db:programlisting>
<db:para>Adding the item to the <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> is sufficient to display the item. However, in order to further use the item (e.g. saving it to a file), it has to be added to the model. This is done after editing is finished:</db:para>
<db:programlisting language="qml">function finishGeoItem()
{
    unfinishedItem.finishAddGeometry()
    geoDatabase.addItem(unfinishedItem)
    map.removeMapItem(unfinishedItem)
    unfinishedItem = undefined
}
</db:programlisting>
</db:section>
<db:section xml:id="removing-items">
<db:title>Removing Items</db:title>
<db:para>To remove all items from the map, we simply call the reset function of the <db:link xlink:href="qml-qtlocation-geojsondata.xml">GeoJsonData</db:link> object</db:para>
<db:programlisting language="qml">function clearAllItems()
{
    geoDatabase.clear();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtlocation.git/tree/examples/location/geojson_viewer?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
