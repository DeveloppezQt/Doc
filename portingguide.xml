<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Porting to Qt 6</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Guide for porting Qt 5 applications to Qt 6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>There are many changes to Qt from the previous version, Qt 5, to Qt 6. Before upgrading to Qt 6, make sure that your Qt 5 application is updated to Qt 5.15. The latest Qt 5 version has the least amount of changes when porting to Qt 6. However, APIs marked as deprecated or obsolete in Qt 5.15 may have been removed for the Qt 6.0 release.</db:para>
<db:para>Here are things you should check if you are porting your Qt 5 applications into Qt 6.</db:para>
<db:section xml:id="disable-use-of-c-api-deprecated-in-qt-5-15">
<db:title>Disable use of C++ API deprecated in Qt 5.15</db:title>
<db:para>Usage of API deprecated in Qt will typically show up in the form of a compiler warning. You can also make the use an error by defining the <db:link xlink:href="qtglobal.xml#QT_DISABLE_DEPRECATED_BEFORE">QT_DISABLE_DEPRECATED_BEFORE</db:link> C++ macro in your build system. To disable any API deprecated in 5.15 or older Qt versions, define the macro to 0x050F00, which is '5.15.0' encoded as a hexadecimal number.</db:para>
<db:para>For example, in a qmake project file, define the macro with:</db:para>
<db:programlisting language="cpp">DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x050F00
</db:programlisting>
<db:para>In CMake, you can use add_compile_definitions:</db:para>
<db:programlisting language="cpp">add_compile_definitions(QT_DISABLE_DEPRECATED_BEFORE=0x050F00)
</db:programlisting>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qt-5/obsoleteclasses.html">Qt 5.15 Obsolete C++ Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qt-5/obsoleteqmltypes.html">Qt 5.15 Obsolete QML Types</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="obsoleteclasses.xml">Qt 6 Obsolete C++ Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="obsoleteqmltypes.xml">Qt 6 Obsolete QML Types</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="check-the-changes-to-the-modules">
<db:title>Check the Changes to the Modules</db:title>
<db:para>A goal for the Qt 6 release is to maintain a streamlined framework which means the removal of some Qt 5 modules in Qt 6. In some cases, APIs from a deprecated module are available in another module. In future Qt 6 releases, new or previous modules may be added.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="whatsnew60.xml#new-modules-in-qt-6-0">New Modules in Qt 6.0</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="whatsnew60.xml#removed-modules-in-qt-6-0">Removed Modules in Qt 6.0</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="modulechanges.xml">Changes to Qt Modules</db:link> - list of changes per Qt module</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="test-for-graphical-regressions">
<db:title>Test for Graphical Regressions</db:title>
<db:para>QML applications have a new graphical backend, which you should test for regressions. OpenGL is no longer guaranteed as default on target platforms and you should check that your graphics code is still creating the same effects you want.</db:para>
<db:para>It is still possible to use OpenGL calls in Qt applications, but the OpenGL APIs are moved to the <db:link xlink:href="qtopengl-index.xml">Qt OpenGL</db:link> module. The graphical backend for Qt Widgets applications are unchanged from Qt 5.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="topics-graphics.xml">Graphics</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quick-changes-qt6.xml">Changes to Qt Quick</db:link> - changes to Qt Quick graphics that may affect Qt 5 applications</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="high-dpi">
<db:title>High-DPI</db:title>
<db:para>Qt 6 supports high-DPI displays on all platforms, and will automatically account for the display resolution when using higher level APIs such as Qt Widgets or Qt Quick. Applications only need to provide high-resolution assets, such as images and icons. The feature is always enabled. See <db:link xlink:href="highdpi.xml">High DPI</db:link> for more details.</db:para>
</db:section>
</db:section>
<db:section xml:id="use-the-platform-integration-apis">
<db:title>Use the Platform Integration APIs</db:title>
<db:para>There is better integration with the native APIs on target platforms in Qt 6. You can use platform integration APIs to implement native behavior that is not provided by Qt. For Qt 6, check for any updates to your application's target platform.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="platform-integration.xml">Platform Integration</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpa.xml">Qt Platform Abstraction</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="supported-platforms.xml">Supported Platforms</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="use-porting-tool">
<db:title>Use Porting Tool</db:title>
<db:para>A Clazy-based tool is available to facilate porting from Qt 5 to Qt 6: <db:link xlink:href="porting-to-qt6-using-clazy.xml">Porting C++ Applications to Qt 6 using Clazy checks</db:link>.</db:para>
</db:section>
<db:section xml:id="more-information-about-qt-6">
<db:title>More Information about Qt 6</db:title>
<db:para>There are many other changes in Qt. For example, there are constant updates to the development tools and the build tools.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="whatsnew60.xml">What's New in Qt 6.0</db:link> - overview of the changes in Qt 6.0</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator Manual</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="overviews-main.xml">Qt Overviews</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtexamplesandtutorials.xml">Qt Examples And Tutorials</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt6-buildsystem.xml">Build System Changes in Qt 6</db:link> - for building Qt 6 from source</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
