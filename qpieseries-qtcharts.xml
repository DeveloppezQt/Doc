<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPieSeries Class</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpieseries-qtcharts.xml">QPieSeries</db:link> class presents data in pie charts.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPieSeries</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In QML</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtcharts-pieseries.xml" xlink:role="">PieSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractseries-qtcharts.xml" xlink:role="class">QAbstractSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A pie series consists of slices that are defined as <db:link xlink:href="qpieslice-qtcharts.xml">QPieSlice</db:link> objects. The slices can have any values as the <db:link xlink:href="qpieseries-qtcharts.xml">QPieSeries</db:link> object calculates the percentage of a slice compared with the sum of all slices in the series to determine the actual size of the slice in the chart.</db:para>
<db:para>Pie size and position on the chart are controlled by using relative values that range from 0.0 to 1.0. These relate to the actual chart rectangle.</db:para>
<db:para>By default, the pie is defined as a full pie. A partial pie can be created by setting a starting angle and angle span for the series. A full pie is 360 degrees, where 0 is at 12 a'clock.</db:para>
<db:para>See the <db:link xlink:href="qtcharts-chartsgallery-example.xml">Charts with Widgets Gallery</db:link> to learn how to use <db:link xlink:href="qpieseries-qtcharts.xml">QPieSeries</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_piechart.png"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_donutchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieslice-qtcharts.xml">QPieSlice</db:link></db:member>
<db:member><db:link xlink:href="qchart-qtcharts.xml">QChart</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>[read-only] count : const int</db:title>
<db:para>This property holds the number of slices in the series.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qpieseries-qtcharts.xml#count">count</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qpieseries-qtcharts.xml#countChanged">countChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="endAngle-prop">
<db:title>endAngle : qreal</db:title>
<db:para>This property holds the ending angle of the pie.</db:para>
<db:para>A full pie is 360 degrees, where 0 degrees is at 12 a'clock.</db:para>
<db:para>The default value is 360.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qpieseries-qtcharts.xml#pieEndAngle">pieEndAngle</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qpieseries-qtcharts.xml#setPieEndAngle">setPieEndAngle</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>angle</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="holeSize-prop">
<db:title>holeSize : qreal</db:title>
<db:para>This property holds the donut hole size.</db:para>
<db:para>The value is relative to the chart rectangle, so that:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>0.0 is the minimum size (full pie drawn without a hole).</db:para>
</db:listitem>
<db:listitem>
<db:para>1.0 is the maximum size that can fit the chart (the donut has no width).</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When setting this property, the <db:link xlink:href="qpieseries-qtcharts.xml#size-prop">size</db:link> property is adjusted if necessary, to ensure that the hole size is not greater than the pie size.</db:para>
<db:para>The default value is 0.0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">holeSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHoleSize</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>holeSize</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="horizontalPosition-prop">
<db:title>horizontalPosition : qreal</db:title>
<db:para>This property holds the horizontal position of the pie.</db:para>
<db:para>The value is relative to the chart rectangle, so that:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>0.0 is the absolute left.</db:para>
</db:listitem>
<db:listitem>
<db:para>1.0 is the absolute right.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default value is 0.5 (center).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">horizontalPosition</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHorizontalPosition</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>relativePosition</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieseries-qtcharts.xml#verticalPosition-prop">verticalPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size-prop">
<db:title>size : qreal</db:title>
<db:para>This property holds the pie size.</db:para>
<db:para>The value is relative to the chart rectangle, so that:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>0.0 is the minimum size (pie not drawn).</db:para>
</db:listitem>
<db:listitem>
<db:para>1.0 is the maximum size that can fit the chart.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When setting this property, the <db:link xlink:href="qpieseries-qtcharts.xml#holeSize-prop">holeSize</db:link> property is adjusted if necessary, to ensure that the hole size is not greater than the pie size.</db:para>
<db:para>The default value is 0.7.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">pieSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPieSize</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>relativeSize</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="startAngle-prop">
<db:title>startAngle : qreal</db:title>
<db:para>This property holds the starting angle of the pie.</db:para>
<db:para>A full pie is 360 degrees, where 0 degrees is at 12 a'clock.</db:para>
<db:para>The default value is 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">pieStartAngle</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPieStartAngle</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>startAngle</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sum-prop">
<db:title>[read-only] sum : const qreal</db:title>
<db:para>This property holds the sum of all slices.</db:para>
<db:para>The series keeps track of the sum of all the slices it holds.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qpieseries-qtcharts.xml#sum">sum</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qpieseries-qtcharts.xml#sumChanged">sumChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="verticalPosition-prop">
<db:title>verticalPosition : qreal</db:title>
<db:para>This property holds the vertical position of the pie.</db:para>
<db:para>The value is relative to the chart rectangle, so that:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>0.0 is the absolute top.</db:para>
</db:listitem>
<db:listitem>
<db:para>1.0 is the absolute bottom.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default value is 0.5 (center).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">verticalPosition</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVerticalPosition</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>relativePosition</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieseries-qtcharts.xml#horizontalPosition-prop">horizontalPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPieSeries">
<db:title>[explicit] QPieSeries::QPieSeries(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a series object that is a child of <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPieSeries">
<db:title>[virtual noexcept] QPieSeries::~QPieSeries()</db:title>
<db:para>Removes the pie series and its slices.</db:para>
</db:section>
<db:section xml:id="added">
<db:title>void QPieSeries::added(const QList&lt;QPieSlice *&gt; &amp;<db:emphasis>slices</db:emphasis>)</db:title>
<db:para>This signal is emitted when the slices specified by <db:code role="parameter">slices</db:code> are added to the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieseries-qtcharts.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qpieseries-qtcharts.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="append">
<db:title>bool QPieSeries::append(QPieSlice *<db:emphasis>slice</db:emphasis>)</db:title>
<db:para>Appends the slice specified by <db:code role="parameter">slice</db:code> to the series. Slice ownership is passed to the series.</db:para>
<db:para>Returns <db:code>true</db:code> if appending succeeds.</db:para>
</db:section>
<db:section xml:id="append-1">
<db:title>bool QPieSeries::append(const QList&lt;QPieSlice *&gt; &amp;<db:emphasis>slices</db:emphasis>)</db:title>
<db:para>Appends the array of slices specified by <db:code role="parameter">slices</db:code> to the series. Slice ownership is passed to the series.</db:para>
<db:para>Returns <db:code>true</db:code> if appending succeeds.</db:para>
</db:section>
<db:section xml:id="append-2">
<db:title>QPieSlice *QPieSeries::append(const QString &amp;<db:emphasis>label</db:emphasis>, qreal <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Appends a single slice with the specified <db:code role="parameter">value</db:code> and <db:code role="parameter">label</db:code> to the series. Slice ownership is passed to the series. Returns null if <db:code role="parameter">value</db:code> is <db:code>NaN</db:code>, <db:code>Inf</db:code>, or <db:code>-Inf</db:code> and adds nothing to the series.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QPieSeries::clear()</db:title>
<db:para>Clears all slices from the series.</db:para>
</db:section>
<db:section xml:id="clicked">
<db:title>void QPieSeries::clicked(QPieSlice *<db:emphasis>slice</db:emphasis>)</db:title>
<db:para>This signal is emitted when the slice specified by <db:code role="parameter">slice</db:code> is clicked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieslice-qtcharts.xml#clicked">QPieSlice::clicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>int QPieSeries::count() const</db:title>
<db:para>Returns the number of the slices in this series.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qpieseries-qtcharts.xml#count-prop">count</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="countChanged">
<db:title>void QPieSeries::countChanged()</db:title>
<db:para>This signal is emitted when the slice count changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qpieseries-qtcharts.xml#count-prop">count</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieseries-qtcharts.xml#count">count</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="doubleClicked">
<db:title>void QPieSeries::doubleClicked(QPieSlice *<db:emphasis>slice</db:emphasis>)</db:title>
<db:para>This signal is emitted when the slice specified by <db:code role="parameter">slice</db:code> is double-clicked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieslice-qtcharts.xml#doubleClicked">QPieSlice::doubleClicked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hovered">
<db:title>void QPieSeries::hovered(QPieSlice *<db:emphasis>slice</db:emphasis>, bool <db:emphasis>state</db:emphasis>)</db:title>
<db:para>This signal is emitted when a mouse is hovered over the slice specified by <db:code role="parameter">slice</db:code>. When the mouse moves over the slice, <db:code role="parameter">state</db:code> turns <db:code>true</db:code>, and when the mouse moves away again, it turns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieslice-qtcharts.xml#hovered">QPieSlice::hovered</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert">
<db:title>bool QPieSeries::insert(int <db:emphasis>index</db:emphasis>, QPieSlice *<db:emphasis>slice</db:emphasis>)</db:title>
<db:para>Inserts the slice specified by <db:code role="parameter">slice</db:code> to the series before the slice at the position specified by <db:code role="parameter">index</db:code>. Slice ownership is passed to the series.</db:para>
<db:para>Returns <db:code>true</db:code> if inserting succeeds.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QPieSeries::isEmpty() const</db:title>
<db:para>Returns <db:code>true</db:code> if the series is empty.</db:para>
</db:section>
<db:section xml:id="pieEndAngle">
<db:title>qreal QPieSeries::pieEndAngle() const</db:title>
<db:para>Returns the end angle of the pie.</db:para>
<db:para>A full pie is 360 degrees, where 0 degrees is at 12 a'clock.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qpieseries-qtcharts.xml#endAngle-prop">endAngle</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieseries-qtcharts.xml#setPieEndAngle">setPieEndAngle</db:link>()</db:member>
<db:member><db:link xlink:href="qpieseries-qtcharts.xml#startAngle-prop">pieStartAngle</db:link>()</db:member>
<db:member><db:link xlink:href="qpieseries-qtcharts.xml#startAngle-prop">setPieStartAngle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pressed">
<db:title>void QPieSeries::pressed(QPieSlice *<db:emphasis>slice</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user clicks the slice specified by <db:code role="parameter">slice</db:code> and holds down the mouse button.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieslice-qtcharts.xml#pressed">QPieSlice::pressed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="released">
<db:title>void QPieSeries::released(QPieSlice *<db:emphasis>slice</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user releases the mouse press on the slice specified by <db:code role="parameter">slice</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieslice-qtcharts.xml#released">QPieSlice::released</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove">
<db:title>bool QPieSeries::remove(QPieSlice *<db:emphasis>slice</db:emphasis>)</db:title>
<db:para>Removes a single slice, specified by <db:code role="parameter">slice</db:code>, from the series and deletes it permanently.</db:para>
<db:para>The pointer cannot be referenced after this call.</db:para>
<db:para>Returns <db:code>true</db:code> if the removal succeeds.</db:para>
</db:section>
<db:section xml:id="removed">
<db:title>void QPieSeries::removed(const QList&lt;QPieSlice *&gt; &amp;<db:emphasis>slices</db:emphasis>)</db:title>
<db:para>This signal is emitted when the slices specified by <db:code role="parameter">slices</db:code> are removed from the series.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieseries-qtcharts.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLabelsPosition">
<db:title>void QPieSeries::setLabelsPosition(QPieSlice::LabelPosition <db:emphasis>position</db:emphasis>)</db:title>
<db:para>Sets the position of all the slice labels to <db:code role="parameter">position</db:code>.</db:para>
<db:note>
<db:para>This function affects only the current slices in the series. If a new slice is added, the default label position is <db:link xlink:href="qpieslice-qtcharts.xml#LabelPosition-enum">QPieSlice::LabelOutside</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieslice-qtcharts.xml#labelPosition-prop">QPieSlice::labelPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qpieslice-qtcharts.xml#labelPosition-prop">QPieSlice::setLabelPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLabelsVisible">
<db:title>void QPieSeries::setLabelsVisible(bool <db:emphasis>visible</db:emphasis> = true)</db:title>
<db:para>Sets the visibility of all slice labels to <db:code role="parameter">visible</db:code>.</db:para>
<db:note>
<db:para>This function affects only the current slices in the series. If a new slice is added, the default label visibility is <db:code>false</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieslice-qtcharts.xml#labelVisible-prop">QPieSlice::isLabelVisible</db:link>()</db:member>
<db:member><db:link xlink:href="qpieslice-qtcharts.xml#labelVisible-prop">QPieSlice::setLabelVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPieEndAngle">
<db:title>void QPieSeries::setPieEndAngle(qreal <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Sets the end angle of the pie.</db:para>
<db:para>A full pie is 360 degrees, where 0 degrees is at 12 a'clock.</db:para>
<db:para><db:code role="parameter">angle</db:code> must be greater than the start angle.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qpieseries-qtcharts.xml#endAngle-prop">endAngle</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieseries-qtcharts.xml#pieEndAngle">pieEndAngle</db:link>()</db:member>
<db:member><db:link xlink:href="qpieseries-qtcharts.xml#startAngle-prop">pieStartAngle</db:link>()</db:member>
<db:member><db:link xlink:href="qpieseries-qtcharts.xml#startAngle-prop">setPieStartAngle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="slices">
<db:title>QList&lt;QPieSlice *&gt; QPieSeries::slices() const</db:title>
<db:para>Returns a list of slices that belong to this series.</db:para>
</db:section>
<db:section xml:id="sum">
<db:title>qreal QPieSeries::sum() const</db:title>
<db:para>Returns the sum of all slice values in this series.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qpieseries-qtcharts.xml#sum-prop">sum</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieslice-qtcharts.xml#value-prop">QPieSlice::value</db:link>()</db:member>
<db:member><db:link xlink:href="qpieslice-qtcharts.xml#value-prop">QPieSlice::setValue</db:link>()</db:member>
<db:member><db:link xlink:href="qpieslice-qtcharts.xml#percentage-prop">QPieSlice::percentage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sumChanged">
<db:title>void QPieSeries::sumChanged()</db:title>
<db:para>This signal is emitted when the sum of all slices changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qpieseries-qtcharts.xml#sum-prop">sum</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpieseries-qtcharts.xml#sum">sum</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="take">
<db:title>bool QPieSeries::take(QPieSlice *<db:emphasis>slice</db:emphasis>)</db:title>
<db:para>Takes a single slice, specified by <db:code role="parameter">slice</db:code>, from the series. Does not delete the slice object.</db:para>
<db:note>
<db:para>The series remains the slice's parent object. You must set the parent object to take full ownership.</db:para>
</db:note>
<db:para>Returns <db:code>true</db:code> if the take operation was successful.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>[override virtual] QAbstractSeries::SeriesType QPieSeries::type() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qabstractseries-qtcharts.xml#type-prop" role="property">QAbstractSeries::type</db:link>.</db:para>
<db:para>Returns the type of the series.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QPieSeries &amp;QPieSeries::operator&lt;&lt;(QPieSlice *<db:emphasis>slice</db:emphasis>)</db:title>
<db:para>Appends the slice specified by <db:code role="parameter">slice</db:code> to the series and returns a reference to the series. Slice ownership is passed to the series.</db:para>
</db:section>
</db:section>
</db:article>
