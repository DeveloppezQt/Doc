<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TextEdit QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Displays multiple lines of editable formatted text.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-item.xml">Item</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>TextEdit is part of <db:simplelist><db:member>qtquick-visual</db:member><db:member>qtquick-input</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> item displays a block of editable, formatted text.</db:para>
<db:para>It can display both plain and rich text. For example:</db:para>
<db:programlisting language="qml">TextEdit {
    width: 240
    text: &quot;&lt;b&gt;Hello&lt;/b&gt; &lt;i&gt;World!&lt;/i&gt;&quot;
    font.family: &quot;Helvetica&quot;
    font.pointSize: 20
    color: &quot;blue&quot;
    focus: true
}
    </db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-textedit.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>Setting <db:link xlink:href="qml-qtquick-item.xml#focus-prop">focus</db:link> to true enables the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> item to receive keyboard focus.</db:para>
<db:para>Note that the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> does not implement scrolling, following the cursor, or other behaviors specific to a look-and-feel. For example, to add flickable scrolling that follows the cursor:</db:para>
<db:programlisting language="qml">Flickable {
     id: flick

     width: 300; height: 200;
     contentWidth: edit.paintedWidth
     contentHeight: edit.paintedHeight
     clip: true

     function ensureVisible(r)
     {
         if (contentX &gt;= r.x)
             contentX = r.x;
         else if (contentX+width &lt;= r.x+r.width)
             contentX = r.x+r.width-width;
         if (contentY &gt;= r.y)
             contentY = r.y;
         else if (contentY+height &lt;= r.y+r.height)
             contentY = r.y+r.height-height;
     }

     TextEdit {
         id: edit
         width: flick.width
         height: flick.height
         focus: true
         wrapMode: TextEdit.Wrap
         onCursorRectangleChanged: flick.ensureVisible(cursorRectangle)
     }
 }
</db:programlisting>
<db:para>A particular look-and-feel might use smooth scrolling (eg. using <db:link xlink:href="qml-qtquick-smoothedanimation.xml">SmoothedAnimation</db:link>), might have a visible scrollbar, or a scrollbar that fades in to show location, etc.</db:para>
<db:para>Clipboard support is provided by the <db:link xlink:href="qml-qtquick-textedit.xml#cut-method">cut</db:link>(), <db:link xlink:href="qml-qtquick-textedit.xml#copy-method">copy</db:link>(), and <db:link xlink:href="qml-qtquick-textedit.xml#paste-method">paste</db:link>() functions, and the selection can be handled in a traditional &quot;mouse&quot; mechanism by setting <db:link xlink:href="qml-qtquick-textedit.xml#selectByMouse-prop">selectByMouse</db:link>, or handled completely from QML by manipulating <db:link xlink:href="qml-qtquick-textedit.xml#selectionStart-prop">selectionStart</db:link> and <db:link xlink:href="qml-qtquick-textedit.xml#selectionEnd-prop">selectionEnd</db:link>, or using <db:link xlink:href="qml-qtquick-textedit.xml#selectAll-method">selectAll</db:link>() or <db:link xlink:href="qml-qtquick-textedit.xml#selectWord-method">selectWord</db:link>().</db:para>
<db:para>You can translate between cursor positions (characters from the start of the document) and pixel points using <db:link xlink:href="qml-qtquick-textedit.xml#positionAt-method">positionAt</db:link>() and <db:link xlink:href="qml-qtquick-textedit.xml#positionToRectangle-method">positionToRectangle</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-text.xml">Text</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="effectiveHorizontalAlignment-prop">
<db:title>[read-only] effectiveHorizontalAlignment : enumeration</db:title>
<db:bridgehead renderas="sect2">horizontalAlignment : enumeration</db:bridgehead><db:bridgehead renderas="sect2">verticalAlignment : enumeration</db:bridgehead><db:para>Sets the horizontal and vertical alignment of the text within the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> item's width and height. By default, the text alignment follows the natural alignment of the text, for example text that is read from left to right will be aligned to the left.</db:para>
<db:para>Valid values for horizontalAlignment are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AlignLeft (default)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AlignRight</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AlignHCenter</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AlignJustify</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Valid values for verticalAlignment are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AlignTop (default)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AlignBottom</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AlignVCenter</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When using the attached property <db:link xlink:href="qml-qtquick-layoutmirroring.xml#enabled-prop">LayoutMirroring::enabled</db:link> to mirror application layouts, the horizontal alignment of text will also be mirrored. However, the property horizontalAlignment will remain unchanged. To query the effective horizontal alignment of <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>, use the read-only property effectiveHorizontalAlignment.</db:para>
</db:section>
<db:section xml:id="bottomPadding-prop">
<db:title>[since 5.6] bottomPadding : real</db:title>
<db:bridgehead renderas="sect2">[since 5.6] leftPadding : real</db:bridgehead><db:bridgehead renderas="sect2">[since 5.6] padding : real</db:bridgehead><db:bridgehead renderas="sect2">[since 5.6] rightPadding : real</db:bridgehead><db:bridgehead renderas="sect2">[since 5.6] topPadding : real</db:bridgehead><db:para>These properties hold the padding around the content. This space is reserved in addition to the <db:link xlink:href="qml-qtquick-textedit.xml#contentWidth-prop">contentWidth</db:link> and <db:link xlink:href="qml-qtquick-textedit.xml#contentHeight-prop">contentHeight</db:link>.</db:para>
<db:para>This QML property was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="activeFocusOnPress-prop">
<db:title>activeFocusOnPress : bool</db:title>
<db:para>Whether the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> should gain active focus on a mouse press. By default this is set to true.</db:para>
</db:section>
<db:section xml:id="baseUrl-prop">
<db:title>baseUrl : url</db:title>
<db:para>This property specifies a base URL which is used to resolve relative URLs within the text.</db:para>
<db:para>The default value is the url of the QML file instantiating the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> item.</db:para>
</db:section>
<db:section xml:id="canPaste-prop">
<db:title>[read-only] canPaste : bool</db:title>
<db:para>Returns true if the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> is writable and the content of the clipboard is suitable for pasting into the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.</db:para>
</db:section>
<db:section xml:id="canRedo-prop">
<db:title>[read-only] canRedo : bool</db:title>
<db:para>Returns true if the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> is writable and there are <db:link xlink:href="qml-qtquick-textedit.xml#undo-method">undone</db:link> operations that can be redone.</db:para>
</db:section>
<db:section xml:id="canUndo-prop">
<db:title>[read-only] canUndo : bool</db:title>
<db:para>Returns true if the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> is writable and there are previous operations that can be undone.</db:para>
</db:section>
<db:section xml:id="color-prop">
<db:title>color : color</db:title>
<db:para>The text color.</db:para>
<db:programlisting language="qml">// green text using hexadecimal notation
TextEdit { color: &quot;#00FF00&quot; }
</db:programlisting>
<db:programlisting language="qml">// steelblue text using SVG color name
TextEdit { color: &quot;steelblue&quot; }
</db:programlisting>
</db:section>
<db:section xml:id="contentHeight-prop">
<db:title>[read-only] contentHeight : real</db:title>
<db:para>Returns the height of the text, including the height past the height that is covered if the text does not fit within the set height.</db:para>
</db:section>
<db:section xml:id="contentWidth-prop">
<db:title>[read-only] contentWidth : real</db:title>
<db:para>Returns the width of the text, including the width past the width which is covered due to insufficient wrapping if <db:link xlink:href="qml-qtquick-textedit.xml#wrapMode-prop">wrapMode</db:link> is set.</db:para>
</db:section>
<db:section xml:id="cursorDelegate-prop">
<db:title>cursorDelegate : Component</db:title>
<db:para>The delegate for the cursor in the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.</db:para>
<db:para>If you set a cursorDelegate for a <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>, this delegate will be used for drawing the cursor instead of the standard cursor. An instance of the delegate will be created and managed by the text edit when a cursor is needed, and the x and y properties of delegate instance will be set so as to be one pixel before the top left of the current character.</db:para>
<db:para>Note that the root item of the delegate component must be a <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> or <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> derived item.</db:para>
</db:section>
<db:section xml:id="cursorPosition-prop">
<db:title>cursorPosition : int</db:title>
<db:para>The position of the cursor in the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.</db:para>
</db:section>
<db:section xml:id="cursorRectangle-prop">
<db:title>[read-only] cursorRectangle : rectangle</db:title>
<db:para>The rectangle where the standard text cursor is rendered within the text edit. Read-only.</db:para>
<db:para>The position and height of a custom <db:link xlink:href="qml-qtquick-textedit.xml#cursorDelegate-prop">cursorDelegate</db:link> are updated to follow the cursorRectangle automatically when it changes. The width of the delegate is unaffected by changes in the cursor rectangle.</db:para>
</db:section>
<db:section xml:id="cursorVisible-prop">
<db:title>cursorVisible : bool</db:title>
<db:para>If true the text edit shows a cursor.</db:para>
<db:para>This property is set and unset when the text edit gets active focus, but it can also be set directly (useful, for example, if a KeyProxy might forward keys to it).</db:para>
</db:section>
<db:section xml:id="font.bold-prop">
<db:title>font.bold : bool</db:title>
<db:para>Sets whether the font weight is bold.</db:para>
</db:section>
<db:section xml:id="font.capitalization-prop">
<db:title>font.capitalization : enumeration</db:title>
<db:para>Sets the capitalization for the text.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Font.MixedCase - This is the normal text rendering option where no capitalization change is applied.</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.AllUppercase - This alters the text to be rendered in all uppercase type.</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.AllLowercase - This alters the text to be rendered in all lowercase type.</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.SmallCaps - This alters the text to be rendered in small-caps type.</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.Capitalize - This alters the text to be rendered with the first character of each word as an uppercase character.</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="qml">TextEdit { text: &quot;Hello&quot;; font.capitalization: Font.AllLowercase }
</db:programlisting>
</db:section>
<db:section xml:id="font.family-prop">
<db:title>font.family : string</db:title>
<db:para>Sets the family name of the font.</db:para>
<db:para>The family name is case insensitive and may optionally include a foundry name, e.g. &quot;Helvetica [Cronyx]&quot;. If the family is available from more than one foundry and the foundry isn't specified, an arbitrary foundry is chosen. If the family isn't available a family will be set using the font matching algorithm.</db:para>
</db:section>
<db:section xml:id="font.italic-prop">
<db:title>font.italic : bool</db:title>
<db:para>Sets whether the font has an italic style.</db:para>
</db:section>
<db:section xml:id="font.letterSpacing-prop">
<db:title>font.letterSpacing : real</db:title>
<db:para>Sets the letter spacing for the font.</db:para>
<db:para>Letter spacing changes the default spacing between individual letters in the font. A positive value increases the letter spacing by the corresponding pixels; a negative value decreases the spacing.</db:para>
</db:section>
<db:section xml:id="font.pixelSize-prop">
<db:title>font.pixelSize : int</db:title>
<db:para>Sets the font size in pixels.</db:para>
<db:para>Using this function makes the font device dependent. Use <db:link xlink:href="qml-qtquick-textedit.xml#font.pointSize-prop">TextEdit::font.pointSize</db:link> to set the size of the font in a device independent manner.</db:para>
</db:section>
<db:section xml:id="font.pointSize-prop">
<db:title>font.pointSize : real</db:title>
<db:para>Sets the font size in points. The point size must be greater than zero.</db:para>
</db:section>
<db:section xml:id="font.strikeout-prop">
<db:title>font.strikeout : bool</db:title>
<db:para>Sets whether the font has a strikeout style.</db:para>
</db:section>
<db:section xml:id="font.styleName-prop">
<db:title>[since 5.6] font.styleName : string</db:title>
<db:para>Sets the style name of the font.</db:para>
<db:para>The style name is case insensitive. If set, the font will be matched against style name instead of the font properties <db:link xlink:href="qml-qtquick-textedit.xml#font.weight-prop">font.weight</db:link>, <db:link xlink:href="qml-qtquick-textedit.xml#font.bold-prop">font.bold</db:link> and <db:link xlink:href="qml-qtquick-textedit.xml#font.italic-prop">font.italic</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="font.underline-prop">
<db:title>font.underline : bool</db:title>
<db:para>Sets whether the text is underlined.</db:para>
</db:section>
<db:section xml:id="font.weight-prop">
<db:title>font.weight : enumeration</db:title>
<db:para>Sets the font's weight.</db:para>
<db:para>The weight can be one of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Font.Thin</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.Light</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.ExtraLight</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.Normal - the default</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.Medium</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.DemiBold</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.Bold</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.ExtraBold</db:para>
</db:listitem>
<db:listitem>
<db:para>Font.Black</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="qml">TextEdit { text: &quot;Hello&quot;; font.weight: Font.DemiBold }
</db:programlisting>
</db:section>
<db:section xml:id="font.wordSpacing-prop">
<db:title>font.wordSpacing : real</db:title>
<db:para>Sets the word spacing for the font.</db:para>
<db:para>Word spacing changes the default spacing between individual words. A positive value increases the word spacing by a corresponding amount of pixels, while a negative value decreases the inter-word spacing accordingly.</db:para>
</db:section>
<db:section xml:id="hoveredLink-prop">
<db:title>[read-only, since 5.2] hoveredLink : string</db:title>
<db:para>This property contains the link string when the user hovers a link embedded in the text. The link must be in rich text or HTML format and the link string provides access to the particular link.</db:para>
<db:para>This property was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#linkHovered-signal">linkHovered</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#linkAt-method">linkAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodComposing-prop">
<db:title>[read-only] inputMethodComposing : bool</db:title>
<db:para>This property holds whether the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> has partial text input from an input method.</db:para>
<db:para>While it is composing an input method may rely on mouse or key events from the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> to edit or commit the partial text. This property can be used to determine when to disable events handlers that may interfere with the correct operation of an input method.</db:para>
</db:section>
<db:section xml:id="inputMethodHints-prop">
<db:title>inputMethodHints : enumeration</db:title>
<db:para>Provides hints to the input method about the expected content of the text edit and how it should operate.</db:para>
<db:para>The value is a bit-wise combination of flags or Qt.ImhNone if no hints are set.</db:para>
<db:para>Flags that alter behaviour are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhHiddenText - Characters should be hidden, as is typically used when entering passwords.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhSensitiveData - Typed text should not be stored by the active input method in any persistent storage like predictive user dictionary.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhNoAutoUppercase - The input method should not try to automatically switch to upper case when a sentence ends.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferNumbers - Numbers are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferUppercase - Upper case letters are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferLowercase - Lower case letters are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhNoPredictiveText - Do not use predictive text (i.e. dictionary lookup) while typing.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhDate - The text editor functions as a date field.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhTime - The text editor functions as a time field.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Flags that restrict input (exclusive flags) are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhDigitsOnly - Only digits are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhFormattedNumbersOnly - Only number input is allowed. This includes decimal point and minus sign.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhUppercaseOnly - Only upper case letter input is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhLowercaseOnly - Only lower case letter input is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhDialableCharactersOnly - Only characters suitable for phone dialing are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhEmailCharactersOnly - Only characters suitable for email addresses are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhUrlCharactersOnly - Only characters suitable for URLs are allowed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Masks:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhExclusiveInputMask - This mask yields nonzero if any of the exclusive flags are used.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="length-prop">
<db:title>[read-only] length : int</db:title>
<db:para>Returns the total number of plain text characters in the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> item.</db:para>
<db:para>As this number doesn't include any formatting markup it may not be the same as the length of the string returned by the <db:link xlink:href="qml-qtquick-textedit.xml#text-prop">text</db:link> property.</db:para>
<db:para>This property can be faster than querying the length the <db:link xlink:href="qml-qtquick-textedit.xml#text-prop">text</db:link> property as it doesn't require any copying or conversion of the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>'s internal string data.</db:para>
</db:section>
<db:section xml:id="lineCount-prop">
<db:title>[read-only] lineCount : int</db:title>
<db:para>Returns the total number of lines in the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> item.</db:para>
</db:section>
<db:section xml:id="mouseSelectionMode-prop">
<db:title>mouseSelectionMode : enumeration</db:title>
<db:para>Specifies how text should be selected using a mouse.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.SelectCharacters - The selection is updated with individual characters. (Default)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.SelectWords - The selection is updated with whole words.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This property only applies when <db:link xlink:href="qml-qtquick-textedit.xml#selectByMouse-prop">selectByMouse</db:link> is true.</db:para>
</db:section>
<db:section xml:id="persistentSelection-prop">
<db:title>persistentSelection : bool</db:title>
<db:para>Whether the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> should keep the selection visible when it loses active focus to another item in the scene. By default this is set to false.</db:para>
</db:section>
<db:section xml:id="readOnly-prop">
<db:title>readOnly : bool</db:title>
<db:para>Whether the user can interact with the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> item. If this property is set to true the text cannot be edited by user interaction.</db:para>
<db:para>By default this property is false.</db:para>
</db:section>
<db:section xml:id="renderType-prop">
<db:title>renderType : enumeration</db:title>
<db:para>Override the default rendering type for this component.</db:para>
<db:para>Supported render types are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Text.QtRendering - the default</db:para>
</db:listitem>
<db:listitem>
<db:para>Text.NativeRendering</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Select Text.NativeRendering if you prefer text to look native on the target platform and do not require advanced features such as transformation of the text. Using such features in combination with the NativeRendering render type will lend poor and sometimes pixelated results.</db:para>
</db:section>
<db:section xml:id="selectByKeyboard-prop">
<db:title>[since 5.1] selectByKeyboard : bool</db:title>
<db:para>Defaults to true when the editor is editable, and false when read-only.</db:para>
<db:para>If true, the user can use the keyboard to select text even if the editor is read-only. If false, the user cannot use the keyboard to select text even if the editor is editable.</db:para>
<db:para>This property was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#readOnly-prop">readOnly</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectByMouse-prop">
<db:title>selectByMouse : bool</db:title>
<db:para>Defaults to false.</db:para>
<db:para>If true, the user can use the mouse to select text in some platform-specific way. Note that for some platforms this may not be an appropriate interaction; it may conflict with how the text needs to behave inside a Flickable, for example.</db:para>
</db:section>
<db:section xml:id="selectedText-prop">
<db:title>[read-only] selectedText : string</db:title>
<db:para>This read-only property provides the text currently selected in the text edit.</db:para>
<db:para>It is equivalent to the following snippet, but is faster and easier to use.</db:para>
<db:programlisting language="cpp">//myTextEdit is the id of the TextEdit
myTextEdit.text.toString().substring(myTextEdit.selectionStart,
        myTextEdit.selectionEnd);
</db:programlisting>
</db:section>
<db:section xml:id="selectedTextColor-prop">
<db:title>selectedTextColor : color</db:title>
<db:para>The selected text color, used in selections.</db:para>
</db:section>
<db:section xml:id="selectionColor-prop">
<db:title>selectionColor : color</db:title>
<db:para>The text highlight color, used behind selections.</db:para>
</db:section>
<db:section xml:id="selectionEnd-prop">
<db:title>[read-only] selectionEnd : int</db:title>
<db:para>The cursor position after the last character in the current selection.</db:para>
<db:para>This property is read-only. To change the selection, use select(start,end), <db:link xlink:href="qml-qtquick-textedit.xml#selectAll-method">selectAll</db:link>(), or <db:link xlink:href="qml-qtquick-textedit.xml#selectWord-method">selectWord</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#selectionStart-prop">selectionStart</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#cursorPosition-prop">cursorPosition</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#selectedText-prop">selectedText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionStart-prop">
<db:title>[read-only] selectionStart : int</db:title>
<db:para>The cursor position before the first character in the current selection.</db:para>
<db:para>This property is read-only. To change the selection, use select(start,end), <db:link xlink:href="qml-qtquick-textedit.xml#selectAll-method">selectAll</db:link>(), or <db:link xlink:href="qml-qtquick-textedit.xml#selectWord-method">selectWord</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#selectionEnd-prop">selectionEnd</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#cursorPosition-prop">cursorPosition</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#selectedText-prop">selectedText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : string</db:title>
<db:para>The text to display. If the text format is AutoText the text edit will automatically determine whether the text should be treated as rich text. This determination is made using <db:link xlink:href="qt-sub-qtgui.xml#mightBeRichText">Qt::mightBeRichText</db:link>().</db:para>
<db:para>The text-property is mostly suitable for setting the initial content and handling modifications to relatively small text content. The <db:link xlink:href="qml-qtquick-textedit.xml#append-method">append</db:link>(), <db:link xlink:href="qml-qtquick-textedit.xml#insert-method">insert</db:link>() and <db:link xlink:href="qml-qtquick-textedit.xml#remove-method">remove</db:link>() methods provide more fine-grained control and remarkably better performance for modifying especially large rich text content.</db:para>
</db:section>
<db:section xml:id="textDocument-prop">
<db:title>[read-only, since 5.1] textDocument : TextDocument</db:title>
<db:para>Returns the <db:link xlink:href="qquicktextdocument.xml">QQuickTextDocument</db:link> of this <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>. It can be used to implement syntax highlighting using <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquicktextdocument.xml">QQuickTextDocument</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textFormat-prop">
<db:title>textFormat : enumeration</db:title>
<db:para>The way the text property should be displayed.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AutoText</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.PlainText</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.RichText</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default is <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.PlainText. If the text format is <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.AutoText the text edit will automatically determine whether the text should be treated as rich text. This determination is made using <db:link xlink:href="qt-sub-qtgui.xml#mightBeRichText">Qt::mightBeRichText</db:link>().</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">Column {
    TextEdit {
        font.pointSize: 24
        text: &quot;&lt;b&gt;Hello&lt;/b&gt; &lt;i&gt;World!&lt;/i&gt;&quot;
    }
    TextEdit {
        font.pointSize: 24
        textFormat: TextEdit.RichText
        text: &quot;&lt;b&gt;Hello&lt;/b&gt; &lt;i&gt;World!&lt;/i&gt;&quot;
    }
    TextEdit {
        font.pointSize: 24
        textFormat: TextEdit.PlainText
        text: &quot;&lt;b&gt;Hello&lt;/b&gt; &lt;i&gt;World!&lt;/i&gt;&quot;
    }
}
    </db:programlisting>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-textformat.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="textMargin-prop">
<db:title>textMargin : real</db:title>
<db:para>The margin, in pixels, around the text in the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.</db:para>
</db:section>
<db:section xml:id="wrapMode-prop">
<db:title>wrapMode : enumeration</db:title>
<db:para>Set this property to wrap the text to the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> item's width. The text will only wrap if an explicit width has been set.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.NoWrap - no wrapping will be performed. If the text contains insufficient newlines, then implicitWidth will exceed a set width.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.WordWrap - wrapping is done on word boundaries only. If a word is too long, implicitWidth will exceed a set width.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.WrapAnywhere - wrapping is done at any point on a line, even if it occurs in the middle of a word.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.Wrap - if possible, wrapping occurs at a word boundary; otherwise it will occur at the appropriate point on the line, even in the middle of a word.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default is <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.NoWrap. If you set a width, consider using <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.Wrap.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="editingFinished-signal">
<db:title>[since 5.6] editingFinished()</db:title>
<db:para>This signal is emitted when the text edit loses focus.</db:para>
<db:para>The corresponding handler is onEditingFinished.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onEditingFinished</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="linkActivated-signal">
<db:title>linkActivated(string <db:emphasis>link</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user clicks on a link embedded in the text. The link must be in rich text or HTML format and the <db:code role="parameter">link</db:code> string provides access to the particular link.</db:para>
<db:para>The corresponding handler is onLinkActivated.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLinkActivated</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="linkHovered-signal">
<db:title>[since 5.2] linkHovered(string <db:emphasis>link</db:emphasis>)</db:title>
<db:para>This signal is emitted when the user hovers a link embedded in the text. The link must be in rich text or HTML format and the <db:code role="parameter">link</db:code> string provides access to the particular link.</db:para>
<db:para>The corresponding handler is onLinkHovered.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLinkHovered</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#hoveredLink-prop">hoveredLink</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#linkAt-method">linkAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="append-method">
<db:title>[since 5.2] void append(string <db:emphasis>text</db:emphasis>)</db:title>
<db:para>Appends a new paragraph with <db:code role="parameter">text</db:code> to the end of the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.</db:para>
<db:para>In order to append without inserting a new paragraph, call myTextEdit.insert(myTextEdit.length, text) instead.</db:para>
<db:para>This method was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="copy-method">
<db:title>copy()</db:title>
<db:para>Copies the currently selected text to the system clipboard.</db:para>
</db:section>
<db:section xml:id="cut-method">
<db:title>cut()</db:title>
<db:para>Moves the currently selected text to the system clipboard.</db:para>
</db:section>
<db:section xml:id="deselect-method">
<db:title>deselect()</db:title>
<db:para>Removes active text selection.</db:para>
</db:section>
<db:section xml:id="getFormattedText-method">
<db:title>string getFormattedText(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Returns the section of text that is between the <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> positions.</db:para>
<db:para>The returned text will be formatted according the <db:link xlink:href="qml-qtquick-textedit.xml#textFormat-prop">textFormat</db:link> property.</db:para>
</db:section>
<db:section xml:id="getText-method">
<db:title>string getText(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Returns the section of text that is between the <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> positions.</db:para>
<db:para>The returned text does not include any rich text formatting.</db:para>
</db:section>
<db:section xml:id="insert-method">
<db:title>insert(int <db:emphasis>position</db:emphasis>, string <db:emphasis>text</db:emphasis>)</db:title>
<db:para>Inserts <db:code role="parameter">text</db:code> into the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> at position.</db:para>
</db:section>
<db:section xml:id="isRightToLeft-method">
<db:title>isRightToLeft(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Returns true if the natural reading direction of the editor text found between positions <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> is right to left.</db:para>
</db:section>
<db:section xml:id="linkAt-method">
<db:title>[since 5.3] linkAt(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns the link string at point <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> in content coordinates, or an empty string if no link exists at that point.</db:para>
<db:para>This method was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#hoveredLink-prop">hoveredLink</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveCursorSelection-method">
<db:title>moveCursorSelection(int <db:emphasis>position</db:emphasis>, SelectionMode <db:emphasis>mode</db:emphasis> = TextEdit.SelectCharacters)</db:title>
<db:para>Moves the cursor to <db:code role="parameter">position</db:code> and updates the selection according to the optional <db:code role="parameter">mode</db:code> parameter. (To only move the cursor, set the <db:link xlink:href="qml-qtquick-textedit.xml#cursorPosition-prop">cursorPosition</db:link> property.)</db:para>
<db:para>When this method is called it additionally sets either the <db:link xlink:href="qml-qtquick-textedit.xml#selectionStart-prop">selectionStart</db:link> or the <db:link xlink:href="qml-qtquick-textedit.xml#selectionEnd-prop">selectionEnd</db:link> (whichever was at the previous cursor position) to the specified position. This allows you to easily extend and contract the selected text range.</db:para>
<db:para>The selection mode specifies whether the selection is updated on a per character or a per word basis. If not specified the selection mode will default to <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.SelectCharacters.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.SelectCharacters - Sets either the <db:link xlink:href="qml-qtquick-textedit.xml#selectionStart-prop">selectionStart</db:link> or <db:link xlink:href="qml-qtquick-textedit.xml#selectionEnd-prop">selectionEnd</db:link> (whichever was at the previous cursor position) to the specified position.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.SelectWords - Sets the <db:link xlink:href="qml-qtquick-textedit.xml#selectionStart-prop">selectionStart</db:link> and <db:link xlink:href="qml-qtquick-textedit.xml#selectionEnd-prop">selectionEnd</db:link> to include all words between the specified position and the previous cursor position. Words partially in the range are included.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, take this sequence of calls:</db:para>
<db:programlisting language="cpp">cursorPosition = 5
moveCursorSelection(9, TextEdit.SelectCharacters)
moveCursorSelection(7, TextEdit.SelectCharacters)
</db:programlisting>
<db:para>This moves the cursor to position 5, extend the selection end from 5 to 9 and then retract the selection end from 9 to 7, leaving the text from position 5 to 7 selected (the 6th and 7th characters).</db:para>
<db:para>The same sequence with <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.SelectWords will extend the selection start to a word boundary before or on position 5 and extend the selection end to a word boundary on or past position 9.</db:para>
</db:section>
<db:section xml:id="paste-method">
<db:title>paste()</db:title>
<db:para>Replaces the currently selected text by the contents of the system clipboard.</db:para>
</db:section>
<db:section xml:id="positionAt-method">
<db:title>int positionAt(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns the text position closest to pixel position (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>).</db:para>
<db:para>Position 0 is before the first character, position 1 is after the first character but before the second, and so on until position <db:link xlink:href="qml-qtquick-textedit.xml#text-prop">text</db:link>.length, which is after all characters.</db:para>
</db:section>
<db:section xml:id="positionToRectangle-method">
<db:title>rectangle positionToRectangle(<db:emphasis>position</db:emphasis>)</db:title>
<db:para>Returns the rectangle at the given <db:code role="parameter">position</db:code> in the text. The x, y, and height properties correspond to the cursor that would describe that position.</db:para>
</db:section>
<db:section xml:id="redo-method">
<db:title>redo()</db:title>
<db:para>Redoes the last operation if redo is <db:link xlink:href="qml-qtquick-textedit.xml#canRedo-prop">available</db:link>.</db:para>
</db:section>
<db:section xml:id="remove-method">
<db:title>string remove(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Removes the section of text that is between the <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> positions from the <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link>.</db:para>
</db:section>
<db:section xml:id="select-method">
<db:title>select(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Causes the text from <db:code role="parameter">start</db:code> to <db:code role="parameter">end</db:code> to be selected.</db:para>
<db:para>If either start or end is out of range, the selection is not changed.</db:para>
<db:para>After calling this, <db:link xlink:href="qml-qtquick-textedit.xml#selectionStart-prop">selectionStart</db:link> will become the lesser and <db:link xlink:href="qml-qtquick-textedit.xml#selectionEnd-prop">selectionEnd</db:link> will become the greater (regardless of the order passed to this method).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#selectionStart-prop">selectionStart</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textedit.xml#selectionEnd-prop">selectionEnd</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectAll-method">
<db:title>selectAll()</db:title>
<db:para>Causes all text to be selected.</db:para>
</db:section>
<db:section xml:id="selectWord-method">
<db:title>selectWord()</db:title>
<db:para>Causes the word closest to the current cursor position to be selected.</db:para>
</db:section>
<db:section xml:id="undo-method">
<db:title>undo()</db:title>
<db:para>Undoes the last operation if undo is <db:link xlink:href="qml-qtquick-textedit.xml#canUndo-prop">available</db:link>. Deselects any current selection, and updates the selection start to the current cursor position.</db:para>
</db:section>
</db:section>
</db:article>
