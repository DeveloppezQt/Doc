<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Video Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Transforming video and camera viewfinder content.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>QML Video</db:emphasis> demonstrates the various transformations (move; resize; rotate; change aspect ratio) that can be applied to QML <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> and <db:link xlink:href="qml-qtmultimedia-camera.xml">Camera</db:link> types.</db:para>
<db:para>It also shows how native code can be combined with QML to implement more advanced functionality - in this case, C++ code is used to calculate the QML frame rate. This value is rendered in QML in a semi-transparent item overlaid on the video content.</db:para>
<db:para>The following image shows the application executing the video-overlay scene, which creates a dummy overlay item (just a semi-transparent <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>), which moves across the <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> item.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlvideo-overlay.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="application-structure">
<db:title>Application Structure</db:title>
<db:para>The <db:code>main.qml</db:code> file creates a UI which includes the following items:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Two <db:code>Button</db:code> instances, each of which displays a filename, and can be used to launch a <db:code>FileDialog</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para>An exit <db:code>Button</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:code>SceneSelectionPanel</db:code>, which is a flickable list displaying the available scenes.</db:para>
</db:listitem>
<db:listitem>
<db:para>At the lower left, an item which displays the QML repainting rate - the upper number is the instantaneous frame rate and the lower number is the average over the past second.</db:para>
</db:listitem>
</db:itemizedlist>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlvideo-menu.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>Each scene in the flickable list is implemented in its own QML file - for example the video-basic scene (which just displays a static <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> in the center of the screen) is implemented in the <db:code>VideoBasic.qml</db:code> file. As you can see from the code, this makes use of a type of inheritance; a <db:code>VideoBasic</db:code> item ...</db:para>
<db:programlisting language="cpp">import QtQuick

SceneBasic {
    contentType: &quot;video&quot;
}
</db:programlisting>
<db:para>... is of type <db:code>SceneBasic</db:code> ...</db:para>
<db:programlisting language="cpp">import QtQuick

Scene {
    id: root
    property string contentType
    ...
    Content {
        id: content
    ...
    }

    Text {
        anchors {
            horizontalCenter: parent.horizontalCenter
            bottom: parent.bottom
            margins: 20
        }
        text: content.started ? &quot;Tap the screen to stop content&quot;
                              : &quot;Tap the screen to start content&quot;
        color: &quot;#e0e0e0&quot;
        z: 2.0
    }

    MouseArea {
        anchors.fill: parent
        onClicked: {
            if (content.started)
                content.stop()
            else
                content.start()
        }
    }

    Component.onCompleted: root.content = content
}
</db:programlisting>
<db:para>... which itself is a <db:code>Scene</db:code>:</db:para>
<db:programlisting language="cpp">import QtQuick

Rectangle {
    id: root
    ...
    property QtObject content
    ...
    Button {
        id: closeButton
        anchors {
            top: parent.top
            right: parent.right
            margins: root.margins
        }
        width: Math.max(parent.width, parent.height) / 12
        height: Math.min(parent.width, parent.height) / 12
        z: 2.0
        bgColor: &quot;#212121&quot;
        bgColorSelected: &quot;#757575&quot;
        textColorSelected: &quot;white&quot;
        text: &quot;Back&quot;
        onClicked: root.close()
    }
}
</db:programlisting>
<db:para><db:code>SceneBasic</db:code> describes the structure and behavior of the scene, but is agnostic of the type of content which will be displayed - this is abstracted by <db:code>Content</db:code>.</db:para>
<db:para>This pattern allows us to define a particular use case (in this case, simply display a static piece of content), and then instantiate that use case for both video content (<db:code>VideoBasic</db:code>) and camera content <db:code>({CameraBasic})</db:code>. This approach is used to implement many of the other scenes - for example, <db:emphasis>&quot;repeatedly slide the content from left to right and back again&quot;</db:emphasis> is implemented by <db:code>SceneMove</db:code>, on which <db:code>VideoMove</db:code> and <db:code>CameraMove</db:code> are based.</db:para>
<db:para>Depending on the value of the contentType property in the top-level scene instance, the embedded <db:code>Content</db:code> item creates either a <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link> or a <db:link xlink:href="qml-qtmultimedia-camera.xml">Camera</db:link> item.</db:para>
</db:section>
<db:section xml:id="calculating-and-displaying-qml-painting-rate">
<db:title>Calculating and Displaying QML Painting Rate</db:title>
<db:para>The QML painting rate is calculated by the FrequencyMonitor class, which turns a stream of events (received via the notify() slot), into an instantaneous and an averaged frequency:</db:para>
<db:programlisting language="cpp">class FrequencyMonitor : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qreal instantaneousFrequency READ instantaneousFrequency NOTIFY
                       instantaneousFrequencyChanged)
    Q_PROPERTY(qreal averageFrequency READ averageFrequency NOTIFY averageFrequencyChanged)

public:
    ...
    static void qmlRegisterType();

public slots:
    Q_INVOKABLE void notify();
};
</db:programlisting>
<db:para>The FrequencyMonitor class is exposed to QML like this</db:para>
<db:programlisting language="cpp">void FrequencyMonitor::qmlRegisterType()
{
    ::qmlRegisterType&amp;lt;FrequencyMonitor&amp;gt;(&quot;FrequencyMonitor&quot;, 1, 0, &quot;FrequencyMonitor&quot;);
}
</db:programlisting>
<db:para>and its data is displayed by defining a QML item called FrequencyItem, like this:</db:para>
<db:programlisting language="cpp">import FrequencyMonitor 1.0

Rectangle {
    id: root
    ...
    function notify() {
        monitor.notify()
    }

    FrequencyMonitor {
        id: monitor
        onAverageFrequencyChanged: {
            averageFrequencyText.text = monitor.averageFrequency.toFixed(2)
        }
    }

    Text {
        id: labelText
        anchors {
            left: parent.left
            top: parent.top
            margins: 10
        }
        color: root.textColor
        font.pixelSize: 0.6 * root.textSize
        text: root.label
        width: root.width - 2*anchors.margins
        elide: Text.ElideRight
    }

    Text {
        id: averageFrequencyText
        anchors {
            right: parent.right
            bottom: parent.bottom
            margins: 10
        }
        color: root.textColor
        font.pixelSize: root.textSize
    }
}
</db:programlisting>
<db:para>The result looks like this:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/video-qml-paint-rate.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>All that remains is to connect the afterRendering() signal of the <db:link xlink:href="qquickview.xml">QQuickView</db:link> object to a JavaScript function, which will eventually call <db:code>frequencyItem.notify()</db:code>:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQmlContext&amp;gt;
#include &amp;lt;QQmlEngine&amp;gt;
#include &amp;lt;QQuickItem&amp;gt;
#include &amp;lt;QQuickView&amp;gt;
#include &amp;lt;QStandardPaths&amp;gt;
#include &amp;lt;QString&amp;gt;
#include &amp;lt;QStringList&amp;gt;

#if QT_CONFIG(permissions)
  #include &amp;lt;QPermission&amp;gt;
#endif

static const QString DefaultFileName1 = &quot;&quot;;
    ...
    QQuickItem *rootObject = viewer.rootObject();
    ...
    QObject::connect(&amp;amp;viewer, SIGNAL(afterRendering()), rootObject, SLOT(qmlFramePainted()));
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtmultimedia.git/tree/examples/multimedia/video/qmlvideo?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
