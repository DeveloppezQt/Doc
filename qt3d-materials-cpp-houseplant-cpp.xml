<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: Materials C++ Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt 3D Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2014 Klaralvdalens Datakonsult AB (KDAB).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the Qt3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL3$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPLv3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or later as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file. Please review the following information to
** ensure the GNU General Public License version 2.0 requirements will be
** met: http://www.gnu.org/licenses/gpl-2.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;houseplant.h&quot;
#include &lt;Qt3DRender/qtexture.h&gt;

const char *potNames[] = {
    &quot;cross&quot;,
    &quot;square&quot;,
    &quot;triangle&quot;,
    &quot;sphere&quot;
};

const char *plantNames[] = {
    &quot;bamboo&quot;,
    &quot;palm&quot;,
    &quot;pine&quot;,
    &quot;spikes&quot;,
    &quot;shrub&quot;
};

HousePlant::HousePlant(Qt3DCore::QNode *parent)
    : Qt3DCore::QEntity(parent)
    , m_pot(new RenderableEntity(this))
    , m_plant(new RenderableEntity(m_pot))
    , m_cover(new RenderableEntity(m_pot))
    , m_potMaterial(new Qt3DRender::QNormalDiffuseMapMaterial())
    , m_plantMaterial(new Qt3DRender::QNormalDiffuseMapAlphaMaterial())
    , m_coverMaterial(new Qt3DRender::QNormalDiffuseMapMaterial())
    , m_potImage(new Qt3DRender::QTextureImage())
    , m_potNormalImage(new Qt3DRender::QTextureImage())
    , m_plantImage(new Qt3DRender::QTextureImage())
    , m_plantNormalImage(new Qt3DRender::QTextureImage())
    , m_coverImage(new Qt3DRender::QTextureImage())
    , m_coverNormalImage(new Qt3DRender::QTextureImage())
    , m_plantType(Bamboo)
    , m_potShape(Cross)
{
    m_pot-&gt;transform()-&gt;setScale(0.03f);
    m_pot-&gt;addComponent(m_potMaterial);
    m_plant-&gt;addComponent(m_plantMaterial);
    m_cover-&gt;addComponent(m_coverMaterial);

    m_potMaterial-&gt;diffuse()-&gt;addTextureImage(m_potImage);
    m_potMaterial-&gt;normal()-&gt;addTextureImage(m_potNormalImage);
    m_plantMaterial-&gt;diffuse()-&gt;addTextureImage(m_plantImage);
    m_plantMaterial-&gt;normal()-&gt;addTextureImage(m_plantNormalImage);
    m_coverMaterial-&gt;diffuse()-&gt;addTextureImage(m_coverImage);
    m_coverMaterial-&gt;normal()-&gt;addTextureImage(m_coverNormalImage);

    updatePlantType();
    updatePotShape();

    m_coverImage-&gt;setSource(QUrl(QStringLiteral(&quot;qrc:/assets/houseplants/cover.webp&quot;)));
    m_coverNormalImage-&gt;setSource(QUrl(QStringLiteral(&quot;qrc:/assets/houseplants/cover_normal.webp&quot;)));
    m_potImage-&gt;setSource(QUrl(QStringLiteral(&quot;qrc:/assets/houseplants/pot.webp&quot;)));
    m_potNormalImage-&gt;setSource(QUrl(QStringLiteral(&quot;qrc:/assets/houseplants/pot_normal.webp&quot;)));

    m_potMaterial-&gt;setShininess(10.0f);
    m_potMaterial-&gt;setSpecular(QColor::fromRgbF(0.75f, 0.75f, 0.75f, 1.0f));

    m_plantMaterial-&gt;setShininess(10.0f);

    m_coverMaterial-&gt;setSpecular(QColor::fromRgbF(0.05f, 0.05f, 0.05f, 1.0f));
    m_coverMaterial-&gt;setShininess(5.0f);
}

HousePlant::~HousePlant()
{
}

void HousePlant::setPotShape(HousePlant::PotShape shape)
{
    if (shape != m_potShape) {
        m_potShape = shape;
        updatePotShape();
    }
}

void HousePlant::setPlantType(HousePlant::Plant plant)
{
    if (plant != m_plantType) {
        m_plantType = plant;
        updatePlantType();
    }
}

HousePlant::PotShape HousePlant::potShape() const
{
    return m_potShape;
}

HousePlant::Plant HousePlant::plantType() const
{
    return m_plantType;
}

void HousePlant::setPosition(const QVector3D &amp;pos)
{
    m_pot-&gt;transform()-&gt;setTranslation(pos);
}

void HousePlant::setScale(float scale)
{
    m_pot-&gt;transform()-&gt;setScale(scale);
}

QVector3D HousePlant::position() const
{
    return m_pot-&gt;transform()-&gt;translation();
}

float HousePlant::scale() const
{
    return m_pot-&gt;transform()-&gt;scale();
}

void HousePlant::updatePotShape()
{
    m_pot-&gt;mesh()-&gt;setSource(QUrl(QStringLiteral(&quot;qrc:/assets/houseplants/&quot;) + potNames[m_potShape] + QStringLiteral(&quot;-pot.obj&quot;)));
    m_plant-&gt;mesh()-&gt;setSource(QUrl(QStringLiteral(&quot;qrc:/assets/houseplants/&quot;) + potNames[m_potShape] + QStringLiteral(&quot;-&quot;) + plantNames[m_plantType] + QStringLiteral(&quot;.obj&quot;)));
}

void HousePlant::updatePlantType()
{
    m_plant-&gt;mesh()-&gt;setSource(QUrl(QStringLiteral(&quot;qrc:/assets/houseplants/&quot;) + potNames[m_potShape] + QStringLiteral(&quot;-&quot;) + plantNames[m_plantType] + QStringLiteral(&quot;.obj&quot;)));

    m_plantImage-&gt;setSource(QUrl(QStringLiteral(&quot;qrc:/assets/houseplants/&quot;) + plantNames[m_plantType] + QStringLiteral(&quot;.webp&quot;)));
    m_plantNormalImage-&gt;setSource(QUrl(QStringLiteral(&quot;qrc:/assets/houseplants/&quot;) + plantNames[m_plantType] + QStringLiteral(&quot;_normal.webp&quot;)));
}

</db:programlisting>
</db:article>
