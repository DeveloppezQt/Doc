<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Threading Classes</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to develop multithreaded applications.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>These <db:link xlink:href="qtcore-index.xml">Qt Core</db:link> classes provide threading support to applications. The <db:link xlink:href="threads.xml">Thread Support in Qt</db:link> page covers how to use these classes.</db:para>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="qtconcurrentfilter.xml" xlink:role="page">Concurrent Filter and Filter-Reduce</db:link></db:term>
<db:listitem>
<db:para>Selecting values from a sequence and combining them, all in parallel.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtconcurrentmap.xml" xlink:role="page">Concurrent Map and Map-Reduce</db:link></db:term>
<db:listitem>
<db:para>Transforming values from a sequence and combining them, all in parallel.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtconcurrentrun.xml" xlink:role="page">Concurrent Run</db:link></db:term>
<db:listitem>
<db:para>A simple way to run a task in a separate thread.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtconcurrenttask.xml" xlink:role="page">Concurrent Task</db:link></db:term>
<db:listitem>
<db:para>A configurable way to run a task in a separate thread.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qatomicinteger.xml" xlink:role="class">QAtomicInteger</db:link></db:term>
<db:listitem>
<db:para>The QAtomicInteger class provides platform-independent atomic operations on integers.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qatomicpointer.xml" xlink:role="class">QAtomicPointer</db:link></db:term>
<db:listitem>
<db:para>The QAtomicPointer class is a template class that provides platform-independent atomic operations on pointers.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qfuture.xml" xlink:role="class">QFuture</db:link></db:term>
<db:listitem>
<db:para>The QFuture class represents the result of an asynchronous computation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qfuturesynchronizer.xml" xlink:role="class">QFutureSynchronizer</db:link></db:term>
<db:listitem>
<db:para>The QFutureSynchronizer class is a convenience class that simplifies QFuture synchronization.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qfuturewatcher.xml" xlink:role="class">QFutureWatcher</db:link></db:term>
<db:listitem>
<db:para>The QFutureWatcher class allows monitoring a QFuture using signals and slots.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmutex.xml" xlink:role="class">QMutex</db:link></db:term>
<db:listitem>
<db:para>The QMutex class provides access serialization between threads.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmutexlocker.xml" xlink:role="class">QMutexLocker</db:link></db:term>
<db:listitem>
<db:para>The QMutexLocker class is a convenience class that simplifies locking and unlocking mutexes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qpromise.xml" xlink:role="class">QPromise</db:link></db:term>
<db:listitem>
<db:para>The QPromise class provides a way to store computation results to be accessed by QFuture.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qreadlocker.xml" xlink:role="class">QReadLocker</db:link></db:term>
<db:listitem>
<db:para>The QReadLocker class is a convenience class that simplifies locking and unlocking read-write locks for read access.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qreadwritelock.xml" xlink:role="class">QReadWriteLock</db:link></db:term>
<db:listitem>
<db:para>The QReadWriteLock class provides read-write locking.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qrecursivemutex.xml" xlink:role="class">QRecursiveMutex</db:link></db:term>
<db:listitem>
<db:para>The QRecursiveMutex class provides access serialization between threads.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qrunnable.xml" xlink:role="class">QRunnable</db:link></db:term>
<db:listitem>
<db:para>The QRunnable class is the base class for all runnable objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsemaphore.xml" xlink:role="class">QSemaphore</db:link></db:term>
<db:listitem>
<db:para>The QSemaphore class provides a general counting semaphore.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsemaphorereleaser.xml" xlink:role="class">QSemaphoreReleaser</db:link></db:term>
<db:listitem>
<db:para>The QSemaphoreReleaser class provides exception-safe deferral of a QSemaphore::release() call.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qthread.xml" xlink:role="class">QThread</db:link></db:term>
<db:listitem>
<db:para>The QThread class provides a platform-independent way to manage threads.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qthreadpool.xml" xlink:role="class">QThreadPool</db:link></db:term>
<db:listitem>
<db:para>The QThreadPool class manages a collection of QThreads.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qthreadstorage.xml" xlink:role="class">QThreadStorage</db:link></db:term>
<db:listitem>
<db:para>The QThreadStorage class provides per-thread data storage.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qwaitcondition.xml" xlink:role="class">QWaitCondition</db:link></db:term>
<db:listitem>
<db:para>The QWaitCondition class provides a condition variable for synchronizing threads.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qwritelocker.xml" xlink:role="class">QWriteLocker</db:link></db:term>
<db:listitem>
<db:para>The QWriteLocker class is a convenience class that simplifies locking and unlocking read-write locks for write access.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtconcurrent.xml" xlink:role="namespace">QtConcurrent</db:link></db:term>
<db:listitem>
<db:para>The QtConcurrent namespace provides high-level APIs that make it possible to write multi-threaded programs without using low-level threading primitives.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtconcurrent-qtaskbuilder.xml" xlink:role="class">QtConcurrent::QTaskBuilder</db:link></db:term>
<db:listitem>
<db:para>The QTaskBuilder class is used for adjusting task parameters.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtfuture-whenanyresult.xml" xlink:role="class">QtFuture::WhenAnyResult</db:link></db:term>
<db:listitem>
<db:para>QtFuture::WhenAnyResult is used to represent the result of QtFuture::whenAny().</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:article>
