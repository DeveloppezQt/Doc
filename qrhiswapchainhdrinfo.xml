<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes the high dynamic range related information of the swapchain's associated output.</db:para>
<db:para>This struct was introduced in Qt 6.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>rhi/qrhi.h</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::GuiPrivate)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui-private</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To perform HDR-compatible tonemapping, where the target range is not [0,1], one often needs to know the maximum luminance of the display the swapchain's window is associated with. While this is often made user-configurable (think brightness, gamma and similar settings in games), it can be highly useful to set defaults based on the values reported by the display itself, thus providing a decent starting point.</db:para>
<db:para>There are some problems however: the information is exposed in different forms on different platforms, whereas with cross-platform graphics APIs there is often no associated solution at all, because managing such information is not in the scope of the API (and may rather be retrievable via other platform-specific means, if any).</db:para>
<db:para>With Metal on macOS/iOS, there is no luminance values exposed in the platform APIs. Instead, the maximum color component value, that would be 1.0 in a non-HDR setup, is provided. The <db:code>limitsType</db:code> field indicates what kind of information is available. It is then up to the clients of <db:link xlink:href="qrhi.xml">QRhi</db:link> to access the correct data from the <db:code>limits</db:code> union and use it as they see fit.</db:para>
<db:para>With an API like Vulkan, where there is no way to get such information, the values are always the built-in defaults.</db:para>
<db:para>Therefore, the struct returned from <db:link xlink:href="qrhiswapchain.xml#hdrInfo">QRhiSwapChain::hdrInfo</db:link>() contains either some hard-coded defaults or real values received from an API such as DXGI (IDXGIOutput6) or Cocoa (NSScreen). When no platform queries are available (or needs using platform facilities out of scope for <db:link xlink:href="qrhi.xml">QRhi</db:link>), the hard-coded defaults are a maximum luminance of 1000 nits and an SDR white level of 200.</db:para>
<db:para>The struct also exposes the presumed luminance behavior of the platform and its compositor, to indicate what a color component value of 1.0 is treated as in a HDR color buffer. In some cases it will be necessary to perform color correction of non-HDR content composited with HDR content. To enable this, the SDR white level is queried from the system on some platforms (Windows) and exposed here.</db:para>
<db:note>
<db:para>This is a RHI API with limited compatibility guarantees, see <db:link xlink:href="qrhi.xml">QRhi</db:link> for details.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrhiswapchain.xml#hdrInfo">QRhiSwapChain::hdrInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="LimitsType-enum">
<db:title>enum QRhiSwapChainHdrInfo::LimitsType</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhiswapchainhdrinfo.xml">QRhiSwapChainHdrInfo</db:link></db:emphasis>::LuminanceInNits</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Indicates that the <db:link xlink:href="qrhiswapchainhdrinfo.xml#limits-var">limits</db:link> union has its <db:code>luminanceInNits</db:code> struct set</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhiswapchainhdrinfo.xml">QRhiSwapChainHdrInfo</db:link></db:emphasis>::ColorComponentValue</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Indicates that the <db:link xlink:href="qrhiswapchainhdrinfo.xml#limits-var">limits</db:link> union has its <db:code>colorComponentValue</db:code> struct set</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="LuminanceBehavior-enum">
<db:title>enum QRhiSwapChainHdrInfo::LuminanceBehavior</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhiswapchainhdrinfo.xml">QRhiSwapChainHdrInfo</db:link></db:emphasis>::SceneReferred</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Indicates that the color value of 1.0 is interpreted as 80 nits. This is the behavior of HDR-enabled windows with the Windows compositor. See <db:link xlink:href="https://learn.microsoft.com/en-us/windows/win32/direct3darticles/high-dynamic-range">this page</db:link> for more information on HDR on Windows.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qrhiswapchainhdrinfo.xml">QRhiSwapChainHdrInfo</db:link></db:emphasis>::DisplayReferred</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Indicates that the color value of 1.0 is interpreted as the value of the SDR white. (which can be e.g. 200 nits, but will vary depending on screen brightness) This is the behavior of HDR-enabled windows on Apple platforms. See <db:link xlink:href="https://developer.apple.com/documentation/metal/hdr_content/displaying_hdr_content_in_a_metal_layer">this page</db:link> for more information on Apple's EDR system.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="limits-var">
<db:title>union QRhiSwapChainHdrInfo::(unnamed union at D:\Qt\6.8.3\msvc2022_64\include\QtGui\6.8.3\QtGui\rhi\qrhi.h:1524:5) QRhiSwapChainHdrInfo::limits</db:title>
<db:para>Contains the actual values queried from the graphics API or the platform. The type of data is indicated by <db:link xlink:href="qrhiswapchainhdrinfo.xml#limitsType-var">limitsType</db:link>. This is therefore a union. There are currently two options:</db:para>
<db:para>Luminance values in nits:</db:para>
<db:programlisting language="cpp">struct {
    float minLuminance;
    float maxLuminance;
} luminanceInNits;
</db:programlisting>
<db:para>On Windows the minimum and maximum luminance depends on the screen brightness. While not relevant for desktops, on laptops the screen brightness may change at any time. Increasing brightness implies decreased maximum luminance. In addition, the results may also be dependent on the HDR Content Brightness set in Windows Settings' System/Display/HDR view, if there is such a setting.</db:para>
<db:para>Note however that the changes made to the laptop screen's brightness or in the system settings while the application is running are not necessarily reflected in the returned values, meaning calling hdrInfo() again may still return the same luminance range as before for the rest of the process' lifetime. The exact behavior is up to DXGI and Qt has no control over it.</db:para>
<db:note>
<db:para>The Windows compositor works in scene-referred mode for HDR content. A color component value of 1.0 corresponds to a luminance of 80 nits. When rendering non-HDR content (e.g. 2D UI elements), the correction of the white level is often necessary. (e.g., outputting the fragment color (1, 1, 1) will likely lead to showing a shade of white that is too dim on-screen) See <db:link xlink:href="qrhiswapchainhdrinfo.xml#sdrWhiteLevel-var">sdrWhiteLevel</db:link>.</db:para>
</db:note>
<db:para>For macOS/iOS, the current maximum and potential maximum color component values are provided:</db:para>
<db:programlisting language="cpp">struct {
    float maxColorComponentValue;
    float maxPotentialColorComponentValue;
} colorComponentValue;
</db:programlisting>
<db:para>The value may depend on the screen brightness, which on laptops means that the result may change in the next call to hdrInfo() if the brightness was changed in the meantime. The maximum screen brightness implies a maximum color value of 1.0.</db:para>
<db:note>
<db:para>Apple's EDR is display-referred. 1.0 corresponds to a luminance level of SDR white (e.g. 200 nits), the value of which varies based on the screen brightness and possibly other settings. The exact luminance value for that, or the maximum luminance of the display, are not exposed to the applications.</db:para>
</db:note>
<db:note>
<db:para>It has been observed that the color component values are not set to the correct larger-than-1 value right away on startup on some macOS systems, but the values tend to change during or after the first frame.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrhiswapchain.xml#hdrInfo">QRhiSwapChain::hdrInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="limitsType-var">
<db:title>QRhiSwapChainHdrInfo::LimitsType QRhiSwapChainHdrInfo::limitsType</db:title>
<db:para>With Metal on macOS/iOS, there is no luminance values exposed in the platform APIs. Instead, the maximum color component value, that would be 1.0 in a non-HDR setup, is provided. This value indicates what kind of information is available in <db:link xlink:href="qrhiswapchainhdrinfo.xml#limits-var">limits</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrhiswapchain.xml#hdrInfo">QRhiSwapChain::hdrInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="luminanceBehavior-var">
<db:title>QRhiSwapChainHdrInfo::LuminanceBehavior QRhiSwapChainHdrInfo::luminanceBehavior</db:title>
<db:para>Describes the platform's presumed behavior with regards to color values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrhiswapchainhdrinfo.xml#sdrWhiteLevel-var">sdrWhiteLevel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sdrWhiteLevel-var">
<db:title>float QRhiSwapChainHdrInfo::sdrWhiteLevel</db:title>
<db:para>On Windows this is the dynamic SDR white level in nits. The value is dependent on the screen brightness (on laptops), and the SDR or HDR Content Brightness settings in the Windows settings' System/Display/HDR view.</db:para>
<db:para>To perform white level correction for non-HDR (SDR) content, such as 2D UI elemenents, multiply the final color with sdrWhiteLevel / 80.0 whenever <db:link xlink:href="qrhiswapchainhdrinfo.xml#luminanceBehavior-var">luminanceBehavior</db:link> is <db:link xlink:href="qrhiswapchainhdrinfo.xml#LuminanceBehavior-enum">SceneReferred</db:link>. (assuming Windows and a linear extended sRGB (scRGB) color space)</db:para>
<db:para>On other platforms the value is always a pre-defined value, 200. This may not match the system's actual SDR white level, but the value of this variable is not relevant in practice when the <db:link xlink:href="qrhiswapchainhdrinfo.xml#luminanceBehavior-var">luminanceBehavior</db:link> is <db:link xlink:href="qrhiswapchainhdrinfo.xml#LuminanceBehavior-enum">DisplayReferred</db:link>, because then the color component value of 1.0 refers to the SDR white by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrhiswapchainhdrinfo.xml#luminanceBehavior-var">luminanceBehavior</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
