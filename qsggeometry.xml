<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSGGeometry Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link> class provides low-level storage for graphics primitives in the <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml">Qt Quick Scene Graph</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSGGeometry</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link> class stores the geometry of the primitives rendered with the scene graph. It contains vertex data and optionally index data. The mode used to draw the geometry, also called primitive topology, is specified with <db:link xlink:href="qsggeometry.xml#setDrawingMode">setDrawingMode</db:link>().</db:para>
<db:para>Vertices can be as simple as points defined by x and y values or can be more complex where each vertex contains a normal, texture coordinates and a 3D position. The <db:link xlink:href="qsggeometry-attributeset.xml">QSGGeometry::AttributeSet</db:link> is used to describe how the vertex data is built up. The attribute set can only be specified on construction. The <db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link> class provides a few convenience attributes and attribute sets by default. The <db:link xlink:href="qsggeometry.xml#defaultAttributes_Point2D">defaultAttributes_Point2D</db:link>() function returns an attribute set to be used in normal solid color rectangles, while the <db:link xlink:href="qsggeometry.xml#defaultAttributes_TexturedPoint2D">defaultAttributes_TexturedPoint2D</db:link> function returns attributes to be used for textured 2D geometry. The vertex data is internally stored as a <db:code>void *</db:code> and is accessible with the <db:link xlink:href="qsggeometry.xml#vertexData">vertexData</db:link>() function. Convenience accessors for the common attribute sets are available with <db:link xlink:href="qsggeometry.xml#vertexDataAsPoint2D">vertexDataAsPoint2D</db:link>() and <db:link xlink:href="qsggeometry.xml#vertexDataAsTexturedPoint2D">vertexDataAsTexturedPoint2D</db:link>(). Vertex data is allocated by passing a vertex count to the constructor or by calling <db:link xlink:href="qsggeometry.xml#allocate">allocate</db:link>() later.</db:para>
<db:para>The <db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link> can optionally contain indices of either unsigned 32-bit, unsigned 16-bit, or unsigned 8-bit integers. The index type must be specified during construction and cannot be changed.</db:para>
<db:para>Below is a snippet illustrating how a geometry composed of position and color vertices can be built.</db:para>
<db:programlisting language="cpp">struct MyPoint2D {
    float x;
    float y;
    float r;
    float g;
    float b;
    float a;

    void set(float x_, float y_, float r_, float g_, float b_, float a_) {
        x = x_;
        y = y_;
        r = r_;
        g = g_;
        b = b_;
        a = a_;
    }
};

QSGGeometry::Attribute MyPoint2D_Attributes[] = {
    QSGGeometry::Attribute::create(0, 2, FloatType, true),
    QSGGeometry::Attribute::create(1, 4, FloatType, false)
};

QSGGeometry::AttributeSet MyPoint2D_AttributeSet = {
    2,
    sizeof(MyPoint2D),
    MyPoint2D_Attributes
};

...

geometry = new QSGGeometry(MyPoint2D_AttributeSet, 2);
geometry-&amp;gt;setDrawingMode(DrawLines);

MyPoint2D *vertices = static_cast&amp;lt;MyPoint2D *&amp;gt;(geometry-&amp;gt;vertexData());
vertices[0].set(0, 0, 1, 0, 0, 1);
vertices[1].set(width(), height(), 0, 0, 1, 1);
</db:programlisting>
<db:para>The <db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link> is a software buffer and client-side in terms of accelerated rendering, as the buffers used in 2D graphics typically consist of many small buffers that change every frame and do not benefit from being uploaded to graphics memory. However, the <db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link> supports hinting to the renderer that a buffer should be uploaded using the <db:link xlink:href="qsggeometry.xml#setVertexDataPattern">setVertexDataPattern</db:link>() and <db:link xlink:href="qsggeometry.xml#setIndexDataPattern">setIndexDataPattern</db:link>() functions. Whether this hint is respected or not is implementation specific.</db:para>
<db:note>
<db:para>All classes with QSG prefix should be used solely on the scene graph's rendering thread. See <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">Scene Graph and Rendering</db:link> for more information.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link></db:member>
<db:member><db:link xlink:href="qtquick-scenegraph-customgeometry-example.xml">Scene Graph - Custom Geometry</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AttributeType-enum">
<db:title>enum QSGGeometry::AttributeType</db:title>
<db:enumsynopsis>
<db:enumname>AttributeType</db:enumname>
<db:enumitem>
<db:enumidentifier>UnknownAttribute</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PositionAttribute</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ColorAttribute</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TexCoordAttribute</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TexCoord1Attribute</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TexCoord2Attribute</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum identifies several attribute types.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::UnknownAttribute</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Don't care</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::PositionAttribute</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Position</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::ColorAttribute</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Color</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::TexCoordAttribute</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Texture coordinate</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::TexCoord1Attribute</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Texture coordinate 1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::TexCoord2Attribute</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Texture coordinate 2</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="DataPattern-enum">
<db:title>enum QSGGeometry::DataPattern</db:title>
<db:enumsynopsis>
<db:enumname>DataPattern</db:enumname>
<db:enumitem>
<db:enumidentifier>AlwaysUploadPattern</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StreamPattern</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DynamicPattern</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StaticPattern</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The DataPattern enum is used to specify the use pattern for the vertex and index data in a geometry object.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::AlwaysUploadPattern</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The data is always uploaded. This means that the user does not need to explicitly mark index and vertex data as dirty after changing it. This is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::DynamicPattern</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The data is modified repeatedly and drawn many times. This is a hint that may provide better performance. When set the user must make sure to mark the data as dirty after changing it.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::StaticPattern</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The data is modified once and drawn many times. This is a hint that may provide better performance. When set the user must make sure to mark the data as dirty after changing it.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::StreamPattern</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The data is modified for almost every time it is drawn. This is a hint that may provide better performance. When set, the user must make sure to mark the data as dirty after changing it.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="DrawingMode-enum">
<db:title>enum QSGGeometry::DrawingMode</db:title>
<db:enumsynopsis>
<db:enumname>DrawingMode</db:enumname>
<db:enumitem>
<db:enumidentifier>DrawPoints</db:enumidentifier>
<db:enumvalue>0x0000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DrawLines</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DrawLineLoop</db:enumidentifier>
<db:enumvalue>0x0002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DrawLineStrip</db:enumidentifier>
<db:enumvalue>0x0003</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DrawTriangles</db:enumidentifier>
<db:enumvalue>0x0004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DrawTriangleStrip</db:enumidentifier>
<db:enumvalue>0x0005</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DrawTriangleFan</db:enumidentifier>
<db:enumvalue>0x0006</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies the drawing mode, also called primitive topology.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::DrawPoints</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::DrawLines</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::DrawLineLoop</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::DrawLineStrip</db:code></db:para>
</db:td>
<db:td><db:code>0x0003</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::DrawTriangles</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::DrawTriangleStrip</db:code></db:para>
</db:td>
<db:td><db:code>0x0005</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::DrawTriangleFan</db:code></db:para>
</db:td>
<db:td><db:code>0x0006</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Type-enum">
<db:title>enum QSGGeometry::Type</db:title>
<db:enumsynopsis>
<db:enumname>Type</db:enumname>
<db:enumitem>
<db:enumidentifier>ByteType</db:enumidentifier>
<db:enumvalue>0x1400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnsignedByteType</db:enumidentifier>
<db:enumvalue>0x1401</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ShortType</db:enumidentifier>
<db:enumvalue>0x1402</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnsignedShortType</db:enumidentifier>
<db:enumvalue>0x1403</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IntType</db:enumidentifier>
<db:enumvalue>0x1404</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnsignedIntType</db:enumidentifier>
<db:enumvalue>0x1405</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FloatType</db:enumidentifier>
<db:enumvalue>0x1406</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Bytes2Type</db:enumidentifier>
<db:enumvalue>0x1407</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Bytes3Type</db:enumidentifier>
<db:enumvalue>0x1408</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Bytes4Type</db:enumidentifier>
<db:enumvalue>0x1409</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DoubleType</db:enumidentifier>
<db:enumvalue>0x140A</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies the component type in the vertex data.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::ByteType</db:code></db:para>
</db:td>
<db:td><db:code>0x1400</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::UnsignedByteType</db:code></db:para>
</db:td>
<db:td><db:code>0x1401</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::ShortType</db:code></db:para>
</db:td>
<db:td><db:code>0x1402</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::UnsignedShortType</db:code></db:para>
</db:td>
<db:td><db:code>0x1403</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::IntType</db:code></db:para>
</db:td>
<db:td><db:code>0x1404</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::UnsignedIntType</db:code></db:para>
</db:td>
<db:td><db:code>0x1405</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::FloatType</db:code></db:para>
</db:td>
<db:td><db:code>0x1406</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::Bytes2Type</db:code></db:para>
</db:td>
<db:td><db:code>0x1407</db:code></db:td>
<db:td>
<db:para>Added in Qt 5.14.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::Bytes3Type</db:code></db:para>
</db:td>
<db:td><db:code>0x1408</db:code></db:td>
<db:td>
<db:para>Added in Qt 5.14.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::Bytes4Type</db:code></db:para>
</db:td>
<db:td><db:code>0x1409</db:code></db:td>
<db:td>
<db:para>Added in Qt 5.14.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::DoubleType</db:code></db:para>
</db:td>
<db:td><db:code>0x140A</db:code></db:td>
<db:td>
<db:para>Added in Qt 5.14.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSGGeometry">
<db:title>QSGGeometry::QSGGeometry(const QSGGeometry::AttributeSet &amp;<db:emphasis>attributes</db:emphasis>, int <db:emphasis>vertexCount</db:emphasis>, int <db:emphasis>indexCount</db:emphasis> = 0, int <db:emphasis>indexType</db:emphasis> = UnsignedShortType)</db:title>
<db:constructorsynopsis>
<db:methodname>QSGGeometry</db:methodname>
<db:methodparam>
<db:type>const QSGGeometry::AttributeSet &amp;</db:type>
<db:parameter>attributes</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>vertexCount</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>indexCount</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>indexType</db:parameter>
<db:initializer>UnsignedShortType</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGGeometry(const QSGGeometry::AttributeSet &amp;attributes, int vertexCount, int indexCount, int indexType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a geometry object based on <db:code role="parameter">attributes</db:code>.</db:para>
<db:para>The object allocate space for <db:code role="parameter">vertexCount</db:code> vertices based on the accumulated size in <db:code role="parameter">attributes</db:code> and for <db:code role="parameter">indexCount</db:code>.</db:para>
<db:para>The <db:code role="parameter">indexType</db:code> can be <db:link xlink:href="qsggeometry.xml#Type-enum">UnsignedShortType</db:link> or <db:code>UnsignedIntType</db:code>. Support for the latter depends on the graphics API implementation used at run time, and may not always be available.</db:para>
<db:para>Geometry objects are constructed by default with <db:link xlink:href="qsggeometry.xml#DrawingMode-enum">DrawTriangleStrip</db:link> as the drawing mode.</db:para>
<db:para>The attribute structure is assumed to be POD and the geometry object assumes this will not go away. There is no memory management involved.</db:para>
</db:section>
<db:section xml:id="dtor.QSGGeometry">
<db:title>[virtual] QSGGeometry::~QSGGeometry()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSGGeometry</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSGGeometry()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the geometry object and the vertex and index data it has allocated.</db:para>
</db:section>
<db:section xml:id="allocate">
<db:title>void QSGGeometry::allocate(int <db:emphasis>vertexCount</db:emphasis>, int <db:emphasis>indexCount</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>allocate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>vertexCount</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>indexCount</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void allocate(int vertexCount, int indexCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resizes the vertex and index data of this geometry object to fit <db:code role="parameter">vertexCount</db:code> vertices and <db:code role="parameter">indexCount</db:code> indices.</db:para>
<db:para>Vertex and index data will be invalidated after this call and the caller must mark the associated geometry node as dirty, by calling node-&gt;markDirty(<db:link xlink:href="qsgnode.xml#DirtyStateBit-enum">QSGNode::DirtyGeometry</db:link>) to ensure that the renderer has a chance to update internal buffers.</db:para>
</db:section>
<db:section xml:id="attributeCount">
<db:title>int QSGGeometry::attributeCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>attributeCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int attributeCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of attributes in the attrbute set used by this geometry.</db:para>
</db:section>
<db:section xml:id="attributes">
<db:title>const QSGGeometry::Attribute *QSGGeometry::attributes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QSGGeometry::Attribute *</db:type>
<db:methodname>attributes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QSGGeometry::Attribute * attributes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an array with the attributes of this geometry. The size of the array is given with <db:link xlink:href="qsggeometry.xml#attributeCount">attributeCount</db:link>().</db:para>
</db:section>
<db:section xml:id="defaultAttributes_ColoredPoint2D">
<db:title>[static] const QSGGeometry::AttributeSet &amp;QSGGeometry::defaultAttributes_ColoredPoint2D()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QSGGeometry::AttributeSet &amp;</db:type>
<db:methodname>defaultAttributes_ColoredPoint2D</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QSGGeometry::AttributeSet &amp; defaultAttributes_ColoredPoint2D()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function which returns attributes to be used for per vertex colored 2D drawing.</db:para>
</db:section>
<db:section xml:id="defaultAttributes_Point2D">
<db:title>[static] const QSGGeometry::AttributeSet &amp;QSGGeometry::defaultAttributes_Point2D()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QSGGeometry::AttributeSet &amp;</db:type>
<db:methodname>defaultAttributes_Point2D</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QSGGeometry::AttributeSet &amp; defaultAttributes_Point2D()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function which returns attributes to be used for 2D solid color drawing.</db:para>
</db:section>
<db:section xml:id="defaultAttributes_TexturedPoint2D">
<db:title>[static] const QSGGeometry::AttributeSet &amp;QSGGeometry::defaultAttributes_TexturedPoint2D()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QSGGeometry::AttributeSet &amp;</db:type>
<db:methodname>defaultAttributes_TexturedPoint2D</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QSGGeometry::AttributeSet &amp; defaultAttributes_TexturedPoint2D()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function which returns attributes to be used for textured 2D drawing.</db:para>
</db:section>
<db:section xml:id="drawingMode">
<db:title>unsigned int QSGGeometry::drawingMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>unsigned int</db:type>
<db:methodname>drawingMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">unsigned int drawingMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the drawing mode of this geometry.</db:para>
<db:para>The default value is <db:link xlink:href="qsggeometry.xml#DrawingMode-enum">DrawTriangleStrip</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#setDrawingMode">setDrawingMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexCount">
<db:title>int QSGGeometry::indexCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of indices in this geometry object.</db:para>
</db:section>
<db:section xml:id="indexData">
<db:title>void *QSGGeometry::indexData()</db:title>
<db:methodsynopsis>
<db:type>void *</db:type>
<db:methodname>indexData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void * indexData()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the raw index data of this geometry object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#indexDataAsUShort">indexDataAsUShort</db:link>()</db:member>
<db:member><db:link xlink:href="qsggeometry.xml#indexDataAsUInt">indexDataAsUInt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexData-1">
<db:title>const void *QSGGeometry::indexData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const void *</db:type>
<db:methodname>indexData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const void * indexData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the raw index data of this geometry object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#indexDataAsUShort">indexDataAsUShort</db:link>()</db:member>
<db:member><db:link xlink:href="qsggeometry.xml#indexDataAsUInt">indexDataAsUInt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexDataAsUInt">
<db:title>uint *QSGGeometry::indexDataAsUInt()</db:title>
<db:methodsynopsis>
<db:type>uint *</db:type>
<db:methodname>indexDataAsUInt</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint * indexDataAsUInt()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to access the index data as a mutable array of 32-bit unsigned integers.</db:para>
</db:section>
<db:section xml:id="indexDataAsUInt-1">
<db:title>const uint *QSGGeometry::indexDataAsUInt() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const uint *</db:type>
<db:methodname>indexDataAsUInt</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const uint * indexDataAsUInt() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to access the index data as an immutable array of 32-bit unsigned integers.</db:para>
</db:section>
<db:section xml:id="indexDataAsUShort">
<db:title>quint16 *QSGGeometry::indexDataAsUShort()</db:title>
<db:methodsynopsis>
<db:type>quint16 *</db:type>
<db:methodname>indexDataAsUShort</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint16 * indexDataAsUShort()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to access the index data as a mutable array of 16-bit unsigned integers.</db:para>
</db:section>
<db:section xml:id="indexDataAsUShort-1">
<db:title>const quint16 *QSGGeometry::indexDataAsUShort() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const quint16 *</db:type>
<db:methodname>indexDataAsUShort</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const quint16 * indexDataAsUShort() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to access the index data as an immutable array of 16-bit unsigned integers.</db:para>
</db:section>
<db:section xml:id="indexDataPattern">
<db:title>QSGGeometry::DataPattern QSGGeometry::indexDataPattern() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSGGeometry::DataPattern</db:type>
<db:methodname>indexDataPattern</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGGeometry::DataPattern indexDataPattern() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the usage pattern for indices in this geometry. The default pattern is <db:link xlink:href="qsggeometry.xml#DataPattern-enum">AlwaysUploadPattern</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#setIndexDataPattern">setIndexDataPattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexType">
<db:title>int QSGGeometry::indexType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the primitive type used for indices in this geometry object.</db:para>
</db:section>
<db:section xml:id="lineWidth">
<db:title>float QSGGeometry::lineWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>lineWidth</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float lineWidth() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Gets the current line or point width or to be used for this geometry. This property only applies to line width when the <db:link xlink:href="qsggeometry.xml#drawingMode">drawingMode</db:link> is <db:link xlink:href="qsggeometry.xml#DrawingMode-enum">DrawLines</db:link>, DarwLineStrip, or <db:link xlink:href="qsggeometry.xml#DrawingMode-enum">DrawLineLoop</db:link>. When supported, it also applies to point size when the <db:link xlink:href="qsggeometry.xml#drawingMode">drawingMode</db:link> is <db:link xlink:href="qsggeometry.xml#DrawingMode-enum">DrawPoints</db:link>.</db:para>
<db:para>The default value is <db:code>1.0</db:code></db:para>
<db:note>
<db:para>Support for point and line drawing may be limited at run time, depending on the platform and graphics API. For example, some APIs do not support point sprites and so setting a size other than 1 is not possible.</db:para>
</db:note>
<db:note>
<db:para>The width of <db:code>1.0</db:code> is always supported.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#setLineWidth">setLineWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qsggeometry.xml#drawingMode">drawingMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="markIndexDataDirty">
<db:title>void QSGGeometry::markIndexDataDirty()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>markIndexDataDirty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void markIndexDataDirty()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Mark that the vertices in this geometry has changed and must be uploaded again.</db:para>
<db:para>This function only has an effect when the usage pattern for vertices is StaticData and the renderer that renders this geometry uploads the geometry into Vertex Buffer Objects (VBOs).</db:para>
</db:section>
<db:section xml:id="markVertexDataDirty">
<db:title>void QSGGeometry::markVertexDataDirty()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>markVertexDataDirty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void markVertexDataDirty()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Mark that the vertices in this geometry has changed and must be uploaded again.</db:para>
<db:para>This function only has an effect when the usage pattern for vertices is StaticData and the renderer that renders this geometry uploads the geometry into Vertex Buffer Objects (VBOs).</db:para>
</db:section>
<db:section xml:id="setDrawingMode">
<db:title>void QSGGeometry::setDrawingMode(unsigned int <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDrawingMode</db:methodname>
<db:methodparam>
<db:type>unsigned int</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDrawingMode(unsigned int mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">mode</db:code> to be used for drawing this geometry.</db:para>
<db:para>The default value is <db:link xlink:href="qsggeometry.xml#DrawingMode-enum">QSGGeometry::DrawTriangleStrip</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#drawingMode">drawingMode</db:link>()</db:member>
<db:member><db:link xlink:href="qsggeometry.xml#DrawingMode-enum">DrawingMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIndexDataPattern">
<db:title>void QSGGeometry::setIndexDataPattern(QSGGeometry::DataPattern <db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setIndexDataPattern</db:methodname>
<db:methodparam>
<db:type>QSGGeometry::DataPattern</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setIndexDataPattern(QSGGeometry::DataPattern p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the usage pattern for indices to <db:code role="parameter">p</db:code>.</db:para>
<db:para>The default is <db:link xlink:href="qsggeometry.xml#DataPattern-enum">AlwaysUploadPattern</db:link>. When set to anything other than the default, the user must call <db:link xlink:href="qsggeometry.xml#markIndexDataDirty">markIndexDataDirty</db:link>() after changing the index data, in addition to calling <db:link xlink:href="qsgnode.xml#markDirty">QSGNode::markDirty</db:link>() with <db:link xlink:href="qsgnode.xml#DirtyStateBit-enum">QSGNode::DirtyGeometry</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#indexDataPattern">indexDataPattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLineWidth">
<db:title>void QSGGeometry::setLineWidth(float <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLineWidth</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLineWidth(float width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the line or point width to be used for this geometry to <db:code role="parameter">width</db:code>. This property only applies to line width when the <db:link xlink:href="qsggeometry.xml#drawingMode">drawingMode</db:link> is <db:link xlink:href="qsggeometry.xml#DrawingMode-enum">DrawLines</db:link>, <db:link xlink:href="qsggeometry.xml#DrawingMode-enum">DrawLineStrip</db:link>, or <db:link xlink:href="qsggeometry.xml#DrawingMode-enum">DrawLineLoop</db:link>. When supported, it also applies to point size when the <db:link xlink:href="qsggeometry.xml#drawingMode">drawingMode</db:link> is <db:link xlink:href="qsggeometry.xml#DrawingMode-enum">DrawPoints</db:link>.</db:para>
<db:note>
<db:para>Support for point and line drawing may be limited at run time, depending on the platform and graphics API. For example, some APIs do not support point sprites and so setting a size other than 1 is not possible.</db:para>
</db:note>
<db:note>
<db:para>The width of <db:code>1.0</db:code> is always supported.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#lineWidth">lineWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qsggeometry.xml#drawingMode">drawingMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVertexDataPattern">
<db:title>void QSGGeometry::setVertexDataPattern(QSGGeometry::DataPattern <db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVertexDataPattern</db:methodname>
<db:methodparam>
<db:type>QSGGeometry::DataPattern</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVertexDataPattern(QSGGeometry::DataPattern p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the usage pattern for vertices to <db:code role="parameter">p</db:code>.</db:para>
<db:para>The default is <db:link xlink:href="qsggeometry.xml#DataPattern-enum">AlwaysUploadPattern</db:link>. When set to anything other than the default, the user must call <db:link xlink:href="qsggeometry.xml#markVertexDataDirty">markVertexDataDirty</db:link>() after changing the vertex data, in addition to calling <db:link xlink:href="qsgnode.xml#markDirty">QSGNode::markDirty</db:link>() with <db:link xlink:href="qsgnode.xml#DirtyStateBit-enum">QSGNode::DirtyGeometry</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#vertexDataPattern">vertexDataPattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeOfIndex">
<db:title>int QSGGeometry::sizeOfIndex() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>sizeOfIndex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int sizeOfIndex() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the byte size of the index type.</db:para>
<db:para>This value is either <db:code>2</db:code> when the index type is <db:link xlink:href="qsggeometry.xml#Type-enum">UnsignedShortType</db:link>, or <db:code>4</db:code> when the index type is <db:link xlink:href="qsggeometry.xml#Type-enum">UnsignedIntType</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeOfVertex">
<db:title>int QSGGeometry::sizeOfVertex() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>sizeOfVertex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int sizeOfVertex() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size in bytes of one vertex.</db:para>
<db:para>This value comes from the attributes.</db:para>
</db:section>
<db:section xml:id="updateColoredRectGeometry">
<db:title>[static] void QSGGeometry::updateColoredRectGeometry(QSGGeometry *<db:emphasis>g</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>updateColoredRectGeometry</db:methodname>
<db:methodparam>
<db:type>QSGGeometry *</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateColoredRectGeometry(QSGGeometry *g, const QRectF &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Updates the geometry <db:code role="parameter">g</db:code> with the coordinates in <db:code role="parameter">rect</db:code>.</db:para>
<db:para>The function assumes the geometry object contains a single triangle strip of <db:link xlink:href="qsggeometry-coloredpoint2d.xml">QSGGeometry::ColoredPoint2D</db:link> vertices</db:para>
</db:section>
<db:section xml:id="updateRectGeometry">
<db:title>[static] void QSGGeometry::updateRectGeometry(QSGGeometry *<db:emphasis>g</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>updateRectGeometry</db:methodname>
<db:methodparam>
<db:type>QSGGeometry *</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateRectGeometry(QSGGeometry *g, const QRectF &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Updates the geometry <db:code role="parameter">g</db:code> with the coordinates in <db:code role="parameter">rect</db:code>.</db:para>
<db:para>The function assumes the geometry object contains a single triangle strip of <db:link xlink:href="qsggeometry-point2d.xml">QSGGeometry::Point2D</db:link> vertices</db:para>
</db:section>
<db:section xml:id="updateTexturedRectGeometry">
<db:title>[static] void QSGGeometry::updateTexturedRectGeometry(QSGGeometry *<db:emphasis>g</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>, const QRectF &amp;<db:emphasis>textureRect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>updateTexturedRectGeometry</db:methodname>
<db:methodparam>
<db:type>QSGGeometry *</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>textureRect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateTexturedRectGeometry(QSGGeometry *g, const QRectF &amp;rect, const QRectF &amp;textureRect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Updates the geometry <db:code role="parameter">g</db:code> with the coordinates in <db:code role="parameter">rect</db:code> and texture coordinates from <db:code role="parameter">textureRect</db:code>.</db:para>
<db:para><db:code role="parameter">textureRect</db:code> should be in normalized coordinates.</db:para>
<db:para><db:code role="parameter">g</db:code> is assumed to be a triangle strip of four vertices of type <db:link xlink:href="qsggeometry-texturedpoint2d.xml">QSGGeometry::TexturedPoint2D</db:link>.</db:para>
</db:section>
<db:section xml:id="vertexCount">
<db:title>int QSGGeometry::vertexCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>vertexCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int vertexCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of vertices in this geometry object.</db:para>
</db:section>
<db:section xml:id="vertexData">
<db:title>void *QSGGeometry::vertexData()</db:title>
<db:methodsynopsis>
<db:type>void *</db:type>
<db:methodname>vertexData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void * vertexData()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the raw vertex data of this geometry object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#vertexDataAsPoint2D">vertexDataAsPoint2D</db:link>()</db:member>
<db:member><db:link xlink:href="qsggeometry.xml#vertexDataAsTexturedPoint2D">vertexDataAsTexturedPoint2D</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="vertexData-1">
<db:title>const void *QSGGeometry::vertexData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const void *</db:type>
<db:methodname>vertexData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const void * vertexData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the raw vertex data of this geometry object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#vertexDataAsPoint2D">vertexDataAsPoint2D</db:link>()</db:member>
<db:member><db:link xlink:href="qsggeometry.xml#vertexDataAsTexturedPoint2D">vertexDataAsTexturedPoint2D</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="vertexDataAsColoredPoint2D">
<db:title>QSGGeometry::ColoredPoint2D *QSGGeometry::vertexDataAsColoredPoint2D()</db:title>
<db:methodsynopsis>
<db:type>QSGGeometry::ColoredPoint2D *</db:type>
<db:methodname>vertexDataAsColoredPoint2D</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGGeometry::ColoredPoint2D * vertexDataAsColoredPoint2D()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to access the vertex data as a mutable array of <db:link xlink:href="qsggeometry-coloredpoint2d.xml">QSGGeometry::ColoredPoint2D</db:link>.</db:para>
</db:section>
<db:section xml:id="vertexDataAsColoredPoint2D-1">
<db:title>const QSGGeometry::ColoredPoint2D *QSGGeometry::vertexDataAsColoredPoint2D() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QSGGeometry::ColoredPoint2D *</db:type>
<db:methodname>vertexDataAsColoredPoint2D</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QSGGeometry::ColoredPoint2D * vertexDataAsColoredPoint2D() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to access the vertex data as an immutable array of <db:link xlink:href="qsggeometry-coloredpoint2d.xml">QSGGeometry::ColoredPoint2D</db:link>.</db:para>
</db:section>
<db:section xml:id="vertexDataAsPoint2D">
<db:title>QSGGeometry::Point2D *QSGGeometry::vertexDataAsPoint2D()</db:title>
<db:methodsynopsis>
<db:type>QSGGeometry::Point2D *</db:type>
<db:methodname>vertexDataAsPoint2D</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGGeometry::Point2D * vertexDataAsPoint2D()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to access the vertex data as a mutable array of <db:link xlink:href="qsggeometry-point2d.xml">QSGGeometry::Point2D</db:link>.</db:para>
</db:section>
<db:section xml:id="vertexDataAsPoint2D-1">
<db:title>const QSGGeometry::Point2D *QSGGeometry::vertexDataAsPoint2D() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QSGGeometry::Point2D *</db:type>
<db:methodname>vertexDataAsPoint2D</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QSGGeometry::Point2D * vertexDataAsPoint2D() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to access the vertex data as an immutable array of <db:link xlink:href="qsggeometry-point2d.xml">QSGGeometry::Point2D</db:link>.</db:para>
</db:section>
<db:section xml:id="vertexDataAsTexturedPoint2D">
<db:title>QSGGeometry::TexturedPoint2D *QSGGeometry::vertexDataAsTexturedPoint2D()</db:title>
<db:methodsynopsis>
<db:type>QSGGeometry::TexturedPoint2D *</db:type>
<db:methodname>vertexDataAsTexturedPoint2D</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGGeometry::TexturedPoint2D * vertexDataAsTexturedPoint2D()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to access the vertex data as a mutable array of <db:link xlink:href="qsggeometry-texturedpoint2d.xml">QSGGeometry::TexturedPoint2D</db:link>.</db:para>
</db:section>
<db:section xml:id="vertexDataAsTexturedPoint2D-1">
<db:title>const QSGGeometry::TexturedPoint2D *QSGGeometry::vertexDataAsTexturedPoint2D() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QSGGeometry::TexturedPoint2D *</db:type>
<db:methodname>vertexDataAsTexturedPoint2D</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QSGGeometry::TexturedPoint2D * vertexDataAsTexturedPoint2D() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to access the vertex data as an immutable array of <db:link xlink:href="qsggeometry-texturedpoint2d.xml">QSGGeometry::TexturedPoint2D</db:link>.</db:para>
</db:section>
<db:section xml:id="vertexDataPattern">
<db:title>QSGGeometry::DataPattern QSGGeometry::vertexDataPattern() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSGGeometry::DataPattern</db:type>
<db:methodname>vertexDataPattern</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGGeometry::DataPattern vertexDataPattern() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the usage pattern for vertices in this geometry. The default pattern is <db:link xlink:href="qsggeometry.xml#DataPattern-enum">AlwaysUploadPattern</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#setVertexDataPattern">setVertexDataPattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
