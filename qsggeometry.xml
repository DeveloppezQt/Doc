<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSGGeometry Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link> class provides low-level storage for graphics primitives in the <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml">Qt Quick Scene Graph</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSGGeometry</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link> class stores the geometry of the primitives rendered with the scene graph. It contains vertex data and optionally index data. The mode used to draw the geometry is specified with <db:link xlink:href="qsggeometry.xml#setDrawingMode">setDrawingMode</db:link>(), which maps directly to the OpenGL drawing mode, such as <db:code>GL_TRIANGLE_STRIP</db:code>, <db:code>GL_TRIANGLES</db:code>, or <db:code>GL_POINTS</db:code>.</db:para>
<db:para>Vertices can be as simple as points defined by x and y values or can be more complex where each vertex contains a normal, texture coordinates and a 3D position. The <db:link xlink:href="qsggeometry-attributeset.xml">QSGGeometry::AttributeSet</db:link> is used to describe how the vertex data is built up. The attribute set can only be specified on construction. The <db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link> class provides a few convenience attributes and attribute sets by default. The <db:link xlink:href="qsggeometry.xml#defaultAttributes_Point2D">defaultAttributes_Point2D</db:link>() function returns an attribute set to be used in normal solid color rectangles, while the <db:link xlink:href="qsggeometry.xml#defaultAttributes_TexturedPoint2D">defaultAttributes_TexturedPoint2D</db:link> function returns attributes to be used for textured 2D geometry. The vertex data is internally stored as a <db:code>void *</db:code> and is accessible with the <db:link xlink:href="qsggeometry.xml#vertexData">vertexData</db:link>() function. Convenience accessors for the common attribute sets are available with <db:link xlink:href="qsggeometry.xml#vertexDataAsPoint2D">vertexDataAsPoint2D</db:link>() and <db:link xlink:href="qsggeometry.xml#vertexDataAsTexturedPoint2D">vertexDataAsTexturedPoint2D</db:link>(). Vertex data is allocated by passing a vertex count to the constructor or by calling <db:link xlink:href="qsggeometry.xml#allocate">allocate</db:link>() later.</db:para>
<db:para>The <db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link> can optionally contain indices of either unsigned 32-bit, unsigned 16-bit, or unsigned 8-bit integers. The index type must be specified during construction and cannot be changed.</db:para>
<db:para>Below is a snippet illustrating how a geometry composed of position and color vertices can be built.</db:para>
<db:programlisting language="cpp">struct MyPoint2D {
    float x;
    float y;
    float r;
    float g;
    float b;
    float a;

    void set(float x_, float y_, float r_, float g_, float b_, float a_) {
        x = x_;
        y = y_;
        r = r_;
        g = g_;
        b = b_;
        a = a_;
    }
};

QSGGeometry::Attribute MyPoint2D_Attributes[] = {
    QSGGeometry::Attribute::create(0, 2, GL_FLOAT, true),
    QSGGeometry::Attribute::create(1, 4, GL_FLOAT, false)
};

QSGGeometry::AttributeSet MyPoint2D_AttributeSet = {
    2,
    sizeof(MyPoint2D),
    MyPoint2D_Attributes
};

...

geometry = new QSGGeometry(MyPoint2D_AttributeSet, 2);
geometry-&gt;setDrawingMode(GL_LINES);

MyPoint2D *vertices = static_cast&lt;MyPoint2D *&gt;(geometry-&gt;vertexData());
vertices[0].set(0, 0, 1, 0, 0, 1);
vertices[1].set(width(), height(), 0, 0, 1, 1);
</db:programlisting>
<db:para>The <db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link> is a software buffer and client-side in terms of OpenGL rendering, as the buffers used in 2D graphics typically consist of many small buffers that change every frame and do not benefit from being uploaded to graphics memory. However, the <db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link> supports hinting to the renderer that a buffer should be uploaded using the <db:link xlink:href="qsggeometry.xml#setVertexDataPattern">setVertexDataPattern</db:link>() and <db:link xlink:href="qsggeometry.xml#setIndexDataPattern">setIndexDataPattern</db:link>() functions. Whether this hint is respected or not is implementation specific.</db:para>
<db:note>
<db:para>All classes with QSG prefix should be used solely on the scene graph's rendering thread. See <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">Scene Graph and Rendering</db:link> for more information.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link></db:member>
<db:member><db:link xlink:href="qtquick-scenegraph-customgeometry-example.xml">Scene Graph - Custom Geometry</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DataPattern-enum">
<db:title>enum QSGGeometry::DataPattern</db:title>
<db:para>The DataPattern enum is used to specify the use pattern for the vertex and index data in a geometry object.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::AlwaysUploadPattern</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The data is always uploaded. This means that the user does not need to explicitly mark index and vertex data as dirty after changing it. This is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::DynamicPattern</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The data is modified repeatedly and drawn many times. This is a hint that may provide better performance. When set the user must make sure to mark the data as dirty after changing it.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::StaticPattern</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The data is modified once and drawn many times. This is a hint that may provide better performance. When set the user must make sure to mark the data as dirty after changing it.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link></db:emphasis>::StreamPattern</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The data is modified for almost every time it is drawn. This is a hint that may provide better performance. When set, the user must make sure to mark the data as dirty after changing it.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSGGeometry">
<db:title>QSGGeometry::QSGGeometry(const QSGGeometry::AttributeSet &amp;<db:emphasis>attributes</db:emphasis>, int <db:emphasis>vertexCount</db:emphasis>, int <db:emphasis>indexCount</db:emphasis> = 0, int <db:emphasis>indexType</db:emphasis> = GL_UNSIGNED_SHORT)</db:title>
<db:para>Constructs a geometry object based on <db:code role="parameter">attributes</db:code>.</db:para>
<db:para>The object allocate space for <db:code role="parameter">vertexCount</db:code> vertices based on the accumulated size in <db:code role="parameter">attributes</db:code> and for <db:code role="parameter">indexCount</db:code>.</db:para>
<db:para>The <db:code role="parameter">indexType</db:code> maps to the OpenGL index type and can be <db:code>GL_UNSIGNED_SHORT</db:code> and <db:code>GL_UNSIGNED_BYTE</db:code>. On OpenGL implementations that support it, such as desktop OpenGL, <db:code>GL_UNSIGNED_INT</db:code> can also be used.</db:para>
<db:para>Geometry objects are constructed with <db:code>GL_TRIANGLE_STRIP</db:code> as default drawing mode.</db:para>
<db:para>The attribute structure is assumed to be POD and the geometry object assumes this will not go away. There is no memory management involved.</db:para>
</db:section>
<db:section xml:id="dtor.QSGGeometry">
<db:title>[virtual noexcept] QSGGeometry::~QSGGeometry()</db:title>
<db:para>Destroys the geometry object and the vertex and index data it has allocated.</db:para>
</db:section>
<db:section xml:id="allocate">
<db:title>void QSGGeometry::allocate(int <db:emphasis>vertexCount</db:emphasis>, int <db:emphasis>indexCount</db:emphasis> = 0)</db:title>
<db:para>Resizes the vertex and index data of this geometry object to fit <db:code role="parameter">vertexCount</db:code> vertices and <db:code role="parameter">indexCount</db:code> indices.</db:para>
<db:para>Vertex and index data will be invalidated after this call and the caller must mark the associated geometry node as dirty, by calling node-&gt;markDirty(<db:link xlink:href="qsgnode.xml#DirtyStateBit-enum">QSGNode::DirtyGeometry</db:link>) to ensure that the renderer has a chance to update internal buffers.</db:para>
</db:section>
<db:section xml:id="attributeCount">
<db:title>int QSGGeometry::attributeCount() const</db:title>
<db:para>Returns the number of attributes in the attrbute set used by this geometry.</db:para>
</db:section>
<db:section xml:id="attributes">
<db:title>const QSGGeometry::Attribute *QSGGeometry::attributes() const</db:title>
<db:para>Returns an array with the attributes of this geometry. The size of the array is given with <db:link xlink:href="qsggeometry.xml#attributeCount">attributeCount</db:link>().</db:para>
</db:section>
<db:section xml:id="defaultAttributes_ColoredPoint2D">
<db:title>[static] const QSGGeometry::AttributeSet &amp;QSGGeometry::defaultAttributes_ColoredPoint2D()</db:title>
<db:para>Convenience function which returns attributes to be used for per vertex colored 2D drawing.</db:para>
</db:section>
<db:section xml:id="defaultAttributes_Point2D">
<db:title>[static] const QSGGeometry::AttributeSet &amp;QSGGeometry::defaultAttributes_Point2D()</db:title>
<db:para>Convenience function which returns attributes to be used for 2D solid color drawing.</db:para>
</db:section>
<db:section xml:id="defaultAttributes_TexturedPoint2D">
<db:title>[static] const QSGGeometry::AttributeSet &amp;QSGGeometry::defaultAttributes_TexturedPoint2D()</db:title>
<db:para>Convenience function which returns attributes to be used for textured 2D drawing.</db:para>
</db:section>
<db:section xml:id="drawingMode">
<db:title>GLenum QSGGeometry::drawingMode() const</db:title>
<db:para>Returns the drawing mode of this geometry.</db:para>
<db:para>The default value is <db:code>GL_TRIANGLE_STRIP</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#setDrawingMode">setDrawingMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexCount">
<db:title>int QSGGeometry::indexCount() const</db:title>
<db:para>Returns the number of indices in this geometry object.</db:para>
</db:section>
<db:section xml:id="indexData">
<db:title>void *QSGGeometry::indexData()</db:title>
<db:para>Returns a pointer to the raw index data of this geometry object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#indexDataAsUShort">indexDataAsUShort</db:link>()</db:member>
<db:member><db:link xlink:href="qsggeometry.xml#indexDataAsUInt">indexDataAsUInt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexData-1">
<db:title>const void *QSGGeometry::indexData() const</db:title>
<db:para>Returns a pointer to the raw index data of this geometry object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#indexDataAsUShort">indexDataAsUShort</db:link>()</db:member>
<db:member><db:link xlink:href="qsggeometry.xml#indexDataAsUInt">indexDataAsUInt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexDataAsUInt">
<db:title>uint *QSGGeometry::indexDataAsUInt()</db:title>
<db:para>Convenience function to access the index data as a mutable array of 32-bit unsigned integers.</db:para>
</db:section>
<db:section xml:id="indexDataAsUInt-1">
<db:title>const uint *QSGGeometry::indexDataAsUInt() const</db:title>
<db:para>Convenience function to access the index data as an immutable array of 32-bit unsigned integers.</db:para>
</db:section>
<db:section xml:id="indexDataAsUShort">
<db:title>quint16 *QSGGeometry::indexDataAsUShort()</db:title>
<db:para>Convenience function to access the index data as a mutable array of 16-bit unsigned integers.</db:para>
</db:section>
<db:section xml:id="indexDataAsUShort-1">
<db:title>const quint16 *QSGGeometry::indexDataAsUShort() const</db:title>
<db:para>Convenience function to access the index data as an immutable array of 16-bit unsigned integers.</db:para>
</db:section>
<db:section xml:id="indexDataPattern">
<db:title>QSGGeometry::DataPattern QSGGeometry::indexDataPattern() const</db:title>
<db:para>Returns the usage pattern for indices in this geometry. The default pattern is <db:link xlink:href="qsggeometry.xml#DataPattern-enum">AlwaysUploadPattern</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#setIndexDataPattern">setIndexDataPattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexType">
<db:title>int QSGGeometry::indexType() const</db:title>
<db:para>Returns the primitive type used for indices in this geometry object.</db:para>
</db:section>
<db:section xml:id="lineWidth">
<db:title>float QSGGeometry::lineWidth() const</db:title>
<db:para>Gets the current line or point width or to be used for this geometry. This property only applies to line width when the <db:link xlink:href="qsggeometry.xml#drawingMode">drawingMode</db:link> is <db:code>GL_LINES</db:code>, <db:code>GL_LINE_STRIP</db:code>, or <db:code>GL_LINE_LOOP</db:code>. For desktop OpenGL, it also applies to point size when the <db:link xlink:href="qsggeometry.xml#drawingMode">drawingMode</db:link> is <db:code>GL_POINTS</db:code>.</db:para>
<db:para>The default value is <db:code>1.0</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#setLineWidth">setLineWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qsggeometry.xml#drawingMode">drawingMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="markIndexDataDirty">
<db:title>void QSGGeometry::markIndexDataDirty()</db:title>
<db:para>Mark that the vertices in this geometry has changed and must be uploaded again.</db:para>
<db:para>This function only has an effect when the usage pattern for vertices is StaticData and the renderer that renders this geometry uploads the geometry into Vertex Buffer Objects (VBOs).</db:para>
</db:section>
<db:section xml:id="markVertexDataDirty">
<db:title>void QSGGeometry::markVertexDataDirty()</db:title>
<db:para>Mark that the vertices in this geometry has changed and must be uploaded again.</db:para>
<db:para>This function only has an effect when the usage pattern for vertices is StaticData and the renderer that renders this geometry uploads the geometry into Vertex Buffer Objects (VBOs).</db:para>
</db:section>
<db:section xml:id="setDrawingMode">
<db:title>void QSGGeometry::setDrawingMode(GLenum <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">mode</db:code> to be used for drawing this geometry.</db:para>
<db:para>The default value is <db:code>GL_TRIANGLE_STRIP</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#drawingMode">drawingMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIndexDataPattern">
<db:title>void QSGGeometry::setIndexDataPattern(QSGGeometry::DataPattern <db:emphasis>p</db:emphasis>)</db:title>
<db:para>Sets the usage pattern for indices to <db:code role="parameter">p</db:code>.</db:para>
<db:para>The default is <db:link xlink:href="qsggeometry.xml#DataPattern-enum">AlwaysUploadPattern</db:link>. When set to anything other than the default, the user must call <db:link xlink:href="qsggeometry.xml#markIndexDataDirty">markIndexDataDirty</db:link>() after changing the index data, in addition to calling <db:link xlink:href="qsgnode.xml#markDirty">QSGNode::markDirty</db:link>() with <db:link xlink:href="qsgnode.xml#DirtyStateBit-enum">QSGNode::DirtyGeometry</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#indexDataPattern">indexDataPattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLineWidth">
<db:title>void QSGGeometry::setLineWidth(float <db:emphasis>width</db:emphasis>)</db:title>
<db:para>Sets the line or point width to be used for this geometry to <db:code role="parameter">width</db:code>. This property only applies to line width when the <db:link xlink:href="qsggeometry.xml#drawingMode">drawingMode</db:link> is <db:code>GL_LINES</db:code>, <db:code>GL_LINE_STRIP</db:code>, or <db:code>GL_LINE_LOOP</db:code>. For Desktop OpenGL, it also applies to point size when the <db:link xlink:href="qsggeometry.xml#drawingMode">drawingMode</db:link> is <db:code>GL_POINTS</db:code>.</db:para>
<db:note>
<db:para>How line width and point size are treated is implementation dependent: The application should not rely on these, but rather create triangles or similar to draw areas. On OpenGL ES, line width support is limited and point size is unsupported.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#lineWidth">lineWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qsggeometry.xml#drawingMode">drawingMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVertexDataPattern">
<db:title>void QSGGeometry::setVertexDataPattern(QSGGeometry::DataPattern <db:emphasis>p</db:emphasis>)</db:title>
<db:para>Sets the usage pattern for vertices to <db:code role="parameter">p</db:code>.</db:para>
<db:para>The default is <db:link xlink:href="qsggeometry.xml#DataPattern-enum">AlwaysUploadPattern</db:link>. When set to anything other than the default, the user must call <db:link xlink:href="qsggeometry.xml#markVertexDataDirty">markVertexDataDirty</db:link>() after changing the vertex data, in addition to calling <db:link xlink:href="qsgnode.xml#markDirty">QSGNode::markDirty</db:link>() with <db:link xlink:href="qsgnode.xml#DirtyStateBit-enum">QSGNode::DirtyGeometry</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#vertexDataPattern">vertexDataPattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeOfIndex">
<db:title>int QSGGeometry::sizeOfIndex() const</db:title>
<db:para>Returns the byte size of the index type.</db:para>
<db:para>This value is either <db:code>1</db:code> when index type is <db:code>GL_UNSIGNED_BYTE</db:code> or <db:code>2</db:code> when index type is <db:code>GL_UNSIGNED_SHORT</db:code>. For Desktop OpenGL, <db:code>GL_UNSIGNED_INT</db:code> with the value <db:code>4</db:code> is also supported.</db:para>
</db:section>
<db:section xml:id="sizeOfVertex">
<db:title>int QSGGeometry::sizeOfVertex() const</db:title>
<db:para>Returns the size in bytes of one vertex.</db:para>
<db:para>This value comes from the attributes.</db:para>
</db:section>
<db:section xml:id="updateRectGeometry">
<db:title>[static] void QSGGeometry::updateRectGeometry(QSGGeometry *<db:emphasis>g</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>Updates the geometry <db:code role="parameter">g</db:code> with the coordinates in <db:code role="parameter">rect</db:code>.</db:para>
<db:para>The function assumes the geometry object contains a single triangle strip of <db:link xlink:href="qsggeometry-point2d.xml">QSGGeometry::Point2D</db:link> vertices</db:para>
</db:section>
<db:section xml:id="updateTexturedRectGeometry">
<db:title>[static] void QSGGeometry::updateTexturedRectGeometry(QSGGeometry *<db:emphasis>g</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>, const QRectF &amp;<db:emphasis>textureRect</db:emphasis>)</db:title>
<db:para>Updates the geometry <db:code role="parameter">g</db:code> with the coordinates in <db:code role="parameter">rect</db:code> and texture coordinates from <db:code role="parameter">textureRect</db:code>.</db:para>
<db:para><db:code role="parameter">textureRect</db:code> should be in normalized coordinates.</db:para>
<db:para><db:code role="parameter">g</db:code> is assumed to be a triangle strip of four vertices of type <db:link xlink:href="qsggeometry-texturedpoint2d.xml">QSGGeometry::TexturedPoint2D</db:link>.</db:para>
</db:section>
<db:section xml:id="vertexCount">
<db:title>int QSGGeometry::vertexCount() const</db:title>
<db:para>Returns the number of vertices in this geometry object.</db:para>
</db:section>
<db:section xml:id="vertexData">
<db:title>void *QSGGeometry::vertexData()</db:title>
<db:para>Returns a pointer to the raw vertex data of this geometry object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#vertexDataAsPoint2D">vertexDataAsPoint2D</db:link>()</db:member>
<db:member><db:link xlink:href="qsggeometry.xml#vertexDataAsTexturedPoint2D">vertexDataAsTexturedPoint2D</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="vertexData-1">
<db:title>const void *QSGGeometry::vertexData() const</db:title>
<db:para>Returns a pointer to the raw vertex data of this geometry object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#vertexDataAsPoint2D">vertexDataAsPoint2D</db:link>()</db:member>
<db:member><db:link xlink:href="qsggeometry.xml#vertexDataAsTexturedPoint2D">vertexDataAsTexturedPoint2D</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="vertexDataAsColoredPoint2D">
<db:title>QSGGeometry::ColoredPoint2D *QSGGeometry::vertexDataAsColoredPoint2D()</db:title>
<db:para>Convenience function to access the vertex data as a mutable array of <db:link xlink:href="qsggeometry-coloredpoint2d.xml">QSGGeometry::ColoredPoint2D</db:link>.</db:para>
</db:section>
<db:section xml:id="vertexDataAsColoredPoint2D-1">
<db:title>const QSGGeometry::ColoredPoint2D *QSGGeometry::vertexDataAsColoredPoint2D() const</db:title>
<db:para>Convenience function to access the vertex data as an immutable array of <db:link xlink:href="qsggeometry-coloredpoint2d.xml">QSGGeometry::ColoredPoint2D</db:link>.</db:para>
</db:section>
<db:section xml:id="vertexDataAsPoint2D">
<db:title>QSGGeometry::Point2D *QSGGeometry::vertexDataAsPoint2D()</db:title>
<db:para>Convenience function to access the vertex data as a mutable array of <db:link xlink:href="qsggeometry-point2d.xml">QSGGeometry::Point2D</db:link>.</db:para>
</db:section>
<db:section xml:id="vertexDataAsPoint2D-1">
<db:title>const QSGGeometry::Point2D *QSGGeometry::vertexDataAsPoint2D() const</db:title>
<db:para>Convenience function to access the vertex data as an immutable array of <db:link xlink:href="qsggeometry-point2d.xml">QSGGeometry::Point2D</db:link>.</db:para>
</db:section>
<db:section xml:id="vertexDataAsTexturedPoint2D">
<db:title>QSGGeometry::TexturedPoint2D *QSGGeometry::vertexDataAsTexturedPoint2D()</db:title>
<db:para>Convenience function to access the vertex data as a mutable array of <db:link xlink:href="qsggeometry-texturedpoint2d.xml">QSGGeometry::TexturedPoint2D</db:link>.</db:para>
</db:section>
<db:section xml:id="vertexDataAsTexturedPoint2D-1">
<db:title>const QSGGeometry::TexturedPoint2D *QSGGeometry::vertexDataAsTexturedPoint2D() const</db:title>
<db:para>Convenience function to access the vertex data as an immutable array of <db:link xlink:href="qsggeometry-texturedpoint2d.xml">QSGGeometry::TexturedPoint2D</db:link>.</db:para>
</db:section>
<db:section xml:id="vertexDataPattern">
<db:title>QSGGeometry::DataPattern QSGGeometry::vertexDataPattern() const</db:title>
<db:para>Returns the usage pattern for vertices in this geometry. The default pattern is <db:link xlink:href="qsggeometry.xml#DataPattern-enum">AlwaysUploadPattern</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsggeometry.xml#setVertexDataPattern">setVertexDataPattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
