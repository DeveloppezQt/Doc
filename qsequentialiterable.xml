<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSequentialIterable Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsequentialiterable.xml">QSequentialIterable</db:link> class is an iterable interface for a container in a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSequentialIterable</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qiterable.xml" xlink:role="class">QIterable</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class allows several methods of accessing the values of a container held within a <db:link xlink:href="qvariant.xml">QVariant</db:link>. An instance of <db:link xlink:href="qsequentialiterable.xml">QSequentialIterable</db:link> can be extracted from a <db:link xlink:href="qvariant.xml">QVariant</db:link> if it can be converted to a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link>.</db:para>
<db:programlisting language="cpp">QList&amp;lt;int&amp;gt; intList = {7, 11, 42};

QVariant variant = QVariant::fromValue(intList);
if (variant.canConvert&amp;lt;QVariantList&amp;gt;()) {
    QSequentialIterable iterable = variant.value&amp;lt;QSequentialIterable&amp;gt;();
    // Can use foreach:
    foreach (const QVariant &amp;amp;v, iterable) {
        qDebug() &amp;lt;&amp;lt; v;
    }
    // Can use C++11 range-for:
    for (const QVariant &amp;amp;v : iterable) {
        qDebug() &amp;lt;&amp;lt; v;
    }
    // Can use iterators:
    QSequentialIterable::const_iterator it = iterable.begin();
    const QSequentialIterable::const_iterator end = iterable.end();
    for ( ; it != end; ++it) {
        qDebug() &amp;lt;&amp;lt; *it;
    }
}
</db:programlisting>
<db:para>The container itself is not copied before iterating over it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvariant.xml">QVariant</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="BidirectionalConstIterator-typedef">
<db:title>[alias] QSequentialIterable::BidirectionalConstIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>BidirectionalConstIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes a <db:link xlink:href="qsequentialiterable.xml#const_iterator-typedef">const_iterator</db:link> using std::bidirectional_iterator_tag.</db:para>
</db:section>
<db:section xml:id="BidirectionalIterator-typedef">
<db:title>[alias] QSequentialIterable::BidirectionalIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>BidirectionalIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes an iterator using std::bidirectional_iterator_tag.</db:para>
</db:section>
<db:section xml:id="ForwardConstIterator-typedef">
<db:title>[alias] QSequentialIterable::ForwardConstIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>ForwardConstIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes a <db:link xlink:href="qsequentialiterable.xml#const_iterator-typedef">const_iterator</db:link> using std::forward_iterator_tag.</db:para>
</db:section>
<db:section xml:id="ForwardIterator-typedef">
<db:title>[alias] QSequentialIterable::ForwardIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>ForwardIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes an iterator using std::forward_iterator_tag.</db:para>
</db:section>
<db:section xml:id="InputConstIterator-typedef">
<db:title>[alias] QSequentialIterable::InputConstIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>InputConstIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes a <db:link xlink:href="qsequentialiterable.xml#const_iterator-typedef">const_iterator</db:link> using std::input_iterator_tag.</db:para>
</db:section>
<db:section xml:id="InputIterator-typedef">
<db:title>[alias] QSequentialIterable::InputIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>InputIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes an iterator using std::input_iterator_tag.</db:para>
</db:section>
<db:section xml:id="RandomAccessConstIterator-typedef">
<db:title>[alias] QSequentialIterable::RandomAccessConstIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>RandomAccessConstIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes a <db:link xlink:href="qsequentialiterable.xml#const_iterator-typedef">const_iterator</db:link> using std::random_access_iterator_tag.</db:para>
</db:section>
<db:section xml:id="RandomAccessIterator-typedef">
<db:title>[alias] QSequentialIterable::RandomAccessIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>RandomAccessIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Exposes an iterator using std::random_access_iterator_tag.</db:para>
</db:section>
<db:section xml:id="const_iterator-typedef">
<db:title>[alias] QSequentialIterable::const_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QSequentialIterable::const_iterator allows iteration over a container in a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>A QSequentialIterable::const_iterator can only be created by a <db:link xlink:href="qsequentialiterable.xml">QSequentialIterable</db:link> instance, and can be used in a way similar to other stl-style iterators.</db:para>
<db:programlisting language="cpp">QList&amp;lt;int&amp;gt; intList = {7, 11, 42};

QVariant variant = QVariant::fromValue(intList);
if (variant.canConvert&amp;lt;QVariantList&amp;gt;()) {
    QSequentialIterable iterable = variant.value&amp;lt;QSequentialIterable&amp;gt;();
    // Can use foreach:
    foreach (const QVariant &amp;amp;v, iterable) {
        qDebug() &amp;lt;&amp;lt; v;
    }
    // Can use C++11 range-for:
    for (const QVariant &amp;amp;v : iterable) {
        qDebug() &amp;lt;&amp;lt; v;
    }
    // Can use iterators:
    QSequentialIterable::const_iterator it = iterable.begin();
    const QSequentialIterable::const_iterator end = iterable.end();
    for ( ; it != end; ++it) {
        qDebug() &amp;lt;&amp;lt; *it;
    }
}

</db:programlisting>
</db:section>
<db:section xml:id="iterator-typedef">
<db:title>[alias, since 6.0] QSequentialIterable::iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QSequentialIterable::iterator allows iteration over a container in a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>A QSequentialIterable::iterator can only be created by a <db:link xlink:href="qsequentialiterable.xml">QSequentialIterable</db:link> instance, and can be used in a way similar to other stl-style iterators.</db:para>
<db:para>This typedef was introduced in Qt 6.0.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="addValue">
<db:title>void QSequentialIterable::addValue(const QVariant &amp;<db:emphasis>value</db:emphasis>, QSequentialIterable::Position <db:emphasis>position</db:emphasis> = Unspecified)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addValue</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSequentialIterable::Position</db:type>
<db:parameter>position</db:parameter>
<db:initializer>Unspecified</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addValue(const QVariant &amp;value, QSequentialIterable::Position position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">value</db:code> to the container, at <db:code role="parameter">position</db:code>, if possible.</db:para>
</db:section>
<db:section xml:id="at">
<db:title>QVariant QSequentialIterable::at(qsizetype <db:emphasis>idx</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>at</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>idx</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant at(qsizetype idx) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value at position <db:code role="parameter">idx</db:code> in the container.</db:para>
</db:section>
<db:section xml:id="removeValue">
<db:title>void QSequentialIterable::removeValue(QSequentialIterable::Position <db:emphasis>position</db:emphasis> = Unspecified)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeValue</db:methodname>
<db:methodparam>
<db:type>QSequentialIterable::Position</db:type>
<db:parameter>position</db:parameter>
<db:initializer>Unspecified</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeValue(QSequentialIterable::Position position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes a value from the container, at <db:code role="parameter">position</db:code>, if possible.</db:para>
</db:section>
<db:section xml:id="set">
<db:title>void QSequentialIterable::set(qsizetype <db:emphasis>idx</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>set</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>idx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void set(qsizetype idx, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the element at position <db:code role="parameter">idx</db:code> in the container to <db:code role="parameter">value</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
