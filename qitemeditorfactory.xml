<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QItemEditorFactory Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qitemeditorfactory.xml">QItemEditorFactory</db:link> class provides widgets for editing item data in views and delegates.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QItemEditorFactory</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QItemEditorFactory is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>When editing data in an item view, editors are created and displayed by a delegate. <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link>, which is the delegate by default installed on Qt's item views, uses a <db:link xlink:href="qitemeditorfactory.xml">QItemEditorFactory</db:link> to create editors for it. A default unique instance provided by <db:link xlink:href="qitemeditorfactory.xml">QItemEditorFactory</db:link> is used by all item delegates. If you set a new default factory with <db:link xlink:href="qitemeditorfactory.xml#setDefaultFactory">setDefaultFactory</db:link>(), the new factory will be used by existing and new delegates.</db:para>
<db:para>A factory keeps a collection of <db:link xlink:href="qitemeditorcreatorbase.xml">QItemEditorCreatorBase</db:link> instances, which are specialized editors that produce editors for one particular <db:link xlink:href="qvariant.xml">QVariant</db:link> data type (All Qt models store their data in <db:link xlink:href="qvariant.xml">QVariant</db:link>s).</db:para>
<db:section xml:id="standard-editing-widgets">
<db:title>Standard Editing Widgets</db:title>
<db:para>The standard factory implementation provides editors for a variety of data types. These are created whenever a delegate needs to provide an editor for data supplied by a model. The following table shows the relationship between types and the standard editors provided.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Editor Widget</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>bool</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>double</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdoublespinbox.xml">QDoubleSpinBox</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>int</db:para>
</db:td>
<db:td rowspan="2">
<db:para><db:link xlink:href="qspinbox.xml">QSpinBox</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>unsigned int</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdate.xml">QDate</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdateedit.xml">QDateEdit</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qpixmap.xml">QPixmap</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlabel.xml">QLabel</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qtime.xml">QTime</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtimeedit.xml">QTimeEdit</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Additional editors can be registered with the <db:link xlink:href="qitemeditorfactory.xml#registerEditor">registerEditor</db:link>() function.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QItemEditorFactory">
<db:title>QItemEditorFactory::QItemEditorFactory()</db:title>
<db:para>Constructs a new item editor factory.</db:para>
</db:section>
<db:section xml:id="dtor.QItemEditorFactory">
<db:title>[virtual noexcept] QItemEditorFactory::~QItemEditorFactory()</db:title>
<db:para>Destroys the item editor factory.</db:para>
</db:section>
<db:section xml:id="createEditor">
<db:title>[virtual] QWidget *QItemEditorFactory::createEditor(int <db:emphasis>userType</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis>) const</db:title>
<db:para>Creates an editor widget with the given <db:code role="parameter">parent</db:code> for the specified <db:code role="parameter">userType</db:code> of data, and returns it as a <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemeditorfactory.xml#registerEditor">registerEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultFactory">
<db:title>[static] const QItemEditorFactory *QItemEditorFactory::defaultFactory()</db:title>
<db:para>Returns the default item editor factory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemeditorfactory.xml#setDefaultFactory">setDefaultFactory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerEditor">
<db:title>void QItemEditorFactory::registerEditor(int <db:emphasis>userType</db:emphasis>, QItemEditorCreatorBase *<db:emphasis>creator</db:emphasis>)</db:title>
<db:para>Registers an item editor creator specified by <db:code role="parameter">creator</db:code> for the given <db:code role="parameter">userType</db:code> of data.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The factory takes ownership of the item editor creator and will destroy it if a new creator for the same type is registered later.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemeditorfactory.xml#createEditor">createEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultFactory">
<db:title>[static] void QItemEditorFactory::setDefaultFactory(QItemEditorFactory *<db:emphasis>factory</db:emphasis>)</db:title>
<db:para>Sets the default item editor factory to the given <db:code role="parameter">factory</db:code>. Both new and existing delegates will use the new factory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemeditorfactory.xml#defaultFactory">defaultFactory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valuePropertyName">
<db:title>[virtual] QByteArray QItemEditorFactory::valuePropertyName(int <db:emphasis>userType</db:emphasis>) const</db:title>
<db:para>Returns the property name used to access data for the given <db:code role="parameter">userType</db:code> of data.</db:para>
</db:section>
</db:section>
</db:article>
