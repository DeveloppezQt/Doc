<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Image Scaling</db:title>
<db:productname>QtConcurrent</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Concurrent Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to asynchronously download and scale images.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example shows how to use the <db:link xlink:href="qfuture.xml">QFuture</db:link>, <db:link xlink:href="qpromise.xml">QPromise</db:link>, and <db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link> classes to download a collection of images from the network and scale them, without blocking the UI.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/imagescaling.webp"/>
</db:imageobject>
</db:mediaobject>
<db:para>The application consists of the following steps:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Download images form the list of URLs specified by the user.</db:para>
</db:listitem>
<db:listitem>
<db:para>Scale the images.</db:para>
</db:listitem>
<db:listitem>
<db:para>Show the scaled images in a grid layout.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Let's start with the download:</db:para>
<db:programlisting language="cpp">QFuture&amp;lt;QByteArray&amp;gt; Images::download(const QList&amp;lt;QUrl&amp;gt; &amp;amp;urls)
{
</db:programlisting>
<db:para>The <db:code>download()</db:code> method takes a list of URLs and returns a <db:link xlink:href="qfuture.xml">QFuture</db:link>. The <db:link xlink:href="qfuture.xml">QFuture</db:link> stores the byte array data received for each downloaded image. To store the data inside the <db:link xlink:href="qfuture.xml">QFuture</db:link>, we create a <db:link xlink:href="qpromise.xml">QPromise</db:link> object and report that it has started to indicate the start of the download:</db:para>
<db:programlisting language="cpp">    QSharedPointer&amp;lt;QPromise&amp;lt;QByteArray&amp;gt;&amp;gt; promise(new QPromise&amp;lt;QByteArray&amp;gt;());
    promise-&amp;gt;start();
    ...
    return promise-&amp;gt;future();
}
</db:programlisting>
<db:para>The future associated with the promise is returned to the caller.</db:para>
<db:para>Without going into details yet, let's note that the promise object is wrapped inside a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>. This will be explained later.</db:para>
<db:para>We use <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> to send network requests and download data for each url:</db:para>
<db:programlisting language="cpp">for (const auto &amp;amp;url : urls) {
    QSharedPointer&amp;lt;QNetworkReply&amp;gt; reply(qnam.get(QNetworkRequest(url)));
    replies.push_back(reply);
</db:programlisting>
<db:para>And here starts the interesting part:</db:para>
<db:programlisting language="cpp">    QtFuture::connect(reply.get(), &amp;amp;QNetworkReply::finished).then([=] {
        if (promise-&amp;gt;isCanceled()) {
            if (!promise-&amp;gt;future().isFinished())
                promise-&amp;gt;finish();
            return;
        }

        if (reply-&amp;gt;error() != QNetworkReply::NoError) {
            if (!promise-&amp;gt;future().isFinished())
                throw reply-&amp;gt;error();
        }
        promise-&amp;gt;addResult(reply-&amp;gt;readAll());

        // Report finished on the last download
        if (promise-&amp;gt;future().resultCount() == urls.size())
            promise-&amp;gt;finish();
    }).onFailed([promise] (QNetworkReply::NetworkError error) {
        promise-&amp;gt;setException(std::make_exception_ptr(error));
        promise-&amp;gt;finish();
    }).onFailed([promise] {
        const auto ex = std::make_exception_ptr(
                    std::runtime_error(&quot;Unknown error occurred while downloading.&quot;));
        promise-&amp;gt;setException(ex);
        promise-&amp;gt;finish();
    });
}
    ...
</db:programlisting>
<db:para>Instead of connecting to <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>'s signals using the <db:link xlink:href="qobject.xml#connect">QObject::connect</db:link>() method, we use <db:link xlink:href="qtfuture.xml#connect">QtFuture::connect</db:link>(). It works similar to <db:link xlink:href="qobject.xml#connect">QObject::connect</db:link>(), but returns a <db:link xlink:href="qfuture.xml">QFuture</db:link> object, that becomes available as soon as the <db:link xlink:href="qnetworkreply.xml#finished">QNetworkReply::finished</db:link>() signal is emitted. This allows us to attach continuations and failure handlers, as it is done in the example.</db:para>
<db:para>In the continuation attached via <db:link xlink:href="qfuture.xml#then">.then</db:link>(), we check if the user has requested to cancel the download. If that's the case, we stop processing the request. By calling the <db:link xlink:href="qpromise.xml#finish">QPromise::finish</db:link>() method, we notify the user that processing has been finished. In case the network request has ended with an error, we throw an exception. The exception will be handled in the failure handler attached using the <db:link xlink:href="qfuture.xml#onFailed">.onFailed</db:link>() method. Note that we have two failure handlers: the first one captures the network errors, the second one all other exceptions thrown during the execution. Both handlers save the exception inside the promise object (to be handled by the caller of the <db:code>download()</db:code> method) and report that the computation has finished. Also note that, for simplicity, in case of an error we interrupt all pending downloads.</db:para>
<db:para>If the request has not been canceled and no error occurred, we read the data from the network reply and add it to the list of results of the promise object:</db:para>
<db:programlisting language="cpp">    ...
    promise-&amp;gt;addResult(reply-&amp;gt;readAll());

    // Report finished on the last download
    if (promise-&amp;gt;future().resultCount() == urls.size())
        promise-&amp;gt;finish();
    ...
</db:programlisting>
<db:para>If the number of results stored inside the promise object is equal to the number of the <db:code>url</db:code>s to be downloaded, there are no more requests to process, so we also report that the promise has finished.</db:para>
<db:para>As mentioned earlier, we've wrapped the promise inside a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>. Since the promise object is shared between handlers connected to each network reply, we need to copy and use the promise object in multiple places simultaneously. Hence, a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> is used.</db:para>
<db:para>The <db:code>download()</db:code> method is called from the <db:code>Images::process</db:code> method. It is invoked when the user presses the <db:emphasis>&quot;Add URLs&quot;</db:emphasis> button:</db:para>
<db:programlisting language="cpp">    ...
    connect(addUrlsButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Images::process);
    ...
</db:programlisting>
<db:para>After clearing the possible leftovers from previous download, we create a dialog so that the user can specify the URLs for the images to download. Based on the specified URL count, we initialize the layout where the images will be shown and start the download. The future returned by the <db:code>download()</db:code> method is saved, so that the user can cancel the download if needed:</db:para>
<db:programlisting language="cpp">void Images::process()
{
    // Clean previous state
    replies.clear();
    addUrlsButton-&amp;gt;setEnabled(false);

    if (downloadDialog-&amp;gt;exec() == QDialog::Accepted) {

        const auto urls = downloadDialog-&amp;gt;getUrls();
        if (urls.empty())
            return;

        cancelButton-&amp;gt;setEnabled(true);

        initLayout(urls.size());

        downloadFuture = download(urls);
        statusBar-&amp;gt;showMessage(tr(&quot;Downloading...&quot;));
    ...
</db:programlisting>
<db:para>Next, we attach a continuation to handle the scaling step. More on that later:</db:para>
<db:programlisting language="cpp">downloadFuture
        .then([this](auto) {
            cancelButton-&amp;gt;setEnabled(false);
            updateStatus(tr(&quot;Scaling...&quot;));
            scalingWatcher.setFuture(QtConcurrent::run(Images::scaled,
                                                       downloadFuture.results()));
        })
    ...
</db:programlisting>
<db:para>After that we attach <db:link xlink:href="qfuture.xml#onCanceled">onCanceled</db:link>() and <db:link xlink:href="qfuture.xml#onFailed">onFailed</db:link>() handlers:</db:para>
<db:programlisting language="cpp">        .onCanceled([this] {
            updateStatus(tr(&quot;Download has been canceled.&quot;));
        })
        .onFailed([this](QNetworkReply::NetworkError error) {
            updateStatus(tr(&quot;Download finished with error: %1&quot;).arg(error));
            // Abort all pending requests
            abortDownload();
        })
        .onFailed([this](const std::exception &amp;amp;ex) {
            updateStatus(tr(ex.what()));
        })
    ...
</db:programlisting>
<db:para>The handler attached via the <db:link xlink:href="qfuture.xml#onCanceled">.onCanceled</db:link>() method will be called if the user has pressed the <db:emphasis>&quot;Cancel&quot;</db:emphasis> button:</db:para>
<db:programlisting language="cpp">    ...
    connect(cancelButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Images::cancel);
    ...
</db:programlisting>
<db:para>The <db:code>cancel()</db:code> method simply aborts all the pending requests:</db:para>
<db:programlisting language="cpp">void Images::cancel()
{
    statusBar-&amp;gt;showMessage(tr(&quot;Canceling...&quot;));

    downloadFuture.cancel();
    abortDownload();
}
</db:programlisting>
<db:para>The handlers attached via <db:link xlink:href="qfuture.xml#onFailed">.onFailed</db:link>() method will be called in case an error occurred during one of the previous steps. For example, if a network error has been saved inside the promise during the download step, it will be propagated to the handler that takes <db:link xlink:href="qnetworkreply.xml#NetworkError-enum">QNetworkReply::NetworkError</db:link> as argument.</db:para>
<db:para>If the <db:code>downloadFuture</db:code> is not canceled, and didn't report any error, the scaling continuation is executed.</db:para>
<db:para>Since the scaling may be computationally heavy, and we don't want to block the main thread, we use <db:link xlink:href="concurrent-changes-qt6.xml#qtconcurrent-run">QtConcurrent::run()</db:link>, to launch the scaling step in a new thread.</db:para>
<db:programlisting language="cpp">scalingWatcher.setFuture(QtConcurrent::run(Images::scaled,
                                           downloadFuture.results()));
</db:programlisting>
<db:para>Since the scaling is launched in a separate thread, the user can potentially decide to close the application while the scaling operation is in progress. To handle such situations gracefully, we pass the <db:link xlink:href="qfuture.xml">QFuture</db:link> returned by <db:link xlink:href="concurrent-changes-qt6.xml#qtconcurrent-run">QtConcurrent::run()</db:link> to the <db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link> instance.</db:para>
<db:para>The watcher's <db:link xlink:href="qfuturewatcher.xml#finished">QFutureWatcher::finished</db:link> signal is connected to the <db:code>Images::scaleFinished</db:code> slot:</db:para>
<db:programlisting language="cpp">    connect(&amp;amp;scalingWatcher, &amp;amp;QFutureWatcher&amp;lt;QList&amp;lt;QImage&amp;gt;&amp;gt;::finished,
            this, &amp;amp;Images::scaleFinished);
</db:programlisting>
<db:para>This slot is responsible for showing the scaled images in the UI, and also for handling the errors that could potentially happen during scaling:</db:para>
<db:programlisting language="cpp">void Images::scaleFinished()
{
    const OptionalImages result = scalingWatcher.result();
    if (result.has_value()) {
        const auto scaled = result.value();
        showImages(scaled);
        updateStatus(tr(&quot;Finished&quot;));
    } else {
        updateStatus(tr(&quot;Failed to extract image data.&quot;));
    }
    addUrlsButton-&amp;gt;setEnabled(true);
}
</db:programlisting>
<db:para>The error reporting is implemented by returning an optional from the <db:code>Images::scaled()</db:code> method:</db:para>
<db:programlisting language="cpp">Images::OptionalImages Images::scaled(const QList&amp;lt;QByteArray&amp;gt; &amp;amp;data)
{
    QList&amp;lt;QImage&amp;gt; scaled;
    for (const auto &amp;amp;imgData : data) {
        QImage image;
        image.loadFromData(imgData);
        if (image.isNull())
            return std::nullopt;

        scaled.push_back(image.scaled(100, 100, Qt::KeepAspectRatio));
    }

    return scaled;
}
</db:programlisting>
<db:para>The <db:code>Images::OptionalImages</db:code> type here is simply a typedef for <db:code>std::optional</db:code>:</db:para>
<db:programlisting language="cpp">using OptionalImages = std::optional&amp;lt;QList&amp;lt;QImage&amp;gt;&amp;gt;;
</db:programlisting>
<db:note>
<db:para>We cannot handle the errors from the async scaling operation using the <db:link xlink:href="qfuture.xml#onFailed">.onFailed</db:link>() handler, because the handler needs to be executed in the context of <db:code>Images</db:code> object in the UI thread. If the user closes the application while the async computation is done, the <db:code>Images</db:code> object will be destroyed, and accessing its members from the continuation will lead to a crash. Using <db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link> and its signals allows us to avoid the problem, because the signals are disconnected when the <db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link> is destroyed, so the related slots will never be executed in a destroyed context.</db:para>
</db:note>
<db:para>The rest of the code is straightforward, you can check the example project for more details.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/qtconcurrent/imagescaling?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
