<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Creating Project Files</db:title>
<db:productname>QMake</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>QMake Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-tutorial.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Getting Started with qmake"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-common-projects.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Building Common Project Types"/></db:extendedlink>
<db:abstract>
<db:para>QMake Manual.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Project files contain all the information required by qmake to build your application, library, or plugin. Generally, you use a series of declarations to specify the resources in the project, but support for simple programming constructs enables you to describe different build processes for different platforms and environments.</db:para>
<db:section xml:id="project-file-elements">
<db:title>Project File Elements</db:title>
<db:para>The project file format used by qmake can be used to support both simple and fairly complex build systems. Simple project files use a straightforward declarative style, defining standard variables to indicate the source and header files that are used in the project. Complex projects may use control flow structures to fine-tune the build process.</db:para>
<db:para>The following sections describe the different types of elements used in project files.</db:para>
<db:section xml:id="variables">
<db:title>Variables</db:title>
<db:para>In a project file, variables are used to hold lists of strings. In the simplest projects, these variables inform qmake about the configuration options to use, or supply filenames and paths to use in the build process.</db:para>
<db:para>qmake looks for certain variables in each project file, and it uses the contents of these to determine what it should write to a Makefile. For example, the lists of values in the <db:link xlink:href="qmake-variable-reference.xml#headers">HEADERS</db:link> and <db:link xlink:href="qmake-variable-reference.xml#sources">SOURCES</db:link> variables are used to tell qmake about header and source files in the same directory as the project file.</db:para>
<db:para>Variables can also be used internally to store temporary lists of values, and existing lists of values can be overwritten or extended with new values.</db:para>
<db:para>The following snippet illustrates how lists of values are assigned to variables:</db:para>
<db:programlisting language="cpp">HEADERS = mainwindow.h paintwidget.h
</db:programlisting>
<db:para>The list of values in a variable is extended in the following way:</db:para>
<db:programlisting language="cpp">SOURCES = main.cpp mainwindow.cpp \
          paintwidget.cpp
CONFIG += console
</db:programlisting>
<db:note>
<db:para>The first assignment only includes values that are specified on the same line as the <db:code>HEADERS</db:code> variable. The second assignment splits the values in the <db:code>SOURCES</db:code> variable across lines by using a backslash (\).</db:para>
</db:note>
<db:para>The <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> variable is another special variable that qmake uses when generating a Makefile. It is discussed in <db:link xlink:href="qmake-project-files.xml#general-configuration">General Configuration</db:link>. In the snippet above, <db:code>console</db:code> is added to the list of existing values contained in <db:code>CONFIG</db:code>.</db:para>
<db:para>The following table lists some frequently used variables and describes their contents. For a full list of variables and their descriptions, see <db:link xlink:href="qmake-variable-reference.xml">Variables</db:link>.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Variable</db:para>
</db:th>
<db:th>
<db:para>Contents</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link></db:para>
</db:td>
<db:td>
<db:para>General project configuration options.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmake-variable-reference.xml#destdir">DESTDIR</db:link></db:para>
</db:td>
<db:td>
<db:para>The directory in which the executable or binary file will be placed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmake-variable-reference.xml#forms">FORMS</db:link></db:para>
</db:td>
<db:td>
<db:para>A list of UI files to be processed by the <db:link xlink:href="uic.xml">user interface compiler (uic)</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmake-variable-reference.xml#headers">HEADERS</db:link></db:para>
</db:td>
<db:td>
<db:para>A list of filenames of header (.h) files used when building the project.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmake-variable-reference.xml#qt">QT</db:link></db:para>
</db:td>
<db:td>
<db:para>A list of Qt modules used in the project.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmake-variable-reference.xml#resources">RESOURCES</db:link></db:para>
</db:td>
<db:td>
<db:para>A list of resource (.qrc) files to be included in the final project. See the <db:link xlink:href="resources.xml">The Qt Resource System</db:link> for more information about these files.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmake-variable-reference.xml#sources">SOURCES</db:link></db:para>
</db:td>
<db:td>
<db:para>A list of source code files to be used when building the project.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmake-variable-reference.xml#template">TEMPLATE</db:link></db:para>
</db:td>
<db:td>
<db:para>The template to use for the project. This determines whether the output of the build process will be an application, a library, or a plugin.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The contents of a variable can be read by prepending the variable name with <db:code>$$</db:code>. This can be used to assign the contents of one variable to another:</db:para>
<db:programlisting language="cpp">TEMP_SOURCES = $$SOURCES
</db:programlisting>
<db:para>The <db:code>$$</db:code> operator is used extensively with built-in functions that operate on strings and lists of values. For more information, see <db:link xlink:href="qmake-language.xml">qmake Language</db:link>.</db:para>
<db:section xml:id="whitespace">
<db:title>Whitespace</db:title>
<db:para>Usually, whitespace separates values in variable assignments. To specify values that contain spaces, you must enclose the values in double quotes:</db:para>
<db:programlisting language="cpp">DEST = &quot;Program Files&quot;
</db:programlisting>
<db:para>The quoted text is treated as a single item in the list of values held by the variable. A similar approach is used to deal with paths that contain spaces, particularly when defining the <db:link xlink:href="qmake-variable-reference.xml#includepath">INCLUDEPATH</db:link> and <db:link xlink:href="qmake-variable-reference.xml#libs">LIBS</db:link> variables for the Windows platform:</db:para>
<db:programlisting language="cpp">win32:INCLUDEPATH += &quot;C:/mylibs/extra headers&quot;
unix:INCLUDEPATH += &quot;/home/user/extra headers&quot;
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="comments">
<db:title>Comments</db:title>
<db:para>You can add comments to project files. Comments begin with the <db:code>#</db:code> character and continue to the end of the same line. For example:</db:para>
<db:programlisting language="cpp"># Comments usually start at the beginning of a line, but they
# can also follow other content on the same line.
</db:programlisting>
<db:para>To include the <db:code>#</db:code> character in variable assignments, it is necessary to use the contents of the built-in <db:link xlink:href="qmake-variable-reference.xml#literal-hash">LITERAL_HASH</db:link> variable.</db:para>
</db:section>
<db:section xml:id="built-in-functions-and-control-flow">
<db:title>Built-in Functions and Control Flow</db:title>
<db:para>qmake provides a number of built-in functions to enable the contents of variables to be processed. The most commonly used function in simple project files is the <db:link xlink:href="qmake-test-function-reference.xml#include-filename">include()</db:link> function which takes a filename as an argument. The contents of the given file are included in the project file at the place where the <db:code>include</db:code> function is used. The <db:code>include</db:code> function is most commonly used to include other project files:</db:para>
<db:programlisting language="cpp">include(other.pro)
</db:programlisting>
<db:para>Support for conditional structures is made available via <db:link xlink:href="qmake-language.xml#scopes">scopes</db:link> that behave like <db:code>if</db:code> statements in programming languages:</db:para>
<db:programlisting language="cpp">win32 {
    SOURCES += paintwidget_win.cpp
}
</db:programlisting>
<db:para>The assignments inside the braces are only made if the condition is true. In this case, the <db:code>win32</db:code> <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> option must be set. This happens automatically on Windows. The opening brace must stand on the same line as the condition.</db:para>
<db:para>More complex operations on variables that would usually require loops are provided by built-in functions such as <db:link xlink:href="qmake-function-reference.xml#find-variablename-substr">find()</db:link>, <db:link xlink:href="qmake-function-reference.xml#unique-variablename">unique()</db:link>, and <db:link xlink:href="qmake-test-function-reference.xml#count-variablename-number">count()</db:link>. These functions, and many others are provided to manipulate strings and paths, support user input, and call external tools. For more information about using the functions, see <db:link xlink:href="qmake-language.xml">qmake Language</db:link>. For lists of all functions and their descriptions, see <db:link xlink:href="qmake-function-reference.xml">Replace Functions</db:link> and <db:link xlink:href="qmake-test-function-reference.xml">Test Functions</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="project-templates">
<db:title>Project Templates</db:title>
<db:para>The <db:link xlink:href="qmake-variable-reference.xml#template">TEMPLATE</db:link> variable is used to define the type of project that will be built. If this is not declared in the project file, qmake assumes that an application should be built, and will generate an appropriate Makefile (or equivalent file) for the purpose.</db:para>
<db:para>The following table summarizes the types of projects available and describes the files that qmake will generate for each of them:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Template</db:para>
</db:th>
<db:th>
<db:para>qmake Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>app (default)</db:para>
</db:td>
<db:td>
<db:para>Makefile to build an application.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>lib</db:para>
</db:td>
<db:td>
<db:para>Makefile to build a library.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>aux</db:para>
</db:td>
<db:td>
<db:para>Makefile to build nothing. Use this if no compiler needs to be invoked to create the target, for instance because your project is written in an interpreted language.</db:para>
<db:note>
<db:para>This template type is only available for Makefile-based generators. In particular, it will not work with the vcxproj and Xcode generators.</db:para>
</db:note>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>subdirs</db:para>
</db:td>
<db:td>
<db:para>Makefile containing rules for the subdirectories specified using the <db:link xlink:href="qmake-variable-reference.xml#subdirs">SUBDIRS</db:link> variable. Each subdirectory must contain its own project file.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vcapp</db:para>
</db:td>
<db:td>
<db:para>Visual Studio Project file to build an application.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vclib</db:para>
</db:td>
<db:td>
<db:para>Visual Studio Project file to build a library.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vcsubdirs</db:para>
</db:td>
<db:td>
<db:para>Visual Studio Solution file to build projects in sub-directories.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>See <db:link xlink:href="qmake-common-projects.xml">Building Common Project Types</db:link> for advice on writing project files for projects that use the <db:code>app</db:code> and <db:code>lib</db:code> templates.</db:para>
<db:para>When the <db:code>subdirs</db:code> template is used, qmake generates a Makefile to examine each specified subdirectory, process any project file it finds there, and run the platform's <db:code>make</db:code> tool on the newly-created Makefile. The <db:code>SUBDIRS</db:code> variable is used to contain a list of all the subdirectories to be processed.</db:para>
</db:section>
<db:section xml:id="general-configuration">
<db:title>General Configuration</db:title>
<db:para>The <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> variable specifies the options and features that the project should be configured with.</db:para>
<db:para>The project can be built in <db:emphasis>release</db:emphasis> mode or <db:emphasis>debug</db:emphasis> mode, or both. If debug and release are both specified, the last one takes effect. If you specify the <db:code>debug_and_release</db:code> option to build both the debug and release versions of a project, the Makefile that qmake generates includes a rule that builds both versions. This can be invoked in the following way:</db:para>
<db:programlisting language="cpp">make all
</db:programlisting>
<db:para>Adding the <db:code>build_all</db:code> option to the <db:code>CONFIG</db:code> variable makes this rule the default when building the project.</db:para>
<db:note>
<db:para>Each of the options specified in the <db:code>CONFIG</db:code> variable can also be used as a scope condition. You can test for the presence of certain configuration options by using the built-in <db:link xlink:href="qmake-test-function-reference.xml#config-config">CONFIG()</db:link> function. For example, the following lines show the function as the condition in a scope to test whether only the <db:code>opengl</db:code> option is in use:</db:para>
</db:note>
<db:programlisting language="cpp">CONFIG(opengl) {
    message(Building with OpenGL support.)
} else {
    message(OpenGL support is not available.)
}
</db:programlisting>
<db:para>This enables different configurations to be defined for <db:code>release</db:code> and <db:code>debug</db:code> builds. For more information, see <db:link xlink:href="qmake-language.xml#scopes">Using Scopes</db:link>.</db:para>
<db:para>The following options define the type of project to be built.</db:para>
<db:note>
<db:para>Some of these options only take effect when used on the relevant platform.</db:para>
</db:note>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>qt</db:para>
</db:td>
<db:td>
<db:para>The project is a Qt application and should link against the Qt library. You can use the <db:code>QT</db:code> variable to control any additional Qt modules that are required by your application. This value is added by default, but you can remove it to use qmake for a non-Qt project.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>x11</db:para>
</db:td>
<db:td>
<db:para>The project is an X11 application or library. This value is not needed if the target uses Qt.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qmake-variable-reference.xml#template">application and library project templates</db:link> provide you with more specialized configuration options to fine tune the build process. The options are explained in detail in <db:link xlink:href="qmake-common-projects.xml">Building Common Project Types</db:link>.</db:para>
<db:para>For example, if your application uses the Qt library and you want to build it in <db:code>debug</db:code> mode, your project file will contain the following line:</db:para>
<db:programlisting language="cpp">CONFIG += qt debug
</db:programlisting>
<db:note>
<db:para>You must use &quot;+=&quot;, not &quot;=&quot;, or qmake will not be able to use Qt's configuration to determine the settings needed for your project.</db:para>
</db:note>
</db:section>
<db:section xml:id="declaring-qt-libraries">
<db:title>Declaring Qt Libraries</db:title>
<db:para>If the <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> variable contains the <db:code>qt</db:code> value, qmake's support for Qt applications is enabled. This makes it possible to fine-tune which of the Qt modules are used by your application. This is achieved with the <db:link xlink:href="qmake-variable-reference.xml#qt">QT</db:link> variable which can be used to declare the required extension modules. For example, we can enable the XML and network modules in the following way:</db:para>
<db:programlisting language="cpp">QT += network xml
</db:programlisting>
<db:note>
<db:para><db:code>QT</db:code> includes the <db:code>core</db:code> and <db:code>gui</db:code> modules by default, so the above declaration <db:emphasis>adds</db:emphasis> the network and XML modules to this default list. The following assignment <db:emphasis>omits</db:emphasis> the default modules, and will lead to errors when the application's source code is being compiled:</db:para>
</db:note>
<db:programlisting language="cpp">QT = network xml # This will omit the core and gui modules.
</db:programlisting>
<db:para>If you want to build a project <db:emphasis>without</db:emphasis> the <db:code>gui</db:code> module, you need to exclude it with the &quot;-=&quot; operator. By default, <db:code>QT</db:code> contains both <db:code>core</db:code> and <db:code>gui</db:code>, so the following line will result in a minimal Qt project being built:</db:para>
<db:programlisting language="cpp">QT -= gui # Only the core module is used.
</db:programlisting>
<db:para>For a list of Qt modules that you can add to the <db:code>QT</db:code> variable, see <db:link xlink:href="qmake-variable-reference.xml#qt">QT</db:link>.</db:para>
</db:section>
<db:section xml:id="configuration-features">
<db:title>Configuration Features</db:title>
<db:para>qmake can be set up with extra configuration features that are specified in feature (.prf) files. These extra features often provide support for custom tools that are used during the build process. To add a feature to the build process, append the feature name (the stem of the feature filename) to the <db:code>CONFIG</db:code> variable.</db:para>
<db:para>For example, qmake can configure the build process to take advantage of external libraries that are supported by <db:link xlink:href="http://www.freedesktop.org/wiki/Software/pkg-config">pkg-config</db:link>, such as the D-Bus and ogg libraries, with the following lines:</db:para>
<db:programlisting language="cpp">CONFIG += link_pkgconfig
PKGCONFIG += ogg dbus-1
</db:programlisting>
<db:para>For more information about adding features, see <db:link xlink:href="qmake-advanced-usage.xml#adding-new-configuration-features">Adding New Configuration Features</db:link>.</db:para>
</db:section>
<db:section xml:id="declaring-other-libraries">
<db:title>Declaring Other Libraries</db:title>
<db:para>If you are using other libraries in your project in addition to those supplied with Qt, you need to specify them in your project file.</db:para>
<db:para>The paths that qmake searches for libraries and the specific libraries to link against can be added to the list of values in the <db:link xlink:href="qmake-variable-reference.xml#libs">LIBS</db:link> variable. You can specify the paths to the libraries or use the Unix-style notation for specifying libraries and paths.</db:para>
<db:para>For example, the following lines show how a library can be specified:</db:para>
<db:programlisting language="cpp">LIBS += -L/usr/local/lib -lmath
</db:programlisting>
<db:para>The paths containing header files can also be specified in a similar way using the <db:link xlink:href="qmake-variable-reference.xml#includepath">INCLUDEPATH</db:link> variable.</db:para>
<db:para>For example, to add several paths to be searched for header files:</db:para>
<db:programlisting language="cpp">INCLUDEPATH = c:/msdev/include d:/stl/include
</db:programlisting>
</db:section>
</db:article>
