<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAxAggregated Class</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaxaggregated.xml">QAxAggregated</db:link> class is an abstract base class for implementations of additional COM interfaces.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAxAggregated</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS AxServer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::AxServer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += axserver</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Create a subclass of <db:link xlink:href="qaxaggregated.xml">QAxAggregated</db:link> and reimplement <db:link xlink:href="qaxaggregated.xml#queryInterface">queryInterface</db:link>() to support additional COM interfaces. Use multiple inheritance from those COM interfaces. Implement the IUnknown interface of those COM interfaces by delegating the calls to <db:code>QueryInterface()</db:code>, <db:code>AddRef()</db:code> and <db:code>Release()</db:code> to the interface provided by <db:link xlink:href="qaxaggregated.xml#controllingUnknown">controllingUnknown</db:link>().</db:para>
<db:para>Use the <db:link xlink:href="qaxaggregated.xml#widget">widget</db:link>() method if you need to make calls to the <db:link xlink:href="qwidget.xml">QWidget</db:link> implementing the ActiveX control. You must not store that pointer in your subclass (unless you use <db:link xlink:href="qpointer.xml">QPointer</db:link>), as the <db:link xlink:href="qwidget.xml">QWidget</db:link> can be destroyed by the ActiveQt framework at any time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbindable.xml">QAxBindable</db:link></db:member>
<db:member><db:link xlink:href="qaxfactory.xml">QAxFactory</db:link></db:member>
<db:member><db:link xlink:href="activeqt-index.xml">Active Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QAxAggregated">
<db:title>[virtual protected] QAxAggregated::~QAxAggregated()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAxAggregated</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAxAggregated()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>The destructor is called internally by Qt.</db:para>
</db:section>
<db:section xml:id="controllingUnknown">
<db:title>[protected] IUnknown *QAxAggregated::controllingUnknown() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>IUnknown *</db:type>
<db:methodname>controllingUnknown</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">IUnknown * controllingUnknown() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:code>IUnknown</db:code> interface of the ActiveX control. Implement the <db:code>IUnknown</db:code> interface in your <db:link xlink:href="qaxaggregated.xml">QAxAggregated</db:link> subclass to delegate calls to <db:code>QueryInterface()</db:code>, <db:code>AddRef()</db:code>, and <db:code>Release()</db:code> to the interface provided by this function.</db:para>
<db:programlisting language="cpp">HRESULT AxImpl::QueryInterface(REFIID iid, void **iface)
{
    return controllingUnknown()-&amp;gt;QueryInterface(iid, iface);
}

ulong AxImpl::AddRef()
{
    return controllingUnknown()-&amp;gt;AddRef();
}

ulong AxImpl::Release()
{
    return controllingUnknown()-&amp;gt;Release();
}
</db:programlisting>
<db:para>Instead of declaring and implementing these three functions manually, you can use the <db:code>QAXAGG_IUNKNOWN</db:code> macro in the class declaration of your subclass.</db:para>
</db:section>
<db:section xml:id="object">
<db:title>[protected] QObject *QAxAggregated::object() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>object</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * object() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the <db:link xlink:href="qobject.xml">QObject</db:link> subclass implementing the COM object. This function might return 0.</db:para>
<db:warning>
<db:para>You must not store the returned pointer, unless you use a <db:link xlink:href="qpointer.xml">QPointer</db:link>, since the <db:link xlink:href="qobject.xml">QObject</db:link> can be destroyed by ActiveQt at any time.</db:para>
</db:warning>
</db:section>
<db:section xml:id="queryInterface">
<db:title>[pure virtual] long QAxAggregated::queryInterface(const QUuid &amp;<db:emphasis>iid</db:emphasis>, void **<db:emphasis>iface</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>long</db:type>
<db:methodname>queryInterface</db:methodname>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>iid</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void **</db:type>
<db:parameter>iface</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">long queryInterface(const QUuid &amp;iid, void **iface) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplement this pure virtual function to support additional COM interfaces. Set the value of <db:code role="parameter">iface</db:code> to point to this object to support the interface <db:code role="parameter">iid</db:code>. Note that you must cast the <db:code>this</db:code> pointer to the appropriate superclass.</db:para>
<db:programlisting language="cpp">long AxImpl::queryInterface(const QUuid &amp;amp;iid, void **iface)
{
    *iface = 0;
    if (iid == IID_ISomeCOMInterface)
        *iface = (ISomeCOMInterface*)this;
    else
        return E_NOINTERFACE;

    AddRef();
    return S_OK;
}
</db:programlisting>
<db:para>Return the standard COM results <db:code>S_OK</db:code> (interface is supported) or <db:code>E_NOINTERFACE</db:code> (requested interface is not supported).</db:para>
<db:warning>
<db:para>Even though you must implement the <db:code>IUnknown</db:code> interface if you implement any COM interface you must not support the <db:code>IUnknown</db:code> interface in your queryInterface() implementation.</db:para>
</db:warning>
</db:section>
<db:section xml:id="widget">
<db:title>[protected] QWidget *QAxAggregated::widget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>widget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * widget() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the <db:link xlink:href="qwidget.xml">QWidget</db:link> subclass implementing the ActiveX control. This function might return 0.</db:para>
<db:warning>
<db:para>You must not store the returned pointer, unless you use a <db:link xlink:href="qpointer.xml">QPointer</db:link>, since the <db:link xlink:href="qwidget.xml">QWidget</db:link> can be destroyed by ActiveQt at any time.</db:para>
</db:warning>
</db:section>
</db:section>
</db:article>
