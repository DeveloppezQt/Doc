<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Text Editor Guide</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtquickcontrols-texteditor-ui.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Qt Quick Text Editor Guide - UI"/></db:extendedlink>
<db:abstract>
<db:para>Walkthrough of an application built with Qt Quick Controls.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="application-design">
<db:title>Application Design</db:title>
<db:para>The <db:emphasis>Text Editor</db:emphasis> example is a simple example of creating an application with Qt. Specifically, the example uses QML to set up the user interface, C++ to implement the file operations, and the Qt tools to manage the project files and build environment.</db:para>
<db:para>We will use Qt Quick Designer to add QML controls onto our application and set up the controls and resources. We will also implement the logic and connect the user interface to a C++ backend that will handle the saving and loading of text files.</db:para>
<db:para>This guide assumes that you have downloaded Qt and are able to install, open, and run the basic examples found in Qt Creator's <db:guilabel>Welcome Mode</db:guilabel>. If not, here are the pages that will help you:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="gettingstarted.xml">Getting Started with Qt</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The guide attempts to be self-contained but will refer to topics in the Qt reference documentation. Feel free to click on the links, but it is not necessary to leave the guide to find the information necessary to develop the application.</db:para>
<db:para>The files are part of the Qt package and are available when searched for <db:guilabel>Qt Quick Text Editor</db:guilabel> in Qt Creator's <db:guilabel>Welcome mode</db:guilabel>. All files used in the application are listed for viewing in the <db:link xlink:href="qtquickcontrols-texteditor-example.xml">Qt Quick Controls - Text Editor Example</db:link> page.</db:para>
</db:section>
<db:section xml:id="setting-up-the-environment-and-project">
<db:title>Setting Up the Environment and Project</db:title>
<db:para>We can start by creating the project in Qt Creator. Our application has the name <db:emphasis>Text Editor</db:emphasis> and it is a Qt Quick Application. Qt Creator has a wizard that can create the project for you.</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Select <db:guilabel>File</db:guilabel> &gt; <db:guilabel>New File or Project</db:guilabel> &gt; <db:guilabel>Applications</db:guilabel> &gt; <db:guilabel>Qt Quick Application</db:guilabel> &gt; <db:guilabel>Choose</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Name</db:guilabel> field, enter <db:guilabel>TextEditor</db:guilabel> and select <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Qt Quick component set</db:guilabel> field, select <db:guilabel>Qt Quick Controls 1.2</db:guilabel> &gt; <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Kit Selection</db:guilabel> page, select <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Summary</db:guilabel> page, select <db:guilabel>Finish</db:guilabel>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The wizard creates the project and you can run it by clicking on the run button, <db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtcreator-run.png"/>
</db:imageobject>
</db:inlinemediaobject> . The application is an empty shell but it contains the basic window and layout on which we can build. Make sure that you can run the basic application and if not, make sure that your build environment and Qt version are configured.</db:para>
<db:section xml:id="project-files">
<db:title>Project Files</db:title>
<db:para>The wizard creates the project files used to build the project. To view them, select the <db:guilabel>Edit mode</db:guilabel>. The following project files are modified later in the guide:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:guilabel>TextEdit.pro</db:guilabel> - the project file used to create the build files. Also sets the paths that are visible to the project.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:guilabel>Sources</db:guilabel> - contains the C++ implementation files (<db:code>.cpp</db:code>).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:guilabel>Resources</db:guilabel> - contains a resource file that configures the application assets and how the application resolves the location of the assets. The QML file is also found here.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:guilabel>Headers</db:guilabel> - contains the C++ header files (<db:code>.h</db:code>). The default project does not have any header files, therefore this is not visible.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="resource-files">
<db:title>Resource Files</db:title>
<db:para>The text editor uses several icons to represent various actions. The icons are in the <db:emphasis>images</db:emphasis> directory which is directly under the <db:emphasis>TextEditor</db:emphasis> project directory. The images as well as the project files are also listed in the reference documentation on the <db:link xlink:href="qtquickcontrols-texteditor-example.xml">Qt Quick Controls - Text Editor Example</db:link> page.</db:para>
<db:para>We first need to register the image files into the project's resource file, <db:emphasis>qml.qrc</db:emphasis>. The resource files compact the images into the binary packages. The resource files provide a streamlined directory structure, which is cross-platform. It is beneficial especially on mobile platforms, where each platform manages the application resources differently.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>To register the image files, in the <db:guilabel>Edit</db:guilabel> mode, right-click the <db:emphasis>qml.qrc</db:emphasis> file and select <db:guilabel>Open in Editor</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Click the <db:guilabel>Add</db:guilabel> button and select <db:guilabel>Add Files</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the file manager, select the files to be added. You can select all the images in the <db:emphasis>images</db:emphasis> directory at once.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You can refer to the images from QML by referring directly to the filename. For example, <db:code>images/editcopy.png</db:code> is the name of the <db:emphasis>editcopy.png</db:emphasis> file. We will use these images later in the guide.</db:para>
<db:para>Qt Creator then packages the images alongside your application in a single binary. For more information about resource files, see the <db:link xlink:href="qtquick-deployment.xml#managing-resource-files-with-the-qt-resource-system">Managing Resource Files with the Qt Resource System</db:link> and the <db:link xlink:href="resources.xml">The Qt Resource System</db:link> pages.</db:para>
</db:section>
</db:section>
<db:section xml:id="example-files">
<db:title>Example Files</db:title>
<db:para>The accompanying examples files are listed in the following page:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-texteditor-example.xml">Qt Quick Controls - Text Editor Example</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
