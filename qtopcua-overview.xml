<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt OPC UA Overview</db:title>
<db:productname>QtOpcUa</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>An OPC UA module for Qt</db:titleabbrev>
<db:abstract>
<db:para>An OPC UA module for Qt.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>OPC UA is a protocol for data modelling and exchange of data in industrial applications.</db:para>
<db:para>An OPC UA server offers access to data that is organized in a mesh of nodes connected by references. The use of different reference types and nodes containing metadata enable a client to navigate and interpret the data without knowing their structure in advance.</db:para>
<db:para>Each node has a unique identifier and attributes that can be read and written. Among others, there are <db:emphasis>Variable</db:emphasis> nodes that store values and callable <db:emphasis>Method</db:emphasis> nodes with attached nodes describing parameters and return values. <db:emphasis>Notifications</db:emphasis> in case of events and monitoring of Variable nodes for value changes are offered too.</db:para>
<db:para>Complex objects can be created by combining nodes using references. Inheritance is also possible. OPC UA offers support for pre-made models that can be extended to fit special needs.</db:para>
<db:para>OPC UA is the platform-independent successor of OPC Classic intended for usage on all levels, from embedded sensors up to manufacturing execution and enterprise resource planning systems. It has a service-oriented architecture based on standardized messages for service requests and responses. There are different ways for these messages to be encoded and transported over the network. The most common way is binary encoding over TCP.</db:para>
<db:section xml:id="implemented-features-from-the-opc-ua-protocol">
<db:title>Implemented Features from the OPC UA Protocol</db:title>
<db:para>The following table summarizes the features of OPC UA that are supported by Qt OPC UA.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Feature</db:para>
</db:th>
<db:th>
<db:para>Open62541 plugin</db:para>
</db:th>
<db:th>
<db:para>UACpp plugin</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Read</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Batch read</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Write</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Batch write</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Multidimensional arrays</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Browse</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Data change subscriptions</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Event subscriptions</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Modify subscriptions / monitored Items</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Method calls</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Browse path resolution</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GetEndpoints</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>FindServers</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>NodeManagement</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="data-types">
<db:title>Data Types</db:title>
<db:para>A subset of the OPC UA data types is currently supported in Qt OPC UA. Most of them are available with all backends.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Data type</db:para>
</db:th>
<db:th>
<db:para>Open62541 plugin</db:para>
</db:th>
<db:th>
<db:para>UACpp plugin</db:para>
</db:th>
<db:th>
<db:para>Qt OPC UA data type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Int16, Int32, Int64</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>Directly used</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>UInt16, UInt32, UInt64</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>Directly used</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Byte</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>quint8</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SByte</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>qint8</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Boolean</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>Directly used</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Double</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>Directly used</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Float</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>Directly used</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>String</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtopcua-localizedtext.xml">LocalizedText</db:link></db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>QOpcUaLocalizedText</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DateTime</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ByteString</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>XmlElement</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtopcua-nodeid.xml">NodeId</db:link></db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>GUID</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="quuid.xml">QUuid</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QualifiedName</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>QOpcUaQualifiedName</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>StatusCode</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qopcua.xml#UaStatusCode-enum">QOpcUa::UaStatusCode</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Range</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>QOpcUaRange</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>EUInformation</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>QOpcUaEUInformation</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ComplexNumber</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>QOpcUaComplexNumber</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>DoubleComplexNumber</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>QOpcUaDoubleComplexNumber</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AxisInformation</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>QOpcUaAxisInformation</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>XV</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>QOpcUaXValue</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Argument</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>QOpcUaArgument</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ExpandedNodeId</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>QOpcUaExpandedNodeId</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ExtensionObject</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>X</db:para>
</db:td>
<db:td>
<db:para>QOpcUaExtensionObject</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="classes-and-ownership">
<db:title>Classes and Ownership</db:title>
<db:para>Two important classes are exposed to the user: QOpcUaClient and QOpcUaNode.</db:para>
<db:para>Objects of both classes are owned by the user and must be deleted when they are no longer needed.</db:para>
</db:section>
<db:section xml:id="logging-categories">
<db:title>Logging Categories</db:title>
<db:para>The following table summarizes the logging categories that are used by Qt OPC UA.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Logging Category</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>qt.opcua</db:para>
</db:td>
<db:td>
<db:para>Plugin independent messages generated by QOpcUaProvider and QOpcUaClient</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt.opcua.plugins.open62541</db:para>
</db:td>
<db:td>
<db:para>Messages generated by the open62541 plugin</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt.opcua.plugins.uacpp</db:para>
</db:td>
<db:td>
<db:para>Messages generated by the UACpp plugin</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="open62541-specific-logging-categories">
<db:title>Open62541 specific Logging Categories</db:title>
<db:para>The open62541 sdk logging categories depend on the log level for open62541, which is configured at compile time. The default is 300, which enables: info, warning, error and critical. To obtain less or more verbose output, the open62541 sdk needs to be rebuilt with a different configuration.</db:para>
<db:para>The following table shows the logging categories used by open62541:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Open62541 Logging Category</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>qt.opcua.plugins.open62541.sdk.network</db:para>
</db:td>
<db:td>
<db:para>Messages generated by the open62541 network</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt.opcua.plugins.open62541.sdk.securechannel</db:para>
</db:td>
<db:td>
<db:para>Messages generated by the open62541 channel</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt.opcua.plugins.open62541.sdk.session</db:para>
</db:td>
<db:td>
<db:para>Messages generated by the open62541 session</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt.opcua.plugins.open62541.sdk.server</db:para>
</db:td>
<db:td>
<db:para>Messages generated by open62541 server components</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt.opcua.plugins.open62541.sdk.client</db:para>
</db:td>
<db:td>
<db:para>Messages generated by the open62541 client</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt.opcua.plugins.open62541.sdk.userland</db:para>
</db:td>
<db:td>
<db:para>Messages generated by the open62541 userland</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt.opcua.plugins.open62541.sdk.securitypolicy</db:para>
</db:td>
<db:td>
<db:para>Messages generated by the open62541 security policies</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="licenses">
<db:title>Licenses</db:title>
<db:para>The Qt OPC UA module is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under free software licenses. These free software licenses are <db:link xlink:href="http://www.gnu.org/licenses/lgpl-3.0.html">GNU Lesser General Public License, version 3</db:link>, or the <db:link xlink:href="http://www.gnu.org/licenses/gpl-2.0.html">GNU General Public License, version 2</db:link>. See <db:link xlink:href="licensing.xml">Qt Licensing</db:link> for further details.</db:para>
<db:para>Qt OPC UA in Qt 6.5.3 may contain third party modules under following permissive licenses:</db:para>
<db:variablelist role="groupsbymodule attributions-qtopcua">
<db:varlistentry>
<db:term><db:link xlink:href="qtopcua-attribution-open62541.xml" xlink:role="page">Open62541, version 1.3.4</db:link></db:term>
<db:listitem>
<db:para>Mozilla Public License 2.0 and Creative Commons Zero v1.0 Universal and Creative Commons Attribution Non Commercial Share Alike 4.0 International and BSD 3-Clause &quot;New&quot; or &quot;Revised&quot; License and Apache License 2.0 and MIT License</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para>Linking to external libraries involves licenses from the backend providers.</db:para>
<db:section xml:id="open62541">
<db:title>Open62541</db:title>
<db:para>The Open62541 plugin is available under the same licenses as Qt OPC UA. The Open62541 library itself is licensed under <db:link xlink:href="https://open62541.org">Mozilla Public License v2.0</db:link>.</db:para>
<db:para>The security support is provided by the OpenSSL plugins of the open62541 library. If the open62541 plugin is built with security support and OpenSSL is not available on the target system, the open62541 plugin will fail to load.</db:para>
</db:section>
<db:section xml:id="ua-cpp">
<db:title>UA CPP</db:title>
<db:para>The UA CPP plugin is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under the <db:link xlink:href="http://www.gnu.org/licenses/gpl-3.0.html">GNU General Public License, version 3</db:link>. The UA CPP library itself is available under commercial licenses from <db:link xlink:href="https://www.unified-automation.com">Unified Automation</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
