<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMetaEnum Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmetaenum.xml">QMetaEnum</db:link> class provides meta-data about an enumerator.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMetaEnum</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMetaEnum is part of <db:simplelist><db:member>objectmodel</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Use <db:link xlink:href="qmetaenum.xml#name">name</db:link>() for the enumerator's name. The enumerator's keys (names of each enumerated item) are returned by <db:link xlink:href="qmetaenum.xml#key">key</db:link>(); use <db:link xlink:href="qmetaenum.xml#keyCount">keyCount</db:link>() to find the number of keys. <db:link xlink:href="qmetaenum.xml#isFlag">isFlag</db:link>() returns whether the enumerator is meant to be used as a flag, meaning that its values can be combined using the OR operator.</db:para>
<db:para>The conversion functions <db:link xlink:href="qmetaenum.xml#keyToValue">keyToValue</db:link>(), <db:link xlink:href="qmetaenum.xml#valueToKey">valueToKey</db:link>(), <db:link xlink:href="qmetaenum.xml#keysToValue">keysToValue</db:link>(), and <db:link xlink:href="qmetaenum.xml#valueToKeys">valueToKeys</db:link>() allow conversion between the integer representation of an enumeration or set value and its literal representation. The <db:link xlink:href="qmetaenum.xml#scope">scope</db:link>() function returns the class scope this enumerator was declared in.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml">QMetaObject</db:link></db:member>
<db:member><db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link></db:member>
<db:member><db:link xlink:href="qmetaproperty.xml">QMetaProperty</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="enumName">
<db:title>const char *QMetaEnum::enumName() const</db:title>
<db:para>Returns the enum name of the flag (without the scope).</db:para>
<db:para>For example, the <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link> flag has AlignmentFlag as the enum name, but Alignment as the type name. Non flag enums has the same type and enum names.</db:para>
<db:para>Enum names have the same scope as the type name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromType">
<db:title>[static] QMetaEnum QMetaEnum::fromType()</db:title>
<db:para>Returns the <db:link xlink:href="qmetaenum.xml">QMetaEnum</db:link> corresponding to the type in the template parameter. The enum needs to be declared with <db:link xlink:href="qobject.xml#Q_ENUM">Q_ENUM</db:link>.</db:para>
</db:section>
<db:section xml:id="is64Bit">
<db:title>[since 6.9] bool QMetaEnum::is64Bit() const</db:title>
<db:para>Returns true if the underlying type of this enumeration is 64 bits wide.</db:para>
<db:para>This function was introduced in Qt 6.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#value64">value64</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFlag">
<db:title>bool QMetaEnum::isFlag() const</db:title>
<db:para>Returns true if this enumerator is used as a flag; otherwise returns false.</db:para>
<db:para>When used as flags, enumerators can be combined using the OR operator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#keysToValue">keysToValue</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKeys">valueToKeys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isScoped">
<db:title>bool QMetaEnum::isScoped() const</db:title>
<db:para>Returns true if this enumerator is declared as a C++11 enum class; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QMetaEnum::isValid() const</db:title>
<db:para>Returns true if this enum is valid (has a name); otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="key">
<db:title>const char *QMetaEnum::key(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the key with the given <db:code role="parameter">index</db:code>, or nullptr if no such key exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#keyCount">keyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKey">valueToKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyCount">
<db:title>int QMetaEnum::keyCount() const</db:title>
<db:para>Returns the number of keys.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#key">key</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyToValue64">
<db:title>[since 6.9] std::optional&lt;quint64&gt; QMetaEnum::keyToValue64(const char *<db:emphasis>key</db:emphasis>) const</db:title>
<db:para>Returns the integer value of the given enumeration <db:code role="parameter">key</db:code>, or std::nullopt if <db:code role="parameter">key</db:code> is not defined.</db:para>
<db:para>For flag types, use <db:link xlink:href="qmetaenum.xml#keysToValue64">keysToValue64</db:link>().</db:para>
<db:para>This function always sign-extends the value of 32-bit enumerations to 64 bits, if their underlying type is signed (e.g., int, short). In most cases, this is the expected behavior.</db:para>
<db:para>A notable exception is for flag values that have bit 31 set, like 0x8000'0000, because some compilers (such as Microsoft Visual Studio), do not automatically switch to an unsigned underlying type. To avoid this problem, explicitly specify the underlying type in the enum declaration.</db:para>
<db:note>
<db:para>For QMetaObjects compiled prior to Qt 6.6, this function always sign-extends.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#valueToKey">valueToKey</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#isFlag">isFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#keysToValue64">keysToValue64</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyToValue">
<db:title>int QMetaEnum::keyToValue(const char *<db:emphasis>key</db:emphasis>, bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:para>Returns the integer value of the given enumeration <db:code role="parameter">key</db:code>, or -1 if <db:code role="parameter">key</db:code> is not defined.</db:para>
<db:para>If <db:code role="parameter">key</db:code> is not defined, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true.</db:para>
<db:para>For flag types, use <db:link xlink:href="qmetaenum.xml#keysToValue">keysToValue</db:link>().</db:para>
<db:para>If this is a 64-bit enumeration (see <db:link xlink:href="qmetaenum.xml#is64Bit">is64Bit</db:link>()), this function returns the low 32-bit portion of the value. Use <db:link xlink:href="qmetaenum.xml#keyToValue64">keyToValue64</db:link>() to obtain the full value instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#keyToValue64">keyToValue64</db:link></db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKey">valueToKey</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#isFlag">isFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#keysToValue">keysToValue</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#is64Bit">is64Bit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keysToValue64">
<db:title>std::optional&lt;quint64&gt; QMetaEnum::keysToValue64(const char *<db:emphasis>keys</db:emphasis>) const</db:title>
<db:para>Returns the value derived from combining together the values of the <db:code role="parameter">keys</db:code> using the OR operator, or std::nullopt if <db:code role="parameter">keys</db:code> is not defined. Note that the strings in <db:code role="parameter">keys</db:code> must be '|'-separated.</db:para>
<db:para>This function always sign-extends the value of 32-bit enumerations to 64 bits, if their underlying type is signed (e.g., int, short). In most cases, this is the expected behavior.</db:para>
<db:para>A notable exception is for flag values that have bit 31 set, like 0x8000'0000, because some compilers (such as Microsoft Visual Studio), do not automatically switch to an unsigned underlying type. To avoid this problem, explicitly specify the underlying type in the enum declaration.</db:para>
<db:note>
<db:para>For QMetaObjects compiled prior to Qt 6.6, this function always sign-extends.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#isFlag">isFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKey">valueToKey</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKeys">valueToKeys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keysToValue">
<db:title>int QMetaEnum::keysToValue(const char *<db:emphasis>keys</db:emphasis>, bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:para>Returns the value derived from combining together the values of the <db:code role="parameter">keys</db:code> using the OR operator, or -1 if <db:code role="parameter">keys</db:code> is not defined. Note that the strings in <db:code role="parameter">keys</db:code> must be '|'-separated.</db:para>
<db:para>If <db:code role="parameter">keys</db:code> is not defined, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true.</db:para>
<db:para>If this is a 64-bit enumeration (see <db:link xlink:href="qmetaenum.xml#is64Bit">is64Bit</db:link>()), this function returns the low 32-bit portion of the value. Use <db:link xlink:href="qmetaenum.xml#keyToValue64">keyToValue64</db:link>() to obtain the full value instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#keysToValue64">keysToValue64</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#isFlag">isFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKey">valueToKey</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKeys">valueToKeys</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#is64Bit">is64Bit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="metaType">
<db:title>[since 6.6] QMetaType QMetaEnum::metaType() const</db:title>
<db:para>Returns the meta type of the enum.</db:para>
<db:para>If the <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> that this enum is part of was generated with Qt 6.5 or earlier, this will be an invalid meta type.</db:para>
<db:note>
<db:para>This is the meta type of the enum itself, not of its underlying integral type. You can retrieve the meta type of the underlying type of the enum using <db:link xlink:href="qmetatype.xml#underlyingType">QMetaType::underlyingType</db:link>().</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="name">
<db:title>const char *QMetaEnum::name() const</db:title>
<db:para>Returns the name of the type (without the scope).</db:para>
<db:para>For example, the <db:link xlink:href="qt.xml#Key-enum">Qt::Key</db:link> enumeration has Key as the type name and <db:link xlink:href="qt.xml">Qt</db:link> as the scope.</db:para>
<db:para>For flags this returns the name of the flag type, not the name of the enum type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#scope">scope</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#enumName">enumName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scope">
<db:title>const char *QMetaEnum::scope() const</db:title>
<db:para>Returns the scope this enumerator was declared in.</db:para>
<db:para>For example, the <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link> enumeration has Qt as the scope and AlignmentFlag as the name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value64">
<db:title>[since 6.9] std::optional&lt;quint64&gt; QMetaEnum::value64(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the value with the given <db:code role="parameter">index</db:code> if it exists; or returns a std::nullopt if it doesn't.</db:para>
<db:para>This function always sign-extends the value of 32-bit enumerations to 64 bits, if their underlying type is signed (e.g., int, short). In most cases, this is the expected behavior.</db:para>
<db:para>A notable exception is for flag values that have bit 31 set, like 0x8000'0000, because some compilers (such as Microsoft Visual Studio), do not automatically switch to an unsigned underlying type. To avoid this problem, explicitly specify the underlying type in the enum declaration.</db:para>
<db:note>
<db:para>For QMetaObjects compiled prior to Qt 6.6, this function always sign-extends.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#keyCount">keyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#key">key</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#keyToValue">keyToValue</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#is64Bit">is64Bit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>int QMetaEnum::value(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the value with the given <db:code role="parameter">index</db:code>; or returns -1 if there is no such value.</db:para>
<db:para>If this is an enumeration with a 64-bit underlying type (see <db:link xlink:href="qmetaenum.xml#is64Bit">is64Bit</db:link>()), this function returns the low 32-bit portion of the value. Use <db:link xlink:href="qmetaenum.xml#value64">value64</db:link>() to obtain the full value instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#value64">value64</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#keyCount">keyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#key">key</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#keyToValue">keyToValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueToKey">
<db:title>const char *QMetaEnum::valueToKey(quint64 <db:emphasis>value</db:emphasis>) const</db:title>
<db:para>Returns the string that is used as the name of the given enumeration <db:code role="parameter">value</db:code>, or nullptr if <db:code role="parameter">value</db:code> is not defined.</db:para>
<db:para>For flag types, use <db:link xlink:href="qmetaenum.xml#valueToKeys">valueToKeys</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#isFlag">isFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKeys">valueToKeys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueToKeys">
<db:title>QByteArray QMetaEnum::valueToKeys(quint64 <db:emphasis>value</db:emphasis>) const</db:title>
<db:para>Returns a byte array of '|'-separated keys that represents the given <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>Passing a 64-bit <db:code role="parameter">value</db:code> to an enumeration whose underlying type is 32-bit (that is, if <db:link xlink:href="qmetaenum.xml#is64Bit">is64Bit</db:link>() returns false) results in an empty string being returned.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#isFlag">isFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKey">valueToKey</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#keysToValue">keysToValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
