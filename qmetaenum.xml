<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMetaEnum Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmetaenum.xml">QMetaEnum</db:link> class provides meta-data about an enumerator.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMetaEnum</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMetaEnum is part of <db:simplelist><db:member>objectmodel</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Use <db:link xlink:href="qmetaenum.xml#name">name</db:link>() for the enumerator's name. The enumerator's keys (names of each enumerated item) are returned by <db:link xlink:href="qmetaenum.xml#key">key</db:link>(); use <db:link xlink:href="qmetaenum.xml#keyCount">keyCount</db:link>() to find the number of keys. <db:link xlink:href="qmetaenum.xml#isFlag">isFlag</db:link>() returns whether the enumerator is meant to be used as a flag, meaning that its values can be combined using the OR operator.</db:para>
<db:para>The conversion functions <db:link xlink:href="qmetaenum.xml#keyToValue">keyToValue</db:link>(), <db:link xlink:href="qmetaenum.xml#valueToKey">valueToKey</db:link>(), <db:link xlink:href="qmetaenum.xml#keysToValue">keysToValue</db:link>(), and <db:link xlink:href="qmetaenum.xml#valueToKeys">valueToKeys</db:link>() allow conversion between the integer representation of an enumeration or set value and its literal representation. The <db:link xlink:href="qmetaenum.xml#scope">scope</db:link>() function returns the class scope this enumerator was declared in.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml">QMetaObject</db:link></db:member>
<db:member><db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link></db:member>
<db:member><db:link xlink:href="qmetaproperty.xml">QMetaProperty</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="enumName">
<db:title>[since 5.12] const char *QMetaEnum::enumName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const char *</db:type>
<db:methodname>enumName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const char * enumName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the enum name of the flag (without the scope).</db:para>
<db:para>For example, the <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link> flag has AlignmentFlag as the enum name, but Alignment as as the type name. Non flag enums has the same type and enum names.</db:para>
<db:para>Enum names have the same scope as the type name.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromType">
<db:title>[static, since 5.5] QMetaEnum QMetaEnum::fromType()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QMetaEnum</db:type>
<db:methodname>fromType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaEnum fromType()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qmetaenum.xml">QMetaEnum</db:link> corresponding to the type in the template parameter. The enum needs to be declared with <db:link xlink:href="qobject.xml#Q_ENUM">Q_ENUM</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="isFlag">
<db:title>bool QMetaEnum::isFlag() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFlag</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFlag() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this enumerator is used as a flag; otherwise returns false.</db:para>
<db:para>When used as flags, enumerators can be combined using the OR operator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#keysToValue">keysToValue</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKeys">valueToKeys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isScoped">
<db:title>[since 5.8] bool QMetaEnum::isScoped() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isScoped</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isScoped() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this enumerator is declared as a C++11 enum class; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QMetaEnum::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this enum is valid (has a name); otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="key">
<db:title>const char *QMetaEnum::key(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const char *</db:type>
<db:methodname>key</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const char * key(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the key with the given <db:code role="parameter">index</db:code>, or nullptr if no such key exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#keyCount">keyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKey">valueToKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyCount">
<db:title>int QMetaEnum::keyCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>keyCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int keyCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of keys.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#key">key</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyToValue">
<db:title>int QMetaEnum::keyToValue(const char *<db:emphasis>key</db:emphasis>, bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>keyToValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int keyToValue(const char *key, bool *ok) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the integer value of the given enumeration <db:code role="parameter">key</db:code>, or -1 if <db:code role="parameter">key</db:code> is not defined.</db:para>
<db:para>If <db:code role="parameter">key</db:code> is not defined, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true.</db:para>
<db:para>For flag types, use <db:link xlink:href="qmetaenum.xml#keysToValue">keysToValue</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#valueToKey">valueToKey</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#isFlag">isFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#keysToValue">keysToValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keysToValue">
<db:title>int QMetaEnum::keysToValue(const char *<db:emphasis>keys</db:emphasis>, bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>keysToValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>keys</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int keysToValue(const char *keys, bool *ok) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value derived from combining together the values of the <db:code role="parameter">keys</db:code> using the OR operator, or -1 if <db:code role="parameter">keys</db:code> is not defined. Note that the strings in <db:code role="parameter">keys</db:code> must be '|'-separated.</db:para>
<db:para>If <db:code role="parameter">keys</db:code> is not defined, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#isFlag">isFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKey">valueToKey</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKeys">valueToKeys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>const char *QMetaEnum::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const char *</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const char * name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the type (without the scope).</db:para>
<db:para>For example, the <db:link xlink:href="qt.xml#Key-enum">Qt::Key</db:link> enumeration has Key as the type name and <db:link xlink:href="qt.xml">Qt</db:link> as the scope.</db:para>
<db:para>For flags this returns the name of the flag type, not the name of the enum type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#scope">scope</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#enumName">enumName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scope">
<db:title>const char *QMetaEnum::scope() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const char *</db:type>
<db:methodname>scope</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const char * scope() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the scope this enumerator was declared in.</db:para>
<db:para>For example, the <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignmentFlag</db:link> enumeration has Qt as the scope and AlignmentFlag as the name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>int QMetaEnum::value(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int value(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value with the given <db:code role="parameter">index</db:code>; or returns -1 if there is no such value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#keyCount">keyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#key">key</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#keyToValue">keyToValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueToKey">
<db:title>const char *QMetaEnum::valueToKey(int <db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const char *</db:type>
<db:methodname>valueToKey</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const char * valueToKey(int value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the string that is used as the name of the given enumeration <db:code role="parameter">value</db:code>, or nullptr if <db:code role="parameter">value</db:code> is not defined.</db:para>
<db:para>For flag types, use <db:link xlink:href="qmetaenum.xml#valueToKeys">valueToKeys</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#isFlag">isFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKeys">valueToKeys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueToKeys">
<db:title>QByteArray QMetaEnum::valueToKeys(int <db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>valueToKeys</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray valueToKeys(int value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a byte array of '|'-separated keys that represents the given <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaenum.xml#isFlag">isFlag</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#valueToKey">valueToKey</db:link>()</db:member>
<db:member><db:link xlink:href="qmetaenum.xml#keysToValue">keysToValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
