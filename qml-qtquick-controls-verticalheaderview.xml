<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>VerticalHeaderView QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Offers a vertical header view to accompany a <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>TableView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>VerticalHeaderView is part of <db:simplelist><db:member>qtquickcontrols-containers</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qml-qtquick-controls-verticalheaderview.xml">VerticalHeaderView</db:link> provides a styled table header. It can either be used as an independent view or header for a <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>.</db:para>
<db:para>You can add a header for a <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> by assigning a <db:link xlink:href="qml-qtquick-controls-verticalheaderview.xml">VerticalHeaderView</db:link> to the <db:link xlink:href="qml-qtquick-tableview.xml#syncView-prop">TableView::syncView</db:link> property. The header and the table will then be kept in sync while flicking.</db:para>
<db:para>By default, <db:link xlink:href="qml-qtquick-controls-verticalheaderview.xml">VerticalHeaderView</db:link> displays <db:link xlink:href="qabstractitemmodel.xml#headerData">header data</db:link> from the <db:link xlink:href="qml-qtquick-tableview.xml#syncView-prop">sync view's</db:link> <db:link xlink:href="qml-qtquick-tableview.xml#model-prop">model</db:link>. If you don't wish to use this model, you can assign a different model to the <db:link xlink:href="qml-qtquick-tableview.xml#model-prop">model</db:link> property. If you assign a model that is a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>, its header data will be used. Otherwise the data in the model will be used directly (for example, if you assign a model that is simply an array of strings).</db:para>
<db:para>By default, <db:link xlink:href="qml-qtquick-controls-verticalheaderview.xml#textRole-prop">textRole</db:link> is set to <db:code>&quot;display&quot;</db:code>, meaning that data from the model's <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> will be used. You can set this to another role name in order to have that data displayed instead.</db:para>
<db:para>The application is responsible for placing the header at the correct location in the scene. You can add as many headers as you want to a single <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>, which can be useful if you for example want to place headers on all four sides of the table.</db:para>
<db:para>The following snippet shows how you can add a horizontal and vertical header view to a table view:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Controls
import Qt.labs.qmlmodels

ApplicationWindow {
    visible: true
    width: 640
    height: 480
    title: qsTr(&quot;HeaderView&quot;)

    Rectangle {
        anchors.fill: parent
        // The background color will show through the cell
        // spacing, and therefore become the grid line color.
        color: Qt.styleHints.appearance === Qt.Light ? palette.mid : palette.midlight

        HorizontalHeaderView {
            id: horizontalHeader
            anchors.left: tableView.left
            anchors.top: parent.top
            syncView: tableView
            clip: true
        }

        VerticalHeaderView {
            id: verticalHeader
            anchors.top: tableView.top
            anchors.left: parent.left
            syncView: tableView
            clip: true
        }

        TableView {
            id: tableView
            anchors.left: verticalHeader.right
            anchors.top: horizontalHeader.bottom
            anchors.right: parent.right
            anchors.bottom: parent.bottom
            clip: true

            columnSpacing: 1
            rowSpacing: 1

            model: TableModel {
                TableModelColumn { display: &quot;name&quot; }
                TableModelColumn { display: &quot;color&quot; }

                rows: [
                    {
                        &quot;name&quot;: &quot;cat&quot;,
                        &quot;color&quot;: &quot;black&quot;
                    },
                    {
                        &quot;name&quot;: &quot;dog&quot;,
                        &quot;color&quot;: &quot;brown&quot;
                    },
                    {
                        &quot;name&quot;: &quot;bird&quot;,
                        &quot;color&quot;: &quot;white&quot;
                    }
                ]
            }

            delegate: Rectangle {
                implicitWidth: 100
                implicitHeight: 20
                color: palette.base
                Label {
                    text: display
                }
            }
        }
    }
</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-controls-verticalheaderview.xml">VerticalHeaderView</db:link> will have <db:link xlink:href="qml-qtquick-tableview.xml#resizableColumns-prop">resizableColumns</db:link> set to <db:code>true</db:code> by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-horizontalheaderview.xml">HorizontalHeaderView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="model-prop">
<db:title>model : QVariant</db:title>
<db:fieldsynopsis>
<db:type>QVariant</db:type>
<db:varname>model</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the model providing data for the vertical header view.</db:para>
<db:para>When model is not explicitly set, the header will use the <db:link xlink:href="qml-qtquick-controls-verticalheaderview.xml#syncView-prop">syncView</db:link>'s model once <db:link xlink:href="qml-qtquick-controls-verticalheaderview.xml#syncView-prop">syncView</db:link> is set.</db:para>
<db:para>If model is a <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link>, its vertical headerData() will be accessed.</db:para>
<db:para>If model is a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> other than <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link>, model's data() will be accessed.</db:para>
<db:para>Otherwise, the behavior is same as setting <db:link xlink:href="qml-qtquick-tableview.xml#model-prop">TableView::model</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-tableview.xml#model-prop">model</db:link></db:member>
<db:member><db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="syncView-prop">
<db:title>syncView : TableView</db:title>
<db:fieldsynopsis>
<db:type>TableView</db:type>
<db:varname>syncView</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> to synchronize with.</db:para>
<db:para>Once this property is bound to another <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>, both header and table will synchronize with regard to column widths, column spacing, and flicking vertically.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-controls-verticalheaderview.xml#model">model</db:link> is not explicitly set, then the header will use the syncView's model to label the columns.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-verticalheaderview.xml#model">model</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textRole-prop">
<db:title>textRole : QString</db:title>
<db:fieldsynopsis>
<db:type>QString</db:type>
<db:varname>textRole</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the model role used to display text in each header cell.</db:para>
<db:para>When the model has multiple roles, textRole can be set to determine which role should be displayed.</db:para>
<db:para>If model is a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> then it will default to &quot;display&quot;; otherwise it is empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#roleNames">QAbstractItemModel::roleNames</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
