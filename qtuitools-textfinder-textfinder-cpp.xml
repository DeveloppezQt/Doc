<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Text Finder Example</db:title>
<db:productname>QtUiTools</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt UI Tools Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Dynamically processing forms using Qt UI Tools.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtUiTools&gt;
#include &lt;QtWidgets&gt;
#include &quot;textfinder.h&quot;

TextFinder::TextFinder(QWidget *parent)
    : QWidget(parent)
{
    QWidget *formWidget = loadUiFile();

    ui_findButton = findChild&lt;QPushButton*&gt;(&quot;findButton&quot;);
    ui_textEdit = findChild&lt;QTextEdit*&gt;(&quot;textEdit&quot;);
    ui_lineEdit = findChild&lt;QLineEdit*&gt;(&quot;lineEdit&quot;);

    QMetaObject::connectSlotsByName(this);

    loadTextFile();

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;addWidget(formWidget);
    setLayout(layout);

    setWindowTitle(tr(&quot;Text Finder&quot;));
    isFirstTime = true;
}

QWidget* TextFinder::loadUiFile()
{
    QUiLoader loader;

    QFile file(&quot;:/forms/textfinder.ui&quot;);
    file.open(QFile::ReadOnly);

    QWidget *formWidget = loader.load(&amp;file, this);
    file.close();

    return formWidget;
}

void TextFinder::loadTextFile()
{
    QFile inputFile(&quot;:/forms/input.txt&quot;);
    inputFile.open(QIODevice::ReadOnly);
    QTextStream in(&amp;inputFile);
    QString line = in.readAll();
    inputFile.close();

    ui_textEdit-&gt;append(line);
    ui_textEdit-&gt;setUndoRedoEnabled(false);
    ui_textEdit-&gt;setUndoRedoEnabled(true);
}

void TextFinder::on_findButton_clicked()
{
    QString searchString = ui_lineEdit-&gt;text();
    QTextDocument *document = ui_textEdit-&gt;document();

    bool found = false;

    if (isFirstTime == false)
        document-&gt;undo();

    if (searchString.isEmpty()) {
        QMessageBox::information(this, tr(&quot;Empty Search Field&quot;),
                &quot;The search field is empty. Please enter a word and click Find.&quot;);
    } else {

        QTextCursor highlightCursor(document);
        QTextCursor cursor(document);

        cursor.beginEditBlock();

        QTextCharFormat plainFormat(highlightCursor.charFormat());
        QTextCharFormat colorFormat = plainFormat;
        colorFormat.setForeground(Qt::red);

        while (!highlightCursor.isNull() &amp;&amp; !highlightCursor.atEnd()) {
            highlightCursor = document-&gt;find(searchString, highlightCursor, QTextDocument::FindWholeWords);

            if (!highlightCursor.isNull()) {
                found = true;
                highlightCursor.movePosition(QTextCursor::WordRight,
                                       QTextCursor::KeepAnchor);
                highlightCursor.mergeCharFormat(colorFormat);
            }
        }

        cursor.endEditBlock();
        isFirstTime = false;

        if (found == false) {
            QMessageBox::information(this, tr(&quot;Word Not Found&quot;),
                &quot;Sorry, the word cannot be found.&quot;);
        }
    }
}

</db:programlisting>
</db:article>
