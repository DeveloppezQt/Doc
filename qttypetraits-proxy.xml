<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QtTypeTraits&gt;</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Core Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="qAsConst">
<db:title>[constexpr] typename std::add_const&lt;T&gt;::type &amp;qAsConst(T &amp;<db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>typename std::add_const&lt;T&gt;::type &amp;</db:type>
<db:methodname>qAsConst</db:methodname>
<db:methodparam>
<db:type>T &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">typename std::add_const&lt;T&gt;::type &amp; qAsConst(T &amp;t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code role="parameter">t</db:code> cast to const T.</db:para>
<db:para>This function is a Qt implementation of C++17's std::as_const(), a cast function like std::move(). But while std::move() turns lvalues into rvalues, this function turns non-const lvalues into const lvalues. Like std::as_const(), it doesn't work on rvalues, because it cannot be efficiently implemented for rvalues without leaving dangling references.</db:para>
<db:para>Its main use in Qt is to prevent implicitly-shared Qt containers from detaching:</db:para>
<db:programlisting language="cpp">    QString s = ...;
    for (QChar ch : s) // detaches 's' (performs a deep-copy if 's' was shared)
        process(ch);
    for (QChar ch : qAsConst(s)) // ok, no detach attempt
        process(ch);
</db:programlisting>
<db:para>Of course, in this case, you could (and probably should) have declared s as const in the first place:</db:para>
<db:programlisting language="cpp">    const QString s = ...;
    for (QChar ch : s) // ok, no detach attempt on const objects
        process(ch);
</db:programlisting>
<db:para>but often that is not easily possible.</db:para>
<db:para>It is important to note that qAsConst() does not copy its argument, it just performs a const_cast&lt;const T&amp;&gt;(t). This is also the reason why it is designed to fail for rvalues: The returned reference would go stale too soon. So while this works (but detaches the returned object):</db:para>
<db:programlisting language="cpp">    for (QChar ch : funcReturningQString())
        process(ch); // OK, the returned object is kept alive for the loop's duration
</db:programlisting>
<db:para>this would not:</db:para>
<db:programlisting language="cpp">    for (QChar ch : qAsConst(funcReturningQString()))
        process(ch); // ERROR: ch is copied from deleted memory
</db:programlisting>
<db:para>To prevent this construct from compiling (and failing at runtime), qAsConst() has a second, deleted, overload which binds to rvalues.</db:para>
</db:section>
<db:section xml:id="qAsConst-1">
<db:title>void qAsConst(const T &amp;&amp;<db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qAsConst</db:methodname>
<db:methodparam>
<db:type>const T &amp;&amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void qAsConst(const T &amp;&amp;t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This overload is deleted to prevent a dangling reference in code like</db:para>
<db:programlisting language="cpp">    for (QChar ch : qAsConst(funcReturningQString()))
        process(ch); // ERROR: ch is copied from deleted memory
</db:programlisting>
</db:section>
<db:section xml:id="qExchange">
<db:title>[constexpr] T qExchange(T &amp;<db:emphasis>obj</db:emphasis>, U &amp;&amp;<db:emphasis>newValue</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>T</db:type>
<db:methodname>qExchange</db:methodname>
<db:methodparam>
<db:type>T &amp;</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>U &amp;&amp;</db:type>
<db:parameter>newValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T qExchange(T &amp;obj, U &amp;&amp;newValue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the value of <db:code role="parameter">obj</db:code> with <db:code role="parameter">newValue</db:code> and returns the old value of <db:code role="parameter">obj</db:code>.</db:para>
<db:para>This is Qt's implementation of std::exchange(). It differs from std::exchange() only in that it is constexpr already before C++20 and noexcept already before C++23.</db:para>
<db:para>We strongly advise to use std::exchange() when you don't need the C++20 or C++23 variants.</db:para>
<db:para>Here is how to use qExchange() to implement move constructors:</db:para>
<db:programlisting language="cpp">MyClass(MyClass &amp;amp;&amp;amp;other)
  : m_pointer{qExchange(other.m_pointer, nullptr)},
    m_int{qExchange(other.m_int, 0)},
    m_vector{std::move(other.m_vector)},
    ...
</db:programlisting>
<db:para>For members of class type, we can use std::move(), as their move-constructor will do the right thing. But for scalar types such as raw pointers or integer type, move is the same as copy, which, particularly for pointers, is not what we expect. So, we cannot use std::move() for such types, but we can use std::exchange()/qExchange() to make sure the source object's member is already reset by the time we get to the initialization of our next data member, which might come in handy if the constructor exits with an exception.</db:para>
<db:para>Here is how to use qExchange() to write a loop that consumes the collection it iterates over:</db:para>
<db:programlisting language="cpp">for (auto &amp;amp;e : qExchange(collection, {})
    doSomethingWith(e);
</db:programlisting>
<db:para>Which is equivalent to the following, much more verbose code:</db:para>
<db:programlisting language="cpp">{
    auto tmp = std::move(collection);
    collection = {};                    // or collection.clear()
    for (auto &amp;amp;e : tmp)
        doSomethingWith(e);
}                                       // destroys 'tmp'
</db:programlisting>
<db:para>This is perfectly safe, as the for-loop keeps the result of qExchange() alive for as long as the loop runs, saving the declaration of a temporary variable. Be aware, though, that qExchange() returns a non-const object, so Qt containers may detach.</db:para>
</db:section>
<db:section xml:id="qToUnderlying">
<db:title>[constexpr, since 6.2] std::underlying_type_t&lt;Enum&gt; qToUnderlying(Enum <db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>std::underlying_type_t&lt;Enum&gt;</db:type>
<db:methodname>qToUnderlying</db:methodname>
<db:methodparam>
<db:type>Enum</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::underlying_type_t&lt;Enum&gt; qToUnderlying(Enum e)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the enumerator <db:code role="parameter">e</db:code> to the equivalent value expressed in its enumeration's underlying type.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
</db:section>
</db:article>
