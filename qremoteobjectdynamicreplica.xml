<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRemoteObjectDynamicReplica Class</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A dynamically instantiated <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRemoteObjectDynamicReplica</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS RemoteObjects)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::RemoteObjects)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += remoteobjects</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qremoteobjectreplica.xml" xlink:role="class">QRemoteObjectReplica</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>There are generated replicas (replicas having the header files produced by the <db:link xlink:href="qtremoteobjects-repc.xml">Replica Compiler</db:link>), and dynamic replicas, that are generated on-the-fly. This is the class for the dynamic type of replica.</db:para>
<db:para>When the connection to the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link> object is made, the initialization step passes the current property values (see <db:link xlink:href="qtremoteobjects-replica.xml#replica-initialization">Replica Initialization</db:link>). In a DynamicReplica, the property/signal/slot details are also sent, allowing the replica object to be created on-the-fly. This can be convenient in QML or scripting, but has two primary disadvantages. First, the object is in effect &quot;empty&quot; until it is successfully initialized by the <db:link xlink:href="qtremoteobjects-source.xml#source">Source</db:link>. Second, in C++, calls must be made using <db:link xlink:href="qmetaobject.xml#invokeMethod">QMetaObject::invokeMethod</db:link>(), as the moc generated lookup will not be available.</db:para>
<db:para>This class does not have a public constructor. It can only be instantiated by using the dynamic <db:link xlink:href="qremoteobjectnode.xml#acquire">QRemoteObjectNode::acquire</db:link> method.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QRemoteObjectDynamicReplica">
<db:title>[override virtual] QRemoteObjectDynamicReplica::~QRemoteObjectDynamicReplica()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QRemoteObjectDynamicReplica</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QRemoteObjectDynamicReplica() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the dynamic replica.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtremoteobjects-replica.xml#replica-ownership">Replica Ownership</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
