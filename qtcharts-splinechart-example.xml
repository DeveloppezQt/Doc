<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SplineChart Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create a simple spline chart.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_splinechart.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-spline-charts">
<db:title>Creating Spline Charts</db:title>
<db:para>To create spline charts we need to put our data into QSplineSeries. QSplineSeries automatically calculates spline segment control points that are needed to properly draw the spline.</db:para>
<db:programlisting language="cpp">QSplineSeries *series = new QSplineSeries();
series-&gt;setName(&quot;spline&quot;);
</db:programlisting>
<db:para>Now let's add some data points to the series.</db:para>
<db:programlisting language="cpp">series-&gt;append(0, 6);
series-&gt;append(2, 4);
series-&gt;append(3, 8);
series-&gt;append(7, 4);
series-&gt;append(10, 5);
*series &lt;&lt; QPointF(11, 1) &lt;&lt; QPointF(13, 3) &lt;&lt; QPointF(17, 6) &lt;&lt; QPointF(18, 3) &lt;&lt; QPointF(20, 2);
</db:programlisting>
<db:para>The data series has been populated. To display it on a chart we create a QChart object and add the data series to it. We also set the title and the values range on the y-axis, so that our chart's visibility is better.</db:para>
<db:programlisting language="cpp">QChart *chart = new QChart();
chart-&gt;legend()-&gt;hide();
chart-&gt;addSeries(series);
chart-&gt;setTitle(&quot;Simple spline chart example&quot;);
chart-&gt;createDefaultAxes();
chart-&gt;axisY()-&gt;setRange(0, 10);
</db:programlisting>
<db:para>Then we create a QChartView object with QChart as a parameter. This way we don't need to create a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> scene ourselves. We also set the Antialiasing on to have the rendered lines look nicer.</db:para>
<db:programlisting language="cpp">QChartView *chartView = new QChartView(chart);
chartView-&gt;setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:para>Finally, we set the QChartView as the windows's central widget.</db:para>
<db:programlisting language="cpp">QMainWindow window;
window.setCentralWidget(chartView);
window.resize(400, 300);
window.show();
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="splinechart/main.cpp">splinechart/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="splinechart/splinechart.pro">splinechart/splinechart.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
