<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes how a source and replicas interact with one another.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="remote-object-interaction">
<db:title>Remote Object Interaction</db:title>
<db:para>The interaction between source and replicas is directional. Property changes and signal emission happen on the source, and are propagated to all replicas. If a property is writable, you can call the setter function on a replica, which is then forwarded to the source. Afterwards, if this call results in a new property value, that value is first changed at the source and then subsequently forwarded to all replicas. To the replica, it is then an asynchronous call, with latency before the change takes effect.</db:para>
<db:para>While technically you can emit a signal on a replica, this is discouraged as it may have unexpected results. It will only trigger slots connected to the replica itself; not slots connected to the source or other replicas. Like property setters, slot invocations on a replica are forwarded to the source to run.</db:para>
<db:para>Qt Remote Objects automatically implements the behavior described above. There is no need to write any replica implementation code. For dynamic replicas, this is handled automatically at runtime. For <db:link xlink:href="qtremoteobjects-repc.xml">repc</db:link> generated headers, this is handled at compile time.</db:para>
</db:section>
</db:article>
