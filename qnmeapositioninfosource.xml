<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNmeaPositionInfoSource Class</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnmeapositioninfosource.xml">QNmeaPositionInfoSource</db:link> class provides positional information using a NMEA data source.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNmeaPositionInfoSource</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Positioning)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Positioning)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += positioning</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgeopositioninfosource.xml" xlink:role="class">QGeoPositionInfoSource</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNmeaPositionInfoSource is part of <db:simplelist><db:member>QtPositioning-positioning</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>NMEA is a commonly used protocol for the specification of one's global position at a certain point in time. The <db:link xlink:href="qnmeapositioninfosource.xml">QNmeaPositionInfoSource</db:link> class reads NMEA data and uses it to provide positional data in the form of <db:link xlink:href="qgeopositioninfo.xml">QGeoPositionInfo</db:link> objects.</db:para>
<db:para>A <db:link xlink:href="qnmeapositioninfosource.xml">QNmeaPositionInfoSource</db:link> instance operates in either <db:link xlink:href="qnmeapositioninfosource.xml#UpdateMode-enum">RealTimeMode</db:link> or <db:link xlink:href="qnmeapositioninfosource.xml#UpdateMode-enum">SimulationMode</db:link>. These modes allow NMEA data to be read from either a live source of positional data, or replayed for simulation purposes from previously recorded NMEA data.</db:para>
<db:para>The source of NMEA data is set with <db:link xlink:href="qnmeapositioninfosource.xml#setDevice">setDevice</db:link>().</db:para>
<db:para>Use <db:link xlink:href="qnmeapositioninfosource.xml#startUpdates">startUpdates</db:link>() to start receiving regular position updates and <db:link xlink:href="qnmeapositioninfosource.xml#stopUpdates">stopUpdates</db:link>() to stop these updates. If you only require updates occasionally, you can call <db:link xlink:href="qnmeapositioninfosource.xml#requestUpdate">requestUpdate</db:link>() to request a single update.</db:para>
<db:para>In both cases the position information is received via the <db:link xlink:href="qgeopositioninfosource.xml#positionUpdated">positionUpdated</db:link>() signal and the last known position can be accessed with <db:link xlink:href="qnmeapositioninfosource.xml#lastKnownPosition">lastKnownPosition</db:link>().</db:para>
<db:para><db:link xlink:href="qnmeapositioninfosource.xml">QNmeaPositionInfoSource</db:link> supports reporting the accuracy of the horizontal and vertical position. To enable position accuracy reporting an estimate of the User Equivalent Range Error associated with the NMEA source must be set with <db:link xlink:href="qnmeapositioninfosource.xml#setUserEquivalentRangeError">setUserEquivalentRangeError</db:link>().</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="UpdateMode-enum">
<db:title>enum QNmeaPositionInfoSource::UpdateMode</db:title>
<db:enumsynopsis>
<db:enumname>UpdateMode</db:enumname>
<db:enumitem>
<db:enumidentifier>RealTimeMode</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SimulationMode</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Defines the available update modes.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnmeapositioninfosource.xml">QNmeaPositionInfoSource</db:link></db:emphasis>::RealTimeMode</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Positional data is read and distributed from the data source as it becomes available. Use this mode if you are using a live source of positional data (for example, a GPS hardware device).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnmeapositioninfosource.xml">QNmeaPositionInfoSource</db:link></db:emphasis>::SimulationMode</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The data and time information in the NMEA source data is used to provide positional updates at the rate at which the data was originally recorded. Use this mode if the data source contains previously recorded NMEA data and you want to replay the data for simulation purposes.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNmeaPositionInfoSource">
<db:title>[explicit] QNmeaPositionInfoSource::QNmeaPositionInfoSource(QNmeaPositionInfoSource::UpdateMode <db:emphasis>updateMode</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QNmeaPositionInfoSource</db:methodname>
<db:methodparam>
<db:type>QNmeaPositionInfoSource::UpdateMode</db:type>
<db:parameter>updateMode</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QNmeaPositionInfoSource(QNmeaPositionInfoSource::UpdateMode updateMode, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qnmeapositioninfosource.xml">QNmeaPositionInfoSource</db:link> instance with the given <db:code role="parameter">parent</db:code> and <db:code role="parameter">updateMode</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNmeaPositionInfoSource">
<db:title>[virtual] QNmeaPositionInfoSource::~QNmeaPositionInfoSource()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QNmeaPositionInfoSource</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QNmeaPositionInfoSource()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the position source.</db:para>
</db:section>
<db:section xml:id="device">
<db:title>QIODevice *QNmeaPositionInfoSource::device() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QIODevice *</db:type>
<db:methodname>device</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * device() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the NMEA data source.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnmeapositioninfosource.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>[override virtual] QGeoPositionInfoSource::Error QNmeaPositionInfoSource::error() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QGeoPositionInfoSource::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPositionInfoSource::Error error() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgeopositioninfosource.xml#error" role="function">QGeoPositionInfoSource::error() const</db:link>.</db:para>
</db:section>
<db:section xml:id="lastKnownPosition">
<db:title>[override virtual] QGeoPositionInfo QNmeaPositionInfoSource::lastKnownPosition(bool <db:emphasis>fromSatellitePositioningMethodsOnly</db:emphasis> = false) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QGeoPositionInfo</db:type>
<db:methodname>lastKnownPosition</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>fromSatellitePositioningMethodsOnly</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPositionInfo lastKnownPosition(bool fromSatellitePositioningMethodsOnly) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgeopositioninfosource.xml#lastKnownPosition" role="function">QGeoPositionInfoSource::lastKnownPosition(bool fromSatellitePositioningMethodsOnly) const</db:link>.</db:para>
</db:section>
<db:section xml:id="minimumUpdateInterval">
<db:title>[override virtual] int QNmeaPositionInfoSource::minimumUpdateInterval() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>minimumUpdateInterval</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int minimumUpdateInterval() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qgeopositioninfosource.xml#minimumUpdateInterval-prop" role="property">QGeoPositionInfoSource::minimumUpdateInterval</db:link>.</db:para>
</db:section>
<db:section xml:id="parsePosInfoFromNmeaData">
<db:title>[virtual protected] bool QNmeaPositionInfoSource::parsePosInfoFromNmeaData(const char *<db:emphasis>data</db:emphasis>, int <db:emphasis>size</db:emphasis>, QGeoPositionInfo *<db:emphasis>posInfo</db:emphasis>, bool *<db:emphasis>hasFix</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>parsePosInfoFromNmeaData</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGeoPositionInfo *</db:type>
<db:parameter>posInfo</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>hasFix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool parsePosInfoFromNmeaData(const char *data, int size, QGeoPositionInfo *posInfo, bool *hasFix)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Parses an NMEA sentence string into a <db:link xlink:href="qgeopositioninfo.xml">QGeoPositionInfo</db:link>.</db:para>
<db:para>The default implementation will parse standard NMEA sentences. This method should be reimplemented in a subclass whenever the need to deal with non-standard NMEA sentences arises.</db:para>
<db:para>The parser reads <db:code role="parameter">size</db:code> bytes from <db:code role="parameter">data</db:code> and uses that information to setup <db:code role="parameter">posInfo</db:code> and <db:code role="parameter">hasFix</db:code>. If <db:code role="parameter">hasFix</db:code> is set to false then <db:code role="parameter">posInfo</db:code> may contain only the time or the date and the time.</db:para>
<db:para>Returns true if the sentence was successfully parsed, otherwise returns false and should not modifiy <db:code role="parameter">posInfo</db:code> or <db:code role="parameter">hasFix</db:code>.</db:para>
</db:section>
<db:section xml:id="requestUpdate">
<db:title>[override virtual] void QNmeaPositionInfoSource::requestUpdate(int <db:emphasis>msec</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>requestUpdate</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msec</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestUpdate(int msec) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgeopositioninfosource.xml#requestUpdate" role="function">QGeoPositionInfoSource::requestUpdate(int timeout)</db:link>.</db:para>
</db:section>
<db:section xml:id="setDevice">
<db:title>void QNmeaPositionInfoSource::setDevice(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDevice</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDevice(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the NMEA data source to <db:code role="parameter">device</db:code>. If the device is not open, it will be opened in QIODevice::ReadOnly mode.</db:para>
<db:para>The source device can only be set once and must be set before calling <db:link xlink:href="qnmeapositioninfosource.xml#startUpdates">startUpdates</db:link>() or <db:link xlink:href="qnmeapositioninfosource.xml#requestUpdate">requestUpdate</db:link>().</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The <db:code role="parameter">device</db:code> must emit <db:link xlink:href="qiodevice.xml#readyRead">QIODevice::readyRead</db:link>() for the source to be notified when data is available for reading. <db:link xlink:href="qnmeapositioninfosource.xml">QNmeaPositionInfoSource</db:link> does not assume the ownership of the device, and hence does not deallocate it upon destruction.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnmeapositioninfosource.xml#device">device</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUpdateInterval">
<db:title>[override virtual] void QNmeaPositionInfoSource::setUpdateInterval(int <db:emphasis>msec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setUpdateInterval</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msec</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUpdateInterval(int msec) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qgeopositioninfosource.xml#updateInterval-prop" role="property">QGeoPositionInfoSource::updateInterval</db:link>.</db:para>
</db:section>
<db:section xml:id="setUserEquivalentRangeError">
<db:title>void QNmeaPositionInfoSource::setUserEquivalentRangeError(double <db:emphasis>uere</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUserEquivalentRangeError</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>uere</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUserEquivalentRangeError(double uere)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the User Equivalent Range Error (UERE) to <db:code role="parameter">uere</db:code>. The UERE is used in calculating an estimate of the accuracy of the position information reported by the position info source. The UERE should be set to a value appropriate for the GPS device which generated the NMEA stream.</db:para>
<db:para>The true UERE value is calculated from multiple error sources including errors introduced by the satellites and signal propogation delays through the atmosphere as well as errors introduced by the receiving GPS equipment. For details on GPS accuracy see <db:link xlink:href="https://web.archive.org/web/20161212144906if_/http://edu-observatory.org/gps/gps_accuracy.html">Sam J. Wormley, GPS Errors &amp; Estimating Your Reveiver's Accuracy</db:link>.</db:para>
<db:para>A typical value for UERE is approximately 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnmeapositioninfosource.xml#userEquivalentRangeError">userEquivalentRangeError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startUpdates">
<db:title>[override virtual] void QNmeaPositionInfoSource::startUpdates()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>startUpdates</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void startUpdates() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgeopositioninfosource.xml#startUpdates" role="function">QGeoPositionInfoSource::startUpdates()</db:link>.</db:para>
</db:section>
<db:section xml:id="stopUpdates">
<db:title>[override virtual] void QNmeaPositionInfoSource::stopUpdates()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>stopUpdates</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stopUpdates() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgeopositioninfosource.xml#stopUpdates" role="function">QGeoPositionInfoSource::stopUpdates()</db:link>.</db:para>
</db:section>
<db:section xml:id="supportedPositioningMethods">
<db:title>[override virtual] QGeoPositionInfoSource::PositioningMethods QNmeaPositionInfoSource::supportedPositioningMethods() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QGeoPositionInfoSource::PositioningMethods</db:type>
<db:methodname>supportedPositioningMethods</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoPositionInfoSource::PositioningMethods supportedPositioningMethods() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgeopositioninfosource.xml#supportedPositioningMethods" role="function">QGeoPositionInfoSource::supportedPositioningMethods() const</db:link>.</db:para>
</db:section>
<db:section xml:id="updateMode">
<db:title>QNmeaPositionInfoSource::UpdateMode QNmeaPositionInfoSource::updateMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNmeaPositionInfoSource::UpdateMode</db:type>
<db:methodname>updateMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNmeaPositionInfoSource::UpdateMode updateMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the update mode.</db:para>
</db:section>
<db:section xml:id="userEquivalentRangeError">
<db:title>double QNmeaPositionInfoSource::userEquivalentRangeError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>userEquivalentRangeError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double userEquivalentRangeError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current User Equivalent Range Error (UERE). The UERE is used in calculating an estimate of the accuracy of the position information reported by the position info source. The default value is NaN which means no accuracy information will be provided.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnmeapositioninfosource.xml#setUserEquivalentRangeError">setUserEquivalentRangeError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
