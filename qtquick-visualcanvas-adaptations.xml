<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Scene Graph Adaptations</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="scene-graph-adaptations-in-qt-quick">
<db:title>Scene Graph Adaptations in Qt Quick</db:title>
<db:para>In Qt 5.0, Qt Quick always relied on OpenGL (OpenGL ES 2.0 or OpenGL 2.0) to parse the scene graph and render the results to a render target.</db:para>
<db:para>From Qt 5.8 onwards, Qt Quick also supports rendering in software, and with OpenVG. This is realized by having additional scene graph adaptations, either in form of plugins (openvg) or built-in to the Qt Quick library (software). The default adaptation continues to rely directly on OpenGL.</db:para>
<db:para>From Qt 5.14 onwards, the default adaptation gains the option of rendering via a graphics abstraction layer, the Qt Rendering Hardware Interface (RHI), provided by the <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link> module. When enabled, no direct OpenGL calls are made. Rather, the scene graph renders by using the APIs provided by the abstraction layer, which is then translated into OpenGL, Vulkan, Metal, or Direct 3D calls. Shader handling is also unified by writing shader code once, compiling to <db:link xlink:href="https://www.khronos.org/spir/">SPIR-V</db:link>, and then translating to the language appropriate for the various graphics APIs.</db:para>
<db:para>Starting with Qt 6.0, the RHI-based rendering model is the default, and there is no option to fall back to directly using OpenGL.</db:para>
<db:anchor xml:id="switching-between-the-adaptation-used-by-the-application"/>
</db:section>
<db:section xml:id="switch-between-adaptations-in-your-application">
<db:title>Switch Between Adaptations in Your Application</db:title>
<db:para>Unlike <db:code>software</db:code>, the RHI-based renderer is not an additional adaptation, and is always built-in. As of Qt 6.0 it is always enabled. On platforms where multiple graphics APIs are available, the scenegraph makes a platform-specific choice. If this is not desired, applications can force a specified graphics API by setting the environment variable <db:code>QSG_RHI_BACKEND</db:code> or via <db:link xlink:href="qquickwindow.xml#setGraphicsApi">QQuickWindow::setGraphicsApi</db:link>() in combination with <db:link xlink:href="qsgrendererinterface.xml#GraphicsApi-enum">QSGRendererInterface::GraphicsApi</db:link>.</db:para>
<db:para>Switching to a different adaptation can be achieved in two ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Use an environment variable - Set the <db:code>QT_QUICK_BACKEND</db:code> or the legacy <db:code>QMLSCENE_DEVICE</db:code> environment variable before launching applications.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use a C++ API - Call <db:link xlink:href="qquickwindow.xml#setSceneGraphBackend">QQuickWindow::setSceneGraphBackend</db:link>() early on in the application's main() function.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The following backends are supported:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Default - Request with the <db:code>&quot;rhi&quot;</db:code> string or a <db:link xlink:href="qsgrendererinterface.xml#GraphicsApi-enum">QSGRendererInterface::GraphicsApi</db:link> enum value different than the ones listed below.</db:para>
</db:listitem>
<db:listitem>
<db:para>Software - Request with the <db:code>&quot;software&quot;</db:code> string or the <db:link xlink:href="qsgrendererinterface.xml#GraphicsApi-enum">QSGRendererInterface::Software</db:link> enum value.</db:para>
</db:listitem>
<db:listitem>
<db:para>OpenVG - Request with the <db:code>&quot;openvg&quot;</db:code> string or the <db:link xlink:href="qsgrendererinterface.xml#GraphicsApi-enum">QSGRendererInterface::OpenVG</db:link> enum value.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To find out which backend is in use, you can enable basic scene graph information logging via the <db:code>QSG_INFO</db:code> environment variable or the <db:code>qt.scenegraph.general</db:code> logging category. This results in some information being printed onto the debug output, during application startup.</db:para>
<db:note>
<db:para>In Qt builds with both OpenGL and Vulkan disabled, the default adaptation is <db:code>software</db:code>. This does not apply to Windows or macOS however, because these platforms always have Direct 3D or Metal support, respectively, enabled.</db:para>
</db:note>
<db:note>
<db:para>Typically, adaptations other than the default one come with a set of limitations as they are unlikely to provide a feature set that's 100% compatible with OpenGL. However, these adaptations may provide their own specific advantages in certain areas. For more information on the various adaptations, refer to the sections below.</db:para>
</db:note>
</db:section>
<db:section xml:id="default-adaptation">
<db:title>Default Adaptation</db:title>
<db:para>When using OpenGL directly, the default adaptation is capable of providing the full Qt Quick 2 feature set. For more details, see <db:link xlink:href="qtquick-visualcanvas-scenegraph-renderer.xml">Default Adaptation</db:link>.</db:para>
</db:section>
<db:section xml:id="software-adaptation">
<db:title>Software Adaptation</db:title>
<db:para>The Software adaptation is an alternative renderer for <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> 2 that uses the raster paint engine to render the contents of the scene graph. For more details, see <db:link xlink:href="qtquick-visualcanvas-adaptations-software.xml">Software Adaptation</db:link>.</db:para>
</db:section>
<db:section xml:id="openvg">
<db:title>OpenVG</db:title>
<db:para>The OpenVG adaptation is an alternative renderer for <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> 2 that renders the contents of the scene graph using OpenVG commands to provide hardware-accelerated 2D vector and raster graphics. For more details, see <db:link xlink:href="qtquick-visualcanvas-adaptations-openvg.xml">OpenVG Adaptation</db:link>.</db:para>
</db:section>
</db:article>
