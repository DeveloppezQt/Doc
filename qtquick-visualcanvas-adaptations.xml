<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Scene Graph Adaptations</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="scene-graph-adaptations-in-qt-quick">
<db:title>Scene Graph Adaptations in Qt Quick</db:title>
<db:para>Originally, Qt Quick always relied on OpenGL (OpenGL ES 2.0 or OpenGL 2.0) to parse the scene graph and render the results to a render target. From Qt 5.8 onwards, Qt Quick also supports rendering in software and with Direct3D 12.</db:para>
<db:anchor xml:id="switching-between-the-adaptation-used-by-the-application"/>
</db:section>
<db:section xml:id="switch-between-adaptations-in-your-application">
<db:title>Switch Between Adaptations in Your Application</db:title>
<db:para>The default rendering backend is still OpenGL, but in Qt builds with OpenGL support disabled, the default is the software renderer. You can override this in one of two ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Use an environment variable - Set the <db:code>QT_QUICK_BACKEND</db:code> or the legacy <db:code>QMLSCENE_DEVICE</db:code> environment variable before launching applications.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use a C++ API - Call <db:link xlink:href="qquickwindow.xml#setSceneGraphBackend">QQuickWindow::setSceneGraphBackend</db:link>() early on in the application's main() function.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The following backends are supported:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>OpenGL - Request with the <db:code>&quot;&quot;</db:code> string or the <db:link xlink:href="qsgrendererinterface.xml#GraphicsApi-enum">QSGRendererInterface::OpenGL</db:link> enum value.</db:para>
</db:listitem>
<db:listitem>
<db:para>Software - Request with the <db:code>&quot;software&quot;</db:code> string or the <db:link xlink:href="qsgrendererinterface.xml#GraphicsApi-enum">QSGRendererInterface::Software</db:link> enum value.</db:para>
</db:listitem>
<db:listitem>
<db:para>Direct3D 12 - Request with the <db:code>&quot;d3d12&quot;</db:code> string or the <db:link xlink:href="qsgrendererinterface.xml#GraphicsApi-enum">QSGRendererInterface::Direct3D12</db:link> enum value.</db:para>
</db:listitem>
<db:listitem>
<db:para>OpenVG - Request with the <db:code>&quot;openvg&quot;</db:code> string or the <db:link xlink:href="qsgrendererinterface.xml#GraphicsApi-enum">QSGRendererInterface::OpenVG</db:link> enum value.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To find out which backend is in use, you can enable basic scene graph information logging via the <db:code>QSG_INFO</db:code> environment variable or the <db:code>qt.scenegraph.general</db:code> logging category. This results in some information being printed onto the debug output, during application startup.</db:para>
<db:note>
<db:para>Typically, adaptations other than OpenGL come with a set of limitations as they are unlikely to provide a feature set that's 100% compatible with OpenGL. However, these adaptations may provide their own specific advantages in certain areas. For more information on the various adaptations, refer to the sections below.</db:para>
</db:note>
</db:section>
<db:section xml:id="opengl-es-2-0-and-opengl-2-0-adaptation">
<db:title>OpenGL ES 2.0 and OpenGL 2.0 Adaptation</db:title>
<db:para>The OpenGL adaptation is the default adaptation, which is capable of providing the full Qt Quick 2 feature set. For more details, see <db:link xlink:href="qtquick-visualcanvas-scenegraph-renderer.xml">OpenGL Adaptation</db:link>.</db:para>
</db:section>
<db:section xml:id="software-adaptation">
<db:title>Software Adaptation</db:title>
<db:para>The Software adaptation is an alternative renderer for <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> 2 that uses the raster paint engine to render the contents of the scene graph. For more details, see <db:link xlink:href="qtquick-visualcanvas-adaptations-software.xml">Software Adaptation</db:link>.</db:para>
</db:section>
<db:section xml:id="direct3d-12-experimental">
<db:title>Direct3D 12 (experimental)</db:title>
<db:para>The Direct3D 12 adaptation is an alternative renderer for <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> 2 when running on Windows 10, both for Win32 and UWP applications. For more details, see <db:link xlink:href="qtquick-visualcanvas-adaptations-d3d12.xml">Direct3D 12 Adaptation</db:link>.</db:para>
</db:section>
<db:section xml:id="openvg">
<db:title>OpenVG</db:title>
<db:para>The OpenVG adaptation is an alternative renderer for <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> 2 that renders the contents of the scene graph using OpenVG commands to provide hardware-accelerated 2D vector and raster graphics. For more details, see <db:link xlink:href="qtquick-visualcanvas-adaptations-openvg.xml">OpenVG Adaptation</db:link>.</db:para>
</db:section>
</db:article>
