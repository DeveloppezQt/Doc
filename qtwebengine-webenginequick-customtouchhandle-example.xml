<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Qt Quick Custom Touch Handle Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows custom touch handles upon touch selection events.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/customtouchhandle.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis><db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> Qt Quick Touch Handle Example</db:emphasis> demonstrates how to use custom touch handles when a touch selection event happens. It shows the minimum amount of code needed to use custom touch handle delegates, and can be used as a basis for further experimentation.</db:para>
<db:section xml:id="custom-touch-handle">
<db:title>Custom Touch Handle</db:title>
<db:para>In <db:code>main.qml</db:code> we create the custom touch handle delegate.</db:para>
<db:programlisting language="cpp">                property int itemAction: WebEngineView.Back
                text: webEngineView.action(itemAction).text
                enabled: webEngineView.action(itemAction).enabled
                onClicked: webEngineView.action(itemAction).trigger()
                icon.name: webEngineView.action(itemAction).iconName
                display: AbstractButton.TextUnderIcon
            }

            ToolButton {
                property int itemAction: WebEngineView.Forward
                text: webEngineView.action(itemAction).text
                enabled: webEngineView.action(itemAction).enabled
                onClicked: webEngineView.action(itemAction).trigger()
                icon.name: webEngineView.action(itemAction).iconName
                display: AbstractButton.TextUnderIcon
            }

            ToolButton {
                property int itemAction: webEngineView.loading ? WebEngineView.Stop : WebEngineView.Reload
                text: webEngineView.action(itemAction).text
                enabled: webEngineView.action(itemAction).enabled
                onClicked: webEngineView.action(itemAction).trigger()
                icon.name: webEngineView.action(itemAction).iconName
                display: AbstractButton.TextUnderIcon
            }

            TextField {
                Layout.fillWidth: true
                text: webEngineView.url
                selectByMouse: true
                onEditingFinished: webEngineView.url = text
            }

            Label { text: 'Handle: ' }
            ComboBox {
                model: [ 'Default', 'Circle', 'Square' ]

                onCurrentValueChanged: {
                    if (currentValue == 'Circle')
                        webEngineView.touchHandleDelegate = circleTouchHandle
                    else if (currentValue == 'Square')
                        webEngineView.touchHandleDelegate = rectTouchHandle
                    else
                        webEngineView.touchHandleDelegate = null
                }

                Component.onCompleted: currentIndex = indexOfValue('Square')
            }
        }
    }
</db:programlisting>
</db:section>
<db:section xml:id="qml-code">
<db:title>QML Code</db:title>
<db:para>In <db:code>main.qml</db:code> we create the top level window filled by a <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> item loading the <db:link xlink:href="http://qt.io/">Qt Homepage</db:link>. To display custom touch handles, a QML item should be delegated to <db:link xlink:href="qml-qtwebengine-webengineview.xml#touchHandleDelegate-prop">WebEngineView::touchHandleDelegate</db:link>.</db:para>
<db:para>The touch handle's position, opacity, and visibility is automatically updated.</db:para>
<db:note>
<db:para>If no delegate is provided, Chromium's default touch handles will appear.</db:para>
</db:note>
</db:section>
<db:section xml:id="requirements">
<db:title>Requirements</db:title>
<db:para>The example requires a working internet connection to render the <db:link xlink:href="http://qt.io/">Qt Homepage</db:link> and a touch-enabled input device to trigger touch events. An optional system proxy should be picked up automatically.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwebengine.git/tree/examples/webenginequick/customtouchhandle?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
