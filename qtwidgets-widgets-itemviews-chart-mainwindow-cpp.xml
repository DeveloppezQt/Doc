<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Chart Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Chart example shows how to create a custom view for the model/view framework.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;pieview.h&quot;
#include &quot;mainwindow.h&quot;

#include &amp;lt;QtWidgets&amp;gt;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    QMenu *fileMenu = new QMenu(tr(&quot;&amp;amp;File&quot;), this);
    QAction *openAction = fileMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Open...&quot;));
    openAction-&amp;gt;setShortcuts(QKeySequence::Open);
    QAction *saveAction = fileMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Save As...&quot;));
    saveAction-&amp;gt;setShortcuts(QKeySequence::SaveAs);
    QAction *quitAction = fileMenu-&amp;gt;addAction(tr(&quot;E&amp;amp;xit&quot;));
    quitAction-&amp;gt;setShortcuts(QKeySequence::Quit);

    setupModel();
    setupViews();

    connect(openAction, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::openFile);
    connect(saveAction, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::saveFile);
    connect(quitAction, &amp;amp;QAction::triggered, qApp, &amp;amp;QCoreApplication::quit);

    menuBar()-&amp;gt;addMenu(fileMenu);
    statusBar();

    loadFile(&quot;:/Charts/qtdata.cht&quot;);

    setWindowTitle(tr(&quot;Chart&quot;));
    resize(870, 550);
}

void MainWindow::setupModel()
{
    model = new QStandardItemModel(8, 2, this);
    model-&amp;gt;setHeaderData(0, Qt::Horizontal, tr(&quot;Label&quot;));
    model-&amp;gt;setHeaderData(1, Qt::Horizontal, tr(&quot;Quantity&quot;));
}

void MainWindow::setupViews()
{
    QSplitter *splitter = new QSplitter;
    QTableView *table = new QTableView;
    pieChart = new PieView;
    splitter-&amp;gt;addWidget(table);
    splitter-&amp;gt;addWidget(pieChart);
    splitter-&amp;gt;setStretchFactor(0, 0);
    splitter-&amp;gt;setStretchFactor(1, 1);

    table-&amp;gt;setModel(model);
    pieChart-&amp;gt;setModel(model);

    QItemSelectionModel *selectionModel = new QItemSelectionModel(model);
    table-&amp;gt;setSelectionModel(selectionModel);
    pieChart-&amp;gt;setSelectionModel(selectionModel);

    QHeaderView *headerView = table-&amp;gt;horizontalHeader();
    headerView-&amp;gt;setStretchLastSection(true);

    setCentralWidget(splitter);
}

void MainWindow::openFile()
{
    const QString fileName =
        QFileDialog::getOpenFileName(this, tr(&quot;Choose a data file&quot;), &quot;&quot;, &quot;*.cht&quot;);
    if (!fileName.isEmpty())
        loadFile(fileName);
}

void MainWindow::loadFile(const QString &amp;amp;fileName)
{
    QFile file(fileName);
    if (!file.open(QFile::ReadOnly | QFile::Text))
        return;

    QTextStream stream(&amp;amp;file);

    model-&amp;gt;removeRows(0, model-&amp;gt;rowCount(QModelIndex()), QModelIndex());

    int row = 0;
    while (!stream.atEnd()) {
        const QString line = stream.readLine();
        if (!line.isEmpty()) {
            model-&amp;gt;insertRows(row, 1, QModelIndex());

            const QStringList pieces = line.split(',', QString::SkipEmptyParts);
            if (pieces.size() &amp;lt; 3)
                continue;
            model-&amp;gt;setData(model-&amp;gt;index(row, 0, QModelIndex()),
                           pieces.value(0));
            model-&amp;gt;setData(model-&amp;gt;index(row, 1, QModelIndex()),
                           pieces.value(1));
            model-&amp;gt;setData(model-&amp;gt;index(row, 0, QModelIndex()),
                           QColor(pieces.value(2)), Qt::DecorationRole);
            row++;
        }
    };

    file.close();
    statusBar()-&amp;gt;showMessage(tr(&quot;Loaded %1&quot;).arg(fileName), 2000);
}

void MainWindow::saveFile()
{
    QString fileName = QFileDialog::getSaveFileName(this,
        tr(&quot;Save file as&quot;), &quot;&quot;, &quot;*.cht&quot;);

    if (fileName.isEmpty())
        return;

    QFile file(fileName);
    if (!file.open(QFile::WriteOnly | QFile::Text))
        return;

    QTextStream stream(&amp;amp;file);
    for (int row = 0; row &amp;lt; model-&amp;gt;rowCount(QModelIndex()); ++row) {

        QStringList pieces;

        pieces.append(model-&amp;gt;data(model-&amp;gt;index(row, 0, QModelIndex()),
                                  Qt::DisplayRole).toString());
        pieces.append(model-&amp;gt;data(model-&amp;gt;index(row, 1, QModelIndex()),
                                  Qt::DisplayRole).toString());
        pieces.append(model-&amp;gt;data(model-&amp;gt;index(row, 0, QModelIndex()),
                                  Qt::DecorationRole).toString());

        stream &amp;lt;&amp;lt; pieces.join(',') &amp;lt;&amp;lt; &quot;\n&quot;;
    }

    file.close();
    statusBar()-&amp;gt;showMessage(tr(&quot;Saved %1&quot;).arg(fileName), 2000);
}

</db:programlisting>
</db:article>
