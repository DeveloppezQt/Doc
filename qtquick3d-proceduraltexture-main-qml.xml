<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Procedural Texture Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to provide custom texture data from C++.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2020 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D
import QtQuick.Controls
import QtQuick.Layouts

import ProceduralTextureExample

Window {
    id: window
    width: 480
    height: 320
    visible: true

    View3D {
        anchors.fill: parent

        DirectionalLight {
        }

        PerspectiveCamera {
            z: 300
        }

        Model {
            source: &quot;#Cube&quot;

            materials: DefaultMaterial {
                diffuseMap: Texture {
                    textureData: GradientTexture {
                        id: gradientTexture
                        startColor: &quot;#00dbde&quot;
                        endColor: &quot;#fc00ff&quot;
                        width: size256.checked ? 256 : 16
                        height: width
                    }

                    minFilter: size256.checked ? Texture.Linear : Texture.Nearest
                    magFilter: size256.checked ? Texture.Linear : Texture.Nearest
                }
            }

            PropertyAnimation on eulerRotation.y {
                from: 0
                to: 360
                duration: 5000
                loops: -1
                running: true
            }
        }
    }

    function randomColor() {
        return Qt.rgba(Math.random(),
                       Math.random(),
                       Math.random(),
                       1.0);
    }

    ColumnLayout {
        Label {
            text: &quot;Set texture size:&quot;
        }

        ButtonGroup  {
            id: sizeGroup
        }
        RadioButton {
            id: size256
            text: &quot;256x256&quot;
            checked: true
            ButtonGroup.group: sizeGroup
        }
        RadioButton {
            id: size512
            text: &quot;16x16&quot;
            checked: false
            ButtonGroup.group: sizeGroup
        }
        Button {
            text: &quot;Random Start Color&quot;
            onClicked: gradientTexture.startColor = randomColor();
        }
        Button {
            text: &quot;Random End Color&quot;
            onClicked: gradientTexture.endColor = randomColor();
        }
    }
}

</db:programlisting>
</db:article>
