<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLPaintDevice Class</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link> class enables painting to an OpenGL context using <db:link xlink:href="qpainter.xml">QPainter</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLPaintDevice</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS OpenGL)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::OpenGL)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opengl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpaintdevice.xml" xlink:role="class">QPaintDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOpenGLPaintDevice is part of <db:simplelist><db:member>painting-3D</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link> uses the <db:emphasis role="bold">current</db:emphasis> QOpenGL context to render <db:link xlink:href="qpainter.xml">QPainter</db:link> draw commands. The context is captured upon construction. It requires support for OpenGL (ES) 2.0 or higher.</db:para>
<db:section xml:id="performance">
<db:title>Performance</db:title>
<db:para>The <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link> is almost always hardware accelerated and has the potential of being much faster than software rasterization. However, it is more sensitive to state changes, and therefore requires the drawing commands to be carefully ordered to achieve optimal performance.</db:para>
</db:section>
<db:section xml:id="antialiasing-and-quality">
<db:title>Antialiasing and Quality</db:title>
<db:para>Antialiasing in the OpenGL paint engine is done using multisampling. Most hardware require significantly more memory to do multisampling and the resulting quality is not on par with the quality of the software paint engine. The OpenGL paint engine's strength lies in its performance, not its visual rendering quality.</db:para>
</db:section>
<db:section xml:id="state-changes">
<db:title>State Changes</db:title>
<db:para>When painting to a <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link> using <db:link xlink:href="qpainter.xml">QPainter</db:link>, the state of the current OpenGL context will be altered by the paint engine to reflect its needs. Applications should not rely upon the OpenGL state being reset to its original conditions, particularly the current shader program, OpenGL viewport, texture units, and drawing modes.</db:para>
</db:section>
<db:section xml:id="mixing-qpainter-and-opengl">
<db:title>Mixing QPainter and OpenGL</db:title>
<db:para>When intermixing <db:link xlink:href="qpainter.xml">QPainter</db:link> and OpenGL, it is important to notify <db:link xlink:href="qpainter.xml">QPainter</db:link> that the OpenGL state may have been cluttered so it can restore its internal state. This is achieved by calling <db:link xlink:href="qpainter.xml#beginNativePainting">QPainter::beginNativePainting</db:link>() before starting the OpenGL rendering and calling <db:link xlink:href="qpainter.xml#endNativePainting">QPainter::endNativePainting</db:link>() after finishing.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtopengl-openglwindow-example.xml">OpenGL Window Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpenGLPaintDevice">
<db:title>QOpenGLPaintDevice::QOpenGLPaintDevice()</db:title>
<db:para>Constructs a <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link>.</db:para>
<db:para>The <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link> is only valid for the current context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#currentContext">QOpenGLContext::currentContext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QOpenGLPaintDevice-1">
<db:title>[explicit] QOpenGLPaintDevice::QOpenGLPaintDevice(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link> with the given <db:code role="parameter">size</db:code>.</db:para>
<db:para>The <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link> is only valid for the current context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#currentContext">QOpenGLContext::currentContext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QOpenGLPaintDevice-2">
<db:title>QOpenGLPaintDevice::QOpenGLPaintDevice(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link> with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
<db:para>The <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link> is only valid for the current context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#currentContext">QOpenGLContext::currentContext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QOpenGLPaintDevice">
<db:title>[virtual noexcept] QOpenGLPaintDevice::~QOpenGLPaintDevice()</db:title>
<db:para>Destroys the <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link>.</db:para>
</db:section>
<db:section xml:id="context">
<db:title>QOpenGLContext *QOpenGLPaintDevice::context() const</db:title>
<db:para>Returns the OpenGL context associated with the paint device.</db:para>
</db:section>
<db:section xml:id="dotsPerMeterX">
<db:title>qreal QOpenGLPaintDevice::dotsPerMeterX() const</db:title>
<db:para>Returns the number of pixels per meter horizontally.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpaintdevice.xml#setDotsPerMeterX">setDotsPerMeterX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dotsPerMeterY">
<db:title>qreal QOpenGLPaintDevice::dotsPerMeterY() const</db:title>
<db:para>Returns the number of pixels per meter vertically.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpaintdevice.xml#setDotsPerMeterY">setDotsPerMeterY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ensureActiveTarget">
<db:title>[virtual] void QOpenGLPaintDevice::ensureActiveTarget()</db:title>
<db:para>This virtual method is provided as a callback to allow re-binding a target frame buffer object or context when different <db:link xlink:href="qopenglpaintdevice.xml">QOpenGLPaintDevice</db:link> instances are issuing draw calls alternately.</db:para>
<db:para><db:link xlink:href="qpainter.xml#beginNativePainting">beginNativePainting</db:link>() will also trigger this method.</db:para>
<db:para>The default implementation does nothing.</db:para>
</db:section>
<db:section xml:id="metric">
<db:title>[override virtual protected] int QOpenGLPaintDevice::metric(QPaintDevice::PaintDeviceMetric <db:emphasis>metric</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintdevice.xml#metric" role="function">QPaintDevice::metric(QPaintDevice::PaintDeviceMetric metric) const</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEngine">
<db:title>[override virtual] QPaintEngine *QOpenGLPaintDevice::paintEngine() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintdevice.xml#paintEngine" role="function">QPaintDevice::paintEngine() const</db:link>.</db:para>
</db:section>
<db:section xml:id="paintFlipped">
<db:title>bool QOpenGLPaintDevice::paintFlipped() const</db:title>
<db:para>Returns <db:code>true</db:code> if painting is flipped around the Y-axis.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpaintdevice.xml#setPaintFlipped">setPaintFlipped</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevicePixelRatio">
<db:title>void QOpenGLPaintDevice::setDevicePixelRatio(qreal <db:emphasis>devicePixelRatio</db:emphasis>)</db:title>
<db:para>Sets the device pixel ratio for the paint device to <db:code role="parameter">devicePixelRatio</db:code>.</db:para>
</db:section>
<db:section xml:id="setDotsPerMeterX">
<db:title>void QOpenGLPaintDevice::setDotsPerMeterX(qreal <db:emphasis>dpmx</db:emphasis>)</db:title>
<db:para>Sets the number of pixels per meter horizontally to <db:code role="parameter">dpmx</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpaintdevice.xml#dotsPerMeterX">dotsPerMeterX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDotsPerMeterY">
<db:title>void QOpenGLPaintDevice::setDotsPerMeterY(qreal <db:emphasis>dpmy</db:emphasis>)</db:title>
<db:para>Sets the number of pixels per meter vertically to <db:code role="parameter">dpmy</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpaintdevice.xml#dotsPerMeterY">dotsPerMeterY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPaintFlipped">
<db:title>void QOpenGLPaintDevice::setPaintFlipped(bool <db:emphasis>flipped</db:emphasis>)</db:title>
<db:para>Sets whether painting should be flipped around the Y-axis or not to <db:code role="parameter">flipped</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpaintdevice.xml#paintFlipped">paintFlipped</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSize">
<db:title>void QOpenGLPaintDevice::setSize(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the pixel size of the paint device to <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpaintdevice.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>QSize QOpenGLPaintDevice::size() const</db:title>
<db:para>Returns the pixel size of the paint device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglpaintdevice.xml#setSize">setSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
