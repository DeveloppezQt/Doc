<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGstUtils Namespace</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Multimedia Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="audioFormatForBuffer">
<db:title>QAudioFormat QGstUtils::audioFormatForBuffer(int *<db:emphasis>buffer</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QAudioFormat</db:type>
<db:methodname>audioFormatForBuffer</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>buffer</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioFormat audioFormatForBuffer(int *buffer)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns audio format for a buffer. If the buffer doesn't have a valid audio format, an empty <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> is returned.</db:para>
</db:section>
<db:section xml:id="audioFormatForCaps">
<db:title>QAudioFormat QGstUtils::audioFormatForCaps(const int *<db:emphasis>caps</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QAudioFormat</db:type>
<db:methodname>audioFormatForCaps</db:methodname>
<db:methodparam>
<db:type>const int *</db:type>
<db:parameter>caps</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAudioFormat audioFormatForCaps(const int *caps)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns audio format for caps. If caps doesn't have a valid audio format, an empty <db:link xlink:href="qaudioformat.xml">QAudioFormat</db:link> is returned.</db:para>
</db:section>
<db:section xml:id="capsCorrectedResolution">
<db:title>QSize QGstUtils::capsCorrectedResolution(const int *<db:emphasis>caps</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSize</db:type>
<db:methodname>capsCorrectedResolution</db:methodname>
<db:methodparam>
<db:type>const int *</db:type>
<db:parameter>caps</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize capsCorrectedResolution(const int *caps)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns aspect ratio corrected resolution of <db:code role="parameter">caps</db:code>. If caps doesn't have a valid size, an empty <db:link xlink:href="qsize.xml">QSize</db:link> is returned.</db:para>
</db:section>
<db:section xml:id="capsForAudioFormat">
<db:title>int *QGstUtils::capsForAudioFormat(<db:emphasis>const QAudioFormat &amp;</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int *</db:type>
<db:methodname>capsForAudioFormat</db:methodname>
<db:methodparam>
<db:type>const QAudioFormat &amp;</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int * capsForAudioFormat(const QAudioFormat &amp;)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Builds GstCaps for an audio format. Returns 0 if the audio format is not valid. Caller must unref GstCaps.</db:para>
</db:section>
<db:section xml:id="capsResolution">
<db:title>QSize QGstUtils::capsResolution(const int *<db:emphasis>caps</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSize</db:type>
<db:methodname>capsResolution</db:methodname>
<db:methodparam>
<db:type>const int *</db:type>
<db:parameter>caps</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize capsResolution(const int *caps)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns resolution of <db:code role="parameter">caps</db:code>. If caps doesn't have a valid size, an empty <db:link xlink:href="qsize.xml">QSize</db:link> is returned.</db:para>
</db:section>
<db:section xml:id="gstTagListToMap">
<db:title>QMap&lt;QByteArray, QVariant&gt; QGstUtils::gstTagListToMap(const int *<db:emphasis>tags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMap&lt;QByteArray, QVariant&gt;</db:type>
<db:methodname>gstTagListToMap</db:methodname>
<db:methodparam>
<db:type>const int *</db:type>
<db:parameter>tags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMap&lt;QByteArray, QVariant&gt; gstTagListToMap(const int *tags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convert GstTagList structure to <db:link xlink:href="qmap.xml">QMap</db:link>&lt;<db:link xlink:href="qbytearray.xml">QByteArray</db:link>, <db:link xlink:href="qvariant.xml">QVariant</db:link>&gt;.</db:para>
<db:para>Mapping to int, bool, char, string, fractions and date are supported. Fraction values are converted to doubles.</db:para>
</db:section>
</db:section>
</db:article>
