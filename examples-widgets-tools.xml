<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Tools Examples</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using Qt's containers, iterators, and other tool classes.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/tool-examples.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Qt is equipped with a range of capable tool classes, from containers and iterators to classes for string handling and manipulation.</db:para>
<db:para>Other classes provide application infrastructure support, handling plugin loading and managing configuration files.</db:para>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-tools-completer-example.xml" xlink:role="page">Completer Example</db:link></db:term>
<db:listitem>
<db:para>The Completer example shows how to provide string-completion facilities for an input widget based on data provided by a model.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-tools-customcompleter-example.xml" xlink:role="page">Custom Completer Example</db:link></db:term>
<db:listitem>
<db:para>The Custom Completer example shows how to provide string-completion facilities for an input widget based on data provided by a model. The completer pops up suggestions for possible words based on the first three characters input by the user and the user's choice of word is inserted into the TextEdit using QTextCursor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-tools-echoplugin-example.xml" xlink:role="page">Echo Plugin Example</db:link></db:term>
<db:listitem>
<db:para>This example shows how to create a Qt plugin.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-tools-i18n-example.xml" xlink:role="page">I18N Example</db:link></db:term>
<db:listitem>
<db:para>The Internationalization (I18N) example demonstrates Qt's support for translated text. Developers can write the initial application text in one language, and translations can be provided later without any modifications to the code. It also demonstrates how to detect the system language settings and show the UI in the appropriate language.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-tools-plugandpaint-app-example.xml" xlink:role="page">Plug &amp; Paint Example</db:link></db:term>
<db:listitem>
<db:para>Demonstrates how to extend Qt applications using plugins.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-tools-regularexpression-example.xml" xlink:role="page">QRegularExpression Example</db:link></db:term>
<db:listitem>
<db:para>The QRegularExpression example shows how regular expressions in Qt are applied to text by providing an environment in which new regular expressions can be created and tested on custom text strings.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-tools-regexp-example.xml" xlink:role="page">Regular Expressions Example</db:link></db:term>
<db:listitem>
<db:para>The Regular Expressions (RegExp) example shows how regular expressions in Qt are applied to text by providing an environment in which new regular expressions can be created and tested on custom text strings.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-tools-settingseditor-example.xml" xlink:role="page">Settings Editor Example</db:link></db:term>
<db:listitem>
<db:para>The Settings Editor example shows how Qt's standard settings support is used in an application by providing an editor that enables the user to view the settings for installed applications, and modify those that can be edited.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-tools-styleplugin-example.xml" xlink:role="page">Style Plugin Example</db:link></db:term>
<db:listitem>
<db:para>This example shows how to create a plugin that extends Qt with a new GUI look and feel.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-tools-treemodelcompleter-example.xml" xlink:role="page">Tree Model Completer Example</db:link></db:term>
<db:listitem>
<db:para>The Tree Model Completer example shows how to provide completion facilities for a hierarchical model, using a period as the separator to access Child, GrandChild and GrandGrandChild level objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-tools-undo-example.xml" xlink:role="page">Undo Framework</db:link></db:term>
<db:listitem>
<db:para>This example shows Qt's undo framework in action.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtwidgets-tools-undoframework-example.xml" xlink:role="page">Undo Framework Example</db:link></db:term>
<db:listitem>
<db:para>This example shows how to implement undo/redo functionality with the Qt undo framework.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:article>
