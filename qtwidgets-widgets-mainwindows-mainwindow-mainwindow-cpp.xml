<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Main Window</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Main Window example shows Qt's extensive support for tool bars, dock windows, menus, and other standard application features.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;mainwindow.h&quot;
#include &quot;colorswatch.h&quot;
#include &quot;toolbar.h&quot;

#include &amp;lt;QAction&amp;gt;
#include &amp;lt;QLayout&amp;gt;
#include &amp;lt;QMenu&amp;gt;
#include &amp;lt;QMenuBar&amp;gt;
#include &amp;lt;QStatusBar&amp;gt;
#include &amp;lt;QTextEdit&amp;gt;
#include &amp;lt;QFile&amp;gt;
#include &amp;lt;QDataStream&amp;gt;
#include &amp;lt;QFileDialog&amp;gt;
#include &amp;lt;QDialogButtonBox&amp;gt;
#include &amp;lt;QMessageBox&amp;gt;
#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QPainter&amp;gt;
#include &amp;lt;QMouseEvent&amp;gt;
#include &amp;lt;QLineEdit&amp;gt;
#include &amp;lt;QComboBox&amp;gt;
#include &amp;lt;QLabel&amp;gt;
#include &amp;lt;QPushButton&amp;gt;
#include &amp;lt;QTextEdit&amp;gt;
#include &amp;lt;QDebug&amp;gt;

static const char message[] =
    &quot;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Qt Main Window Example&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&quot;

    &quot;&amp;lt;p&amp;gt;This is a demonstration of the QMainWindow, QToolBar and &quot;
    &quot;QDockWidget classes.&amp;lt;/p&amp;gt;&quot;

    &quot;&amp;lt;p&amp;gt;The tool bar and dock widgets can be dragged around and rearranged &quot;
    &quot;using the mouse or via the menu.&amp;lt;/p&amp;gt;&quot;

    &quot;&amp;lt;p&amp;gt;Each dock widget contains a colored frame and a context &quot;
    &quot;(right-click) menu.&amp;lt;/p&amp;gt;&quot;

#ifdef Q_OS_MAC
    &quot;&amp;lt;p&amp;gt;On OS X, the \&quot;Black\&quot; dock widget has been created as a &quot;
    &quot;&amp;lt;em&amp;gt;Drawer&amp;lt;/em&amp;gt;, which is a special kind of QDockWidget.&amp;lt;/p&amp;gt;&quot;
#endif
    ;

Q_DECLARE_METATYPE(QDockWidget::DockWidgetFeatures)

MainWindow::MainWindow(const CustomSizeHintMap &amp;amp;customSizeHints,
                       QWidget *parent, Qt::WindowFlags flags)
    : QMainWindow(parent, flags)
{
    Q_UNUSED(message);
    setObjectName(&quot;MainWindow&quot;);
    setWindowTitle(&quot;Qt Main Window Example&quot;);

    QTextEdit *center = new QTextEdit(this);
    center-&amp;gt;setReadOnly(true);
    center-&amp;gt;setMinimumSize(400, 205);
    setCentralWidget(center);

    setupToolBar();
    setupMenuBar();
    setupDockWidgets(customSizeHints);

    statusBar()-&amp;gt;showMessage(tr(&quot;Status Bar&quot;));
}

void MainWindow::actionTriggered(QAction *action)
{
    qDebug(&quot;action '%s' triggered&quot;, action-&amp;gt;text().toLocal8Bit().data());
}

void MainWindow::setupToolBar()
{
#ifdef Q_OS_OSX
    setUnifiedTitleAndToolBarOnMac(true);
#endif

    for (int i = 0; i &amp;lt; 3; ++i) {
        ToolBar *tb = new ToolBar(QString::fromLatin1(&quot;Tool Bar %1&quot;).arg(i + 1), this);
        toolBars.append(tb);
        addToolBar(tb);
    }
}

void MainWindow::setupMenuBar()
{
    QMenu *menu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;File&quot;));

    menu-&amp;gt;addAction(tr(&quot;Save layout...&quot;), this, &amp;amp;MainWindow::saveLayout);
    menu-&amp;gt;addAction(tr(&quot;Load layout...&quot;), this, &amp;amp;MainWindow::loadLayout);
    menu-&amp;gt;addAction(tr(&quot;Switch layout direction&quot;),this, &amp;amp;MainWindow::switchLayoutDirection);

    menu-&amp;gt;addSeparator();
    menu-&amp;gt;addAction(tr(&quot;&amp;amp;Quit&quot;), this, &amp;amp;QWidget::close);

    mainWindowMenu = menuBar()-&amp;gt;addMenu(tr(&quot;Main window&quot;));

    QAction *action = mainWindowMenu-&amp;gt;addAction(tr(&quot;Animated docks&quot;));
    action-&amp;gt;setCheckable(true);
    action-&amp;gt;setChecked(dockOptions() &amp;amp; AnimatedDocks);
    connect(action, &amp;amp;QAction::toggled, this, &amp;amp;MainWindow::setDockOptions);

    action = mainWindowMenu-&amp;gt;addAction(tr(&quot;Allow nested docks&quot;));
    action-&amp;gt;setCheckable(true);
    action-&amp;gt;setChecked(dockOptions() &amp;amp; AllowNestedDocks);
    connect(action, &amp;amp;QAction::toggled, this, &amp;amp;MainWindow::setDockOptions);

    action = mainWindowMenu-&amp;gt;addAction(tr(&quot;Allow tabbed docks&quot;));
    action-&amp;gt;setCheckable(true);
    action-&amp;gt;setChecked(dockOptions() &amp;amp; AllowTabbedDocks);
    connect(action, &amp;amp;QAction::toggled, this, &amp;amp;MainWindow::setDockOptions);

    action = mainWindowMenu-&amp;gt;addAction(tr(&quot;Force tabbed docks&quot;));
    action-&amp;gt;setCheckable(true);
    action-&amp;gt;setChecked(dockOptions() &amp;amp; ForceTabbedDocks);
    connect(action, &amp;amp;QAction::toggled, this, &amp;amp;MainWindow::setDockOptions);

    action = mainWindowMenu-&amp;gt;addAction(tr(&quot;Vertical tabs&quot;));
    action-&amp;gt;setCheckable(true);
    action-&amp;gt;setChecked(dockOptions() &amp;amp; VerticalTabs);
    connect(action, &amp;amp;QAction::toggled, this, &amp;amp;MainWindow::setDockOptions);

    action = mainWindowMenu-&amp;gt;addAction(tr(&quot;Grouped dragging&quot;));
    action-&amp;gt;setCheckable(true);
    action-&amp;gt;setChecked(dockOptions() &amp;amp; GroupedDragging);
    connect(action, &amp;amp;QAction::toggled, this, &amp;amp;MainWindow::setDockOptions);

    QMenu *toolBarMenu = menuBar()-&amp;gt;addMenu(tr(&quot;Tool bars&quot;));
    for (int i = 0; i &amp;lt; toolBars.count(); ++i)
        toolBarMenu-&amp;gt;addMenu(toolBars.at(i)-&amp;gt;toolbarMenu());

#ifdef Q_OS_OSX
    toolBarMenu-&amp;gt;addSeparator();

    action = toolBarMenu-&amp;gt;addAction(tr(&quot;Unified&quot;));
    action-&amp;gt;setCheckable(true);
    action-&amp;gt;setChecked(unifiedTitleAndToolBarOnMac());
    connect(action, &amp;amp;QAction::toggled, this, &amp;amp;QMainWindow::setUnifiedTitleAndToolBarOnMac);
#endif

    dockWidgetMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Dock Widgets&quot;));

    QMenu *aboutMenu = menuBar()-&amp;gt;addMenu(tr(&quot;About&quot;));
    QAction *aboutAct = aboutMenu-&amp;gt;addAction(tr(&quot;&amp;amp;About&quot;), this, &amp;amp;MainWindow::about);
    aboutAct-&amp;gt;setStatusTip(tr(&quot;Show the application's About box&quot;));

    QAction *aboutQtAct = aboutMenu-&amp;gt;addAction(tr(&quot;About &amp;amp;Qt&quot;), qApp, &amp;amp;QApplication::aboutQt);
    aboutQtAct-&amp;gt;setStatusTip(tr(&quot;Show the Qt library's About box&quot;));
}

void MainWindow::setDockOptions()
{
    DockOptions opts;
    QList&amp;lt;QAction*&amp;gt; actions = mainWindowMenu-&amp;gt;actions();

    if (actions.at(0)-&amp;gt;isChecked())
        opts |= AnimatedDocks;
    if (actions.at(1)-&amp;gt;isChecked())
        opts |= AllowNestedDocks;
    if (actions.at(2)-&amp;gt;isChecked())
        opts |= AllowTabbedDocks;
    if (actions.at(3)-&amp;gt;isChecked())
        opts |= ForceTabbedDocks;
    if (actions.at(4)-&amp;gt;isChecked())
        opts |= VerticalTabs;
    if (actions.at(5)-&amp;gt;isChecked())
        opts |= GroupedDragging;

    QMainWindow::setDockOptions(opts);
}

void MainWindow::saveLayout()
{
    QString fileName
        = QFileDialog::getSaveFileName(this, tr(&quot;Save layout&quot;));
    if (fileName.isEmpty())
        return;
    QFile file(fileName);
    if (!file.open(QFile::WriteOnly)) {
        QString msg = tr(&quot;Failed to open %1\n%2&quot;)
                        .arg(QDir::toNativeSeparators(fileName), file.errorString());
        QMessageBox::warning(this, tr(&quot;Error&quot;), msg);
        return;
    }

    QByteArray geo_data = saveGeometry();
    QByteArray layout_data = saveState();

    bool ok = file.putChar((uchar)geo_data.size());
    if (ok)
        ok = file.write(geo_data) == geo_data.size();
    if (ok)
        ok = file.write(layout_data) == layout_data.size();

    if (!ok) {
        QString msg = tr(&quot;Error writing to %1\n%2&quot;)
                        .arg(QDir::toNativeSeparators(fileName), file.errorString());
        QMessageBox::warning(this, tr(&quot;Error&quot;), msg);
        return;
    }
}

void MainWindow::loadLayout()
{
    QString fileName
        = QFileDialog::getOpenFileName(this, tr(&quot;Load layout&quot;));
    if (fileName.isEmpty())
        return;
    QFile file(fileName);
    if (!file.open(QFile::ReadOnly)) {
        QString msg = tr(&quot;Failed to open %1\n%2&quot;)
                        .arg(QDir::toNativeSeparators(fileName), file.errorString());
        QMessageBox::warning(this, tr(&quot;Error&quot;), msg);
        return;
    }

    uchar geo_size;
    QByteArray geo_data;
    QByteArray layout_data;

    bool ok = file.getChar((char*)&amp;amp;geo_size);
    if (ok) {
        geo_data = file.read(geo_size);
        ok = geo_data.size() == geo_size;
    }
    if (ok) {
        layout_data = file.readAll();
        ok = layout_data.size() &amp;gt; 0;
    }

    if (ok)
        ok = restoreGeometry(geo_data);
    if (ok)
        ok = restoreState(layout_data);

    if (!ok) {
        QString msg = tr(&quot;Error reading %1&quot;).arg(QDir::toNativeSeparators(fileName));
        QMessageBox::warning(this, tr(&quot;Error&quot;), msg);
        return;
    }
}

static QAction *addCornerAction(const QString &amp;amp;text, QMainWindow *mw, QMenu *menu, QActionGroup *group,
                                Qt::Corner c, Qt::DockWidgetArea a)
{
    QAction *result = menu-&amp;gt;addAction(text, mw, [=]() { mw-&amp;gt;setCorner(c, a); });
    result-&amp;gt;setCheckable(true);
    group-&amp;gt;addAction(result);
    return result;
}

void MainWindow::setupDockWidgets(const CustomSizeHintMap &amp;amp;customSizeHints)
{
    qRegisterMetaType&amp;lt;QDockWidget::DockWidgetFeatures&amp;gt;();

    QMenu *cornerMenu = dockWidgetMenu-&amp;gt;addMenu(tr(&quot;Top left corner&quot;));
    QActionGroup *group = new QActionGroup(this);
    group-&amp;gt;setExclusive(true);
    QAction *cornerAction = addCornerAction(tr(&quot;Top dock area&quot;), this, cornerMenu, group, Qt::TopLeftCorner, Qt::TopDockWidgetArea);
    cornerAction-&amp;gt;setChecked(true);
    addCornerAction(tr(&quot;Left dock area&quot;), this, cornerMenu, group, Qt::TopLeftCorner, Qt::LeftDockWidgetArea);

    cornerMenu = dockWidgetMenu-&amp;gt;addMenu(tr(&quot;Top right corner&quot;));
    group = new QActionGroup(this);
    group-&amp;gt;setExclusive(true);
    cornerAction = addCornerAction(tr(&quot;Top dock area&quot;), this, cornerMenu, group, Qt::TopRightCorner, Qt::TopDockWidgetArea);
    cornerAction-&amp;gt;setChecked(true);
    addCornerAction(tr(&quot;Right dock area&quot;), this, cornerMenu, group, Qt::TopRightCorner, Qt::RightDockWidgetArea);

    cornerMenu = dockWidgetMenu-&amp;gt;addMenu(tr(&quot;Bottom left corner&quot;));
    group = new QActionGroup(this);
    group-&amp;gt;setExclusive(true);
    cornerAction = addCornerAction(tr(&quot;Bottom dock area&quot;), this, cornerMenu, group, Qt::BottomLeftCorner, Qt::BottomDockWidgetArea);
    cornerAction-&amp;gt;setChecked(true);
    addCornerAction(tr(&quot;Left dock area&quot;), this, cornerMenu, group, Qt::BottomLeftCorner, Qt::LeftDockWidgetArea);

    cornerMenu = dockWidgetMenu-&amp;gt;addMenu(tr(&quot;Bottom right corner&quot;));
    group = new QActionGroup(this);
    group-&amp;gt;setExclusive(true);
    cornerAction = addCornerAction(tr(&quot;Bottom dock area&quot;), this, cornerMenu, group, Qt::BottomRightCorner, Qt::BottomDockWidgetArea);
    cornerAction-&amp;gt;setChecked(true);
    addCornerAction(tr(&quot;Right dock area&quot;), this, cornerMenu, group, Qt::BottomRightCorner, Qt::RightDockWidgetArea);

    dockWidgetMenu-&amp;gt;addSeparator();

    static const struct Set {
        const char * name;
        uint flags;
        Qt::DockWidgetArea area;
    } sets [] = {
#ifndef Q_OS_MAC
        { &quot;Black&quot;, 0, Qt::LeftDockWidgetArea },
#else
        { &quot;Black&quot;, Qt::Drawer, Qt::LeftDockWidgetArea },
#endif
        { &quot;White&quot;, 0, Qt::RightDockWidgetArea },
        { &quot;Red&quot;, 0, Qt::TopDockWidgetArea },
        { &quot;Green&quot;, 0, Qt::TopDockWidgetArea },
        { &quot;Blue&quot;, 0, Qt::BottomDockWidgetArea },
        { &quot;Yellow&quot;, 0, Qt::BottomDockWidgetArea }
    };
    const int setCount = sizeof(sets) / sizeof(Set);

    const QIcon qtIcon(QPixmap(&quot;:/res/qt.png&quot;));
    for (int i = 0; i &amp;lt; setCount; ++i) {
        ColorSwatch *swatch = new ColorSwatch(tr(sets[i].name), this, Qt::WindowFlags(sets[i].flags));
        if (i % 2)
            swatch-&amp;gt;setWindowIcon(qtIcon);
        if (qstrcmp(sets[i].name, &quot;Blue&quot;) == 0) {
            BlueTitleBar *titlebar = new BlueTitleBar(swatch);
            swatch-&amp;gt;setTitleBarWidget(titlebar);
            connect(swatch, &amp;amp;QDockWidget::topLevelChanged, titlebar, &amp;amp;BlueTitleBar::updateMask);
            connect(swatch, &amp;amp;QDockWidget::featuresChanged, titlebar, &amp;amp;BlueTitleBar::updateMask, Qt::QueuedConnection);
        }

        QString name = QString::fromLatin1(sets[i].name);
        if (customSizeHints.contains(name))
            swatch-&amp;gt;setCustomSizeHint(customSizeHints.value(name));

        addDockWidget(sets[i].area, swatch);
        dockWidgetMenu-&amp;gt;addMenu(swatch-&amp;gt;colorSwatchMenu());
    }

    destroyDockWidgetMenu = new QMenu(tr(&quot;Destroy dock widget&quot;), this);
    destroyDockWidgetMenu-&amp;gt;setEnabled(false);
    connect(destroyDockWidgetMenu, &amp;amp;QMenu::triggered, this, &amp;amp;MainWindow::destroyDockWidget);

    dockWidgetMenu-&amp;gt;addSeparator();
    dockWidgetMenu-&amp;gt;addAction(tr(&quot;Add dock widget...&quot;), this, &amp;amp;MainWindow::createDockWidget);
    dockWidgetMenu-&amp;gt;addMenu(destroyDockWidgetMenu);
}

void MainWindow::switchLayoutDirection()
{
    if (layoutDirection() == Qt::LeftToRight)
        QApplication::setLayoutDirection(Qt::RightToLeft);
    else
        QApplication::setLayoutDirection(Qt::LeftToRight);
}

class CreateDockWidgetDialog : public QDialog
{
public:
    explicit CreateDockWidgetDialog(QWidget *parent = nullptr);

    QString enteredObjectName() const { return m_objectName-&amp;gt;text(); }
    Qt::DockWidgetArea location() const;

private:
    QLineEdit *m_objectName;
    QComboBox *m_location;
};

CreateDockWidgetDialog::CreateDockWidgetDialog(QWidget *parent)
    : QDialog(parent)
    , m_objectName(new QLineEdit(this))
    , m_location(new QComboBox(this))
{
    setWindowTitle(tr(&quot;Add Dock Widget&quot;));
    setWindowFlags(windowFlags() &amp;amp; ~Qt::WindowContextHelpButtonHint);
    QGridLayout *layout = new QGridLayout(this);

    layout-&amp;gt;addWidget(new QLabel(tr(&quot;Object name:&quot;)), 0, 0);
    layout-&amp;gt;addWidget(m_objectName, 0, 1);

    layout-&amp;gt;addWidget(new QLabel(tr(&quot;Location:&quot;)), 1, 0);
    m_location-&amp;gt;setEditable(false);
    m_location-&amp;gt;addItem(tr(&quot;Top&quot;));
    m_location-&amp;gt;addItem(tr(&quot;Left&quot;));
    m_location-&amp;gt;addItem(tr(&quot;Right&quot;));
    m_location-&amp;gt;addItem(tr(&quot;Bottom&quot;));
    m_location-&amp;gt;addItem(tr(&quot;Restore&quot;));
    layout-&amp;gt;addWidget(m_location, 1, 1);

    QDialogButtonBox *buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel, this);
    connect(buttonBox, &amp;amp;QDialogButtonBox::rejected, this, &amp;amp;QDialog::reject);
    connect(buttonBox, &amp;amp;QDialogButtonBox::accepted, this, &amp;amp;QDialog::accept);
    layout-&amp;gt;addWidget(buttonBox, 2, 0, 1, 2);
}

Qt::DockWidgetArea CreateDockWidgetDialog::location() const
{
    switch (m_location-&amp;gt;currentIndex()) {
        case 0: return Qt::TopDockWidgetArea;
        case 1: return Qt::LeftDockWidgetArea;
        case 2: return Qt::RightDockWidgetArea;
        case 3: return Qt::BottomDockWidgetArea;
        default:
            break;
    }
    return Qt::NoDockWidgetArea;
}

void MainWindow::createDockWidget()
{
    CreateDockWidgetDialog dialog(this);
    if (dialog.exec() == QDialog::Rejected)
        return;

    QDockWidget *dw = new QDockWidget;
    const QString name = dialog.enteredObjectName();
    dw-&amp;gt;setObjectName(name);
    dw-&amp;gt;setWindowTitle(name);
    dw-&amp;gt;setWidget(new QTextEdit);

    Qt::DockWidgetArea area = dialog.location();
    switch (area) {
        case Qt::LeftDockWidgetArea:
        case Qt::RightDockWidgetArea:
        case Qt::TopDockWidgetArea:
        case Qt::BottomDockWidgetArea:
            addDockWidget(area, dw);
            break;
        default:
            if (!restoreDockWidget(dw)) {
                QMessageBox::warning(this, QString(), tr(&quot;Failed to restore dock widget&quot;));
                delete dw;
                return;
            }
            break;
    }

    extraDockWidgets.append(dw);
    destroyDockWidgetMenu-&amp;gt;setEnabled(true);
    destroyDockWidgetMenu-&amp;gt;addAction(new QAction(name, this));
}

void MainWindow::destroyDockWidget(QAction *action)
{
    int index = destroyDockWidgetMenu-&amp;gt;actions().indexOf(action);
    delete extraDockWidgets.takeAt(index);
    destroyDockWidgetMenu-&amp;gt;removeAction(action);
    action-&amp;gt;deleteLater();

    if (destroyDockWidgetMenu-&amp;gt;isEmpty())
        destroyDockWidgetMenu-&amp;gt;setEnabled(false);
}

void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About MainWindows&quot;), message);
}

</db:programlisting>
</db:article>
