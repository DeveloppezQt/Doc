<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Demo - Calqlatr</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A QML app designed for portrait devices that uses custom components, animated with <db:link xlink:href="qml-qtquick-animationcontroller.xml">AnimationController</db:link>, and JavaScript for the application logic.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

var curVal = 0
var memory = 0
var lastOp = &quot;&quot;
var previousOperator = &quot;&quot;
var digits = &quot;&quot;

function disabled(op) {
    if (digits == &quot;&quot; &amp;&amp; !((op &gt;= &quot;0&quot; &amp;&amp; op &lt;= &quot;9&quot;) || op == &quot;.&quot;))
        return true
    else if (op == '=' &amp;&amp; previousOperator.length != 1)
        return true
    else if (op == &quot;.&quot; &amp;&amp; digits.toString().search(/\./) != -1) {
        return true
    } else if (op == &quot;√&quot; &amp;&amp;  digits.toString().search(/-/) != -1) {
        return true
    } else {
        return false
    }
}

function digitPressed(op)
{
    if (disabled(op))
        return
    if (digits.toString().length &gt;= display.maxDigits)
        return
    if (lastOp.toString().length == 1 &amp;&amp; ((lastOp &gt;= &quot;0&quot; &amp;&amp; lastOp &lt;= &quot;9&quot;) || lastOp == &quot;.&quot;) ) {
        digits = digits + op.toString()
        display.appendDigit(op.toString())
    } else {
        digits = op
        display.appendDigit(op.toString())
    }
    lastOp = op
}

function operatorPressed(op)
{
    if (disabled(op))
        return
    lastOp = op

    if (op == &quot;±&quot;) {
            digits = Number(digits.valueOf() * -1)
            display.setDigit(display.displayNumber(digits))
            return
        }

    if (previousOperator == &quot;+&quot;) {
        digits = Number(digits.valueOf()) + Number(curVal.valueOf())
    } else if (previousOperator == &quot;−&quot;) {
        digits = Number(curVal.valueOf()) - Number(digits.valueOf())
    } else if (previousOperator == &quot;×&quot;) {
        digits = Number(curVal) * Number(digits.valueOf())
    } else if (previousOperator == &quot;÷&quot;) {
        digits = Number(curVal) / Number(digits.valueOf())
    }

    if (op == &quot;+&quot; || op == &quot;−&quot; || op == &quot;×&quot; || op == &quot;÷&quot;) {
        previousOperator = op
        curVal = digits.valueOf()
        digits = &quot;&quot;
        display.displayOperator(previousOperator)
        return
    }

    if (op == &quot;=&quot;) {
        display.newLine(&quot;=&quot;, digits.valueOf())
    }

    curVal = 0
    previousOperator = &quot;&quot;

    if (op == &quot;1/x&quot;) {
        digits = (1 / digits.valueOf()).toString()
    } else if (op == &quot;x^2&quot;) {
        digits = (digits.valueOf() * digits.valueOf()).toString()
    } else if (op == &quot;Abs&quot;) {
        digits = (Math.abs(digits.valueOf())).toString()
    } else if (op == &quot;Int&quot;) {
        digits = (Math.floor(digits.valueOf())).toString()
    } else if (op == &quot;√&quot;) {
        digits = Number(Math.sqrt(digits.valueOf()))
        display.newLine(&quot;√&quot;, digits.valueOf())
    } else if (op == &quot;mc&quot;) {
        memory = 0;
    } else if (op == &quot;m+&quot;) {
        memory += digits.valueOf()
    } else if (op == &quot;mr&quot;) {
        digits = memory.toString()
    } else if (op == &quot;m-&quot;) {
        memory = digits.valueOf()
    } else if (op == &quot;backspace&quot;) {
        digits = digits.toString().slice(0, -1)
        display.clear()
        display.appendDigit(digits)
    } else if (op == &quot;Off&quot;) {
        Qt.quit();
    }

    // Reset the state on 'C' operator or after
    // an error occurred
    if (op == &quot;C&quot; || display.isError) {
        display.clear()
        curVal = 0
        memory = 0
        lastOp = &quot;&quot;
        digits = &quot;&quot;
    }
}

</db:programlisting>
</db:article>
