<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Mouse Events</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>handling mouse events in Qt Quick.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="mouse-types">
<db:title>Mouse Types</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> type</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-mouseevent.xml">MouseEvent</db:link> object</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="mouse-event-handling">
<db:title>Mouse Event Handling</db:title>
<db:para>QML uses <db:link xlink:href="qtqml-syntax-signals.xml">signals and handlers</db:link> to deliver mouse interactions. Specifically, Qt Quick provides the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> and <db:link xlink:href="qml-qtquick-mouseevent.xml">MouseEvent</db:link> types which allow developers to define signal handlers which accept mouse events within a defined area.</db:para>
</db:section>
<db:section xml:id="defining-a-mouse-area">
<db:title>Defining a Mouse Area</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> type receives events within a defined area. One quick way to define this area is to anchor the <db:code>MouseArea</db:code> to its parent's area using the <db:code>anchors.fill</db:code> property. If the parent is a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> (or any <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> component), then the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> will fill the area defined by the parent's dimensions. Alternatively, an area smaller or larger than the parent is definable.</db:para>
<db:programlisting language="qml">Rectangle {
    id: button
    width: 100; height: 100

    MouseArea {
        anchors.fill: parent
        onClicked: console.log(&quot;button clicked&quot;)
    }
    MouseArea {
        width:150; height: 75
        onClicked: console.log(&quot;irregular area clicked&quot;)
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="receiving-events">
<db:title>Receiving Events</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> type provides <db:link xlink:href="qtqml-syntax-signals.xml">signals and handlers</db:link> to detect different mouse events. The <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> type documentation describes these gestures in greater detail:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>canceled</db:para>
</db:listitem>
<db:listitem>
<db:para>clicked</db:para>
</db:listitem>
<db:listitem>
<db:para>doubleClicked</db:para>
</db:listitem>
<db:listitem>
<db:para>entered</db:para>
</db:listitem>
<db:listitem>
<db:para>exited</db:para>
</db:listitem>
<db:listitem>
<db:para>positionChanged</db:para>
</db:listitem>
<db:listitem>
<db:para>pressAndHold</db:para>
</db:listitem>
<db:listitem>
<db:para>pressed</db:para>
</db:listitem>
<db:listitem>
<db:para>released</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>These signals have signal handlers that are invoked when the signals are emitted.</db:para>
<db:programlisting language="qml">    MouseArea {
        anchors.fill: parent
        onClicked: console.log(&quot;area clicked&quot;)
        onDoubleClicked: console.log(&quot;area double clicked&quot;)
        onEntered: console.log(&quot;mouse entered the area&quot;)
        onExited: console.log(&quot;mouse left the area&quot;)
    }
</db:programlisting>
</db:section>
<db:section xml:id="enabling-gestures">
<db:title>Enabling Gestures</db:title>
<db:para>Some mouse gestures and button clicks need to be enabled before they send or receive events. Certain <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> and <db:link xlink:href="qml-qtquick-mouseevent.xml">MouseEvent</db:link> properties enable these gestures.</db:para>
<db:para>To listen to (or explicitly ignore) a certain mouse button, set the appropriate mouse button to the <db:link xlink:href="qml-qtquick-mousearea.xml#acceptedButtons-prop">acceptedButtons</db:link> property.</db:para>
<db:para>Naturally, the mouse events, such as button presses and mouse positions, are sent during a mouse click. For example, the <db:code>containsMouse</db:code> property will only retrieve its correct value during a mouse press. The <db:link xlink:href="qml-qtquick-mousearea.xml#hoverEnabled-prop">hoverEnabled</db:link> will enable mouse events and positioning even when there are no mouse button presses. Setting the <db:code>hoverEnabled</db:code> property to <db:code>true</db:code>, in turn will enable the <db:code>entered</db:code>, <db:code>exited</db:code>, and <db:code>positionChanged</db:code> signal and their respective signal handlers.</db:para>
<db:programlisting language="qml">    MouseArea {
        hoverEnabled: true
        acceptedButtons: Qt.LeftButton | Qt.RightButton
        onEntered: console.log(&quot;mouse entered the area&quot;)
        onExited: console.log(&quot;mouse left the area&quot;)
    }
</db:programlisting>
<db:para>Additionally, to disable the whole mouse area, set the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> <db:code>enabled</db:code> property to <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="mouseevent-object">
<db:title>MouseEvent Object</db:title>
<db:para>Signals and their handlers receive a <db:link xlink:href="qml-qtquick-mouseevent.xml">MouseEvent</db:link> object as a parameter. The <db:code>mouse</db:code> object contain information about the mouse event. For example, the mouse button that started the event is queried through the <db:link xlink:href="qml-qtquick-mouseevent.xml#button-prop">mouse.button</db:link> property.</db:para>
<db:para>The <db:code>MouseEvent</db:code> object can also ignore a mouse event using its <db:code>accepted</db:code> property.</db:para>
<db:section xml:id="accepting-further-signals">
<db:title>Accepting Further Signals</db:title>
<db:para>Many of the signals are sent multiple times to reflect various mouse events such as double clicking. To facilitate the classification of mouse clicks, the <db:link xlink:href="qml-qtquick-mouseevent.xml">MouseEvent</db:link> object has an <db:code>accepted</db:code> property to disable the event propagation.</db:para>
<db:para>To learn more about QML's event system, please read the <db:link xlink:href="qtqml-syntax-signals.xml">signals and handlers, and event system</db:link> document.</db:para>
</db:section>
</db:section>
</db:article>
