<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPartialOrdering Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qpartialordering.xml">QPartialOrdering</db:link> represents the result of a comparison that allows for unordered results.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPartialOrdering</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A value of type <db:link xlink:href="qpartialordering.xml">QPartialOrdering</db:link> is typically returned from a three-way comparison function. Such a function compares two objects, and it may either establish that the two objects are ordered relative to each other, or that they are not ordered. The <db:link xlink:href="qpartialordering.xml">QPartialOrdering</db:link> value returned from the comparison function represents one of those possibilities.</db:para>
<db:para>The possible values of type <db:link xlink:href="qpartialordering.xml">QPartialOrdering</db:link> are, in fact, fully represented by the following four static values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QPartialOrdering::Less represents that the first object is less than the second;</db:para>
</db:listitem>
<db:listitem>
<db:para>QPartialOrdering::Equivalent represents that the first object is equivalent to the second;</db:para>
</db:listitem>
<db:listitem>
<db:para>QPartialOrdering::Greater represents that the first object is equivalent to the second;</db:para>
</db:listitem>
<db:listitem>
<db:para>QPartialOrdering::Unordered represents that the first object is <db:emphasis>not ordered</db:emphasis> with respect to the second.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qpartialordering.xml">QPartialOrdering</db:link> is idiomatically used by comparing an instance against a literal zero, for instance like this:</db:para>
<db:programlisting language="cpp">// given a, b, c, d as objects of some type that allows for a 3-way compare

QPartialOrdering result = a.compare(b);
if (result &amp;lt; 0) {
    // a is less than b
}

if (c.compare(d) &amp;gt;= 0) {
    // c is greater than or equal to d
}
</db:programlisting>
<db:para>A <db:link xlink:href="qpartialordering.xml">QPartialOrdering</db:link> value which represents an unordered result will always return false when compared against literal 0.</db:para>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="Equivalent-var">
<db:title>const QPartialOrdering QPartialOrdering::Equivalent</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QPartialOrdering</db:type>
<db:varname>Equivalent</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Represents the result of a comparison where the value on the left hand side is equivalent to the value on right hand side.</db:para>
</db:section>
<db:section xml:id="Greater-var">
<db:title>const QPartialOrdering QPartialOrdering::Greater</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QPartialOrdering</db:type>
<db:varname>Greater</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Represents the result of a comparison where the value on the left hand side is greater than the value on right hand side.</db:para>
</db:section>
<db:section xml:id="Less-var">
<db:title>const QPartialOrdering QPartialOrdering::Less</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QPartialOrdering</db:type>
<db:varname>Less</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Represents the result of a comparison where the value on the left hand side is less than the value on right hand side.</db:para>
</db:section>
<db:section xml:id="Unordered-var">
<db:title>const QPartialOrdering QPartialOrdering::Unordered</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QPartialOrdering</db:type>
<db:varname>Unordered</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Represents the result of a comparison where the value on the left hand side is not ordered with respect to the value on right hand side.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq-2">
<db:title>[constexpr] bool operator!=(QPartialOrdering <db:emphasis>p1</db:emphasis>, QPartialOrdering <db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>QPartialOrdering</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPartialOrdering</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(QPartialOrdering p1, QPartialOrdering p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return true if <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code> represent different results; otherwise, returns true.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-2">
<db:title>[constexpr] bool operator==(QPartialOrdering <db:emphasis>p1</db:emphasis>, QPartialOrdering <db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QPartialOrdering</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPartialOrdering</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QPartialOrdering p1, QPartialOrdering p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return true if <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code> represent the same result; otherwise, returns false.</db:para>
</db:section>
</db:section>
</db:article>
