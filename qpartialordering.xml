<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPartialOrdering Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qpartialordering.xml">QPartialOrdering</db:link> represents the result of a comparison that allows for unordered results.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPartialOrdering</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A value of type <db:link xlink:href="qpartialordering.xml">QPartialOrdering</db:link> is typically returned from a three-way comparison function. Such a function compares two objects, establishing whether they are ordered and, if so, their ordering. It uses this return type to indicate that the ordering is partial; that is, not all pairs of values are ordered.</db:para>
<db:para><db:link xlink:href="qpartialordering.xml">QPartialOrdering</db:link> has four values, represented by the following symbolic constants:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qpartialordering.xml#less-var">less</db:link> represents that the left operand is less than the right;</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpartialordering.xml#equivalent-var">equivalent</db:link> represents that the two operands are equivalent;</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpartialordering.xml#greater-var">greater</db:link> represents that the left operand is greater than the right;</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpartialordering.xml#unordered-var">unordered</db:link> represents that the two operands are <db:emphasis>not ordered</db:emphasis>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qpartialordering.xml">QPartialOrdering</db:link> is idiomatically used by comparing an instance against a literal zero, for instance like this:</db:para>
<db:programlisting language="cpp">// given a, b, c, d as objects of some type that allows for a 3-way compare,
// and a compare function declared as follows:

QPartialOrdering compare(T lhs, T rhs); // defined out-of-line
~~~

QPartialOrdering result = compare(a, b);
if (result &amp;lt; 0) {
    // a is less than b
}

if (compare(c, d) &amp;gt;= 0) {
    // c is greater than or equal to d
}
</db:programlisting>
<db:para>Comparing <db:link xlink:href="qpartialordering.xml#unordered-var">QPartialOrdering::unordered</db:link> against literal 0 always returns a false result.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-strong-ordering.xml">Qt::strong_ordering</db:link></db:member>
<db:member><db:link xlink:href="qt-weak-ordering.xml">Qt::weak_ordering</db:link></db:member>
<db:member><db:link xlink:href="comparison-types.xml">Comparison types overview</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPartialOrdering-5">
<db:title>[default] QPartialOrdering::QPartialOrdering(int <db:emphasis>stdorder</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPartialOrdering</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stdorder</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QPartialOrdering(int stdorder) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qpartialordering.xml">QPartialOrdering</db:link> object from <db:code role="parameter">stdorder</db:code> using the following rules:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>std::partial_ordering::less converts to <db:link xlink:href="qpartialordering.xml#less-var">less</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>std::partial_ordering::equivalent converts to <db:link xlink:href="qpartialordering.xml#equivalent-var">equivalent</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>std::partial_ordering::greater converts to <db:link xlink:href="qpartialordering.xml#greater-var">greater</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>std::partial_ordering::unordered converts to <db:link xlink:href="qpartialordering.xml#unordered-var">unordered</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="Equivalent-varx">
<db:title>const QPartialOrdering QPartialOrdering::Equivalent</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QPartialOrdering</db:type>
<db:varname>Equivalent</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Represents the result of a comparison where the two operands are equivalent.</db:para>
</db:section>
<db:section xml:id="Greater-varx">
<db:title>const QPartialOrdering QPartialOrdering::Greater</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QPartialOrdering</db:type>
<db:varname>Greater</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Represents the result of a comparison where the left operand is greater than the right operand.</db:para>
</db:section>
<db:section xml:id="Less-varx">
<db:title>const QPartialOrdering QPartialOrdering::Less</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QPartialOrdering</db:type>
<db:varname>Less</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Represents the result of a comparison where the left operand is less than the right operand.</db:para>
</db:section>
<db:section xml:id="Unordered-varx">
<db:title>const QPartialOrdering QPartialOrdering::Unordered</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QPartialOrdering</db:type>
<db:varname>Unordered</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Represents the result of a comparison where there is no ordering relationship between the two operands.</db:para>
</db:section>
<db:section xml:id="equivalent-var">
<db:title>const QPartialOrdering QPartialOrdering::equivalent</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QPartialOrdering</db:type>
<db:varname>equivalent</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Represents the result of a comparison where the two operands are equivalent.</db:para>
</db:section>
<db:section xml:id="greater-var">
<db:title>const QPartialOrdering QPartialOrdering::greater</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QPartialOrdering</db:type>
<db:varname>greater</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Represents the result of a comparison where the left operand is greater than the right operand.</db:para>
</db:section>
<db:section xml:id="less-var">
<db:title>const QPartialOrdering QPartialOrdering::less</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QPartialOrdering</db:type>
<db:varname>less</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Represents the result of a comparison where the left operand is less than the right operand.</db:para>
</db:section>
<db:section xml:id="unordered-var">
<db:title>const QPartialOrdering QPartialOrdering::unordered</db:title>
<db:fieldsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QPartialOrdering</db:type>
<db:varname>unordered</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Represents the result of a comparison where there is no ordering relationship between the two operands.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="is_eq">
<db:title>[constexpr, since 6.7] bool is_eq(QPartialOrdering <db:emphasis>o</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="is_gt">[constexpr, since 6.7] bool is_gt(QPartialOrdering <db:emphasis>o</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="is_gteq">[constexpr, since 6.7] bool is_gteq(QPartialOrdering <db:emphasis>o</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="is_lt">[constexpr, since 6.7] bool is_lt(QPartialOrdering <db:emphasis>o</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="is_lteq">[constexpr, since 6.7] bool is_lteq(QPartialOrdering <db:emphasis>o</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="is_neq">[constexpr, since 6.7] bool is_neq(QPartialOrdering <db:emphasis>o</db:emphasis>)</db:bridgehead>
<db:para>Converts <db:code role="parameter">o</db:code> into the result of one of the six relational operators:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Function</db:para>
</db:th>
<db:th>
<db:para>Operation</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>is_eq</db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">o</db:code> == 0</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>is_neq</db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">o</db:code> != 0</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>is_lt</db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">o</db:code> &lt; 0</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>is_lteq</db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">o</db:code> &lt;= 0</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>is_gt</db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">o</db:code> &gt; 0</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>is_gteq</db:para>
</db:td>
<db:td>
<db:para><db:code role="parameter">o</db:code> &gt;= 0</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>These functions are provided for compatibility with std::partial_ordering.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-2">
<db:title>[constexpr] bool operator!=(QPartialOrdering <db:emphasis>lhs</db:emphasis>, QPartialOrdering <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>QPartialOrdering</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPartialOrdering</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(QPartialOrdering lhs, QPartialOrdering rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return true if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> represent different results; otherwise, returns true.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-2">
<db:title>[constexpr] bool operator==(QPartialOrdering <db:emphasis>lhs</db:emphasis>, QPartialOrdering <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QPartialOrdering</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPartialOrdering</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QPartialOrdering lhs, QPartialOrdering rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return true if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> represent the same result; otherwise, returns false.</db:para>
</db:section>
</db:section>
</db:article>
