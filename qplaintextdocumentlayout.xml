<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPlainTextDocumentLayout Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qplaintextdocumentlayout.xml">QPlainTextDocumentLayout</db:link> class implements a plain text layout for <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPlainTextDocumentLayout</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstracttextdocumentlayout.xml" xlink:role="class">QAbstractTextDocumentLayout</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPlainTextDocumentLayout is part of <db:simplelist><db:member>richtext-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qplaintextdocumentlayout.xml">QPlainTextDocumentLayout</db:link> is required for text documents that can be display or edited in a <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link>. See <db:link xlink:href="qtextdocument.xml#setDocumentLayout">QTextDocument::setDocumentLayout</db:link>().</db:para>
<db:para><db:link xlink:href="qplaintextdocumentlayout.xml">QPlainTextDocumentLayout</db:link> uses the <db:link xlink:href="qabstracttextdocumentlayout.xml">QAbstractTextDocumentLayout</db:link> API that <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> requires, but redefines it partially in order to support plain text better. For instances, it does not operate on vertical pixels, but on paragraphs (called blocks) instead. The height of a document is identical to the number of paragraphs it contains. The layout also doesn't support tables or nested frames, or any sort of advanced text layout that goes beyond a list of paragraphs with syntax highlighting.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="cursorWidth-prop">
<db:title>cursorWidth : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>cursorWidth</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cursorWidth</db:synopsisinfo>
<db:synopsisinfo role="setter">setCursorWidth</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property specifies the width of the cursor in pixels. The default value is 1.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">cursorWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCursorWidth</db:emphasis>(<db:type>int</db:type> <db:emphasis>width</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPlainTextDocumentLayout">
<db:title>QPlainTextDocumentLayout::QPlainTextDocumentLayout(QTextDocument *<db:emphasis>document</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPlainTextDocumentLayout</db:methodname>
<db:methodparam>
<db:type>QTextDocument *</db:type>
<db:parameter>document</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlainTextDocumentLayout(QTextDocument *document)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a plain text document layout for the text <db:code role="parameter">document</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPlainTextDocumentLayout">
<db:title>[virtual] QPlainTextDocumentLayout::~QPlainTextDocumentLayout()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPlainTextDocumentLayout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPlainTextDocumentLayout()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs a plain text document layout.</db:para>
</db:section>
<db:section xml:id="blockBoundingRect">
<db:title>[override virtual] QRectF QPlainTextDocumentLayout::blockBoundingRect(const QTextBlock &amp;<db:emphasis>block</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>blockBoundingRect</db:methodname>
<db:methodparam>
<db:type>const QTextBlock &amp;</db:type>
<db:parameter>block</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF blockBoundingRect(const QTextBlock &amp;block) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstracttextdocumentlayout.xml#blockBoundingRect" role="function">QAbstractTextDocumentLayout::blockBoundingRect(const QTextBlock &amp;block) const</db:link>.</db:para>
</db:section>
<db:section xml:id="documentChanged">
<db:title>[override virtual protected] void QPlainTextDocumentLayout::documentChanged(int <db:emphasis>from</db:emphasis>, int <db:emphasis>charsRemoved</db:emphasis>, int <db:emphasis>charsAdded</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>documentChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>charsRemoved</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>charsAdded</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void documentChanged(int from, int charsRemoved, int charsAdded) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstracttextdocumentlayout.xml#documentChanged" role="function">QAbstractTextDocumentLayout::documentChanged(int position, int charsRemoved, int charsAdded)</db:link>.</db:para>
</db:section>
<db:section xml:id="documentSize">
<db:title>[override virtual] QSizeF QPlainTextDocumentLayout::documentSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSizeF</db:type>
<db:methodname>documentSize</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizeF documentSize() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstracttextdocumentlayout.xml#documentSize" role="function">QAbstractTextDocumentLayout::documentSize() const</db:link>.</db:para>
</db:section>
<db:section xml:id="draw">
<db:title>[override virtual] void QPlainTextDocumentLayout::draw(<db:emphasis>QPainter *</db:emphasis>, <db:emphasis>const QAbstractTextDocumentLayout::PaintContext &amp;</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>draw</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QAbstractTextDocumentLayout::PaintContext &amp;</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void draw(QPainter *, const QAbstractTextDocumentLayout::PaintContext &amp;) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstracttextdocumentlayout.xml#draw" role="function">QAbstractTextDocumentLayout::draw(QPainter *painter, const QAbstractTextDocumentLayout::PaintContext &amp;context)</db:link>.</db:para>
</db:section>
<db:section xml:id="ensureBlockLayout">
<db:title>void QPlainTextDocumentLayout::ensureBlockLayout(const QTextBlock &amp;<db:emphasis>block</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>ensureBlockLayout</db:methodname>
<db:methodparam>
<db:type>const QTextBlock &amp;</db:type>
<db:parameter>block</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void ensureBlockLayout(const QTextBlock &amp;block) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Ensures that <db:code role="parameter">block</db:code> has a valid layout</db:para>
</db:section>
<db:section xml:id="frameBoundingRect">
<db:title>[override virtual] QRectF QPlainTextDocumentLayout::frameBoundingRect(<db:emphasis>QTextFrame *</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>frameBoundingRect</db:methodname>
<db:methodparam>
<db:type>QTextFrame *</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF frameBoundingRect(QTextFrame *) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstracttextdocumentlayout.xml#frameBoundingRect" role="function">QAbstractTextDocumentLayout::frameBoundingRect(QTextFrame *frame) const</db:link>.</db:para>
</db:section>
<db:section xml:id="hitTest">
<db:title>[override virtual] int QPlainTextDocumentLayout::hitTest(<db:emphasis>const QPointF &amp;</db:emphasis>, <db:emphasis>Qt::HitTestAccuracy</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>hitTest</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::HitTestAccuracy</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int hitTest(const QPointF &amp;, Qt::HitTestAccuracy) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstracttextdocumentlayout.xml#hitTest" role="function">QAbstractTextDocumentLayout::hitTest(const QPointF &amp;point, Qt::HitTestAccuracy accuracy) const</db:link>.</db:para>
</db:section>
<db:section xml:id="pageCount">
<db:title>[override virtual] int QPlainTextDocumentLayout::pageCount() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>pageCount</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int pageCount() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstracttextdocumentlayout.xml#pageCount" role="function">QAbstractTextDocumentLayout::pageCount() const</db:link>.</db:para>
</db:section>
<db:section xml:id="requestUpdate">
<db:title>void QPlainTextDocumentLayout::requestUpdate()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>requestUpdate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestUpdate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Requests a complete update on all views.</db:para>
</db:section>
</db:section>
</db:article>
