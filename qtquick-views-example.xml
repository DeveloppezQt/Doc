<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Views</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This is a collection of QML model-view examples.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-modelviews-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Views</db:emphasis> is a collection of small QML examples relating to model and view functionality. They demonstrate how to show data from a model using the Qt Quick view types. For more information, visit the <db:link xlink:href="qtquick-modelviewsdata-modelview.xml">Models and Views in Qt Quick</db:link> page.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Qt Creator: Tutorial: Build and run</db:link>.</db:para>
</db:section>
<db:section xml:id="using-gridview-and-pathview">
<db:title>Using GridView and PathView</db:title>
<db:para><db:emphasis>GridView</db:emphasis> and <db:emphasis>PathView</db:emphasis> demonstrate usage of these types to display views.</db:para>
<db:programlisting language="qml">    GridView {
        anchors.fill: parent
        cellWidth: 100
        cellHeight: 100
        focus: true
        model: appModel

        highlight: Rectangle {
            width: 80
            height: 80
            color: &quot;lightsteelblue&quot;
        }

        delegate: Item {
            required property string icon
            required property string name
            required property int index

            width: 100
            height: 100

            Image {
                id: myIcon
                y: 20
                anchors.horizontalCenter: parent.horizontalCenter
                source: parent.icon
            }
            Text {
                anchors {
                    top: myIcon.bottom
                    horizontalCenter: parent.horizontalCenter
                }
                text: parent.name
            }
            MouseArea {
                anchors.fill: parent
                onClicked: parent.GridView.view.currentIndex = parent.index
            }
        }
    }
</db:programlisting>
</db:section>
<db:section xml:id="using-dynamic-list">
<db:title>Using Dynamic List</db:title>
<db:para><db:emphasis>Dynamic List</db:emphasis> demonstrates animation of runtime additions and removals to a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.onAdd signal handler runs an animation when new items are added to the view, and the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.onRemove another when they are removed.</db:para>
<db:programlisting language="qml">        Item {
            SequentialAnimation {
                id: addAnimation
                PropertyAction {
                    target: delegateItem
                    property: &quot;height&quot;
                    value: 0
                }
                NumberAnimation {
                    target: delegateItem
                    property: &quot;height&quot;
                    to: 80
                    duration: 250
                    easing.type: Easing.InOutQuad
                }
            }
            ListView.onAdd: addAnimation.start()

            SequentialAnimation {
                id: removeAnimation
                PropertyAction {
                    target: delegateItem
                    property: &quot;ListView.delayRemove&quot;
                    value: true
                }
                NumberAnimation {
                    target: delegateItem
                    property: &quot;height&quot;
                    to: 0
                    duration: 250
                    easing.type: Easing.InOutQuad
                }

                // Make sure delayRemove is set back to false so that the item can be destroyed
                PropertyAction {
                    target: delegateItem
                    property: &quot;ListView.delayRemove&quot;
                    value: false
                }
            }
            ListView.onRemove: removeAnimation.start()
        }
</db:programlisting>
<db:section xml:id="expanding-delegates">
<db:title>Expanding Delegates</db:title>
<db:para><db:emphasis>Expanding Delegates</db:emphasis> demonstrates delegates that expand when activated.</db:para>
<db:para>It has a complex delegate the size and appearance of which can change, displacing other items in the view.</db:para>
<db:programlisting language="qml">        Item {
            id: recipe

            required property string title
            required property string picture
            required property string ingredients
            required property string method

            // Create a property to contain the visibility of the details.
            // We can bind multiple element's opacity to this one property,
            // rather than having a &quot;PropertyChanges&quot; line for each element we
            // want to fade.
            property real detailsOpacity : 0
            MouseArea {
                anchors.fill: parent
                onClicked: recipe.state = 'Details';
            }

            // Lay out the page: picture, title and ingredients at the top, and method at the
            // bottom.  Note that elements that should not be visible in the list
            // mode have their opacity set to recipe.detailsOpacity.

            Row {
                id: topLayout
                x: 10
                y: 10
                height: recipeImage.height
                width: parent.width
                spacing: 10

                Image {
                    id: recipeImage
                    width: 50
                    height: 50
                    source: recipe.picture
                }
            Item {
                id: details
                x: 10
                width: parent.width - 20

                anchors {
                    top: topLayout.bottom
                    topMargin: 10
                    bottom: parent.bottom
                    bottomMargin: 10
                }
                opacity: recipe.detailsOpacity
            }

            // A button to close the detailed view, i.e. set the state back to default ('').
            TextButton {
                y: 10
                anchors {
                    right: background.right
                    rightMargin: 10
                }
                opacity: recipe.detailsOpacity
                text: qsTr(&quot;Close&quot;)

                onClicked: recipe.state = '';
            }

            states: State {
                name: &quot;Details&quot;

                PropertyChanges {
                    background.color: &quot;white&quot;
                    recipeImage {
                         // Make picture bigger
                        width: 130
                        height: 130
                    }
                    recipe {
                        // Make details visible
                        detailsOpacity: 1
                        x: 0

                        // Fill the entire list area with the detailed view
                        height: listView.height
                    }
                }

                // Move the list so that this item is at the top.
                PropertyChanges {
                    recipe.ListView.view.contentY: recipe.y
                    explicit: true;
                }

                // Disallow flicking while we're in detailed view
                PropertyChanges {
                    recipe.ListView.view.interactive: false
                }
            }

            transitions: Transition {
                // Make the state changes smooth
                ParallelAnimation {
                    ColorAnimation {
                        property: &quot;color&quot;
                        duration: 500
                    }
                    NumberAnimation {
                        duration: 300
                        properties: &quot;detailsOpacity,x,contentY,height,width&quot;
                    }
                }
            }
        }
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="using-highlight">
<db:title>Using Highlight</db:title>
<db:para><db:emphasis>Highlight</db:emphasis> demonstrates adding a custom highlight to a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.</db:para>
<db:programlisting language="qml">    // Define a highlight with customized movement between items.
    component HighlightBar : Rectangle {
        width: 200
        height: 50
        color: &quot;#FFFF88&quot;
        y: ListView.view.currentItem.y
        Behavior on y {
            SpringAnimation {
                spring: 2
                damping: 0.1
            }
        }
    }

    ListView {
        id: listView
        width: 200
        height: parent.height
        x: 30

        model: PetsModel { }
        delegate: PetDelegate { }
        focus: true

        // Set the highlight delegate. Note we must also set highlightFollowsCurrentItem
        // to false so the highlight delegate can control how the highlight is moved.
        highlight: HighlightBar { }
        highlightFollowsCurrentItem: false
    }
</db:programlisting>
</db:section>
<db:section xml:id="using-highlight-ranges">
<db:title>Using Highlight Ranges</db:title>
<db:para><db:emphasis>Highlight Ranges</db:emphasis> shows the three different highlight range modes of <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.</db:para>
<db:programlisting language="qml">Rectangle {
    id: root
    property int current: 0
    property bool increasing: true
    // Example index automation for convenience, disabled on click or tap
    SequentialAnimation {
        id: anim
        loops: -1
        running: true
        ScriptAction {
            script: if (root.increasing) {
                        root.current++;
                        if (root.current &gt;= aModel.count -1) {
                            root.current = aModel.count - 1;
                            root.increasing = !root.increasing;
                        }
                    } else {
                        root.current--;
                        if (root.current &lt;= 0) {
                            root.current = 0;
                            root.increasing = !root.increasing;
                        }
                    }
        }

        PauseAnimation {
            duration: 500
        }
    }
    ListView {
        id: list1
        height: 50
        width: parent.width
        model: PetsModel {
            id: aModel
        }
        delegate: petDelegate
        orientation: ListView.Horizontal
        highlight: Rectangle {
            color: &quot;lightsteelblue&quot;
        }
        currentIndex: root.current
        onCurrentIndexChanged: root.current = currentIndex
        focus: true
    }

    ListView {
        id: list2
        y: 160
        height: 50
        width: parent.width
        model: PetsModel { }
        delegate: petDelegate
        orientation: ListView.Horizontal
        highlight: Rectangle {
            color: &quot;yellow&quot;
        }
        currentIndex: root.current
        preferredHighlightBegin: 80
        preferredHighlightEnd: 220
        highlightRangeMode: ListView.ApplyRange
    }

    ListView {
        id: list3
        y: 320
        height: 50
        width: parent.width
        model: PetsModel {}
        delegate: petDelegate
        orientation: ListView.Horizontal
        highlight: Rectangle { color: &quot;yellow&quot; }
        currentIndex: root.current
        onCurrentIndexChanged: root.current = currentIndex
        preferredHighlightBegin: 125
        preferredHighlightEnd: 125
        highlightRangeMode: ListView.StrictlyEnforceRange
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="using-sections">
<db:title>Using Sections</db:title>
<db:para><db:emphasis>Sections</db:emphasis> demonstrates the various section headers and footers available to <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.</db:para>
<db:programlisting language="qml">    // The delegate for each section header
    Component {
        id: sectionHeading
        Rectangle {
            width: ListView.view.width
            height: childrenRect.height
            color: &quot;lightsteelblue&quot;

            required property string section

            Text {
                text: parent.section
                font.bold: true
                font.pixelSize: 20
            }
        }
    }

    ListView {
        id: view
        anchors.top: parent.top
        anchors.bottom: buttonBar.top
        width: parent.width
        model: animalsModel
        delegate: Text {
            required property string name

            text: name
            font.pixelSize: 18
        }

        section.property: &quot;size&quot;
        section.criteria: ViewSection.FullString
        section.delegate: sectionHeading
    }
</db:programlisting>
</db:section>
<db:section xml:id="using-packages">
<db:title>Using Packages</db:title>
<db:para><db:emphasis>Packages</db:emphasis> uses the Package type to transition delegates between two views.</db:para>
<db:para>It has a Package object which defines delegate items for each view and an item that can be transferred between delegates.</db:para>
<db:programlisting language="qml">Package {
    id: delegate

    required property int upTo
    required property int index
    required property string display

    Text {
        id: listDelegate
        width: parent.width
        height: 25
        text: 'Empty'
        Package.name: 'list'
    }

    Text {
        id: gridDelegate
        width: parent.width / 2
        height: 50
        text: 'Empty'
        Package.name: 'grid'
    }

    Rectangle {
        id: wrapper
        width: parent?.width ?? 0
        height: 25
        color: 'lightsteelblue'

        Text {
            text: delegate.display
            anchors.centerIn: parent
        }
        state: delegate.upTo &gt; delegate.index ? 'inGrid' : 'inList'
        states: [
            State {
                name: 'inList'
                ParentChange {
                    target: wrapper
                    parent: listDelegate
                }
            },
            State {
                name: 'inGrid'
                ParentChange {
                    target: wrapper
                    parent: gridDelegate
                    x: 0
                    y: 0
                    width: gridDelegate.width
                    height: gridDelegate.height
                }
            }
        ]

        transitions: [
            Transition {
                ParentAnimation {
                    NumberAnimation {
                        properties: 'x,y,width,height'
                        duration: 300
                    }
                }
            }
        ]
    }
}
</db:programlisting>
<db:para>A DelegateModel allows the individual views to access their specific items from the shared package delegate.</db:para>
<db:programlisting language="qml">DelegateModel {
    id: visualModel
    delegate: Delegate {
        upTo: root.upTo
    }
    model: myModel
}

ListView {
    id: lv
    height: parent.height / 2
    width: parent.width

    model: visualModel.parts.list
}
GridView {
    y: parent.height / 2
    height: parent.height / 2
    width: parent.width
    cellWidth: width / 2
    cellHeight: 50
    model: visualModel.parts.grid
}
</db:programlisting>
<db:para><db:emphasis>Draggable Selections</db:emphasis> demonstrates the use of Package to group together multiple selected delegates for drag-and-drop within an item view.</db:para>
<db:programlisting language="qml">        Package {
            id: packageRoot

            required property var modelData

            MouseArea {
                id: visibleContainer
                Package.name: &quot;visible&quot;

                width: 64
                height: 64
                enabled: packageRoot.DelegateModel.inSelected

                drag.target: draggable

                Item {
                    id: draggable

                    Drag.active: visibleContainer.drag.active
</db:programlisting>
</db:section>
<db:section xml:id="using-objectmodel">
<db:title>Using ObjectModel</db:title>
<db:para><db:emphasis>ObjectModel</db:emphasis> uses an ObjectModel for the model instead of a ListModel.</db:para>
<db:programlisting language="qml">    ObjectModel {
        id: itemModel

        Rectangle {
            width: view.width
            height: view.height
            color: &quot;#FFFEF0&quot;

            Text {
                anchors.centerIn: parent
                text: qsTr(&quot;Page 1&quot;)
                font.bold: true
            }

            Component.onDestruction: if (root.printDestruction) print(&quot;destroyed 1&quot;)
        }
        Rectangle {
            width: view.width
            height: view.height
            color: &quot;#F0FFF7&quot;

            Text {
                anchors.centerIn: parent
                text: qsTr(&quot;Page 2&quot;)
                font.bold: true
            }

            Component.onDestruction: if (root.printDestruction) print(&quot;destroyed 2&quot;)
        }
        Rectangle {
            width: view.width
            height: view.height
            color: &quot;#F4F0FF&quot;

            Text {
                anchors.centerIn: parent
                text: qsTr(&quot;Page 3&quot;)
                font.bold: true
            }

            Component.onDestruction: if (root.printDestruction) print(&quot;destroyed 3&quot;)
        }
    }

    ListView {
        id: view
        anchors {
            fill: parent
            bottomMargin: 30
        }
        model: itemModel
        preferredHighlightBegin: 0
        preferredHighlightEnd: 0
        highlightRangeMode: ListView.StrictlyEnforceRange
        orientation: ListView.Horizontal
        snapMode: ListView.SnapOneItem
        flickDeceleration: 2000
        cacheBuffer: 200
    }
</db:programlisting>
</db:section>
<db:section xml:id="using-display-margins">
<db:title>Using Display Margins</db:title>
<db:para><db:emphasis>Display Margins</db:emphasis> uses delegates to display items and implements a simple header and footer components.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/views?h=6.8">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
