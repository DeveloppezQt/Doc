<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt CAN Bus</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Implemented Qt CAN Bus.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>A Controller Area Network (CAN) is a vehicle bus standard designed to allow microcontrollers and devices to communicate with each other in applications without a host computer.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>It is a message-based protocol, designed originally for multiplex electrical wiring within automobiles, but is also used in many other contexts.</db:para>
<db:para>The CAN Bus API provides some common API to access the CAN devices:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> provides an API for direct access to the CAN device.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> defines a CAN frame that can be written and read from <db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Multiple vendors provide CAN devices with varying APIs for access. The <db:link xlink:href="qtserialbus-module.xml">QtSerialBus</db:link> module supports the following sets of CAN bus backends:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Vendor</db:para>
</db:th>
<db:th>
<db:para>Backend (key)</db:para>
</db:th>
<db:th>
<db:para>Brief description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>CAN over Linux sockets</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtserialbus-socketcan-overview.xml">SocketCAN</db:link> (<db:code>socketcan</db:code>)</db:para>
</db:td>
<db:td>
<db:para>CAN bus backend using Linux sockets and open source drivers.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>PEAK-System</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtserialbus-peakcan-overview.xml">PeakCAN</db:link> (<db:code>peakcan</db:code>)</db:para>
</db:td>
<db:td>
<db:para>CAN bus backend using the PEAK CAN adapters.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MHS Elektronik</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtserialbus-tinycan-overview.xml">TinyCAN</db:link> (<db:code>tinycan</db:code>)</db:para>
</db:td>
<db:td>
<db:para>CAN bus backend using the MHS CAN adapters.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="implementing-a-custom-can-plugin">
<db:title>Implementing a Custom CAN Plugin</db:title>
<db:para>If the plugins provided by Qt are not suitable for the required target platform, a custom CAN bus plugin can be implemented. The implementation follows the standard way of implementing Qt plug-ins. The custom plugin must be deployed to <db:code>$QTDIR/plugins/canbus</db:code>.</db:para>
<db:para>Each plugin must define a key, which is used to load the plugin. This is done via a small json file. For example, the socketcan plugin uses the following <db:code>plugin.json</db:code>:</db:para>
<db:programlisting language="cpp">{
    &quot;Key&quot;: &quot;socketcan&quot;
}
</db:programlisting>
<db:para>This key must be passed to <db:link xlink:href="qcanbus.xml#createDevice">QCanBus::createDevice</db:link>() together with the interface name of the CAN bus adapter. <db:link xlink:href="qcanbus.xml">QCanBus</db:link> loads and instantiates the plugin using the <db:link xlink:href="qcanbusfactory.xml">QCanBusFactory</db:link> interface which each plugin must implement as central entry point. The interface acts as a factory and its sole purpose is to return a <db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link> instance. The above mentioned interface name is passed on via the factory's <db:link xlink:href="qcanbusfactory.xml#createDevice">QCanBusFactory::createDevice</db:link>() method. The following is the factory implementation of the <db:emphasis>socketcan</db:emphasis> plugin:</db:para>
<db:programlisting language="cpp">class SocketCanBusPlugin : public QObject, public QCanBusFactory
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.QCanBusFactory&quot; FILE &quot;plugin.json&quot;)
    Q_INTERFACES(QCanBusFactory)

public:
    QCanBusDevice *createDevice(const QString &amp;interfaceName) const
    {
        auto device = new SocketCanBackend(interfaceName);
        return device;
    }
};
</db:programlisting>
<db:para>The next step is to provide an implementation of <db:link xlink:href="qcanbusdevice.xml">QCanBusDevice</db:link>. At the very least, the following pure virtual functions must be implemented:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qcanbusdevice.xml#open">QCanBusDevice::open</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcanbusdevice.xml#close">QCanBusDevice::close</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcanbusdevice.xml#writeFrame">QCanBusDevice::writeFrame</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">QCanBusDevice::interpretErrorFrame()</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:link xlink:href="qcanbusdevice.xml#open">open</db:link>() and <db:link xlink:href="qcanbusdevice.xml#close">close</db:link>() methods are used in conjuntion with <db:link xlink:href="qcanbusdevice.xml#connectDevice">QCanBusDevice::connectDevice</db:link>() and <db:link xlink:href="qcanbusdevice.xml#disconnectDevice">QCanBusDevice::disconnectDevice</db:link>() respectively. Check the function documentation for implementation details.</db:para>
<db:para><db:link xlink:href="qcanbusdevice.xml#writeFrame">QCanBusDevice::writeFrame</db:link>() is responsible for sanity checks such as the validity of the <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> and that the device is still connected. Provided that the checks passed, it writes the frame to the CAN bus. Upon success it emits the <db:link xlink:href="qcanbusdevice.xml#framesWritten">QCanBusDevice::framesWritten</db:link>() signal; otherwise <db:link xlink:href="qcanbusdevice.xml#setError">QCanBusDevice::setError</db:link>() is called with an appropriate error message. This function may also be used to implement an asynchronous write operation. It is the plugin implementors responsibility to emit the appropriate signals at the appropriate time.</db:para>
<db:para>Last but not least, <db:link xlink:href="">QCanBusDevice::interpretErrorFrame</db:link> provides a convenient way to translate the content of an CAN bus error frame to a human-readable error string.</db:para>
</db:section>
</db:article>
