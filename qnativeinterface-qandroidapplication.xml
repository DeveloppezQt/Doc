<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Native interface to a core application on Android.</db:para>
<db:para>This struct was introduced in Qt 6.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCoreApplication</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAndroidApplication is part of <db:simplelist><db:member>native-interfaces</db:member><db:member>native-interfaces-qcoreapplication</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Accessed through QCoreApplication::nativeInterface().</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="context">
<db:title>[static, since 6.2] int QAndroidApplication::context()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>context</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int context()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Android context as a jobject. The context is an Activity if the main activity object is valid. Otherwise, the context is a Service.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="hideSplashScreen">
<db:title>[static, since 6.2] void QAndroidApplication::hideSplashScreen(int <db:emphasis>duration</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>hideSplashScreen</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>duration</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hideSplashScreen(int duration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Hides the splash screen by using a fade effect for the given <db:code role="parameter">duration</db:code>. If <db:code role="parameter">duration</db:code> is not provided (default is 0) the splash screen is hidden immedetiately after the app starts.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="isActivityContext">
<db:title>[static, since 6.2] bool QAndroidApplication::isActivityContext()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isActivityContext</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isActivityContext()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:link xlink:href="qnativeinterface-qandroidapplication.xml#context">QAndroidApplication::context</db:link>() provides an Activity context.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="runOnAndroidMainThread">
<db:title>[static, since 6.2] QFuture&lt;QVariant&gt; QAndroidApplication::runOnAndroidMainThread(const std::function&lt;QVariant ()&gt; &amp;<db:emphasis>runnable</db:emphasis>, const QDeadlineTimer <db:emphasis>timeout</db:emphasis> = QDeadlineTimer::Forever)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QFuture&lt;QVariant&gt;</db:type>
<db:methodname>runOnAndroidMainThread</db:methodname>
<db:methodparam>
<db:type>const std::function&lt;QVariant ()&gt; &amp;</db:type>
<db:parameter>runnable</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QDeadlineTimer</db:type>
<db:parameter>timeout</db:parameter>
<db:initializer>QDeadlineTimer::Forever</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFuture&lt;QVariant&gt; runOnAndroidMainThread(const std::function&lt;QVariant ()&gt; &amp;runnable, const QDeadlineTimer timeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Posts the function <db:code role="parameter">runnable</db:code> to the Android thread. The function will be queued and executed on the Android UI thread. If the call is made on the Android UI thread <db:code role="parameter">runnable</db:code> will be executed immediately. If the Android app is paused or the main Activity is null, runnable is added to the Android main thread's queue.</db:para>
<db:para>This call returns a <db:link xlink:href="qfuture.xml">QFuture</db:link>&lt;<db:link xlink:href="qvariant.xml">QVariant</db:link>&gt; which allows doing both synchronous and asynchronous calls, and can handle any return type. However, to get a result back from the <db:link xlink:href="qfuture.xml#result">QFuture::result</db:link>(), <db:link xlink:href="qvariant.xml#value">QVariant::value</db:link>() should be used.</db:para>
<db:para>If the <db:code role="parameter">runnable</db:code> execution takes longer than the period of <db:code role="parameter">timeout</db:code>, the blocking calls <db:link xlink:href="qfuture.xml#waitForFinished">QFuture::waitForFinished</db:link>() and <db:link xlink:href="qfuture.xml#result">QFuture::result</db:link>() are ended once <db:code role="parameter">timeout</db:code> has elapsed. However, if <db:code role="parameter">runnable</db:code> has already started execution, it won't be cancelled.</db:para>
<db:para>The following example shows how to run an asynchronous call that expects a return type:</db:para>
<db:programlisting language="cpp">auto task = QNativeInterface::QAndroidApplication::runOnAndroidMainThread([=]() {
    QJniObject surfaceView;
    if (!surfaceView.isValid())
        qDebug() &amp;lt;&amp;lt; &quot;SurfaceView object is not valid yet&quot;;

    surfaceView = QJniObject(&quot;android/view/SurfaceView&quot;,
                             &quot;(Landroid/content/Context;)V&quot;,
                             QNativeInterface::QAndroidApplication::context());

    return QVariant::fromValue(surfaceView);
}).then([](QFuture&amp;lt;QVariant&amp;gt; future) {
    auto surfaceView = future.result().value&amp;lt;QJniObject&amp;gt;();
    if (surfaceView.isValid())
        qDebug() &amp;lt;&amp;lt; &quot;Retrieved SurfaceView object is valid&quot;;
});
</db:programlisting>
<db:para>The following example shows how to run a synchronous call with a void return type:</db:para>
<db:programlisting language="cpp">QNativeInterface::QAndroidApplication::runOnAndroidMainThread([]() {
   QJniObject activity = QNativeInterface::QAndroidApplication::context();
   // Hide system ui elements or go full screen
   activity.callObjectMethod(&quot;getWindow&quot;, &quot;()Landroid/view/Window;&quot;)
           .callObjectMethod(&quot;getDecorView&quot;, &quot;()Landroid/view/View;&quot;)
           .callMethod&amp;lt;void&amp;gt;(&quot;setSystemUiVisibility&quot;, &quot;(I)V&quot;, 0xffffffff);
}).waitForFinished();
</db:programlisting>
<db:note>
<db:para>Becareful about the type of operations you do on the Android's main thread, as any long operation can block the app's UI rendering and input handling. If the function is expected to have long execution time, it's also good to use a <db:link xlink:href="qdeadlinetimer.xml">QDeadlineTimer</db:link> in your <db:code role="parameter">runnable</db:code> to manage the execution and make sure it doesn't block the UI thread. Usually, any operation longer than 5 seconds might block the app's UI. For more information, see <db:link xlink:href="https://developer.android.com/training/articles/perf-anr">Keeping your app responsive</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="sdkVersion">
<db:title>[static, since 6.2] int QAndroidApplication::sdkVersion()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>sdkVersion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int sdkVersion()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Android SDK version. This is also known as the API level.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
</db:section>
</db:article>
