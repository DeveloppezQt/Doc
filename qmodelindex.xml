<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QModelIndex Class</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> class is used to locate data in a data model.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QModelIndex</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QModelIndex is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class is used as an index into item models derived from <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>. The index is used by item views, delegates, and selection models to locate an item in the model.</db:para>
<db:para>New <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> objects are created by the model using the <db:link xlink:href="qabstractitemmodel.xml#createIndex">QAbstractItemModel::createIndex</db:link>() function. An <db:emphasis>invalid</db:emphasis> model index can be constructed with the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> constructor. Invalid indexes are often used as parent indexes when referring to top-level items in a model.</db:para>
<db:para>Model indexes refer to items in models, and contain all the information required to specify their locations in those models. Each index is located in a given row and column, and may have a parent index; use <db:link xlink:href="qmodelindex.xml#row">row</db:link>(), <db:link xlink:href="qmodelindex.xml#column">column</db:link>(), and <db:link xlink:href="qmodelindex.xml#parent">parent</db:link>() to obtain this information. Each top-level item in a model is represented by a model index that does not have a parent index - in this case, <db:link xlink:href="qmodelindex.xml#parent">parent</db:link>() will return an invalid model index, equivalent to an index constructed with the zero argument form of the <db:link xlink:href="qmodelindex.xml#QModelIndex">QModelIndex</db:link>() constructor.</db:para>
<db:para>To obtain a model index that refers to an existing item in a model, call <db:link xlink:href="qabstractitemmodel.xml#index">QAbstractItemModel::index</db:link>() with the required row and column values, and the model index of the parent. When referring to top-level items in a model, supply <db:link xlink:href="qmodelindex.xml#QModelIndex">QModelIndex</db:link>() as the parent index.</db:para>
<db:para>The <db:link xlink:href="qmodelindex.xml#model">model</db:link>() function returns the model that the index references as a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>. The <db:link xlink:href="qmodelindex.xml#child">child</db:link>() function is used to examine items held under the index in the model. The <db:link xlink:href="qmodelindex.xml#sibling">sibling</db:link>() function allows you to traverse items in the model on the same level as the index.</db:para>
<db:note>
<db:para>Model indexes should be used immediately and then discarded. You should not rely on indexes to remain valid after calling model functions that change the structure of the model or delete items. If you need to keep a model index over time use a <db:link xlink:href="qpersistentmodelindex.xml">QPersistentModelIndex</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qpersistentmodelindex.xml">QPersistentModelIndex</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QModelIndex">
<db:title>QModelIndex::QModelIndex()</db:title>
<db:para>Creates a new empty model index. This type of model index is used to indicate that the position in the model is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodelindex.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="child">
<db:title>QModelIndex QModelIndex::child(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>) const</db:title>
<db:para>Returns the child of the model index that is stored in the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code>.</db:para>
<db:note>
<db:para>This function does not work for an invalid model index which is often used as the root index.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodelindex.xml#parent">parent</db:link>()</db:member>
<db:member><db:link xlink:href="qmodelindex.xml#sibling">sibling</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="column">
<db:title>int QModelIndex::column() const</db:title>
<db:para>Returns the column this model index refers to.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>QVariant QModelIndex::data(int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Returns the data for the given <db:code role="parameter">role</db:code> for the item referred to by the index.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>[since 4.2] Qt::ItemFlags QModelIndex::flags() const</db:title>
<db:para>Returns the flags for the item referred to by the index.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="internalId">
<db:title>quintptr QModelIndex::internalId() const</db:title>
<db:para>Returns a qint64 used by the model to associate the index with the internal data structure.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#createIndex">QAbstractItemModel::createIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="internalPointer">
<db:title>void *QModelIndex::internalPointer() const</db:title>
<db:para>Returns a void * pointer used by the model to associate the index with the internal data structure.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#createIndex">QAbstractItemModel::createIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QModelIndex::isValid() const</db:title>
<db:para>Returns true if this model index is valid; otherwise returns false.</db:para>
<db:para>A valid index belongs to a model, and has non-negative row and column numbers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodelindex.xml#model">model</db:link>()</db:member>
<db:member><db:link xlink:href="qmodelindex.xml#row">row</db:link>()</db:member>
<db:member><db:link xlink:href="qmodelindex.xml#column">column</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="model">
<db:title>const QAbstractItemModel *QModelIndex::model() const</db:title>
<db:para>Returns a pointer to the model containing the item that this index refers to.</db:para>
<db:para>A const pointer to the model is returned because calls to non-const functions of the model might invalidate the model index and possibly crash your application.</db:para>
</db:section>
<db:section xml:id="parent">
<db:title>QModelIndex QModelIndex::parent() const</db:title>
<db:para>Returns the parent of the model index, or <db:link xlink:href="qmodelindex.xml#QModelIndex">QModelIndex</db:link>() if it has no parent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodelindex.xml#child">child</db:link>()</db:member>
<db:member><db:link xlink:href="qmodelindex.xml#sibling">sibling</db:link>()</db:member>
<db:member><db:link xlink:href="qmodelindex.xml#model">model</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="row">
<db:title>int QModelIndex::row() const</db:title>
<db:para>Returns the row this model index refers to.</db:para>
</db:section>
<db:section xml:id="sibling">
<db:title>QModelIndex QModelIndex::sibling(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>) const</db:title>
<db:para>Returns the sibling at <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code>. If there is no sibling at this position, an invalid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodelindex.xml#parent">parent</db:link>()</db:member>
<db:member><db:link xlink:href="qmodelindex.xml#child">child</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QModelIndex::operator!=(const QModelIndex &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this model index does not refer to the same location as the <db:code role="parameter">other</db:code> model index; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-lt">
<db:title>[since 4.1] bool QModelIndex::operator&lt;(const QModelIndex &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this model index is smaller than the <db:code role="parameter">other</db:code> model index; otherwise returns false.</db:para>
<db:para>The less than calculation is not directly useful to developers - the way that indexes with different parents compare is not defined. This operator only exists so that the class can be used with <db:link xlink:href="qmap.xml">QMap</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QModelIndex::operator==(const QModelIndex &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this model index refers to the same location as the <db:code role="parameter">other</db:code> model index; otherwise returns false.</db:para>
<db:para>All values in the model index are used when comparing with another model index.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QModelIndexList-typedef">
<db:title>QModelIndexList</db:title>
<db:para>Synonym for <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>&gt;.</db:para>
</db:section>
</db:section>
</db:article>
