<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>JSON Support in Qt</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of JSON support in Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>Qt provides support for dealing with JSON data. JSON is a format to encode object data derived from Javascript, but now widely used as a data exchange format on the internet.</db:para>
<db:para>The JSON support in Qt provides an easy to use C++ API to parse, modify and save JSON data. It also contains support for saving this data in a binary format that is directly &quot;mmap&quot;-able and very fast to access.</db:para>
<db:para>More details about the JSON data format can be found at <db:link xlink:href="http://json.org">json.org</db:link> and in <db:link xlink:href="http://tools.ietf.org/html/rfc4627">RFC-4627</db:link>.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>JSON is a format to store structured data. It has 6 basic data types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>bool</db:para>
</db:listitem>
<db:listitem>
<db:para>double</db:para>
</db:listitem>
<db:listitem>
<db:para>string</db:para>
</db:listitem>
<db:listitem>
<db:para>array</db:para>
</db:listitem>
<db:listitem>
<db:para>object</db:para>
</db:listitem>
<db:listitem>
<db:para>null</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>A value can have any of the above types. A boolean value is represented by the strings true or false in JSON. JSON doesn't explicitly specify the valid range for numbers, but the support in Qt is limited to the validity range and precision of doubles. A string can be any valid unicode string. An array is a list of values, and an object is a collection of key/value pairs. All keys in an object are strings, and an object cannot contain any duplicate keys.</db:para>
<db:para>The text representation of JSON encloses arrays in square brackets ([ ... ]) and objects in curly brackets ({ ... }). Entries in arrays and objects are separated by commas. The separator between keys and values in an object is a colon (:).</db:para>
<db:para>A simple JSON document encoding a person, his/her age, address and phone numbers could look like:</db:para>
<db:programlisting language="cpp">{
    &quot;FirstName&quot;: &quot;John&quot;,
    &quot;LastName&quot;: &quot;Doe&quot;,
    &quot;Age&quot;: 43,
    &quot;Address&quot;: {
        &quot;Street&quot;: &quot;Downing Street 10&quot;,
        &quot;City&quot;: &quot;London&quot;,
        &quot;Country&quot;: &quot;Great Britain&quot;
    },
    &quot;Phone numbers&quot;: [
        &quot;+44 1234567&quot;,
        &quot;+44 2345678&quot;
    ]
}
</db:programlisting>
<db:para>The above example consists of an object with 5 key/value pairs. Two of the values are strings, one is a number, one is another object and the last one an array.</db:para>
<db:para>A valid JSON document is either an array or an object, so a document always starts with a square or curly bracket.</db:para>
</db:section>
<db:section xml:id="the-json-classes">
<db:title>The JSON Classes</db:title>
<db:para>All JSON classes are value based, <db:link xlink:href="implicit-sharing.xml">implicitly shared classes</db:link>.</db:para>
<db:para>JSON support in Qt consists of these classes:</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtcore-savegame-example.xml">JSON Save Game Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
<db:section>
<db:title>Contents</db:title>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="qjsonarray.xml" xlink:role="class">QJsonArray</db:link></db:term>
<db:listitem>
<db:para>The QJsonArray class encapsulates a JSON array.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsondocument.xml" xlink:role="class">QJsonDocument</db:link></db:term>
<db:listitem>
<db:para>The QJsonDocument class provides a way to read and write JSON documents.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsonobject.xml" xlink:role="class">QJsonObject</db:link></db:term>
<db:listitem>
<db:para>The QJsonObject class encapsulates a JSON object.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsonobject-const-iterator.xml" xlink:role="class">QJsonObject::const_iterator</db:link></db:term>
<db:listitem>
<db:para>The QJsonObject::const_iterator class provides an STL-style const iterator for QJsonObject.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsonobject-iterator.xml" xlink:role="class">QJsonObject::iterator</db:link></db:term>
<db:listitem>
<db:para>The QJsonObject::iterator class provides an STL-style non-const iterator for QJsonObject.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsonparseerror.xml" xlink:role="class">QJsonParseError</db:link></db:term>
<db:listitem>
<db:para>The QJsonParseError class is used to report errors during JSON parsing.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsonvalue.xml" xlink:role="class">QJsonValue</db:link></db:term>
<db:listitem>
<db:para>The QJsonValue class encapsulates a value in JSON.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
