<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSessionManager Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsessionmanager.xml">QSessionManager</db:link> class provides access to the session manager.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSessionManager</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A session manager in a desktop environment (in which Qt GUI applications live) keeps track of a session, which is a group of running applications, each of which has a particular state. The state of an application contains (most notably) the documents the application has open and the position and size of its windows.</db:para>
<db:para>The session manager is used to save the session, e.g., when the machine is shut down, and to restore a session, e.g., when the machine is started up. We recommend that you use <db:link xlink:href="qsettings.xml">QSettings</db:link> to save an application's settings, for example, window positions, recently used files, etc. When the application is restarted by the session manager, you can restore the settings.</db:para>
<db:para><db:link xlink:href="qsessionmanager.xml">QSessionManager</db:link> provides an interface between the application and the platform's session manager. In Qt, session management requests for action are handled by the two signals <db:link xlink:href="qguiapplication.xml#commitDataRequest">QGuiApplication::commitDataRequest</db:link>() and <db:link xlink:href="qguiapplication.xml#saveStateRequest">QGuiApplication::saveStateRequest</db:link>(). Both provide a reference to a <db:link xlink:href="qsessionmanager.xml">QSessionManager</db:link> object as argument. The session manager can only be accessed in slots invoked by these signals.</db:para>
<db:warning>
<db:para>If you use <db:link xlink:href="qsessionmanager.xml">QSessionManager</db:link>, you should disable fallback session management: <db:link xlink:href="qguiapplication.xml#setFallbackSessionManagementEnabled">QGuiApplication::setFallbackSessionManagementEnabled</db:link>().</db:para>
</db:warning>
<db:para>No user interaction is possible <db:emphasis>unless</db:emphasis> the application gets explicit permission from the session manager. You ask for permission by calling <db:link xlink:href="qsessionmanager.xml#allowsInteraction">allowsInteraction</db:link>() or, if it is really urgent, <db:link xlink:href="qsessionmanager.xml#allowsErrorInteraction">allowsErrorInteraction</db:link>(). Qt does not enforce this, but the session manager may.</db:para>
<db:para>You can try to abort the shutdown process by calling <db:link xlink:href="qsessionmanager.xml#cancel">cancel</db:link>().</db:para>
<db:para>For sophisticated session managers provided on Unix/X11, <db:link xlink:href="qsessionmanager.xml">QSessionManager</db:link> offers further possibilities to fine-tune an application's session management behavior: <db:link xlink:href="qsessionmanager.xml#setRestartCommand">setRestartCommand</db:link>(), <db:link xlink:href="qsessionmanager.xml#setDiscardCommand">setDiscardCommand</db:link>(), <db:link xlink:href="qsessionmanager.xml#setRestartHint">setRestartHint</db:link>(), <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>(), <db:link xlink:href="qsessionmanager.xml#requestPhase2">requestPhase2</db:link>(). See the respective function descriptions for further details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link></db:member>
<db:member><db:link xlink:href="session.xml">Session Management</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RestartHint-enum">
<db:title>enum QSessionManager::RestartHint</db:title>
<db:para>This enum type defines the circumstances under which this application wants to be restarted by the session manager. The current values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsessionmanager.xml">QSessionManager</db:link></db:emphasis>::RestartIfRunning</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>If the application is still running when the session is shut down, it wants to be restarted at the start of the next session.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsessionmanager.xml">QSessionManager</db:link></db:emphasis>::RestartAnyway</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The application wants to be started at the start of the next session, no matter what. (This is useful for utilities that run just after startup and then quit.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsessionmanager.xml">QSessionManager</db:link></db:emphasis>::RestartImmediately</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The application wants to be started immediately whenever it is not running.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsessionmanager.xml">QSessionManager</db:link></db:emphasis>::RestartNever</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The application does not want to be restarted automatically.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default hint is <db:code>RestartIfRunning</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="allowsErrorInteraction">
<db:title>bool QSessionManager::allowsErrorInteraction()</db:title>
<db:para>Returns <db:code>true</db:code> if error interaction is permitted; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This is similar to <db:link xlink:href="qsessionmanager.xml#allowsInteraction">allowsInteraction</db:link>(), but also enables the application to tell the user about any errors that occur. Session managers may give error interaction requests higher priority, which means that it is more likely that an error interaction is permitted. However, you are still not guaranteed that the session manager will allow interaction.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsessionmanager.xml#allowsInteraction">allowsInteraction</db:link>()</db:member>
<db:member><db:link xlink:href="qsessionmanager.xml#release">release</db:link>()</db:member>
<db:member><db:link xlink:href="qsessionmanager.xml#cancel">cancel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="allowsInteraction">
<db:title>bool QSessionManager::allowsInteraction()</db:title>
<db:para>Asks the session manager for permission to interact with the user. Returns true if interaction is permitted; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The rationale behind this mechanism is to make it possible to synchronize user interaction during a shutdown. Advanced session managers may ask all applications simultaneously to commit their data, resulting in a much faster shutdown.</db:para>
<db:para>When the interaction is completed we strongly recommend releasing the user interaction semaphore with a call to <db:link xlink:href="qsessionmanager.xml#release">release</db:link>(). This way, other applications may get the chance to interact with the user while your application is still busy saving data. (The semaphore is implicitly released when the application exits.)</db:para>
<db:para>If the user decides to cancel the shutdown process during the interaction phase, you must tell the session manager that this has happened by calling <db:link xlink:href="qsessionmanager.xml#cancel">cancel</db:link>().</db:para>
<db:para>Here's an example of how an application's <db:link xlink:href="qguiapplication.xml#commitDataRequest">QGuiApplication::commitDataRequest</db:link>() might be implemented:</db:para>
<db:programlisting language="cpp">MyMainWidget::MyMainWidget(QWidget *parent)
    :QWidget(parent)
{
    QGuiApplication::setFallbackSessionManagementEnabled(false);
    connect(qApp, SIGNAL(commitDataRequest(QSessionManager)), SLOT(commitData(QSessionManager)));
}

void MyMainWidget::commitData(QSessionManager&amp; manager)
{
    if (manager.allowsInteraction()) {
        int ret = QMessageBox::warning(
                    mainWindow,
                    tr(&quot;My Application&quot;),
                    tr(&quot;Save changes to document?&quot;),
                    QMessageBox::Save | QMessageBox::Discard | QMessageBox::Cancel);

        switch (ret) {
        case QMessageBox::Save:
            manager.release();
            if (!saveDocument())
                manager.cancel();
            break;
        case QMessageBox::Discard:
            break;
        case QMessageBox::Cancel:
        default:
            manager.cancel();
        }
    } else {
        // we did not get permission to interact, then
        // do something reasonable instead
    }
}
</db:programlisting>
<db:para>If an error occurred within the application while saving its data, you may want to try <db:link xlink:href="qsessionmanager.xml#allowsErrorInteraction">allowsErrorInteraction</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#commitDataRequest">QGuiApplication::commitDataRequest</db:link>()</db:member>
<db:member><db:link xlink:href="qsessionmanager.xml#release">release</db:link>()</db:member>
<db:member><db:link xlink:href="qsessionmanager.xml#cancel">cancel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cancel">
<db:title>void QSessionManager::cancel()</db:title>
<db:para>Tells the session manager to cancel the shutdown process. Applications should not call this function without asking the user first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsessionmanager.xml#allowsInteraction">allowsInteraction</db:link>()</db:member>
<db:member><db:link xlink:href="qsessionmanager.xml#allowsErrorInteraction">allowsErrorInteraction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="discardCommand">
<db:title>QStringList QSessionManager::discardCommand() const</db:title>
<db:para>Returns the currently set discard command.</db:para>
<db:para>To iterate over the list, you can use the <db:link xlink:href="containers.xml#the-foreach-keyword">foreach</db:link> pseudo-keyword:</db:para>
<db:programlisting language="cpp">foreach (const QString &amp;command, mySession.discardCommand())
    do_something(command);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsessionmanager.xml#setDiscardCommand">setDiscardCommand</db:link>()</db:member>
<db:member><db:link xlink:href="qsessionmanager.xml#restartCommand">restartCommand</db:link>()</db:member>
<db:member><db:link xlink:href="qsessionmanager.xml#setRestartCommand">setRestartCommand</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isPhase2">
<db:title>bool QSessionManager::isPhase2() const</db:title>
<db:para>Returns <db:code>true</db:code> if the session manager is currently performing a second session management phase; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsessionmanager.xml#requestPhase2">requestPhase2</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="release">
<db:title>void QSessionManager::release()</db:title>
<db:para>Releases the session manager's interaction semaphore after an interaction phase.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsessionmanager.xml#allowsInteraction">allowsInteraction</db:link>()</db:member>
<db:member><db:link xlink:href="qsessionmanager.xml#allowsErrorInteraction">allowsErrorInteraction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestPhase2">
<db:title>void QSessionManager::requestPhase2()</db:title>
<db:para>Requests a second session management phase for the application. The application may then return immediately from the <db:link xlink:href="qguiapplication.xml#commitDataRequest">QGuiApplication::commitDataRequest</db:link>() or <db:link xlink:href="qguiapplication.xml#saveStateRequest">QApplication::saveStateRequest</db:link>() function, and they will be called again once most or all other applications have finished their session management.</db:para>
<db:para>The two phases are useful for applications such as the X11 window manager that need to store information about another application's windows and therefore have to wait until these applications have completed their respective session management tasks.</db:para>
<db:note>
<db:para>If another application has requested a second phase it may get called before, simultaneously with, or after your application's second phase.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsessionmanager.xml#isPhase2">isPhase2</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="restartCommand">
<db:title>QStringList QSessionManager::restartCommand() const</db:title>
<db:para>Returns the currently set restart command.</db:para>
<db:para>To iterate over the list, you can use the <db:link xlink:href="containers.xml#the-foreach-keyword">foreach</db:link> pseudo-keyword:</db:para>
<db:programlisting language="cpp">foreach (const QString &amp;command, mySession.restartCommand())
    do_something(command);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsessionmanager.xml#setRestartCommand">setRestartCommand</db:link>()</db:member>
<db:member><db:link xlink:href="qsessionmanager.xml#restartHint">restartHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="restartHint">
<db:title>QSessionManager::RestartHint QSessionManager::restartHint() const</db:title>
<db:para>Returns the application's current restart hint. The default is <db:code>RestartIfRunning</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsessionmanager.xml#setRestartHint">setRestartHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sessionId">
<db:title>QString QSessionManager::sessionId() const</db:title>
<db:para>Returns the identifier of the current session.</db:para>
<db:para>If the application has been restored from an earlier session, this identifier is the same as it was in the earlier session.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsessionmanager.xml#sessionKey">sessionKey</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#sessionId">QGuiApplication::sessionId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sessionKey">
<db:title>QString QSessionManager::sessionKey() const</db:title>
<db:para>Returns the session key in the current session.</db:para>
<db:para>If the application has been restored from an earlier session, this key is the same as it was when the previous session ended.</db:para>
<db:para>The session key changes with every call of commitData() or saveState().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsessionmanager.xml#sessionId">sessionId</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#sessionKey">QGuiApplication::sessionKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDiscardCommand">
<db:title>void QSessionManager::setDiscardCommand(const QStringList &amp;<db:emphasis>command</db:emphasis>)</db:title>
<db:para>Sets the discard command to the given <db:code role="parameter">command</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsessionmanager.xml#discardCommand">discardCommand</db:link>()</db:member>
<db:member><db:link xlink:href="qsessionmanager.xml#setRestartCommand">setRestartCommand</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setManagerProperty">
<db:title>void QSessionManager::setManagerProperty(const QString &amp;<db:emphasis>name</db:emphasis>, const QStringList &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Low-level write access to the application's identification and state record are kept in the session manager.</db:para>
<db:para>The property called <db:code role="parameter">name</db:code> has its value set to the string list <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="setManagerProperty-1">
<db:title>void QSessionManager::setManagerProperty(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Low-level write access to the application's identification and state records are kept in the session manager.</db:para>
<db:para>The property called <db:code role="parameter">name</db:code> has its value set to the string <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="setRestartCommand">
<db:title>void QSessionManager::setRestartCommand(const QStringList &amp;<db:emphasis>command</db:emphasis>)</db:title>
<db:para>If the session manager is capable of restoring sessions it will execute <db:code role="parameter">command</db:code> in order to restore the application. The command defaults to</db:para>
<db:programlisting language="cpp">appname -session id
</db:programlisting>
<db:para>The <db:code>-session</db:code> option is mandatory; otherwise <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> cannot tell whether it has been restored or what the current session identifier is. See <db:link xlink:href="qguiapplication.xml#isSessionRestored">QGuiApplication::isSessionRestored</db:link>() and <db:link xlink:href="qguiapplication.xml#sessionId">QGuiApplication::sessionId</db:link>() for details.</db:para>
<db:para>If your application is very simple, it may be possible to store the entire application state in additional command line options. This is usually a very bad idea because command lines are often limited to a few hundred bytes. Instead, use <db:link xlink:href="qsettings.xml">QSettings</db:link>, temporary files, or a database for this purpose. By marking the data with the unique <db:link xlink:href="qsessionmanager.xml#sessionId">sessionId</db:link>(), you will be able to restore the application in a future session.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsessionmanager.xml#restartCommand">restartCommand</db:link>()</db:member>
<db:member><db:link xlink:href="qsessionmanager.xml#setDiscardCommand">setDiscardCommand</db:link>()</db:member>
<db:member><db:link xlink:href="qsessionmanager.xml#setRestartHint">setRestartHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRestartHint">
<db:title>void QSessionManager::setRestartHint(QSessionManager::RestartHint <db:emphasis>hint</db:emphasis>)</db:title>
<db:para>Sets the application's restart hint to <db:code role="parameter">hint</db:code>. On application startup, the hint is set to <db:code>RestartIfRunning</db:code>.</db:para>
<db:note>
<db:para>These flags are only hints, a session manager may or may not respect them.</db:para>
</db:note>
<db:para>We recommend setting the restart hint in <db:link xlink:href="qguiapplication.xml#saveStateRequest">QGuiApplication::saveStateRequest</db:link>() because most session managers perform a checkpoint shortly after an application's startup.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsessionmanager.xml#restartHint">restartHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
