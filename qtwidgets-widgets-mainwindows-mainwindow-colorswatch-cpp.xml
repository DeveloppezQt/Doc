<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Main Window</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Main Window example shows Qt's extensive support for tool bars, dock windows, menus, and other standard application features.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;colorswatch.h&quot;

#include &amp;lt;QAction&amp;gt;
#include &amp;lt;QtEvents&amp;gt;
#include &amp;lt;QFrame&amp;gt;
#include &amp;lt;QMainWindow&amp;gt;
#include &amp;lt;QMenu&amp;gt;
#include &amp;lt;QPainter&amp;gt;
#include &amp;lt;QImage&amp;gt;
#include &amp;lt;QColor&amp;gt;
#include &amp;lt;QDialog&amp;gt;
#include &amp;lt;QDialogButtonBox&amp;gt;
#include &amp;lt;QGridLayout&amp;gt;
#include &amp;lt;QSignalBlocker&amp;gt;
#include &amp;lt;QSpinBox&amp;gt;
#include &amp;lt;QLabel&amp;gt;
#include &amp;lt;QPainterPath&amp;gt;
#include &amp;lt;QPushButton&amp;gt;
#include &amp;lt;QHBoxLayout&amp;gt;
#include &amp;lt;QBitmap&amp;gt;
#include &amp;lt;QtDebug&amp;gt;

#undef DEBUG_SIZEHINTS

QColor bgColorForName(const QString &amp;amp;name)
{
    if (name == &quot;Black&quot;)
        return QColor(&quot;#D8D8D8&quot;);
    if (name == &quot;White&quot;)
        return QColor(&quot;#F1F1F1&quot;);
    if (name == &quot;Red&quot;)
        return QColor(&quot;#F1D8D8&quot;);
    if (name == &quot;Green&quot;)
        return QColor(&quot;#D8E4D8&quot;);
    if (name == &quot;Blue&quot;)
        return QColor(&quot;#D8D8F1&quot;);
    if (name == &quot;Yellow&quot;)
        return QColor(&quot;#F1F0D8&quot;);
    return QColor(name).light(110);
}

QColor fgColorForName(const QString &amp;amp;name)
{
    if (name == &quot;Black&quot;)
        return QColor(&quot;#6C6C6C&quot;);
    if (name == &quot;White&quot;)
        return QColor(&quot;#F8F8F8&quot;);
    if (name == &quot;Red&quot;)
        return QColor(&quot;#F86C6C&quot;);
    if (name == &quot;Green&quot;)
        return QColor(&quot;#6CB26C&quot;);
    if (name == &quot;Blue&quot;)
        return QColor(&quot;#6C6CF8&quot;);
    if (name == &quot;Yellow&quot;)
        return QColor(&quot;#F8F76C&quot;);
    return QColor(name);
}

class ColorDock : public QFrame
{
    Q_OBJECT
public:
    explicit ColorDock(const QString &amp;amp;c, QWidget *parent);

    QSize sizeHint() const override { return szHint; }
    QSize minimumSizeHint() const override { return minSzHint; }

    void setCustomSizeHint(const QSize &amp;amp;size);

public slots:
    void changeSizeHints();

protected:
    void paintEvent(QPaintEvent *) override;

private:
    const QString color;
    QSize szHint;
    QSize minSzHint;
};

ColorDock::ColorDock(const QString &amp;amp;c, QWidget *parent)
    : QFrame(parent)
    , color(c)
    , szHint(-1, -1)
    , minSzHint(125, 75)
{
    QFont font = this-&amp;gt;font();
    font.setPointSize(8);
    setFont(font);
}

void ColorDock::paintEvent(QPaintEvent *)
{
    QPainter p(this);
    p.setRenderHint(QPainter::Antialiasing);
    p.fillRect(rect(), bgColorForName(color));

    p.save();

    extern void render_qt_text(QPainter *, int, int, const QColor &amp;amp;);
    render_qt_text(&amp;amp;p, width(), height(), fgColorForName(color));

    p.restore();

#ifdef DEBUG_SIZEHINTS
    p.setRenderHint(QPainter::Antialiasing, false);

    QSize sz = size();
    QSize szHint = sizeHint();
    QSize minSzHint = minimumSizeHint();
    QSize maxSz = maximumSize();
    QString text = QString::fromLatin1(&quot;sz: %1x%2\nszHint: %3x%4\nminSzHint: %5x%6\n&quot;
                                        &quot;maxSz: %8x%9&quot;)
                    .arg(sz.width()).arg(sz.height())
                    .arg(szHint.width()).arg(szHint.height())
                    .arg(minSzHint.width()).arg(minSzHint.height())
                    .arg(maxSz.width()).arg(maxSz.height());

    QRect r = fontMetrics().boundingRect(rect(), Qt::AlignLeft|Qt::AlignTop, text);
    r.adjust(-2, -2, 1, 1);
    p.translate(4, 4);
    QColor bg = Qt::yellow;
    bg.setAlpha(120);
    p.setBrush(bg);
    p.setPen(Qt::black);
    p.drawRect(r);
    p.drawText(rect(), Qt::AlignLeft|Qt::AlignTop, text);
#endif // DEBUG_SIZEHINTS
}

static QSpinBox *createSpinBox(int value, QWidget *parent, int max = 1000)
{
    QSpinBox *result = new QSpinBox(parent);
    result-&amp;gt;setMinimum(-1);
    result-&amp;gt;setMaximum(max);
    result-&amp;gt;setValue(value);
    return result;
}

void ColorDock::changeSizeHints()
{
    QDialog dialog(this);
    dialog.setWindowFlags(dialog.windowFlags() &amp;amp; ~Qt::WindowContextHelpButtonHint);
    dialog.setWindowTitle(color);

    QVBoxLayout *topLayout = new QVBoxLayout(&amp;amp;dialog);

    QGridLayout *inputLayout = new QGridLayout();
    topLayout-&amp;gt;addLayout(inputLayout);

    inputLayout-&amp;gt;addWidget(new QLabel(tr(&quot;Size Hint:&quot;), &amp;amp;dialog), 0, 0);
    inputLayout-&amp;gt;addWidget(new QLabel(tr(&quot;Min Size Hint:&quot;), &amp;amp;dialog), 1, 0);
    inputLayout-&amp;gt;addWidget(new QLabel(tr(&quot;Max Size:&quot;), &amp;amp;dialog), 2, 0);
    inputLayout-&amp;gt;addWidget(new QLabel(tr(&quot;Dock Widget Max Size:&quot;), &amp;amp;dialog), 3, 0);

    QSpinBox *szHintW = createSpinBox(szHint.width(), &amp;amp;dialog);
    inputLayout-&amp;gt;addWidget(szHintW, 0, 1);
    QSpinBox *szHintH = createSpinBox(szHint.height(), &amp;amp;dialog);
    inputLayout-&amp;gt;addWidget(szHintH, 0, 2);

    QSpinBox *minSzHintW = createSpinBox(minSzHint.width(), &amp;amp;dialog);
    inputLayout-&amp;gt;addWidget(minSzHintW, 1, 1);
    QSpinBox *minSzHintH = createSpinBox(minSzHint.height(), &amp;amp;dialog);
    inputLayout-&amp;gt;addWidget(minSzHintH, 1, 2);

    QSize maxSz = maximumSize();
    QSpinBox *maxSzW = createSpinBox(maxSz.width(), &amp;amp;dialog, QWIDGETSIZE_MAX);
    inputLayout-&amp;gt;addWidget(maxSzW, 2, 1);
    QSpinBox *maxSzH = createSpinBox(maxSz.height(), &amp;amp;dialog, QWIDGETSIZE_MAX);
    inputLayout-&amp;gt;addWidget(maxSzH, 2, 2);

    QSize dwMaxSz = parentWidget()-&amp;gt;maximumSize();
    QSpinBox *dwMaxSzW = createSpinBox(dwMaxSz.width(), &amp;amp;dialog, QWIDGETSIZE_MAX);
    inputLayout-&amp;gt;addWidget(dwMaxSzW, 3, 1);
    QSpinBox *dwMaxSzH = createSpinBox(dwMaxSz.height(), &amp;amp;dialog, QWIDGETSIZE_MAX);
    inputLayout-&amp;gt;addWidget(dwMaxSzH, 3, 2);

    inputLayout-&amp;gt;setColumnStretch(1, 1);
    inputLayout-&amp;gt;setColumnStretch(2, 1);

    topLayout-&amp;gt;addStretch();

    QDialogButtonBox *buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel, this);
    connect(buttonBox, &amp;amp;QDialogButtonBox::rejected, &amp;amp;dialog, &amp;amp;QDialog::reject);
    connect(buttonBox, &amp;amp;QDialogButtonBox::accepted, &amp;amp;dialog, &amp;amp;QDialog::reject);

    topLayout-&amp;gt;addWidget(buttonBox);

    if (dialog.exec() != QDialog::Accepted)
        return;

    szHint = QSize(szHintW-&amp;gt;value(), szHintH-&amp;gt;value());
    minSzHint = QSize(minSzHintW-&amp;gt;value(), minSzHintH-&amp;gt;value());
    maxSz = QSize(maxSzW-&amp;gt;value(), maxSzH-&amp;gt;value());
    setMaximumSize(maxSz);
    dwMaxSz = QSize(dwMaxSzW-&amp;gt;value(), dwMaxSzH-&amp;gt;value());
    parentWidget()-&amp;gt;setMaximumSize(dwMaxSz);
    updateGeometry();
    update();
}

void ColorDock::setCustomSizeHint(const QSize &amp;amp;size)
{
    if (szHint != size) {
        szHint = size;
        updateGeometry();
    }
}

ColorSwatch::ColorSwatch(const QString &amp;amp;colorName, QMainWindow *parent, Qt::WindowFlags flags)
    : QDockWidget(parent, flags), mainWindow(parent)
{
    setObjectName(colorName + QLatin1String(&quot; Dock Widget&quot;));
    setWindowTitle(objectName() + QLatin1String(&quot; [*]&quot;));

    ColorDock *swatch = new ColorDock(colorName, this);
    swatch-&amp;gt;setFrameStyle(QFrame::Box | QFrame::Sunken);

    setWidget(swatch);

    closableAction = new QAction(tr(&quot;Closable&quot;), this);
    closableAction-&amp;gt;setCheckable(true);
    connect(closableAction, &amp;amp;QAction::triggered, this, &amp;amp;ColorSwatch::changeClosable);

    movableAction = new QAction(tr(&quot;Movable&quot;), this);
    movableAction-&amp;gt;setCheckable(true);
    connect(movableAction, &amp;amp;QAction::triggered, this, &amp;amp;ColorSwatch::changeMovable);

    floatableAction = new QAction(tr(&quot;Floatable&quot;), this);
    floatableAction-&amp;gt;setCheckable(true);
    connect(floatableAction, &amp;amp;QAction::triggered, this, &amp;amp;ColorSwatch::changeFloatable);

    verticalTitleBarAction = new QAction(tr(&quot;Vertical title bar&quot;), this);
    verticalTitleBarAction-&amp;gt;setCheckable(true);
    connect(verticalTitleBarAction, &amp;amp;QAction::triggered,
            this, &amp;amp;ColorSwatch::changeVerticalTitleBar);

    floatingAction = new QAction(tr(&quot;Floating&quot;), this);
    floatingAction-&amp;gt;setCheckable(true);
    connect(floatingAction, &amp;amp;QAction::triggered, this, &amp;amp;ColorSwatch::changeFloating);

    allowedAreasActions = new QActionGroup(this);
    allowedAreasActions-&amp;gt;setExclusive(false);

    allowLeftAction = new QAction(tr(&quot;Allow on Left&quot;), this);
    allowLeftAction-&amp;gt;setCheckable(true);
    connect(allowLeftAction, &amp;amp;QAction::triggered, this, &amp;amp;ColorSwatch::allowLeft);

    allowRightAction = new QAction(tr(&quot;Allow on Right&quot;), this);
    allowRightAction-&amp;gt;setCheckable(true);
    connect(allowRightAction, &amp;amp;QAction::triggered, this, &amp;amp;ColorSwatch::allowRight);

    allowTopAction = new QAction(tr(&quot;Allow on Top&quot;), this);
    allowTopAction-&amp;gt;setCheckable(true);
    connect(allowTopAction, &amp;amp;QAction::triggered, this, &amp;amp;ColorSwatch::allowTop);

    allowBottomAction = new QAction(tr(&quot;Allow on Bottom&quot;), this);
    allowBottomAction-&amp;gt;setCheckable(true);
    connect(allowBottomAction, &amp;amp;QAction::triggered, this, &amp;amp;ColorSwatch::allowBottom);

    allowedAreasActions-&amp;gt;addAction(allowLeftAction);
    allowedAreasActions-&amp;gt;addAction(allowRightAction);
    allowedAreasActions-&amp;gt;addAction(allowTopAction);
    allowedAreasActions-&amp;gt;addAction(allowBottomAction);

    areaActions = new QActionGroup(this);
    areaActions-&amp;gt;setExclusive(true);

    leftAction = new QAction(tr(&quot;Place on Left&quot;) , this);
    leftAction-&amp;gt;setCheckable(true);
    connect(leftAction, &amp;amp;QAction::triggered, this, &amp;amp;ColorSwatch::placeLeft);

    rightAction = new QAction(tr(&quot;Place on Right&quot;) , this);
    rightAction-&amp;gt;setCheckable(true);
    connect(rightAction, &amp;amp;QAction::triggered, this, &amp;amp;ColorSwatch::placeRight);

    topAction = new QAction(tr(&quot;Place on Top&quot;) , this);
    topAction-&amp;gt;setCheckable(true);
    connect(topAction, &amp;amp;QAction::triggered, this, &amp;amp;ColorSwatch::placeTop);

    bottomAction = new QAction(tr(&quot;Place on Bottom&quot;) , this);
    bottomAction-&amp;gt;setCheckable(true);
    connect(bottomAction, &amp;amp;QAction::triggered, this, &amp;amp;ColorSwatch::placeBottom);

    areaActions-&amp;gt;addAction(leftAction);
    areaActions-&amp;gt;addAction(rightAction);
    areaActions-&amp;gt;addAction(topAction);
    areaActions-&amp;gt;addAction(bottomAction);

    connect(movableAction, &amp;amp;QAction::triggered, areaActions, &amp;amp;QActionGroup::setEnabled);

    connect(movableAction, &amp;amp;QAction::triggered, allowedAreasActions, &amp;amp;QActionGroup::setEnabled);

    connect(floatableAction, &amp;amp;QAction::triggered, floatingAction, &amp;amp;QAction::setEnabled);

    connect(floatingAction, &amp;amp;QAction::triggered, floatableAction, &amp;amp;QAction::setDisabled);
    connect(movableAction, &amp;amp;QAction::triggered, floatableAction, &amp;amp;QAction::setEnabled);

    tabMenu = new QMenu(this);
    tabMenu-&amp;gt;setTitle(tr(&quot;Tab into&quot;));
    connect(tabMenu, &amp;amp;QMenu::triggered, this, &amp;amp;ColorSwatch::tabInto);

    splitHMenu = new QMenu(this);
    splitHMenu-&amp;gt;setTitle(tr(&quot;Split horizontally into&quot;));
    connect(splitHMenu, &amp;amp;QMenu::triggered, this, &amp;amp;ColorSwatch::splitInto);

    splitVMenu = new QMenu(this);
    splitVMenu-&amp;gt;setTitle(tr(&quot;Split vertically into&quot;));
    connect(splitVMenu, &amp;amp;QMenu::triggered, this, &amp;amp;ColorSwatch::splitInto);

    QAction *windowModifiedAction = new QAction(tr(&quot;Modified&quot;), this);
    windowModifiedAction-&amp;gt;setCheckable(true);
    windowModifiedAction-&amp;gt;setChecked(false);
    connect(windowModifiedAction, &amp;amp;QAction::toggled, this, &amp;amp;QWidget::setWindowModified);

    menu = new QMenu(colorName, this);
    menu-&amp;gt;addAction(toggleViewAction());
    menu-&amp;gt;addAction(tr(&quot;Raise&quot;), this, &amp;amp;QWidget::raise);
    menu-&amp;gt;addAction(tr(&quot;Change Size Hints...&quot;), swatch, &amp;amp;ColorDock::changeSizeHints);

    menu-&amp;gt;addSeparator();
    menu-&amp;gt;addAction(closableAction);
    menu-&amp;gt;addAction(movableAction);
    menu-&amp;gt;addAction(floatableAction);
    menu-&amp;gt;addAction(floatingAction);
    menu-&amp;gt;addAction(verticalTitleBarAction);
    menu-&amp;gt;addSeparator();
    menu-&amp;gt;addActions(allowedAreasActions-&amp;gt;actions());
    menu-&amp;gt;addSeparator();
    menu-&amp;gt;addActions(areaActions-&amp;gt;actions());
    menu-&amp;gt;addSeparator();
    menu-&amp;gt;addMenu(splitHMenu);
    menu-&amp;gt;addMenu(splitVMenu);
    menu-&amp;gt;addMenu(tabMenu);
    menu-&amp;gt;addSeparator();
    menu-&amp;gt;addAction(windowModifiedAction);

    connect(menu, &amp;amp;QMenu::aboutToShow, this, &amp;amp;ColorSwatch::updateContextMenu);

    if (colorName == QLatin1String(&quot;Black&quot;)) {
        leftAction-&amp;gt;setShortcut(Qt::CTRL | Qt::Key_W);
        rightAction-&amp;gt;setShortcut(Qt::CTRL | Qt::Key_E);
        toggleViewAction()-&amp;gt;setShortcut(Qt::CTRL | Qt::Key_R);
    }
}

void ColorSwatch::updateContextMenu()
{
    const Qt::DockWidgetArea area = mainWindow-&amp;gt;dockWidgetArea(this);
    const Qt::DockWidgetAreas areas = allowedAreas();

    closableAction-&amp;gt;setChecked(features() &amp;amp; QDockWidget::DockWidgetClosable);
    if (windowType() == Qt::Drawer) {
        floatableAction-&amp;gt;setEnabled(false);
        floatingAction-&amp;gt;setEnabled(false);
        movableAction-&amp;gt;setEnabled(false);
        verticalTitleBarAction-&amp;gt;setChecked(false);
    } else {
        floatableAction-&amp;gt;setChecked(features() &amp;amp; QDockWidget::DockWidgetFloatable);
        floatingAction-&amp;gt;setChecked(isWindow());
        // done after floating, to get 'floatable' correctly initialized
        movableAction-&amp;gt;setChecked(features() &amp;amp; QDockWidget::DockWidgetMovable);
        verticalTitleBarAction
            -&amp;gt;setChecked(features() &amp;amp; QDockWidget::DockWidgetVerticalTitleBar);
    }

    allowLeftAction-&amp;gt;setChecked(isAreaAllowed(Qt::LeftDockWidgetArea));
    allowRightAction-&amp;gt;setChecked(isAreaAllowed(Qt::RightDockWidgetArea));
    allowTopAction-&amp;gt;setChecked(isAreaAllowed(Qt::TopDockWidgetArea));
    allowBottomAction-&amp;gt;setChecked(isAreaAllowed(Qt::BottomDockWidgetArea));

    if (allowedAreasActions-&amp;gt;isEnabled()) {
        allowLeftAction-&amp;gt;setEnabled(area != Qt::LeftDockWidgetArea);
        allowRightAction-&amp;gt;setEnabled(area != Qt::RightDockWidgetArea);
        allowTopAction-&amp;gt;setEnabled(area != Qt::TopDockWidgetArea);
        allowBottomAction-&amp;gt;setEnabled(area != Qt::BottomDockWidgetArea);
    }

    {
        const QSignalBlocker blocker(leftAction);
        leftAction-&amp;gt;setChecked(area == Qt::LeftDockWidgetArea);
    }
    {
        const QSignalBlocker blocker(rightAction);
        rightAction-&amp;gt;setChecked(area == Qt::RightDockWidgetArea);
    }
    {
        const QSignalBlocker blocker(topAction);
        topAction-&amp;gt;setChecked(area == Qt::TopDockWidgetArea);
    }
    {
        const QSignalBlocker blocker(bottomAction);
        bottomAction-&amp;gt;setChecked(area == Qt::BottomDockWidgetArea);
    }

    if (areaActions-&amp;gt;isEnabled()) {
        leftAction-&amp;gt;setEnabled(areas &amp;amp; Qt::LeftDockWidgetArea);
        rightAction-&amp;gt;setEnabled(areas &amp;amp; Qt::RightDockWidgetArea);
        topAction-&amp;gt;setEnabled(areas &amp;amp; Qt::TopDockWidgetArea);
        bottomAction-&amp;gt;setEnabled(areas &amp;amp; Qt::BottomDockWidgetArea);
    }

    tabMenu-&amp;gt;clear();
    splitHMenu-&amp;gt;clear();
    splitVMenu-&amp;gt;clear();
    QList&amp;lt;ColorSwatch*&amp;gt; dock_list = mainWindow-&amp;gt;findChildren&amp;lt;ColorSwatch*&amp;gt;();
    foreach (ColorSwatch *dock, dock_list) {
        tabMenu-&amp;gt;addAction(dock-&amp;gt;objectName());
        splitHMenu-&amp;gt;addAction(dock-&amp;gt;objectName());
        splitVMenu-&amp;gt;addAction(dock-&amp;gt;objectName());
    }
}

static ColorSwatch *findByName(const QMainWindow *mainWindow, const QString &amp;amp;name)
{
    foreach (ColorSwatch *dock, mainWindow-&amp;gt;findChildren&amp;lt;ColorSwatch*&amp;gt;()) {
        if (name == dock-&amp;gt;objectName())
            return dock;
    }
    return nullptr;
}

void ColorSwatch::splitInto(QAction *action)
{
    ColorSwatch *target = findByName(mainWindow, action-&amp;gt;text());
    if (!target)
        return;

    const Qt::Orientation o = action-&amp;gt;parent() == splitHMenu
        ? Qt::Horizontal : Qt::Vertical;
    mainWindow-&amp;gt;splitDockWidget(target, this, o);
}

void ColorSwatch::tabInto(QAction *action)
{
    if (ColorSwatch *target = findByName(mainWindow, action-&amp;gt;text()))
        mainWindow-&amp;gt;tabifyDockWidget(target, this);
}

#ifndef QT_NO_CONTEXTMENU
void ColorSwatch::contextMenuEvent(QContextMenuEvent *event)
{
    event-&amp;gt;accept();
    menu-&amp;gt;exec(event-&amp;gt;globalPos());
}
#endif // QT_NO_CONTEXTMENU

void ColorSwatch::resizeEvent(QResizeEvent *e)
{
    if (BlueTitleBar *btb = qobject_cast&amp;lt;BlueTitleBar*&amp;gt;(titleBarWidget()))
        btb-&amp;gt;updateMask();

    QDockWidget::resizeEvent(e);
}

void ColorSwatch::allow(Qt::DockWidgetArea area, bool a)
{
    Qt::DockWidgetAreas areas = allowedAreas();
    areas = a ? areas | area : areas &amp;amp; ~area;
    setAllowedAreas(areas);

    if (areaActions-&amp;gt;isEnabled()) {
        leftAction-&amp;gt;setEnabled(areas &amp;amp; Qt::LeftDockWidgetArea);
        rightAction-&amp;gt;setEnabled(areas &amp;amp; Qt::RightDockWidgetArea);
        topAction-&amp;gt;setEnabled(areas &amp;amp; Qt::TopDockWidgetArea);
        bottomAction-&amp;gt;setEnabled(areas &amp;amp; Qt::BottomDockWidgetArea);
    }
}

void ColorSwatch::place(Qt::DockWidgetArea area, bool p)
{
    if (!p)
        return;

    mainWindow-&amp;gt;addDockWidget(area, this);

    if (allowedAreasActions-&amp;gt;isEnabled()) {
        allowLeftAction-&amp;gt;setEnabled(area != Qt::LeftDockWidgetArea);
        allowRightAction-&amp;gt;setEnabled(area != Qt::RightDockWidgetArea);
        allowTopAction-&amp;gt;setEnabled(area != Qt::TopDockWidgetArea);
        allowBottomAction-&amp;gt;setEnabled(area != Qt::BottomDockWidgetArea);
    }
}

void ColorSwatch::setCustomSizeHint(const QSize &amp;amp;size)
{
    if (ColorDock *dock = qobject_cast&amp;lt;ColorDock*&amp;gt;(widget()))
        dock-&amp;gt;setCustomSizeHint(size);
}

void ColorSwatch::changeClosable(bool on)
{ setFeatures(on ? features() | DockWidgetClosable : features() &amp;amp; ~DockWidgetClosable); }

void ColorSwatch::changeMovable(bool on)
{ setFeatures(on ? features() | DockWidgetMovable : features() &amp;amp; ~DockWidgetMovable); }

void ColorSwatch::changeFloatable(bool on)
{ setFeatures(on ? features() | DockWidgetFloatable : features() &amp;amp; ~DockWidgetFloatable); }

void ColorSwatch::changeFloating(bool floating)
{ setFloating(floating); }

void ColorSwatch::allowLeft(bool a)
{ allow(Qt::LeftDockWidgetArea, a); }

void ColorSwatch::allowRight(bool a)
{ allow(Qt::RightDockWidgetArea, a); }

void ColorSwatch::allowTop(bool a)
{ allow(Qt::TopDockWidgetArea, a); }

void ColorSwatch::allowBottom(bool a)
{ allow(Qt::BottomDockWidgetArea, a); }

void ColorSwatch::placeLeft(bool p)
{ place(Qt::LeftDockWidgetArea, p); }

void ColorSwatch::placeRight(bool p)
{ place(Qt::RightDockWidgetArea, p); }

void ColorSwatch::placeTop(bool p)
{ place(Qt::TopDockWidgetArea, p); }

void ColorSwatch::placeBottom(bool p)
{ place(Qt::BottomDockWidgetArea, p); }

void ColorSwatch::changeVerticalTitleBar(bool on)
{
    setFeatures(on ? features() | DockWidgetVerticalTitleBar
                    : features() &amp;amp; ~DockWidgetVerticalTitleBar);
}

QSize BlueTitleBar::minimumSizeHint() const
{
    QDockWidget *dw = qobject_cast&amp;lt;QDockWidget*&amp;gt;(parentWidget());
    Q_ASSERT(dw != 0);
    QSize result(leftPm.width() + rightPm.width(), centerPm.height());
    if (dw-&amp;gt;features() &amp;amp; QDockWidget::DockWidgetVerticalTitleBar)
        result.transpose();
    return result;
}

BlueTitleBar::BlueTitleBar(QWidget *parent)
    : QWidget(parent)
    , leftPm(QPixmap(&quot;:/res/titlebarLeft.png&quot;))
    , centerPm(QPixmap(&quot;:/res/titlebarCenter.png&quot;))
    , rightPm(QPixmap(&quot;:/res/titlebarRight.png&quot;))
{
}

void BlueTitleBar::paintEvent(QPaintEvent*)
{
    QPainter painter(this);
    QRect rect = this-&amp;gt;rect();

    QDockWidget *dw = qobject_cast&amp;lt;QDockWidget*&amp;gt;(parentWidget());
    Q_ASSERT(dw != 0);

    if (dw-&amp;gt;features() &amp;amp; QDockWidget::DockWidgetVerticalTitleBar) {
        QSize s = rect.size();
        s.transpose();
        rect.setSize(s);

        painter.translate(rect.left(), rect.top() + rect.width());
        painter.rotate(-90);
        painter.translate(-rect.left(), -rect.top());
    }

    painter.drawPixmap(rect.topLeft(), leftPm);
    painter.drawPixmap(rect.topRight() - QPoint(rightPm.width() - 1, 0), rightPm);
    QBrush brush(centerPm);
    painter.fillRect(rect.left() + leftPm.width(), rect.top(),
                        rect.width() - leftPm.width() - rightPm.width(),
                        centerPm.height(), centerPm);
}

void BlueTitleBar::mouseReleaseEvent(QMouseEvent *event)
{
    QPoint pos = event-&amp;gt;pos();

    QRect rect = this-&amp;gt;rect();

    QDockWidget *dw = qobject_cast&amp;lt;QDockWidget*&amp;gt;(parentWidget());
    Q_ASSERT(dw != 0);

    if (dw-&amp;gt;features() &amp;amp; QDockWidget::DockWidgetVerticalTitleBar) {
        QPoint p = pos;
        pos.setX(rect.left() + rect.bottom() - p.y());
        pos.setY(rect.top() + p.x() - rect.left());

        QSize s = rect.size();
        s.transpose();
        rect.setSize(s);
    }

    const int buttonRight = 7;
    const int buttonWidth = 20;
    int right = rect.right() - pos.x();
    int button = (right - buttonRight)/buttonWidth;
    switch (button) {
        case 0:
            event-&amp;gt;accept();
            dw-&amp;gt;close();
            break;
        case 1:
            event-&amp;gt;accept();
            dw-&amp;gt;setFloating(!dw-&amp;gt;isFloating());
            break;
        case 2: {
            event-&amp;gt;accept();
            QDockWidget::DockWidgetFeatures features = dw-&amp;gt;features();
            if (features &amp;amp; QDockWidget::DockWidgetVerticalTitleBar)
                features &amp;amp;= ~QDockWidget::DockWidgetVerticalTitleBar;
            else
                features |= QDockWidget::DockWidgetVerticalTitleBar;
            dw-&amp;gt;setFeatures(features);
            break;
        }
        default:
            event-&amp;gt;ignore();
            break;
    }
}

void BlueTitleBar::updateMask()
{
    QDockWidget *dw = qobject_cast&amp;lt;QDockWidget*&amp;gt;(parent());
    Q_ASSERT(dw != 0);

    QRect rect = dw-&amp;gt;rect();
    QPixmap bitmap(dw-&amp;gt;size());

    {
        QPainter painter(&amp;amp;bitmap);

        // initialize to transparent
        painter.fillRect(rect, Qt::color0);

        QRect contents = rect;
        contents.setTopLeft(geometry().bottomLeft());
        contents.setRight(geometry().right());
        contents.setBottom(contents.bottom()-y());
        painter.fillRect(contents, Qt::color1);

        // let's paint the titlebar
        QRect titleRect = this-&amp;gt;geometry();

        if (dw-&amp;gt;features() &amp;amp; QDockWidget::DockWidgetVerticalTitleBar) {
            QSize s = rect.size();
            s.transpose();
            rect.setSize(s);

            QSize s2 = size();
            s2.transpose();
            titleRect.setSize(s2);

            painter.translate(rect.left(), rect.top() + rect.width());
            painter.rotate(-90);
            painter.translate(-rect.left(), -rect.top());
        }

        contents.setTopLeft(titleRect.bottomLeft());
        contents.setRight(titleRect.right());
        contents.setBottom(rect.bottom()-y());

        QRect rect = titleRect;

        painter.drawPixmap(rect.topLeft(), leftPm.mask());
        painter.fillRect(rect.left() + leftPm.width(), rect.top(),
            rect.width() - leftPm.width() - rightPm.width(),
            centerPm.height(), Qt::color1);
        painter.drawPixmap(rect.topRight() - QPoint(rightPm.width() - 1, 0), rightPm.mask());

        painter.fillRect(contents, Qt::color1);
    }

    dw-&amp;gt;setMask(bitmap);
}

#include &quot;colorswatch.moc&quot;

</db:programlisting>
</db:article>
