<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D Physics Cooking</db:title>
<db:productname>QtQuick3DPhysics</db:productname>
<db:edition>Qt Quick 3D Physics | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Physics Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An explanation of how Qt Quick 3D Physics handles meshes and cooking.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>When using a mesh as a collision shape it needs to be processed and converted into a data format for efficient collision detection. This is referred to as 'cooking'. There are three shape types that need to be cooked before they can be used, namely <db:link xlink:href="qml-qtquick3d-physics-convexmeshshape.xml">ConvexMeshShape</db:link>, <db:link xlink:href="qml-qtquick3d-physics-trianglemeshshape.xml">TriangleMeshShape</db:link> and <db:link xlink:href="qml-qtquick3d-physics-heightfieldshape.xml">HeightFieldShape</db:link>. The cooking happens automatically on the first frame of the simulation when using any of these shapes. This cooking can incur a noticeable performance cost so to enable faster loading times it is possible to precook the meshes and load them directly. There are two ways to do this, namely using a cache directory or the cooker tool.</db:para>
<db:section xml:id="cache-directory">
<db:title>Cache directory</db:title>
<db:para>To use the cache directory set the <db:code>QT_PHYSICS_CACHE_PATH</db:code> environment variable to a directory of choice. When the application runs for the first time all used meshes will be cooked and stored in this directory. The following times the application runs, the cooked meshes will be read from disk instead of being cooked.</db:para>
</db:section>
<db:section xml:id="cooker-tool">
<db:title>Cooker tool</db:title>
<db:para>The other way is to use the <db:code>cooker</db:code> tool. Build it, then simply call the tool with the mesh or heightfield image as the input argument:</db:para>
<db:programlisting language="cpp">cooker input.mesh
</db:programlisting>
<db:para>or</db:para>
<db:programlisting language="cpp">cooker input.png
</db:programlisting>
<db:para>If the input is a mesh it will generate two files:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>input.cooked.tri</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>input.cooked.cvx</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>One file is a cooked triangle mesh and the other a cooked convex mesh. These can then simply be used as the sources of <db:link xlink:href="qml-qtquick3d-physics-trianglemeshshape.xml#source-prop">TriangleMeshShape::source</db:link> and <db:link xlink:href="qml-qtquick3d-physics-convexmeshshape.xml#source-prop">ConvexMeshShape::source</db:link> and the meshes will be loaded without any need for cooking. Similiarily, if the input is an image file a heightfield is generated called <db:code>input.cooked.hf</db:code> which can then be loaded by referencing it in the <db:link xlink:href="qml-qtquick3d-physics-heightfieldshape.xml#source-prop">HeightFieldShape::source</db:link> property.</db:para>
</db:section>
</db:article>
