<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCameraInfo Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcamerainfo.xml">QCameraInfo</db:link> class provides general information about camera devices.</db:para>
<db:para>This class was introduced in Qt 5.3.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCameraInfo</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCameraInfo is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_camera</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcamerainfo.xml">QCameraInfo</db:link> lets you query for camera devices that are currently available on the system.</db:para>
<db:para>The static functions <db:link xlink:href="qcamerainfo.xml#defaultCamera">defaultCamera</db:link>() and <db:link xlink:href="qcamerainfo.xml#availableCameras">availableCameras</db:link>() provide you a list of all available cameras.</db:para>
<db:para>This example prints the name of all available cameras:</db:para>
<db:programlisting language="cpp">QList&amp;lt;QCameraInfo&amp;gt; cameras = QCameraInfo::availableCameras();
foreach (const QCameraInfo &amp;amp;cameraInfo, cameras)
    qDebug() &amp;lt;&amp;lt; cameraInfo.deviceName();
</db:programlisting>
<db:para>A <db:link xlink:href="qcamerainfo.xml">QCameraInfo</db:link> can be used to construct a <db:link xlink:href="qcamera.xml">QCamera</db:link>. The following example instantiates a <db:link xlink:href="qcamera.xml">QCamera</db:link> whose camera device is named 'mycamera':</db:para>
<db:programlisting language="cpp">QList&amp;lt;QCameraInfo&amp;gt; cameras = QCameraInfo::availableCameras();
foreach (const QCameraInfo &amp;amp;cameraInfo, cameras) {
    if (cameraInfo.deviceName() == &quot;mycamera&quot;)
        camera = new QCamera(cameraInfo);
}
</db:programlisting>
<db:para>You can also use <db:link xlink:href="qcamerainfo.xml">QCameraInfo</db:link> to get general information about a camera device such as description, physical position on the system, or camera sensor orientation.</db:para>
<db:programlisting language="cpp">QCamera myCamera;
QCameraInfo cameraInfo(myCamera);

if (cameraInfo.position() == QCamera::FrontFace)
    qDebug() &amp;lt;&amp;lt; &quot;The camera is on the front face of the hardware system.&quot;;
else if (cameraInfo.position() == QCamera::BackFace)
    qDebug() &amp;lt;&amp;lt; &quot;The camera is on the back face of the hardware system.&quot;;

qDebug() &amp;lt;&amp;lt; &quot;The camera sensor orientation is &quot; &amp;lt;&amp;lt; cameraInfo.orientation() &amp;lt;&amp;lt; &quot; degrees.&quot;;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamera.xml">QCamera</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCameraInfo">
<db:title>[explicit] QCameraInfo::QCameraInfo(const QByteArray &amp;<db:emphasis>name</db:emphasis> = QByteArray())</db:title>
<db:constructorsynopsis>
<db:methodname>QCameraInfo</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCameraInfo(const QByteArray &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a camera info object from a camera device <db:code role="parameter">name</db:code>.</db:para>
<db:para>If no such device exists, the <db:link xlink:href="qcamerainfo.xml">QCameraInfo</db:link> object will be invalid and <db:link xlink:href="qcamerainfo.xml#isNull">isNull</db:link>() will return true.</db:para>
</db:section>
<db:section xml:id="QCameraInfo-1">
<db:title>[explicit] QCameraInfo::QCameraInfo(const QCamera &amp;<db:emphasis>camera</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCameraInfo</db:methodname>
<db:methodparam>
<db:type>const QCamera &amp;</db:type>
<db:parameter>camera</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCameraInfo(const QCamera &amp;camera)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a camera info object for <db:code role="parameter">camera</db:code>.</db:para>
<db:para>You can use it to query information about the <db:code role="parameter">camera</db:code> object passed as argument.</db:para>
<db:para>If the <db:code role="parameter">camera</db:code> is invalid, for example when no camera device is available on the system, the <db:link xlink:href="qcamerainfo.xml">QCameraInfo</db:link> object will be invalid and <db:link xlink:href="qcamerainfo.xml#isNull">isNull</db:link>() will return true.</db:para>
</db:section>
<db:section xml:id="QCameraInfo-2">
<db:title>QCameraInfo::QCameraInfo(const QCameraInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCameraInfo</db:methodname>
<db:methodparam>
<db:type>const QCameraInfo &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QCameraInfo(const QCameraInfo &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QCameraInfo">
<db:title>QCameraInfo::~QCameraInfo()</db:title>
<db:destructorsynopsis>
<db:methodname>~QCameraInfo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCameraInfo()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qcamerainfo.xml">QCameraInfo</db:link>.</db:para>
</db:section>
<db:section xml:id="availableCameras">
<db:title>[static] QList&lt;QCameraInfo&gt; QCameraInfo::availableCameras(QCamera::Position <db:emphasis>position</db:emphasis> = QCamera::UnspecifiedPosition)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QCameraInfo&gt;</db:type>
<db:methodname>availableCameras</db:methodname>
<db:methodparam>
<db:type>QCamera::Position</db:type>
<db:parameter>position</db:parameter>
<db:initializer>QCamera::UnspecifiedPosition</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QCameraInfo&gt; availableCameras(QCamera::Position position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of available cameras on the system which are located at <db:code role="parameter">position</db:code>.</db:para>
<db:para>If <db:code role="parameter">position</db:code> is not specified or if the value is <db:link xlink:href="qcamera.xml#Position-enum">QCamera::UnspecifiedPosition</db:link>, a list of all available cameras will be returned.</db:para>
</db:section>
<db:section xml:id="defaultCamera">
<db:title>[static] QCameraInfo QCameraInfo::defaultCamera()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QCameraInfo</db:type>
<db:methodname>defaultCamera</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCameraInfo defaultCamera()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default camera on the system.</db:para>
<db:para>The returned object should be checked using <db:link xlink:href="qcamerainfo.xml#isNull">isNull</db:link>() before being used, in case there is no default camera or no cameras at all.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamerainfo.xml#availableCameras">availableCameras</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="description">
<db:title>QString QCameraInfo::description() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>description</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString description() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the human-readable description of the camera.</db:para>
</db:section>
<db:section xml:id="deviceName">
<db:title>QString QCameraInfo::deviceName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>deviceName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString deviceName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device name of the camera</db:para>
<db:para>This is a unique ID to identify the camera and may not be human-readable.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QCameraInfo::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qcamerainfo.xml">QCameraInfo</db:link> is null or invalid.</db:para>
</db:section>
<db:section xml:id="orientation">
<db:title>int QCameraInfo::orientation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>orientation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int orientation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the physical orientation of the camera sensor.</db:para>
<db:para>The value is the orientation angle (clockwise, in steps of 90 degrees) of the camera sensor in relation to the display in its natural orientation.</db:para>
<db:para>You can show the camera image in the correct orientation by rotating it by this value in the anti-clockwise direction.</db:para>
<db:para>For example, suppose a mobile device which is naturally in portrait orientation. The back-facing camera is mounted in landscape. If the top side of the camera sensor is aligned with the right edge of the screen in natural orientation, the value should be 270. If the top side of a front-facing camera sensor is aligned with the right of the screen, the value should be 90.</db:para>
</db:section>
<db:section xml:id="position">
<db:title>QCamera::Position QCameraInfo::position() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCamera::Position</db:type>
<db:methodname>position</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCamera::Position position() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the physical position of the camera on the hardware system.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QCameraInfo::operator!=(const QCameraInfo &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QCameraInfo &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QCameraInfo &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qcamerainfo.xml">QCameraInfo</db:link> is different from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QCameraInfo &amp;QCameraInfo::operator=(const QCameraInfo &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCameraInfo &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QCameraInfo &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QCameraInfo &amp; operator=(const QCameraInfo &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:link xlink:href="qcamerainfo.xml">QCameraInfo</db:link> object to be equal to <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QCameraInfo::operator==(const QCameraInfo &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QCameraInfo &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QCameraInfo &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qcamerainfo.xml">QCameraInfo</db:link> is equal to <db:code role="parameter">other</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
