<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Map Viewer (QML)</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Map Viewer example shows how to display and interact with a map, search for an address, and find driving directions.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/mapviewer.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This is a large example covering many basic uses of maps, positioning, and navigation services in Qt Location. This page is divided into sections covering each of these areas of functionality with snippets from the code.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
<db:para>The example can work with any of the available geo services plugins. However, some plugins may require additional <db:link xlink:href="qml-qtlocation-pluginparameter.xml">plugin parameters</db:link> in order to function correctly. <db:link xlink:href="qml-qtlocation-pluginparameter.xml">Plugin parameters</db:link> can be passed on the command line using the <db:code>--plugin</db:code> argument, which takes the form:</db:para>
<db:programlisting language="cpp" role="bad">--plugin.&amp;lt;parameter name&amp;gt; &amp;lt;parameter value&amp;gt;
</db:programlisting>
<db:para>Refer to the documentation for each of the geo services plugins for details on what plugin parameters they support. The default plugin used by this example is <db:link xlink:href="location-plugin-osm.xml">Qt Location Open Street Map Plugin</db:link>, which does not require any parameters.</db:para>
</db:section>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>QML types shown in this example:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Displaying a map</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-map.xml">Map</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-mapview.xml">MapView</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-coordinate.xml">coordinate</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Finding an address</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-geocodemodel.xml">GeocodeModel</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-mapcircle.xml">MapCircle</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Directions and travel routes</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-routemodel.xml">RouteModel</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-maproute.xml">MapRoute</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="displaying-a-map">
<db:title>Displaying a Map</db:title>
<db:para>Drawing a map on-screen is accomplished using the <db:link xlink:href="qml-qtlocation-mapview.xml">MapView</db:link> type, as shown below.</db:para>
<db:programlisting language="qml">MapView {
    id: view
    map.zoomLevel: (maximumZoomLevel - minimumZoomLevel)/2
    map.center {
        // The Qt Company in Oslo
        latitude: 59.9485
        longitude: 10.7686
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtlocation-mapview.xml">MapView</db:link> consists of a <db:link xlink:href="qml-qtlocation-mapview.xml#map-prop">map</db:link> and extends it for basic navigation capabilities. In this example, we give the map an initial center <db:link xlink:href="qml-coordinate.xml">coordinate</db:link> with a set latitude and longitude. We also set the initial zoom level to 50% (halfway between the maximum and minimum).</db:para>
</db:section>
<db:section xml:id="finding-an-address-geocoding">
<db:title>Finding an Address (Geocoding)</db:title>
<db:para>To locate a certain address or place on the map uses a process called geocoding. In order to perform a geocode operation, we first need to adjust our Map object to be able to receive the result.</db:para>
<db:para>Receiving results of geocoding is done through a <db:link xlink:href="qml-qtlocation-geocodemodel.xml">GeocodeModel</db:link>:</db:para>
<db:programlisting language="qml">GeocodeModel {
    id: geocodeModel
    plugin: view.map.plugin
    onStatusChanged: {
        if ((status == GeocodeModel.Ready) || (status == GeocodeModel.Error))
            view.geocodeFinished()
    }
    onLocationsChanged:
    {
        if (count === 1) {
            view.map.center.latitude = get(0).coordinate.latitude
            view.map.center.longitude = get(0).coordinate.longitude
        }
    }
}
</db:programlisting>
<db:para>To display the contents of the <db:link xlink:href="qml-qtlocation-geocodemodel.xml">GeocodeModel</db:link> we use a <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link>:</db:para>
<db:programlisting language="qml">MapItemView {
    parent: view.map
    model: geocodeModel
    delegate: pointDelegate
}
</db:programlisting>
<db:para><db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link> uses an object called a <db:code>delegate</db:code> to act as a template for the items it creates. This can contain any map object desired, but in this case we show a <db:link xlink:href="qml-qtlocation-mapquickitem.xml">MapQuickItem</db:link> that contains an image of a marker:</db:para>
<db:programlisting language="qml">Component {
    id: pointDelegate

    MapQuickItem {
        id: point
        parent: view.map
        coordinate: locationData.coordinate

        sourceItem: Image {
            id: pointMarker
            source: &quot;../resources/marker_blue.png&quot;
}
}
}
</db:programlisting>
<db:para>With these three objects, we have enough to receive Geocode responses and display them on our Map. The final piece is to send the actual Geocode request.</db:para>
<db:para>To send a geocode request, first we create an <db:link xlink:href="qml-qtpositioning-address.xml">Address</db:link> object, and fill it in with the desired parameters.</db:para>
<db:programlisting language="qml">Address {
    id :fromAddress
    street: &quot;Sandakerveien 116&quot;
    city: &quot;Oslo&quot;
    country: &quot;Norway&quot;
    state : &quot;&quot;
    postalCode: &quot;0484&quot;
}
</db:programlisting>
<db:para>Then we set <db:code>geocodeModel.query</db:code> to the filled in <db:link xlink:href="qml-qtpositioning-address.xml">Address</db:link>, and call update() on the <db:link xlink:href="qml-qtlocation-geocodemodel.xml">GeocodeModel</db:link>.</db:para>
<db:programlisting language="qml">// send the geocode request
geocodeModel.query = fromAddress
geocodeModel.update()
</db:programlisting>
</db:section>
<db:section xml:id="directions-and-travel-routes">
<db:title>Directions and Travel Routes</db:title>
<db:para>Similar to the <db:link xlink:href="qml-qtlocation-geocodemodel.xml">GeocodeModel</db:link>, Qt Location also features the <db:link xlink:href="qml-qtlocation-routemodel.xml">RouteModel</db:link> type, which allows information about routes (for example driving directions) between two or more points, to be received and used with a <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link>.</db:para>
<db:para>Here again, we instantiate the <db:link xlink:href="qml-qtlocation-routemodel.xml">RouteModel</db:link> as a property of our Map:</db:para>
<db:programlisting language="qml">RouteModel {
    id: routeModel
    plugin : view.map.plugin
    query:  RouteQuery {
        id: routeQuery
    }
    onStatusChanged: {
        if (status == RouteModel.Ready) {
            switch (count) {
            case 0:
                // technically not an error
                view.routeError()
                break
            case 1:
                view.showRouteList()
                break
            }
        } else if (status == RouteModel.Error) {
            view.routeError()
        }
    }
}
</db:programlisting>
<db:para>To display the contents of a model to the user, we need a view. Once again we will use a <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link>, to display the Routes as objects on the Map:</db:para>
<db:programlisting language="qml">MapItemView {
    parent: view.map
    model: routeModel
    delegate: routeDelegate
</db:programlisting>
<db:para>To act as a template for the objects we wish the view to create, we create a delegate component:</db:para>
<db:programlisting language="qml">Component {
    id: routeDelegate

    MapRoute {
        id: route
        route: routeData
        line.color: &quot;#46a2da&quot;
        line.width: 5
        smooth: true
        opacity: 0.8
</db:programlisting>
<db:para>With the model, view and delegate now complete, the only missing component is some kind of control over the model to begin the Route request process. In the simplest case, we can fill out a Route request using two already available <db:link xlink:href="qml-coordinate.xml">coordinates</db:link>:</db:para>
<db:programlisting language="qml">property variant fromCoordinate: QtPositioning.coordinate(59.9483, 10.7695)
property variant toCoordinate: QtPositioning.coordinate(59.9645, 10.671)
</db:programlisting>
<db:para>In the next snippet, we show how to set up the request object and instruct the model to update. We also instruct the map to center on the start coordinate for our routing request.</db:para>
<db:programlisting language="qml">// clear away any old data in the query
routeQuery.clearWaypoints();
// add the start and end coords as waypoints on the route
routeQuery.addWaypoint(startCoordinate)
routeQuery.addWaypoint(endCoordinate)
routeQuery.travelModes = RouteQuery.CarTravel
routeQuery.routeOptimizations = RouteQuery.FastestRoute
routeModel.update();
// center the map on the start coord
view.map.center = startCoordinate;
</db:programlisting>
<db:para>This is all that is required to display a Route on the Map. However, it is also useful to be able to retrieve the written directions and explanation of the travel route. In the example, these are displayed in a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> element. To create this content, we use a standard <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#models">ListModel</db:link> and <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> pair. The data in the <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#models">ListModel</db:link> is built from the routeModel's output:</db:para>
<db:programlisting language="qml">ListView {
    interactive: true
    model: ListModel { id: routeInfoModel }
    header: RouteListHeader {}
    delegate:  RouteListDelegate{
        routeIndex.text: index + 1
        routeInstruction.text: instruction
        routeDistance.text: distance
    }
}
</db:programlisting>
<db:para>Inside the <db:link xlink:href="qml-qtlocation-routemodel.xml">RouteModel</db:link>, as you can see above, we add an <db:link xlink:href="qml-qtlocation-routemodel.xml#status-prop">onStatusChanged</db:link> handler, which calls the <db:code>showRouteList()</db:code> which updates the <db:code>routeInfoModel</db:code>:</db:para>
<db:programlisting language="qml">routeInfoModel.clear()
if (routeModel.count &amp;gt; 0) {
    for (var i = 0; i &amp;lt; routeModel.get(0).segments.length; i++) {
        routeInfoModel.append({
            &quot;instruction&quot;: routeModel.get(0).segments[i].maneuver.instructionText,
             &quot;distance&quot;: Helper.formatDistance(routeModel.get(0).segments[i].maneuver.distanceToNextInstruction)
        });
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtlocation.git/tree/examples/location/mapviewer?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
