<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Sliders Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Sliders example shows how to use the different types of sliders available in Qt: <db:link xlink:href="qslider.xml">QSlider</db:link>, <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link> and <db:link xlink:href="qdial.xml">QDial</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt provides three types of slider-like widgets: <db:link xlink:href="qslider.xml">QSlider</db:link>, <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link> and <db:link xlink:href="qdial.xml">QDial</db:link>. They all inherit most of their functionality from <db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link>, and can in theory replace each other in an application since the differences only concern their look and feel. This example shows what they look like, how they work and how their behavior and appearance can be manipulated through their properties.</db:para>
<db:para>The example also demonstrates how signals and slots can be used to synchronize the behavior of two or more widgets.</db:para>
<db:figure>
<db:title>Screenshot of the Sliders example</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sliders-example.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:para>The Sliders example consists of two classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>SlidersGroup is a custom widget. It combines a <db:link xlink:href="qslider.xml">QSlider</db:link>, a <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link> and a <db:link xlink:href="qdial.xml">QDial</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Window is the main widget combining a <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> and a <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link>. In this example, the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link> provides a stack of two SlidersGroup widgets. The <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> contain several widgets that control the behavior of the slider-like widgets.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>First we will review the Window class, then we will take a look at the SlidersGroup class.</db:para>
<db:section xml:id="window-class-definition">
<db:title>Window Class Definition</db:title>
<db:programlisting language="cpp">class Window : public QWidget
{
    Q_OBJECT

public:
    Window();

private:
    void createControls(const QString &amp;amp;title);

    SlidersGroup *horizontalSliders;
    SlidersGroup *verticalSliders;
    QStackedWidget *stackedWidget;

    QGroupBox *controlsGroup;
    QLabel *minimumLabel;
    QLabel *maximumLabel;
    QLabel *valueLabel;
    QCheckBox *invertedAppearance;
    QCheckBox *invertedKeyBindings;
    QSpinBox *minimumSpinBox;
    QSpinBox *maximumSpinBox;
    QSpinBox *valueSpinBox;
    QComboBox *orientationCombo;
};
</db:programlisting>
<db:para>The Window class inherits from <db:link xlink:href="qwidget.xml">QWidget</db:link>. It displays the slider widgets and allows the user to set their minimum, maximum and current values and to customize their appearance, key bindings and orientation. We use a private createControls() function to create the widgets that provide these controlling mechanisms and to connect them to the slider widgets.</db:para>
</db:section>
<db:section xml:id="window-class-implementation">
<db:title>Window Class Implementation</db:title>
<db:programlisting language="cpp">Window::Window()
{
    horizontalSliders = new SlidersGroup(Qt::Horizontal, tr(&quot;Horizontal&quot;));
    verticalSliders = new SlidersGroup(Qt::Vertical, tr(&quot;Vertical&quot;));

    stackedWidget = new QStackedWidget;
    stackedWidget-&amp;gt;addWidget(horizontalSliders);
    stackedWidget-&amp;gt;addWidget(verticalSliders);

    createControls(tr(&quot;Controls&quot;));
</db:programlisting>
<db:para>In the constructor we first create the two SlidersGroup widgets that display the slider widgets horizontally and vertically, and add them to the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link>. <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link> provides a stack of widgets where only the top widget is visible. With createControls() we create a connection from a controlling widget to the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link>, making the user able to choose between horizontal and vertical orientation of the slider widgets. The rest of the controlling mechanisms is implemented by the same function call.</db:para>
<db:programlisting language="cpp">    connect(horizontalSliders, SIGNAL(valueChanged(int)),
            verticalSliders, SLOT(setValue(int)));
    connect(verticalSliders, SIGNAL(valueChanged(int)),
            valueSpinBox, SLOT(setValue(int)));
    connect(valueSpinBox, SIGNAL(valueChanged(int)),
            horizontalSliders, SLOT(setValue(int)));

    QHBoxLayout *layout = new QHBoxLayout;
    layout-&amp;gt;addWidget(controlsGroup);
    layout-&amp;gt;addWidget(stackedWidget);
    setLayout(layout);

    minimumSpinBox-&amp;gt;setValue(0);
    maximumSpinBox-&amp;gt;setValue(20);
    valueSpinBox-&amp;gt;setValue(5);

    setWindowTitle(tr(&quot;Sliders&quot;));
}
</db:programlisting>
<db:para>Then we connect the horizontalSliders, verticalSliders and valueSpinBox to each other, so that the slider widgets and the control widget will behave synchronized when the current value of one of them changes. The valueChanged() signal is emitted with the new value as argument. The setValue() slot sets the current value of the widget to the new value, and emits valueChanged() if the new value is different from the old one.</db:para>
<db:para>We put the group of control widgets and the stacked widget in a horizontal layout before we initialize the minimum, maximum and current values. The initialization of the current value will propagate to the slider widgets through the connection we made between valueSpinBox and the SlidersGroup widgets. The minimum and maximum values propagate through the connections we created with createControls().</db:para>
<db:programlisting language="cpp">void Window::createControls(const QString &amp;amp;title)
{
    controlsGroup = new QGroupBox(title);

    minimumLabel = new QLabel(tr(&quot;Minimum value:&quot;));
    maximumLabel = new QLabel(tr(&quot;Maximum value:&quot;));
    valueLabel = new QLabel(tr(&quot;Current value:&quot;));

    invertedAppearance = new QCheckBox(tr(&quot;Inverted appearance&quot;));
    invertedKeyBindings = new QCheckBox(tr(&quot;Inverted key bindings&quot;));
</db:programlisting>
<db:para>In the private createControls() function, we let a <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> (controlsGroup) display the control widgets. A group box can provide a frame, a title and a keyboard shortcut, and displays various other widgets inside itself. The group of control widgets is composed by two checkboxes, three spin boxes (with labels) and one combobox.</db:para>
<db:para>After creating the labels, we create the two checkboxes. Checkboxes are typically used to represent features in an application that can be enabled or disabled. When invertedAppearance is enabled, the slider values are inverted. The table below shows the appearance for the different slider-like widgets:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
</db:th>
<db:th colspan="2">
<db:para><db:link xlink:href="qslider.xml">QSlider</db:link></db:para>
</db:th>
<db:th colspan="2">
<db:para><db:link xlink:href="qscrollbar.xml">QScrollBar</db:link></db:para>
</db:th>
<db:th colspan="2">
<db:para><db:link xlink:href="qdial.xml">QDial</db:link></db:para>
</db:th>
</db:tr>
<db:tr>
<db:th>
</db:th>
<db:th>
<db:para>Normal</db:para>
</db:th>
<db:th>
<db:para>Inverted</db:para>
</db:th>
<db:th>
<db:para>Normal</db:para>
</db:th>
<db:th>
<db:para>Inverted</db:para>
</db:th>
<db:th>
<db:para>Normal</db:para>
</db:th>
<db:th>
<db:para>Inverted</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link></db:para>
</db:td>
<db:td>
<db:para>Left to right</db:para>
</db:td>
<db:td>
<db:para>Right to left</db:para>
</db:td>
<db:td>
<db:para>Left to right</db:para>
</db:td>
<db:td>
<db:para>Right to left</db:para>
</db:td>
<db:td>
<db:para>Clockwise</db:para>
</db:td>
<db:td>
<db:para>Counterclockwise</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link></db:para>
</db:td>
<db:td>
<db:para>Bottom to top</db:para>
</db:td>
<db:td>
<db:para>Top to bottom</db:para>
</db:td>
<db:td>
<db:para>Top to bottom</db:para>
</db:td>
<db:td>
<db:para>Bottom to top</db:para>
</db:td>
<db:td>
<db:para>Clockwise</db:para>
</db:td>
<db:td>
<db:para>Counterclockwise</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>It is common to invert the appearance of a vertical <db:link xlink:href="qslider.xml">QSlider</db:link>. A vertical slider that controls volume, for example, will typically go from bottom to top (the non-inverted appearance), whereas a vertical slider that controls the position of an object on screen might go from top to bottom, because screen coordinates go from top to bottom.</db:para>
<db:para>When the invertedKeyBindings option is enabled (corresponding to the <db:link xlink:href="qabstractslider.xml#invertedControls-prop">QAbstractSlider::invertedControls</db:link> property), the slider's wheel and key events are inverted. The normal key bindings mean that scrolling the mouse wheel &quot;up&quot; or using keys like page up will increase the slider's current value towards its maximum. Inverted, the same wheel and key events will move the value toward the slider's minimum. This can be useful if the <db:emphasis>appearance</db:emphasis> of a slider is inverted: Some users might expect the keys to still work the same way on the value, whereas others might expect <db:guilabel>PageUp</db:guilabel> to mean &quot;up&quot; on the screen.</db:para>
<db:para>Note that for horizontal and vertical scroll bars, the key bindings are inverted by default: <db:guilabel>PageDown</db:guilabel> increases the current value, and <db:guilabel>PageUp</db:guilabel> decreases it.</db:para>
<db:programlisting language="cpp">    minimumSpinBox = new QSpinBox;
    minimumSpinBox-&amp;gt;setRange(-100, 100);
    minimumSpinBox-&amp;gt;setSingleStep(1);

    maximumSpinBox = new QSpinBox;
    maximumSpinBox-&amp;gt;setRange(-100, 100);
    maximumSpinBox-&amp;gt;setSingleStep(1);

    valueSpinBox = new QSpinBox;
    valueSpinBox-&amp;gt;setRange(-100, 100);
    valueSpinBox-&amp;gt;setSingleStep(1);

    orientationCombo = new QComboBox;
    orientationCombo-&amp;gt;addItem(tr(&quot;Horizontal slider-like widgets&quot;));
    orientationCombo-&amp;gt;addItem(tr(&quot;Vertical slider-like widgets&quot;));
</db:programlisting>
<db:para>Then we create the spin boxes. <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> allows the user to choose a value by clicking the up and down buttons or pressing the <db:guilabel>Up</db:guilabel> and <db:guilabel>Down</db:guilabel> keys on the keyboard to modify the value currently displayed. The user can also type in the value manually. The spin boxes control the minimum, maximum and current values for the <db:link xlink:href="qslider.xml">QSlider</db:link>, <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link>, and <db:link xlink:href="qdial.xml">QDial</db:link> widgets.</db:para>
<db:para>We create a <db:link xlink:href="qcombobox.xml">QComboBox</db:link> that allows the user to choose the orientation of the slider widgets. The <db:link xlink:href="qcombobox.xml">QComboBox</db:link> widget is a combined button and popup list. It provides a means of presenting a list of options to the user in a way that takes up the minimum amount of screen space.</db:para>
<db:programlisting language="cpp">    connect(orientationCombo, SIGNAL(activated(int)),
            stackedWidget, SLOT(setCurrentIndex(int)));
    connect(minimumSpinBox, SIGNAL(valueChanged(int)),
            horizontalSliders, SLOT(setMinimum(int)));
    connect(minimumSpinBox, SIGNAL(valueChanged(int)),
            verticalSliders, SLOT(setMinimum(int)));
    connect(maximumSpinBox, SIGNAL(valueChanged(int)),
            horizontalSliders, SLOT(setMaximum(int)));
    connect(maximumSpinBox, SIGNAL(valueChanged(int)),
            verticalSliders, SLOT(setMaximum(int)));
    connect(invertedAppearance, SIGNAL(toggled(bool)),
            horizontalSliders, SLOT(invertAppearance(bool)));
    connect(invertedAppearance, SIGNAL(toggled(bool)),
            verticalSliders, SLOT(invertAppearance(bool)));
    connect(invertedKeyBindings, SIGNAL(toggled(bool)),
            horizontalSliders, SLOT(invertKeyBindings(bool)));
    connect(invertedKeyBindings, SIGNAL(toggled(bool)),
            verticalSliders, SLOT(invertKeyBindings(bool)));

    QGridLayout *controlsLayout = new QGridLayout;
    controlsLayout-&amp;gt;addWidget(minimumLabel, 0, 0);
    controlsLayout-&amp;gt;addWidget(maximumLabel, 1, 0);
    controlsLayout-&amp;gt;addWidget(valueLabel, 2, 0);
    controlsLayout-&amp;gt;addWidget(minimumSpinBox, 0, 1);
    controlsLayout-&amp;gt;addWidget(maximumSpinBox, 1, 1);
    controlsLayout-&amp;gt;addWidget(valueSpinBox, 2, 1);
    controlsLayout-&amp;gt;addWidget(invertedAppearance, 0, 2);
    controlsLayout-&amp;gt;addWidget(invertedKeyBindings, 1, 2);
    controlsLayout-&amp;gt;addWidget(orientationCombo, 3, 0, 1, 3);
    controlsGroup-&amp;gt;setLayout(controlsLayout);
}
</db:programlisting>
<db:para>We synchronize the behavior of the control widgets and the slider widgets through their signals and slots. We connect each control widget to both the horizontal and vertical group of slider widgets. We also connect orientationCombo to the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link>, so that the correct &quot;page&quot; is shown. Finally, we lay out the control widgets in a <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> within the controlsGroup group box.</db:para>
</db:section>
<db:section xml:id="slidersgroup-class-definition">
<db:title>SlidersGroup Class Definition</db:title>
<db:programlisting language="cpp">class SlidersGroup : public QGroupBox
{
    Q_OBJECT

public:
    SlidersGroup(Qt::Orientation orientation, const QString &amp;amp;title,
                 QWidget *parent = 0);

signals:
    void valueChanged(int value);

public slots:
    void setValue(int value);
    void setMinimum(int value);
    void setMaximum(int value);
    void invertAppearance(bool invert);
    void invertKeyBindings(bool invert);

private:
    QSlider *slider;
    QScrollBar *scrollBar;
    QDial *dial;
};
</db:programlisting>
<db:para>The SlidersGroup class inherits from <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link>. It provides a frame and a title, and contains a <db:link xlink:href="qslider.xml">QSlider</db:link>, a <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link> and a <db:link xlink:href="qdial.xml">QDial</db:link>.</db:para>
<db:para>We provide a valueChanged() signal and a public setValue() slot with equivalent functionality to the ones in <db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link> and <db:link xlink:href="qspinbox.xml">QSpinBox</db:link>. In addition, we implement several other public slots to set the minimum and maximum value, and invert the slider widgets' appearance as well as key bindings.</db:para>
</db:section>
<db:section xml:id="slidersgroup-class-implementation">
<db:title>SlidersGroup Class Implementation</db:title>
<db:programlisting language="cpp">SlidersGroup::SlidersGroup(Qt::Orientation orientation, const QString &amp;amp;title,
                           QWidget *parent)
    : QGroupBox(title, parent)
{
    slider = new QSlider(orientation);
    slider-&amp;gt;setFocusPolicy(Qt::StrongFocus);
    slider-&amp;gt;setTickPosition(QSlider::TicksBothSides);
    slider-&amp;gt;setTickInterval(10);
    slider-&amp;gt;setSingleStep(1);

    scrollBar = new QScrollBar(orientation);
    scrollBar-&amp;gt;setFocusPolicy(Qt::StrongFocus);

    dial = new QDial;
    dial-&amp;gt;setFocusPolicy(Qt::StrongFocus);

    connect(slider, SIGNAL(valueChanged(int)), scrollBar, SLOT(setValue(int)));
    connect(scrollBar, SIGNAL(valueChanged(int)), dial, SLOT(setValue(int)));
    connect(dial, SIGNAL(valueChanged(int)), slider, SLOT(setValue(int)));
</db:programlisting>
<db:para>First we create the slider-like widgets with the appropriate properties. In particular we set the focus policy for each widget. <db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::FocusPolicy</db:link> is an enum type that defines the various policies a widget can have with respect to acquiring keyboard focus. The <db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::StrongFocus</db:link> policy means that the widget accepts focus by both tabbing and clicking.</db:para>
<db:para>Then we connect the widgets with each other, so that they will stay synchronized when the current value of one of them changes.</db:para>
<db:programlisting language="cpp">    connect(dial, SIGNAL(valueChanged(int)), this, SIGNAL(valueChanged(int)));
</db:programlisting>
<db:para>We connect dial's valueChanged() signal to the SlidersGroup's valueChanged() signal, to notify the other widgets in the application (i.e., the control widgets) of the changed value.</db:para>
<db:programlisting language="cpp">    QBoxLayout::Direction direction;

    if (orientation == Qt::Horizontal)
        direction = QBoxLayout::TopToBottom;
    else
        direction = QBoxLayout::LeftToRight;

    QBoxLayout *slidersLayout = new QBoxLayout(direction);
    slidersLayout-&amp;gt;addWidget(slider);
    slidersLayout-&amp;gt;addWidget(scrollBar);
    slidersLayout-&amp;gt;addWidget(dial);
    setLayout(slidersLayout);
}
</db:programlisting>
<db:para>Finally, depending on the <db:link xlink:href="qt.xml#Orientation-enum">orientation</db:link> given at the time of construction, we choose and create the layout for the slider widgets within the group box.</db:para>
<db:programlisting language="cpp">void SlidersGroup::setValue(int value)
{
    slider-&amp;gt;setValue(value);
}
</db:programlisting>
<db:para>The setValue() slot sets the value of the <db:link xlink:href="qslider.xml">QSlider</db:link>. We don't need to explicitly call <db:link xlink:href="qabstractslider.xml#value-prop">setValue</db:link>() on the <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link> and <db:link xlink:href="qdial.xml">QDial</db:link> widgets, since <db:link xlink:href="qslider.xml">QSlider</db:link> will emit the <db:link xlink:href="qabstractslider.xml#valueChanged">valueChanged</db:link>() signal when its value changes, triggering a domino effect.</db:para>
<db:programlisting language="cpp">void SlidersGroup::setMinimum(int value)
{
    slider-&amp;gt;setMinimum(value);
    scrollBar-&amp;gt;setMinimum(value);
    dial-&amp;gt;setMinimum(value);
}

void SlidersGroup::setMaximum(int value)
{
    slider-&amp;gt;setMaximum(value);
    scrollBar-&amp;gt;setMaximum(value);
    dial-&amp;gt;setMaximum(value);
}
</db:programlisting>
<db:para>The setMinimum() and setMaximum() slots are used by the Window class to set the range of the <db:link xlink:href="qslider.xml">QSlider</db:link>, <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link>, and <db:link xlink:href="qdial.xml">QDial</db:link> widgets.</db:para>
<db:programlisting language="cpp">void SlidersGroup::invertAppearance(bool invert)
{
    slider-&amp;gt;setInvertedAppearance(invert);
    scrollBar-&amp;gt;setInvertedAppearance(invert);
    dial-&amp;gt;setInvertedAppearance(invert);
}

void SlidersGroup::invertKeyBindings(bool invert)
{
    slider-&amp;gt;setInvertedControls(invert);
    scrollBar-&amp;gt;setInvertedControls(invert);
    dial-&amp;gt;setInvertedControls(invert);
}
</db:programlisting>
<db:para>The invertAppearance() and invertKeyBindings() slots control the child widgets' <db:link xlink:href="qabstractslider.xml#invertedAppearance-prop">invertedAppearance</db:link> and <db:link xlink:href="qabstractslider.xml#invertedControls-prop">invertedControls</db:link> properties.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="widgets/sliders/main.cpp">widgets/sliders/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/sliders/sliders.pro">widgets/sliders/sliders.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/sliders/slidersgroup.cpp">widgets/sliders/slidersgroup.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/sliders/slidersgroup.h">widgets/sliders/slidersgroup.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/sliders/window.cpp">widgets/sliders/window.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/sliders/window.h">widgets/sliders/window.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
