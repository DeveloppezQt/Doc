<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Sliders Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Sliders example shows how to use the different types of sliders available in Qt: <db:link xlink:href="qslider.xml">QSlider</db:link>, <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link> and <db:link xlink:href="qdial.xml">QDial</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt provides three types of slider-like widgets: <db:link xlink:href="qslider.xml">QSlider</db:link>, <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link> and <db:link xlink:href="qdial.xml">QDial</db:link>. They all inherit most of their functionality from <db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link>, and can in theory replace each other in an application since the differences only concern their look and feel. This example shows what they look like, how they work and how their behavior and appearance can be manipulated through their properties.</db:para>
<db:para>The example also demonstrates how signals and slots can be used to synchronize the behavior of two or more widgets, and how to override <db:link xlink:href="qwidget.xml#resizeEvent">resizeEvent</db:link>() to implement a responsive layout.</db:para>
<db:figure>
<db:title>Screenshot of the Sliders example</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sliders-example.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:para>The Sliders example consists of two classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>SlidersGroup is a custom widget. It combines a <db:link xlink:href="qslider.xml">QSlider</db:link>, a <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link> and a <db:link xlink:href="qdial.xml">QDial</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Window is the main widget combining a <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> and a SlidersGroup. The <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> contains several widgets that control the behavior of the slider-like widgets.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>First we will review the Window class, then we will take a look at the SlidersGroup class.</db:para>
<db:section xml:id="window-class-definition">
<db:title>Window Class Definition</db:title>
<db:programlisting language="cpp">class Window : public QWidget
{
    Q_OBJECT

public:
    Window(QWidget *parent = nullptr);

private:
    void createControls(const QString &amp;title);
    void resizeEvent(QResizeEvent *e);

    SlidersGroup *slidersGroup;

    QGroupBox *controlsGroup;
    QLabel *minimumLabel;
    QLabel *maximumLabel;
    QLabel *valueLabel;
    QCheckBox *invertedAppearance;
    QCheckBox *invertedKeyBindings;
    QSpinBox *minimumSpinBox;
    QSpinBox *maximumSpinBox;
    QSpinBox *valueSpinBox;
    QBoxLayout *layout;
};
</db:programlisting>
<db:para>The Window class inherits from <db:link xlink:href="qwidget.xml">QWidget</db:link>. It displays the slider widgets and allows the user to set their minimum, maximum and current values and to customize their appearance, key bindings and orientation. We use a private createControls() function to create the widgets that provide these controlling mechanisms and to connect them to the slider widgets.</db:para>
</db:section>
<db:section xml:id="window-class-implementation">
<db:title>Window Class Implementation</db:title>
<db:programlisting language="cpp">Window::Window(QWidget *parent)
    : QWidget(parent)
{
    slidersGroup = new SlidersGroup(tr(&quot;Sliders&quot;));

    createControls(tr(&quot;Controls&quot;));
</db:programlisting>
<db:para>In the constructor we first create the SlidersGroup widget that displays the slider widgets. With createControls() we create the controlling widgets, and connect those to to the sliders.</db:para>
<db:programlisting language="cpp">    layout = new QBoxLayout(QBoxLayout::LeftToRight);
    layout-&gt;addWidget(controlsGroup);
    layout-&gt;addWidget(slidersGroup);
    setLayout(layout);

    minimumSpinBox-&gt;setValue(0);
    maximumSpinBox-&gt;setValue(20);
    valueSpinBox-&gt;setValue(5);

    setWindowTitle(tr(&quot;Sliders&quot;));
}
</db:programlisting>
<db:para>We put the groups of control widgets and the sliders in a horizontal layout before we initialize the minimum, maximum and current values. The initialization of the current value will propagate to the slider widgets through the connection we made between valueSpinBox and the SlidersGroup widgets. The minimum and maximum values propagate through the connections we created with createControls().</db:para>
<db:programlisting language="cpp">void Window::createControls(const QString &amp;title)
{
    controlsGroup = new QGroupBox(title);

    minimumLabel = new QLabel(tr(&quot;Minimum value:&quot;));
    maximumLabel = new QLabel(tr(&quot;Maximum value:&quot;));
    valueLabel = new QLabel(tr(&quot;Current value:&quot;));

    invertedAppearance = new QCheckBox(tr(&quot;Inverted appearance&quot;));
    invertedKeyBindings = new QCheckBox(tr(&quot;Inverted key bindings&quot;));

</db:programlisting>
<db:para>In the private createControls() function, we let a <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> (controlsGroup) display the control widgets. A group box can provide a frame, a title and a keyboard shortcut, and displays various other widgets inside itself. The group of control widgets is composed by two checkboxes, and three spin boxes with labels.</db:para>
<db:para>After creating the labels, we create the two checkboxes. Checkboxes are typically used to represent features in an application that can be enabled or disabled. When invertedAppearance is enabled, the slider values are inverted. The table below shows the appearance for the different slider-like widgets:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
</db:th>
<db:th colspan="2">
<db:para><db:link xlink:href="qslider.xml">QSlider</db:link></db:para>
</db:th>
<db:th colspan="2">
<db:para><db:link xlink:href="qscrollbar.xml">QScrollBar</db:link></db:para>
</db:th>
<db:th colspan="2">
<db:para><db:link xlink:href="qdial.xml">QDial</db:link></db:para>
</db:th>
</db:tr>
<db:tr>
<db:th>
</db:th>
<db:th>
<db:para>Normal</db:para>
</db:th>
<db:th>
<db:para>Inverted</db:para>
</db:th>
<db:th>
<db:para>Normal</db:para>
</db:th>
<db:th>
<db:para>Inverted</db:para>
</db:th>
<db:th>
<db:para>Normal</db:para>
</db:th>
<db:th>
<db:para>Inverted</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link></db:para>
</db:td>
<db:td>
<db:para>Left to right</db:para>
</db:td>
<db:td>
<db:para>Right to left</db:para>
</db:td>
<db:td>
<db:para>Left to right</db:para>
</db:td>
<db:td>
<db:para>Right to left</db:para>
</db:td>
<db:td>
<db:para>Clockwise</db:para>
</db:td>
<db:td>
<db:para>Counterclockwise</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link></db:para>
</db:td>
<db:td>
<db:para>Bottom to top</db:para>
</db:td>
<db:td>
<db:para>Top to bottom</db:para>
</db:td>
<db:td>
<db:para>Top to bottom</db:para>
</db:td>
<db:td>
<db:para>Bottom to top</db:para>
</db:td>
<db:td>
<db:para>Clockwise</db:para>
</db:td>
<db:td>
<db:para>Counterclockwise</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>It is common to invert the appearance of a vertical <db:link xlink:href="qslider.xml">QSlider</db:link>. A vertical slider that controls volume, for example, will typically go from bottom to top (the non-inverted appearance), whereas a vertical slider that controls the position of an object on screen might go from top to bottom, because screen coordinates go from top to bottom.</db:para>
<db:para>When the invertedKeyBindings option is enabled (corresponding to the <db:link xlink:href="qabstractslider.xml#invertedControls-prop">QAbstractSlider::invertedControls</db:link> property), the slider's wheel and key events are inverted. The normal key bindings mean that scrolling the mouse wheel &quot;up&quot; or using keys like page up will increase the slider's current value towards its maximum. Inverted, the same wheel and key events will move the value toward the slider's minimum. This can be useful if the <db:emphasis>appearance</db:emphasis> of a slider is inverted: Some users might expect the keys to still work the same way on the value, whereas others might expect <db:guilabel>PageUp</db:guilabel> to mean &quot;up&quot; on the screen.</db:para>
<db:para>Note that for horizontal and vertical scroll bars, the key bindings are inverted by default: <db:guilabel>PageDown</db:guilabel> increases the current value, and <db:guilabel>PageUp</db:guilabel> decreases it.</db:para>
<db:programlisting language="cpp">    minimumSpinBox = new QSpinBox;
    minimumSpinBox-&gt;setRange(-100, 100);
    minimumSpinBox-&gt;setSingleStep(1);

    maximumSpinBox = new QSpinBox;
    maximumSpinBox-&gt;setRange(-100, 100);
    maximumSpinBox-&gt;setSingleStep(1);

    valueSpinBox = new QSpinBox;
    valueSpinBox-&gt;setRange(-100, 100);
    valueSpinBox-&gt;setSingleStep(1);

</db:programlisting>
<db:para>Then we create the spin boxes. <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> allows the user to choose a value by clicking the up and down buttons or pressing the <db:guilabel>Up</db:guilabel> and <db:guilabel>Down</db:guilabel> keys on the keyboard to modify the value currently displayed. The user can also type in the value manually. The spin boxes control the minimum, maximum and current values for the <db:link xlink:href="qslider.xml">QSlider</db:link>, <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link>, and <db:link xlink:href="qdial.xml">QDial</db:link> widgets.</db:para>
<db:programlisting language="cpp">    connect(slidersGroup, &amp;SlidersGroup::valueChanged,
            valueSpinBox, &amp;QSpinBox::setValue);
    connect(valueSpinBox, &amp;QSpinBox::valueChanged,
            slidersGroup, &amp;SlidersGroup::setValue);
    connect(minimumSpinBox, &amp;QSpinBox::valueChanged,
            slidersGroup, &amp;SlidersGroup::setMinimum);
    connect(maximumSpinBox, &amp;QSpinBox::valueChanged,
            slidersGroup, &amp;SlidersGroup::setMaximum);
    connect(invertedAppearance, &amp;QCheckBox::toggled,
            slidersGroup, &amp;SlidersGroup::invertAppearance);
    connect(invertedKeyBindings, &amp;QCheckBox::toggled,
            slidersGroup, &amp;SlidersGroup::invertKeyBindings);

    QGridLayout *controlsLayout = new QGridLayout;
    controlsLayout-&gt;addWidget(minimumLabel, 0, 0);
    controlsLayout-&gt;addWidget(maximumLabel, 1, 0);
    controlsLayout-&gt;addWidget(valueLabel, 2, 0);
    controlsLayout-&gt;addWidget(minimumSpinBox, 0, 1);
    controlsLayout-&gt;addWidget(maximumSpinBox, 1, 1);
    controlsLayout-&gt;addWidget(valueSpinBox, 2, 1);
    controlsLayout-&gt;addWidget(invertedAppearance, 0, 2);
    controlsLayout-&gt;addWidget(invertedKeyBindings, 1, 2);
    controlsGroup-&gt;setLayout(controlsLayout);

}
</db:programlisting>
<db:para>Then we connect the slidersGroup and the valueSpinBox to each other, so that the slider widgets and the control widget will behave synchronized when the current value of one of them changes. The valueChanged() signal is emitted with the new value as argument. The setValue() slot sets the current value of the widget to the new value, and emits valueChanged() if the new value is different from the old one.</db:para>
<db:para>We synchronize the behavior of the control widgets and the slider widgets through their signals and slots. We connect each control widget to both the horizontal and vertical group of slider widgets. We also connect orientationCombo to the <db:link xlink:href="qstackedwidget.xml">QStackedWidget</db:link>, so that the correct &quot;page&quot; is shown. Finally, we lay out the control widgets in a <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> within the controlsGroup group box.</db:para>
<db:programlisting language="cpp">void Window::resizeEvent(QResizeEvent *)
{
    if (width() == 0 || height() == 0)
        return;

    const double aspectRatio = double(width()) / double(height());

    if (aspectRatio &lt; 1.0) {
        layout-&gt;setDirection(QBoxLayout::TopToBottom);
        slidersGroup-&gt;setOrientation(Qt::Horizontal);
    } else if (aspectRatio &gt; 1.0) {
        layout-&gt;setDirection(QBoxLayout::LeftToRight);
        slidersGroup-&gt;setOrientation(Qt::Vertical);
    }
}
</db:programlisting>
<db:para>Lastly, we override resizeEvent() from <db:link xlink:href="qwidget.xml">QWidget</db:link>. We guard against dividing by zero, and otherwise compute the aspect ratio of the widget. If the window has a portrait format, then we set the layout to organize the groups of control widgets and sliders vertically, and we give the sliders a horizontal orientation. If the window has a landscape format, then we change the layout to show the sliders and controlling widgets side by side, and give the sliders a vertical orientation.</db:para>
</db:section>
<db:section xml:id="slidersgroup-class-definition">
<db:title>SlidersGroup Class Definition</db:title>
<db:programlisting language="cpp">class SlidersGroup : public QGroupBox
{
    Q_OBJECT

public:
    SlidersGroup(const QString &amp;title, QWidget *parent = nullptr);

signals:
    void valueChanged(int value);

public slots:
    void setValue(int value);
    void setMinimum(int value);
    void setMaximum(int value);
    void invertAppearance(bool invert);
    void invertKeyBindings(bool invert);
    void setOrientation(Qt::Orientation orientation);

private:
    QSlider *slider;
    QScrollBar *scrollBar;
    QDial *dial;
    QBoxLayout *slidersLayout;
};
</db:programlisting>
<db:para>The SlidersGroup class inherits from <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link>. It provides a frame and a title, and contains a <db:link xlink:href="qslider.xml">QSlider</db:link>, a <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link> and a <db:link xlink:href="qdial.xml">QDial</db:link>.</db:para>
<db:para>We provide a valueChanged() signal and a public setValue() slot with equivalent functionality to the ones in <db:link xlink:href="qabstractslider.xml">QAbstractSlider</db:link> and <db:link xlink:href="qspinbox.xml">QSpinBox</db:link>. In addition, we implement several other public slots to set the minimum and maximum value, and invert the slider widgets' appearance as well as key bindings, and set the orientation.</db:para>
</db:section>
<db:section xml:id="slidersgroup-class-implementation">
<db:title>SlidersGroup Class Implementation</db:title>
<db:programlisting language="cpp">SlidersGroup::SlidersGroup(const QString &amp;title, QWidget *parent)
    : QGroupBox(title, parent)
{
    slider = new QSlider;
    slider-&gt;setFocusPolicy(Qt::StrongFocus);
    slider-&gt;setTickPosition(QSlider::TicksBothSides);
    slider-&gt;setTickInterval(10);
    slider-&gt;setSingleStep(1);

    scrollBar = new QScrollBar;
    scrollBar-&gt;setFocusPolicy(Qt::StrongFocus);

    dial = new QDial;
    dial-&gt;setFocusPolicy(Qt::StrongFocus);

</db:programlisting>
<db:para>First we create the slider-like widgets with the appropriate properties. In particular we set the focus policy for each widget. <db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::FocusPolicy</db:link> is an enum type that defines the various policies a widget can have with respect to acquiring keyboard focus. The <db:link xlink:href="qt.xml#FocusPolicy-enum">Qt::StrongFocus</db:link> policy means that the widget accepts focus by both tabbing and clicking.</db:para>
<db:programlisting language="cpp">    connect(slider, &amp;QSlider::valueChanged, scrollBar, &amp;QScrollBar::setValue);
    connect(scrollBar, &amp;QScrollBar::valueChanged, dial, &amp;QDial::setValue);
    connect(dial, &amp;QDial::valueChanged, slider, &amp;QSlider::setValue);
    connect(dial, &amp;QDial::valueChanged, this, &amp;SlidersGroup::valueChanged);
</db:programlisting>
<db:para>Then we connect the widgets with each other, so that they will stay synchronized when the current value of one of them changes.</db:para>
<db:para>We connect dial's valueChanged() signal to the SlidersGroup's valueChanged() signal, to notify the other widgets in the application (i.e., the control widgets) of the changed value.</db:para>
<db:programlisting language="cpp">
    slidersLayout = new QBoxLayout(QBoxLayout::LeftToRight);
    slidersLayout-&gt;addWidget(slider);
    slidersLayout-&gt;addWidget(scrollBar);
    slidersLayout-&gt;addWidget(dial);
    setLayout(slidersLayout);
}
</db:programlisting>
<db:para>Finally, we create the layout for the slider widgets within the group box. We start with a horizontal arrangement of the sliders.</db:para>
<db:programlisting language="cpp">void SlidersGroup::setValue(int value)
{
    slider-&gt;setValue(value);
}
</db:programlisting>
<db:para>The setValue() slot sets the value of the <db:link xlink:href="qslider.xml">QSlider</db:link>. We don't need to explicitly call <db:link xlink:href="qabstractslider.xml#value-prop">setValue</db:link>() on the <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link> and <db:link xlink:href="qdial.xml">QDial</db:link> widgets, since <db:link xlink:href="qslider.xml">QSlider</db:link> will emit the <db:link xlink:href="qabstractslider.xml#valueChanged">valueChanged</db:link>() signal when its value changes, triggering a domino effect.</db:para>
<db:programlisting language="cpp">void SlidersGroup::setMinimum(int value)
{
    slider-&gt;setMinimum(value);
    scrollBar-&gt;setMinimum(value);
    dial-&gt;setMinimum(value);
}

void SlidersGroup::setMaximum(int value)
{
    slider-&gt;setMaximum(value);
    scrollBar-&gt;setMaximum(value);
    dial-&gt;setMaximum(value);
}
</db:programlisting>
<db:para>The setMinimum() and setMaximum() slots are used by the Window class to set the range of the <db:link xlink:href="qslider.xml">QSlider</db:link>, <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link>, and <db:link xlink:href="qdial.xml">QDial</db:link> widgets.</db:para>
<db:programlisting language="cpp">void SlidersGroup::invertAppearance(bool invert)
{
    slider-&gt;setInvertedAppearance(invert);
    scrollBar-&gt;setInvertedAppearance(invert);
    dial-&gt;setInvertedAppearance(invert);
}

void SlidersGroup::invertKeyBindings(bool invert)
{
    slider-&gt;setInvertedControls(invert);
    scrollBar-&gt;setInvertedControls(invert);
    dial-&gt;setInvertedControls(invert);
}
</db:programlisting>
<db:para>The invertAppearance() and invertKeyBindings() slots control the child widgets' <db:link xlink:href="qabstractslider.xml#invertedAppearance-prop">invertedAppearance</db:link> and <db:link xlink:href="qabstractslider.xml#invertedControls-prop">invertedControls</db:link> properties.</db:para>
<db:programlisting language="cpp">void SlidersGroup::setOrientation(Qt::Orientation orientation)
{
    slidersLayout-&gt;setDirection(orientation == Qt::Horizontal
                                ? QBoxLayout::TopToBottom
                                : QBoxLayout::LeftToRight);
    scrollBar-&gt;setOrientation(orientation);
    slider-&gt;setOrientation(orientation);
}
</db:programlisting>
<db:para>The setOrientation() slot controls the direction of the layout and the orientation of the sliders. In a horizontal group, the sliders have a horizontal orientation, and are laid out on top of each other. In a vertical group, the sliders have a vertical orientation, and are laid out next to each other.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/widgets/sliders?h=6.9">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
