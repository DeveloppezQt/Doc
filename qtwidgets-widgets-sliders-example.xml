<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Sliders Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Sliders example shows how to use the different types of sliders available in Qt: QSlider, QScrollBar and QDial.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt provides three types of slider-like widgets: QSlider, QScrollBar and QDial. They all inherit most of their functionality from QAbstractSlider, and can in theory replace each other in an application since the differences only concern their look and feel. This example shows what they look like, how they work and how their behavior and appearance can be manipulated through their properties.</db:para>
<db:para>The example also demonstrates how signals and slots can be used to synchronize the behavior of two or more widgets.</db:para>
<db:figure>
<db:title>Screenshot of the Sliders example</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sliders-example.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:para>The Sliders example consists of two classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>SlidersGroup</db:code> is a custom widget. It combines a QSlider, a QScrollBar and a QDial.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Window</db:code> is the main widget combining a QGroupBox and a QStackedWidget. In this example, the QStackedWidget provides a stack of two <db:code>SlidersGroup</db:code> widgets. The QGroupBox contain several widgets that control the behavior of the slider-like widgets.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>First we will review the <db:code>Window</db:code> class, then we will take a look at the <db:code>SlidersGroup</db:code> class.</db:para>
<db:section xml:id="window-class-definition">
<db:title>Window Class Definition</db:title>
<db:programlisting language="cpp">class Window : public QWidget
{
    Q_OBJECT

public:
    Window(QWidget *parent = nullptr);

private:
    void createControls(const QString &amp;amp;title);

    SlidersGroup *horizontalSliders;
    SlidersGroup *verticalSliders;
    QStackedWidget *stackedWidget;

    QGroupBox *controlsGroup;
    QLabel *minimumLabel;
    QLabel *maximumLabel;
    QLabel *valueLabel;
    QCheckBox *invertedAppearance;
    QCheckBox *invertedKeyBindings;
    QSpinBox *minimumSpinBox;
    QSpinBox *maximumSpinBox;
    QSpinBox *valueSpinBox;
    QComboBox *orientationCombo;
};
</db:programlisting>
<db:para>The <db:code>Window</db:code> class inherits from QWidget. It displays the slider widgets and allows the user to set their minimum, maximum and current values and to customize their appearance, key bindings and orientation. We use a private <db:code>createControls()</db:code> function to create the widgets that provide these controlling mechanisms and to connect them to the slider widgets.</db:para>
</db:section>
<db:section xml:id="window-class-implementation">
<db:title>Window Class Implementation</db:title>
<db:programlisting language="cpp">Window::Window(QWidget *parent)
    : QWidget(parent)
{
    horizontalSliders = new SlidersGroup(Qt::Horizontal, tr(&quot;Horizontal&quot;));
    verticalSliders = new SlidersGroup(Qt::Vertical, tr(&quot;Vertical&quot;));

    stackedWidget = new QStackedWidget;
    stackedWidget-&amp;gt;addWidget(horizontalSliders);
    stackedWidget-&amp;gt;addWidget(verticalSliders);

    createControls(tr(&quot;Controls&quot;));
</db:programlisting>
<db:para>In the constructor we first create the two <db:code>SlidersGroup</db:code> widgets that display the slider widgets horizontally and vertically, and add them to the QStackedWidget. QStackedWidget provides a stack of widgets where only the top widget is visible. With <db:code>createControls()</db:code> we create a connection from a controlling widget to the QStackedWidget, making the user able to choose between horizontal and vertical orientation of the slider widgets. The rest of the controlling mechanisms is implemented by the same function call.</db:para>
<db:programlisting language="cpp">    connect(horizontalSliders, &amp;amp;SlidersGroup::valueChanged,
            verticalSliders, &amp;amp;SlidersGroup::setValue);
    connect(verticalSliders, &amp;amp;SlidersGroup::valueChanged,
            valueSpinBox, &amp;amp;QSpinBox::setValue);
    connect(valueSpinBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QSpinBox::valueChanged),
            horizontalSliders, &amp;amp;SlidersGroup::setValue);

    QHBoxLayout *layout = new QHBoxLayout;
    layout-&amp;gt;addWidget(controlsGroup);
    layout-&amp;gt;addWidget(stackedWidget);
    setLayout(layout);

    minimumSpinBox-&amp;gt;setValue(0);
    maximumSpinBox-&amp;gt;setValue(20);
    valueSpinBox-&amp;gt;setValue(5);

    setWindowTitle(tr(&quot;Sliders&quot;));
}
</db:programlisting>
<db:para>Then we connect the <db:code>horizontalSliders</db:code>, <db:code>verticalSliders</db:code> and <db:code>valueSpinBox</db:code> to each other, so that the slider widgets and the control widget will behave synchronized when the current value of one of them changes. The <db:code>valueChanged()</db:code> signal is emitted with the new value as argument. The <db:code>setValue()</db:code> slot sets the current value of the widget to the new value, and emits <db:code>valueChanged()</db:code> if the new value is different from the old one.</db:para>
<db:para>We put the group of control widgets and the stacked widget in a horizontal layout before we initialize the minimum, maximum and current values. The initialization of the current value will propagate to the slider widgets through the connection we made between <db:code>valueSpinBox</db:code> and the <db:code>SlidersGroup</db:code> widgets. The minimum and maximum values propagate through the connections we created with <db:code>createControls()</db:code>.</db:para>
<db:programlisting language="cpp">void Window::createControls(const QString &amp;amp;title)
{
    controlsGroup = new QGroupBox(title);

    minimumLabel = new QLabel(tr(&quot;Minimum value:&quot;));
    maximumLabel = new QLabel(tr(&quot;Maximum value:&quot;));
    valueLabel = new QLabel(tr(&quot;Current value:&quot;));

    invertedAppearance = new QCheckBox(tr(&quot;Inverted appearance&quot;));
    invertedKeyBindings = new QCheckBox(tr(&quot;Inverted key bindings&quot;));
</db:programlisting>
<db:para>In the private <db:code>createControls()</db:code> function, we let a QGroupBox (<db:code>controlsGroup</db:code>) display the control widgets. A group box can provide a frame, a title and a keyboard shortcut, and displays various other widgets inside itself. The group of control widgets is composed by two checkboxes, three spin boxes (with labels) and one combobox.</db:para>
<db:para>After creating the labels, we create the two checkboxes. Checkboxes are typically used to represent features in an application that can be enabled or disabled. When <db:code>invertedAppearance</db:code> is enabled, the slider values are inverted. The table below shows the appearance for the different slider-like widgets:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
</db:th>
<db:th colspan="2">
<db:para>QSlider</db:para>
</db:th>
<db:th colspan="2">
<db:para>QScrollBar</db:para>
</db:th>
<db:th colspan="2">
<db:para>QDial</db:para>
</db:th>
</db:tr>
<db:tr>
<db:th>
</db:th>
<db:th>
<db:para>Normal</db:para>
</db:th>
<db:th>
<db:para>Inverted</db:para>
</db:th>
<db:th>
<db:para>Normal</db:para>
</db:th>
<db:th>
<db:para>Inverted</db:para>
</db:th>
<db:th>
<db:para>Normal</db:para>
</db:th>
<db:th>
<db:para>Inverted</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Qt::Horizontal</db:para>
</db:td>
<db:td>
<db:para>Left to right</db:para>
</db:td>
<db:td>
<db:para>Right to left</db:para>
</db:td>
<db:td>
<db:para>Left to right</db:para>
</db:td>
<db:td>
<db:para>Right to left</db:para>
</db:td>
<db:td>
<db:para>Clockwise</db:para>
</db:td>
<db:td>
<db:para>Counterclockwise</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Qt::Vertical</db:para>
</db:td>
<db:td>
<db:para>Bottom to top</db:para>
</db:td>
<db:td>
<db:para>Top to bottom</db:para>
</db:td>
<db:td>
<db:para>Top to bottom</db:para>
</db:td>
<db:td>
<db:para>Bottom to top</db:para>
</db:td>
<db:td>
<db:para>Clockwise</db:para>
</db:td>
<db:td>
<db:para>Counterclockwise</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>It is common to invert the appearance of a vertical QSlider. A vertical slider that controls volume, for example, will typically go from bottom to top (the non-inverted appearance), whereas a vertical slider that controls the position of an object on screen might go from top to bottom, because screen coordinates go from top to bottom.</db:para>
<db:para>When the <db:code>invertedKeyBindings</db:code> option is enabled (corresponding to the QAbstractSlider::invertedControls property), the slider's wheel and key events are inverted. The normal key bindings mean that scrolling the mouse wheel &quot;up&quot; or using keys like page up will increase the slider's current value towards its maximum. Inverted, the same wheel and key events will move the value toward the slider's minimum. This can be useful if the <db:emphasis>appearance</db:emphasis> of a slider is inverted: Some users might expect the keys to still work the same way on the value, whereas others might expect <db:guilabel>PageUp</db:guilabel> to mean &quot;up&quot; on the screen.</db:para>
<db:para>Note that for horizontal and vertical scroll bars, the key bindings are inverted by default: <db:guilabel>PageDown</db:guilabel> increases the current value, and <db:guilabel>PageUp</db:guilabel> decreases it.</db:para>
<db:programlisting language="cpp">    minimumSpinBox = new QSpinBox;
    minimumSpinBox-&amp;gt;setRange(-100, 100);
    minimumSpinBox-&amp;gt;setSingleStep(1);

    maximumSpinBox = new QSpinBox;
    maximumSpinBox-&amp;gt;setRange(-100, 100);
    maximumSpinBox-&amp;gt;setSingleStep(1);

    valueSpinBox = new QSpinBox;
    valueSpinBox-&amp;gt;setRange(-100, 100);
    valueSpinBox-&amp;gt;setSingleStep(1);

    orientationCombo = new QComboBox;
    orientationCombo-&amp;gt;addItem(tr(&quot;Horizontal slider-like widgets&quot;));
    orientationCombo-&amp;gt;addItem(tr(&quot;Vertical slider-like widgets&quot;));
</db:programlisting>
<db:para>Then we create the spin boxes. QSpinBox allows the user to choose a value by clicking the up and down buttons or pressing the <db:guilabel>Up</db:guilabel> and <db:guilabel>Down</db:guilabel> keys on the keyboard to modify the value currently displayed. The user can also type in the value manually. The spin boxes control the minimum, maximum and current values for the QSlider, QScrollBar, and QDial widgets.</db:para>
<db:para>We create a QComboBox that allows the user to choose the orientation of the slider widgets. The QComboBox widget is a combined button and popup list. It provides a means of presenting a list of options to the user in a way that takes up the minimum amount of screen space.</db:para>
<db:programlisting language="cpp">    connect(orientationCombo, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QComboBox::activated),
            stackedWidget, &amp;amp;QStackedWidget::setCurrentIndex);
    connect(minimumSpinBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QSpinBox::valueChanged),
            horizontalSliders, &amp;amp;SlidersGroup::setMinimum);
    connect(minimumSpinBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QSpinBox::valueChanged),
            verticalSliders, &amp;amp;SlidersGroup::setMinimum);
    connect(maximumSpinBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QSpinBox::valueChanged),
            horizontalSliders, &amp;amp;SlidersGroup::setMaximum);
    connect(maximumSpinBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QSpinBox::valueChanged),
            verticalSliders, &amp;amp;SlidersGroup::setMaximum);
    connect(invertedAppearance, &amp;amp;QCheckBox::toggled,
            horizontalSliders, &amp;amp;SlidersGroup::invertAppearance);
    connect(invertedAppearance, &amp;amp;QCheckBox::toggled,
            verticalSliders, &amp;amp;SlidersGroup::invertAppearance);
    connect(invertedKeyBindings, &amp;amp;QCheckBox::toggled,
            horizontalSliders, &amp;amp;SlidersGroup::invertKeyBindings);
    connect(invertedKeyBindings, &amp;amp;QCheckBox::toggled,
            verticalSliders, &amp;amp;SlidersGroup::invertKeyBindings);

    QGridLayout *controlsLayout = new QGridLayout;
    controlsLayout-&amp;gt;addWidget(minimumLabel, 0, 0);
    controlsLayout-&amp;gt;addWidget(maximumLabel, 1, 0);
    controlsLayout-&amp;gt;addWidget(valueLabel, 2, 0);
    controlsLayout-&amp;gt;addWidget(minimumSpinBox, 0, 1);
    controlsLayout-&amp;gt;addWidget(maximumSpinBox, 1, 1);
    controlsLayout-&amp;gt;addWidget(valueSpinBox, 2, 1);
    controlsLayout-&amp;gt;addWidget(invertedAppearance, 0, 2);
    controlsLayout-&amp;gt;addWidget(invertedKeyBindings, 1, 2);
    controlsLayout-&amp;gt;addWidget(orientationCombo, 3, 0, 1, 3);
    controlsGroup-&amp;gt;setLayout(controlsLayout);
}
</db:programlisting>
<db:para>We synchronize the behavior of the control widgets and the slider widgets through their signals and slots. We connect each control widget to both the horizontal and vertical group of slider widgets. We also connect <db:code>orientationCombo</db:code> to the QStackedWidget, so that the correct &quot;page&quot; is shown. Finally, we lay out the control widgets in a QGridLayout within the <db:code>controlsGroup</db:code> group box.</db:para>
</db:section>
<db:section xml:id="slidersgroup-class-definition">
<db:title>SlidersGroup Class Definition</db:title>
<db:programlisting language="cpp">class SlidersGroup : public QGroupBox
{
    Q_OBJECT

public:
    SlidersGroup(Qt::Orientation orientation, const QString &amp;amp;title,
                 QWidget *parent = nullptr);

signals:
    void valueChanged(int value);

public slots:
    void setValue(int value);
    void setMinimum(int value);
    void setMaximum(int value);
    void invertAppearance(bool invert);
    void invertKeyBindings(bool invert);

private:
    QSlider *slider;
    QScrollBar *scrollBar;
    QDial *dial;
};
</db:programlisting>
<db:para>The <db:code>SlidersGroup</db:code> class inherits from QGroupBox. It provides a frame and a title, and contains a QSlider, a QScrollBar and a QDial.</db:para>
<db:para>We provide a <db:code>valueChanged()</db:code> signal and a public <db:code>setValue()</db:code> slot with equivalent functionality to the ones in QAbstractSlider and QSpinBox. In addition, we implement several other public slots to set the minimum and maximum value, and invert the slider widgets' appearance as well as key bindings.</db:para>
</db:section>
<db:section xml:id="slidersgroup-class-implementation">
<db:title>SlidersGroup Class Implementation</db:title>
<db:programlisting language="cpp">SlidersGroup::SlidersGroup(Qt::Orientation orientation, const QString &amp;amp;title,
                           QWidget *parent)
    : QGroupBox(title, parent)
{
    slider = new QSlider(orientation);
    slider-&amp;gt;setFocusPolicy(Qt::StrongFocus);
    slider-&amp;gt;setTickPosition(QSlider::TicksBothSides);
    slider-&amp;gt;setTickInterval(10);
    slider-&amp;gt;setSingleStep(1);

    scrollBar = new QScrollBar(orientation);
    scrollBar-&amp;gt;setFocusPolicy(Qt::StrongFocus);

    dial = new QDial;
    dial-&amp;gt;setFocusPolicy(Qt::StrongFocus);

    connect(slider, &amp;amp;QSlider::valueChanged, scrollBar, &amp;amp;QScrollBar::setValue);
    connect(scrollBar, &amp;amp;QScrollBar::valueChanged, dial, &amp;amp;QDial::setValue);
    connect(dial, &amp;amp;QDial::valueChanged, slider, &amp;amp;QSlider::setValue);
</db:programlisting>
<db:para>First we create the slider-like widgets with the appropriate properties. In particular we set the focus policy for each widget. Qt::FocusPolicy is an enum type that defines the various policies a widget can have with respect to acquiring keyboard focus. The Qt::StrongFocus policy means that the widget accepts focus by both tabbing and clicking.</db:para>
<db:para>Then we connect the widgets with each other, so that they will stay synchronized when the current value of one of them changes.</db:para>
<db:programlisting language="cpp">    connect(dial, &amp;amp;QDial::valueChanged, this, &amp;amp;SlidersGroup::valueChanged);
</db:programlisting>
<db:para>We connect <db:code>dial</db:code>'s <db:code>valueChanged()</db:code> signal to the <db:code>SlidersGroup</db:code>'s <db:code>valueChanged()</db:code> signal, to notify the other widgets in the application (i.e., the control widgets) of the changed value.</db:para>
<db:programlisting language="cpp">    QBoxLayout::Direction direction;

    if (orientation == Qt::Horizontal)
        direction = QBoxLayout::TopToBottom;
    else
        direction = QBoxLayout::LeftToRight;

    QBoxLayout *slidersLayout = new QBoxLayout(direction);
    slidersLayout-&amp;gt;addWidget(slider);
    slidersLayout-&amp;gt;addWidget(scrollBar);
    slidersLayout-&amp;gt;addWidget(dial);
    setLayout(slidersLayout);
}
</db:programlisting>
<db:para>Finally, depending on the orientation given at the time of construction, we choose and create the layout for the slider widgets within the group box.</db:para>
<db:programlisting language="cpp">void SlidersGroup::setValue(int value)
{
    slider-&amp;gt;setValue(value);
}
</db:programlisting>
<db:para>The <db:code>setValue()</db:code> slot sets the value of the QSlider. We don't need to explicitly call <db:link xlink:href="">setValue()</db:link> on the QScrollBar and QDial widgets, since QSlider will emit the <db:link xlink:href="">valueChanged()</db:link> signal when its value changes, triggering a domino effect.</db:para>
<db:programlisting language="cpp">void SlidersGroup::setMinimum(int value)
{
    slider-&amp;gt;setMinimum(value);
    scrollBar-&amp;gt;setMinimum(value);
    dial-&amp;gt;setMinimum(value);
}

void SlidersGroup::setMaximum(int value)
{
    slider-&amp;gt;setMaximum(value);
    scrollBar-&amp;gt;setMaximum(value);
    dial-&amp;gt;setMaximum(value);
}
</db:programlisting>
<db:para>The <db:code>setMinimum()</db:code> and <db:code>setMaximum()</db:code> slots are used by the <db:code>Window</db:code> class to set the range of the QSlider, QScrollBar, and QDial widgets.</db:para>
<db:programlisting language="cpp">void SlidersGroup::invertAppearance(bool invert)
{
    slider-&amp;gt;setInvertedAppearance(invert);
    scrollBar-&amp;gt;setInvertedAppearance(invert);
    dial-&amp;gt;setInvertedAppearance(invert);
}

void SlidersGroup::invertKeyBindings(bool invert)
{
    slider-&amp;gt;setInvertedControls(invert);
    scrollBar-&amp;gt;setInvertedControls(invert);
    dial-&amp;gt;setInvertedControls(invert);
}
</db:programlisting>
<db:para>The <db:code>invertAppearance()</db:code> and <db:code>invertKeyBindings()</db:code> slots control the child widgets' invertedAppearance and invertedControls properties.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/widgets/sliders?h=5.14">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
