<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDBusUnixFileDescriptor Class</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>QtDBus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link> class holds one Unix file descriptor.</db:para>
<db:para>This class was introduced in Qt 4.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusUnixFileDescriptor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDBusUnixFileDescriptor is part of <db:simplelist><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link> class is used to hold one Unix file descriptor for use with the Qt D-Bus module. This allows applications to send and receive Unix file descriptors over the D-Bus connection, mapping automatically to the D-Bus type 'h'.</db:para>
<db:para>Objects of type QDBusUnixFileDescriptors can be used also as parameters in signals and slots that get exported to D-Bus by registering with <db:link xlink:href="qdbusconnection.xml#registerObject">QDBusConnection::registerObject</db:link>.</db:para>
<db:para><db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link> does not take ownership of the file descriptor. Instead, it will use the Unix system call dup(2) to make a copy of the file descriptor. This file descriptor belongs to the <db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link> object and should not be stored or closed by the user. Instead, you should make your own copy if you need that.</db:para>
<db:section xml:id="availability">
<db:title>Availability</db:title>
<db:para>Unix file descriptor passing is not available in all D-Bus connections. This feature is present with D-Bus library and bus daemon version 1.4 and upwards on Unix systems. Qt D-Bus automatically enables the feature if such a version was found at compile-time and run-time.</db:para>
<db:para>To verify that your connection does support passing file descriptors, check if the <db:link xlink:href="qdbusconnection.xml#ConnectionCapability-enum">QDBusConnection::UnixFileDescriptorPassing</db:link> capability is set with <db:link xlink:href="qdbusconnection.xml#connectionCapabilities">QDBusConnection::connectionCapabilities</db:link>(). If the flag is not active, then you will not be able to make calls to methods that have <db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link> as arguments or even embed such a type in a variant. You will also not receive calls containing that type.</db:para>
<db:para>Note also that remote applications may not have support for Unix file descriptor passing. If you make a D-Bus to a remote application that cannot receive such a type, you will receive an error reply. If you try to send a signal containing a D-Bus file descriptor or return one from a method call, the message will be silently dropped.</db:para>
<db:para>Even if the feature is not available, <db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link> will continue to operate, so code need not have compile-time checks for the availability of this feature.</db:para>
<db:para>On non-Unix systems, <db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link> will always report an invalid state and QDBusUnixFileDescriptor::isSupported() will return false.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusconnection.xml#ConnectionCapability-enum">QDBusConnection::ConnectionCapabilities</db:link></db:member>
<db:member><db:link xlink:href="qdbusconnection.xml#connectionCapabilities">QDBusConnection::connectionCapabilities</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDBusUnixFileDescriptor">
<db:title>QDBusUnixFileDescriptor::QDBusUnixFileDescriptor()</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusUnixFileDescriptor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusUnixFileDescriptor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link> without a wrapped file descriptor. This is equivalent to constructing the object with an invalid file descriptor (like -1).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusunixfiledescriptor.xml#fileDescriptor">fileDescriptor</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusunixfiledescriptor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDBusUnixFileDescriptor-1">
<db:title>[explicit] QDBusUnixFileDescriptor::QDBusUnixFileDescriptor(int <db:emphasis>fileDescriptor</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusUnixFileDescriptor</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>fileDescriptor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusUnixFileDescriptor(int fileDescriptor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link> object by copying the <db:code role="parameter">fileDescriptor</db:code> parameter. The original file descriptor is not touched and must be closed by the user.</db:para>
<db:para>Note that the value returned by <db:link xlink:href="qdbusunixfiledescriptor.xml#fileDescriptor">fileDescriptor</db:link>() will be different from the <db:code role="parameter">fileDescriptor</db:code> parameter passed.</db:para>
<db:para>If the <db:code role="parameter">fileDescriptor</db:code> parameter is not valid, <db:link xlink:href="qdbusunixfiledescriptor.xml#isValid">isValid</db:link>() will return false and <db:link xlink:href="qdbusunixfiledescriptor.xml#fileDescriptor">fileDescriptor</db:link>() will return -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>setFileDescriptor()</db:member>
<db:member><db:link xlink:href="qdbusunixfiledescriptor.xml#fileDescriptor">fileDescriptor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDBusUnixFileDescriptor-2">
<db:title>QDBusUnixFileDescriptor::QDBusUnixFileDescriptor(const QDBusUnixFileDescriptor &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusUnixFileDescriptor</db:methodname>
<db:methodparam>
<db:type>const QDBusUnixFileDescriptor &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusUnixFileDescriptor(const QDBusUnixFileDescriptor &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link> object by copying <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QDBusUnixFileDescriptor">
<db:title>QDBusUnixFileDescriptor::~QDBusUnixFileDescriptor()</db:title>
<db:destructorsynopsis>
<db:methodname>~QDBusUnixFileDescriptor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDBusUnixFileDescriptor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this <db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link> object and disposes of the Unix file descriptor that it contained.</db:para>
</db:section>
<db:section xml:id="fileDescriptor">
<db:title>int QDBusUnixFileDescriptor::fileDescriptor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>fileDescriptor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int fileDescriptor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Unix file descriptor contained by this <db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link> object. An invalid file descriptor is represented by the value -1.</db:para>
<db:para>Note that the file descriptor returned by this function is owned by the <db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link> object and must not be stored past the lifetime of this object. It is ok to use it while this object is valid, but if one wants to store it for longer use, the file descriptor should be cloned using the Unix dup(2), dup2(2) or dup3(2) functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusunixfiledescriptor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QDBusUnixFileDescriptor::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this Unix file descriptor is valid. A valid Unix file descriptor is not -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusunixfiledescriptor.xml#fileDescriptor">fileDescriptor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QDBusUnixFileDescriptor::swap(QDBusUnixFileDescriptor &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QDBusUnixFileDescriptor &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QDBusUnixFileDescriptor &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this file descriptor instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDBusUnixFileDescriptor &amp;QDBusUnixFileDescriptor::operator=(QDBusUnixFileDescriptor &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusUnixFileDescriptor &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QDBusUnixFileDescriptor &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusUnixFileDescriptor &amp; operator=(QDBusUnixFileDescriptor &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QDBusUnixFileDescriptor &amp;QDBusUnixFileDescriptor::operator=(const QDBusUnixFileDescriptor &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusUnixFileDescriptor &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDBusUnixFileDescriptor &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusUnixFileDescriptor &amp; operator=(const QDBusUnixFileDescriptor &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies the Unix file descriptor from the <db:code role="parameter">other</db:code> <db:link xlink:href="qdbusunixfiledescriptor.xml">QDBusUnixFileDescriptor</db:link> object. If the current object contained a file descriptor, it will be properly disposed of before.</db:para>
</db:section>
</db:section>
</db:article>
