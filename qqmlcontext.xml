<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlContext Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link> class defines a context within a QML engine.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlContext</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Contexts allow data to be exposed to the QML components instantiated by the QML engine.</db:para>
<db:para>Each <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link> contains a set of properties, distinct from its <db:link xlink:href="qobject.xml">QObject</db:link> properties, that allow data to be explicitly bound to a context by name. The context properties are defined and updated by calling <db:link xlink:href="qqmlcontext.xml#setContextProperty">QQmlContext::setContextProperty</db:link>(). The following example shows a Qt model being bound to a context and then accessed from a QML file.</db:para>
<db:programlisting language="cpp">QQmlEngine engine;
QStringListModel modelData;
QQmlContext *context = new QQmlContext(engine.rootContext());
context-&amp;gt;setContextProperty(&quot;myModel&quot;, &amp;amp;modelData);

QQmlComponent component(&amp;amp;engine);
component.setData(&quot;import QtQuick 2.0\nListView { model: myModel }&quot;, QUrl());
QObject *window = component.create(context);
</db:programlisting>
<db:para>Note it is the responsibility of the creator to delete any <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link> it constructs. If the <db:code>context</db:code> object in the example is no longer needed when the <db:code>window</db:code> component instance is destroyed, the <db:code>context</db:code> must be destroyed explicitly. The simplest way to ensure this is to set <db:code>window</db:code> as the parent of <db:code>context</db:code>.</db:para>
<db:para>To simplify binding and maintaining larger data sets, a context object can be set on a <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link>. All the properties of the context object are available by name in the context, as though they were all individually added through calls to <db:link xlink:href="qqmlcontext.xml#setContextProperty">QQmlContext::setContextProperty</db:link>(). Changes to the property's values are detected through the property's notify signal. Setting a context object is both faster and easier than manually adding and maintaining context property values.</db:para>
<db:para>The following example has the same effect as the previous one, but it uses a context object.</db:para>
<db:programlisting language="cpp">class MyDataSet : ... {
    ...
    Q_PROPERTY(QAbstractItemModel *myModel READ model NOTIFY modelChanged)
    ...
};

MyDataSet myDataSet;
QQmlEngine engine;
QQmlContext *context = new QQmlContext(engine.rootContext());
context-&amp;gt;setContextObject(&amp;amp;myDataSet);

QQmlComponent component(&amp;amp;engine);
component.setData(&quot;import QtQuick 2.0\nListView { model: myModel }&quot;, QUrl());
component.create(context);
</db:programlisting>
<db:para>All properties added explicitly by <db:link xlink:href="qqmlcontext.xml#setContextProperty">QQmlContext::setContextProperty</db:link>() take precedence over the context object's properties.</db:para>
<db:section xml:id="the-context-hierarchy">
<db:title>The Context Hierarchy</db:title>
<db:para>Contexts form a hierarchy. The root of this hierarchy is the QML engine's <db:link xlink:href="qqmlengine.xml#rootContext">root context</db:link>. Child contexts inherit the context properties of their parents; if a child context sets a context property that already exists in its parent, the new context property overrides that of the parent.</db:para>
<db:para>The following example defines two contexts - <db:code>context1</db:code> and <db:code>context2</db:code>. The second context overrides the &quot;b&quot; context property inherited from the first with a new value.</db:para>
<db:programlisting language="cpp">QQmlEngine engine;
QQmlContext *context1 = new QQmlContext(engine.rootContext());
QQmlContext *context2 = new QQmlContext(context1);

context1-&amp;gt;setContextProperty(&quot;a&quot;, 12);
context1-&amp;gt;setContextProperty(&quot;b&quot;, 12);

context2-&amp;gt;setContextProperty(&quot;b&quot;, 15);
</db:programlisting>
<db:para>While QML objects instantiated in a context are not strictly owned by that context, their bindings are. If a context is destroyed, the property bindings of outstanding QML objects will stop evaluating.</db:para>
<db:warning>
<db:para>Setting the context object or adding new context properties after an object has been created in that context is an expensive operation (essentially forcing all bindings to reevaluate). Thus whenever possible you should complete &quot;setup&quot; of the context before using it to create any objects.</db:para>
</db:warning>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-cppintegration-exposecppattributes.xml">Exposing Attributes of C++ Types to QML</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlContext">
<db:title>QQmlContext::QQmlContext(QQmlEngine *<db:emphasis>engine</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlContext</db:methodname>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlContext(QQmlEngine *engine, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a new <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link> as a child of <db:code role="parameter">engine</db:code>'s root context, and the <db:link xlink:href="qobject.xml">QObject</db:link> <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QQmlContext-1">
<db:title>QQmlContext::QQmlContext(QQmlContext *<db:emphasis>parentContext</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlContext</db:methodname>
<db:methodparam>
<db:type>QQmlContext *</db:type>
<db:parameter>parentContext</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlContext(QQmlContext *parentContext, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a new <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link> with the given <db:code role="parameter">parentContext</db:code>, and the <db:link xlink:href="qobject.xml">QObject</db:link> <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QQmlContext">
<db:title>[override virtual] QQmlContext::~QQmlContext()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QQmlContext</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQmlContext() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link>.</db:para>
<db:para>Any expressions, or sub-contexts dependent on this context will be invalidated, but not destroyed (unless they are parented to the <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link> object).</db:para>
</db:section>
<db:section xml:id="baseUrl">
<db:title>QUrl QQmlContext::baseUrl() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>baseUrl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl baseUrl() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the base url of the component, or the containing component if none is set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcontext.xml#setBaseUrl">setBaseUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextObject">
<db:title>QObject *QQmlContext::contextObject() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>contextObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * contextObject() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the context object, or 0 if there is no context object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcontext.xml#setContextObject">setContextObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextProperty">
<db:title>QVariant QQmlContext::contextProperty(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>contextProperty</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant contextProperty(const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the <db:code role="parameter">name</db:code> property for this context as a <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcontext.xml#setContextProperty">setContextProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="engine">
<db:title>QQmlEngine *QQmlContext::engine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQmlEngine *</db:type>
<db:methodname>engine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlEngine * engine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the context's <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link>, or 0 if the context has no <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> or the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> was destroyed.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QQmlContext::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the context is valid.</db:para>
<db:para>To be valid, a context must have a engine, and it's <db:link xlink:href="qqmlcontext.xml#contextObject">contextObject</db:link>(), if any, must not have been deleted.</db:para>
</db:section>
<db:section xml:id="nameForObject">
<db:title>QString QQmlContext::nameForObject(const QObject *<db:emphasis>object</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>nameForObject</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString nameForObject(const QObject *object) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of <db:code role="parameter">object</db:code> in this context, or an empty string if <db:code role="parameter">object</db:code> is not named in the context. Objects are named by <db:link xlink:href="qqmlcontext.xml#setContextProperty">setContextProperty</db:link>(), or by ids in the case of QML created contexts.</db:para>
<db:para>If the object has multiple names, the first is returned.</db:para>
</db:section>
<db:section xml:id="parentContext">
<db:title>QQmlContext *QQmlContext::parentContext() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQmlContext *</db:type>
<db:methodname>parentContext</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlContext * parentContext() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the context's parent <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link>, or 0 if this context has no parent or if the parent has been destroyed.</db:para>
</db:section>
<db:section xml:id="resolvedUrl">
<db:title>QUrl QQmlContext::resolvedUrl(const QUrl &amp;<db:emphasis>src</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>resolvedUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>src</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl resolvedUrl(const QUrl &amp;src) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resolves the URL <db:code role="parameter">src</db:code> relative to the URL of the containing component.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlengine.xml#baseUrl">QQmlEngine::baseUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qqmlcontext.xml#setBaseUrl">setBaseUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBaseUrl">
<db:title>void QQmlContext::setBaseUrl(const QUrl &amp;<db:emphasis>baseUrl</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBaseUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>baseUrl</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBaseUrl(const QUrl &amp;baseUrl)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Explicitly sets the url <db:link xlink:href="qqmlcontext.xml#resolvedUrl">resolvedUrl</db:link>() will use for relative references to <db:code role="parameter">baseUrl</db:code>.</db:para>
<db:para>Calling this function will override the url of the containing component used by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcontext.xml#baseUrl">baseUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qqmlcontext.xml#resolvedUrl">resolvedUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContextObject">
<db:title>void QQmlContext::setContextObject(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setContextObject</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setContextObject(QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the context <db:code role="parameter">object</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcontext.xml#contextObject">contextObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContextProperties">
<db:title>[since 5.11] void QQmlContext::setContextProperties(const QList&lt;QQmlContext::PropertyPair&gt; &amp;<db:emphasis>properties</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setContextProperties</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QQmlContext::PropertyPair&gt; &amp;</db:type>
<db:parameter>properties</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setContextProperties(const QList&lt;QQmlContext::PropertyPair&gt; &amp;properties)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set a batch of <db:code role="parameter">properties</db:code> on this context.</db:para>
<db:para>Setting all properties in one batch avoids unnecessary refreshing expressions, and is therefore recommended instead of calling <db:link xlink:href="qqmlcontext.xml#setContextProperty">setContextProperty</db:link>() for each individual property.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcontext.xml#setContextProperty">QQmlContext::setContextProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContextProperty">
<db:title>void QQmlContext::setContextProperty(const QString &amp;<db:emphasis>name</db:emphasis>, QObject *<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setContextProperty</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setContextProperty(const QString &amp;name, QObject *value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the <db:code role="parameter">value</db:code> of the <db:code role="parameter">name</db:code> property on this context.</db:para>
<db:para><db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link> does <db:emphasis role="bold">not</db:emphasis> take ownership of <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcontext.xml#contextProperty">contextProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContextProperty-1">
<db:title>void QQmlContext::setContextProperty(const QString &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setContextProperty</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setContextProperty(const QString &amp;name, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set a the <db:code role="parameter">value</db:code> of the <db:code role="parameter">name</db:code> property on this context.</db:para>
</db:section>
</db:section>
</db:article>
