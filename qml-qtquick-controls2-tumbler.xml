<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Tumbler QML Type</db:title>
<db:productname>QtQuickControls2</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 2 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A spinnable wheel of items that can be selected.</db:para>
<db:para>This type was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 2.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls2-control.xml">Control</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Tumbler is part of <db:simplelist><db:member>qtquickcontrols2-input</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:programlisting language="cpp">Tumbler {
    model: 5
    // ...
}
</db:programlisting>
<db:section xml:id="non-wrapping-tumbler">
<db:title>Non-wrapping Tumbler</db:title>
<db:para>The default contentItem of Tumbler is a <db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link>, which wraps when it reaches the top and bottom. To achieve a non-wrapping Tumbler, use <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> as the contentItem:</db:para>
<db:programlisting language="qml">Tumbler {
    id: listViewTumbler

    contentItem: ListView {
        anchors.fill: parent
        model: listViewTumbler.model
        delegate: listViewTumbler.delegate

        snapMode: ListView.SnapToItem
        highlightRangeMode: ListView.StrictlyEnforceRange
        preferredHighlightBegin: height / 2 - (height / listViewTumbler.visibleItemCount / 2)
        preferredHighlightEnd: height / 2  + (height / listViewTumbler.visibleItemCount / 2)
        clip: true
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-tumbler-wrap.gif"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols2-customize.xml#customizing-tumbler">Customizing Tumbler</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols2-input.xml">Input Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:para>This property holds the number of items in the model.</db:para>
</db:section>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : int</db:title>
<db:para>This property holds the index of the current item.</db:para>
</db:section>
<db:section xml:id="currentItem-prop">
<db:title>[read-only] currentItem : Item</db:title>
<db:para>This property holds the item at the current index.</db:para>
</db:section>
<db:section xml:id="delegate-prop">
<db:title>delegate : component</db:title>
<db:para>This property holds the delegate used to display each item.</db:para>
</db:section>
<db:section xml:id="model-prop">
<db:title>model : variant</db:title>
<db:para>This property holds the model that provides data for this tumbler.</db:para>
</db:section>
<db:section xml:id="visibleItemCount-prop">
<db:title>visibleItemCount : int</db:title>
<db:para>This property holds the number of items visible in the tumbler. It must be an odd number, as the current item is always vertically centered.</db:para>
</db:section>
</db:section>
<db:section xml:id="attached-property-documentation">
<db:title>Attached Property Documentation</db:title>
<db:section xml:id="displacement-attached-prop">
<db:title>[read-only] Tumbler.displacement : real</db:title>
<db:para>This attached property holds a value from <db:code>-visibleItemCount / 2</db:code> to <db:code>visibleItemCount / 2</db:code>, which represents how far away this item is from being the current item, with <db:code>0</db:code> being completely current.</db:para>
<db:para>For example, the item below will be 40% opaque when it is not the current item, and transition to 100% opacity when it becomes the current item:</db:para>
<db:programlisting language="cpp">delegate: Text {
    text: modelData
    opacity: 0.4 + Math.max(0, 1 - Math.abs(Tumbler.displacement)) * 0.6
}
</db:programlisting>
</db:section>
<db:section xml:id="tumbler-attached-prop">
<db:title>[read-only] Tumbler.tumbler : Tumbler</db:title>
<db:para>This attached property holds the tumbler. The property can be attached to a tumbler delegate. The value is <db:code>null</db:code> if the item is not a tumbler delegate.</db:para>
</db:section>
</db:section>
</db:article>
