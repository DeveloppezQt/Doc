<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QtPlugin&gt; - Defining Plugins</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The &lt;QtPlugin&gt; header file defines macros for defining plugins.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtPlugin</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>&lt;QtPlugin&gt; is part of <db:simplelist><db:member><db:link xlink:href="plugins.xml">Plugin Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_DECLARE_INTERFACE">
<db:title>Q_DECLARE_INTERFACE(<db:emphasis>ClassName</db:emphasis>, <db:emphasis>Identifier</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_DECLARE_INTERFACE</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>ClassName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>Identifier</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_DECLARE_INTERFACE(ClassName, Identifier)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro associates the given <db:code role="parameter">Identifier</db:code> (a string literal) to the interface class called <db:code role="parameter">ClassName</db:code>. The <db:code role="parameter">Identifier</db:code> must be unique. For example:</db:para>
<db:programlisting language="cpp">#define BrushInterface_iid &quot;org.qt-project.Qt.Examples.PlugAndPaint.BrushInterface/1.0&quot;

Q_DECLARE_INTERFACE(BrushInterface, BrushInterface_iid)
</db:programlisting>
<db:para>This macro is normally used right after the class definition for <db:code role="parameter">ClassName</db:code>, in a header file. See the <db:link xlink:href="qtwidgets-tools-plugandpaint-app-example.xml">Plug &amp; Paint</db:link> example for details.</db:para>
<db:para>If you want to use Q_DECLARE_INTERFACE with interface classes declared in a namespace then you have to make sure the Q_DECLARE_INTERFACE is not inside a namespace though. For example:</db:para>
<db:programlisting language="cpp">namespace Foo
{
    struct MyInterface { ... };
}

Q_DECLARE_INTERFACE(Foo::MyInterface, &quot;org.examples.MyInterface&quot;)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#Q_INTERFACES">Q_INTERFACES</db:link>()</db:member>
<db:member><db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_IMPORT_PLUGIN">
<db:title>Q_IMPORT_PLUGIN(<db:emphasis>PluginName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_IMPORT_PLUGIN</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>PluginName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_IMPORT_PLUGIN(PluginName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro imports the plugin named <db:code role="parameter">PluginName</db:code>, which corresponds with the name of the class that declares metadata for the plugin with <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>().</db:para>
<db:para>Inserting this macro into your application's source code will allow you to make use of a static plugin.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">Q_IMPORT_PLUGIN(qjpeg)
</db:programlisting>
<db:para>Static plugins must also be included by the linker when your application is built. See <db:link xlink:href="plugins-howto.xml#static-plugins">Static Plugins</db:link> for more information on this.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="plugins-howto.xml#static-plugins">Static Plugins</db:link></db:member>
<db:member><db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_PLUGIN_METADATA">
<db:title>[since 5.0] Q_PLUGIN_METADATA(<db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_PLUGIN_METADATA</db:methodname>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_PLUGIN_METADATA(...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro is being used to declare meta data that is part of a plugin that instantiates this object.</db:para>
<db:para>The macro needs to declare the IID of the interface implemented through the object, and reference a file containing the meta data for the plugin.</db:para>
<db:para>There should be exactly one occurrence of this macro in the source code for a Qt plugin.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">class MyInstance : public QObject
{
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.QDummyPlugin&quot; FILE &quot;mymetadata.json&quot;)
};
</db:programlisting>
<db:para>See the <db:link xlink:href="qtwidgets-tools-plugandpaint-app-example.xml">Plug &amp; Paint</db:link> example for details.</db:para>
<db:para>Note that the class this macro appears on must be default-constructible.</db:para>
<db:para>FILE is optional and points to a json file.</db:para>
<db:para>The json file must reside in one of the include directories specified by the build-system. moc exits with an error when it could not find the specified file.</db:para>
<db:para>This macro was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtplugin.xml#Q_DECLARE_INTERFACE">Q_DECLARE_INTERFACE</db:link>()</db:member>
<db:member><db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
