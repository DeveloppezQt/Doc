<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Tablet Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to use a Wacom tablet in Qt applications.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;mainwindow.h&quot;
#include &quot;tabletcanvas.h&quot;

MainWindow::MainWindow(TabletCanvas *canvas)
{
    myCanvas = canvas;
    createActions();
    createMenus();

    myCanvas-&gt;setColor(Qt::red);
    myCanvas-&gt;setLineWidthType(TabletCanvas::LineWidthPressure);
    myCanvas-&gt;setAlphaChannelType(TabletCanvas::NoAlpha);
    myCanvas-&gt;setColorSaturationType(TabletCanvas::NoSaturation);

    setWindowTitle(tr(&quot;Tablet Example&quot;));
    setCentralWidget(myCanvas);
}

void MainWindow::brushColorAct()
{
    QColor color = QColorDialog::getColor(myCanvas-&gt;color());

    if (color.isValid())
        myCanvas-&gt;setColor(color);
}

void MainWindow::alphaActionTriggered(QAction *action)
{
    if (action == alphaChannelPressureAction) {
        myCanvas-&gt;setAlphaChannelType(TabletCanvas::AlphaPressure);
    } else if (action == alphaChannelTiltAction) {
        myCanvas-&gt;setAlphaChannelType(TabletCanvas::AlphaTilt);
    } else {
        myCanvas-&gt;setAlphaChannelType(TabletCanvas::NoAlpha);
    }
}

void MainWindow::lineWidthActionTriggered(QAction *action)
{
    if (action == lineWidthPressureAction) {
        myCanvas-&gt;setLineWidthType(TabletCanvas::LineWidthPressure);
    } else if (action == lineWidthTiltAction) {
        myCanvas-&gt;setLineWidthType(TabletCanvas::LineWidthTilt);
    } else {
        myCanvas-&gt;setLineWidthType(TabletCanvas::NoLineWidth);
    }
}

void MainWindow::saturationActionTriggered(QAction *action)
{
    if (action == colorSaturationVTiltAction) {
        myCanvas-&gt;setColorSaturationType(TabletCanvas::SaturationVTilt);
    } else if (action == colorSaturationHTiltAction) {
        myCanvas-&gt;setColorSaturationType(TabletCanvas::SaturationHTilt);
    } else if (action == colorSaturationPressureAction) {
        myCanvas-&gt;setColorSaturationType(TabletCanvas::SaturationPressure);
    } else {
        myCanvas-&gt;setColorSaturationType(TabletCanvas::NoSaturation);
    }
}

void MainWindow::saveAct()
{
    QString path = QDir::currentPath() + &quot;/untitled.png&quot;;
    QString fileName = QFileDialog::getSaveFileName(this, tr(&quot;Save Picture&quot;),
                             path);

    if (!myCanvas-&gt;saveImage(fileName))
        QMessageBox::information(this, &quot;Error Saving Picture&quot;,
                                 &quot;Could not save the image&quot;);
}

void MainWindow::loadAct()
{
    QString fileName = QFileDialog::getOpenFileName(this, tr(&quot;Open Picture&quot;),
                                                    QDir::currentPath());

    if (!myCanvas-&gt;loadImage(fileName))
        QMessageBox::information(this, &quot;Error Opening Picture&quot;,
                                 &quot;Could not open picture&quot;);
}

void MainWindow::aboutAct()
{
    QMessageBox::about(this, tr(&quot;About Tablet Example&quot;),
                       tr(&quot;This example shows use of a Wacom tablet in Qt&quot;));
}

void MainWindow::createActions()
{
    brushColorAction = new QAction(tr(&quot;&amp;Brush Color...&quot;), this);
    brushColorAction-&gt;setShortcut(tr(&quot;Ctrl+C&quot;));
    connect(brushColorAction, SIGNAL(triggered()),
            this, SLOT(brushColorAct()));

    alphaChannelPressureAction = new QAction(tr(&quot;&amp;Pressure&quot;), this);
    alphaChannelPressureAction-&gt;setCheckable(true);

    alphaChannelTiltAction = new QAction(tr(&quot;&amp;Tilt&quot;), this);
    alphaChannelTiltAction-&gt;setCheckable(true);

    noAlphaChannelAction = new QAction(tr(&quot;No Alpha Channel&quot;), this);
    noAlphaChannelAction-&gt;setCheckable(true);
    noAlphaChannelAction-&gt;setChecked(true);

    alphaChannelGroup = new QActionGroup(this);
    alphaChannelGroup-&gt;addAction(alphaChannelPressureAction);
    alphaChannelGroup-&gt;addAction(alphaChannelTiltAction);
    alphaChannelGroup-&gt;addAction(noAlphaChannelAction);
    connect(alphaChannelGroup, SIGNAL(triggered(QAction*)),
            this, SLOT(alphaActionTriggered(QAction*)));

    colorSaturationVTiltAction = new QAction(tr(&quot;&amp;Vertical Tilt&quot;), this);
    colorSaturationVTiltAction-&gt;setCheckable(true);

    colorSaturationHTiltAction = new QAction(tr(&quot;&amp;Horizontal Tilt&quot;), this);
    colorSaturationHTiltAction-&gt;setCheckable(true);

    colorSaturationPressureAction = new QAction(tr(&quot;&amp;Pressure&quot;), this);
    colorSaturationPressureAction-&gt;setCheckable(true);

    noColorSaturationAction = new QAction(tr(&quot;&amp;No Color Saturation&quot;), this);
    noColorSaturationAction-&gt;setCheckable(true);
    noColorSaturationAction-&gt;setChecked(true);

    colorSaturationGroup = new QActionGroup(this);
    colorSaturationGroup-&gt;addAction(colorSaturationVTiltAction);
    colorSaturationGroup-&gt;addAction(colorSaturationHTiltAction);
    colorSaturationGroup-&gt;addAction(colorSaturationPressureAction);
    colorSaturationGroup-&gt;addAction(noColorSaturationAction);
    connect(colorSaturationGroup, SIGNAL(triggered(QAction*)),
            this, SLOT(saturationActionTriggered(QAction*)));

    lineWidthPressureAction = new QAction(tr(&quot;&amp;Pressure&quot;), this);
    lineWidthPressureAction-&gt;setCheckable(true);
    lineWidthPressureAction-&gt;setChecked(true);

    lineWidthTiltAction = new QAction(tr(&quot;&amp;Tilt&quot;), this);
    lineWidthTiltAction-&gt;setCheckable(true);

    lineWidthFixedAction = new QAction(tr(&quot;&amp;Fixed&quot;), this);
    lineWidthFixedAction-&gt;setCheckable(true);

    lineWidthGroup = new QActionGroup(this);
    lineWidthGroup-&gt;addAction(lineWidthPressureAction);
    lineWidthGroup-&gt;addAction(lineWidthTiltAction);
    lineWidthGroup-&gt;addAction(lineWidthFixedAction);
    connect(lineWidthGroup, SIGNAL(triggered(QAction*)),
            this, SLOT(lineWidthActionTriggered(QAction*)));

    exitAction = new QAction(tr(&quot;E&amp;xit&quot;), this);
    exitAction-&gt;setShortcuts(QKeySequence::Quit);
    connect(exitAction, SIGNAL(triggered()),
            this, SLOT(close()));

    loadAction = new QAction(tr(&quot;&amp;Open...&quot;), this);
    loadAction-&gt;setShortcuts(QKeySequence::Open);
    connect(loadAction, SIGNAL(triggered()),
            this, SLOT(loadAct()));

    saveAction = new QAction(tr(&quot;&amp;Save As...&quot;), this);
    saveAction-&gt;setShortcuts(QKeySequence::SaveAs);
    connect(saveAction, SIGNAL(triggered()),
            this, SLOT(saveAct()));

    aboutAction = new QAction(tr(&quot;A&amp;bout&quot;), this);
    aboutAction-&gt;setShortcut(tr(&quot;Ctrl+B&quot;));
    connect(aboutAction, SIGNAL(triggered()),
            this, SLOT(aboutAct()));

    aboutQtAction = new QAction(tr(&quot;About &amp;Qt&quot;), this);
    aboutQtAction-&gt;setShortcut(tr(&quot;Ctrl+Q&quot;));
    connect(aboutQtAction, SIGNAL(triggered()),
            qApp, SLOT(aboutQt()));
}

void MainWindow::createMenus()
{
    fileMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));
    fileMenu-&gt;addAction(loadAction);
    fileMenu-&gt;addAction(saveAction);
    fileMenu-&gt;addSeparator();
    fileMenu-&gt;addAction(exitAction);

    brushMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Brush&quot;));
    brushMenu-&gt;addAction(brushColorAction);

    tabletMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Tablet&quot;));

    lineWidthMenu = tabletMenu-&gt;addMenu(tr(&quot;&amp;Line Width&quot;));
    lineWidthMenu-&gt;addAction(lineWidthPressureAction);
    lineWidthMenu-&gt;addAction(lineWidthTiltAction);
    lineWidthMenu-&gt;addAction(lineWidthFixedAction);

    alphaChannelMenu = tabletMenu-&gt;addMenu(tr(&quot;&amp;Alpha Channel&quot;));
    alphaChannelMenu-&gt;addAction(alphaChannelPressureAction);
    alphaChannelMenu-&gt;addAction(alphaChannelTiltAction);
    alphaChannelMenu-&gt;addAction(noAlphaChannelAction);

    colorSaturationMenu = tabletMenu-&gt;addMenu(tr(&quot;&amp;Color Saturation&quot;));
    colorSaturationMenu-&gt;addAction(colorSaturationVTiltAction);
    colorSaturationMenu-&gt;addAction(colorSaturationHTiltAction);
    colorSaturationMenu-&gt;addAction(noColorSaturationAction);

    helpMenu = menuBar()-&gt;addMenu(&quot;&amp;Help&quot;);
    helpMenu-&gt;addAction(aboutAction);
    helpMenu-&gt;addAction(aboutQtAction);
}

</db:programlisting>
</db:article>
