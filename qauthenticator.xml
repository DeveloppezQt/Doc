<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAuthenticator Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qauthenticator.xml">QAuthenticator</db:link> class provides an authentication object.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAuthenticator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAuthenticator is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qauthenticator.xml">QAuthenticator</db:link> class is usually used in the <db:link xlink:href="qnetworkaccessmanager.xml#authenticationRequired">authenticationRequired</db:link>() and <db:link xlink:href="qnetworkaccessmanager.xml#proxyAuthenticationRequired">proxyAuthenticationRequired</db:link>() signals of <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> and <db:link xlink:href="qabstractsocket.xml">QAbstractSocket</db:link>. The class provides a way to pass back the required authentication information to the socket when accessing services that require authentication.</db:para>
<db:para><db:link xlink:href="qauthenticator.xml">QAuthenticator</db:link> supports the following authentication methods:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Basic</db:para>
</db:listitem>
<db:listitem>
<db:para>NTLM version 2</db:para>
</db:listitem>
<db:listitem>
<db:para>Digest-MD5</db:para>
</db:listitem>
<db:listitem>
<db:para>SPNEGO/Negotiate</db:para>
</db:listitem>
</db:itemizedlist>
<db:anchor xml:id="qauthenticator-options"/>
<db:section xml:id="options">
<db:title>Options</db:title>
<db:para>In addition to the username and password required for authentication, a <db:link xlink:href="qauthenticator.xml">QAuthenticator</db:link> object can also contain additional options. The <db:link xlink:href="qauthenticator.xml#options">options</db:link>() function can be used to query incoming options sent by the server; the <db:link xlink:href="qauthenticator.xml#setOption">setOption</db:link>() function can be used to set outgoing options, to be processed by the authenticator calculation. The options accepted and provided depend on the authentication type (see method()).</db:para>
<db:para>The following tables list known incoming options as well as accepted outgoing options. The list of incoming options is not exhaustive, since servers may include additional information at any time. The list of outgoing options is exhaustive, however, and no unknown options will be treated or sent back to the server.</db:para>
<db:section xml:id="basic">
<db:title>Basic</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Direction</db:para>
</db:th>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>realm</db:code></db:para>
</db:td>
<db:td>
<db:para>Incoming</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
<db:td>
<db:para>Contains the realm of the authentication, the same as <db:link xlink:href="qauthenticator.xml#realm">realm</db:link>()</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The Basic authentication mechanism supports no outgoing options.</db:para>
</db:section>
<db:section xml:id="ntlm-version-2">
<db:title>NTLM version 2</db:title>
<db:para>The NTLM authentication mechanism currently supports no incoming or outgoing options. On Windows, if no <db:code role="parameter">user</db:code> has been set, domain\user credentials will be searched for on the local system to enable Single-Sign-On functionality.</db:para>
</db:section>
<db:section xml:id="digest-md5">
<db:title>Digest-MD5</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Direction</db:para>
</db:th>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>realm</db:code></db:para>
</db:td>
<db:td>
<db:para>Incoming</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
<db:td>
<db:para>Contains the realm of the authentication, the same as <db:link xlink:href="qauthenticator.xml#realm">realm</db:link>()</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The Digest-MD5 authentication mechanism supports no outgoing options.</db:para>
</db:section>
<db:section xml:id="spnego-negotiate">
<db:title>SPNEGO/Negotiate</db:title>
<db:para>This authentication mechanism currently supports no incoming or outgoing options.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslsocket.xml">QSslSocket</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAuthenticator">
<db:title>QAuthenticator::QAuthenticator()</db:title>
<db:constructorsynopsis>
<db:methodname>QAuthenticator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAuthenticator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty authentication object.</db:para>
</db:section>
<db:section xml:id="QAuthenticator-1">
<db:title>QAuthenticator::QAuthenticator(const QAuthenticator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAuthenticator</db:methodname>
<db:methodparam>
<db:type>const QAuthenticator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAuthenticator(const QAuthenticator &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAuthenticator">
<db:title>QAuthenticator::~QAuthenticator()</db:title>
<db:destructorsynopsis>
<db:methodname>~QAuthenticator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAuthenticator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs the object.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QAuthenticator::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the object has not been initialized. Returns false if non-const member functions have been called, or the content was constructed or copied from another initialized <db:link xlink:href="qauthenticator.xml">QAuthenticator</db:link> object.</db:para>
</db:section>
<db:section xml:id="option">
<db:title>QVariant QAuthenticator::option(const QString &amp;<db:emphasis>opt</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>option</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>opt</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant option(const QString &amp;opt) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value related to option <db:code role="parameter">opt</db:code> if it was set by the server. See the <db:link xlink:href="qauthenticator.xml#qauthenticator-options">Options section</db:link> for more information on incoming options. If option <db:code role="parameter">opt</db:code> isn't found, an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qauthenticator.xml#setOption">setOption</db:link>()</db:member>
<db:member><db:link xlink:href="qauthenticator.xml#options">options</db:link>()</db:member>
<db:member><db:link xlink:href="qauthenticator.xml#qauthenticator-options">QAuthenticator options</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="options">
<db:title>QVariantHash QAuthenticator::options() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariantHash</db:type>
<db:methodname>options</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariantHash options() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns all incoming options set in this <db:link xlink:href="qauthenticator.xml">QAuthenticator</db:link> object by parsing the server reply. See the <db:link xlink:href="qauthenticator.xml#qauthenticator-options">Options section</db:link> for more information on incoming options.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qauthenticator.xml#option">option</db:link>()</db:member>
<db:member><db:link xlink:href="qauthenticator.xml#qauthenticator-options">QAuthenticator options</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="password">
<db:title>QString QAuthenticator::password() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>password</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString password() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the password used for authentication.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qauthenticator.xml#setPassword">setPassword</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="realm">
<db:title>QString QAuthenticator::realm() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>realm</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString realm() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the realm requiring authentication.</db:para>
</db:section>
<db:section xml:id="setOption">
<db:title>void QAuthenticator::setOption(const QString &amp;<db:emphasis>opt</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOption</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>opt</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOption(const QString &amp;opt, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the outgoing option <db:code role="parameter">opt</db:code> to value <db:code role="parameter">value</db:code>. See the <db:link xlink:href="qauthenticator.xml#qauthenticator-options">Options section</db:link> for more information on outgoing options.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qauthenticator.xml#options">options</db:link>()</db:member>
<db:member><db:link xlink:href="qauthenticator.xml#option">option</db:link>()</db:member>
<db:member><db:link xlink:href="qauthenticator.xml#qauthenticator-options">QAuthenticator options</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPassword">
<db:title>void QAuthenticator::setPassword(const QString &amp;<db:emphasis>password</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPassword</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>password</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPassword(const QString &amp;password)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">password</db:code> used for authentication.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qauthenticator.xml#password">password</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#authenticationRequired">QNetworkAccessManager::authenticationRequired</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUser">
<db:title>void QAuthenticator::setUser(const QString &amp;<db:emphasis>user</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUser</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>user</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUser(const QString &amp;user)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">user</db:code> used for authentication.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qauthenticator.xml#user">user</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#authenticationRequired">QNetworkAccessManager::authenticationRequired</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="user">
<db:title>QString QAuthenticator::user() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>user</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString user() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the user used for authentication.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qauthenticator.xml#setUser">setUser</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QAuthenticator::operator!=(const QAuthenticator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QAuthenticator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QAuthenticator &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this authenticator is different from <db:code role="parameter">other</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QAuthenticator &amp;QAuthenticator::operator=(const QAuthenticator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QAuthenticator &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QAuthenticator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QAuthenticator &amp; operator=(const QAuthenticator &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the contents of <db:code role="parameter">other</db:code> to this authenticator.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QAuthenticator::operator==(const QAuthenticator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QAuthenticator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QAuthenticator &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this authenticator is identical to <db:code role="parameter">other</db:code>; otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
