<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Customizing Charts</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to customize the appearance of chart elements.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:note>
<db:para>This is part of the <db:link xlink:href="qtcharts-chartsgallery-example.xml">Charts with Widgets Gallery</db:link> example.</db:para>
</db:note>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_customchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We begin by creating a simple line series and a chart object.</db:para>
<db:programlisting language="cpp">auto series = new QLineSeries;
*series &amp;lt;&amp;lt; QPointF(0, 6) &amp;lt;&amp;lt; QPointF(9, 4) &amp;lt;&amp;lt; QPointF(15, 20) &amp;lt;&amp;lt; QPointF(25, 12) &amp;lt;&amp;lt; QPointF(29, 26);
auto chart = new QChart;
chart-&amp;gt;legend()-&amp;gt;hide();
chart-&amp;gt;addSeries(series);
</db:programlisting>
<db:para>First we customize the series and the chart's title and background.</db:para>
<db:programlisting language="cpp">// Customize series
QPen pen(QRgb(0xfdb157));
pen.setWidth(5);
series-&amp;gt;setPen(pen);

// Customize chart title
QFont font;
font.setPixelSize(18);
chart-&amp;gt;setTitleFont(font);
chart-&amp;gt;setTitleBrush(QBrush(Qt::white));
chart-&amp;gt;setTitle(&quot;Custom Chart&quot;);

// Customize chart background
QLinearGradient backgroundGradient;
backgroundGradient.setStart(QPointF(0, 0));
backgroundGradient.setFinalStop(QPointF(0, 1));
backgroundGradient.setColorAt(0.0, QRgb(0xd2d0d1));
backgroundGradient.setColorAt(1.0, QRgb(0x4c4547));
backgroundGradient.setCoordinateMode(QGradient::ObjectBoundingMode);
chart-&amp;gt;setBackgroundBrush(backgroundGradient);

// Customize plot area background
QLinearGradient plotAreaGradient;
plotAreaGradient.setStart(QPointF(0, 1));
plotAreaGradient.setFinalStop(QPointF(1, 0));
plotAreaGradient.setColorAt(0.0, QRgb(0x555555));
plotAreaGradient.setColorAt(1.0, QRgb(0x55aa55));
plotAreaGradient.setCoordinateMode(QGradient::ObjectBoundingMode);
chart-&amp;gt;setPlotAreaBackgroundBrush(plotAreaGradient);
chart-&amp;gt;setPlotAreaBackgroundVisible(true);
</db:programlisting>
<db:para>Then we customize the axes.</db:para>
<db:programlisting language="cpp">auto axisX = new QCategoryAxis;
auto axisY = new QCategoryAxis;

// Customize axis label font
QFont labelsFont;
labelsFont.setPixelSize(12);
axisX-&amp;gt;setLabelsFont(labelsFont);
axisY-&amp;gt;setLabelsFont(labelsFont);

// Customize axis colors
QPen axisPen(QRgb(0xd18952));
axisPen.setWidth(2);
axisX-&amp;gt;setLinePen(axisPen);
axisY-&amp;gt;setLinePen(axisPen);

// Customize axis label colors
QBrush axisBrush(Qt::white);
axisX-&amp;gt;setLabelsBrush(axisBrush);
axisY-&amp;gt;setLabelsBrush(axisBrush);

// Customize grid lines and shades
axisX-&amp;gt;setGridLineVisible(false);
axisY-&amp;gt;setGridLineVisible(false);
axisY-&amp;gt;setShadesPen(Qt::NoPen);
axisY-&amp;gt;setShadesBrush(QBrush(QColor(0x99, 0xcc, 0xcc, 0x55)));
axisY-&amp;gt;setShadesVisible(true);
</db:programlisting>
<db:para>Then the axis label values and ranges. Once the axes are ready, we set them to be used by the chart.</db:para>
<db:programlisting language="cpp">axisX-&amp;gt;append(&quot;low&quot;, 10);
axisX-&amp;gt;append(&quot;optimal&quot;, 20);
axisX-&amp;gt;append(&quot;high&quot;, 30);
axisX-&amp;gt;setRange(0, 30);

axisY-&amp;gt;append(&quot;slow&quot;, 10);
axisY-&amp;gt;append(&quot;med&quot;, 20);
axisY-&amp;gt;append(&quot;fast&quot;, 30);
axisY-&amp;gt;setRange(0, 30);

chart-&amp;gt;addAxis(axisX, Qt::AlignBottom);
chart-&amp;gt;addAxis(axisY, Qt::AlignLeft);
series-&amp;gt;attachAxis(axisX);
series-&amp;gt;attachAxis(axisY);
</db:programlisting>
<db:para>Finally, we create a view containing the chart.</db:para>
<db:programlisting language="cpp">createDefaultChartView(chart);
</db:programlisting>
<db:para>Now we are ready to show the chart on a main window.</db:para>
</db:article>
