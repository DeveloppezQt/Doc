<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QComboBox Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcombobox.xml">QComboBox</db:link> widget combines a button with a dropdown list.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QComboBox</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qfontcombobox.xml" xlink:role="class">QFontComboBox</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QComboBox is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:figure>
<db:title>Collapsed QCombobox</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/collapsed_combobox.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
<db:td>
<db:figure>
<db:title>Expanded QCombobox</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/expanded_combobox.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="display-features">
<db:title>Display Features</db:title>
<db:para>A <db:link xlink:href="qcombobox.xml">QComboBox</db:link> is a compact way to present a list of options to the user.</db:para>
<db:para>A combobox is a selection widget that shows the current item, and pops up a list of selectable items when clicked. Comboboxes can contain pixmaps as well as strings if the <db:link xlink:href="qcombobox.xml#insertItem">insertItem</db:link>() and <db:link xlink:href="qcombobox.xml#setItemText">setItemText</db:link>() functions are suitably overloaded.</db:para>
</db:section>
<db:section xml:id="editing-features">
<db:title>Editing Features</db:title>
<db:para>A combobox may be editable, allowing the user to modify each item in the list. For editable comboboxes, the function <db:link xlink:href="qcombobox.xml#clearEditText">clearEditText</db:link>() is provided, to clear the displayed string without changing the combobox's contents.</db:para>
<db:para>When the user enters a new string in an editable combobox, the widget may or may not insert it, and it can insert it in several locations. The default policy is <db:link xlink:href="qcombobox.xml#InsertPolicy-enum">InsertAtBottom</db:link> but you can change this using <db:link xlink:href="qcombobox.xml#insertPolicy-prop">setInsertPolicy</db:link>().</db:para>
<db:para>It is possible to constrain the input to an editable combobox using <db:link xlink:href="qvalidator.xml">QValidator</db:link>; see <db:link xlink:href="qcombobox.xml#setValidator">setValidator</db:link>(). By default, any input is accepted.</db:para>
<db:para>A combobox can be populated using the insert functions, <db:link xlink:href="qcombobox.xml#insertItem">insertItem</db:link>() and <db:link xlink:href="qcombobox.xml#insertItems">insertItems</db:link>() for example. Items can be changed with <db:link xlink:href="qcombobox.xml#setItemText">setItemText</db:link>(). An item can be removed with <db:link xlink:href="qcombobox.xml#removeItem">removeItem</db:link>() and all items can be removed with <db:link xlink:href="qcombobox.xml#clear">clear</db:link>(). The text of the current item is returned by <db:link xlink:href="qcombobox.xml#currentText-prop">currentText</db:link>(), and the text of a numbered item is returned with text(). The current item can be set with <db:link xlink:href="qcombobox.xml#currentIndex-prop">setCurrentIndex</db:link>(). The number of items in the combobox is returned by <db:link xlink:href="qcombobox.xml#count-prop">count</db:link>(); the maximum number of items can be set with <db:link xlink:href="qcombobox.xml#maxCount-prop">setMaxCount</db:link>(). You can allow editing using <db:link xlink:href="qcombobox.xml#editable-prop">setEditable</db:link>(). For editable comboboxes you can set auto-completion using <db:link xlink:href="qcombobox.xml#setCompleter">setCompleter</db:link>() and whether or not the user can add duplicates is set with <db:link xlink:href="qcombobox.xml#duplicatesEnabled-prop">setDuplicatesEnabled</db:link>().</db:para>
</db:section>
<db:section xml:id="signals">
<db:title>Signals</db:title>
<db:para>There are three signals emitted if the current item of a combobox changes: <db:link xlink:href="qcombobox.xml#currentIndexChanged">currentIndexChanged</db:link>(), <db:link xlink:href="qcombobox.xml#currentTextChanged">currentTextChanged</db:link>(), and <db:link xlink:href="qcombobox.xml#activated">activated</db:link>(). <db:link xlink:href="qcombobox.xml#currentIndexChanged">currentIndexChanged</db:link>() and <db:link xlink:href="qcombobox.xml#currentTextChanged">currentTextChanged</db:link>() are always emitted regardless if the change was done programmatically or by user interaction, while <db:link xlink:href="qcombobox.xml#activated">activated</db:link>() is only emitted when the change is caused by user interaction. The <db:link xlink:href="qcombobox.xml#highlighted">highlighted</db:link>() signal is emitted when the user highlights an item in the combobox popup list. All three signals exist in two versions, one with a <db:link xlink:href="qstring.xml">QString</db:link> argument and one with an <db:code>int</db:code> argument. If the user selects or highlights a pixmap, only the <db:code>int</db:code> signals are emitted. Whenever the text of an editable combobox is changed, the <db:link xlink:href="qcombobox.xml#editTextChanged">editTextChanged</db:link>() signal is emitted.</db:para>
</db:section>
<db:section xml:id="model-view-framework">
<db:title>Model/View Framework</db:title>
<db:para><db:link xlink:href="qcombobox.xml">QComboBox</db:link> uses the <db:link xlink:href="model-view-programming.xml">model/view framework</db:link> for its popup list and to store its items. By default a <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link> stores the items and a <db:link xlink:href="qlistview.xml">QListView</db:link> subclass displays the popuplist. You can access the model and view directly (with <db:link xlink:href="qcombobox.xml#model">model</db:link>() and <db:link xlink:href="qcombobox.xml#view">view</db:link>()), but <db:link xlink:href="qcombobox.xml">QComboBox</db:link> also provides functions to set and get item data, for example, <db:link xlink:href="qcombobox.xml#setItemData">setItemData</db:link>() and <db:link xlink:href="qcombobox.xml#itemText">itemText</db:link>(). You can also set a new model and view (with <db:link xlink:href="qcombobox.xml#setModel">setModel</db:link>() and <db:link xlink:href="qcombobox.xml#setView">setView</db:link>()). For the text and icon in the combobox label, the data in the model that has the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> and <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DecorationRole</db:link> is used.</db:para>
<db:note>
<db:para>You cannot alter the <db:link xlink:href="qabstractitemview.xml#SelectionMode-enum">SelectionMode</db:link> of the <db:link xlink:href="qcombobox.xml#view">view</db:link>(), for example, by using <db:link xlink:href="qabstractitemview.xml#selectionMode-prop">setSelectionMode</db:link>().</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:member>
<db:member><db:link xlink:href="qspinbox.xml">QSpinBox</db:link></db:member>
<db:member><db:link xlink:href="qradiobutton.xml">QRadioButton</db:link></db:member>
<db:member><db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="InsertPolicy-enum">
<db:title>enum QComboBox::InsertPolicy</db:title>
<db:para>This enum specifies what the <db:link xlink:href="qcombobox.xml">QComboBox</db:link> should do when a new string is entered by the user.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:emphasis>::NoInsert</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The string will not be inserted into the combobox.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:emphasis>::InsertAtTop</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The string will be inserted as the first item in the combobox.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:emphasis>::InsertAtCurrent</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The current item will be <db:emphasis>replaced</db:emphasis> by the string.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:emphasis>::InsertAtBottom</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The string will be inserted after the last item in the combobox.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:emphasis>::InsertAfterCurrent</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The string is inserted after the current item in the combobox.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:emphasis>::InsertBeforeCurrent</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The string is inserted before the current item in the combobox.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:emphasis>::InsertAlphabetically</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The string is inserted in the alphabetic order in the combobox.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="LabelDrawingMode-enum">
<db:title>[since 6.9] enum QComboBox::LabelDrawingMode</db:title>
<db:para>This enum specifies how the combobox draws its label.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:emphasis>::<db:emphasis role="bold">LabelDrawingMode</db:emphasis>::UseStyle</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The combobox uses the <db:link xlink:href="qstyle.xml">style</db:link> to draw its label.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:emphasis>::<db:emphasis role="bold">LabelDrawingMode</db:emphasis>::UseDelegate</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The combobox uses the <db:link xlink:href="qcombobox.xml#itemDelegate">item delegate</db:link> to draw the label. Set a suitable item delegate when using this mode.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 6.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#labelDrawingMode-prop">labelDrawingMode</db:link></db:member>
<db:member><db:link xlink:href="qtsql-books-example.xml">Books example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="SizeAdjustPolicy-enum">
<db:title>enum QComboBox::SizeAdjustPolicy</db:title>
<db:para>This enum specifies how the size hint of the <db:link xlink:href="qcombobox.xml">QComboBox</db:link> should adjust when new content is added or content changes.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:emphasis>::AdjustToContents</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The combobox will always adjust to the contents</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:emphasis>::AdjustToContentsOnFirstShow</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The combobox will adjust to its contents the first time it is shown.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:emphasis>::AdjustToMinimumContentsLengthWithIcon</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The combobox will adjust to <db:link xlink:href="qcombobox.xml#minimumContentsLength-prop">minimumContentsLength</db:link> plus space for an icon. For performance reasons use this policy on large models.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>[read-only] count : const int</db:title>
<db:para>This property holds the number of items in the combobox.</db:para>
<db:para>By default, for an empty combo box, this property has a value of 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">count</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="currentData-prop">
<db:title>[read-only] currentData : const QVariant</db:title>
<db:para>This property holds the data for the current item</db:para>
<db:para>By default, for an empty combo box or a combo box in which no current item is set, this property contains an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvariant.xml">QVariant</db:link></db:type> <db:emphasis role="bold">currentData</db:emphasis>(<db:type>int</db:type> <db:emphasis>role</db:emphasis> = Qt::UserRole) const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : int</db:title>
<db:para>This property holds the index of the current item in the combobox.</db:para>
<db:para>The current index can change when inserting or removing items.</db:para>
<db:para>By default, for an empty combo box or a combo box in which no current item is set, this property has a value of -1.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">currentIndex</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCurrentIndex</db:emphasis>(<db:type>int</db:type> <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcombobox.xml#currentIndexChanged">currentIndexChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="currentText-prop">
<db:title>currentText : QString</db:title>
<db:para>This property holds the current text</db:para>
<db:para>If the combo box is editable, the current text is the value displayed by the line edit. Otherwise, it is the value of the current item or an empty string if the combo box is empty or no current item is set.</db:para>
<db:para>The setter setCurrentText() simply calls <db:link xlink:href="qcombobox.xml#setEditText">setEditText</db:link>() if the combo box is editable. Otherwise, if there is a matching text in the list, <db:link xlink:href="qcombobox.xml#currentIndex-prop">currentIndex</db:link> is set to the corresponding index.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">currentText</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCurrentText</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>text</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcombobox.xml#currentTextChanged">currentTextChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>text</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#editable-prop">editable</db:link></db:member>
<db:member><db:link xlink:href="qcombobox.xml#setEditText">setEditText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="duplicatesEnabled-prop">
<db:title>duplicatesEnabled : bool</db:title>
<db:para>This property holds whether the user can enter duplicate items into the combobox.</db:para>
<db:para>Note that it is always possible to programmatically insert duplicate items into the combobox.</db:para>
<db:para>By default, this property is <db:code>false</db:code> (duplicates are not allowed).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">duplicatesEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDuplicatesEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="editable-prop">
<db:title>editable : bool</db:title>
<db:para>This property holds whether the combo box can be edited by the user.</db:para>
<db:para>By default, this property is <db:code>false</db:code>. The effect of editing depends on the insert policy.</db:para>
<db:note>
<db:para>When disabling the <db:code role="parameter">editable</db:code> state, the validator and completer are removed.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isEditable</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setEditable</db:emphasis>(<db:type>bool</db:type> <db:emphasis>editable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#InsertPolicy-enum">InsertPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frame-prop">
<db:title>frame : bool</db:title>
<db:para>This property holds whether the combo box draws itself with a frame.</db:para>
<db:para>If enabled (the default) the combo box draws itself inside a frame, otherwise the combo box draws itself without any frame.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasFrame</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFrame</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="iconSize-prop">
<db:title>iconSize : QSize</db:title>
<db:para>This property holds the size of the icons shown in the combobox.</db:para>
<db:para>Unless explicitly set this returns the default value of the current style. This size is the maximum size that icons can have; icons of smaller size are not scaled up.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">iconSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setIconSize</db:emphasis>(const <db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="insertPolicy-prop">
<db:title>insertPolicy : InsertPolicy</db:title>
<db:para>This property holds the policy used to determine where user-inserted items should appear in the combobox.</db:para>
<db:para>The default value is <db:link xlink:href="qcombobox.xml#InsertPolicy-enum">InsertAtBottom</db:link>, indicating that new items will appear at the bottom of the list of items.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcombobox.xml#InsertPolicy-enum">QComboBox::InsertPolicy</db:link></db:type> <db:emphasis role="bold">insertPolicy</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setInsertPolicy</db:emphasis>(<db:type><db:link xlink:href="qcombobox.xml#InsertPolicy-enum">QComboBox::InsertPolicy</db:link></db:type> <db:emphasis>policy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#InsertPolicy-enum">InsertPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelDrawingMode-prop">
<db:title>[since 6.9] labelDrawingMode : LabelDrawingMode</db:title>
<db:para>This property holds the mode used by the combobox to draw its label.</db:para>
<db:para>The default value is <db:link xlink:href="qcombobox.xml#LabelDrawingMode-enum">UseStyle</db:link>. When changing this property to <db:link xlink:href="qcombobox.xml#LabelDrawingMode-enum">UseDelegate</db:link>, make sure to also set a suitable <db:link xlink:href="qcombobox.xml#itemDelegate">item delegate</db:link>. The default delegate depends on the style and might not be suitable for drawing the label.</db:para>
<db:para>This property was introduced in Qt 6.9.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcombobox.xml#LabelDrawingMode-enum">QComboBox::LabelDrawingMode</db:link></db:type> <db:emphasis role="bold">labelDrawingMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLabelDrawingMode</db:emphasis>(<db:type><db:link xlink:href="qcombobox.xml#LabelDrawingMode-enum">QComboBox::LabelDrawingMode</db:link></db:type> <db:emphasis>labelDrawing</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtsql-books-example.xml">Books example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maxCount-prop">
<db:title>maxCount : int</db:title>
<db:para>This property holds the maximum number of items allowed in the combobox.</db:para>
<db:note>
<db:para>If you set the maximum number to be less then the current amount of items in the combobox, the extra items will be truncated. This also applies if you have set an external model on the combobox.</db:para>
</db:note>
<db:para>By default, this property's value is derived from the highest signed integer available (typically 2147483647).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxCount</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaxCount</db:emphasis>(<db:type>int</db:type> <db:emphasis>max</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxVisibleItems-prop">
<db:title>maxVisibleItems : int</db:title>
<db:para>This property holds the maximum allowed size on screen of the combo box, measured in items</db:para>
<db:para>By default, this property has a value of 10.</db:para>
<db:note>
<db:para>This property is ignored for non-editable comboboxes in styles that returns true for <db:link xlink:href="qstyle.xml#StyleHint-enum">QStyle::SH_ComboBox_Popup</db:link> such as the Mac style or the Gtk+ Style.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxVisibleItems</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaxVisibleItems</db:emphasis>(<db:type>int</db:type> <db:emphasis>maxItems</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="minimumContentsLength-prop">
<db:title>minimumContentsLength : int</db:title>
<db:para>This property holds the minimum number of characters that should fit into the combobox.</db:para>
<db:para>The default value is 0.</db:para>
<db:para>If this property is set to a positive value, the <db:link xlink:href="qcombobox.xml#minimumSizeHint">minimumSizeHint</db:link>() and <db:link xlink:href="qcombobox.xml#sizeHint">sizeHint</db:link>() take it into account.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">minimumContentsLength</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinimumContentsLength</db:emphasis>(<db:type>int</db:type> <db:emphasis>characters</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#sizeAdjustPolicy-prop">sizeAdjustPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modelColumn-prop">
<db:title>modelColumn : int</db:title>
<db:para>This property holds the column in the model that is visible.</db:para>
<db:para>If set prior to populating the combo box, the pop-up view will not be affected and will show the first column (using this property's default value).</db:para>
<db:para>By default, this property has a value of 0.</db:para>
<db:note>
<db:para>In an editable combobox, the visible column will also become the <db:link xlink:href="qcompleter.xml#completionColumn-prop">completion column</db:link>.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">modelColumn</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setModelColumn</db:emphasis>(<db:type>int</db:type> <db:emphasis>visibleColumn</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="placeholderText-prop">
<db:title>placeholderText : QString</db:title>
<db:para>Sets a <db:code role="parameter">placeholderText</db:code> text shown when no valid index is set.</db:para>
<db:para>The <db:code role="parameter">placeholderText</db:code> will be shown when an invalid index is set. The text is not accessible in the dropdown list. When this function is called before items are added the placeholder text will be shown, otherwise you have to call <db:link xlink:href="qcombobox.xml#currentIndex-prop">setCurrentIndex</db:link>(-1) programmatically if you want to show the placeholder text. Set an empty placeholder text to reset the setting.</db:para>
<db:para>When the <db:link xlink:href="qcombobox.xml">QComboBox</db:link> is editable, use <db:link xlink:href="qlineedit.xml#placeholderText-prop">QLineEdit::setPlaceholderText</db:link>() instead.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">placeholderText</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPlaceholderText</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>placeholderText</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sizeAdjustPolicy-prop">
<db:title>sizeAdjustPolicy : SizeAdjustPolicy</db:title>
<db:para>This property holds the policy describing how the size of the combobox changes when the content changes.</db:para>
<db:para>The default value is <db:link xlink:href="qcombobox.xml#SizeAdjustPolicy-enum">AdjustToContentsOnFirstShow</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcombobox.xml#SizeAdjustPolicy-enum">QComboBox::SizeAdjustPolicy</db:link></db:type> <db:emphasis role="bold">sizeAdjustPolicy</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSizeAdjustPolicy</db:emphasis>(<db:type><db:link xlink:href="qcombobox.xml#SizeAdjustPolicy-enum">QComboBox::SizeAdjustPolicy</db:link></db:type> <db:emphasis>policy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#SizeAdjustPolicy-enum">SizeAdjustPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QComboBox">
<db:title>[explicit] QComboBox::QComboBox(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a combobox with the given <db:code role="parameter">parent</db:code>, using the default model <db:link xlink:href="qstandarditemmodel.xml">QStandardItemModel</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QComboBox">
<db:title>[virtual noexcept] QComboBox::~QComboBox()</db:title>
<db:para>Destroys the combobox.</db:para>
</db:section>
<db:section xml:id="activated">
<db:title>void QComboBox::activated(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is sent when the user chooses an item in the combobox. The item's <db:code role="parameter">index</db:code> is passed. Note that this signal is sent even when the choice is not changed. If you need to know when the choice actually changes, use signal <db:link xlink:href="qcombobox.xml#currentIndexChanged">currentIndexChanged</db:link>() or <db:link xlink:href="qcombobox.xml#currentTextChanged">currentTextChanged</db:link>().</db:para>
</db:section>
<db:section xml:id="addItem">
<db:title>void QComboBox::addItem(const QString &amp;<db:emphasis>text</db:emphasis>, const QVariant &amp;<db:emphasis>userData</db:emphasis> = QVariant())</db:title>
<db:para>Adds an item to the combobox with the given <db:code role="parameter">text</db:code>, and containing the specified <db:code role="parameter">userData</db:code> (stored in the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::UserRole</db:link>). The item is appended to the list of existing items.</db:para>
</db:section>
<db:section xml:id="addItem-1">
<db:title>void QComboBox::addItem(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, const QVariant &amp;<db:emphasis>userData</db:emphasis> = QVariant())</db:title>
<db:para>Adds an item to the combobox with the given <db:code role="parameter">icon</db:code> and <db:code role="parameter">text</db:code>, and containing the specified <db:code role="parameter">userData</db:code> (stored in the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::UserRole</db:link>). The item is appended to the list of existing items.</db:para>
</db:section>
<db:section xml:id="addItems">
<db:title>void QComboBox::addItems(const QStringList &amp;<db:emphasis>texts</db:emphasis>)</db:title>
<db:para>Adds each of the strings in the given <db:code role="parameter">texts</db:code> to the combobox. Each item is appended to the list of existing items in turn.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QComboBox::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QComboBox::clear()</db:title>
<db:para>Clears the combobox, removing all items.</db:para>
<db:para>Note: If you have set an external model on the combobox this model will still be cleared when calling this function.</db:para>
</db:section>
<db:section xml:id="clearEditText">
<db:title>void QComboBox::clearEditText()</db:title>
<db:para>Clears the contents of the line edit used for editing in the combobox.</db:para>
</db:section>
<db:section xml:id="completer">
<db:title>QCompleter *QComboBox::completer() const</db:title>
<db:para>Returns the completer that is used to auto complete text input for the combobox.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#setCompleter">setCompleter</db:link>()</db:member>
<db:member><db:link xlink:href="qcombobox.xml#editable-prop">editable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QComboBox::contextMenuEvent(QContextMenuEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#contextMenuEvent" role="function">QWidget::contextMenuEvent(QContextMenuEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="currentIndexChanged">
<db:title>void QComboBox::currentIndexChanged(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is sent whenever the <db:link xlink:href="qcombobox.xml#currentIndex-prop">currentIndex</db:link> in the combobox changes either through user interaction or programmatically. The item's <db:code role="parameter">index</db:code> is passed or -1 if the combobox becomes empty or the <db:link xlink:href="qcombobox.xml#currentIndex-prop">currentIndex</db:link> was reset.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcombobox.xml#currentIndex-prop">currentIndex</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="currentTextChanged">
<db:title>void QComboBox::currentTextChanged(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever <db:link xlink:href="qcombobox.xml#currentText-prop">currentText</db:link> changes. The new value is passed as <db:code role="parameter">text</db:code>.</db:para>
<db:note>
<db:para>It is not emitted, if <db:link xlink:href="qcombobox.xml#currentText-prop">currentText</db:link> remains the same, even if <db:link xlink:href="qcombobox.xml#currentIndex-prop">currentIndex</db:link> changes.</db:para>
</db:note>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcombobox.xml#currentText-prop">currentText</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="editTextChanged">
<db:title>void QComboBox::editTextChanged(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This signal is emitted when the text in the combobox's line edit widget is changed. The new text is specified by <db:code role="parameter">text</db:code>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual] bool QComboBox::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="findData">
<db:title>int QComboBox::findData(const QVariant &amp;<db:emphasis>data</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::UserRole, Qt::MatchFlags <db:emphasis>flags</db:emphasis> = static_cast&lt;Qt::MatchFlags&gt;(Qt::MatchExactly|Qt::MatchCaseSensitive)) const</db:title>
<db:para>Returns the index of the item containing the given <db:code role="parameter">data</db:code> for the given <db:code role="parameter">role</db:code>; otherwise returns -1.</db:para>
<db:para>The <db:code role="parameter">flags</db:code> specify how the items in the combobox are searched.</db:para>
</db:section>
<db:section xml:id="findText">
<db:title>int QComboBox::findText(const QString &amp;<db:emphasis>text</db:emphasis>, Qt::MatchFlags <db:emphasis>flags</db:emphasis> = Qt::MatchExactly|Qt::MatchCaseSensitive) const</db:title>
<db:para>Returns the index of the item containing the given <db:code role="parameter">text</db:code>; otherwise returns -1.</db:para>
<db:para>The <db:code role="parameter">flags</db:code> specify how the items in the combobox are searched.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QComboBox::focusInEvent(QFocusEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QComboBox::focusOutEvent(QFocusEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[override virtual protected] void QComboBox::hideEvent(QHideEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#hideEvent" role="function">QWidget::hideEvent(QHideEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hidePopup">
<db:title>[virtual] void QComboBox::hidePopup()</db:title>
<db:para>Hides the list of items in the combobox if it is currently visible and resets the internal state, so that if the custom pop-up was shown inside the reimplemented <db:link xlink:href="qcombobox.xml#showPopup">showPopup</db:link>(), then you also need to reimplement the hidePopup() function to hide your custom pop-up and call the base class implementation to reset the internal state whenever your custom pop-up widget is hidden.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#showPopup">showPopup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="highlighted">
<db:title>void QComboBox::highlighted(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is sent when an item in the combobox popup list is highlighted by the user. The item's <db:code role="parameter">index</db:code> is passed.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[virtual protected] void QComboBox::initStyleOption(QStyleOptionComboBox *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qcombobox.xml">QComboBox</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptioncombobox.xml">QStyleOptionComboBox</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodEvent">
<db:title>[override virtual protected] void QComboBox::inputMethodEvent(QInputMethodEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodEvent" role="function">QWidget::inputMethodEvent(QInputMethodEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="inputMethodQuery">
<db:title>[override virtual] QVariant QComboBox::inputMethodQuery(Qt::InputMethodQuery <db:emphasis>query</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodQuery" role="function">QWidget::inputMethodQuery(Qt::InputMethodQuery query) const</db:link>.</db:para>
</db:section>
<db:section xml:id="insertItem">
<db:title>void QComboBox::insertItem(int <db:emphasis>index</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, const QVariant &amp;<db:emphasis>userData</db:emphasis> = QVariant())</db:title>
<db:para>Inserts the <db:code role="parameter">text</db:code> and <db:code role="parameter">userData</db:code> (stored in the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::UserRole</db:link>) into the combobox at the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>If the index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If the index is zero or negative, the new item is prepended to the list of existing items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#insertItems">insertItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertItem-1">
<db:title>void QComboBox::insertItem(int <db:emphasis>index</db:emphasis>, const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, const QVariant &amp;<db:emphasis>userData</db:emphasis> = QVariant())</db:title>
<db:para>Inserts the <db:code role="parameter">icon</db:code>, <db:code role="parameter">text</db:code> and <db:code role="parameter">userData</db:code> (stored in the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::UserRole</db:link>) into the combobox at the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>If the index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If the index is zero or negative, the new item is prepended to the list of existing items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#insertItems">insertItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertItems">
<db:title>void QComboBox::insertItems(int <db:emphasis>index</db:emphasis>, const QStringList &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:para>Inserts the strings from the <db:code role="parameter">list</db:code> into the combobox as separate items, starting at the <db:code role="parameter">index</db:code> specified.</db:para>
<db:para>If the index is equal to or higher than the total number of items, the new items are appended to the list of existing items. If the index is zero or negative, the new items are prepended to the list of existing items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#insertItem">insertItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertSeparator">
<db:title>void QComboBox::insertSeparator(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Inserts a separator item into the combobox at the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>If the index is equal to or higher than the total number of items, the new item is appended to the list of existing items. If the index is zero or negative, the new item is prepended to the list of existing items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#insertItem">insertItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemData">
<db:title>QVariant QComboBox::itemData(int <db:emphasis>index</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::UserRole) const</db:title>
<db:para>Returns the data for the given <db:code role="parameter">role</db:code> in the given <db:code role="parameter">index</db:code> in the combobox, or an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> if there is no data for this role.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#setItemData">setItemData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemDelegate">
<db:title>QAbstractItemDelegate *QComboBox::itemDelegate() const</db:title>
<db:para>Returns the item delegate used by the popup list view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#setItemDelegate">setItemDelegate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemIcon">
<db:title>QIcon QComboBox::itemIcon(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the icon for the given <db:code role="parameter">index</db:code> in the combobox.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#setItemIcon">setItemIcon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemText">
<db:title>QString QComboBox::itemText(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the text for the given <db:code role="parameter">index</db:code> in the combobox.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#setItemText">setItemText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QComboBox::keyPressEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[override virtual protected] void QComboBox::keyReleaseEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyReleaseEvent" role="function">QWidget::keyReleaseEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="lineEdit">
<db:title>QLineEdit *QComboBox::lineEdit() const</db:title>
<db:para>Returns the line edit used to edit items in the combobox, or <db:code>nullptr</db:code> if there is no line edit.</db:para>
<db:para>Only editable combo boxes have a line edit.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#setLineEdit">setLineEdit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QComboBox::minimumSizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#minimumSizeHint-prop" role="property">QWidget::minimumSizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="model">
<db:title>QAbstractItemModel *QComboBox::model() const</db:title>
<db:para>Returns the model used by the combobox.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#setModel">setModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QComboBox::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QComboBox::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QComboBox::paintEvent(QPaintEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="removeItem">
<db:title>void QComboBox::removeItem(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes the item at the given <db:code role="parameter">index</db:code> from the combobox. This will update the current index if the index is removed.</db:para>
<db:para>This function does nothing if <db:code role="parameter">index</db:code> is out of range.</db:para>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QComboBox::resizeEvent(QResizeEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="rootModelIndex">
<db:title>QModelIndex QComboBox::rootModelIndex() const</db:title>
<db:para>Returns the root model item index for the items in the combobox.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#setRootModelIndex">setRootModelIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCompleter">
<db:title>void QComboBox::setCompleter(QCompleter *<db:emphasis>completer</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">completer</db:code> to use instead of the current completer. If <db:code role="parameter">completer</db:code> is <db:code>nullptr</db:code>, auto completion is disabled.</db:para>
<db:para>By default, for an editable combo box, a <db:link xlink:href="qcompleter.xml">QCompleter</db:link> that performs case insensitive inline completion is automatically created.</db:para>
<db:note>
<db:para>The completer is removed when the <db:link xlink:href="qcombobox.xml#editable-prop">editable</db:link> property becomes <db:code>false</db:code>, or when the line edit is replaced by a call to <db:link xlink:href="qcombobox.xml#setLineEdit">setLineEdit</db:link>(). Setting a completer on a <db:link xlink:href="qcombobox.xml">QComboBox</db:link> that is not editable will be ignored.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#completer">completer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEditText">
<db:title>void QComboBox::setEditText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">text</db:code> in the combobox's text edit.</db:para>
</db:section>
<db:section xml:id="setItemData">
<db:title>void QComboBox::setItemData(int <db:emphasis>index</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::UserRole)</db:title>
<db:para>Sets the data <db:code role="parameter">role</db:code> for the item on the given <db:code role="parameter">index</db:code> in the combobox to the specified <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#itemData">itemData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemDelegate">
<db:title>void QComboBox::setItemDelegate(QAbstractItemDelegate *<db:emphasis>delegate</db:emphasis>)</db:title>
<db:para>Sets the item <db:code role="parameter">delegate</db:code> for the popup list view. The combobox takes ownership of the delegate.</db:para>
<db:para>Any existing delegate will be removed, but not deleted. <db:link xlink:href="qcombobox.xml">QComboBox</db:link> does not take ownership of <db:code role="parameter">delegate</db:code>.</db:para>
<db:warning>
<db:para>You should not share the same instance of a delegate between comboboxes, widget mappers or views. Doing so can cause incorrect or unintuitive editing behavior since each view connected to a given delegate may receive the <db:link xlink:href="qabstractitemdelegate.xml#closeEditor">closeEditor</db:link>() signal, and attempt to access, modify or close an editor that has already been closed.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#itemDelegate">itemDelegate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemIcon">
<db:title>void QComboBox::setItemIcon(int <db:emphasis>index</db:emphasis>, const QIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">icon</db:code> for the item on the given <db:code role="parameter">index</db:code> in the combobox.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#itemIcon">itemIcon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemText">
<db:title>void QComboBox::setItemText(int <db:emphasis>index</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">text</db:code> for the item on the given <db:code role="parameter">index</db:code> in the combobox.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#itemText">itemText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLineEdit">
<db:title>void QComboBox::setLineEdit(QLineEdit *<db:emphasis>edit</db:emphasis>)</db:title>
<db:para>Sets the line <db:code role="parameter">edit</db:code> to use instead of the current line edit widget.</db:para>
<db:para>The combo box takes ownership of the line edit.</db:para>
<db:note>
<db:para>Since the combobox's line edit owns the <db:link xlink:href="qcompleter.xml">QCompleter</db:link>, any previous call to <db:link xlink:href="qcombobox.xml#setCompleter">setCompleter</db:link>() will no longer have any effect.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#lineEdit">lineEdit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setModel">
<db:title>[virtual] void QComboBox::setModel(QAbstractItemModel *<db:emphasis>model</db:emphasis>)</db:title>
<db:para>Sets the model to be <db:code role="parameter">model</db:code>. <db:code role="parameter">model</db:code> must not be <db:code>nullptr</db:code>. If you want to clear the contents of a model, call <db:link xlink:href="qcombobox.xml#clear">clear</db:link>().</db:para>
<db:note>
<db:para>If the combobox is editable, then the <db:code role="parameter">model</db:code> will also be set on the completer of the line edit.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#model">model</db:link>()</db:member>
<db:member><db:link xlink:href="qcombobox.xml#clear">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qcombobox.xml#setCompleter">setCompleter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRootModelIndex">
<db:title>void QComboBox::setRootModelIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Sets the root model item <db:code role="parameter">index</db:code> for the items in the combobox.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#rootModelIndex">rootModelIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setValidator">
<db:title>void QComboBox::setValidator(const QValidator *<db:emphasis>validator</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">validator</db:code> to use instead of the current validator.</db:para>
<db:note>
<db:para>The validator is removed when the <db:link xlink:href="qcombobox.xml#editable-prop">editable</db:link> property becomes <db:code>false</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#validator">validator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setView">
<db:title>void QComboBox::setView(QAbstractItemView *<db:emphasis>itemView</db:emphasis>)</db:title>
<db:para>Sets the view to be used in the combobox popup to the given <db:code role="parameter">itemView</db:code>. The combobox takes ownership of the view.</db:para>
<db:para>Note: If you want to use the convenience views (like <db:link xlink:href="qlistwidget.xml">QListWidget</db:link>, <db:link xlink:href="qtablewidget.xml">QTableWidget</db:link> or <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link>), make sure to call <db:link xlink:href="qcombobox.xml#setModel">setModel</db:link>() on the combobox with the convenience widgets model before calling this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#view">view</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QComboBox::showEvent(QShowEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="showPopup">
<db:title>[virtual] void QComboBox::showPopup()</db:title>
<db:para>Displays the list of items in the combobox. If the list is empty then no items will be shown.</db:para>
<db:para>If you reimplement this function to show a custom pop-up, make sure you call <db:link xlink:href="qcombobox.xml#hidePopup">hidePopup</db:link>() to reset the internal state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#hidePopup">hidePopup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QComboBox::sizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
<db:para>This implementation caches the size hint to avoid resizing when the contents change dynamically. To invalidate the cached value change the <db:link xlink:href="qcombobox.xml#sizeAdjustPolicy-prop">sizeAdjustPolicy</db:link>.</db:para>
</db:section>
<db:section xml:id="textActivated">
<db:title>void QComboBox::textActivated(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This signal is sent when the user chooses an item in the combobox. The item's <db:code role="parameter">text</db:code> is passed. Note that this signal is sent even when the choice is not changed. If you need to know when the choice actually changes, use signal <db:link xlink:href="qcombobox.xml#currentIndexChanged">currentIndexChanged</db:link>() or <db:link xlink:href="qcombobox.xml#currentTextChanged">currentTextChanged</db:link>().</db:para>
</db:section>
<db:section xml:id="textHighlighted">
<db:title>void QComboBox::textHighlighted(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This signal is sent when an item in the combobox popup list is highlighted by the user. The item's <db:code role="parameter">text</db:code> is passed.</db:para>
</db:section>
<db:section xml:id="validator">
<db:title>const QValidator *QComboBox::validator() const</db:title>
<db:para>Returns the validator that is used to constrain text input for the combobox.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#setValidator">setValidator</db:link>()</db:member>
<db:member><db:link xlink:href="qcombobox.xml#editable-prop">editable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="view">
<db:title>QAbstractItemView *QComboBox::view() const</db:title>
<db:para>Returns the list view used for the combobox popup.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcombobox.xml#setView">setView</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QComboBox::wheelEvent(QWheelEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#wheelEvent" role="function">QWidget::wheelEvent(QWheelEvent *event)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
