<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDateTimeEdit Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link> class provides a widget for editing dates and times.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDateTimeEdit</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractspinbox.xml" xlink:role="class">QAbstractSpinBox</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdateedit.xml" xlink:role="class">QDateEdit</db:link> and <db:link xlink:href="qtimeedit.xml" xlink:role="class">QTimeEdit</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDateTimeEdit is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/windows-datetimeedit.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link> allows the user to edit dates by using the keyboard or the arrow keys to increase and decrease date and time values. The arrow keys can be used to move from section to section within the <db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link> box. Dates and times appear in accordance with the format set; see <db:link xlink:href="qdatetimeedit.xml#displayFormat-prop">setDisplayFormat</db:link>().</db:para>
<db:programlisting language="cpp">QDateTimeEdit *dateEdit = new QDateTimeEdit(QDate::currentDate());
dateEdit-&amp;gt;setMinimumDate(QDate::currentDate().addDays(-365));
dateEdit-&amp;gt;setMaximumDate(QDate::currentDate().addDays(365));
dateEdit-&amp;gt;setDisplayFormat(&quot;yyyy.MM.dd&quot;);
</db:programlisting>
<db:para>Here we've created a new <db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link> object initialized with today's date, and restricted the valid date range to today plus or minus 365 days. We've set the order to month, day, year.</db:para>
<db:para>The range of valid values for a <db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link> is controlled by the properties <db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link>, <db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">maximumDateTime</db:link>, and their respective date and time components. By default, any date-time from the start of 100 CE to the end of 9999 CE is valid.</db:para>
<db:section xml:id="using-a-pop-up-calendar-widget">
<db:title>Using a Pop-up Calendar Widget</db:title>
<db:para><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link> can be configured to allow a <db:link xlink:href="qcalendarwidget.xml">QCalendarWidget</db:link> to be used to select dates. This is enabled by setting the <db:link xlink:href="qdatetimeedit.xml#calendarPopup-prop">calendarPopup</db:link> property. Additionally, you can supply a custom calendar widget for use as the calendar pop-up by calling the <db:link xlink:href="qdatetimeedit.xml#setCalendarWidget">setCalendarWidget</db:link>() function. The existing calendar widget can be retrieved with <db:link xlink:href="qdatetimeedit.xml#calendarWidget">calendarWidget</db:link>().</db:para>
</db:section>
<db:section xml:id="keyboard-tracking">
<db:title>Keyboard Tracking</db:title>
<db:para>When <db:link xlink:href="qabstractspinbox.xml#keyboardTracking-prop">keyboard tracking</db:link> is enabled (the default), every keystroke of editing a field triggers signals for value changes.</db:para>
<db:para>When the allowed <db:link xlink:href="qdatetimeedit.xml#setDateTimeRange">range</db:link> is narrower than some time interval whose end it straddles, keyboard tracking prevents the user editing the date or time to access the later part of the interval. For example, for a range from 29.04.2020 to 02.05.2020 and an initial date of 30.04.2020, the user can change neither the month (May 30th is outside the range) nor the day (April 2nd is outside the range).</db:para>
<db:para>When keyboard tracking is disabled, changes are only signalled when focus leaves the text field after edits have modified the content. This allows the user to edit via an invalid date-time to reach a valid one.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdateedit.xml">QDateEdit</db:link></db:member>
<db:member><db:link xlink:href="qtimeedit.xml">QTimeEdit</db:link></db:member>
<db:member><db:link xlink:href="qdate.xml">QDate</db:link></db:member>
<db:member><db:link xlink:href="qtime.xml">QTime</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Section-enum">
<db:title>enum QDateTimeEdit::Section</db:title>
<db:bridgehead renderas="sect2">flags QDateTimeEdit::Sections</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Section</db:enumname>
<db:enumitem>
<db:enumidentifier>NoSection</db:enumidentifier>
<db:enumvalue>0x0000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AmPmSection</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MSecSection</db:enumidentifier>
<db:enumvalue>0x0002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SecondSection</db:enumidentifier>
<db:enumvalue>0x0004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MinuteSection</db:enumidentifier>
<db:enumvalue>0x0008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HourSection</db:enumidentifier>
<db:enumvalue>0x0010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DaySection</db:enumidentifier>
<db:enumvalue>0x0100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MonthSection</db:enumidentifier>
<db:enumvalue>0x0200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>YearSection</db:enumidentifier>
<db:enumvalue>0x0400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TimeSections_Mask</db:enumidentifier>
<db:enumvalue>AmPmSection|MSecSection|SecondSection|MinuteSection|HourSection</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DateSections_Mask</db:enumidentifier>
<db:enumvalue>DaySection|MonthSection|YearSection</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QDateTimeEdit::Sections</db:typedefname>
</db:typedefsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:emphasis>::NoSection</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:emphasis>::AmPmSection</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:emphasis>::MSecSection</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:emphasis>::SecondSection</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:emphasis>::MinuteSection</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:emphasis>::HourSection</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:emphasis>::DaySection</db:code></db:para>
</db:td>
<db:td><db:code>0x0100</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:emphasis>::MonthSection</db:code></db:para>
</db:td>
<db:td><db:code>0x0200</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:emphasis>::YearSection</db:code></db:para>
</db:td>
<db:td><db:code>0x0400</db:code></db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Sections</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Section&gt;. </db:code>It stores an OR combination of <db:code>Section</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="calendarPopup-prop">
<db:title>calendarPopup : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>calendarPopup</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">calendarPopup</db:synopsisinfo>
<db:synopsisinfo role="setter">setCalendarPopup</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current calendar pop-up show mode.</db:para>
<db:para>The calendar pop-up will be shown upon clicking the arrow button. This property is valid only if there is a valid date display format.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">calendarPopup</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCalendarPopup</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#displayFormat-prop">setDisplayFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentSection-prop">
<db:title>currentSection : Section</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Section</db:type>
<db:varname>currentSection</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentSection</db:synopsisinfo>
<db:synopsisinfo role="setter">setCurrentSection</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current section of the spinbox.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdatetimeedit.xml#Section-enum">QDateTimeEdit::Section</db:link></db:type> <db:emphasis role="bold">currentSection</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCurrentSection</db:emphasis>(<db:type><db:link xlink:href="qdatetimeedit.xml#Section-enum">QDateTimeEdit::Section</db:link></db:type> <db:emphasis>section</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="currentSectionIndex-prop">
<db:title>currentSectionIndex : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>currentSectionIndex</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentSectionIndex</db:synopsisinfo>
<db:synopsisinfo role="setter">setCurrentSectionIndex</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current section index of the spinbox.</db:para>
<db:para>If the format is 'yyyy/MM/dd', the displayText is '2001/05/21', and the cursorPosition is 5, currentSectionIndex returns 1. If the cursorPosition is 3, currentSectionIndex is 0, and so on.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">currentSectionIndex</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCurrentSectionIndex</db:emphasis>(<db:type>int</db:type> <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#currentSection-prop">setCurrentSection</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#currentSection-prop">currentSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="date-prop">
<db:title>date : QDate</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QDate</db:type>
<db:varname>date</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">date</db:synopsisinfo>
<db:synopsisinfo role="setter">setDate</db:synopsisinfo>
<db:synopsisinfo role="notifier">dateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the <db:link xlink:href="qdate.xml">QDate</db:link> that is set in the widget.</db:para>
<db:para>By default, this property contains a date that refers to January 1, 2000.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdate.xml">QDate</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qdatetimeedit.xml#date">date</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDate</db:emphasis>(<db:type><db:link xlink:href="qdate.xml">QDate</db:link></db:type> <db:emphasis>date</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qdatetimeedit.xml#dateChanged">dateChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qdate.xml">QDate</db:link></db:type> <db:emphasis>date</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#time">time</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#dateTime-prop">dateTime</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dateTime-prop">
<db:title>dateTime : QDateTime</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QDateTime</db:type>
<db:varname>dateTime</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">dateTime</db:synopsisinfo>
<db:synopsisinfo role="setter">setDateTime</db:synopsisinfo>
<db:synopsisinfo role="notifier">dateTimeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> that is set in the <db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link>.</db:para>
<db:para>When setting this property, the new <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is converted to the time system of the <db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link>, which thus remains unchanged.</db:para>
<db:para>By default, this property is set to the start of 2000 CE. It can only be set to a valid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> value. If any operation causes this property to have an invalid date-time as value, it is reset to the value of the <db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link> property.</db:para>
<db:para>If the <db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link> has no date fields, setting this property sets the widget's date-range to start and end on the date of the new value of this property.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:type> <db:emphasis role="bold">dateTime</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDateTime</db:emphasis>(const <db:type><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:type> &amp;<db:emphasis>dateTime</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qdatetimeedit.xml#dateTimeChanged">dateTimeChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:type> &amp;<db:emphasis>datetime</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#date">date</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#time">time</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">maximumDateTime</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="displayFormat-prop">
<db:title>displayFormat : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>displayFormat</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">displayFormat</db:synopsisinfo>
<db:synopsisinfo role="setter">setDisplayFormat</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the format used to display the time/date of the date time edit.</db:para>
<db:para>This format is described in <db:link xlink:href="qdatetime.xml#toString">QDateTime::toString</db:link>() and <db:link xlink:href="qdatetime.xml#fromString">QDateTime::fromString</db:link>()</db:para>
<db:para>Example format strings (assuming that the date is 2nd of July 1969):</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>dd.MM.yyyy</db:para>
</db:td>
<db:td>
<db:para>02.07.1969</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMM d yy</db:para>
</db:td>
<db:td>
<db:para>Jul 2 69</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMMM d yy</db:para>
</db:td>
<db:td>
<db:para>July 2 69</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that if you specify a two digit year, it will be interpreted to be in the century in which the date time edit was initialized. The default century is the 21st (2000-2099).</db:para>
<db:para>If you specify an invalid format the format will not be set.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">displayFormat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDisplayFormat</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toString">QDateTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#displayedSections-prop">displayedSections</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="displayedSections-prop">
<db:title>[read-only] displayedSections : const Sections</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Sections</db:type>
<db:varname>displayedSections</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">displayedSections</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the currently displayed fields of the date time edit.</db:para>
<db:para>Returns a bit set of the displayed sections for this format.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdatetimeedit.xml#Section-enum">QDateTimeEdit::Sections</db:link></db:type> <db:emphasis role="bold">displayedSections</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#displayFormat-prop">setDisplayFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#displayFormat-prop">displayFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumDate-prop">
<db:title>maximumDate : QDate</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QDate</db:type>
<db:varname>maximumDate</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maximumDate</db:synopsisinfo>
<db:synopsisinfo role="setter">setMaximumDate</db:synopsisinfo>
<db:synopsisinfo role="resetter">clearMaximumDate</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum date of the date time edit.</db:para>
<db:para>Changing this property updates the date of the <db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">maximumDateTime</db:link> property while preserving the <db:link xlink:href="qdatetimeedit.xml#maximumTime-prop">maximumTime</db:link> property. When setting this property, the <db:link xlink:href="qdatetimeedit.xml#minimumDate-prop">minimumDate</db:link> is adjusted, if necessary, to ensure that the range remains valid. When this happens, the <db:link xlink:href="qdatetimeedit.xml#minimumTime-prop">minimumTime</db:link> property is also adjusted if it is greater than the <db:link xlink:href="qdatetimeedit.xml#maximumTime-prop">maximumTime</db:link> property. Otherwise, changes to this property preserve the <db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link> property.</db:para>
<db:para>This property can only be set to a valid <db:link xlink:href="qdate.xml">QDate</db:link> object describing a date on which the current <db:link xlink:href="qdatetimeedit.xml#maximumTime-prop">maximumTime</db:link> property makes a valid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object. The latest date that setMaximumDate() accepts is the end of 9999 CE. This is the default for this property. This default can be restored with <db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">clearMaximumDateTime</db:link>().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdate.xml">QDate</db:link></db:type> <db:emphasis role="bold">maximumDate</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximumDate</db:emphasis>(<db:type><db:link xlink:href="qdate.xml">QDate</db:link></db:type> <db:emphasis>max</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">clearMaximumDate</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#minimumDate-prop">minimumDate</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#maximumTime-prop">maximumTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">maximumDateTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#setDateRange">setDateRange</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#isValid">QDate::isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#keyboard-tracking">Keyboard Tracking</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumDateTime-prop">
<db:title>maximumDateTime : QDateTime</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QDateTime</db:type>
<db:varname>maximumDateTime</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maximumDateTime</db:synopsisinfo>
<db:synopsisinfo role="setter">setMaximumDateTime</db:synopsisinfo>
<db:synopsisinfo role="resetter">clearMaximumDateTime</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum datetime of the date time edit.</db:para>
<db:para>Changing this property implicitly updates the <db:link xlink:href="qdatetimeedit.xml#maximumDate-prop">maximumDate</db:link> and <db:link xlink:href="qdatetimeedit.xml#maximumTime-prop">maximumTime</db:link> properties to the date and time parts of this property, respectively. When setting this property, the <db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link> is adjusted, if necessary, to ensure that the range remains valid. Otherwise, changing this property preserves the <db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link> property.</db:para>
<db:para>This property can only be set to a valid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> value. The latest date-time that setMaximumDateTime() accepts is the end of 9999 CE. This is the default for this property. This default can be restored with clearMaximumDateTime().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:type> <db:emphasis role="bold">maximumDateTime</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximumDateTime</db:emphasis>(const <db:type><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:type> &amp;<db:emphasis>dt</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">clearMaximumDateTime</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#maximumTime-prop">maximumTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#maximumDate-prop">maximumDate</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#setDateTimeRange">setDateTimeRange</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#isValid">QDateTime::isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#keyboard-tracking">Keyboard Tracking</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumTime-prop">
<db:title>maximumTime : QTime</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QTime</db:type>
<db:varname>maximumTime</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maximumTime</db:synopsisinfo>
<db:synopsisinfo role="setter">setMaximumTime</db:synopsisinfo>
<db:synopsisinfo role="resetter">clearMaximumTime</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum time of the date time edit.</db:para>
<db:para>Changing this property updates the time of the <db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">maximumDateTime</db:link> property while preserving the <db:link xlink:href="qdatetimeedit.xml#minimumDate-prop">minimumDate</db:link> and <db:link xlink:href="qdatetimeedit.xml#maximumDate-prop">maximumDate</db:link> properties. If those date properties coincide, when setting this property, the <db:link xlink:href="qdatetimeedit.xml#minimumTime-prop">minimumTime</db:link> property is adjusted, if necessary, to ensure that the range remains valid. Otherwise, changing this property preserves the <db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link> property.</db:para>
<db:para>This property can be set to any valid <db:link xlink:href="qtime.xml">QTime</db:link> value. By default, this property contains a time of 23:59:59 and 999 milliseconds. This default can be restored with clearMaximumTime().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtime.xml">QTime</db:link></db:type> <db:emphasis role="bold">maximumTime</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximumTime</db:emphasis>(<db:type><db:link xlink:href="qtime.xml">QTime</db:link></db:type> <db:emphasis>max</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">clearMaximumTime</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#minimumTime-prop">minimumTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#maximumDate-prop">maximumDate</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">maximumDateTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#setTimeRange">setTimeRange</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#isValid">QTime::isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#keyboard-tracking">Keyboard Tracking</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumDate-prop">
<db:title>minimumDate : QDate</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QDate</db:type>
<db:varname>minimumDate</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">minimumDate</db:synopsisinfo>
<db:synopsisinfo role="setter">setMinimumDate</db:synopsisinfo>
<db:synopsisinfo role="resetter">clearMinimumDate</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum date of the date time edit.</db:para>
<db:para>Changing this property updates the date of the <db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link> property while preserving the <db:link xlink:href="qdatetimeedit.xml#minimumTime-prop">minimumTime</db:link> property. When setting this property, the <db:link xlink:href="qdatetimeedit.xml#maximumDate-prop">maximumDate</db:link> is adjusted, if necessary, to ensure that the range remains valid. When this happens, the <db:link xlink:href="qdatetimeedit.xml#maximumTime-prop">maximumTime</db:link> property is also adjusted if it is less than the <db:link xlink:href="qdatetimeedit.xml#minimumTime-prop">minimumTime</db:link> property. Otherwise, changes to this property preserve the <db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">maximumDateTime</db:link> property.</db:para>
<db:para>This property can only be set to a valid <db:link xlink:href="qdate.xml">QDate</db:link> object describing a date on which the current <db:link xlink:href="qdatetimeedit.xml#minimumTime-prop">minimumTime</db:link> property makes a valid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object. The earliest date that setMinimumDate() accepts is the start of 100 CE. The default for this property is September 14, 1752 CE. This default can be restored with <db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">clearMinimumDateTime</db:link>().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdate.xml">QDate</db:link></db:type> <db:emphasis role="bold">minimumDate</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinimumDate</db:emphasis>(<db:type><db:link xlink:href="qdate.xml">QDate</db:link></db:type> <db:emphasis>min</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">clearMinimumDate</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#maximumDate-prop">maximumDate</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#minimumTime-prop">minimumTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#setDateRange">setDateRange</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#isValid">QDate::isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#keyboard-tracking">Keyboard Tracking</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumDateTime-prop">
<db:title>minimumDateTime : QDateTime</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QDateTime</db:type>
<db:varname>minimumDateTime</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">minimumDateTime</db:synopsisinfo>
<db:synopsisinfo role="setter">setMinimumDateTime</db:synopsisinfo>
<db:synopsisinfo role="resetter">clearMinimumDateTime</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum datetime of the date time edit.</db:para>
<db:para>Changing this property implicitly updates the <db:link xlink:href="qdatetimeedit.xml#minimumDate-prop">minimumDate</db:link> and <db:link xlink:href="qdatetimeedit.xml#minimumTime-prop">minimumTime</db:link> properties to the date and time parts of this property, respectively. When setting this property, the <db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">maximumDateTime</db:link> is adjusted, if necessary, to ensure that the range remains valid. Otherwise, changing this property preserves the <db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">maximumDateTime</db:link> property.</db:para>
<db:para>This property can only be set to a valid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> value. The earliest date-time that setMinimumDateTime() accepts is the start of 100 CE. The property's default is the start of September 14, 1752 CE. This default can be restored with clearMinimumDateTime().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:type> <db:emphasis role="bold">minimumDateTime</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinimumDateTime</db:emphasis>(const <db:type><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:type> &amp;<db:emphasis>dt</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">clearMinimumDateTime</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">maximumDateTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#minimumTime-prop">minimumTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#minimumDate-prop">minimumDate</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#setDateTimeRange">setDateTimeRange</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#isValid">QDateTime::isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#keyboard-tracking">Keyboard Tracking</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumTime-prop">
<db:title>minimumTime : QTime</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QTime</db:type>
<db:varname>minimumTime</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">minimumTime</db:synopsisinfo>
<db:synopsisinfo role="setter">setMinimumTime</db:synopsisinfo>
<db:synopsisinfo role="resetter">clearMinimumTime</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum time of the date time edit.</db:para>
<db:para>Changing this property updates the time of the <db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link> property while preserving the <db:link xlink:href="qdatetimeedit.xml#minimumDate-prop">minimumDate</db:link> and <db:link xlink:href="qdatetimeedit.xml#maximumDate-prop">maximumDate</db:link> properties. If those date properties coincide, when setting this property, the <db:link xlink:href="qdatetimeedit.xml#maximumTime-prop">maximumTime</db:link> property is adjusted, if necessary, to ensure that the range remains valid. Otherwise, changing this property preserves the <db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">maximumDateTime</db:link> property.</db:para>
<db:para>This property can be set to any valid <db:link xlink:href="qtime.xml">QTime</db:link> value. By default, this property contains a time of 00:00:00 and 0 milliseconds. This default can be restored with clearMinimumTime().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtime.xml">QTime</db:link></db:type> <db:emphasis role="bold">minimumTime</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinimumTime</db:emphasis>(<db:type><db:link xlink:href="qtime.xml">QTime</db:link></db:type> <db:emphasis>min</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">clearMinimumTime</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#maximumTime-prop">maximumTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#minimumDate-prop">minimumDate</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#setTimeRange">setTimeRange</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#isValid">QTime::isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#keyboard-tracking">Keyboard Tracking</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionCount-prop">
<db:title>[read-only] sectionCount : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>sectionCount</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">sectionCount</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of sections displayed. If the format is 'yyyy/yy/yyyy', sectionCount returns 3</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">sectionCount</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="time-prop">
<db:title>time : QTime</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QTime</db:type>
<db:varname>time</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">time</db:synopsisinfo>
<db:synopsisinfo role="setter">setTime</db:synopsisinfo>
<db:synopsisinfo role="notifier">timeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the <db:link xlink:href="qtime.xml">QTime</db:link> that is set in the widget.</db:para>
<db:para>By default, this property contains a time of 00:00:00 and 0 milliseconds.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtime.xml">QTime</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qdatetimeedit.xml#time">time</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTime</db:emphasis>(<db:type><db:link xlink:href="qtime.xml">QTime</db:link></db:type> <db:emphasis>time</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qdatetimeedit.xml#timeChanged">timeChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qtime.xml">QTime</db:link></db:type> <db:emphasis>time</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#date">date</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#dateTime-prop">dateTime</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeSpec-prop">
<db:title>timeSpec : Qt::TimeSpec</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::TimeSpec</db:type>
<db:varname>timeSpec</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">timeSpec</db:synopsisinfo>
<db:synopsisinfo role="setter">setTimeSpec</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current timespec used by the date time edit.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link></db:type> <db:emphasis role="bold">timeSpec</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTimeSpec</db:emphasis>(<db:type><db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link></db:type> <db:emphasis>spec</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDateTimeEdit">
<db:title>[explicit] QDateTimeEdit::QDateTimeEdit(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QDateTimeEdit</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTimeEdit(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty date time editor with a <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QDateTimeEdit-1">
<db:title>[explicit] QDateTimeEdit::QDateTimeEdit(const QDateTime &amp;<db:emphasis>datetime</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QDateTimeEdit</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>datetime</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTimeEdit(const QDateTime &amp;datetime, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty date time editor with a <db:code role="parameter">parent</db:code>. The value is set to <db:code role="parameter">datetime</db:code>.</db:para>
</db:section>
<db:section xml:id="QDateTimeEdit-2">
<db:title>[explicit] QDateTimeEdit::QDateTimeEdit(QDate <db:emphasis>date</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QDateTimeEdit</db:methodname>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>date</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTimeEdit(QDate date, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty date time editor with a <db:code role="parameter">parent</db:code>. The value is set to <db:code role="parameter">date</db:code>.</db:para>
</db:section>
<db:section xml:id="QDateTimeEdit-3">
<db:title>[explicit] QDateTimeEdit::QDateTimeEdit(QTime <db:emphasis>time</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QDateTimeEdit</db:methodname>
<db:methodparam>
<db:type>QTime</db:type>
<db:parameter>time</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTimeEdit(QTime time, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty date time editor with a <db:code role="parameter">parent</db:code>. The value is set to <db:code role="parameter">time</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QDateTimeEdit">
<db:title>[virtual] QDateTimeEdit::~QDateTimeEdit()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QDateTimeEdit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDateTimeEdit()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="calendarWidget">
<db:title>QCalendarWidget *QDateTimeEdit::calendarWidget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCalendarWidget *</db:type>
<db:methodname>calendarWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCalendarWidget * calendarWidget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the calendar widget for the editor if <db:link xlink:href="qdatetimeedit.xml#calendarPopup-prop">calendarPopup</db:link> is set to true and (sections() &amp; <db:link xlink:href="qdatetimeedit.xml#Section-enum">DateSections_Mask</db:link>) != 0.</db:para>
<db:para>This function creates and returns a calendar widget if none has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#setCalendarWidget">setCalendarWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>[override virtual] void QDateTimeEdit::clear()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#clear" role="function">QAbstractSpinBox::clear()</db:link>.</db:para>
</db:section>
<db:section xml:id="date">
<db:title>QDate QDateTimeEdit::date() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDate</db:type>
<db:methodname>date</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">date</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate date() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the date of the date time edit.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qdatetimeedit.xml#date-prop">date</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#date-prop">setDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dateChanged">
<db:title>void QDateTimeEdit::dateChanged(QDate <db:emphasis>date</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>dateChanged</db:methodname>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>date</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">date</db:synopsisinfo>
<db:synopsisinfo role="signature">void dateChanged(QDate date)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the date is changed. The new date is passed in <db:code role="parameter">date</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qdatetimeedit.xml#date-prop">date</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#keyboard-tracking">Keyboard Tracking</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dateTimeChanged">
<db:title>void QDateTimeEdit::dateTimeChanged(const QDateTime &amp;<db:emphasis>datetime</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>dateTimeChanged</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>datetime</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">dateTime</db:synopsisinfo>
<db:synopsisinfo role="signature">void dateTimeChanged(const QDateTime &amp;datetime)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the date or time is changed. The new date and time is passed in <db:code role="parameter">datetime</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qdatetimeedit.xml#dateTime-prop">dateTime</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#keyboard-tracking">Keyboard Tracking</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dateTimeFromText">
<db:title>[virtual protected] QDateTime QDateTimeEdit::dateTimeFromText(const QString &amp;<db:emphasis>text</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>dateTimeFromText</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime dateTimeFromText(const QString &amp;text) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an appropriate datetime for the given <db:code role="parameter">text</db:code>.</db:para>
<db:para>This virtual function is used by the datetime edit whenever it needs to interpret text entered by the user as a value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#textFromDateTime">textFromDateTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#validate">validate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual] bool QDateTimeEdit::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#event" role="function">QAbstractSpinBox::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="fixup">
<db:title>[override virtual protected] void QDateTimeEdit::fixup(QString &amp;<db:emphasis>input</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>fixup</db:methodname>
<db:methodparam>
<db:type>QString &amp;</db:type>
<db:parameter>input</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fixup(QString &amp;input) const override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#fixup" role="function">QAbstractSpinBox::fixup(QString &amp;input) const</db:link>.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QDateTimeEdit::focusInEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusInEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusInEvent(QFocusEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#focusInEvent" role="function">QAbstractSpinBox::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusNextPrevChild">
<db:title>[override virtual protected] bool QDateTimeEdit::focusNextPrevChild(bool <db:emphasis>next</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>focusNextPrevChild</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>next</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool focusNextPrevChild(bool next) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusNextPrevChild" role="function">QWidget::focusNextPrevChild(bool next)</db:link>.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[override virtual protected] void QDateTimeEdit::initStyleOption(QStyleOptionSpinBox *<db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>initStyleOption</db:methodname>
<db:methodparam>
<db:type>QStyleOptionSpinBox *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initStyleOption(QStyleOptionSpinBox *option) const override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#initStyleOption" role="function">QAbstractSpinBox::initStyleOption(QStyleOptionSpinBox *option) const</db:link>.</db:para>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this QDataTimeEdit. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptionspinbox.xml">QStyleOptionSpinBox</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QDateTimeEdit::keyPressEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyPressEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyPressEvent(QKeyEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#keyPressEvent" role="function">QAbstractSpinBox::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QDateTimeEdit::mousePressEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#mousePressEvent" role="function">QAbstractSpinBox::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QDateTimeEdit::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#paintEvent" role="function">QAbstractSpinBox::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sectionAt">
<db:title>QDateTimeEdit::Section QDateTimeEdit::sectionAt(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTimeEdit::Section</db:type>
<db:methodname>sectionAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTimeEdit::Section sectionAt(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Section at <db:code role="parameter">index</db:code>.</db:para>
<db:para>If the format is 'yyyy/MM/dd', sectionAt(0) returns <db:link xlink:href="qdatetimeedit.xml#Section-enum">YearSection</db:link>, sectionAt(1) returns <db:link xlink:href="qdatetimeedit.xml#Section-enum">MonthSection</db:link>, and sectionAt(2) returns <db:link xlink:href="qdatetimeedit.xml#Section-enum">YearSection</db:link>,</db:para>
</db:section>
<db:section xml:id="sectionText">
<db:title>QString QDateTimeEdit::sectionText(QDateTimeEdit::Section <db:emphasis>section</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>sectionText</db:methodname>
<db:methodparam>
<db:type>QDateTimeEdit::Section</db:type>
<db:parameter>section</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString sectionText(QDateTimeEdit::Section section) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text from the given <db:code role="parameter">section</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#currentSection-prop">currentSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCalendarWidget">
<db:title>void QDateTimeEdit::setCalendarWidget(QCalendarWidget *<db:emphasis>calendarWidget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCalendarWidget</db:methodname>
<db:methodparam>
<db:type>QCalendarWidget *</db:type>
<db:parameter>calendarWidget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCalendarWidget(QCalendarWidget *calendarWidget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the given <db:code role="parameter">calendarWidget</db:code> as the widget to be used for the calendar pop-up. The editor does not automatically take ownership of the calendar widget.</db:para>
<db:note>
<db:para><db:link xlink:href="qdatetimeedit.xml#calendarPopup-prop">calendarPopup</db:link> must be set to true before setting the calendar widget.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#calendarWidget">calendarWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#calendarPopup-prop">calendarPopup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDateRange">
<db:title>void QDateTimeEdit::setDateRange(QDate <db:emphasis>min</db:emphasis>, QDate <db:emphasis>max</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDateRange</db:methodname>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>min</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDate</db:type>
<db:parameter>max</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDateRange(QDate min, QDate max)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the range of allowed dates for the date time edit.</db:para>
<db:para>This convenience function sets the <db:link xlink:href="qdatetimeedit.xml#minimumDate-prop">minimumDate</db:link> and <db:link xlink:href="qdatetimeedit.xml#maximumDate-prop">maximumDate</db:link> properties.</db:para>
<db:programlisting language="cpp">setDateRange(min, max);
</db:programlisting>
<db:para>is analogous to:</db:para>
<db:programlisting language="cpp">setMinimumDate(min);
setMaximumDate(max);
</db:programlisting>
<db:para>If either <db:code role="parameter">min</db:code> or <db:code role="parameter">max</db:code> is invalid, this function does nothing. This function preserves the <db:link xlink:href="qdatetimeedit.xml#minimumTime-prop">minimumTime</db:link> property. If <db:code role="parameter">max</db:code> is less than <db:code role="parameter">min</db:code>, the new <db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">maximumDateTime</db:link> property shall be the new <db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link> property. If <db:code role="parameter">max</db:code> is equal to <db:code role="parameter">min</db:code> and the <db:link xlink:href="qdatetimeedit.xml#maximumTime-prop">maximumTime</db:link> property was less then the <db:link xlink:href="qdatetimeedit.xml#minimumTime-prop">minimumTime</db:link> property, the <db:link xlink:href="qdatetimeedit.xml#maximumTime-prop">maximumTime</db:link> property is set to the <db:link xlink:href="qdatetimeedit.xml#minimumTime-prop">minimumTime</db:link> property. Otherwise, this preserves the <db:link xlink:href="qdatetimeedit.xml#maximumTime-prop">maximumTime</db:link> property.</db:para>
<db:para>If the range is narrower then a time interval whose end it spans, for example a week that spans the end of a month, users can only edit the date to one in the later part of the range if keyboard-tracking is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#minimumDate-prop">minimumDate</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#maximumDate-prop">maximumDate</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#setDateTimeRange">setDateTimeRange</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#isValid">QDate::isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#keyboard-tracking">Keyboard Tracking</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDateTimeRange">
<db:title>void QDateTimeEdit::setDateTimeRange(const QDateTime &amp;<db:emphasis>min</db:emphasis>, const QDateTime &amp;<db:emphasis>max</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDateTimeRange</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>min</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>max</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDateTimeRange(const QDateTime &amp;min, const QDateTime &amp;max)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the range of allowed date-times for the date time edit.</db:para>
<db:para>This convenience function sets the <db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link> and <db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">maximumDateTime</db:link> properties.</db:para>
<db:programlisting language="cpp">setDateTimeRange(min, max);
</db:programlisting>
<db:para>is analogous to:</db:para>
<db:programlisting language="cpp">setMinimumDateTime(min);
setMaximumDateTime(max);
</db:programlisting>
<db:para>If either <db:code role="parameter">min</db:code> or <db:code role="parameter">max</db:code> is invalid, this function does nothing. If <db:code role="parameter">max</db:code> is less than <db:code role="parameter">min</db:code>, <db:code role="parameter">min</db:code> is used also as <db:code role="parameter">max</db:code>.</db:para>
<db:para>If the range is narrower then a time interval whose end it spans, for example a week that spans the end of a month, users can only edit the date-time to one in the later part of the range if keyboard-tracking is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#minimumDateTime-prop">minimumDateTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#maximumDateTime-prop">maximumDateTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#setDateRange">setDateRange</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#setTimeRange">setTimeRange</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#isValid">QDateTime::isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#keyboard-tracking">Keyboard Tracking</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelectedSection">
<db:title>void QDateTimeEdit::setSelectedSection(QDateTimeEdit::Section <db:emphasis>section</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSelectedSection</db:methodname>
<db:methodparam>
<db:type>QDateTimeEdit::Section</db:type>
<db:parameter>section</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSelectedSection(QDateTimeEdit::Section section)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Selects <db:code role="parameter">section</db:code>. If <db:code role="parameter">section</db:code> doesn't exist in the currently displayed sections, this function does nothing. If <db:code role="parameter">section</db:code> is <db:link xlink:href="qdatetimeedit.xml#Section-enum">NoSection</db:link>, this function will unselect all text in the editor. Otherwise, this function will move the cursor and the current section to the selected section.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#currentSection-prop">currentSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTimeRange">
<db:title>void QDateTimeEdit::setTimeRange(QTime <db:emphasis>min</db:emphasis>, QTime <db:emphasis>max</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTimeRange</db:methodname>
<db:methodparam>
<db:type>QTime</db:type>
<db:parameter>min</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTime</db:type>
<db:parameter>max</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTimeRange(QTime min, QTime max)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the range of allowed times for the date time edit.</db:para>
<db:para>This convenience function sets the <db:link xlink:href="qdatetimeedit.xml#minimumTime-prop">minimumTime</db:link> and <db:link xlink:href="qdatetimeedit.xml#maximumTime-prop">maximumTime</db:link> properties.</db:para>
<db:para>Note that these only constrain the date time edit's value on, respectively, the <db:link xlink:href="qdatetimeedit.xml#minimumDate-prop">minimumDate</db:link> and <db:link xlink:href="qdatetimeedit.xml#maximumDate-prop">maximumDate</db:link>. When these date properties do not coincide, times after <db:code role="parameter">max</db:code> are allowed on dates before <db:link xlink:href="qdatetimeedit.xml#maximumDate-prop">maximumDate</db:link> and times before <db:code role="parameter">min</db:code> are allowed on dates after <db:link xlink:href="qdatetimeedit.xml#minimumDate-prop">minimumDate</db:link>.</db:para>
<db:programlisting language="cpp">setTimeRange(min, max);
</db:programlisting>
<db:para>is analogous to:</db:para>
<db:programlisting language="cpp">setMinimumTime(min);
setMaximumTime(max);
</db:programlisting>
<db:para>If either <db:code role="parameter">min</db:code> or <db:code role="parameter">max</db:code> is invalid, this function does nothing. This function preserves the <db:link xlink:href="qdatetimeedit.xml#minimumDate-prop">minimumDate</db:link> and <db:link xlink:href="qdatetimeedit.xml#maximumDate-prop">maximumDate</db:link> properties. If those properties coincide and <db:code role="parameter">max</db:code> is less than <db:code role="parameter">min</db:code>, <db:code role="parameter">min</db:code> is used as <db:code role="parameter">max</db:code>.</db:para>
<db:para>If the range is narrower then a time interval whose end it spans, for example the interval from ten to an hour to ten past the same hour, users can only edit the time to one in the later part of the range if keyboard-tracking is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#minimumTime-prop">minimumTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#maximumTime-prop">maximumTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#setDateTimeRange">setDateTimeRange</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#isValid">QTime::isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#keyboard-tracking">Keyboard Tracking</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QDateTimeEdit::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#sizeHint" role="function">QAbstractSpinBox::sizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="stepBy">
<db:title>[override virtual] void QDateTimeEdit::stepBy(int <db:emphasis>steps</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>stepBy</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>steps</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stepBy(int steps) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#stepBy" role="function">QAbstractSpinBox::stepBy(int steps)</db:link>.</db:para>
</db:section>
<db:section xml:id="stepEnabled">
<db:title>[override virtual protected] QAbstractSpinBox::StepEnabled QDateTimeEdit::stepEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QAbstractSpinBox::StepEnabled</db:type>
<db:methodname>stepEnabled</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractSpinBox::StepEnabled stepEnabled() const override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#stepEnabled" role="function">QAbstractSpinBox::stepEnabled() const</db:link>.</db:para>
</db:section>
<db:section xml:id="textFromDateTime">
<db:title>[virtual protected] QString QDateTimeEdit::textFromDateTime(const QDateTime &amp;<db:emphasis>dateTime</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>textFromDateTime</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>dateTime</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString textFromDateTime(const QDateTime &amp;dateTime) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is used by the date time edit whenever it needs to display <db:code role="parameter">dateTime</db:code>.</db:para>
<db:para>If you reimplement this, you may also need to reimplement <db:link xlink:href="qdatetimeedit.xml#validate">validate</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#dateTimeFromText">dateTimeFromText</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml#validate">validate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="time">
<db:title>QTime QDateTimeEdit::time() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTime</db:type>
<db:methodname>time</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">time</db:synopsisinfo>
<db:synopsisinfo role="signature">QTime time() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the time of the date time edit.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qdatetimeedit.xml#time-prop">time</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#time-prop">setTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeChanged">
<db:title>void QDateTimeEdit::timeChanged(QTime <db:emphasis>time</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>timeChanged</db:methodname>
<db:methodparam>
<db:type>QTime</db:type>
<db:parameter>time</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">time</db:synopsisinfo>
<db:synopsisinfo role="signature">void timeChanged(QTime time)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the time is changed. The new time is passed in <db:code role="parameter">time</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qdatetimeedit.xml#time-prop">time</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetimeedit.xml#keyboard-tracking">Keyboard Tracking</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="validate">
<db:title>[override virtual protected] QValidator::State QDateTimeEdit::validate(QString &amp;<db:emphasis>text</db:emphasis>, int &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QValidator::State</db:type>
<db:methodname>validate</db:methodname>
<db:methodparam>
<db:type>QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QValidator::State validate(QString &amp;text, int &amp;pos) const override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#validate" role="function">QAbstractSpinBox::validate(QString &amp;input, int &amp;pos) const</db:link>.</db:para>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QDateTimeEdit::wheelEvent(QWheelEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>wheelEvent</db:methodname>
<db:methodparam>
<db:type>QWheelEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void wheelEvent(QWheelEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractspinbox.xml#wheelEvent" role="function">QAbstractSpinBox::wheelEvent(QWheelEvent *event)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
