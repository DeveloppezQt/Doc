<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QInputDialog Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qinputdialog.xml">QInputDialog</db:link> class provides a simple convenience dialog to get a single value from the user.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QInputDialog</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdialog.xml" xlink:role="class">QDialog</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QInputDialog is part of <db:simplelist><db:member><db:link xlink:href="standard-dialogs.xml">Standard Dialogs</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The input value can be a string, a number or an item from a list. A label must be set to tell the user what they should enter.</db:para>
<db:para>Five static convenience functions are provided: <db:link xlink:href="qinputdialog.xml#getText">getText</db:link>(), <db:link xlink:href="qinputdialog.xml#getMultiLineText">getMultiLineText</db:link>(), <db:link xlink:href="qinputdialog.xml#getInt">getInt</db:link>(), <db:link xlink:href="qinputdialog.xml#getDouble">getDouble</db:link>(), and <db:link xlink:href="qinputdialog.xml#getItem">getItem</db:link>(). All the functions can be used in a similar way, for example:</db:para>
<db:programlisting language="cpp">    bool ok;
    QString text = QInputDialog::getText(this, tr(&quot;QInputDialog::getText()&quot;),
                                         tr(&quot;User name:&quot;), QLineEdit::Normal,
                                         QDir::home().dirName(), &amp;ok);
    if (ok &amp;&amp; !text.isEmpty())
        textLabel-&gt;setText(text);
</db:programlisting>
<db:para>The <db:code>ok</db:code> variable is set to true if the user clicks <db:guilabel>OK</db:guilabel>; otherwise, it is set to false.</db:para>
<db:mediaobject>
<db:alt>Input Dialogs</db:alt>
<db:imageobject>
<db:imagedata fileref="images/inputdialogs.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qtwidgets-dialogs-standarddialogs-example.xml">Standard Dialogs</db:link> example shows how to use <db:link xlink:href="qinputdialog.xml">QInputDialog</db:link> as well as other built-in Qt dialogs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-standarddialogs-example.xml">Standard Dialogs Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="InputDialogOption-enum">
<db:title>[since 4.5] enum QInputDialog::InputDialogOption</db:title>
<db:bridgehead renderas="sect2">flags QInputDialog::InputDialogOptions</db:bridgehead>
<db:para>This enum specifies various options that affect the look and feel of an input dialog.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdialog.xml">QInputDialog</db:link></db:emphasis>::NoButtons</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Don't display <db:guilabel>OK</db:guilabel> and <db:guilabel>Cancel</db:guilabel> buttons (useful for &quot;live dialogs&quot;).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdialog.xml">QInputDialog</db:link></db:emphasis>::UseListViewForComboBoxItems</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Use a <db:link xlink:href="qlistview.xml">QListView</db:link> rather than a non-editable <db:link xlink:href="qcombobox.xml">QComboBox</db:link> for displaying the items set with setComboBoxItems().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdialog.xml">QInputDialog</db:link></db:emphasis>::UsePlainTextEditForTextInput</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>Use a <db:link xlink:href="qplaintextedit.xml">QPlainTextEdit</db:link> for multiline text input. This value was introduced in 5.2.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.5.</db:para>
<db:para>The <db:code>InputDialogOptions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;InputDialogOption&gt;. </db:code>It stores an OR combination of <db:code>InputDialogOption</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qauthenticator.xml#using-qt-test-remotely-on-windows-ce-options-13">options</db:link></db:member>
<db:member><db:link xlink:href="qinputdialog.xml#setOption">setOption</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="InputMode-enum">
<db:title>[since 4.5] enum QInputDialog::InputMode</db:title>
<db:para>This enum describes the different modes of input that can be selected for the dialog.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdialog.xml">QInputDialog</db:link></db:emphasis>::TextInput</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Used to input text strings.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdialog.xml">QInputDialog</db:link></db:emphasis>::IntInput</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Used to input integers.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qinputdialog.xml">QInputDialog</db:link></db:emphasis>::DoubleInput</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Used to input floating point numbers with double precision accuracy.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>inputMode</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QInputDialog">
<db:title>[since 4.5] QInputDialog::QInputDialog(QWidget *<db:emphasis>parent</db:emphasis> = 0, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = 0)</db:title>
<db:para>Constructs a new input dialog with the given <db:code role="parameter">parent</db:code> and window <db:code role="parameter">flags</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="dtor.QInputDialog">
<db:title>[virtual noexcept, since 4.5] QInputDialog::~QInputDialog()</db:title>
<db:para>Destroys the input dialog.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="done">
<db:title>[override virtual] void QInputDialog::done(int <db:emphasis>result</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#done" role="function">QDialog::done(int r)</db:link>.</db:para>
<db:para>Closes the dialog and sets its result code to <db:code role="parameter">result</db:code>. If this dialog is shown with <db:link xlink:href="qdialog.xml#exec">exec</db:link>(), done() causes the local event loop to finish, and <db:link xlink:href="qdialog.xml#exec">exec</db:link>() to return <db:code role="parameter">result</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml#done">QDialog::done</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="doubleValueChanged">
<db:title>void QInputDialog::doubleValueChanged(double <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the double value changes in the dialog. The current value is specified by <db:code role="parameter">value</db:code>.</db:para>
<db:para>This signal is only relevant when the input dialog is used in <db:link xlink:href="qinputdialog.xml#InputMode-enum">DoubleInput</db:link> mode.</db:para>
</db:section>
<db:section xml:id="doubleValueSelected">
<db:title>void QInputDialog::doubleValueSelected(double <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the user selects a double value by accepting the dialog; for example, by clicking the <db:guilabel>OK</db:guilabel> button. The selected value is specified by <db:code role="parameter">value</db:code>.</db:para>
<db:para>This signal is only relevant when the input dialog is used in <db:link xlink:href="qinputdialog.xml#InputMode-enum">DoubleInput</db:link> mode.</db:para>
</db:section>
<db:section xml:id="getDouble">
<db:title>[static] double QInputDialog::getDouble(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>label</db:emphasis>, double <db:emphasis>value</db:emphasis> = 0, double <db:emphasis>min</db:emphasis> = -2147483647, double <db:emphasis>max</db:emphasis> = 2147483647, int <db:emphasis>decimals</db:emphasis> = 1, bool *<db:emphasis>ok</db:emphasis> = 0, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = 0)</db:title>
<db:para>Static convenience function to get a floating point number from the user.</db:para>
<db:para><db:code role="parameter">title</db:code> is the text which is displayed in the title bar of the dialog. <db:code role="parameter">label</db:code> is the text which is shown to the user (it should say what should be entered). <db:code role="parameter">value</db:code> is the default floating point number that the line edit will be set to. <db:code role="parameter">min</db:code> and <db:code role="parameter">max</db:code> are the minimum and maximum values the user may choose. <db:code role="parameter">decimals</db:code> is the maximum number of decimal places the number may have.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is nonnull, *<db:code role="parameter">ok</db:code> will be set to true if the user pressed <db:guilabel>OK</db:guilabel> and to false if the user pressed <db:guilabel>Cancel</db:guilabel>. The dialog's parent is <db:code role="parameter">parent</db:code>. The dialog will be modal and uses the widget <db:code role="parameter">flags</db:code>.</db:para>
<db:para>This function returns the floating point number which has been entered by the user.</db:para>
<db:para>Use this static function like this:</db:para>
<db:programlisting language="cpp">    bool ok;
    double d = QInputDialog::getDouble(this, tr(&quot;QInputDialog::getDouble()&quot;),
                                       tr(&quot;Amount:&quot;), 37.56, -10000, 10000, 2, &amp;ok);
    if (ok)
        doubleLabel-&gt;setText(QString(&quot;$%1&quot;).arg(d));
</db:programlisting>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qinputdialog.xml">QInputDialog</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputdialog.xml#getText">getText</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getInt">getInt</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getItem">getItem</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getMultiLineText">getMultiLineText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getInt">
<db:title>[static, since 4.5] int QInputDialog::getInt(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>label</db:emphasis>, int <db:emphasis>value</db:emphasis> = 0, int <db:emphasis>min</db:emphasis> = -2147483647, int <db:emphasis>max</db:emphasis> = 2147483647, int <db:emphasis>step</db:emphasis> = 1, bool *<db:emphasis>ok</db:emphasis> = 0, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = 0)</db:title>
<db:para>Static convenience function to get an integer input from the user.</db:para>
<db:para><db:code role="parameter">title</db:code> is the text which is displayed in the title bar of the dialog. <db:code role="parameter">label</db:code> is the text which is shown to the user (it should say what should be entered). <db:code role="parameter">value</db:code> is the default integer which the spinbox will be set to. <db:code role="parameter">min</db:code> and <db:code role="parameter">max</db:code> are the minimum and maximum values the user may choose. <db:code role="parameter">step</db:code> is the amount by which the values change as the user presses the arrow buttons to increment or decrement the value.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is nonnull *<db:code role="parameter">ok</db:code> will be set to true if the user pressed <db:guilabel>OK</db:guilabel> and to false if the user pressed <db:guilabel>Cancel</db:guilabel>. The dialog's parent is <db:code role="parameter">parent</db:code>. The dialog will be modal and uses the widget <db:code role="parameter">flags</db:code>.</db:para>
<db:para>On success, this function returns the integer which has been entered by the user; on failure, it returns the initial <db:code role="parameter">value</db:code>.</db:para>
<db:para>Use this static function like this:</db:para>
<db:programlisting language="cpp">    bool ok;
    int i = QInputDialog::getInt(this, tr(&quot;QInputDialog::getInteger()&quot;),
                                 tr(&quot;Percentage:&quot;), 25, 0, 100, 1, &amp;ok);
    if (ok)
        integerLabel-&gt;setText(tr(&quot;%1%&quot;).arg(i));
</db:programlisting>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qinputdialog.xml">QInputDialog</db:link> constructors.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputdialog.xml#getText">getText</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getDouble">getDouble</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getItem">getItem</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getMultiLineText">getMultiLineText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getItem">
<db:title>[static] QString QInputDialog::getItem(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>label</db:emphasis>, const QStringList &amp;<db:emphasis>items</db:emphasis>, int <db:emphasis>current</db:emphasis> = 0, bool <db:emphasis>editable</db:emphasis> = true, bool *<db:emphasis>ok</db:emphasis> = 0, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = 0, Qt::InputMethodHints <db:emphasis>inputMethodHints</db:emphasis> = Qt::ImhNone)</db:title>
<db:para>Static convenience function to let the user select an item from a string list.</db:para>
<db:para><db:code role="parameter">title</db:code> is the text which is displayed in the title bar of the dialog. <db:code role="parameter">label</db:code> is the text which is shown to the user (it should say what should be entered). <db:code role="parameter">items</db:code> is the string list which is inserted into the combo box. <db:code role="parameter">current</db:code> is the number of the item which should be the current item. <db:code role="parameter">inputMethodHints</db:code> is the input method hints that will be used if the combo box is editable and an input method is active.</db:para>
<db:para>If <db:code role="parameter">editable</db:code> is true the user can enter their own text; otherwise, the user may only select one of the existing items.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is nonnull <db:emphasis>*a</db:emphasis> ok will be set to true if the user pressed <db:guilabel>OK</db:guilabel> and to false if the user pressed <db:guilabel>Cancel</db:guilabel>. The dialog's parent is <db:code role="parameter">parent</db:code>. The dialog will be modal and uses the widget <db:code role="parameter">flags</db:code>.</db:para>
<db:para>This function returns the text of the current item, or if <db:code role="parameter">editable</db:code> is true, the current text of the combo box.</db:para>
<db:para>Use this static function like this:</db:para>
<db:programlisting language="cpp">    QStringList items;
    items &lt;&lt; tr(&quot;Spring&quot;) &lt;&lt; tr(&quot;Summer&quot;) &lt;&lt; tr(&quot;Fall&quot;) &lt;&lt; tr(&quot;Winter&quot;);

    bool ok;
    QString item = QInputDialog::getItem(this, tr(&quot;QInputDialog::getItem()&quot;),
                                         tr(&quot;Season:&quot;), items, 0, false, &amp;ok);
    if (ok &amp;&amp; !item.isEmpty())
        itemLabel-&gt;setText(item);
</db:programlisting>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qinputdialog.xml">QInputDialog</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputdialog.xml#getText">getText</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getInt">getInt</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getDouble">getDouble</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getMultiLineText">getMultiLineText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getMultiLineText">
<db:title>[static, since 5.2] QString QInputDialog::getMultiLineText(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>label</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis> = QString(), bool *<db:emphasis>ok</db:emphasis> = 0, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = 0, Qt::InputMethodHints <db:emphasis>inputMethodHints</db:emphasis> = Qt::ImhNone)</db:title>
<db:para>Static convenience function to get a multiline string from the user.</db:para>
<db:para><db:code role="parameter">title</db:code> is the text which is displayed in the title bar of the dialog. <db:code role="parameter">label</db:code> is the text which is shown to the user (it should say what should be entered). <db:code role="parameter">text</db:code> is the default text which is placed in the plain text edit. <db:code role="parameter">inputMethodHints</db:code> is the input method hints that will be used in the edit widget if an input method is active.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is nonnull <db:emphasis>*a</db:emphasis> ok will be set to true if the user pressed <db:guilabel>OK</db:guilabel> and to false if the user pressed <db:guilabel>Cancel</db:guilabel>. The dialog's parent is <db:code role="parameter">parent</db:code>. The dialog will be modal and uses the specified widget <db:code role="parameter">flags</db:code>.</db:para>
<db:para>If the dialog is accepted, this function returns the text in the dialog's plain text edit. If the dialog is rejected, a null <db:link xlink:href="qstring.xml">QString</db:link> is returned.</db:para>
<db:para>Use this static function like this:</db:para>
<db:programlisting language="cpp">    bool ok;
    QString text = QInputDialog::getMultiLineText(this, tr(&quot;QInputDialog::getMultiLineText()&quot;),
                                                  tr(&quot;Address:&quot;), &quot;John Doe\nFreedom Street&quot;, &amp;ok);
    if (ok &amp;&amp; !text.isEmpty())
        multiLineTextLabel-&gt;setText(text);
</db:programlisting>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qinputdialog.xml">QInputDialog</db:link> constructors.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputdialog.xml#getInt">getInt</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getDouble">getDouble</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getItem">getItem</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getText">getText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getText">
<db:title>[static] QString QInputDialog::getText(QWidget *<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>, const QString &amp;<db:emphasis>label</db:emphasis>, QLineEdit::EchoMode <db:emphasis>mode</db:emphasis> = QLineEdit::Normal, const QString &amp;<db:emphasis>text</db:emphasis> = QString(), bool *<db:emphasis>ok</db:emphasis> = 0, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = 0, Qt::InputMethodHints <db:emphasis>inputMethodHints</db:emphasis> = Qt::ImhNone)</db:title>
<db:para>Static convenience function to get a string from the user.</db:para>
<db:para><db:code role="parameter">title</db:code> is the text which is displayed in the title bar of the dialog. <db:code role="parameter">label</db:code> is the text which is shown to the user (it should say what should be entered). <db:code role="parameter">text</db:code> is the default text which is placed in the line edit. <db:code role="parameter">mode</db:code> is the echo mode the line edit will use. <db:code role="parameter">inputMethodHints</db:code> is the input method hints that will be used in the edit widget if an input method is active.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is nonnull <db:emphasis>*a</db:emphasis> ok will be set to true if the user pressed <db:guilabel>OK</db:guilabel> and to false if the user pressed <db:guilabel>Cancel</db:guilabel>. The dialog's parent is <db:code role="parameter">parent</db:code>. The dialog will be modal and uses the specified widget <db:code role="parameter">flags</db:code>.</db:para>
<db:para>If the dialog is accepted, this function returns the text in the dialog's line edit. If the dialog is rejected, a null <db:link xlink:href="qstring.xml">QString</db:link> is returned.</db:para>
<db:para>Use this static function like this:</db:para>
<db:programlisting language="cpp">    bool ok;
    QString text = QInputDialog::getText(this, tr(&quot;QInputDialog::getText()&quot;),
                                         tr(&quot;User name:&quot;), QLineEdit::Normal,
                                         QDir::home().dirName(), &amp;ok);
    if (ok &amp;&amp; !text.isEmpty())
        textLabel-&gt;setText(text);
</db:programlisting>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qinputdialog.xml">QInputDialog</db:link> constructors.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qinputdialog.xml#getInt">getInt</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getDouble">getDouble</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getItem">getItem</db:link>()</db:member>
<db:member><db:link xlink:href="qinputdialog.xml#getMultiLineText">getMultiLineText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="intValueChanged">
<db:title>void QInputDialog::intValueChanged(int <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the integer value changes in the dialog. The current value is specified by <db:code role="parameter">value</db:code>.</db:para>
<db:para>This signal is only relevant when the input dialog is used in <db:link xlink:href="qinputdialog.xml#InputMode-enum">IntInput</db:link> mode.</db:para>
</db:section>
<db:section xml:id="intValueSelected">
<db:title>void QInputDialog::intValueSelected(int <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the user selects a integer value by accepting the dialog; for example, by clicking the <db:guilabel>OK</db:guilabel> button. The selected value is specified by <db:code role="parameter">value</db:code>.</db:para>
<db:para>This signal is only relevant when the input dialog is used in <db:link xlink:href="qinputdialog.xml#InputMode-enum">IntInput</db:link> mode.</db:para>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QInputDialog::minimumSizeHint() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#minimumSizeHint" role="function">QDialog::minimumSizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="open">
<db:title>[since 4.5] void QInputDialog::open(QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function connects one of its signals to the slot specified by <db:code role="parameter">receiver</db:code> and <db:code role="parameter">member</db:code>. The specific signal depends on the arguments that are specified in <db:code role="parameter">member</db:code>. These are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qinputdialog.xml#textValueSelected">textValueSelected</db:link>() if <db:code role="parameter">member</db:code> has a <db:link xlink:href="qstring.xml">QString</db:link> for its first argument.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qinputdialog.xml#intValueSelected">intValueSelected</db:link>() if <db:code role="parameter">member</db:code> has an int for its first argument.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qinputdialog.xml#doubleValueSelected">doubleValueSelected</db:link>() if <db:code role="parameter">member</db:code> has a double for its first argument.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdialog.xml#accepted">accepted</db:link>() if <db:code role="parameter">member</db:code> has NO arguments.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The signal will be disconnected from the slot when the dialog is closed.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="setDoubleRange">
<db:title>void QInputDialog::setDoubleRange(double <db:emphasis>min</db:emphasis>, double <db:emphasis>max</db:emphasis>)</db:title>
<db:para>Sets the range of double precision floating point values accepted by the dialog when used in <db:link xlink:href="qinputdialog.xml#InputMode-enum">DoubleInput</db:link> mode, with minimum and maximum values specified by <db:code role="parameter">min</db:code> and <db:code role="parameter">max</db:code> respectively.</db:para>
</db:section>
<db:section xml:id="setIntRange">
<db:title>void QInputDialog::setIntRange(int <db:emphasis>min</db:emphasis>, int <db:emphasis>max</db:emphasis>)</db:title>
<db:para>Sets the range of integer values accepted by the dialog when used in <db:link xlink:href="qinputdialog.xml#InputMode-enum">IntInput</db:link> mode, with minimum and maximum values specified by <db:code role="parameter">min</db:code> and <db:code role="parameter">max</db:code> respectively.</db:para>
</db:section>
<db:section xml:id="setOption">
<db:title>void QInputDialog::setOption(QInputDialog::InputDialogOption <db:emphasis>option</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:para>Sets the given <db:code role="parameter">option</db:code> to be enabled if <db:code role="parameter">on</db:code> is true; otherwise, clears the given <db:code role="parameter">option</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qauthenticator.xml#using-qt-test-remotely-on-windows-ce-options-13">options</db:link></db:member>
<db:member><db:link xlink:href="qinputdialog.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>[override virtual] void QInputDialog::setVisible(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#setVisible" role="function">QDialog::setVisible(bool visible)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QInputDialog::sizeHint() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#sizeHint" role="function">QDialog::sizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="testOption">
<db:title>bool QInputDialog::testOption(QInputDialog::InputDialogOption <db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the given <db:code role="parameter">option</db:code> is enabled; otherwise, returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qauthenticator.xml#using-qt-test-remotely-on-windows-ce-options-13">options</db:link></db:member>
<db:member><db:link xlink:href="qinputdialog.xml#setOption">setOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textValueChanged">
<db:title>void QInputDialog::textValueChanged(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the text string changes in the dialog. The current string is specified by <db:code role="parameter">text</db:code>.</db:para>
<db:para>This signal is only relevant when the input dialog is used in <db:link xlink:href="qinputdialog.xml#InputMode-enum">TextInput</db:link> mode.</db:para>
</db:section>
<db:section xml:id="textValueSelected">
<db:title>void QInputDialog::textValueSelected(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the user selects a text string by accepting the dialog; for example, by clicking the <db:guilabel>OK</db:guilabel> button. The selected string is specified by <db:code role="parameter">text</db:code>.</db:para>
<db:para>This signal is only relevant when the input dialog is used in <db:link xlink:href="qinputdialog.xml#InputMode-enum">TextInput</db:link> mode.</db:para>
</db:section>
</db:section>
</db:article>
