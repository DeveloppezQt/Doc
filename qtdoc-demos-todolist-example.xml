<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>To Do List</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A QML implementation of to do list application that demonstrates how to create application thats looks native on any platform.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>CustomStyle</db:para>
</db:th>
<db:th>
<db:para>Material</db:para>
</db:th>
<db:th>
<db:para>iOS</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/CustomStyle_Light.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/Material_Light.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/iOS_Light.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/CustomStyle_Dark.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/Material_Dark.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/iOS_Dark.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/Settings_CustomStyle.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/Settings_Material.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/Settings_iOS.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:emphasis>To Do List</db:emphasis> demonstrates a sample to-do list application that looks native on any platform. The example can be run and edited in both QtDesignStudio and QtCreator. It shows how to create and use a custom style, how to use settings to control the appearance and behavior of the application. It also presents how to implement simple drag and drop behavior on delegates. The application uses local storage to store items on the device and <db:link xlink:href="qml-qtqml-xmlhttprequest.xml">XMLHttpRequest</db:link> to retrieve data from the public API (Random Tasks functionality). The views are controlled by <db:link xlink:href="qml-qtquick-controls-stackview.xml">StackView</db:link> component.</db:para>
<db:section xml:id="selecting-application-style">
<db:title>Selecting Application Style</db:title>
<db:para>The application supports different styles depending on the target platform. CustomStyle, Basic, Material and Universal are available on each platform (Windows, Android, iOS, macOS). The Windows style is available only on Windows and the iOS style is available only on iOS. The list of available styles is located in one of the subpages of the SettingsView called Style. The currently used style can be changed from the same place. A restart is required to apply the changes. The application will inform the user about this with the <db:link xlink:href="qml-qtquick-controls-tooltip.xml">ToolTip</db:link> information.</db:para>
</db:section>
<db:section xml:id="changing-theme">
<db:title>Changing theme</db:title>
<db:para>Dark and Light themes are also supported in each style. The theme can be changed from the Theme subpage of the SettingsView. Not every style allows the user to change the theme manually, e.g. on iOS this option is not available. In this case the theme will be changed according to the default system settings. The first time the app is launched it will use the system theme.</db:para>
</db:section>
<db:section xml:id="controlling-app-behavior-from-app-settings">
<db:title>Controlling app behavior from app settings</db:title>
<db:para>The Behavior and style of the application can be changed from SettingsView. The settings allow the user to change:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>style</db:para>
</db:listitem>
<db:listitem>
<db:para>theme</db:para>
</db:listitem>
<db:listitem>
<db:para>font size</db:para>
</db:listitem>
<db:listitem>
<db:para>maximum number of tasks</db:para>
</db:listitem>
<db:listitem>
<db:para>if the finished tasks should be removed automatically</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="tasks-list-implementation">
<db:title>Tasks List Implementation</db:title>
<db:para>The application has three different lists:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Today's tasks list → The tasks with today's date as due date.</db:para>
</db:listitem>
<db:listitem>
<db:para>This week's tasks list → the tasks that are due in the next seven days.</db:para>
</db:listitem>
<db:listitem>
<db:para>Later tasks → the tasks that do not fit into the above lists.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The tasks are distributed between the list models at the start of the application. Of course, the tasks can migrate through the list models at runtime (when their due date changes). The definition of the single list is done in TasksList.qml and TasksListForm.ui.qml, the instances are created in TasksListsView.qml/TasksListsViewForm.ui.qml.</db:para>
<db:programlisting language="cpp">    ListModel {
        id: todayTasksListModel
    }

    ListModel {
        id: thisWeekTasksListModel
    }

    ListModel {
        id: laterTasksListModel
    }

    Column {
        id: column

        anchors.fill: parent
        spacing: 14

        TasksList {
            id: todayTasks

            width: column.width
            maxHeight: 180
            listModel: todayTasksListModel
            headerText: qsTr(&quot;Today&quot;)
            tasksCount: todayTasksListModel.count
        }

        TasksList {
            id: thisWeekTasks

            width: column.width
            maxHeight: column.height - y - 60
            listModel: thisWeekTasksListModel
            headerText: qsTr(&quot;This week&quot;)
            tasksCount: thisWeekTasksListModel.count
        }

        TasksList {
            id: laterTasks

            width: column.width
            maxHeight: column.height - y
            listModel: laterTasksListModel
            headerText: qsTr(&quot;Later&quot;)
            tasksCount: laterTasksListModel.count
        }
    }
</db:programlisting>
<db:para>Filling the list model with data is done in TasksListsView.qml in Component.onCompleted.</db:para>
<db:programlisting language="cpp">    function createTasksLists() : void {
        var tasks = Database.getTasks()
        var currentDate = new Date()
        var format = Qt.locale().dateFormat(Locale.LongFormat)
        var dateStr = currentDate.toLocaleDateString(Qt.locale(),format)
        tasks.forEach( function(task){
            if (task.date === dateStr) {
                todayTasksModel.append(task)
            } else if (checkThisWeekDate(task.date)) {
                thisWeekTasksModel.append(task)
            } else {
                laterTasksModel.append(task)
            }
        })
    }

    Component.onCompleted: createTasksLists()
</db:programlisting>
</db:section>
<db:section xml:id="swipe-drag-and-drop-behavior">
<db:title>Swipe, Drag and Drop behavior</db:title>
<db:para>The list view uses the TasksListDelegate as a delegate. The delegate is a <db:link xlink:href="qml-qtquick-controls-swipedelegate.xml">SwipeDelegate</db:link>, it allows the user to swipe the item to highlight it (the item is moved to the top of the list) or to remove it. It also allows the user to mark the task as done (the item is moved to the bottom) or drag and drop the item to move it to a specific position in the list. Implementation of these behaviors is done in TasksListDelegate.qml.</db:para>
</db:section>
<db:section xml:id="local-storage-usage">
<db:title>Local Storage usage</db:title>
<db:para>Local storage is used to read and write the task items to SQLite databases. The implementation of this and other helper functions is done in Database.qml, which is a singleton object.</db:para>
<db:programlisting language="cpp">    property var _db

    function _database() {
        if (_db) return _db

        try {
            let db = LocalStorage.openDatabaseSync(&quot;ToDoList&quot;, &quot;1.0&quot;, &quot;ToDoList app database&quot;)

            db.transaction(function (tx) {
                tx.executeSql('CREATE TABLE IF NOT EXISTS tasks (
                    task_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    task_name,
                    task_dueDate TEXT,
                    task_dueTime TEXT,
                    task_notes TEXT,
                    done INTEGER,
                    highlighted INTEGER
                )');
            })

            _db = db
        } catch (error) {
            console.log(&quot;Error opening databse: &quot; + error)
        };
        return _db
    }

    function addTask(taskName, taskDueDate, taskDueTime, taskNotes, taskDone, taskHighlighted) {
        let results
        root._database().transaction(function(tx){
            tx.executeSql(&quot;INSERT INTO tasks (task_name, task_dueDate, task_dueTime,
                        task_notes, done, highlighted) VALUES(?,?,?,?,?,?);&quot;,
                        [taskName, taskDueDate, taskDueTime, taskNotes, taskDone, taskHighlighted])
            results = tx.executeSql(&quot;SELECT * FROM tasks ORDER BY task_id DESC LIMIT 1&quot;)
        })
        return results.rows.item(0).task_id
    }
</db:programlisting>
</db:section>
<db:section xml:id="usage-of-xmlhttprequest-to-retrieve-data-from-public-api">
<db:title>Usage of XMLHttpRequest to retrieve data from public API</db:title>
<db:para>The <db:link xlink:href="qml-qtqml-xmlhttprequest.xml">XMLHttpRequest</db:link> is used to send request to some public API and retrieve the response data. The application uses <db:link xlink:href="http://www.boredapi.com/">boredapi</db:link> which can return a random task to do. The task is then added to the list of today's tasks.</db:para>
<db:programlisting language="cpp">    function sendHttpRequest() : void {
        var http = new XMLHttpRequest()
        var url = &quot;https://www.boredapi.com/api/activity&quot;;
        http.open(&quot;GET&quot;, url, true);

        http.setRequestHeader(&quot;Content-type&quot;, &quot;application/json&quot;);
        http.setRequestHeader(&quot;Connection&quot;, &quot;close&quot;);

        http.onreadystatechange = function() {
            if (http.readyState == 4) {
                if (http.status == 200) {
                    var object = JSON.parse(http.responseText.toString());
                    var currentDate = new Date()
                    var format = Qt.locale().dateFormat(Locale.LongFormat)
                    addTask(todayTasksModel, object.activity,
                            currentDate.toLocaleDateString(Qt.locale(), format), &quot;&quot;,&quot;&quot;)
                } else {
                    console.log(&quot;error: &quot; + http.status)
                }
            }
        }
        http.send();
    }
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdoc.git/tree/examples/demos/todolist?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
