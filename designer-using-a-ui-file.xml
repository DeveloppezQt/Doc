<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using a Designer UI File in Your Application</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="designer-stylesheet.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Using Stylesheets with Qt Designer"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="designer-using-custom-widgets.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Using Custom Widgets with Qt Designer"/></db:extendedlink>
<db:abstract>
<db:para>Qt Designer Manual.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>{Qt Designer Manual}{Contents}</db:para>
<db:para>Qt Designer UI files represent the widget tree of the form in XML format. The forms can be processed:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="designer-using-a-ui-file.xml#compile-time-form-processing">At compile time</db:link>, which means that forms are converted to C++ code that can be compiled.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="designer-using-a-ui-file.xml#run-time-form-processing">At runtime</db:link>, which means that forms are processed by the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class that dynamically constructs the widget tree while parsing the XML file.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="compile-time-form-processing">
<db:title>Compile Time Form Processing</db:title>
<db:para>You create user interface components with <db:emphasis>Qt Designer</db:emphasis> and use Qt's integrated build tools, <db:link xlink:href="qmake-manual.xml">qmake</db:link> and <db:link xlink:href="uic.xml">uic</db:link>, to generate code for them when the application is built. The generated code contains the form's user interface object. It is a C++ struct that contains:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Pointers to the form's widgets, layouts, layout items, button groups, and actions.</db:para>
</db:listitem>
<db:listitem>
<db:para>A member function called <db:code>setupUi()</db:code> to build the widget tree on the parent widget.</db:para>
</db:listitem>
<db:listitem>
<db:para>A member function called <db:code>retranslateUi()</db:code> that handles the translation of the string properties of the form. For more information, see <db:link xlink:href="designer-using-a-ui-file.xml#reacting-to-language-changes">Reacting to Language Changes</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The generated code can be included in your application and used directly from it. Alternatively, you can use it to extend subclasses of standard widgets.</db:para>
<db:para>A compile time processed form can be used in your application with one of the following approaches:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="designer-using-a-ui-file.xml#the-direct-approach">The Direct Approach</db:link>: you construct a widget to use as a placeholder for the component, and set up the user interface inside it.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="designer-using-a-ui-file.xml#the-single-inheritance-approach">The Single Inheritance Approach</db:link>: you subclass the form's base class (<db:link xlink:href="qwidget.xml">QWidget</db:link> or <db:link xlink:href="qdialog.xml">QDialog</db:link>, for example), and include a private instance of the form's user interface object.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="designer-using-a-ui-file.xml#the-multiple-inheritance-approach">The Multiple Inheritance Approach</db:link>: you subclass both the form's base class and the form's user interface object. This allows the widgets defined in the form to be used directly from within the scope of the subclass.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To demonstrate, we create a simple Calculator Form application. It is based on the original <db:link xlink:href="qtdesigner-calculatorform-example.xml">Calculator Form</db:link> example.</db:para>
<db:para>The application consists of one source file, <db:code>main.cpp</db:code> and a UI file.</db:para>
<db:para>The <db:code>calculatorform.ui</db:code> file designed with <db:emphasis>Qt Designer</db:emphasis> is shown below:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/directapproach-calculatorform.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We will use <db:code>qmake</db:code> to build the executable, so we need to write a <db:code>.pro</db:code> file:</db:para>
<db:programlisting language="cpp">HEADERS     = calculatorform.h
</db:programlisting>
<db:para>The special feature of this file is the <db:code>FORMS</db:code> declaration that tells <db:code>qmake</db:code> which files to process with <db:code>uic</db:code>. In this case, the <db:code>calculatorform.ui</db:code> file is used to create a <db:code>ui_calculatorform.h</db:code> file that can be used by any file listed in the <db:code>SOURCES</db:code> declaration.</db:para>
<db:note>
<db:para>You can use Qt Creator to create the Calculator Form project. It automatically generates the main.cpp, UI, and .pro files, which you can then modify.</db:para>
</db:note>
<db:section xml:id="the-direct-approach">
<db:title>The Direct Approach</db:title>
<db:para>To use the direct approach, we include the <db:code>ui_calculatorform.h</db:code> file directly in <db:code>main.cpp</db:code>:</db:para>
<db:programlisting language="cpp">#include &quot;ui_calculatorform.h&quot;
</db:programlisting>
<db:para>The <db:code>main</db:code> function creates the calculator widget by constructing a standard <db:link xlink:href="qwidget.xml">QWidget</db:link> that we use to host the user interface described by the <db:code>calculatorform.ui</db:code> file.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QWidget *widget = new QWidget;
    Ui::CalculatorForm ui;
    ui.setupUi(widget);

    widget-&gt;show();
    return app.exec();
}
</db:programlisting>
<db:para>In this case, the <db:code>Ui::CalculatorForm</db:code> is an interface description object from the <db:code>ui_calculatorform.h</db:code> file that sets up all the dialog's widgets and the connections between its signals and slots.</db:para>
<db:para>The direct approach provides a quick and easy way to use simple, self-contained components in your applications. However, componens created with <db:emphasis>Qt Designer</db:emphasis> often require close integration with the rest of the application code. For instance, the <db:code>CalculatorForm</db:code> code provided above will compile and run, but the <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> objects will not interact with the <db:link xlink:href="qlabel.xml">QLabel</db:link> as we need a custom slot to carry out the add operation and display the result in the <db:link xlink:href="qlabel.xml">QLabel</db:link>. To achieve this, we need to use the single inheritance approach.</db:para>
</db:section>
<db:section xml:id="the-single-inheritance-approach">
<db:title>The Single Inheritance Approach</db:title>
<db:para>To use the single inheritance approach, we subclass a standard Qt widget and include a private instance of the form's user interface object. This can take the form of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A member variable</db:para>
</db:listitem>
<db:listitem>
<db:para>A pointer member variable</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="using-a-member-variable">
<db:title>Using a Member Variable</db:title>
<db:para>In this approach, we subclass a Qt widget and set up the user interface from within the constructor. Components used in this way expose the widgets and layouts used in the form to the Qt widget subclass, and provide a standard system for making signal and slot connections between the user interface and other objects in your application. The generated <db:code>Ui::CalculatorForm</db:code> structure is a member of the class.</db:para>
<db:para>This approach is used in the <db:link xlink:href="qtdesigner-calculatorform-example.xml">Calculator Form</db:link> example.</db:para>
<db:para>To ensure that we can use the user interface, we need to include the header file that <db:code>uic</db:code> generates before referring to <db:code>Ui::CalculatorForm</db:code>:</db:para>
<db:programlisting language="cpp">#include &quot;ui_calculatorform.h&quot;
</db:programlisting>
<db:para>This means that the <db:code>.pro</db:code> file must be updated to include <db:code>calculatorform.h</db:code>:</db:para>
<db:programlisting language="cpp">HEADERS     = calculatorform.h
</db:programlisting>
<db:para>The subclass is defined in the following way:</db:para>
<db:programlisting language="cpp">class CalculatorForm : public QWidget
{
    Q_OBJECT

public:
    CalculatorForm(QWidget *parent = 0);

private slots:
    void on_inputSpinBox1_valueChanged(int value);
    void on_inputSpinBox2_valueChanged(int value);

private:
    Ui::CalculatorForm ui;
};
</db:programlisting>
<db:para>The important feature of the class is the private <db:code>ui</db:code> object which provides the code for setting up and managing the user interface.</db:para>
<db:para>The constructor for the subclass constructs and configures all the widgets and layouts for the dialog just by calling the <db:code>ui</db:code> object's <db:code>setupUi()</db:code> function. Once this has been done, it is possible to modify the user interface as needed.</db:para>
<db:programlisting language="cpp">CalculatorForm::CalculatorForm(QWidget *parent)
    : QWidget(parent)
{
    ui.setupUi(this);
}
</db:programlisting>
<db:para>We can connect signals and slots in user interface widgets in the usual way by adding the on_&lt;object name&gt; - prefix. For more information, see <db:link xlink:href="designer-using-a-ui-file.xml#widgets-and-dialogs-with-auto-connect">widgets-and-dialogs-with-auto-connect</db:link>.</db:para>
<db:para>The advantages of this approach are its simple use of inheritance to provide a <db:link xlink:href="qwidget.xml">QWidget</db:link>-based interface, and its encapsulation of the user interface widget variables within the <db:code>ui</db:code> data member. We can use this method to define a number of user interfaces within the same widget, each of which is contained within its own namespace, and overlay (or compose) them. This approach can be used to create individual tabs from existing forms, for example.</db:para>
</db:section>
<db:section xml:id="using-a-pointer-member-variable">
<db:title>Using a Pointer Member Variable</db:title>
<db:para>Alternatively, the <db:code>Ui::CalculatorForm</db:code> structure can be made a pointer member of the class. The header then looks as follows:</db:para>
<db:programlisting language="cpp">namespace Ui {
    class CalculatorForm;
}

class CalculatorForm : public QWidget
...
virtual ~CalculatorForm();
...
private:
    Ui::CalculatorForm *ui;
...

</db:programlisting>
<db:para>The corresponding source file looks as follows:</db:para>
<db:programlisting language="cpp">#include &quot;ui_calculatorform.h&quot;

CalculatorForm::CalculatorForm(QWidget *parent) :
    QWidget(parent), ui(new Ui::CalculatorForm)
{
    ui-&gt;setupUi(this);
}

CalculatorForm::~CalculatorForm()
{
    delete ui;
}
</db:programlisting>
<db:para>The advantage of this approach is that the user interface object can be forward-declared, which means that we do not have to include the generated <db:code>ui_calculatorform.h</db:code> file in the header. The form can then be changed without recompiling the dependent source files. This is particularly important if the class is subject to binary compatibility restrictions.</db:para>
<db:para>We generally recommend this approach for libraries and large applications. For more information, see <db:link xlink:href="sharedlibrary.xml">Creating Shared Libraries</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="the-multiple-inheritance-approach">
<db:title>The Multiple Inheritance Approach</db:title>
<db:para>Forms created with <db:emphasis>Qt Designer</db:emphasis> can be subclassed together with a standard <db:link xlink:href="qwidget.xml">QWidget</db:link>-based class. This approach makes all the user interface components defined in the form directly accessible within the scope of the subclass, and enables signal and slot connections to be made in the usual way with the <db:link xlink:href="qobject.xml#connect">connect</db:link>() function.</db:para>
<db:para>This approach is used in the <db:link xlink:href="qtuitools-multipleinheritance-example.xml">Multiple Inheritance</db:link> example.</db:para>
<db:para>We need to include the header file that <db:code>uic</db:code> generates from the <db:code>calculatorform.ui</db:code> file, as follows:</db:para>
<db:programlisting language="cpp">#include &quot;ui_calculatorform.h&quot;
</db:programlisting>
<db:para>The class is defined in a similar way to the one used in the <db:link xlink:href="designer-using-a-ui-file.xml#the-single-inheritance-approach">single inheritance approach</db:link>, except that this time we inherit from <db:emphasis>both</db:emphasis> <db:link xlink:href="qwidget.xml">QWidget</db:link> and <db:code>Ui::CalculatorForm</db:code>, as follows:</db:para>
<db:programlisting language="cpp">class CalculatorForm : public QWidget, private Ui::CalculatorForm
{
    Q_OBJECT

public:
    CalculatorForm(QWidget *parent = 0);

private slots:
    void on_inputSpinBox1_valueChanged(int value);
    void on_inputSpinBox2_valueChanged(int value);
};
</db:programlisting>
<db:para>We inherit <db:code>Ui::CalculatorForm</db:code> privately to ensure that the user interface objects are private in our subclass. We can also inherit it with the <db:code>public</db:code> or <db:code>protected</db:code> keywords in the same way that we could have made <db:code>ui</db:code> public or protected in the previous case.</db:para>
<db:para>The constructor for the subclass performs many of the same tasks as the constructor used in the <db:link xlink:href="designer-using-a-ui-file.xml#the-single-inheritance-approach">single inheritance</db:link> example:</db:para>
<db:programlisting language="cpp">CalculatorForm::CalculatorForm(QWidget *parent)
    : QWidget(parent)
{
    setupUi(this);
}
</db:programlisting>
<db:para>In this case, the widgets used in the user interface can be accessed in the same say as a widget created in code by hand. We no longer require the <db:code>ui</db:code> prefix to access them.</db:para>
</db:section>
<db:section xml:id="reacting-to-language-changes">
<db:title>Reacting to Language Changes</db:title>
<db:para>Qt notifies applications if the user interface language changes by sending an event of the type <db:link xlink:href="qevent.xml#Type-enum">QEvent::LanguageChange</db:link>. To call the member function <db:code>retranslateUi()</db:code> of the user interface object, we reimplement <db:code>QWidget::changeEvent()</db:code> in the form class, as follows:</db:para>
<db:programlisting language="cpp">void CalculatorForm::changeEvent(QEvent *e)
{
    QWidget::changeEvent(e);
    switch (e-&gt;type()) {
    case QEvent::LanguageChange:
        ui-&gt;retranslateUi(this);
        break;
    default:
        break;
   }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="run-time-form-processing">
<db:title>Run Time Form Processing</db:title>
<db:para>Alternatively, forms can be processed at run time, producing dynamically- generated user interfaces. This can be done using the <db:link xlink:href="qtuitools-module.xml">QtUiTools</db:link> module that provides the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class to handle forms created with <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:section xml:id="the-uitools-approach">
<db:title>The UiTools Approach</db:title>
<db:para>A resource file containing a UI file is required to process forms at run time. Also, the application needs to be configured to use the <db:link xlink:href="qtuitools-module.xml">QtUiTools</db:link> module. This is done by including the following declaration in a <db:code>qmake</db:code> project file, ensuring that the application is compiled and linked appropriately.</db:para>
<db:programlisting language="cpp">QT += uitools
</db:programlisting>
<db:para>The <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class provides a form loader object to construct the user interface. This user interface can be retrieved from any <db:link xlink:href="qiodevice.xml">QIODevice</db:link>, e.g., a <db:link xlink:href="qfile.xml">QFile</db:link> object, to obtain a form stored in a project's resource file. The <db:link xlink:href="quiloader.xml#load">QUiLoader::load</db:link>() function constructs the form widget using the user interface description contained in the file.</db:para>
<db:para>The <db:link xlink:href="qtuitools-module.xml">QtUiTools</db:link> module classes can be included using the following directive:</db:para>
<db:programlisting language="cpp">#include &lt;QtUiTools&gt;
</db:programlisting>
<db:para>The <db:link xlink:href="quiloader.xml#load">QUiLoader::load</db:link>() function is invoked as shown in this code from the <db:link xlink:href="qtuitools-textfinder-example.xml">Text Finder</db:link> example:</db:para>
<db:programlisting language="cpp">QWidget* TextFinder::loadUiFile()
{
    QUiLoader loader;

    QFile file(&quot;:/forms/textfinder.ui&quot;);
    file.open(QFile::ReadOnly);

    QWidget *formWidget = loader.load(&amp;file, this);
    file.close();

    return formWidget;
}
</db:programlisting>
<db:para>In a class that uses <db:link xlink:href="qtuitools-module.xml">QtUiTools</db:link> to build its user interface at run time, we can locate objects in the form using qFindChild(). For example, in the follownig code, we locate some components based on their object names and widget types:</db:para>
<db:programlisting language="cpp">    ui_findButton = findChild&lt;QPushButton*&gt;(&quot;findButton&quot;);
    ui_textEdit = findChild&lt;QTextEdit*&gt;(&quot;textEdit&quot;);
    ui_lineEdit = findChild&lt;QLineEdit*&gt;(&quot;lineEdit&quot;);
</db:programlisting>
<db:para>Processing forms at run-time gives the developer the freedom to change a program's user interface, just by changing the UI file. This is useful when customizing programs to suit various user needs, such as extra large icons or a different colour scheme for accessibility support.</db:para>
</db:section>
</db:section>
<db:section xml:id="automatic-connections">
<db:title>Automatic Connections</db:title>
<db:para>The signals and slots connections defined for compile time or run time forms can either be set up manually or automatically, using <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>'s ability to make connections between signals and suitably-named slots.</db:para>
<db:para>Generally, in a <db:link xlink:href="qdialog.xml">QDialog</db:link>, if we want to process the information entered by the user before accepting it, we need to connect the clicked() signal from the <db:emphasis role="bold">OK</db:emphasis> button to a custom slot in our dialog. We will first show an example of the dialog in which the slot is connected by hand then compare it with a dialog that uses automatic connection.</db:para>
<db:section xml:id="a-dialog-without-auto-connect">
<db:title>A Dialog Without Auto-Connect</db:title>
<db:para>We define the dialog in the same way as before, but now include a slot in addition to the constructor:</db:para>
<db:programlisting language="cpp">class ImageDialog : public QDialog, private Ui::ImageDialog
{
    Q_OBJECT

public:
    ImageDialog(QWidget *parent = 0);

private slots:
    void checkValues();
};
</db:programlisting>
<db:para>The <db:code>checkValues()</db:code> slot will be used to validate the values provided by the user.</db:para>
<db:para>In the dialog's constructor we set up the widgets as before, and connect the <db:emphasis role="bold">Cancel</db:emphasis> button's <db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>() signal to the dialog's reject() slot. We also disable the <db:link xlink:href="qpushbutton.xml#autoDefault-prop">autoDefault</db:link> property in both buttons to ensure that the dialog does not interfere with the way that the line edit handles return key events:</db:para>
<db:programlisting language="cpp">ImageDialog::ImageDialog(QWidget *parent)
    : QDialog(parent)
{
    setupUi(this);
    okButton-&gt;setAutoDefault(false);
    cancelButton-&gt;setAutoDefault(false);
    ...
    connect(okButton, SIGNAL(clicked()), this, SLOT(checkValues()));
}
</db:programlisting>
<db:para>We connect the <db:emphasis role="bold">OK</db:emphasis> button's <db:link xlink:href="qabstractbutton.xml#clicked">clicked</db:link>() signal to the dialog's checkValues() slot which we implement as follows:</db:para>
<db:programlisting language="cpp">void ImageDialog::checkValues()
{
    if (nameLineEdit-&gt;text().isEmpty())
        (void) QMessageBox::information(this, tr(&quot;No Image Name&quot;),
            tr(&quot;Please supply a name for the image.&quot;), QMessageBox::Cancel);
    else
        accept();
}
</db:programlisting>
<db:para>This custom slot does the minimum necessary to ensure that the data entered by the user is valid - it only accepts the input if a name was given for the image.</db:para>
</db:section>
<db:section xml:id="widgets-and-dialogs-with-auto-connect">
<db:title>Widgets and Dialogs with Auto-Connect</db:title>
<db:para>Although it is easy to implement a custom slot in the dialog and connect it in the constructor, we could instead use <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>'s auto-connection facilities to connect the <db:emphasis role="bold">OK</db:emphasis> button's clicked() signal to a slot in our subclass. <db:code>uic</db:code> automatically generates code in the dialog's <db:code>setupUi()</db:code> function to do this, so we only need to declare and implement a slot with a name that follows a standard convention:</db:para>
<db:programlisting language="cpp">void on_&lt;object name&gt;_&lt;signal name&gt;(&lt;signal parameters&gt;);
</db:programlisting>
<db:para>Using this convention, we can define and implement a slot that responds to mouse clicks on the <db:emphasis role="bold">OK</db:emphasis> button:</db:para>
<db:programlisting language="cpp">class ImageDialog : public QDialog, private Ui::ImageDialog
{
    Q_OBJECT

public:
    ImageDialog(QWidget *parent = 0);

private slots:
    void on_okButton_clicked();
};
</db:programlisting>
<db:para>Another example of automatic signal and slot connection would be the <db:link xlink:href="qtuitools-textfinder-example.xml">Text Finder</db:link> with its <db:code>on_findButton_clicked()</db:code> slot.</db:para>
<db:para>We use <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>'s system to enable signal and slot connections:</db:para>
<db:programlisting language="cpp">    QMetaObject::connectSlotsByName(this);
</db:programlisting>
<db:para>This enables us to implement the slot, as shown below:</db:para>
<db:programlisting language="cpp">void TextFinder::on_findButton_clicked()
{
    QString searchString = ui_lineEdit-&gt;text();
    QTextDocument *document = ui_textEdit-&gt;document();

    bool found = false;

    if (isFirstTime == false)
        document-&gt;undo();

    if (searchString.isEmpty()) {
        QMessageBox::information(this, tr(&quot;Empty Search Field&quot;),
                &quot;The search field is empty. Please enter a word and click Find.&quot;);
    } else {

        QTextCursor highlightCursor(document);
        QTextCursor cursor(document);

        cursor.beginEditBlock();
    ...
        cursor.endEditBlock();
        isFirstTime = false;

        if (found == false) {
            QMessageBox::information(this, tr(&quot;Word Not Found&quot;),
                &quot;Sorry, the word cannot be found.&quot;);
        }
    }
}
</db:programlisting>
<db:para>Automatic connection of signals and slots provides both a standard naming convention and an explicit interface for widget designers to work to. By providing source code that implements a given interface, user interface designers can check that their designs actually work without having to write code themselves.</db:para>
</db:section>
</db:section>
</db:article>
