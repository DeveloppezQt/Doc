<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSimpleXmlNodeModel Class</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsimplexmlnodemodel.xml">QSimpleXmlNodeModel</db:link> class is an implementation of <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> sufficient for many common cases.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSimpleXmlNodeModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xmlpatterns</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractxmlnodemodel.xml" xlink:role="class">QAbstractXmlNodeModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSimpleXmlNodeModel is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Subclassing <db:link xlink:href="qabstractxmlnodemodel.xml">QAbstractXmlNodeModel</db:link> can be a significant task, because it requires implementing several, complex member functions. <db:link xlink:href="qsimplexmlnodemodel.xml">QSimpleXmlNodeModel</db:link> provides default implementations of these member functions that are suitable for a wide range of node models.</db:para>
<db:para>Subclasses of <db:link xlink:href="qsimplexmlnodemodel.xml">QSimpleXmlNodeModel</db:link> must be thread-safe.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSimpleXmlNodeModel">
<db:title>QSimpleXmlNodeModel::QSimpleXmlNodeModel(const QXmlNamePool &amp;<db:emphasis>namePool</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSimpleXmlNodeModel</db:methodname>
<db:methodparam>
<db:type>const QXmlNamePool &amp;</db:type>
<db:parameter>namePool</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSimpleXmlNodeModel(const QXmlNamePool &amp;namePool)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qsimplexmlnodemodel.xml">QSimpleXmlNodeModel</db:link> for use with with the specified <db:code role="parameter">namePool</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSimpleXmlNodeModel">
<db:title>[virtual] QSimpleXmlNodeModel::~QSimpleXmlNodeModel()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSimpleXmlNodeModel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSimpleXmlNodeModel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="baseUri">
<db:title>[override virtual] QUrl QSimpleXmlNodeModel::baseUri(const QXmlNodeModelIndex &amp;<db:emphasis>node</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>baseUri</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>node</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl baseUri(const QXmlNodeModelIndex &amp;node) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlnodemodel.xml#baseUri" role="function">QAbstractXmlNodeModel::baseUri(const QXmlNodeModelIndex &amp;n) const</db:link>.</db:para>
<db:para>Returns the base URI for <db:code role="parameter">node</db:code>. This is always the document URI.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractxmlnodemodel.xml#documentUri">documentUri</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="elementById">
<db:title>[override virtual] QXmlNodeModelIndex QSimpleXmlNodeModel::elementById(const QXmlName &amp;<db:emphasis>id</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QXmlNodeModelIndex</db:type>
<db:methodname>elementById</db:methodname>
<db:methodparam>
<db:type>const QXmlName &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlNodeModelIndex elementById(const QXmlName &amp;id) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlnodemodel.xml#elementById" role="function">QAbstractXmlNodeModel::elementById(const QXmlName &amp;id) const</db:link>.</db:para>
<db:para>Always returns a default constructed <db:link xlink:href="qxmlnodemodelindex.xml">QXmlNodeModelIndex</db:link> instance, regardless of <db:code role="parameter">id</db:code>.</db:para>
<db:para>This effectively means the model has no elements that have an id.</db:para>
</db:section>
<db:section xml:id="namePool">
<db:title>QXmlNamePool &amp;QSimpleXmlNodeModel::namePool() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QXmlNamePool &amp;</db:type>
<db:methodname>namePool</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlNamePool &amp; namePool() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name pool associated with this model. The implementation of <db:link xlink:href="qabstractxmlnodemodel.xml#name">name</db:link>() will use this name pool to create names.</db:para>
</db:section>
<db:section xml:id="namespaceBindings">
<db:title>[override virtual] QVector&lt;QXmlName&gt; QSimpleXmlNodeModel::namespaceBindings(const QXmlNodeModelIndex &amp;<db:emphasis>node</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVector&lt;QXmlName&gt;</db:type>
<db:methodname>namespaceBindings</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>node</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector&lt;QXmlName&gt; namespaceBindings(const QXmlNodeModelIndex &amp;node) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlnodemodel.xml#namespaceBindings" role="function">QAbstractXmlNodeModel::namespaceBindings(const QXmlNodeModelIndex &amp;n) const</db:link>.</db:para>
<db:para>Always returns an empty <db:link xlink:href="qvector.xml">QVector</db:link>. This signals that no namespace bindings are in scope for <db:code role="parameter">node</db:code>.</db:para>
</db:section>
<db:section xml:id="nodesByIdref">
<db:title>[override virtual] QVector&lt;QXmlNodeModelIndex&gt; QSimpleXmlNodeModel::nodesByIdref(const QXmlName &amp;<db:emphasis>idref</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVector&lt;QXmlNodeModelIndex&gt;</db:type>
<db:methodname>nodesByIdref</db:methodname>
<db:methodparam>
<db:type>const QXmlName &amp;</db:type>
<db:parameter>idref</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVector&lt;QXmlNodeModelIndex&gt; nodesByIdref(const QXmlName &amp;idref) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlnodemodel.xml#nodesByIdref" role="function">QAbstractXmlNodeModel::nodesByIdref(const QXmlName &amp;idref) const</db:link>.</db:para>
<db:para>Always returns an empty vector, regardless of <db:code role="parameter">idref</db:code>.</db:para>
<db:para>This effectively means the model has no elements or attributes of type <db:code>IDREF</db:code>.</db:para>
</db:section>
<db:section xml:id="stringValue">
<db:title>[override virtual] QString QSimpleXmlNodeModel::stringValue(const QXmlNodeModelIndex &amp;<db:emphasis>node</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>stringValue</db:methodname>
<db:methodparam>
<db:type>const QXmlNodeModelIndex &amp;</db:type>
<db:parameter>node</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString stringValue(const QXmlNodeModelIndex &amp;node) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractxmlnodemodel.xml#stringValue" role="function">QAbstractXmlNodeModel::stringValue(const QXmlNodeModelIndex &amp;n) const</db:link>.</db:para>
<db:para>If <db:code role="parameter">node</db:code> is an element or attribute, <db:link xlink:href="qabstractxmlnodemodel.xml#typedValue">typedValue</db:link>() is called, and the return value converted to a string, as per XQuery's rules.</db:para>
<db:para>If <db:code role="parameter">node</db:code> is another type of node, the empty string is returned.</db:para>
<db:para>If this function is overridden for comments or processing instructions, it is important to remember to call it (for elements and attributes having values not of type <db:code>xs:string</db:code>) to ensure that the values are formatted according to XQuery.</db:para>
</db:section>
</db:section>
</db:article>
