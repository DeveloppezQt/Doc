<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>EnginioModel Class</db:title>
<db:productname>QtEnginio</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Client library for Enginio</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="enginiomodel.xml">EnginioModel</db:link> represents data from Enginio as a <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link>.</db:para>
<db:para>This class was introduced in Qt 5.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>EnginioModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractlistmodel.xml" xlink:role="class">QAbstractListModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>EnginioModel is part of <db:simplelist><db:member>enginio-client</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:anchor xml:id="enginiomodelcpp"/>
<db:para><db:link xlink:href="enginiomodel.xml">EnginioModel</db:link> is a <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link>, together with a view it allows to show the result of a query in a convenient way. The model executes query, update and create operations asynchronously on an Enginio backend collection, which allows not only to read data from the cloud but also modify it.</db:para>
<db:para>The simplest type of query is:</db:para>
<db:programlisting language="cpp">{ &quot;objectType&quot;: &quot;objects.fruits&quot; }
</db:programlisting>
<db:para>Assigning such a query to the model results in downloading of all objects from the &quot;objects.fruits&quot; collection. It is possible to <db:link xlink:href="enginiomodel.xml#append">append</db:link> new objects, to <db:link xlink:href="enginiomodel.xml#setData">modify</db:link> or to <db:link xlink:href="enginiomodel.xml#remove">remove</db:link> them.</db:para>
<db:para>The query has to result in a list of objects, each object becomes an item in the model. Properties of the items are used as role names. There are a few predefined role names that will always be available (<db:link xlink:href="enginio.xml#Role-enum">Role</db:link>).</db:para>
<db:para>The operations are executed asynchronously, which means that user interface is not blocked while the model is initialized and updated. Every modification is divided in two steps; request and confirmation. For example when <db:link xlink:href="enginiomodel.xml#append">append</db:link> is called <db:link xlink:href="enginiomodel.xml">EnginioModel</db:link> returns immediately as if the operation had succeeded. In the background it waits for confirmation from the backend and only then the operation is really finished. It may happen that operation fails, for example because of insufficient access rights, in that case the operation will be reverted.</db:para>
<db:para>There are two, ways of tracking if an item state is the same in the model and backend. Each item has a role that returns a boolean <db:link xlink:href="enginio.xml#Role-enum">SyncedRole</db:link>, role name &quot;_synced&quot; which indicates whether the item is successfully updated on the server. This role can for example meant to be used for a busy indicator while a property is being updated. Alternatively the status of each <db:link xlink:href="enginioreply.xml">EnginioReply</db:link> returned by <db:link xlink:href="enginiomodel.xml">EnginioModel</db:link> can be tracked. The operation is confirmed when the reply is <db:link xlink:href="enginioreply.xml#isFinished">finished</db:link> without <db:link xlink:href="enginioreply.xml#isError">error</db:link>.</db:para>
<db:para>When a reply is finished it is the user's responsibility to delete it, it can be done by connecting the <db:link xlink:href="enginioreply.xml#finished">finished</db:link> signal to <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>.</db:para>
<db:programlisting language="cpp">QObject::connect(reply, &amp;EnginioReply::finished, reply, &amp;EnginioReply::deleteLater);
</db:programlisting>
<db:note>
<db:para>it is not safe to use the delete operator directly in <db:link xlink:href="enginioreply.xml#finished">finished</db:link>.</db:para>
</db:note>
<db:note>
<db:para><db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link> emits the finished and error signals for the model, not the model itself.</db:para>
</db:note>
<db:para>The <db:link xlink:href="enginiomodel.xml#query-prop">query</db:link> can contain one or more options: The &quot;sort&quot; option, to get presorted data:</db:para>
<db:programlisting language="cpp">{
  &quot;objectType&quot;: &quot;objects.fruits&quot;,
  &quot;sort&quot;: [{&quot;sortBy&quot;:&quot;price&quot;, &quot;direction&quot;: &quot;asc&quot;}]
}
</db:programlisting>
<db:para>The &quot;query&quot; option is used for filtering:</db:para>
<db:programlisting language="cpp">{
  &quot;objectType&quot;: &quot;objects.fruits&quot;,
  &quot;query&quot;: {&quot;name&quot;: {&quot;$in&quot;: [&quot;apple&quot;, &quot;orange&quot;, &quot;kiwi&quot;]}}
}
</db:programlisting>
<db:para>The &quot;limit&quot; option to limit the amount of results:</db:para>
<db:programlisting language="cpp">{
  &quot;objectType&quot;: &quot;objects.fruits&quot;,
  &quot;limit&quot;: 10
}
</db:programlisting>
<db:para>The &quot;offset&quot; option to skip some results from the beginning of a result set:</db:para>
<db:programlisting language="cpp">{
  &quot;objectType&quot;: &quot;objects.fruits&quot;,
  &quot;offset&quot;: 10
}
</db:programlisting>
<db:para>The options are valid only during the initial model population and are not enforced in anyway when updating or otherwise modifying the model data. <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> can be used to do more advanced sorting and filtering on the client side.</db:para>
<db:para><db:link xlink:href="enginiomodel.xml">EnginioModel</db:link> can not detect when a property of a result is computed by the backend. For example the &quot;include&quot; option to <db:link xlink:href="enginiomodel.xml#query-prop">query</db:link> fills in the original creator of and object with the full object representing the &quot;creator&quot;.</db:para>
<db:programlisting language="cpp">{
  &quot;objectType&quot;: &quot;objects.fruits&quot;,
  &quot;include&quot;: {&quot;creator&quot;: {}}
}
</db:programlisting>
<db:para>For the model the &quot;creator&quot; property is not longer a reference (as it is on the backend), but a full object. But while the full object is accessible, attempts to alter the object's data will fail.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="client-prop">
<db:title>client : EnginioClient*</db:title>
<db:para>This property holds the <db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link> used by the model.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> *<db:emphasis role="bold">client</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setClient</db:emphasis>(const <db:type>int</db:type> *<db:emphasis>client</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">clientChanged</db:emphasis>(<db:type>int</db:type> *<db:emphasis>client</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operation-prop">
<db:title>operation : Enginio::Operation</db:title>
<db:para>This property holds the operation type of the query</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="enginio.xml#Operation-enum">Enginio::Operation</db:link></db:type> <db:emphasis role="bold">operation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOperation</db:emphasis>(<db:type><db:link xlink:href="enginio.xml#Operation-enum">Enginio::Operation</db:link></db:type> <db:emphasis>operation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">operationChanged</db:emphasis>(<db:type><db:link xlink:href="enginio.xml#Operation-enum">Enginio::Operation</db:link></db:type> <db:emphasis>operation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="enginio.xml#Operation-enum">Enginio::Operation</db:link></db:member>
<db:member><db:link xlink:href="enginiomodel.xml#query-prop">query</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="query-prop">
<db:title>query : QJsonObject</db:title>
<db:para>This property holds the query used to populate the model with data from the backend.</db:para>
<db:para>See <db:link xlink:href="qml-enginio-enginioclient.xml#query-method">EnginioClient::query</db:link>() documentation for information on how to construct a query.</db:para>
<db:para>While the <db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link> implementation of <db:code>query()</db:code> returns the data of a query as a JSON object, for the model the query will be interpreted as the model data.</db:para>
<db:para>Usually, the query is for a single object type and will return all objects in the database of that type. The model will then represent each returned object as one row. It can be limited and sorted just like its counterpart in <db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link>.</db:para>
<db:para>One important thing to note is that the model cannot keep the same sorting as the backend, and thus sorting and limits are only preserved until an insertion or deletion happens.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qjsonobject.xml">QJsonObject</db:link></db:type> <db:emphasis role="bold">query</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setQuery</db:emphasis>(const <db:type><db:link xlink:href="qjsonobject.xml">QJsonObject</db:link></db:type> &amp;<db:emphasis>query</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">queryChanged</db:emphasis>(const <db:type><db:link xlink:href="qjsonobject.xml">QJsonObject</db:link></db:type> &amp;<db:emphasis>query</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#query-method">EnginioClient::query</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="EnginioModel">
<db:title>[explicit] EnginioModel::EnginioModel(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new model with <db:code role="parameter">parent</db:code> as <db:link xlink:href="qobject.xml">QObject</db:link> parent.</db:para>
</db:section>
<db:section xml:id="dtor.EnginioModel">
<db:title>[virtual noexcept] EnginioModel::~EnginioModel()</db:title>
<db:para>Destroys the model.</db:para>
</db:section>
<db:section xml:id="append">
<db:title>EnginioReply *EnginioModel::append(const QJsonObject &amp;<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Add a new <db:code role="parameter">object</db:code> to the model and database.</db:para>
<db:para>This function appends the new object to the local model cache and makes an asynchronous request to the backend.</db:para>
<db:para>Since adding an object to the database may fail for various reasons, the returned reply must be kept and used for error handling (see <db:link xlink:href="enginioreply.xml">EnginioReply</db:link>). If the operation fails, the object that was supposed to be appended will be removed from the local model again. If the model is used in a view and the backend does not accept the object because it violates a validator, it will be visible to the user that a new row in the view appears and disappears again.</db:para>
<db:para>Returns the <db:link xlink:href="enginioreply.xml">EnginioReply</db:link> from the backend</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#create-method">EnginioClient::create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reload">
<db:title>[since 1.1] EnginioReply *EnginioModel::reload()</db:title>
<db:para>Reload the model data from the server. This is similar to reset and will emit <db:link xlink:href="qabstractitemmodel.xml#modelAboutToBeReset">modelAboutToBeReset</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#modelReset">modelReset</db:link>(). This function invalidated the internal state of the model, reloads it from the backend and resets all views.</db:para>
<db:note>
<db:para>when using this function while other requests to the server are made the result is undefined. For example when calling <db:link xlink:href="enginiomodel.xml#append">append</db:link>() and then <db:link xlink:href="qtextstream.xml#reset-1">reset</db:link>() before append finished, the model may or may not contain the result of the append operation.</db:para>
</db:note>
<db:para>Returns reply from backend</db:para>
<db:para>This function was introduced in Qt 1.1.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>EnginioReply *EnginioModel::remove(int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Removes the <db:code role="parameter">row</db:code> from the model and database.</db:para>
<db:para>This function immediately removes the <db:code role="parameter">row</db:code> from the local cache and sends a remove request to the Enginio backend.</db:para>
<db:para>Returns the <db:link xlink:href="enginioreply.xml">EnginioReply</db:link> from the backend.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#remove-method">EnginioClient::remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>EnginioReply *EnginioModel::setData(int <db:emphasis>row</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, const QString &amp;<db:emphasis>role</db:emphasis>)</db:title>
<db:para>Update a value on <db:code role="parameter">row</db:code> of this model's local cache and send an update request to the Enginio backend.</db:para>
<db:para>The <db:code role="parameter">role</db:code> is the property of the object that will be updated to be the new <db:code role="parameter">value</db:code>.</db:para>
<db:para>Returns reply from backend.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#update-method">EnginioClient::update</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData-1">
<db:title>EnginioReply *EnginioModel::setData(int <db:emphasis>row</db:emphasis>, const QJsonObject &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Update a <db:code role="parameter">value</db:code> on <db:code role="parameter">row</db:code> of this model's local cache and send an update request to the Enginio backend.</db:para>
<db:para>All properties of the <db:code role="parameter">value</db:code> will be used to update the item in <db:code role="parameter">row</db:code>. This can be useful to update multiple item's properties with one request.</db:para>
<db:para>Returns reply from backend</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml#update-method">EnginioClient::update</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
