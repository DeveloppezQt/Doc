<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpcUaX509CertificateSigningRequest Class</db:title>
<db:productname>QtOpcUa</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>An OPC UA module for Qt</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qopcuax509certificatesigningrequest.xml">QOpcUaX509CertificateSigningRequest</db:link> create a certificate signing request.</db:para>
<db:para>This class was introduced in Qt 5.14.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpcUaX509CertificateSigningRequest</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.14</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opcua</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class is currently available as a Technology Preview, and therefore the API and functionality provided by the class may be subject to change at any time without prior notice.</db:para>
<db:para>Before actually creating the singing request data, any extension needed for that specific request has to be added. Current supported extensions are SubjectAlternativeName, BasicConstrains, KeyUsage and ExtendedKeyUsage.</db:para>
<db:programlisting language="cpp">// Generate key
QOpcUaKeyPair key;
key.generateRsaKey(QOpcUaKeyPair::RsaKeyStrength::Bits1024);

QOpcUaX509CertificateSigningRequest csr;

QOpcUaX509DistinguishedName dn;
dn.setEntry(QOpcUaX509DistinguishedName::Type::CommonName, &quot;QtOpcUaViewer&quot;);
dn.setEntry(QOpcUaX509DistinguishedName::Type::CountryName, &quot;DE&quot;);
dn.setEntry(QOpcUaX509DistinguishedName::Type::LocalityName, &quot;Berlin&quot;);
dn.setEntry(QOpcUaX509DistinguishedName::Type::StateOrProvinceName, &quot;Berlin&quot;);
dn.setEntry(QOpcUaX509DistinguishedName::Type::OrganizationName, &quot;The Qt Company&quot;);
csr.setSubject(dn);

QOpcUaX509ExtensionSubjectAlternativeName *san = new QOpcUaX509ExtensionSubjectAlternativeName;
san-&amp;gt;addData(QOpcUaX509ExtensionSubjectAlternativeName::Type::DNS, &quot;foo.com&quot;);
san-&amp;gt;addData(QOpcUaX509ExtensionSubjectAlternativeName::Type::DNS, &quot;foo.com&quot;);
san-&amp;gt;addData(QOpcUaX509ExtensionSubjectAlternativeName::Type::URI, &quot;urn:foo.com:The%20Qt%20Company:QtOpcUaViewer&quot;);
san-&amp;gt;setCritical(true);
csr.addExtension(san);

QOpcUaX509ExtensionBasicConstraints *bc = new QOpcUaX509ExtensionBasicConstraints;
bc-&amp;gt;setCa(false);
bc-&amp;gt;setCritical(true);
csr.addExtension(bc);

QOpcUaX509ExtensionKeyUsage *ku = new QOpcUaX509ExtensionKeyUsage;
ku-&amp;gt;setCritical(true);
ku-&amp;gt;setKeyUsage(QOpcUaX509ExtensionKeyUsage::KeyUsage::DigitalSignature);
ku-&amp;gt;setKeyUsage(QOpcUaX509ExtensionKeyUsage::KeyUsage::NonRepudiation);
ku-&amp;gt;setKeyUsage(QOpcUaX509ExtensionKeyUsage::KeyUsage::KeyEncipherment);
ku-&amp;gt;setKeyUsage(QOpcUaX509ExtensionKeyUsage::KeyUsage::DataEncipherment);
ku-&amp;gt;setKeyUsage(QOpcUaX509ExtensionKeyUsage::KeyUsage::CertificateSigning);
csr.addExtension(ku);

QOpcUaX509ExtensionExtendedKeyUsage *eku = new QOpcUaX509ExtensionExtendedKeyUsage;
eku-&amp;gt;setCritical(true);
eku-&amp;gt;setKeyUsage(QOpcUaX509ExtensionExtendedKeyUsage::KeyUsage::EmailProtection);
csr.addExtension(eku);

QByteArray csrData = csr.createRequest(key);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QOpcUaX509ExtensionSubjectAlternativeName</db:member>
<db:member>QOpcUaX509ExtensionBasicConstraints</db:member>
<db:member>QOpcUaX509ExtensionKeyUsage</db:member>
<db:member>QOpcUaX509ExtensionKeyUsage</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Encoding-enum">
<db:title>enum QOpcUaX509CertificateSigningRequest::Encoding</db:title>
<db:enumsynopsis>
<db:enumname>Encoding</db:enumname>
<db:enumitem>
<db:enumidentifier>PEM</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DER</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type specifies the encoding of the generated certificate siging request.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopcuax509certificatesigningrequest.xml">QOpcUaX509CertificateSigningRequest</db:link></db:emphasis>::<db:emphasis role="bold">Encoding</db:emphasis>::PEM</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Using PEM encoding</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopcuax509certificatesigningrequest.xml">QOpcUaX509CertificateSigningRequest</db:link></db:emphasis>::<db:emphasis role="bold">Encoding</db:emphasis>::DER</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Using DER encoding</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="MessageDigest-enum">
<db:title>enum QOpcUaX509CertificateSigningRequest::MessageDigest</db:title>
<db:enumsynopsis>
<db:enumname>MessageDigest</db:enumname>
<db:enumitem>
<db:enumidentifier>SHA256</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type specifies the message digest to be used.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopcuax509certificatesigningrequest.xml">QOpcUaX509CertificateSigningRequest</db:link></db:emphasis>::<db:emphasis role="bold">MessageDigest</db:emphasis>::SHA256</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Using the SHA256 message digest</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpcUaX509CertificateSigningRequest">
<db:title>QOpcUaX509CertificateSigningRequest::QOpcUaX509CertificateSigningRequest()</db:title>
<db:constructorsynopsis>
<db:methodname>QOpcUaX509CertificateSigningRequest</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpcUaX509CertificateSigningRequest()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an empty certificate signing request.</db:para>
</db:section>
<db:section xml:id="dtor.QOpcUaX509CertificateSigningRequest">
<db:title>QOpcUaX509CertificateSigningRequest::~QOpcUaX509CertificateSigningRequest()</db:title>
<db:destructorsynopsis>
<db:methodname>~QOpcUaX509CertificateSigningRequest</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QOpcUaX509CertificateSigningRequest()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the request and frees all extensions.</db:para>
</db:section>
<db:section xml:id="addExtension">
<db:title>void QOpcUaX509CertificateSigningRequest::addExtension(QOpcUaX509Extension *<db:emphasis>extension</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addExtension</db:methodname>
<db:methodparam>
<db:type>QOpcUaX509Extension *</db:type>
<db:parameter>extension</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addExtension(QOpcUaX509Extension *extension)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a certificate extension to the request.</db:para>
<db:para>The ownership of the <db:code role="parameter">extension</db:code> object will be transferred to this class.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QOpcUaX509ExtensionSubjectAlternativeName</db:member>
<db:member>QOpcUaX509ExtensionBasicConstraints</db:member>
<db:member>QOpcUaX509ExtensionKeyUsage</db:member>
<db:member>QOpcUaX509ExtensionKeyUsage</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="encoding">
<db:title>QOpcUaX509CertificateSigningRequest::Encoding QOpcUaX509CertificateSigningRequest::encoding() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpcUaX509CertificateSigningRequest::Encoding</db:type>
<db:methodname>encoding</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpcUaX509CertificateSigningRequest::Encoding encoding() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the used request encoding.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuax509certificatesigningrequest.xml#setEncoding">setEncoding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="messageDigest">
<db:title>QOpcUaX509CertificateSigningRequest::MessageDigest QOpcUaX509CertificateSigningRequest::messageDigest() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpcUaX509CertificateSigningRequest::MessageDigest</db:type>
<db:methodname>messageDigest</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpcUaX509CertificateSigningRequest::MessageDigest messageDigest() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the used message digest.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuax509certificatesigningrequest.xml#setMessageDigest">setMessageDigest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEncoding">
<db:title>void QOpcUaX509CertificateSigningRequest::setEncoding(QOpcUaX509CertificateSigningRequest::Encoding <db:emphasis>encoding</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEncoding</db:methodname>
<db:methodparam>
<db:type>QOpcUaX509CertificateSigningRequest::Encoding</db:type>
<db:parameter>encoding</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEncoding(QOpcUaX509CertificateSigningRequest::Encoding encoding)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the used request encoding to <db:code role="parameter">encoding</db:code>. The default request encoding is PEM.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuax509certificatesigningrequest.xml#encoding">encoding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMessageDigest">
<db:title>void QOpcUaX509CertificateSigningRequest::setMessageDigest(QOpcUaX509CertificateSigningRequest::MessageDigest <db:emphasis>digest</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMessageDigest</db:methodname>
<db:methodparam>
<db:type>QOpcUaX509CertificateSigningRequest::MessageDigest</db:type>
<db:parameter>digest</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMessageDigest(QOpcUaX509CertificateSigningRequest::MessageDigest digest)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the used message digest to <db:code role="parameter">digest</db:code>. The default message digest is SHA256.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuax509certificatesigningrequest.xml#messageDigest">messageDigest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSubject">
<db:title>void QOpcUaX509CertificateSigningRequest::setSubject(const QOpcUaX509DistinguishedName &amp;<db:emphasis>subject</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSubject</db:methodname>
<db:methodparam>
<db:type>const QOpcUaX509DistinguishedName &amp;</db:type>
<db:parameter>subject</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSubject(const QOpcUaX509DistinguishedName &amp;subject)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">subject</db:code> for this request. Without a subject it is not possible to generate the request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuax509certificatesigningrequest.xml#subject">subject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subject">
<db:title>const QOpcUaX509DistinguishedName &amp;QOpcUaX509CertificateSigningRequest::subject() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QOpcUaX509DistinguishedName &amp;</db:type>
<db:methodname>subject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QOpcUaX509DistinguishedName &amp; subject() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the subject of this request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuax509certificatesigningrequest.xml#setSubject">setSubject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
