<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAxScriptEngine Class</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link> class provides a wrapper around a script engine.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAxScriptEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS AxContainer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::AxContainer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += axcontainer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qaxobject.xml" xlink:role="class">QAxObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Every instance of the <db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link> class represents an interpreter for script code in a particular scripting language. The class is usually not used directly. The <db:link xlink:href="qaxscript.xml">QAxScript</db:link> and <db:link xlink:href="qaxscriptmanager.xml">QAxScriptManager</db:link> classes provide convenient functions to handle and call script code.</db:para>
<db:para>Direct access to the script engine is provided through <db:link xlink:href="qaxscriptengine.xml#queryInterface">queryInterface</db:link>().</db:para>
<db:warning>
<db:para>This class is not available with the bcc5.5 compiler.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxscript.xml">QAxScript</db:link></db:member>
<db:member><db:link xlink:href="qaxscriptmanager.xml">QAxScriptManager</db:link></db:member>
<db:member><db:link xlink:href="qaxbase.xml">QAxBase</db:link></db:member>
<db:member><db:link xlink:href="activeqt-index.xml">ActiveQt Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="State-enum">
<db:title>enum QAxScriptEngine::State</db:title>
<db:enumsynopsis>
<db:enumname>State</db:enumname>
<db:enumitem>
<db:enumidentifier>Uninitialized</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Initialized</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Started</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Connected</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Disconnected</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Closed</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The State enumeration defines the different states a script engine can be in.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link></db:emphasis>::Uninitialized</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The script has been created, but not yet initialized</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link></db:emphasis>::Initialized</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The script has been initialized, but is not running</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link></db:emphasis>::Started</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The script can execute code, but does not yet handle events</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link></db:emphasis>::Connected</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The script can execute code and is connected so that it can handle events</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link></db:emphasis>::Disconnected</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The script is loaded, but is not connected to event sources</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link></db:emphasis>::Closed</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The script has been closed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAxScriptEngine">
<db:title>QAxScriptEngine::QAxScriptEngine(const QString &amp;<db:emphasis>language</db:emphasis>, QAxScript *<db:emphasis>script</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAxScriptEngine</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>language</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAxScript *</db:type>
<db:parameter>script</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAxScriptEngine(const QString &amp;language, QAxScript *script)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link> object interpreting script code in <db:code role="parameter">language</db:code> provided by the code in <db:code role="parameter">script</db:code>. This is usually done by the <db:link xlink:href="qaxscript.xml">QAxScript</db:link> class when <db:link xlink:href="qaxscript.xml#load">loading a script</db:link>.</db:para>
<db:para>Instances of <db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link> should always have both a language and a script.</db:para>
</db:section>
<db:section xml:id="dtor.QAxScriptEngine">
<db:title>[override virtual] QAxScriptEngine::~QAxScriptEngine()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAxScriptEngine</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAxScriptEngine() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qaxscriptengine.xml">QAxScriptEngine</db:link> object, releasing all allocated resources.</db:para>
</db:section>
<db:section xml:id="addItem">
<db:title>void QAxScriptEngine::addItem(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addItem</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addItem(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers an item with the script engine. Script code can refer to this item using <db:code role="parameter">name</db:code>.</db:para>
</db:section>
<db:section xml:id="hasIntrospection">
<db:title>bool QAxScriptEngine::hasIntrospection() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasIntrospection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasIntrospection() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the script engine supports introspection; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="initialize">
<db:title>[override virtual protected] bool QAxScriptEngine::initialize(IUnknown **<db:emphasis>ptr</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>initialize</db:methodname>
<db:methodparam>
<db:type>IUnknown **</db:type>
<db:parameter>ptr</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool initialize(IUnknown **ptr) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qaxbase.xml#initialize" role="function">QAxBase::initialize(IUnknown **ptr)</db:link>.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QAxScriptEngine::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the script engine has been initialized correctly; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="queryInterface">
<db:title>long QAxScriptEngine::queryInterface(const QUuid &amp;<db:emphasis>uuid</db:emphasis>, void **<db:emphasis>iface</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>long</db:type>
<db:methodname>queryInterface</db:methodname>
<db:methodparam>
<db:type>const QUuid &amp;</db:type>
<db:parameter>uuid</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void **</db:type>
<db:parameter>iface</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">long queryInterface(const QUuid &amp;uuid, void **iface) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Requests the interface <db:code role="parameter">uuid</db:code> from the script engine object and sets the value of <db:code role="parameter">iface</db:code> to the provided interface, or to 0 if the requested interface could not be provided.</db:para>
<db:para>Returns the result of the QueryInterface implementation of the COM object.</db:para>
</db:section>
<db:section xml:id="scriptLanguage">
<db:title>QString QAxScriptEngine::scriptLanguage() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>scriptLanguage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString scriptLanguage() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the scripting language, for example &quot;VBScript&quot;, or &quot;JScript&quot;.</db:para>
</db:section>
<db:section xml:id="setState">
<db:title>void QAxScriptEngine::setState(QAxScriptEngine::State <db:emphasis>st</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setState</db:methodname>
<db:methodparam>
<db:type>QAxScriptEngine::State</db:type>
<db:parameter>st</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setState(QAxScriptEngine::State st)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the state of the script engine to <db:code role="parameter">st</db:code>. Calling this function is usually not necessary.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxscriptengine.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>QAxScriptEngine::State QAxScriptEngine::state() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAxScriptEngine::State</db:type>
<db:methodname>state</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAxScriptEngine::State state() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the state of the script engine.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxscriptengine.xml#setState">setState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
