<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuaternion</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt GUI Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="qFuzzyCompare-4">
<db:title>bool qFuzzyCompare(const int &amp;<db:emphasis>q1</db:emphasis>, const int &amp;<db:emphasis>q2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">q1</db:code> and <db:code role="parameter">q2</db:code> are equal, allowing for a small fuzziness factor for floating-point comparisons; false otherwise.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>int operator*(const int &amp;<db:emphasis>q1</db:emphasis>, const int &amp;<db:emphasis>q2</db:emphasis>)</db:title>
<db:para>Multiplies <db:code role="parameter">q1</db:code> and <db:code role="parameter">q2</db:code> using quaternion multiplication. The result corresponds to applying both of the rotations specified by <db:code role="parameter">q1</db:code> and <db:code role="parameter">q2</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QQuaternion::operator*=()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-1">
<db:title>int operator*(const int &amp;<db:emphasis>quaternion</db:emphasis>, float <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Returns a copy of the given <db:code role="parameter">quaternion</db:code>, multiplied by the given <db:code role="parameter">factor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QQuaternion::operator*=()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-2">
<db:title>int operator*(float <db:emphasis>factor</db:emphasis>, const int &amp;<db:emphasis>quaternion</db:emphasis>)</db:title>
<db:para>Returns a copy of the given <db:code role="parameter">quaternion</db:code>, multiplied by the given <db:code role="parameter">factor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QQuaternion::operator*=()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b">
<db:title>int operator+(const int &amp;<db:emphasis>q1</db:emphasis>, const int &amp;<db:emphasis>q2</db:emphasis>)</db:title>
<db:para>Returns a QQuaternion object that is the sum of the given quaternions, <db:code role="parameter">q1</db:code> and <db:code role="parameter">q2</db:code>; each component is added separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QQuaternion::operator+=()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>int operator-(const int &amp;<db:emphasis>q1</db:emphasis>, const int &amp;<db:emphasis>q2</db:emphasis>)</db:title>
<db:para>Returns a QQuaternion object that is formed by subtracting <db:code role="parameter">q2</db:code> from <db:code role="parameter">q1</db:code>; each component is subtracted separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QQuaternion::operator-=()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--1">
<db:title>int operator-(const int &amp;<db:emphasis>quaternion</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a QQuaternion object that is formed by changing the sign of all three components of the given <db:code role="parameter">quaternion</db:code>.</db:para>
<db:para>Equivalent to <db:code>QQuaternion(0,0,0,0) - quaternion</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2f">
<db:title>const int operator/(const int &amp;<db:emphasis>quaternion</db:emphasis>, float <db:emphasis>divisor</db:emphasis>)</db:title>
<db:para>Returns the QQuaternion object formed by dividing all components of the given <db:code role="parameter">quaternion</db:code> by the given <db:code role="parameter">divisor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QQuaternion::operator/=()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
