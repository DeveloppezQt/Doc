<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QGLFramebufferObjectFormat Class</db:title>
<db:productname>QtOpenGL</db:productname>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qglframebufferobjectformat.xml">QGLFramebufferObjectFormat</db:link> class specifies the format of an OpenGL framebuffer object.</db:para>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGLFramebufferObjectFormat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGLFramebufferObjectFormat is part of <db:simplelist><db:member>painting-3D</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Deprecated</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A framebuffer object has several characteristics:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qglframebufferobjectformat.xml#setSamples">Number of samples per pixels.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglframebufferobjectformat.xml#setAttachment">Depth and/or stencil attachments.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglframebufferobjectformat.xml#setTextureTarget">Texture target.</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qglframebufferobjectformat.xml#setInternalTextureFormat">Internal texture format.</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Note that the desired attachments or number of samples per pixels might not be supported by the hardware driver. Call <db:link xlink:href="qglframebufferobject.xml#format">QGLFramebufferObject::format</db:link>() after creating a <db:link xlink:href="qglframebufferobject.xml">QGLFramebufferObject</db:link> to find the exact format that was used to create the frame buffer object.</db:para>
<db:note>
<db:para>This class has been deprecated in favor of <db:link xlink:href="qopenglframebufferobjectformat.xml">QOpenGLFramebufferObjectFormat</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglframebufferobject.xml">QGLFramebufferObject</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGLFramebufferObjectFormat">
<db:title>QGLFramebufferObjectFormat::QGLFramebufferObjectFormat()</db:title>
<db:para>Creates a <db:link xlink:href="qglframebufferobjectformat.xml" role="deprecated">QGLFramebufferObjectFormat</db:link> object for specifying the format of an OpenGL framebuffer object.</db:para>
<db:para>By default the format specifies a non-multisample framebuffer object with no attachments, texture target <db:code>GL_TEXTURE_2D</db:code>, and internal format <db:code>GL_RGBA8</db:code>. On OpenGL/ES systems, the default internal format is <db:code>GL_RGBA</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#samples">samples</db:link>()</db:member>
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#attachment">attachment</db:link>()</db:member>
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#internalTextureFormat">internalTextureFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGLFramebufferObjectFormat-1">
<db:title>QGLFramebufferObjectFormat::QGLFramebufferObjectFormat(const QGLFramebufferObjectFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGLFramebufferObjectFormat">
<db:title>[noexcept] QGLFramebufferObjectFormat::~QGLFramebufferObjectFormat()</db:title>
<db:para>Destroys the <db:link xlink:href="qglframebufferobjectformat.xml" role="deprecated">QGLFramebufferObjectFormat</db:link>.</db:para>
</db:section>
<db:section xml:id="attachment">
<db:title>QGLFramebufferObject::Attachment QGLFramebufferObjectFormat::attachment() const</db:title>
<db:para>Returns the configuration of the depth and stencil buffers attached to a framebuffer object. The default is <db:link xlink:href="qglframebufferobject.xml#Attachment-enum">QGLFramebufferObject::NoAttachment</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#setAttachment">setAttachment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="internalTextureFormat">
<db:title>GLenum QGLFramebufferObjectFormat::internalTextureFormat() const</db:title>
<db:para>Returns the internal format of a framebuffer object's texture or multisample framebuffer object's color buffer. The default is <db:code>GL_RGBA8</db:code> on desktop OpenGL systems, and <db:code>GL_RGBA</db:code> on OpenGL/ES systems.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#setInternalTextureFormat">setInternalTextureFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mipmap">
<db:title>[since 4.8] bool QGLFramebufferObjectFormat::mipmap() const</db:title>
<db:para>Returns true if mipmapping is enabled.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#setMipmap">setMipmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="samples">
<db:title>int QGLFramebufferObjectFormat::samples() const</db:title>
<db:para>Returns the number of samples per pixel if a framebuffer object is a multisample framebuffer object. Otherwise, returns 0. The default value is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#setSamples">setSamples</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttachment">
<db:title>void QGLFramebufferObjectFormat::setAttachment(QGLFramebufferObject::Attachment <db:emphasis>attachment</db:emphasis>)</db:title>
<db:para>Sets the attachment configuration of a framebuffer object to <db:code role="parameter">attachment</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#attachment">attachment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setInternalTextureFormat">
<db:title>void QGLFramebufferObjectFormat::setInternalTextureFormat(GLenum <db:emphasis>internalTextureFormat</db:emphasis>)</db:title>
<db:para>Sets the internal format of a framebuffer object's texture or multisample framebuffer object's color buffer to <db:code role="parameter">internalTextureFormat</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#internalTextureFormat">internalTextureFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMipmap">
<db:title>[since 4.8] void QGLFramebufferObjectFormat::setMipmap(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:para>Enables mipmapping if <db:code role="parameter">enabled</db:code> is true; otherwise disables it.</db:para>
<db:para>Mipmapping is disabled by default.</db:para>
<db:para>If mipmapping is enabled, additional memory will be allocated for the mipmap levels. The mipmap levels can be updated by binding the texture and calling glGenerateMipmap(). Mipmapping cannot be enabled for multisampled framebuffer objects.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#mipmap">mipmap</db:link>()</db:member>
<db:member><db:link xlink:href="qglframebufferobject.xml#texture">QGLFramebufferObject::texture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSamples">
<db:title>void QGLFramebufferObjectFormat::setSamples(int <db:emphasis>samples</db:emphasis>)</db:title>
<db:para>Sets the number of samples per pixel for a multisample framebuffer object to <db:code role="parameter">samples</db:code>. The default sample count of 0 represents a regular non-multisample framebuffer object.</db:para>
<db:para>If the desired amount of samples per pixel is not supported by the hardware then the maximum number of samples per pixel will be used. Note that multisample framebuffer objects can not be bound as textures. Also, the <db:code>GL_EXT_framebuffer_multisample</db:code> extension is required to create a framebuffer with more than one sample per pixel.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#samples">samples</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextureTarget">
<db:title>void QGLFramebufferObjectFormat::setTextureTarget(GLenum <db:emphasis>target</db:emphasis>)</db:title>
<db:para>Sets the texture target of the texture attached to a framebuffer object to <db:code role="parameter">target</db:code>. Ignored for multisample framebuffer objects.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#textureTarget">textureTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#samples">samples</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textureTarget">
<db:title>GLenum QGLFramebufferObjectFormat::textureTarget() const</db:title>
<db:para>Returns the texture target of the texture attached to a framebuffer object. Ignored for multisample framebuffer objects. The default is <db:code>GL_TEXTURE_2D</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#setTextureTarget">setTextureTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qglframebufferobjectformat.xml#samples">samples</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QGLFramebufferObjectFormat::operator!=(const QGLFramebufferObjectFormat &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns false if all the options of this framebuffer object format are the same as <db:code role="parameter">other</db:code>; otherwise returns true.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGLFramebufferObjectFormat &amp;QGLFramebufferObjectFormat::operator=(const QGLFramebufferObjectFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this object.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QGLFramebufferObjectFormat::operator==(const QGLFramebufferObjectFormat &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if all the options of this framebuffer object format are the same as <db:code role="parameter">other</db:code>; otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
