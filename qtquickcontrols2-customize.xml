<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Customizing Qt Quick Controls 2</db:title>
<db:productname>QtQuickControls2</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 2 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A set of UI controls to create user interfaces in Qt Quick.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Quick Controls 2 consist of a hierarchy (tree) of items. In order to provide a custom look and feel, the default QML implementation of each item can be replaced with a custom one.</db:para>
<db:section xml:id="customizing-a-control">
<db:title>Customizing a Control</db:title>
<db:para>Sometimes you'll want to create a &quot;one-off&quot; look for a specific part of your UI, and use a complete style everywhere else. Perhaps you're happy with the style you're using, but there's a certain button that has some special significance.</db:para>
<db:para>The first way to create this button is to simply define it in-place, wherever it is needed. For example, perhaps you're not satisfied with the default style's Button having square corners. To make them rounded, you can override the <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> item and set the radius property of Rectangle:</db:para>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

ApplicationWindow {
    width: 400
    height: 400
    visible: true

    Button {
        id: button
        text: &quot;A Special Button&quot;
        background: Rectangle {
            implicitWidth: 100
            implicitHeight: 40
            color: button.down ? &quot;#d6d6d6&quot; : &quot;#f6f6f6&quot;
            border.color: &quot;#26282a&quot;
            border.width: 1
            radius: 4
        }
    }
}
</db:programlisting>
<db:para>The second way to create the button is good if you plan to use your rounded button in several places. It involves moving the code into its own QML file within your project.</db:para>
<db:para>For this approach, we'll copy the background code from the default style's <db:code>Button.qml</db:code>. This file can be found in the following path in your Qt installation:</db:para>
<db:para><db:code>$QTDIR/qml/QtQuick/Controls.2/Button.qml</db:code></db:para>
<db:para>After doing that, we'll simply add the following line:</db:para>
<db:programlisting language="cpp">radius: 4
</db:programlisting>
<db:para>To avoid confusion with the controls in the module itself, we'll call the file <db:code>MyButton.qml</db:code>. To use the control in your application, refer to it by its filename:</db:para>
<db:programlisting language="qml">import QtQuick.Controls 2.0

ApplicationWindow {
    MyButton {
        text: qsTr(&quot;A Special Button&quot;)
    }
}
</db:programlisting>
<db:para>The third way to create the button is a bit more structured, both in terms of where the file sits in the file system and how it is used in QML. First, copy an existing file as you did above, but this time, put it into a subfolder in your project named (for example) <db:code>controls</db:code>. To use the control, first import the folder into a namespace:</db:para>
<db:programlisting language="qml">import QtQuick.Controls 2.0
import &quot;controls&quot; as MyControls

ApplicationWindow {
    MyControls.Button {
        text: qsTr(&quot;A Special Button&quot;)
    }
}
</db:programlisting>
<db:para>As you now have the <db:code>MyControls</db:code> namespace, you can name the controls after their actual counterparts in the Qt Quick Controls 2 module. You can repeat this process for any control that you wish to add.</db:para>
</db:section>
<db:section xml:id="creating-a-custom-style">
<db:title>Creating a Custom Style</db:title>
<db:para>There are several ways to go about creating your own styles. Below, we'll explain the various approaches.</db:para>
<db:section xml:id="definition-of-a-style">
<db:title>Definition of a Style</db:title>
<db:para>In Qt Quick Controls 2, a style is essentially an interchangeable set of QML files within a single directory. There are two requirements for a style to be <db:link xlink:href="qtquickcontrols2-styles.xml#using-styles-in-qt-quick-controls-2">usable</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>At least one QML file whose name matches a control (for example, <db:code>Button.qml</db:code>) must exist.</db:para>
<db:para>The Default style will be used for any controls that aren't implemented.</db:para>
</db:listitem>
<db:listitem>
<db:para>The files must be in a directory in the filesystem or in the <db:link xlink:href="resources.xml">resource system</db:link>.</db:para>
<db:para>For example, these are all valid paths to a style:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>./myapp -style /home/absolute/path/to/my/style</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>./myapp -style :/mystyle</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>./myapp -style relative/path/to/my/style</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>./myapp -style MyStyle</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The third and fourth paths will be looked up within the QML engine's import path list. This is the same as what happens when you pass <db:code>Material</db:code> as the style, for example.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>What this means is that you can implement as many controls as you like for your custom style, and place them almost anywhere. It also allows users to create their own styles for your application.</db:para>
</db:section>
<db:section xml:id="style-specific-c-extensions">
<db:title>Style-specific C++ Extensions</db:title>
<db:para>Sometimes you may need to use C++ to extend your custom style. There are two ways to expose such types to QML:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If the style that uses the type is the only style used by an application, it's enough to register it with the QML engine via <db:link xlink:href="qqmlengine.xml#qmlRegisterType">qmlRegisterType</db:link>():</db:para>
<db:programlisting language="cpp">qmlRegisterType&lt;ACoolCppItem&gt;(&quot;MyApp&quot;, 1, 0, &quot;ACoolItem&quot;);
</db:programlisting>
<db:para>See <db:link xlink:href="qtquickcontrols2-gettingstarted.xml#using-c-data-from-qml">Using C++ Data From QML</db:link> for more information about this.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the style that uses the type is one of many styles used by an application, it may be better to only register it when necessary. This is the point at which it would make sense to implement your own <db:link xlink:href="qtqml-modules-cppplugins.xml">QML plugin</db:link>.</db:para>
<db:para>Using a plugin as part of your style is not that much different from using a set of QML files. The only difference is that the plugin and its <db:code>qmldir</db:code> file must be present in the same directory as the QML files.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="attached-properties">
<db:title>Attached properties</db:title>
<db:para>It is common for a style to have certain properties or attributes that apply to all controls. <db:link xlink:href="qtqml-syntax-objectattributes.xml#attached-properties-and-attached-signal-handlers">Attached properties</db:link> are a great way of extending an item in QML without having to modify any existing C++ belonging to that item. For example, both the <db:link xlink:href="qtquickcontrols2-material.xml">Material</db:link> and <db:link xlink:href="qtquickcontrols2-universal.xml">Universal</db:link> styles have an attached theme property that controls whether an item and its children will be rendered in a light or dark theme.</db:para>
<db:para>As an example, let's add an attached property that controls elevation. Our style will illustrate the elevation with a drop shadow; the higher the elevation, the larger the shadow.</db:para>
<db:para>The first step is to add a C++ type that stores the elevation. Since the type will be used for every control supported by our style, and because we may wish to add other attached properties later on, we'll call it MyStyle. Here is <db:code>MyStyle.h</db:code>:</db:para>
<db:programlisting language="cpp">#ifndef MYSTYLE_H
#define MYSTYLE_H

#include &lt;QObject&gt;
#include &lt;QtQml&gt;

class MyStyle : public QObject
{
    Q_OBJECT
    Q_PROPERTY(int elevation READ elevation WRITE setElevation NOTIFY elevationChanged)

public:
    explicit MyStyle(QObject *parent = nullptr);

    static MyStyle *qmlAttachedProperties(QObject *object);

    int elevation() const;
    void setElevation(int elevation);

signals:
    void elevationChanged();

private:
    int m_elevation;
};

QML_DECLARE_TYPEINFO(MyStyle, QML_HAS_ATTACHED_PROPERTIES)

#endif // MYSTYLE_H
</db:programlisting>
<db:para><db:code>MyStyle.cpp</db:code>:</db:para>
<db:programlisting language="cpp">#include &quot;mystyle.h&quot;

MyStyle::MyStyle(QObject *parent) :
    QObject(parent),
    m_elevation(0)
{
}

MyStyle *MyStyle::qmlAttachedProperties(QObject *object)
{
    return new MyStyle(object);
}

int MyStyle::elevation() const
{
    return m_elevation;
}

void MyStyle::setElevation(int elevation)
{
    if (elevation == m_elevation)
        return;

    m_elevation = elevation;
    emit elevationChanged();
}
</db:programlisting>
<db:para>The <db:code>MyStyle</db:code> type is special in the sense that it shouldn't be instantiated, but rather used for its attached properties. For that reason, we register it in the following manner:</db:para>
<db:programlisting language="cpp">qmlRegisterUncreatableType&lt;MyStyle&gt;(&quot;MyStyle&quot;, 1, 0, &quot;MyStyle&quot;, &quot;MyStyle is an attached property&quot;);
</db:programlisting>
<db:para>We then copy the existing default Button style, and add the code for a drop shadow (which was taken from the Material Button style). We modify that slightly to ensure that we:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Don't bother using the drop shadow when the elevation is <db:code>0</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para>Change the shadow's color depending on whether or not the button has focus</db:para>
</db:listitem>
<db:listitem>
<db:para>Make the size of the shadow depend on the elevation</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">layer.enabled: control.enabled &amp;&amp; control.MyStyle.elevation &gt; 0
layer.effect: DropShadow {
    verticalOffset: 1
    color: control.visualFocus ? &quot;#330066ff&quot; : &quot;#aaaaaa&quot;
    samples: control.MyStyle.elevation
    spread: 0.5
}
</db:programlisting>
<db:para>With that in place, we can try out our new elevation feature:</db:para>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

import MyStyle 1.0

ApplicationWindow {
    id: window
    width: 400
    height: 400
    visible: true

    Row {
        spacing: 20
        anchors.centerIn: parent

        Button {
            text: &quot;Button 1&quot;
        }
        Button {
            text: &quot;Button 2&quot;
            MyStyle.elevation: 10
        }
    }
}
</db:programlisting>
<db:para>The end result:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-customize-buttons.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
</db:section>
</db:section>
<db:section xml:id="customization-reference">
<db:title>Customization Reference</db:title>
<db:para>The following snippets present examples where the default style's controls have been customized using the same approach as the <db:link xlink:href="qtquickcontrols2-customize.xml#customizing-a-control">Customizing a Control</db:link> section. The code can be used as a starting point to implement a custom look and feel.</db:para>
<db:section xml:id="customizing-busyindicator">
<db:title>Customizing BusyIndicator</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-busyindicator.xml">BusyIndicator</db:link> consists of two visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-busyindicator-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

BusyIndicator {
    id: control

    contentItem: Item {
        implicitWidth: 64
        implicitHeight: 64

        Item {
            id: item
            x: parent.width / 2 - 32
            y: parent.height / 2 - 32
            width: 64
            height: 64
            opacity: control.running ? 1 : 0

            Behavior on opacity {
                OpacityAnimator {
                    duration: 250
                }
            }

            RotationAnimator {
                target: item
                running: control.visible &amp;&amp; control.running
                from: 0
                to: 360
                loops: Animation.Infinite
                duration: 1250
            }

            Repeater {
                id: repeater
                model: 6

                Rectangle {
                    x: item.width / 2 - width / 2
                    y: item.height / 2 - height / 2
                    implicitWidth: 10
                    implicitHeight: 10
                    radius: 5
                    color: &quot;#21be2b&quot;
                    transform: [
                        Translate {
                            y: -Math.min(item.width, item.height) * 0.5 + 5
                        },
                        Rotation {
                            angle: index / repeater.count * 360
                            origin.x: 5
                            origin.y: 5
                        }
                    ]
                }
            }
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-button">
<db:title>Customizing Button</db:title>
<db:para>Button consists of two visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">content item</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-button-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

Button {
    id: control
    text: qsTr(&quot;Button&quot;)

    contentItem: Text {
        text: control.text
        font: control.font
        opacity: enabled ? 1.0 : 0.3
        color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
        horizontalAlignment: Text.AlignHCenter
        verticalAlignment: Text.AlignVCenter
        elide: Text.ElideRight
    }

    background: Rectangle {
        implicitWidth: 100
        implicitHeight: 40
        opacity: enabled ? 1 : 0.3
        border.color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
        border.width: 1
        radius: 2
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-checkbox">
<db:title>Customizing CheckBox</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-checkbox.xml">CheckBox</db:link> consists of three visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>, <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link> and <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#indicator-prop">indicator</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-checkbox-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

CheckBox {
    id: control
    text: qsTr(&quot;CheckBox&quot;)
    checked: true

    indicator: Rectangle {
        implicitWidth: 26
        implicitHeight: 26
        x: control.leftPadding
        y: parent.height / 2 - height / 2
        radius: 3
        border.color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;

        Rectangle {
            width: 14
            height: 14
            x: 6
            y: 6
            radius: 2
            color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
            visible: control.checked
        }
    }

    contentItem: Text {
        text: control.text
        font: control.font
        opacity: enabled ? 1.0 : 0.3
        color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
        horizontalAlignment: Text.AlignHCenter
        verticalAlignment: Text.AlignVCenter
        leftPadding: control.indicator.width + control.spacing
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-checkdelegate">
<db:title>Customizing CheckDelegate</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-checkdelegate.xml">CheckDelegate</db:link> consists of three visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>, <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link> and <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#indicator-prop">indicator</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-checkdelegate-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

CheckDelegate {
    id: control
    text: qsTr(&quot;CheckDelegate&quot;)
    checked: true

    contentItem: Text {
        rightPadding: control.indicator.width + control.spacing
        text: control.text
        font: control.font
        opacity: enabled ? 1.0 : 0.3
        color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
        elide: Text.ElideRight
        horizontalAlignment: Text.AlignLeft
        verticalAlignment: Text.AlignVCenter
    }

    indicator: Rectangle {
        implicitWidth: 26
        implicitHeight: 26
        x: control.width - width - control.rightPadding
        y: control.topPadding + control.availableHeight / 2 - height / 2
        radius: 3
        color: &quot;transparent&quot;
        border.color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;

        Rectangle {
            width: 14
            height: 14
            x: 6
            y: 6
            radius: 2
            color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
            visible: control.checked
        }
    }

    background: Rectangle {
        implicitWidth: 100
        implicitHeight: 40
        visible: control.down || control.highlighted
        color: control.down ? &quot;#bdbebf&quot; : &quot;#eeeeee&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-combobox">
<db:title>Customizing ComboBox</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-combobox.xml">ComboBox</db:link> consists of <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>, <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">content item</db:link>, <db:link xlink:href="qml-qtquick-controls2-combobox.xml#popup-prop">popup</db:link>, and <db:link xlink:href="qml-qtquick-controls2-combobox.xml#delegate-prop">delegate</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-combobox-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

ComboBox {
    id: control
    model: [&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;]

    delegate: ItemDelegate {
        width: control.width
        contentItem: Text {
            text: modelData
            color: &quot;#21be2b&quot;
            font: control.font
            elide: Text.ElideRight
            verticalAlignment: Text.AlignVCenter
        }
        highlighted: control.highlightedIndex == index
    }

    indicator: Canvas {
        id: canvas
        x: control.width - width - control.rightPadding
        y: control.topPadding + (control.availableHeight - height) / 2
        width: 12
        height: 8
        contextType: &quot;2d&quot;

        Connections {
            target: control
            onPressedChanged: canvas.requestPaint()
        }

        onPaint: {
            context.reset();
            context.moveTo(0, 0);
            context.lineTo(width, 0);
            context.lineTo(width / 2, height);
            context.closePath();
            context.fillStyle = control.pressed ? &quot;#17a81a&quot; : &quot;#21be2b&quot;;
            context.fill();
        }
    }

    contentItem: Text {
        leftPadding: 0
        rightPadding: control.indicator.width + control.spacing

        text: control.displayText
        font: control.font
        color: control.pressed ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
        horizontalAlignment: Text.AlignLeft
        verticalAlignment: Text.AlignVCenter
        elide: Text.ElideRight
    }

    background: Rectangle {
        implicitWidth: 120
        implicitHeight: 40
        border.color: control.pressed ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
        border.width: control.visualFocus ? 2 : 1
        radius: 2
    }

    popup: Popup {
        y: control.height - 1
        width: control.width
        implicitHeight: listview.contentHeight
        padding: 1

        contentItem: ListView {
            id: listview
            clip: true
            model: control.popup.visible ? control.delegateModel : null
            currentIndex: control.highlightedIndex

            ScrollIndicator.vertical: ScrollIndicator { }
        }

        background: Rectangle {
            border.color: &quot;#21be2b&quot;
            radius: 2
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-dial">
<db:title>Customizing Dial</db:title>
<db:para>Dial consists of two visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> and <db:link xlink:href="qml-qtquick-controls2-dial.xml#handle-prop">handle</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-dial-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

Dial {
    id: control
    background: Rectangle {
        x: control.width / 2 - width / 2
        y: control.height / 2 - height / 2
        width: Math.max(64, Math.min(control.width, control.height))
        height: width
        color: &quot;transparent&quot;
        radius: width / 2
        border.color: control.pressed ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
        opacity: control.enabled ? 1 : 0.3
    }

    handle: Rectangle {
        id: handleItem
        x: control.background.x + control.background.width / 2 - width / 2
        y: control.background.y + control.background.height / 2 - height / 2
        width: 16
        height: 16
        color: control.pressed ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
        radius: 8
        antialiasing: true
        opacity: control.enabled ? 1 : 0.3
        transform: [
            Translate {
                y: -Math.min(control.background.width, control.background.height) * 0.4 + handleItem.height / 2
            },
            Rotation {
                angle: control.angle
                origin.x: handleItem.width / 2
                origin.y: handleItem.height / 2
            }
        ]
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-drawer">
<db:title>Customizing Drawer</db:title>
<db:para>Drawer can have a visual <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> item.</db:para>
<db:programlisting language="cpp">background: Rectangle {
    Rectangle {
        x: parent.width - 1
        width: 1
        height: parent.height
        color: &quot;#21be2b&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-frame">
<db:title>Customizing Frame</db:title>
<db:para>Frame consists of one visual item: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-frame-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

Frame {
    background: Rectangle {
        color: &quot;transparent&quot;
        border.color: &quot;#21be2b&quot;
        radius: 2
    }

    Label {
        text: qsTr(&quot;Content goes here!&quot;)
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-groupbox">
<db:title>Customizing GroupBox</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-groupbox.xml">GroupBox</db:link> consists of two visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> and <db:link xlink:href="qml-qtquick-controls2-groupbox.xml#label-prop">label</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-groupbox-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

GroupBox {
    id: control
    title: qsTr(&quot;GroupBox&quot;)

    background: Rectangle {
        y: control.topPadding - control.padding
        width: parent.width
        height: parent.height - control.topPadding + control.padding
        color: &quot;transparent&quot;
        border.color: &quot;#21be2b&quot;
        radius: 2
    }

    Label {
        text: qsTr(&quot;Content goes here!&quot;)
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-itemdelegate">
<db:title>Customizing ItemDelegate</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-itemdelegate.xml">ItemDelegate</db:link> consists of two visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">content item</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-itemdelegate-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

ItemDelegate {
    id: control
    text: qsTr(&quot;ItemDelegate&quot;)

    contentItem: Text {
        rightPadding: control.spacing
        text: control.text
        font: control.font
        color: control.enabled ? (control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;) : &quot;#bdbebf&quot;
        elide: Text.ElideRight
        visible: control.text
        horizontalAlignment: Text.AlignLeft
        verticalAlignment: Text.AlignVCenter
    }

    background: Rectangle {
        implicitWidth: 100
        implicitHeight: 40
        opacity: enabled ? 1 : 0.3
        color: control.down ? &quot;#dddedf&quot; : &quot;#eeeeee&quot;

        Rectangle {
            width: parent.width
            height: 1
            color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
            anchors.bottom: parent.bottom
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-label">
<db:title>Customizing Label</db:title>
<db:para>Label can have a visual <db:link xlink:href="qml-qtquick-controls2-label.xml#background-prop">background</db:link> item.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-label-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

Label {
    text: qsTr(&quot;Label&quot;)
    color: &quot;#21be2b&quot;
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-menu">
<db:title>Customizing Menu</db:title>
<db:para>Menu consists of a <db:link xlink:href="qml-qtquick-controls2-popup.xml#contentItem-prop">contentItem</db:link>.</db:para>
<db:programlisting language="cpp">import QtQuick 2.6
import QtQuick.Controls 2.0

Menu {
    id: menu
    background: Rectangle {
        implicitWidth: 200
        implicitHeight: 200
        color: &quot;#ffffff&quot;
        border.color: &quot;#353637&quot;
    }

    MenuItem {
        text: qsTr(&quot;New...&quot;)
    }
    MenuItem {
        text: qsTr(&quot;Open...&quot;)
    }
    MenuItem {
        text: qsTr(&quot;Save&quot;)
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-menuitem">
<db:title>Customizing MenuItem</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-menuitem.xml">MenuItem</db:link> can be customized in the same manner as <db:link xlink:href="qtquickcontrols2-customize.xml#customizing-button">Button</db:link>.</db:para>
</db:section>
<db:section xml:id="customizing-pageindicator">
<db:title>Customizing PageIndicator</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-pageindicator.xml">PageIndicator</db:link> consists of a <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>, <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">content item</db:link>, and <db:link xlink:href="qml-qtquick-controls2-pageindicator.xml#delegate-prop">delegate</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-pageindicator-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

PageIndicator {
    id: control
    count: 5
    currentIndex: 2

    delegate: Rectangle {
        implicitWidth: 8
        implicitHeight: 8

        radius: width / 2
        color: &quot;#21be2b&quot;

        opacity: index === control.currentIndex ? 0.95 : pressed ? 0.7 : 0.45

        Behavior on opacity {
            OpacityAnimator {
                duration: 100
            }
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-pane">
<db:title>Customizing Pane</db:title>
<db:para>Pane consists of a <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-pane-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

Pane {
    background: Rectangle {
        color: &quot;#eeeeee&quot;
    }

    Label {
        text: qsTr(&quot;Content goes here!&quot;)
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-popup">
<db:title>Customizing Popup</db:title>
<db:para>Popup consists of a <db:link xlink:href="qml-qtquick-controls2-popup.xml#background-prop">background</db:link> and <db:link xlink:href="qml-qtquick-controls2-popup.xml#contentItem-prop">content item</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-popup-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="cpp">import QtQuick 2.6
import QtQuick.Controls 2.0

Popup {
    id: popup
    background: Rectangle {
        implicitWidth: 200
        implicitHeight: 200
        border.color: &quot;#444&quot;
    }
    contentItem: Column {}
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-progressbar">
<db:title>Customizing ProgressBar</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-progressbar.xml">ProgressBar</db:link> consists of two visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">content item</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-progressbar-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

ProgressBar {
    id: control
    value: 0.5
    padding: 2

    background: Rectangle {
        implicitWidth: 200
        implicitHeight: 6
        color: &quot;#e6e6e6&quot;
        radius: 3
    }

    contentItem: Item {
        implicitWidth: 200
        implicitHeight: 4

        Rectangle {
            width: control.visualPosition * parent.width
            height: parent.height
            radius: 2
            color: &quot;#17a81a&quot;
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-radiobutton">
<db:title>Customizing RadioButton</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-radiobutton.xml">RadioButton</db:link> consists of three visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>, <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">content item</db:link> and <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#indicator-prop">indicator</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-radiobutton-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

RadioButton {
    id: control
    text: qsTr(&quot;RadioButton&quot;)
    checked: true

    indicator: Rectangle {
        implicitWidth: 26
        implicitHeight: 26
        x: control.leftPadding
        y: parent.height / 2 - height / 2
        radius: 13
        border.color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;

        Rectangle {
            width: 14
            height: 14
            x: 6
            y: 6
            radius: 7
            color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
            visible: control.checked
        }
    }

    contentItem: Text {
        text: control.text
        font: control.font
        opacity: enabled ? 1.0 : 0.3
        color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
        horizontalAlignment: Text.AlignHCenter
        verticalAlignment: Text.AlignVCenter
        leftPadding: control.indicator.width + control.spacing
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-radiodelegate">
<db:title>Customizing RadioDelegate</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-radiodelegate.xml">RadioDelegate</db:link> consists of three visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>, <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link> and <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#indicator-prop">indicator</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-radiodelegate-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

RadioDelegate {
    id: control
    text: qsTr(&quot;RadioDelegate&quot;)
    checked: true

    contentItem: Text {
        rightPadding: control.indicator.width + control.spacing
        text: control.text
        font: control.font
        opacity: enabled ? 1.0 : 0.3
        color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
        elide: Text.ElideRight
        horizontalAlignment: Text.AlignLeft
        verticalAlignment: Text.AlignVCenter
    }

    indicator: Rectangle {
        implicitWidth: 26
        implicitHeight: 26
        x: control.width - width - control.rightPadding
        y: parent.height / 2 - height / 2
        radius: 13
        color: &quot;transparent&quot;
        border.color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;

        Rectangle {
            width: 14
            height: 14
            x: 6
            y: 6
            radius: 7
            color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
            visible: control.checked
        }
    }

    background: Rectangle {
        implicitWidth: 100
        implicitHeight: 40
        visible: control.down || control.highlighted
        color: control.down ? &quot;#bdbebf&quot; : &quot;#eeeeee&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-rangeslider">
<db:title>Customizing RangeSlider</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-rangeslider.xml">RangeSlider</db:link> consists of three visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>, <db:link xlink:href="qml-qtquick-controls2-rangeslider.xml#first-prop">first.handle</db:link> and <db:link xlink:href="qml-qtquick-controls2-rangeslider.xml#second.handle-prop">second.handle</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-rangeslider-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

RangeSlider {
    id: control
    first.value: 0.25
    second.value: 0.75

    background: Rectangle {
        x: control.leftPadding
        y: control.topPadding + control.availableHeight / 2 - height / 2
        implicitWidth: 200
        implicitHeight: 4
        width: control.availableWidth
        height: implicitHeight
        radius: 2
        color: &quot;#bdbebf&quot;

        Rectangle {
            x: control.first.visualPosition * parent.width
            width: control.second.visualPosition * parent.width - x
            height: parent.height
            color: &quot;#21be2b&quot;
            radius: 2
        }
    }

    first.handle: Rectangle {
        x: control.leftPadding + first.visualPosition * (control.availableWidth - width)
        y: control.topPadding + control.availableHeight / 2 - height / 2
        implicitWidth: 26
        implicitHeight: 26
        radius: 13
        color: first.pressed ? &quot;#f0f0f0&quot; : &quot;#f6f6f6&quot;
        border.color: &quot;#bdbebf&quot;
    }

    second.handle: Rectangle {
        x: control.leftPadding + second.visualPosition * (control.availableWidth - width)
        y: control.topPadding + control.availableHeight / 2 - height / 2
        implicitWidth: 26
        implicitHeight: 26
        radius: 13
        color: second.pressed ? &quot;#f0f0f0&quot; : &quot;#f6f6f6&quot;
        border.color: &quot;#bdbebf&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-scrollbar">
<db:title>Customizing ScrollBar</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-scrollbar.xml">ScrollBar</db:link> consists of two visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">content item</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-scrollbar-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

ScrollBar {
    id: control
    size: 0.3
    position: 0.2
    active: true
    orientation: Qt.Vertical

    contentItem: Rectangle {
        implicitWidth: 6
        implicitHeight: 100
        radius: width / 2
        color: control.pressed ? &quot;#81e889&quot; : &quot;#c2f4c6&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-scrollindicator">
<db:title>Customizing ScrollIndicator</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-scrollindicator.xml">ScrollIndicator</db:link> consists of two visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">content item</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-scrollindicator-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

ScrollIndicator {
    id: control
    size: 0.3
    position: 0.2
    active: true
    orientation: Qt.Vertical

    contentItem: Rectangle {
        implicitWidth: 2
        implicitHeight: 100
        color: &quot;#c2f4c6&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-slider">
<db:title>Customizing Slider</db:title>
<db:para>Slider consists of two visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>, and <db:link xlink:href="qml-qtquick-controls2-slider.xml#handle-prop">handle</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-slider-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

Slider {
    id: control
    value: 0.5

    background: Rectangle {
        x: control.leftPadding
        y: control.topPadding + control.availableHeight / 2 - height / 2
        implicitWidth: 200
        implicitHeight: 4
        width: control.availableWidth
        height: implicitHeight
        radius: 2
        color: &quot;#bdbebf&quot;

        Rectangle {
            width: control.visualPosition * parent.width
            height: parent.height
            color: &quot;#21be2b&quot;
            radius: 2
        }
    }

    handle: Rectangle {
        x: control.leftPadding + control.visualPosition * (control.availableWidth - width)
        y: control.topPadding + control.availableHeight / 2 - height / 2
        implicitWidth: 26
        implicitHeight: 26
        radius: 13
        color: control.pressed ? &quot;#f0f0f0&quot; : &quot;#f6f6f6&quot;
        border.color: &quot;#bdbebf&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-spinbox">
<db:title>Customizing SpinBox</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-spinbox.xml">SpinBox</db:link> consists of four visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>, <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link>, <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#up.indicator-prop">up indicator</db:link>, and <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#down.indicator-prop">down indicator</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-spinbox-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

SpinBox {
    id: control
    value: 50
    editable: true

    contentItem: TextInput {
        z: 2
        text: control.textFromValue(control.value, control.locale)

        font: control.font
        color: &quot;#21be2b&quot;
        selectionColor: &quot;#21be2b&quot;
        selectedTextColor: &quot;#ffffff&quot;
        horizontalAlignment: Qt.AlignHCenter
        verticalAlignment: Qt.AlignVCenter

        readOnly: !control.editable
        validator: control.validator
        inputMethodHints: Qt.ImhFormattedNumbersOnly
    }

    up.indicator: Rectangle {
        x: control.mirrored ? 0 : parent.width - width
        height: parent.height
        implicitWidth: 40
        implicitHeight: 40
        color: up.pressed ? &quot;#e4e4e4&quot; : &quot;#f6f6f6&quot;
        border.color: enabled ? &quot;#21be2b&quot; : &quot;#bdbebf&quot;

        Text {
            text: &quot;+&quot;
            font.pixelSize: control.font.pixelSize * 2
            color: &quot;#21be2b&quot;
            anchors.fill: parent
            fontSizeMode: Text.Fit
            horizontalAlignment: Text.AlignHCenter
            verticalAlignment: Text.AlignVCenter
        }
    }

    down.indicator: Rectangle {
        x: control.mirrored ? parent.width - width : 0
        height: parent.height
        implicitWidth: 40
        implicitHeight: 40
        color: down.pressed ? &quot;#e4e4e4&quot; : &quot;#f6f6f6&quot;
        border.color: enabled ? &quot;#21be2b&quot; : &quot;#bdbebf&quot;

        Text {
            text: &quot;-&quot;
            font.pixelSize: control.font.pixelSize * 2
            color: &quot;#21be2b&quot;
            anchors.fill: parent
            fontSizeMode: Text.Fit
            horizontalAlignment: Text.AlignHCenter
            verticalAlignment: Text.AlignVCenter
        }
    }

    background: Rectangle {
        implicitWidth: 140
        border.color: &quot;#bdbebf&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-stackview">
<db:title>Customizing StackView</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-stackview.xml">StackView</db:link> can have a visual <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> item, and it allows customizing the transitions that are used for push, pop, and replace operations.</db:para>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

StackView {
    id: control

    popEnter: Transition {
        XAnimator {
            from: (control.mirrored ? -1 : 1) * -control.width
            to: 0
            duration: 400
            easing.type: Easing.OutCubic
        }
    }

    popExit: Transition {
        XAnimator {
            from: 0
            to: (control.mirrored ? -1 : 1) * control.width
            duration: 400
            easing.type: Easing.OutCubic
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-swipedelegate">
<db:title>Customizing SwipeDelegate</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-swipedelegate.xml">SwipeDelegate</db:link> consists of six visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>, <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">content item</db:link>, <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#indicator-prop">indicator</db:link>, <db:code>swipe.left</db:code>, <db:code>swipe.right</db:code>, and <db:code>swipe.behind</db:code>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-swipedelegate-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

SwipeDelegate {
    id: control
    text: qsTr(&quot;SwipeDelegate&quot;)

    Component {
        id: component

        Rectangle {
            color: control.swipe.complete &amp;&amp; control.down ? &quot;#333&quot; : &quot;#444&quot;
            width: parent.width
            height: parent.height
            clip: true

            Label {
                text: qsTr(&quot;Press me!&quot;)
                color: &quot;#21be2b&quot;
                anchors.centerIn: parent
            }
        }
    }

    swipe.left: component
    swipe.right: component

    contentItem: Text {
        text: control.text
        font: control.font
        color: control.enabled ? (control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;) : &quot;#bdbebf&quot;
        elide: Text.ElideRight
        visible: control.text
        horizontalAlignment: Text.AlignLeft
        verticalAlignment: Text.AlignVCenter

        Behavior on x {
            enabled: !control.down
            NumberAnimation {
                easing.type: Easing.InOutCubic
                duration: 400
            }
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-swipeview">
<db:title>Customizing SwipeView</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-swipeview.xml">SwipeView</db:link> can have a visual <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> item. The navigation is implemented by the <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">content item</db:link>.</db:para>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

SwipeView {
    id: control

    background: Rectangle {
        color: &quot;#eeeeee&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-switch">
<db:title>Customizing Switch</db:title>
<db:para>Switch consists of three visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>, <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">content item</db:link> and <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#indicator-prop">indicator</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-switch-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

Switch {
    id: control
    text: qsTr(&quot;Switch&quot;)

    indicator: Rectangle {
        implicitWidth: 48
        implicitHeight: 26
        x: control.leftPadding
        y: parent.height / 2 - height / 2
        radius: 13
        color: control.checked ? &quot;#17a81a&quot; : &quot;#ffffff&quot;
        border.color: control.checked ? &quot;#17a81a&quot; : &quot;#cccccc&quot;

        Rectangle {
            x: control.checked ? parent.width - width : 0
            width: 26
            height: 26
            radius: 13
            color: control.down ? &quot;#cccccc&quot; : &quot;#ffffff&quot;
            border.color: control.checked ? (control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;) : &quot;#999999&quot;
        }
    }

    contentItem: Text {
        text: control.text
        font: control.font
        opacity: enabled ? 1.0 : 0.3
        color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
        horizontalAlignment: Text.AlignHCenter
        verticalAlignment: Text.AlignVCenter
        leftPadding: control.indicator.width + control.spacing
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-switchdelegate">
<db:title>Customizing SwitchDelegate</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-switchdelegate.xml">SwitchDelegate</db:link> consists of three visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>, <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link> and <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#indicator-prop">indicator</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-switchdelegate-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

SwitchDelegate {
    id: control
    text: qsTr(&quot;SwitchDelegate&quot;)
    checked: true

    contentItem: Text {
        rightPadding: control.indicator.width + control.spacing
        text: control.text
        font: control.font
        opacity: enabled ? 1.0 : 0.3
        color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
        elide: Text.ElideRight
        horizontalAlignment: Text.AlignLeft
        verticalAlignment: Text.AlignVCenter
    }

    indicator: Rectangle {
        implicitWidth: 48
        implicitHeight: 26
        x: control.width - width - control.rightPadding
        y: parent.height / 2 - height / 2
        radius: 13
        color: control.checked ? &quot;#17a81a&quot; : &quot;transparent&quot;
        border.color: control.checked ? &quot;#17a81a&quot; : &quot;#cccccc&quot;

        Rectangle {
            x: control.checked ? parent.width - width : 0
            width: 26
            height: 26
            radius: 13
            color: control.down ? &quot;#cccccc&quot; : &quot;#ffffff&quot;
            border.color: control.checked ? (control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;) : &quot;#999999&quot;
        }
    }

    background: Rectangle {
        implicitWidth: 100
        implicitHeight: 40
        visible: control.down || control.highlighted
        color: control.down ? &quot;#bdbebf&quot; : &quot;#eeeeee&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-tabbar">
<db:title>Customizing TabBar</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-tabbar.xml">TabBar</db:link> consists of two visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>, and <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-tabbar-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

TabBar {
    id: control

    background: Rectangle {
        color: &quot;#eeeeee&quot;
    }

    TabButton {
        text: qsTr(&quot;Home&quot;)
    }
    TabButton {
        text: qsTr(&quot;Discover&quot;)
    }
    TabButton {
        text: qsTr(&quot;Activity&quot;)
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-tabbutton">
<db:title>Customizing TabButton</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-tabbutton.xml">TabButton</db:link> can be customized in the same manner as <db:link xlink:href="qtquickcontrols2-customize.xml#customizing-button">Button</db:link>.</db:para>
</db:section>
<db:section xml:id="customizing-textarea">
<db:title>Customizing TextArea</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-textarea.xml">TextArea</db:link> consists of a <db:link xlink:href="qml-qtquick-controls2-textarea.xml#background-prop">background</db:link> item.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-textarea-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

TextArea {
    id: control
    placeholderText: qsTr(&quot;Enter description&quot;)

    background: Rectangle {
        implicitWidth: 200
        implicitHeight: 40
        border.color: control.enabled ? &quot;#21be2b&quot; : &quot;transparent&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-textfield">
<db:title>Customizing TextField</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-textfield.xml">TextField</db:link> consists of a <db:link xlink:href="qml-qtquick-controls2-textfield.xml#background-prop">background</db:link> item.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-textfield-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

TextField {
    id: control
    placeholderText: qsTr(&quot;Enter description&quot;)

    background: Rectangle {
        implicitWidth: 200
        implicitHeight: 40
        color: control.enabled ? &quot;transparent&quot; : &quot;#353637&quot;
        border.color: control.enabled ? &quot;#21be2b&quot; : &quot;transparent&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-toolbar">
<db:title>Customizing ToolBar</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-toolbar.xml">ToolBar</db:link> consists of one visual item: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-toolbar-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ToolBar {
    id: control

    background: Rectangle {
        implicitHeight: 40
        color: &quot;#eeeeee&quot;

        Rectangle {
            width: parent.width
            height: 1
            anchors.bottom: parent.bottom
            color: &quot;transparent&quot;
            border.color: &quot;#21be2b&quot;
        }
    }

    RowLayout {
        anchors.fill: parent
        ToolButton {
            text: qsTr(&quot;Undo&quot;)
        }
        ToolButton {
            text: qsTr(&quot;Redo&quot;)
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-toolbutton">
<db:title>Customizing ToolButton</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-toolbutton.xml">ToolButton</db:link> consists of two visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">content item</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-toolbutton-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

ToolButton {
    id: control
    text: qsTr(&quot;ToolButton&quot;)
    width: 120

    contentItem: Text {
        text: control.text
        font: control.font
        opacity: enabled ? 1.0 : 0.3
        color: control.down ? &quot;#17a81a&quot; : &quot;#21be2b&quot;
        horizontalAlignment: Text.AlignHCenter
        verticalAlignment: Text.AlignVCenter
        elide: Text.ElideRight
    }

    background: Rectangle {
        implicitWidth: 40
        implicitHeight: 40
        color: Qt.darker(&quot;#33333333&quot;, control.enabled &amp;&amp; (control.checked || control.highlighted) ? 1.5 : 1.0)
        opacity: enabled ? 1 : 0.3
        visible: control.down || (control.enabled &amp;&amp; (control.checked || control.highlighted))
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-tooltip">
<db:title>Customizing ToolTip</db:title>
<db:para><db:link xlink:href="qml-qtquick-controls2-tooltip.xml">ToolTip</db:link> consists of two visual items: <db:link xlink:href="qml-qtquick-controls2-popup.xml#background-prop">background</db:link> and <db:link xlink:href="qml-qtquick-controls2-popup.xml#contentItem-prop">content item</db:link>.</db:para>
<db:programlisting language="cpp">import QtQuick 2.6
import QtQuick.Controls 2.0

ToolTip {
    id: control
    text: qsTr(&quot;A descriptive tool tip of what the button does&quot;)

    contentItem: Text {
        text: control.text
        font: control.font
        color: &quot;#21be2b&quot;
    }

    background: Rectangle {
        border.color: &quot;#21be2b&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="customizing-tumbler">
<db:title>Customizing Tumbler</db:title>
<db:para>Tumbler consists of three visual items: <db:link xlink:href="qml-qtquick-controls2-control.xml#background-prop">background</db:link>, <db:link xlink:href="qml-qtquick-controls2-control.xml#contentItem-prop">contentItem</db:link>, and <db:link xlink:href="qml-qtquick-controls2-tumbler.xml#delegate-prop">delegate</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-tumbler-custom.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">import QtQuick 2.6
import QtQuick.Controls 2.0

Tumbler {
    id: control
    model: 15
    visibleItemCount: 5

    background: Item {
        Rectangle {
            opacity: control.enabled ? 0.2 : 0.1
            border.color: &quot;#000000&quot;
            width: parent.width
            height: 1
            anchors.top: parent.top
        }

        Rectangle {
            opacity: control.enabled ? 0.2 : 0.1
            border.color: &quot;#000000&quot;
            width: parent.width
            height: 1
            anchors.bottom: parent.bottom
        }
    }

    delegate: Text {
        text: qsTr(&quot;Item %1&quot;).arg(modelData + 1)
        font: control.font
        horizontalAlignment: Text.AlignHCenter
        verticalAlignment: Text.AlignVCenter
        opacity: 1.0 - Math.abs(Tumbler.displacement) / (visibleItemCount / 2)
    }

    Rectangle {
        anchors.horizontalCenter: control.horizontalCenter
        y: control.height * 0.4
        width: 40
        height: 1
        color: &quot;#21be2b&quot;
    }

    Rectangle {
        anchors.horizontalCenter: control.horizontalCenter
        y: control.height * 0.6
        width: 40
        height: 1
        color: &quot;#21be2b&quot;
    }
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
