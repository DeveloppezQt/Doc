<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Web Browser Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The Web Browser example uses the Microsoft Web Browser ActiveX control to implement a fully functional Web Browser application. The user interface has been developed using the Qt Designer integration of the <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link> class.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QApplication&gt;
#include &lt;QMessageBox&gt;
#include &lt;QProgressBar&gt;
#include &lt;QLineEdit&gt;
#include &lt;QLabel&gt;
#include &lt;QStatusBar&gt;
#include &lt;QMainWindow&gt;
#include &lt;QDesktopWidget&gt;
#include &lt;QAbstractEventDispatcher&gt;
#include &lt;QSignalMapper&gt;
#include &lt;QVariant&gt;
#include &lt;QSettings&gt;

#if defined(Q_WS_WINCE_WM)
#include &quot;ui_mainwindow_windowsmobile.h&quot;
#include &lt;windows.h&gt;
#else
#include &quot;ui_mainwindow.h&quot;
#endif

static const char qtUrl[] = &quot;qt.io&quot;;
static const char iWebBrowser2DocumentationUrl[] = &quot;http://msdn.microsoft.com/en-us/library/aa752127%28v=vs.85%29.aspx&quot;;
static const char versionKey[] = &quot;Version&quot;;
static const char geometryKey[] = &quot;Geometry&quot;;

struct Location {
    Location(const QString &amp;t = QString(), const QString &amp;a = QString()) : title(t), address(a) {}

    QString title;
    QString address;
};

Q_DECLARE_METATYPE(Location)

static QList&lt;Location&gt; defaultBookmarks()
{
    QList&lt;Location&gt; result;
    result.append(Location(QStringLiteral(&quot;Qt&quot;), QLatin1String(qtUrl)));
    result.append(Location(QStringLiteral(&quot;Digia&quot;), QStringLiteral(&quot;http://qt.digia.com/&quot;)));
    result.append(Location(QStringLiteral(&quot;IWebBrowser2 MSDN Documentation&quot;), QLatin1String(iWebBrowser2DocumentationUrl)));
    return result;
}

static bool containsAddress(const QList&lt;Location&gt; &amp;locations, const QString &amp;address)
{
    foreach (const Location &amp;location, locations) {
        if (location.address == address)
            return true;
    }
    return false;
}

static inline Location locationFromAction(const QAction *action)
{
    return action-&gt;data().value&lt;Location&gt;();
}

static QList&lt;Location&gt; readBookMarks(QSettings &amp;settings)
{
    QList&lt;Location&gt; result;
    if (const int count = settings.beginReadArray(QStringLiteral(&quot;Bookmarks&quot;))) {
        const QString titleKey = QStringLiteral(&quot;title&quot;);
        const QString addressKey = QStringLiteral(&quot;address&quot;);
        for (int i = 0; i &lt; count; ++i) {
            settings.setArrayIndex(i);
            result.append(Location(settings.value(titleKey).toString(),
                                   settings.value(addressKey).toString()));
        }
    }
    settings.endArray();
    return result;
}

static void saveBookMarks(const QList&lt;Location&gt; &amp;bookmarks, QSettings &amp;settings)
{
    const int count = bookmarks.size();
    settings.beginWriteArray(QStringLiteral(&quot;Bookmarks&quot;));
    const QString titleKey = QStringLiteral(&quot;title&quot;);
    const QString addressKey = QStringLiteral(&quot;address&quot;);
    for (int i = 0; i &lt; count; ++i) {
        settings.setArrayIndex(i);
        settings.setValue(titleKey, bookmarks.at(i).title);
        settings.setValue(addressKey, bookmarks.at(i).address);
    }
    settings.endArray();
}

class MainWindow : public QMainWindow, public Ui::MainWindow
{
    Q_OBJECT
public:
    MainWindow();
    ~MainWindow();

public slots:
    void navigate(const QString &amp;address);
    void on_WebBrowser_TitleChange(const QString &amp;title);
    void on_WebBrowser_ProgressChange(int a, int b);
    void on_WebBrowser_CommandStateChange(int cmd, bool on);
    void on_WebBrowser_BeforeNavigate();
    void on_WebBrowser_NavigateComplete(const QString &amp;address);

    void on_actionGo_triggered();
    void on_actionNewWindow_triggered();
    void on_actionAddBookmark_triggered();
    void on_actionAbout_triggered();
    void on_actionAboutQt_triggered();
    void on_actionFileClose_triggered();

private:
    inline const QString address() const
        { return addressEdit-&gt;text().trimmed(); }
    QList&lt;Location&gt; bookmarks() const;
    QAction *addLocation(const Location &amp;location, QMenu *menu);
    inline void addBookmark(const Location &amp;location)
        { bookmarkActions &lt;&lt; addLocation(location, BookmarksMenu); }

    QProgressBar *pb;
    QLineEdit *addressEdit;
    QList&lt;QAction *&gt; bookmarkActions;
    QList&lt;QAction *&gt; historyActions;
    QSignalMapper locationActionMapper;
};

MainWindow::MainWindow()
{
    setupUi(this);

    addressEdit = new QLineEdit;
    tbAddress-&gt;insertWidget(actionGo, new QLabel(tr(&quot;Address&quot;)));
    tbAddress-&gt;insertWidget(actionGo, addressEdit);

    connect(addressEdit, SIGNAL(returnPressed()), actionGo, SLOT(trigger()));
    connect(actionBack, SIGNAL(triggered()), WebBrowser, SLOT(GoBack()));
    connect(actionForward, SIGNAL(triggered()), WebBrowser, SLOT(GoForward()));
    connect(actionStop, SIGNAL(triggered()), WebBrowser, SLOT(Stop()));
    connect(actionRefresh, SIGNAL(triggered()), WebBrowser, SLOT(Refresh()));
    connect(actionHome, SIGNAL(triggered()), WebBrowser, SLOT(GoHome()));
    connect(actionSearch, SIGNAL(triggered()), WebBrowser, SLOT(GoSearch()));

    pb = new QProgressBar(statusBar());
    pb-&gt;setTextVisible(false);
    pb-&gt;hide();
    statusBar()-&gt;addPermanentWidget(pb);

    connect(&amp;locationActionMapper, SIGNAL(mapped(QString)), this, SLOT(navigate(QString)));

    QSettings settings(QSettings::IniFormat, QSettings::UserScope,
                       QCoreApplication::organizationName(), QCoreApplication::applicationName());
    const QByteArray restoredGeometry = settings.value(QLatin1String(geometryKey)).toByteArray();
    if (restoredGeometry.isEmpty() || !restoreGeometry(restoredGeometry)) {
        const QRect availableGeometry = QApplication::desktop()-&gt;availableGeometry(this);
        const QSize size = (availableGeometry.size() * 4) / 5;
        resize(size);
        move(availableGeometry.center() - QPoint(size.width(), size.height()) / 2);
    }
    const QString restoredVersion = settings.value(QLatin1String(versionKey)).toString();
    QList&lt;Location&gt; bookmarks = readBookMarks(settings);
    if (bookmarks.isEmpty() || restoredVersion.isEmpty())
        bookmarks = defaultBookmarks();
    foreach (const Location &amp;bookmark, bookmarks)
        addBookmark(bookmark);
}


MainWindow::~MainWindow()
{
    QSettings settings(QSettings::IniFormat, QSettings::UserScope,
                       QCoreApplication::organizationName(), QCoreApplication::applicationName());
    saveBookMarks(bookmarks(), settings);
    settings.setValue(QLatin1String(versionKey), QLatin1String(QT_VERSION_STR));
    settings.setValue(QLatin1String(geometryKey), saveGeometry());
}

QAction *MainWindow::addLocation(const Location &amp;location, QMenu *menu)
{
    QAction *action = menu-&gt;addAction(location.title);
    action-&gt;setData(QVariant::fromValue(location));
    locationActionMapper.setMapping(action, location.address);
    connect(action, SIGNAL(triggered()), &amp;locationActionMapper, SLOT(map()));
    return action;
}

QList&lt;Location&gt; MainWindow::bookmarks() const
{
    QList&lt;Location&gt; result;
    foreach (const QAction *action, bookmarkActions)
        result.append(locationFromAction(action));
    return result;
}

void MainWindow::on_actionAddBookmark_triggered()
{
    if (!historyActions.isEmpty()) {
        const Location location = locationFromAction(historyActions.last());
        if (!containsAddress(bookmarks(), location.address))
            addBookmark(location);
    }
}

void MainWindow::on_WebBrowser_TitleChange(const QString &amp;title)
{
    // This is called multiple times after NavigateComplete().
    // Add new URLs to history here.
    setWindowTitle(&quot;Qt WebBrowser - &quot; + title);
    const QString currentAddress = address();
    const QString historyAddress = historyActions.isEmpty() ?
        QString() : locationFromAction(historyActions.last()).address;
    if (currentAddress.isEmpty() || currentAddress == &quot;about:blank&quot; || currentAddress == historyAddress)
        return;
    historyActions &lt;&lt; addLocation(Location(title, currentAddress), HistoryMenu);
    if (historyActions.size() &gt; 10)
        delete historyActions.takeFirst();
}

void MainWindow::on_WebBrowser_ProgressChange(int a, int b)
{
    if (a &lt;= 0 || b &lt;= 0) {
        pb-&gt;hide();
        return;
    }
    pb-&gt;show();
    pb-&gt;setRange(0, b);
    pb-&gt;setValue(a);
}

void MainWindow::on_WebBrowser_CommandStateChange(int cmd, bool on)
{
    switch (cmd) {
    case 1:
        actionForward-&gt;setEnabled(on);
        break;
    case 2:
        actionBack-&gt;setEnabled(on);
        break;
    }
}

void MainWindow::on_WebBrowser_BeforeNavigate()
{
    actionStop-&gt;setEnabled(true);
}

void MainWindow::on_WebBrowser_NavigateComplete(const QString &amp;url)
{
    actionStop-&gt;setEnabled(false);
    const bool blocked = addressEdit-&gt;blockSignals(true);
    addressEdit-&gt;setText(url);
    addressEdit-&gt;blockSignals(blocked);
}

void MainWindow::on_actionGo_triggered()
{
    navigate(address());
}


void MainWindow::navigate(const QString &amp;url)
{
    WebBrowser-&gt;dynamicCall(&quot;Navigate(const QString&amp;)&quot;, url);
}

void MainWindow::on_actionNewWindow_triggered()
{
    MainWindow *window = new MainWindow;
    window-&gt;show();
    if (addressEdit-&gt;text().isEmpty())
        return;
    window-&gt;addressEdit-&gt;setText(addressEdit-&gt;text());
    window-&gt;actionStop-&gt;setEnabled(true);
    window-&gt;on_actionGo_triggered();
}

void MainWindow::on_actionAbout_triggered()
{
    QMessageBox::about(this, tr(&quot;About WebBrowser&quot;),
                tr(&quot;This Example has been created using the ActiveQt integration into Qt Designer.\n&quot;
                   &quot;It demonstrates the use of QAxWidget to embed the Internet Explorer ActiveX\n&quot;
                   &quot;control into a Qt application.&quot;));
}

void MainWindow::on_actionAboutQt_triggered()
{
    QMessageBox::aboutQt(this, tr(&quot;About Qt&quot;));
}

void MainWindow::on_actionFileClose_triggered()
{
    close();
}

#include &quot;main.moc&quot;

int main(int argc, char ** argv)
{
    QApplication a(argc, argv);
    QCoreApplication::setApplicationVersion(QT_VERSION_STR);
    QCoreApplication::setApplicationName(&quot;Active Qt Web Browser&quot;);
    QCoreApplication::setOrganizationName(&quot;QtProject&quot;);
    MainWindow w;
    const QStringList arguments = QCoreApplication::arguments();
    const QString url = arguments.size() &gt; 1 ?
        arguments.at(1) : QString::fromLatin1(qtUrl);
    w.navigate(url);
#if defined(Q_OS_WINCE)
    w.showMaximized();
#else
    w.show();
#endif
    return a.exec();
}

</db:programlisting>
</db:article>
