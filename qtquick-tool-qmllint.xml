<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qmllint</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A tool for verifying the syntax of QML files and warning about anti-patterns.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>qmllint</db:emphasis> is a tool shipped with Qt, that verifies the syntatic validity of QML files. It also warns about some QML anti-patterns. If you want to disable a specific warning type, you can find the appropriate flag for doing so by passing <db:code>--help</db:code> on the command line.</db:para>
<db:para>By default, some issues will result in warnings that will be printed and result in a non-zero exit code. Minor issues however (such as unused imports) are just informational messages by default and will not affect the exit code. qmllint is very configurable and allows for disabling warnings or changing how they are treated. Users may freely turn any issue into a warning, informational message, or disable them outright.</db:para>
<db:para>qmllint warns about:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Unqualified accesses of properties</db:para>
</db:listitem>
<db:listitem>
<db:para>Usage of signal handlers without a matching signal</db:para>
</db:listitem>
<db:listitem>
<db:para>Usage of with statements in QML</db:para>
</db:listitem>
<db:listitem>
<db:para>Issues related to compiling QML code</db:para>
</db:listitem>
<db:listitem>
<db:para>Unused imports</db:para>
</db:listitem>
<db:listitem>
<db:para>Deprecated components and properties</db:para>
</db:listitem>
<db:listitem>
<db:para>And many other things</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>In order for qmllint to work properly, it requires type information. That information is provided by QML modules in the import paths. The current directory, as well as the import paths for Qt's built-in types, are used as import paths by default. To add more import paths not included in the default, add them via the <db:code>-I</db:code> flag.</db:para>
</db:note>
<db:para>To get an overview and explanation of all available command line options, run <db:code>qmllint --help</db:code>.</db:para>
<db:section xml:id="compiler-warnings">
<db:title>Compiler warnings</db:title>
<db:para>qmllint can warn you about code that cannot be compiled by <db:link xlink:href="qtqml-qml-script-compiler.xml">qmlsc</db:link>.</db:para>
<db:para>These warnigs are not enabled by default. In order to enable them specify <db:code>--compiler warning</db:code> or adjust your settings file accordingly.</db:para>
</db:section>
<db:section xml:id="marking-components-and-properties-as-deprecated">
<db:title>Marking components and properties as deprecated</db:title>
<db:para>qmllint allows you to mark both properties and components as deprecated:</db:para>
<db:programlisting language="cpp">@Deprecated { reason: &quot;Use NewCustomText instead&quot; }
Text {
    @Deprecated { reason: &quot;Use newProperty instead&quot; }
    property int oldProperty
    property int newProperty
    Component.onCompleted: console.log(oldProperty);  // Warning: XY.qml:8:40: Property &quot;oldProperty&quot; is deprecated (Reason: Use newProperty instead)
}
</db:programlisting>
<db:para>Deprecation warnings for components will be shown every time the component is created.</db:para>
</db:section>
<db:section xml:id="disabling-warnings-inline">
<db:title>Disabling warnings inline</db:title>
<db:para>You may at any point disable warnings temporarily in a file using <db:code>// qmllint disable</db:code>.</db:para>
<db:para>You can do this at the end of a line when a single line produces warnings:</db:para>
<db:programlisting language="cpp">Item {
    property string foo
    Item {
        property string bar: foo // qmllint disable unqualified
    }
}
</db:programlisting>
<db:para>Alternatively you can disable comments for a block of lines by putting the comment in a line only containing <db:code>// qmllint disable</db:code>, ending the block with <db:code>// qmllint enable</db:code>:</db:para>
<db:programlisting language="cpp">Item {
    property string foo
    Item {
        // qmllint disable unqualified
        property string bar: foo
        property string bar2: foo
        // qmllint enable unqualified
    }
}
</db:programlisting>
<db:para>qmllint interprets all single line comments starting with <db:code>qmllint</db:code> as directives. Thus you may not start a comment that way unless you wish to enable or disable warnings.</db:para>
<db:note>
<db:para>As done in the examples above it is preferable to explicitly specify the warning or a list of warnings you want to disable instead of disabling all warnings. This can be done by simply listing warning categories after <db:code>qmllint disable</db:code> (the names are the same as the options listed in <db:code>--help</db:code>).</db:para>
</db:note>
</db:section>
<db:section xml:id="settings">
<db:title>Settings</db:title>
<db:para>In addition to passing command-line options, you can also configure qmllint via a settings file. The command line <db:code>--write-defaults</db:code> will generate one for you.</db:para>
<db:para>Setting files are named <db:code>.qmllint.ini</db:code> and look like this:</db:para>
<db:programlisting language="cpp">[General]
AdditionalQmlImportPaths=
DisableDefaultImports=false
OverwriteImportTypes=
ResourcePath=

[Warnings]
BadSignalHandler=warning
Deprecated=warning
ImportFailure=warning
InheritanceCycle=warning
MultilineStrings=info
PropertyAlias=warning
RequiredProperty=warning
TypeError=warning
UnknownProperty=warning
UnqualifiedAccess=warning
UnusedImports=info
WithStatement=warning
</db:programlisting>
<db:para>Warning levels may be set to <db:code>info</db:code>, <db:code>warning</db:code> or <db:code>disable</db:code> just as with command line options.</db:para>
<db:para>qmllint will automatically look for a settings file at the location of the qml file that is being linted. It also looks through all parent directories to find this file and automatically applies the settings therein. You can disable this behavior by using <db:code>--ignore-settings</db:code>. You may always override these defaults by specifying command line parameters that take precedence over the warning levels in settings.</db:para>
</db:section>
<db:section xml:id="scripting">
<db:title>Scripting</db:title>
<db:para>qmllint can write or output JSON via the <db:code>--json &lt;file&gt;</db:code> option which will return valid JSON with warning messages, file and line location of warnings, and their severity level. Use the special filename '-' to write to stdout instead of a file. This can be used to more easily integrate qmllint in your pre-commit hooks or CI testing.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-modules-qmldir.xml#type-description-files">Type Description Files</db:link></db:member>
<db:member><db:link xlink:href="qtquick-tools-and-utilities.xml">Qt Quick Tools and Utilities</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
