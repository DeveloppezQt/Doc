<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using Model Data</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to use the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> derived model as series data.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:note>
<db:para>This is part of the <db:link xlink:href="qtcharts-chartsgallery-example.xml">Charts with Widgets Gallery</db:link> example.</db:para>
</db:note>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_modeldata.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Let's start by creating an instance of the CustomTableModel class. The CustomTableModel class is derived from <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link> and it was created for the purpose of this example. The constructor of this class populates the internal data store of the model with the data that is suitable for our chart example.</db:para>
<db:programlisting language="cpp">auto *model = new ModelDataModel;
</db:programlisting>
<db:para>We now have a model with data that we would like to display both on the chart and in a <db:link xlink:href="qtableview.xml">QTableView</db:link>. First, we create <db:link xlink:href="qtableview.xml">QTableView</db:link> and tell it to use the model as a data source. To make the data cells fill the table view we also change headers resize mode.</db:para>
<db:programlisting language="cpp">// create table view and add model to it
auto tableView = new QTableView;
tableView-&amp;gt;setModel(model);
tableView-&amp;gt;horizontalHeader()-&amp;gt;setSectionResizeMode(QHeaderView::Stretch);
tableView-&amp;gt;verticalHeader()-&amp;gt;setSectionResizeMode(QHeaderView::Stretch);
</db:programlisting>
<db:para>Now we need the <db:link xlink:href="qchart.xml">QChart</db:link> instance to display the same data on the chart. We also enable animations. It makes it easier to see how modifying the model's data affect the chart.</db:para>
<db:programlisting language="cpp">auto chart = new QChart;
chart-&amp;gt;setAnimationOptions(QChart::AllAnimations);
</db:programlisting>
<db:para>The code below creates new line series and gives it a name. The following line creates an instance of <db:link xlink:href="qvxymodelmapper.xml">QVXYModelMapper</db:link> class. The next two lines specify that X-coordinates are taken from the model's column(<db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link>) with index 0. The Y-coordinates are taken from the model's column with index 1. To create a connection between the series and the model we set both of those objects to <db:link xlink:href="qvxymodelmapper.xml">QVXYModelMapper</db:link>.</db:para>
<db:para>Finally, the series is added to the chart.</db:para>
<db:programlisting language="cpp">auto series = new QLineSeries;
series-&amp;gt;setName(&quot;Line 1&quot;);
auto mapper = new QVXYModelMapper(this);
mapper-&amp;gt;setXColumn(0);
mapper-&amp;gt;setYColumn(1);
mapper-&amp;gt;setSeries(series);
mapper-&amp;gt;setModel(model);
chart-&amp;gt;addSeries(series);
</db:programlisting>
<db:para>To show in <db:link xlink:href="qtableview.xml">QTableView</db:link> which data corresponds with which series this example uses table coloring. When a series is added to the chart it is assigned a color based on the currently selected theme. The code below extracts that color from the series and uses it to create a colored <db:link xlink:href="qtableview.xml">QTableView</db:link>. The coloring of the view is not a part of the <db:link xlink:href="qchart.xml">QChart</db:link> functionality.</db:para>
<db:programlisting language="cpp">// for storing color hex from the series
QString seriesColorHex = &quot;#000000&quot;;

// get the color of the series and use it for showing the mapped area
seriesColorHex = &quot;#&quot; + QString::number(series-&amp;gt;pen().color().rgb(), 16).right(6).toUpper();
model-&amp;gt;addMapping(seriesColorHex, QRect(0, 0, 2, model-&amp;gt;rowCount()));
</db:programlisting>
<db:para>The same operations are done with a second series. Notice that for this series different columns of the same model are mapped.</db:para>
<db:programlisting language="cpp">series = new QLineSeries;
series-&amp;gt;setName(&quot;Line 2&quot;);

mapper = new QVXYModelMapper(this);
mapper-&amp;gt;setXColumn(2);
mapper-&amp;gt;setYColumn(3);
mapper-&amp;gt;setSeries(series);
mapper-&amp;gt;setModel(model);
chart-&amp;gt;addSeries(series);
// get the color of the series and use it for showing the mapped area
seriesColorHex = &quot;#&quot; + QString::number(series-&amp;gt;pen().color().rgb(), 16).right(6).toUpper();
model-&amp;gt;addMapping(seriesColorHex, QRect(2, 0, 2, model-&amp;gt;rowCount()));
</db:programlisting>
<db:para>To avoid setting up the <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> we use the <db:link xlink:href="qchartview.xml">QChartView</db:link> class that does it for us. <db:link xlink:href="qchart.xml">QChart</db:link> object pointer is used as a parameter of the <db:link xlink:href="qchartview.xml">QChartView</db:link> constructor. To make the chart look nicer, Antialiasing is turned on and the minimum size of the chartView widget is set.</db:para>
<db:programlisting language="cpp">chart-&amp;gt;createDefaultAxes();
chart-&amp;gt;layout()-&amp;gt;setContentsMargins(0, 0, 0, 0);
auto chartView = new QChartView(chart, this);
chartView-&amp;gt;setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:para>Finally we place both widgets in a layout and use the layout as the application layout.</db:para>
<db:programlisting language="cpp">// create main layout
auto mainLayout = new QGridLayout;
mainLayout-&amp;gt;addWidget(tableView, 1, 0);
mainLayout-&amp;gt;addWidget(chartView, 1, 1);
mainLayout-&amp;gt;setColumnStretch(1, 1);
mainLayout-&amp;gt;setColumnStretch(0, 0);
setLayout(mainLayout);
</db:programlisting>
<db:para>The application is ready. Try modifying the data in the table view and see how it affects the chart.</db:para>
</db:article>
