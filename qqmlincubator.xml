<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlIncubator Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link> class allows QML objects to be created asynchronously.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlIncubator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Creating QML objects - like delegates in a view, or a new page in an application - can take a noticeable amount of time, especially on resource constrained mobile devices. When an application uses <db:link xlink:href="qqmlcomponent.xml#create">QQmlComponent::create</db:link>() directly, the QML object instance is created synchronously which, depending on the complexity of the object, can cause noticeable pauses or stutters in the application.</db:para>
<db:para>The use of <db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link> gives more control over the creation of a QML object, including allowing it to be created asynchronously using application idle time. The following example shows a simple use of <db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link>.</db:para>
<db:programlisting language="cpp">QQmlIncubator incubator;
component-&amp;gt;create(incubator);

while (!incubator.isReady()) {
    QCoreApplication::processEvents(QEventLoop::AllEvents, 50);
}

QObject *object = incubator.object();
</db:programlisting>
<db:para>Asynchronous incubators are controlled by a <db:link xlink:href="qqmlincubationcontroller.xml">QQmlIncubationController</db:link> that is set on the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link>, which lets the engine know when the application is idle and incubating objects should be processed. If an incubation controller is not set on the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link>, <db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link> creates objects synchronously regardless of the specified <db:link xlink:href="qqmlincubator.xml#IncubationMode-enum">IncubationMode</db:link>.</db:para>
<db:para><db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link> supports three incubation modes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Synchronous The creation occurs synchronously. That is, once the <db:link xlink:href="qqmlcomponent.xml#create">QQmlComponent::create</db:link>() call returns, the incubator will already be in either the Error or Ready state. A synchronous incubator has no real advantage compared to using the synchronous creation methods on <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> directly, but it may simplify an application's implementation to use the same API for both synchronous and asynchronous creations.</db:para>
</db:listitem>
<db:listitem>
<db:para>Asynchronous (default) The creation occurs asynchronously, assuming a QQmlIncubatorController is set on the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link>.</db:para>
<db:para>The incubator will remain in the Loading state until either the creation is complete or an error occurs. The <db:link xlink:href="qqmlincubator.xml#statusChanged">statusChanged</db:link>() callback can be used to be notified of status changes.</db:para>
<db:para>Applications should use the Asynchronous incubation mode to create objects that are not needed immediately. For example, the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> type uses Asynchronous incubation to create objects that are slightly off screen while the list is being scrolled. If, during asynchronous creation, the object is needed immediately the <db:link xlink:href="qqmlincubator.xml#forceCompletion">QQmlIncubator::forceCompletion</db:link>() method can be called to complete the creation process synchronously.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qqmlincubator.xml#IncubationMode-enum">AsynchronousIfNested</db:link> The creation will occur asynchronously if part of a nested asynchronous creation, or synchronously if not.</db:para>
<db:para>In most scenarios where a QML component wants the appearance of a synchronous instantiation, it should use this mode.</db:para>
<db:para>This mode is best explained with an example. When the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> type is first created, it needs to populate itself with an initial set of delegates to show. If the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> was 400 pixels high, and each delegate was 100 pixels high, it would need to create four initial delegate instances. If the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> used the Asynchronous incubation mode, the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> would always be created empty and then, sometime later, the four initial items would appear.</db:para>
<db:para>Conversely, if the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> was to use the Synchronous incubation mode it would behave correctly but it may introduce stutters into the application. As QML would have to stop and instantiate the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>'s delegates synchronously, if the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> was part of a QML component that was being instantiated asynchronously this would undo much of the benefit of asynchronous instantiation.</db:para>
<db:para>The <db:link xlink:href="qqmlincubator.xml#IncubationMode-enum">AsynchronousIfNested</db:link> mode reconciles this problem. By using <db:link xlink:href="qqmlincubator.xml#IncubationMode-enum">AsynchronousIfNested</db:link>, the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> delegates are instantiated asynchronously if the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> itself is already part of an asynchronous instantiation, and synchronously otherwise. In the case of a nested asynchronous instantiation, the outer asynchronous instantiation will not complete until after all the nested instantiations have also completed. This ensures that by the time the outer asynchronous instantitation completes, inner items like <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> have already completed loading their initial delegates.</db:para>
<db:para>It is almost always incorrect to use the Synchronous incubation mode - elements or components that want the appearance of synchronous instantiation, but without the downsides of introducing freezes or stutters into the application, should use the <db:link xlink:href="qqmlincubator.xml#IncubationMode-enum">AsynchronousIfNested</db:link> incubation mode.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="IncubationMode-enum">
<db:title>enum QQmlIncubator::IncubationMode</db:title>
<db:enumsynopsis>
<db:enumname>IncubationMode</db:enumname>
<db:enumitem>
<db:enumidentifier>Asynchronous</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AsynchronousIfNested</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Synchronous</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies the mode the incubator operates in. Regardless of the incubation mode, a <db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link> will behave synchronously if the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> does not have a <db:link xlink:href="qqmlincubationcontroller.xml">QQmlIncubationController</db:link> set.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link></db:emphasis>::Asynchronous</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The object will be created asynchronously.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link></db:emphasis>::AsynchronousIfNested</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>If the object is being created in a context that is already part of an asynchronous creation, this incubator will join that existing incubation and execute asynchronously. The existing incubation will not become Ready until both it and this incubation have completed. Otherwise, the incubation will execute synchronously.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link></db:emphasis>::Synchronous</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The object will be created synchronously.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QQmlIncubator::Status</db:title>
<db:enumsynopsis>
<db:enumname>Status</db:enumname>
<db:enumitem>
<db:enumidentifier>Null</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ready</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Loading</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Error</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies the status of the <db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link></db:emphasis>::Null</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Incubation is not in progress. Call <db:link xlink:href="qqmlcomponent.xml#create">QQmlComponent::create</db:link>() to begin incubating.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link></db:emphasis>::Ready</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The object is fully created and can be accessed by calling <db:link xlink:href="qqmlincubator.xml#object">object</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link></db:emphasis>::Loading</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The object is in the process of being created.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link></db:emphasis>::Error</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An error occurred. The errors can be access by calling <db:link xlink:href="qqmlincubator.xml#errors">errors</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlIncubator-1">
<db:title>QQmlIncubator::QQmlIncubator(QQmlIncubator::IncubationMode <db:emphasis>mode</db:emphasis> = Asynchronous)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlIncubator</db:methodname>
<db:methodparam>
<db:type>QQmlIncubator::IncubationMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>Asynchronous</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlIncubator(QQmlIncubator::IncubationMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a new incubator with the specified <db:code role="parameter">mode</db:code></db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QQmlIncubator::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the incubator. Any in-progress incubation is aborted. If the incubator is in the Ready state, the created object is <db:emphasis role="bold">not</db:emphasis> deleted.</db:para>
</db:section>
<db:section xml:id="errors">
<db:title>QList&lt;QQmlError&gt; QQmlIncubator::errors() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QQmlError&gt;</db:type>
<db:methodname>errors</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QQmlError&gt; errors() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the list of errors encountered while incubating the object.</db:para>
</db:section>
<db:section xml:id="forceCompletion">
<db:title>void QQmlIncubator::forceCompletion()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>forceCompletion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void forceCompletion()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Force any in-progress incubation to finish synchronously. Once this call returns, the incubator will not be in the Loading state.</db:para>
</db:section>
<db:section xml:id="incubationMode">
<db:title>QQmlIncubator::IncubationMode QQmlIncubator::incubationMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQmlIncubator::IncubationMode</db:type>
<db:methodname>incubationMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlIncubator::IncubationMode incubationMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the incubation mode passed to the <db:link xlink:href="qqmlincubator.xml">QQmlIncubator</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="isError">
<db:title>bool QQmlIncubator::isError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the incubator's <db:link xlink:href="qqmlincubator.xml#status">status</db:link>() is Error.</db:para>
</db:section>
<db:section xml:id="isLoading">
<db:title>bool QQmlIncubator::isLoading() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLoading</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLoading() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the incubator's <db:link xlink:href="qqmlincubator.xml#status">status</db:link>() is Loading.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QQmlIncubator::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the incubator's <db:link xlink:href="qqmlincubator.xml#status">status</db:link>() is Null.</db:para>
</db:section>
<db:section xml:id="isReady">
<db:title>bool QQmlIncubator::isReady() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isReady</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isReady() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the incubator's <db:link xlink:href="qqmlincubator.xml#status">status</db:link>() is Ready.</db:para>
</db:section>
<db:section xml:id="object">
<db:title>QObject *QQmlIncubator::object() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>object</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * object() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the incubated object if the status is Ready, otherwise 0.</db:para>
</db:section>
<db:section xml:id="setInitialProperties">
<db:title>void QQmlIncubator::setInitialProperties(const QVariantMap &amp;<db:emphasis>initialProperties</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setInitialProperties</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>initialProperties</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInitialProperties(const QVariantMap &amp;initialProperties)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stores a mapping from property names to initial values, contained in <db:code role="parameter">initialProperties</db:code>, with which the incubated component will be initialized.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcomponent.xml#setInitialProperties">QQmlComponent::setInitialProperties</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setInitialState">
<db:title>[virtual protected] void QQmlIncubator::setInitialState(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setInitialState</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInitialState(QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Called after the <db:code role="parameter">object</db:code> is first created, but before property bindings are evaluated and, if applicable, <db:link xlink:href="qqmlparserstatus.xml#componentComplete">QQmlParserStatus::componentComplete</db:link>() is called. This is equivalent to the point between <db:link xlink:href="qqmlcomponent.xml#beginCreate">QQmlComponent::beginCreate</db:link>() and <db:link xlink:href="qqmlcomponent.xml#completeCreate">QQmlComponent::completeCreate</db:link>(), and can be used to assign initial values to the object's properties.</db:para>
<db:para>The default implementation does nothing.</db:para>
</db:section>
<db:section xml:id="status">
<db:title>QQmlIncubator::Status QQmlIncubator::status() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQmlIncubator::Status</db:type>
<db:methodname>status</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlIncubator::Status status() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the current status of the incubator.</db:para>
</db:section>
<db:section xml:id="statusChanged">
<db:title>[virtual protected] void QQmlIncubator::statusChanged(QQmlIncubator::Status <db:emphasis>status</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>statusChanged</db:methodname>
<db:methodparam>
<db:type>QQmlIncubator::Status</db:type>
<db:parameter>status</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void statusChanged(QQmlIncubator::Status status)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Called when the status of the incubator changes. <db:code role="parameter">status</db:code> is the new status.</db:para>
<db:para>The default implementation does nothing.</db:para>
</db:section>
</db:section>
</db:article>
