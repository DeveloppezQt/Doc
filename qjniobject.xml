<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QJniObject Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A convenience wrapper around the Java Native Interface (JNI).</db:para>
<db:para>This class was introduced in Qt 6.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QJniObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qjniobject.xml">QJniObject</db:link> class wraps a reference to a Java object, ensuring it isn't gargage-collected and providing access to most JNIEnv method calls (member, static) and fields (setter, getter). It eliminates much boiler-plate that would normally be needed, with direct JNI access, for every operation, including exception-handling.</db:para>
<db:note>
<db:para>This API has been designed and tested for use with Android. It has not been tested for other platforms.</db:para>
</db:note>
<db:section xml:id="general-notes">
<db:title>General Notes</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Class names need to be fully-qualified, for example: &quot;java/lang/String&quot;.</db:para>
</db:listitem>
<db:listitem>
<db:para>Method signatures are written as &quot;(ArgumentsTypes)ReturnType&quot;, see <db:link xlink:href="qjniobject.xml#jni-types">JNI Types</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>All object types are returned as a <db:link xlink:href="qjniobject.xml">QJniObject</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="method-signatures">
<db:title>Method Signatures</db:title>
<db:para><db:link xlink:href="qjniobject.xml">QJniObject</db:link> provides convenience functions that will use the correct signature based on the provided template types. For functions that only return and take <db:link xlink:href="qjniobject.xml#jni-types">JNI types</db:link>, the signature can be generate at compile time:</db:para>
<db:programlisting language="cpp">jint x = QJniObject::callMethod&amp;lt;jint&amp;gt;(&quot;getSize&quot;);
QJniObject::callMethod&amp;lt;void&amp;gt;(&quot;touch&quot;);
jint ret = jString1.callMethod&amp;lt;jint&amp;gt;(&quot;compareToIgnoreCase&quot;, jString2.object&amp;lt;jstring&amp;gt;());
</db:programlisting>
<db:para>These functions are variadic templates, and the compiler will deduce the template arguments from the actual argument types. In many situations, only the return type needs to be provided explicitly.</db:para>
<db:para>For functions that take other argument types, you need to supply the signature yourself. It is important that the signature matches the function you want to call. The example below demonstrates how to call different static functions:</db:para>
<db:programlisting language="cpp">// Java class
package org.qtproject.qt;
class TestClass
{
    static TestClass create() { ... }
    static String fromNumber(int x) { ... }
    static String[] stringArray(String s1, String s2) { ... }
}
</db:programlisting>
<db:para>The signature structure is &quot;(ArgumentsTypes)ReturnType&quot;. Array types in the signature must have the [ prefix, and the fully-qualified Object type names must have the L prefix and the ; suffix. The signature for the create function is &quot;()Lorg/qtproject/qt/TestClass;. The signatures for the second and third functions are &quot;(I)Ljava/lang/String;&quot; and &quot;(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;&quot;, respectively.</db:para>
<db:para>We can call the create() function like this:</db:para>
<db:programlisting language="cpp">// C++ code
QJniObject testClass = QJniObject::callStaticObjectMethod(&quot;org/qtproject/qt/TestClass&quot;,
                                                          &quot;create&quot;,
                                                          &quot;()Lorg/qtproject/qt/TestClass;&quot;);
</db:programlisting>
<db:para>For the second and third function we can rely on <db:link xlink:href="qjniobject.xml">QJniObject</db:link>'s template methods to create the implicit signature string, but we can also pass the signature string explicitly:</db:para>
<db:programlisting language="cpp">// C++ code
QJniObject stringNumber = QJniObject::callStaticObjectMethod(&quot;org/qtproject/qt/TestClass&quot;,
                                                             &quot;fromNumber&quot;,
                                                             &quot;(I)Ljava/lang/String;&quot;, 10);
</db:programlisting>
<db:para>For the implicit signature creation to work we need to specify the return type explicitly:</db:para>
<db:programlisting language="cpp">// C++ code
QJniObject string1 = QJniObject::fromString(&quot;String1&quot;);
QJniObject string2 = QJniObject::fromString(&quot;String2&quot;);
QJniObject stringArray = QJniObject::callStaticObjectMethod&amp;lt;jstringArray&amp;gt;(
                                                            &quot;org/qtproject/qt/TestClass&quot;,
                                                            &quot;stringArray&quot;
                                                            string1.object&amp;lt;jstring&amp;gt;(),
                                                            string2.object&amp;lt;jstring&amp;gt;());
</db:programlisting>
<db:para>Note that while he first template parameter specifies the return type of the Java function, the method will still return a <db:link xlink:href="qjniobject.xml">QJniObject</db:link>.</db:para>
</db:section>
<db:section xml:id="handling-java-exception">
<db:title>Handling Java Exception</db:title>
<db:para>After calling Java functions that might throw exceptions, it is important to check for, handle and clear out any exception before continuing. All <db:link xlink:href="qjniobject.xml">QJniObject</db:link> functions handle exceptions internally by reporting and clearing them, saving client code the need to handle exceptions.</db:para>
<db:note>
<db:para>The user must handle exceptions manually when doing JNI calls using JNIEnv directly. It is unsafe to make other JNI calls when exceptions are pending. For more information, see QJniEnvironment::checkAndClearExceptions().</db:para>
</db:note>
</db:section>
<db:section xml:id="java-native-methods">
<db:title>Java Native Methods</db:title>
<db:para>Java native methods makes it possible to call native code from Java, this is done by creating a function declaration in Java and prefixing it with the native keyword. Before a native function can be called from Java, you need to map the Java native function to a native function in your code. Mapping functions can be done by calling <db:link xlink:href="qjnienvironment.xml#registerNativeMethods">QJniEnvironment::registerNativeMethods</db:link>().</db:para>
<db:para>The example below demonstrates how this could be done.</db:para>
<db:para>Java implementation:</db:para>
<db:programlisting language="cpp">class FooJavaClass
{
    public static void foo(int x)
    {
        if (x &amp;lt; 100)
            callNativeOne(x);
        else
            callNativeTwo(x);
    }

private static native void callNativeOne(int x);
private static native void callNativeTwo(int x);

}
</db:programlisting>
<db:para>C++ Implementation:</db:para>
<db:programlisting language="cpp">static void fromJavaOne(JNIEnv *env, jobject thiz, jint x)
{
    Q_UNUSED(env);
    Q_UNUSED(thiz);
    qDebug() &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &quot;&amp;lt; 100&quot;;
}

static void fromJavaTwo(JNIEnv *env, jobject thiz, jint x)
{
    Q_UNUSED(env);
    Q_UNUSED(thiz);
    qDebug() &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &quot;&amp;gt;= 100&quot;;
}

void foo()
{
    // register the native methods first, ideally it better be done with the app start
    const JNINativeMethod methods[] =
                {{&quot;callNativeOne&quot;, &quot;(I)V&quot;, reinterpret_cast&amp;lt;void *&amp;gt;(fromJavaOne)},
                 {&quot;callNativeTwo&quot;, &quot;(I)V&quot;, reinterpret_cast&amp;lt;void *&amp;gt;(fromJavaTwo)}};
    QJniEnvironment env;
    env.registerNativeMethods(&quot;my/java/project/FooJavaClass&quot;, methods, 2);

    // Call the java method which will calls back to the C++ functions
    QJniObject::callStaticMethod&amp;lt;void&amp;gt;(&quot;my/java/project/FooJavaClass&quot;, &quot;foo&quot;, &quot;(I)V&quot;, 10);  // Output: 10 &amp;lt; 100
    QJniObject::callStaticMethod&amp;lt;void&amp;gt;(&quot;my/java/project/FooJavaClass&quot;, &quot;foo&quot;, &quot;(I)V&quot;, 100); // Output: 100 &amp;gt;= 100
}
</db:programlisting>
</db:section>
<db:section xml:id="the-lifetime-of-a-java-object">
<db:title>The Lifetime of a Java Object</db:title>
<db:para>Most <db:link xlink:href="qjniobject.xml#object-types">objects</db:link> received from Java will be local references and will only stay valid until you return from the native method. After that, the object becomes eligible for garbage collection. If your code creates many local references in a loop you should delete them manually with each iteration, otherwise you might run out of memory. For more information, see <db:link xlink:href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html#global_and_local_references">JNI Design Overview: Global and Local References</db:link>. Local references created outside a native method scope must be deleted manually, since the garbage collector will not free them automatically because we are using <db:link xlink:href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/invocation.html#attach_current_thread">AttachCurrentThread</db:link>. For more information, see <db:link xlink:href="https://developer.android.com/training/articles/perf-jni#local-and-global-references">JNI tips: Local and global references</db:link>.</db:para>
<db:para>If you want to keep a Java object alive you need to either create a new global reference to the object and release it when you are done, or construct a new <db:link xlink:href="qjniobject.xml">QJniObject</db:link> and let it manage the lifetime of the Java object.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qjniobject.xml">QJniObject</db:link> only manages its own references, if you construct a <db:link xlink:href="qjniobject.xml">QJniObject</db:link> from a global or local reference that reference will not be released by the <db:link xlink:href="qjniobject.xml">QJniObject</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="jni-types">
<db:title>JNI Types</db:title>
<db:section xml:id="object-types">
<db:title>Object Types</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Signature</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>jobject</db:para>
</db:td>
<db:td>
<db:para>Ljava/lang/Object;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jclass</db:para>
</db:td>
<db:td>
<db:para>Ljava/lang/Class;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jstring</db:para>
</db:td>
<db:td>
<db:para>Ljava/lang/String;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jthrowable</db:para>
</db:td>
<db:td>
<db:para>Ljava/lang/Throwable;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jobjectArray</db:para>
</db:td>
<db:td>
<db:para>[Ljava/lang/Object;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jarray</db:para>
</db:td>
<db:td>
<db:para>[<db:emphasis>&lt;type&gt;</db:emphasis></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jbooleanArray</db:para>
</db:td>
<db:td>
<db:para>[Z</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jbyteArray</db:para>
</db:td>
<db:td>
<db:para>[B</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jcharArray</db:para>
</db:td>
<db:td>
<db:para>[C</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jshortArray</db:para>
</db:td>
<db:td>
<db:para>[S</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jintArray</db:para>
</db:td>
<db:td>
<db:para>[I</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jlongArray</db:para>
</db:td>
<db:td>
<db:para>[J</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jfloatArray</db:para>
</db:td>
<db:td>
<db:para>[F</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jdoubleArray</db:para>
</db:td>
<db:td>
<db:para>[D</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="primitive-types">
<db:title>Primitive Types</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Signature</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>jboolean</db:para>
</db:td>
<db:td>
<db:para>Z</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jbyte</db:para>
</db:td>
<db:td>
<db:para>B</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jchar</db:para>
</db:td>
<db:td>
<db:para>C</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jshort</db:para>
</db:td>
<db:td>
<db:para>S</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jint</db:para>
</db:td>
<db:td>
<db:para>I</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jlong</db:para>
</db:td>
<db:td>
<db:para>J</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jfloat</db:para>
</db:td>
<db:td>
<db:para>F</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jdouble</db:para>
</db:td>
<db:td>
<db:para>D</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="other">
<db:title>Other</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Signature</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>void</db:para>
</db:td>
<db:td>
<db:para>V</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>Custom type</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>L<db:emphasis>&lt;fully-qualified-name&gt;</db:emphasis>;</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For more information about JNI, see <db:link xlink:href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html">Java Native Interface Specification</db:link>.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjnienvironment.xml">QJniEnvironment</db:link></db:member>
<db:member>object()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QJniObject-4">
<db:title>[explicit] QJniObject::QJniObject(jclass <db:emphasis>clazz</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJniObject</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject(jclass clazz)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new JNI object by calling the default constructor of <db:code role="parameter">clazz</db:code>.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qjniobject.xml">QJniObject</db:link> will create a new reference to the class <db:code role="parameter">clazz</db:code> and releases it again when it is destroyed. References to the class created outside the <db:link xlink:href="qjniobject.xml">QJniObject</db:link> need to be managed by the caller.</db:para>
</db:note>
</db:section>
<db:section xml:id="QJniObject-5">
<db:title>[explicit] QJniObject::QJniObject(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJniObject</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject(jclass clazz, const char *signature, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new JNI object from <db:code role="parameter">clazz</db:code> by calling the constructor with <db:code role="parameter">signature</db:code> specifying the types of any subsequent arguments.</db:para>
<db:programlisting language="cpp">QJniEnvironment env;
jclass myClazz = env.findClass(&quot;org/qtproject/qt/TestClass&quot;);
QJniObject(myClazz, &quot;(I)V&quot;, 3);
</db:programlisting>
</db:section>
<db:section xml:id="QJniObject-7">
<db:title>QJniObject::QJniObject(jobject <db:emphasis>object</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJniObject</db:methodname>
<db:methodparam>
<db:type>jobject</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject(jobject object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new JNI object around the Java object <db:code role="parameter">object</db:code>.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qjniobject.xml">QJniObject</db:link> will hold a reference to the Java object <db:code role="parameter">object</db:code> and release it when destroyed. Any references to the Java object <db:code role="parameter">object</db:code> outside <db:link xlink:href="qjniobject.xml">QJniObject</db:link> needs to be managed by the caller. In most cases you should never call this function with a local reference unless you intend to manage the local reference yourself. See QJniObject::fromLocalRef() for converting a local reference to a <db:link xlink:href="qjniobject.xml">QJniObject</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>fromLocalRef()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
