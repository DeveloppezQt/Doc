<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QJniObject Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A convenience wrapper around the Java Native Interface (JNI).</db:para>
<db:para>This class was introduced in Qt 6.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QJniObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qjniobject.xml">QJniObject</db:link> class wraps a reference to a Java object, ensuring it isn't gargage-collected and providing access to most JNIEnv method calls (member, static) and fields (setter, getter). It eliminates much boiler-plate that would normally be needed, with direct JNI access, for every operation, including exception-handling.</db:para>
<db:note>
<db:para>This API has been designed and tested for use with Android. It has not been tested for other platforms.</db:para>
</db:note>
<db:section xml:id="general-notes">
<db:title>General Notes</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Class names need to be fully-qualified, for example: &quot;java/lang/String&quot;.</db:para>
</db:listitem>
<db:listitem>
<db:para>Method signatures are written as &quot;(ArgumentsTypes)ReturnType&quot;, see <db:link xlink:href="qjniobject.xml#jni-types">JNI Types</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>All object types are returned as a <db:link xlink:href="qjniobject.xml">QJniObject</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="method-signatures">
<db:title>Method Signatures</db:title>
<db:para>For functions that take no arguments, <db:link xlink:href="qjniobject.xml">QJniObject</db:link> provides convenience functions that will use the correct signature based on the provided template type. For example:</db:para>
<db:programlisting language="cpp">jint x = QJniObject::callMethod&amp;lt;jint&amp;gt;(&quot;getSize&quot;);
QJniObject::callMethod&amp;lt;void&amp;gt;(&quot;touch&quot;);
</db:programlisting>
<db:para>In other cases you will need to supply the signature yourself, and it is important that the signature matches the function you want to call. The signature structure is &quot;(ArgumentsTypes)ReturnType&quot;. Array types in the signature must have the [ prefix, and the fully-qualified Object type names must have the L prefix and the ; suffix.</db:para>
<db:para>The example below demonstrates how to call two different static functions:</db:para>
<db:programlisting language="cpp">// Java class
package org.qtproject.qt;
class TestClass
{
   static String fromNumber(int x) { ... }
   static String[] stringArray(String s1, String s2) { ... }
}
</db:programlisting>
<db:para>The signature for the first function is &quot;(I)Ljava/lang/String;&quot;:</db:para>
<db:programlisting language="cpp">// C++ code
QJniObject stringNumber = QJniObject::callStaticObjectMethod(&quot;org/qtproject/qt/TestClass&quot;,
                                                             &quot;fromNumber&quot;
                                                             &quot;(I)Ljava/lang/String;&quot;,
                                                             10);
</db:programlisting>
<db:para>and the signature for the second function is &quot;(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;&quot;:</db:para>
<db:programlisting language="cpp">// C++ code
QJniObject string1 = QJniObject::fromString(&quot;String1&quot;);
QJniObject string2 = QJniObject::fromString(&quot;String2&quot;);
QJniObject stringArray = QJniObject::callStaticObjectMethod(&quot;org/qtproject/qt/TestClass&quot;,
                                                            &quot;stringArray&quot;
                                                            &quot;(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;&quot;
                                                            string1.object&amp;lt;jstring&amp;gt;(),
                                                            string2.object&amp;lt;jstring&amp;gt;());
</db:programlisting>
</db:section>
<db:section xml:id="handling-java-exception">
<db:title>Handling Java Exception</db:title>
<db:para>After calling Java functions that might throw exceptions, it is important to check for, handle and clear out any exception before continuing. All <db:link xlink:href="qjniobject.xml">QJniObject</db:link> functions handle exceptions internally by reporting and clearing them, saving client code the need to handle exceptions.</db:para>
<db:note>
<db:para>The user must handle exceptions manually when doing JNI calls using JNIEnv directly. It is unsafe to make other JNI calls when exceptions are pending. For more information, see <db:link xlink:href="qjnienvironment.xml#checkAndClearExceptions">QJniEnvironment::checkAndClearExceptions</db:link>().</db:para>
</db:note>
</db:section>
<db:section xml:id="java-native-methods">
<db:title>Java Native Methods</db:title>
<db:para>Java native methods makes it possible to call native code from Java, this is done by creating a function declaration in Java and prefixing it with the native keyword. Before a native function can be called from Java, you need to map the Java native function to a native function in your code. Mapping functions can be done by calling <db:link xlink:href="qjnienvironment.xml#registerNativeMethods">QJniEnvironment::registerNativeMethods</db:link>().</db:para>
<db:para>The example below demonstrates how this could be done.</db:para>
<db:para>Java implementation:</db:para>
<db:programlisting language="cpp">class FooJavaClass
{
    public static void foo(int x)
    {
        if (x &amp;lt; 100)
            callNativeOne(x);
        else
            callNativeTwo(x);
    }

private static native void callNativeOne(int x);
private static native void callNativeTwo(int x);

}
</db:programlisting>
<db:para>C++ Implementation:</db:para>
<db:programlisting language="cpp">static void fromJavaOne(JNIEnv *env, jobject thiz, jint x)
{
    Q_UNUSED(env);
    Q_UNUSED(thiz);
    qDebug() &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &quot;&amp;lt; 100&quot;;
}

static void fromJavaTwo(JNIEnv *env, jobject thiz, jint x)
{
    Q_UNUSED(env);
    Q_UNUSED(thiz);
    qDebug() &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &quot;&amp;gt;= 100&quot;;
}

void foo()
{
    // register the native methods first, ideally it better be done with the app start
    const JNINativeMethod methods[] =
                {{&quot;callNativeOne&quot;, &quot;(I)V&quot;, reinterpret_cast&amp;lt;void *&amp;gt;(fromJavaOne)},
                 {&quot;callNativeTwo&quot;, &quot;(I)V&quot;, reinterpret_cast&amp;lt;void *&amp;gt;(fromJavaTwo)}};
    QJniEnvironment env;
    env.registerNativeMethods(&quot;my/java/project/FooJavaClass&quot;, methods, 2);

    // Call the java method which will calls back to the C++ functions
    QJniObject::callStaticMethod&amp;lt;void&amp;gt;(&quot;my/java/project/FooJavaClass&quot;, &quot;foo&quot;, &quot;(I)V&quot;, 10);  // Output: 10 &amp;lt; 100
    QJniObject::callStaticMethod&amp;lt;void&amp;gt;(&quot;my/java/project/FooJavaClass&quot;, &quot;foo&quot;, &quot;(I)V&quot;, 100); // Output: 100 &amp;gt;= 100
}
</db:programlisting>
</db:section>
<db:section xml:id="the-lifetime-of-a-java-object">
<db:title>The Lifetime of a Java Object</db:title>
<db:para>Most <db:link xlink:href="qjniobject.xml#object-types">objects</db:link> received from Java will be local references and will only stay valid until you return from the native method. After that, the object becomes eligible for garbage collection. If your code creates many local references in a loop you should delete them manually with each iteration, otherwise you might run out of memory. For more information, see <db:link xlink:href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html#global_and_local_references">JNI Design Overview: Global and Local References</db:link>. Local references created outside a native method scope must be deleted manually, since the garbage collector will not free them automatically because we are using <db:link xlink:href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/invocation.html#attach_current_thread">AttachCurrentThread</db:link>. For more information, see <db:link xlink:href="https://developer.android.com/training/articles/perf-jni#local-and-global-references">JNI tips: Local and global references</db:link>.</db:para>
<db:para>If you want to keep a Java object alive you need to either create a new global reference to the object and release it when you are done, or construct a new <db:link xlink:href="qjniobject.xml">QJniObject</db:link> and let it manage the lifetime of the Java object.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qjniobject.xml">QJniObject</db:link> only manages its own references, if you construct a <db:link xlink:href="qjniobject.xml">QJniObject</db:link> from a global or local reference that reference will not be released by the <db:link xlink:href="qjniobject.xml">QJniObject</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="jni-types">
<db:title>JNI Types</db:title>
<db:section xml:id="object-types">
<db:title>Object Types</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Signature</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>jobject</db:para>
</db:td>
<db:td>
<db:para>Ljava/lang/Object;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jclass</db:para>
</db:td>
<db:td>
<db:para>Ljava/lang/Class;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jstring</db:para>
</db:td>
<db:td>
<db:para>Ljava/lang/String;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jthrowable</db:para>
</db:td>
<db:td>
<db:para>Ljava/lang/Throwable;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jobjectArray</db:para>
</db:td>
<db:td>
<db:para>[Ljava/lang/Object;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jarray</db:para>
</db:td>
<db:td>
<db:para>[<db:emphasis>&lt;type&gt;</db:emphasis></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jbooleanArray</db:para>
</db:td>
<db:td>
<db:para>[Z</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jbyteArray</db:para>
</db:td>
<db:td>
<db:para>[B</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jcharArray</db:para>
</db:td>
<db:td>
<db:para>[C</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jshortArray</db:para>
</db:td>
<db:td>
<db:para>[S</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jintArray</db:para>
</db:td>
<db:td>
<db:para>[I</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jlongArray</db:para>
</db:td>
<db:td>
<db:para>[J</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jfloatArray</db:para>
</db:td>
<db:td>
<db:para>[F</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jdoubleArray</db:para>
</db:td>
<db:td>
<db:para>[D</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="primitive-types">
<db:title>Primitive Types</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Signature</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>jboolean</db:para>
</db:td>
<db:td>
<db:para>Z</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jbyte</db:para>
</db:td>
<db:td>
<db:para>B</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jchar</db:para>
</db:td>
<db:td>
<db:para>C</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jshort</db:para>
</db:td>
<db:td>
<db:para>S</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jint</db:para>
</db:td>
<db:td>
<db:para>I</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jlong</db:para>
</db:td>
<db:td>
<db:para>J</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jfloat</db:para>
</db:td>
<db:td>
<db:para>F</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>jdouble</db:para>
</db:td>
<db:td>
<db:para>D</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="other">
<db:title>Other</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Signature</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>void</db:para>
</db:td>
<db:td>
<db:para>V</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis>Custom type</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>L<db:emphasis>&lt;fully-qualified-name&gt;</db:emphasis>;</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For more information about JNI, see <db:link xlink:href="https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html">Java Native Interface Specification</db:link>.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjnienvironment.xml">QJniEnvironment</db:link></db:member>
<db:member><db:link xlink:href="qjniobject.xml#object">object</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QJniObject">
<db:title>QJniObject::QJniObject()</db:title>
<db:constructorsynopsis>
<db:methodname>QJniObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an invalid JNI object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjniobject.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QJniObject-1">
<db:title>[explicit] QJniObject::QJniObject(const char *<db:emphasis>className</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJniObject</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject(const char *className)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new JNI object by calling the default constructor of <db:code role="parameter">className</db:code>.</db:para>
<db:programlisting language="cpp">QJniObject myJavaString(&quot;java/lang/String&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="QJniObject-2">
<db:title>[explicit] QJniObject::QJniObject(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJniObject</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject(const char *className, const char *signature, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new JNI object by calling the constructor of <db:code role="parameter">className</db:code> with <db:code role="parameter">signature</db:code> specifying the types of any subsequent arguments.</db:para>
<db:programlisting language="cpp">QJniEnvironment env;
char* str = &quot;Hello&quot;;
jstring myJStringArg = env-&amp;gt;NewStringUTF(str);
QJniObject myNewJavaString(&quot;java/lang/String&quot;, &quot;(Ljava/lang/String;)V&quot;, myJStringArg);
</db:programlisting>
</db:section>
<db:section xml:id="QJniObject-3">
<db:title>[explicit] QJniObject::QJniObject(jclass <db:emphasis>clazz</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJniObject</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject(jclass clazz)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new JNI object by calling the default constructor of <db:code role="parameter">clazz</db:code>.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qjniobject.xml">QJniObject</db:link> will create a new reference to the class <db:code role="parameter">clazz</db:code> and releases it again when it is destroyed. References to the class created outside the <db:link xlink:href="qjniobject.xml">QJniObject</db:link> need to be managed by the caller.</db:para>
</db:note>
</db:section>
<db:section xml:id="QJniObject-4">
<db:title>[explicit] QJniObject::QJniObject(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJniObject</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject(jclass clazz, const char *signature, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new JNI object from <db:code role="parameter">clazz</db:code> by calling the constructor with <db:code role="parameter">signature</db:code> specifying the types of any subsequent arguments.</db:para>
<db:programlisting language="cpp">QJniEnvironment env;
jclass myClazz = env.findClass(&quot;org/qtproject/qt/TestClass&quot;);
QJniObject(myClazz, &quot;(I)V&quot;, 3);
</db:programlisting>
</db:section>
<db:section xml:id="QJniObject-5">
<db:title>QJniObject::QJniObject(jobject <db:emphasis>object</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJniObject</db:methodname>
<db:methodparam>
<db:type>jobject</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject(jobject object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new JNI object around the Java object <db:code role="parameter">object</db:code>.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qjniobject.xml">QJniObject</db:link> will hold a reference to the Java object <db:code role="parameter">object</db:code> and release it when destroyed. Any references to the Java object <db:code role="parameter">object</db:code> outside <db:link xlink:href="qjniobject.xml">QJniObject</db:link> needs to be managed by the caller. In most cases you should never call this function with a local reference unless you intend to manage the local reference yourself. See <db:link xlink:href="qjniobject.xml#fromLocalRef">QJniObject::fromLocalRef</db:link>() for converting a local reference to a <db:link xlink:href="qjniobject.xml">QJniObject</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjniobject.xml#fromLocalRef">fromLocalRef</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QJniObject">
<db:title>QJniObject::~QJniObject()</db:title>
<db:destructorsynopsis>
<db:methodname>~QJniObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QJniObject()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the JNI object and releases any references held by the JNI object.</db:para>
</db:section>
<db:section xml:id="callMethod">
<db:title>T QJniObject::callMethod(const char *<db:emphasis>methodName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T</db:type>
<db:methodname>callMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T callMethod(const char *methodName, const char *signature, ...) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the object's method <db:code role="parameter">methodName</db:code> with <db:code role="parameter">signature</db:code> specifying the types of any subsequent arguments.</db:para>
<db:programlisting language="cpp">QJniObject myJavaStrin(&quot;org/qtproject/qt/TestClass&quot;);
jint index = myJavaString.callMethod&amp;lt;jint&amp;gt;(&quot;indexOf&quot;, &quot;(I)I&quot;, 0x0051);
</db:programlisting>
</db:section>
<db:section xml:id="callMethod-1">
<db:title>T QJniObject::callMethod(const char *<db:emphasis>methodName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T</db:type>
<db:methodname>callMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">T callMethod(const char *methodName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the method <db:code role="parameter">methodName</db:code> and returns the value.</db:para>
<db:programlisting language="cpp">QJniObject myJavaStrin(&quot;org/qtproject/qt/TestClass&quot;);
jint size = myJavaString.callMethod&amp;lt;jint&amp;gt;(&quot;length&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="callObjectMethod">
<db:title>QJniObject QJniObject::callObjectMethod(const char *<db:emphasis>methodName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>callObjectMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject callObjectMethod(const char *methodName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the Java objects method <db:code role="parameter">methodName</db:code> and returns a new <db:link xlink:href="qjniobject.xml">QJniObject</db:link> for the returned Java object.</db:para>
<db:programlisting language="cpp">QJniObject myJavaString = QJniObject::fromString(&quot;Hello, Java&quot;);
QJniObject myJavaString2 = myJavaString1.callObjectMethod&amp;lt;jstring&amp;gt;(&quot;toString&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="callObjectMethod-1">
<db:title>QJniObject QJniObject::callObjectMethod(const char *<db:emphasis>methodName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>callObjectMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject callObjectMethod(const char *methodName, const char *signature, ...) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the Java object's method <db:code role="parameter">methodName</db:code> with <db:code role="parameter">signature</db:code> specifying the types of any subsequent arguments.</db:para>
<db:programlisting language="cpp">QJniObject myJavaString = QJniObject::fromString(&quot;Hello, Java&quot;);
QJniObject mySubstring = myJavaString.callObjectMethod(&quot;substring&quot;,
                                                       &quot;(II)Ljava/lang/String;&quot;, 7, 11);
</db:programlisting>
</db:section>
<db:section xml:id="callStaticMethod">
<db:title>[static] T QJniObject::callStaticMethod(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>T</db:type>
<db:methodname>callStaticMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T callStaticMethod(const char *className, const char *methodName, const char *signature, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method <db:code role="parameter">methodName</db:code> from class <db:code role="parameter">className</db:code> with <db:code role="parameter">signature</db:code> specifying the types of any subsequent arguments.</db:para>
<db:programlisting language="cpp">jint a = 2;
jint b = 4;
jint max = QJniObject::callStaticMethod&amp;lt;jint&amp;gt;(&quot;java/lang/Math&quot;, &quot;max&quot;, &quot;(II)I&quot;, a, b);
</db:programlisting>
</db:section>
<db:section xml:id="callStaticMethod-1">
<db:title>[static] T QJniObject::callStaticMethod(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>T</db:type>
<db:methodname>callStaticMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">T callStaticMethod(const char *className, const char *methodName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method <db:code role="parameter">methodName</db:code> on class <db:code role="parameter">className</db:code> and returns the value.</db:para>
<db:programlisting language="cpp">jint value = QJniObject::callStaticMethod&amp;lt;jint&amp;gt;(&quot;MyClass&quot;, &quot;staticMethod&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="callStaticMethod-2">
<db:title>[static] T QJniObject::callStaticMethod(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>T</db:type>
<db:methodname>callStaticMethod</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">T callStaticMethod(jclass clazz, const char *methodName, const char *signature, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method <db:code role="parameter">methodName</db:code> from <db:code role="parameter">clazz</db:code> with <db:code role="parameter">signature</db:code> specifying the types of any subsequent arguments.</db:para>
<db:programlisting language="cpp">QJniEnvironment env;
jclass javaMathClass = env.findClass(&quot;java/lang/Math&quot;);
jint a = 2;
jint b = 4;
jint max = QJniObject::callStaticMethod&amp;lt;jint&amp;gt;(javaMathClass, &quot;max&quot;, &quot;(II)I&quot;, a, b);
</db:programlisting>
</db:section>
<db:section xml:id="callStaticMethod-3">
<db:title>[static] T QJniObject::callStaticMethod(jclass <db:emphasis>clazz</db:emphasis>, jmethodID <db:emphasis>methodId</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>T</db:type>
<db:methodname>callStaticMethod</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>jmethodID</db:type>
<db:parameter>methodId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">T callStaticMethod(jclass clazz, jmethodID methodId, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method identified by <db:code role="parameter">methodId</db:code> from the class <db:code role="parameter">clazz</db:code> with any subsequent arguments. Useful when <db:code role="parameter">clazz</db:code> and <db:code role="parameter">methodId</db:code> are already cached from previous operations.</db:para>
<db:programlisting language="cpp">QJniEnvironment env;
jclass javaMathClass = env.findClass(&quot;java/lang/Math&quot;);
jmethodID methodId = env.findStaticMethod(javaMathClass, &quot;max&quot;, &quot;(II)I&quot;);
if (methodId != 0) {
    jint a = 2;
    jint b = 4;
    jint max = QJniObject::callStaticMethod&amp;lt;jint&amp;gt;(javaMathClass, methodId, a, b);
}
</db:programlisting>
</db:section>
<db:section xml:id="callStaticMethod-4">
<db:title>[static] T QJniObject::callStaticMethod(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>T</db:type>
<db:methodname>callStaticMethod</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">T callStaticMethod(jclass clazz, const char *methodName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method <db:code role="parameter">methodName</db:code> on <db:code role="parameter">clazz</db:code> and returns the value.</db:para>
<db:programlisting language="cpp">QJniEnvironment env;
jclass javaMathClass = env.findClass(&quot;java/lang/Math&quot;);
jdouble randNr = QJniObject::callStaticMethod&amp;lt;jdouble&amp;gt;(javaMathClass, &quot;random&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="callStaticObjectMethod">
<db:title>[static] QJniObject QJniObject::callStaticObjectMethod(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>callStaticObjectMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject callStaticObjectMethod(const char *className, const char *methodName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method with <db:code role="parameter">methodName</db:code> on the class <db:code role="parameter">className</db:code>.</db:para>
<db:programlisting language="cpp">QJniObject string = QJniObject::callStaticObjectMethod&amp;lt;jstring&amp;gt;(&quot;CustomClass&quot;, &quot;getClassName&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="callStaticObjectMethod-1">
<db:title>[static] QJniObject QJniObject::callStaticObjectMethod(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>callStaticObjectMethod</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject callStaticObjectMethod(const char *className, const char *methodName, const char *signature, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method <db:code role="parameter">methodName</db:code> from the class <db:code role="parameter">className</db:code> with <db:code role="parameter">signature</db:code> specifying the types of any subsequent arguments.</db:para>
<db:programlisting language="cpp">QJniObject thread = QJniObject::callStaticObjectMethod(&quot;java/lang/Thread&quot;, &quot;currentThread&quot;,
                                                       &quot;()Ljava/lang/Thread;&quot;);
QJniObject string = QJniObject::callStaticObjectMethod(&quot;java/lang/String&quot;, &quot;valueOf&quot;,
                                                       &quot;(I)Ljava/lang/String;&quot;, 10);
</db:programlisting>
</db:section>
<db:section xml:id="callStaticObjectMethod-2">
<db:title>[static] QJniObject QJniObject::callStaticObjectMethod(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>callStaticObjectMethod</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject callStaticObjectMethod(jclass clazz, const char *methodName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method with <db:code role="parameter">methodName</db:code> on <db:code role="parameter">clazz</db:code>.</db:para>
</db:section>
<db:section xml:id="callStaticObjectMethod-3">
<db:title>[static] QJniObject QJniObject::callStaticObjectMethod(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>callStaticObjectMethod</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject callStaticObjectMethod(jclass clazz, const char *methodName, const char *signature, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method <db:code role="parameter">methodName</db:code> from class <db:code role="parameter">clazz</db:code> with <db:code role="parameter">signature</db:code> specifying the types of any subsequent arguments.</db:para>
</db:section>
<db:section xml:id="callStaticObjectMethod-4">
<db:title>[static] QJniObject QJniObject::callStaticObjectMethod(jclass <db:emphasis>clazz</db:emphasis>, jmethodID <db:emphasis>methodId</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>callStaticObjectMethod</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>jmethodID</db:type>
<db:parameter>methodId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject callStaticObjectMethod(jclass clazz, jmethodID methodId, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calls the static method identified by <db:code role="parameter">methodId</db:code> from the class <db:code role="parameter">clazz</db:code> with any subsequent arguments. Useful when <db:code role="parameter">clazz</db:code> and <db:code role="parameter">methodId</db:code> are already cached from previous operations.</db:para>
<db:programlisting language="cpp">QJniEnvironment env;
jclass clazz = env.findClass(&quot;java/lang/String&quot;);
jmethodID methodId = env.findStaticMethod(clazz, &quot;valueOf&quot;, &quot;(I)Ljava/lang/String;&quot;);
if (methodId != 0)
    QJniObject str = QJniObject::callStaticObjectMethod(clazz, methodId, 10);
</db:programlisting>
</db:section>
<db:section xml:id="className">
<db:title>[since 6.2] QByteArray QJniObject::className() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>className</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray className() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the class object held by the <db:link xlink:href="qjniobject.xml">QJniObject</db:link> as a QByteArray.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="fromLocalRef">
<db:title>[static] QJniObject QJniObject::fromLocalRef(jobject <db:emphasis>localRef</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>fromLocalRef</db:methodname>
<db:methodparam>
<db:type>jobject</db:type>
<db:parameter>localRef</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject fromLocalRef(jobject localRef)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:link xlink:href="qjniobject.xml">QJniObject</db:link> from the local JNI reference <db:code role="parameter">localRef</db:code>. This function takes ownership of <db:code role="parameter">localRef</db:code> and frees it before returning.</db:para>
<db:note>
<db:para>Only call this function with a local JNI reference. For example, most raw JNI calls, through the JNI environment, return local references to a java object.</db:para>
</db:note>
<db:programlisting language="cpp">jobject localRef = env-&amp;gt;GetObjectArrayElement(array, index);
QJniObject element = QJniObject::fromLocalRef(localRef);
</db:programlisting>
</db:section>
<db:section xml:id="fromString">
<db:title>[static] QJniObject QJniObject::fromString(const QString &amp;<db:emphasis>string</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>fromString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject fromString(const QString &amp;string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a Java string from the <db:link xlink:href="qstring.xml">QString</db:link> <db:code role="parameter">string</db:code> and returns a <db:link xlink:href="qjniobject.xml">QJniObject</db:link> holding that string.</db:para>
<db:programlisting language="cpp">QString myQString = &quot;QString&quot;;
QJniObject myJavaString = QJniObject::fromString(myQString);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjniobject.xml#toString">toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getField">
<db:title>T QJniObject::getField(const char *<db:emphasis>fieldName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T</db:type>
<db:methodname>getField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T getField(const char *fieldName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the value of the field <db:code role="parameter">fieldName</db:code>.</db:para>
<db:programlisting language="cpp">QJniObject volumeControl(&quot;org/qtproject/qt/TestClass&quot;);
jint fieldValue = volumeControl.getField&amp;lt;jint&amp;gt;(&quot;FIELD_NAME&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="getObjectField">
<db:title>QJniObject QJniObject::getObjectField(const char *<db:emphasis>fieldName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>getObjectField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject getObjectField(const char *fieldName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves a JNI object from the field <db:code role="parameter">fieldName</db:code>.</db:para>
<db:programlisting language="cpp">QJniObject field = jniObject.getObjectField&amp;lt;jstring&amp;gt;(&quot;FIELD_NAME&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="getObjectField-1">
<db:title>QJniObject QJniObject::getObjectField(const char *<db:emphasis>fieldName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>getObjectField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject getObjectField(const char *fieldName, const char *signature) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves a JNI object from the field <db:code role="parameter">fieldName</db:code> with <db:code role="parameter">signature</db:code>.</db:para>
<db:note>
<db:para>This function can be used without a template type.</db:para>
</db:note>
<db:programlisting language="cpp">QJniObject field = jniObject.getObjectField(&quot;FIELD_NAME&quot;, &quot;Ljava/lang/String;&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="getStaticField">
<db:title>[static] T QJniObject::getStaticField(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>T</db:type>
<db:methodname>getStaticField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T getStaticField(const char *className, const char *fieldName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the value from the static field <db:code role="parameter">fieldName</db:code> on the class <db:code role="parameter">className</db:code>.</db:para>
</db:section>
<db:section xml:id="getStaticField-1">
<db:title>[static] T QJniObject::getStaticField(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>T</db:type>
<db:methodname>getStaticField</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">T getStaticField(jclass clazz, const char *fieldName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the value from the static field <db:code role="parameter">fieldName</db:code> on <db:code role="parameter">clazz</db:code>.</db:para>
</db:section>
<db:section xml:id="getStaticObjectField">
<db:title>[static] QJniObject QJniObject::getStaticObjectField(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>getStaticObjectField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject getStaticObjectField(const char *className, const char *fieldName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the object from the field <db:code role="parameter">fieldName</db:code> on the class <db:code role="parameter">className</db:code>.</db:para>
<db:programlisting language="cpp">QJniObject jobj = QJniObject::getStaticObjectField&amp;lt;jstring&amp;gt;(&quot;class/with/Fields&quot;, &quot;FIELD_NAME&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="getStaticObjectField-1">
<db:title>[static] QJniObject QJniObject::getStaticObjectField(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>getStaticObjectField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject getStaticObjectField(const char *className, const char *fieldName, const char *signature)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves a JNI object from the field <db:code role="parameter">fieldName</db:code> with <db:code role="parameter">signature</db:code> from class <db:code role="parameter">className</db:code>.</db:para>
<db:note>
<db:para>This function can be used without a template type.</db:para>
</db:note>
<db:programlisting language="cpp">QJniObject jobj = QJniObject::getStaticObjectField(&quot;class/with/Fields&quot;, &quot;FIELD_NAME&quot;,
                                                   &quot;Ljava/lang/String;&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="getStaticObjectField-2">
<db:title>[static] QJniObject QJniObject::getStaticObjectField(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>getStaticObjectField</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject getStaticObjectField(jclass clazz, const char *fieldName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the object from the field <db:code role="parameter">fieldName</db:code> on <db:code role="parameter">clazz</db:code>.</db:para>
<db:programlisting language="cpp">QJniObject jobj = QJniObject::getStaticObjectField&amp;lt;jstring&amp;gt;(clazz, &quot;FIELD_NAME&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="getStaticObjectField-3">
<db:title>[static] QJniObject QJniObject::getStaticObjectField(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJniObject</db:type>
<db:methodname>getStaticObjectField</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject getStaticObjectField(jclass clazz, const char *fieldName, const char *signature)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves a JNI object from the field <db:code role="parameter">fieldName</db:code> with <db:code role="parameter">signature</db:code> from class <db:code role="parameter">clazz</db:code>.</db:para>
<db:note>
<db:para>This function can be used without a template type.</db:para>
</db:note>
<db:programlisting language="cpp">QJniObject jobj = QJniObject::getStaticObjectField(clazz, &quot;FIELD_NAME&quot;, &quot;Ljava/lang/String;&quot;);
</db:programlisting>
</db:section>
<db:section xml:id="isClassAvailable">
<db:title>[static] bool QJniObject::isClassAvailable(const char *<db:emphasis>className</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isClassAvailable</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isClassAvailable(const char *className)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the Java class <db:code role="parameter">className</db:code> is available.</db:para>
<db:programlisting language="cpp">if (QJniObject::isClassAvailable(&quot;java/lang/String&quot;)) {
    // condition statement
}
</db:programlisting>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QJniObject::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this instance holds a valid Java object.</db:para>
<db:programlisting language="cpp">QJniObject qjniObject;                        // ==&amp;gt; isValid() == false
QJniObject qjniObject(0)                      // ==&amp;gt; isValid() == false
QJniObject qjniObject(&quot;could/not/find/Class&quot;) // ==&amp;gt; isValid() == false
</db:programlisting>
</db:section>
<db:section xml:id="object">
<db:title>jobject QJniObject::object() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>jobject</db:type>
<db:methodname>object</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">jobject object() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the object held by the <db:link xlink:href="qjniobject.xml">QJniObject</db:link> either as jobject or as type T. T can be one of <db:link xlink:href="qjniobject.xml#object-types">JNI Object Types</db:link>.</db:para>
<db:programlisting language="cpp">QJniObject string = QJniObject::fromString(&quot;Hello, JNI&quot;);
jstring jstring = string.object&amp;lt;jstring&amp;gt;();
</db:programlisting>
<db:note>
<db:para>The returned object is still kept alive by this <db:link xlink:href="qjniobject.xml">QJniObject</db:link>. To keep the object alive beyond the lifetime of this <db:link xlink:href="qjniobject.xml">QJniObject</db:link>, for example to record it for later use, the easiest approach is to store it in another <db:link xlink:href="qjniobject.xml">QJniObject</db:link> with a suitable lifetime. Alternatively, you may create a new global reference to the object and store it, taking care to free it when you are done with it.</db:para>
</db:note>
<db:programlisting language="cpp">void functionScope()
{
    QString helloString(&quot;Hello&quot;);
    jstring myJString = 0;
    {
        QJniObject string = QJniObject::fromString(helloString);
        myJString = string.object&amp;lt;jstring&amp;gt;();
    }

   // Ops! myJString is no longer valid.
}
</db:programlisting>
</db:section>
<db:section xml:id="objectClass">
<db:title>[since 6.2] jclass QJniObject::objectClass() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>jclass</db:type>
<db:methodname>objectClass</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">jclass objectClass() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the class object held by the <db:link xlink:href="qjniobject.xml">QJniObject</db:link> as a jclass.</db:para>
<db:note>
<db:para>The returned object is still kept alive by this <db:link xlink:href="qjniobject.xml">QJniObject</db:link>. To keep the object alive beyond the lifetime of this <db:link xlink:href="qjniobject.xml">QJniObject</db:link>, for example to record it for later use, the easiest approach is to store it in another <db:link xlink:href="qjniobject.xml">QJniObject</db:link> with a suitable lifetime. Alternatively, you may create a new global reference to the object and store it, taking care to free it when you are done with it.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="setField">
<db:title>void QJniObject::setField(const char *<db:emphasis>fieldName</db:emphasis>, T <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setField(const char *fieldName, T value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value of <db:code role="parameter">fieldName</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:programlisting language="cpp">QJniObject obj;
obj.setField&amp;lt;jint&amp;gt;(&quot;AN_INT_FIELD&quot;, 10);
jstring myString = ...;
obj.setField&amp;lt;jstring&amp;gt;(&quot;A_STRING_FIELD&quot;, myString);
</db:programlisting>
</db:section>
<db:section xml:id="setField-1">
<db:title>void QJniObject::setField(const char *<db:emphasis>fieldName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, T <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setField(const char *fieldName, const char *signature, T value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value of <db:code role="parameter">fieldName</db:code> with <db:code role="parameter">signature</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:programlisting language="cpp">QJniObject stringArray = ...;
QJniObject obj = ...;
obj.setObjectField&amp;lt;jobjectArray&amp;gt;(&quot;KEY_VALUES&quot;, &quot;([Ljava/lang/String;)V&quot;,
                           stringArray.object&amp;lt;jobjectArray&amp;gt;())
</db:programlisting>
</db:section>
<db:section xml:id="setStaticField">
<db:title>[static] void QJniObject::setStaticField(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>, T <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setStaticField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStaticField(const char *className, const char *fieldName, T value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the static field <db:code role="parameter">fieldName</db:code> of the class <db:code role="parameter">className</db:code> to <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="setStaticField-1">
<db:title>[static] void QJniObject::setStaticField(const char *<db:emphasis>className</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, T <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setStaticField</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStaticField(const char *className, const char *fieldName, const char *signature, T value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the static field <db:code role="parameter">fieldName</db:code> on the class <db:code role="parameter">className</db:code> to <db:code role="parameter">value</db:code> using the setter with <db:code role="parameter">signature</db:code>.</db:para>
</db:section>
<db:section xml:id="setStaticField-2">
<db:title>[static] void QJniObject::setStaticField(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>, T <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setStaticField</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStaticField(jclass clazz, const char *fieldName, const char *signature, T value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the static field <db:code role="parameter">fieldName</db:code> on the class <db:code role="parameter">clazz</db:code> to <db:code role="parameter">value</db:code> using the setter with <db:code role="parameter">signature</db:code>.</db:para>
</db:section>
<db:section xml:id="setStaticField-3">
<db:title>[static] void QJniObject::setStaticField(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>, T <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setStaticField</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStaticField(jclass clazz, const char *fieldName, T value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the static field <db:code role="parameter">fieldName</db:code> of the class <db:code role="parameter">clazz</db:code> to <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="toString">
<db:title>QString QJniObject::toString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qstring.xml">QString</db:link> with a string representation of the java object. Calling this function on a Java String object is a convenient way of getting the actual string data.</db:para>
<db:programlisting language="cpp">QJniObject string = ...; //  &quot;Hello Java&quot;
QString qstring = string.toString(); // &quot;Hello Java&quot;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjniobject.xml#fromString">fromString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QJniObject &amp;QJniObject::operator=(T <db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QJniObject &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJniObject &amp; operator=(T object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replace the current object with <db:code role="parameter">object</db:code>. The old Java object will be released.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq-1">
<db:title>bool operator!=(const QJniObject &amp;<db:emphasis>o1</db:emphasis>, const QJniObject &amp;<db:emphasis>o2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QJniObject &amp;</db:type>
<db:parameter>o1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QJniObject &amp;</db:type>
<db:parameter>o2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QJniObject &amp;o1, const QJniObject &amp;o2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">o1</db:code> holds a reference to a different object than <db:code role="parameter">o2</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool operator==(const QJniObject &amp;<db:emphasis>o1</db:emphasis>, const QJniObject &amp;<db:emphasis>o2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QJniObject &amp;</db:type>
<db:parameter>o1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QJniObject &amp;</db:type>
<db:parameter>o2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QJniObject &amp;o1, const QJniObject &amp;o2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if both objects, <db:code role="parameter">o1</db:code> and <db:code role="parameter">o2</db:code>, are referencing the same Java object, or if both are NULL. In any other cases false will be returned.</db:para>
</db:section>
</db:section>
</db:article>
