<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Scene Graph - Custom Geometry</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to implement a custom geometry in the Qt Quick Scene Graph.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The custom geometry example shows how to create a <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> that uses the scene graph API to build a custom geometry for the scene graph. It does this by creating a <db:code>BezierCurve</db:code> item, which is made part of the CustomGeometry module and makes use of this in a QML file.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/custom-geometry-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="beziercurve-declaration">
<db:title>BezierCurve Declaration</db:title>
<db:programlisting language="cpp">#include &lt;QtQuick/QQuickItem&gt;

class BezierCurve : public QQuickItem
{
    Q_OBJECT

    Q_PROPERTY(QPointF p1 READ p1 WRITE setP1 NOTIFY p1Changed)
    Q_PROPERTY(QPointF p2 READ p2 WRITE setP2 NOTIFY p2Changed)
    Q_PROPERTY(QPointF p3 READ p3 WRITE setP3 NOTIFY p3Changed)
    Q_PROPERTY(QPointF p4 READ p4 WRITE setP4 NOTIFY p4Changed)

    Q_PROPERTY(int segmentCount READ segmentCount WRITE setSegmentCount NOTIFY segmentCountChanged)
    QML_ELEMENT

public:
    BezierCurve(QQuickItem *parent = nullptr);
    ~BezierCurve();

    QSGNode *updatePaintNode(QSGNode *, UpdatePaintNodeData *) override;

    QPointF p1() const { return m_p1; }
    QPointF p2() const { return m_p2; }
    QPointF p3() const { return m_p3; }
    QPointF p4() const { return m_p4; }

    int segmentCount() const { return m_segmentCount; }

    void setP1(const QPointF &amp;p);
    void setP2(const QPointF &amp;p);
    void setP3(const QPointF &amp;p);
    void setP4(const QPointF &amp;p);

    void setSegmentCount(int count);

signals:
    void p1Changed(const QPointF &amp;p);
    void p2Changed(const QPointF &amp;p);
    void p3Changed(const QPointF &amp;p);
    void p4Changed(const QPointF &amp;p);

    void segmentCountChanged(int count);

private:
    QPointF m_p1;
    QPointF m_p2;
    QPointF m_p3;
    QPointF m_p4;

    int m_segmentCount;
};
</db:programlisting>
<db:para>The item declaration subclasses the <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> class and adds five properties. One for each of the four control points in the bezier curve and a parameter to control the number of segments the curve is subdivided into. For each of the properties we have corresponding getter and setter functions. Since these properties can be bound to in QML, it is also preferable to have notifier signals for each of them so changes will be picked up the QML engine and used accordingly.</db:para>
<db:programlisting language="cpp">    QSGNode *updatePaintNode(QSGNode *, UpdatePaintNodeData *) override;
</db:programlisting>
<db:para>The synchronization point between the QML scene and the rendering scene graph is the virtual function <db:link xlink:href="qquickitem.xml#updatePaintNode">QQuickItem::updatePaintNode</db:link>() which all items with custom scene graph logic must implement.</db:para>
<db:note>
<db:para>The scene graph will on many hardware configurations be rendering on a separate thread. It is therefore crucial that interaction with the scene graph happens in a controlled manner, first and foremost through the <db:link xlink:href="qquickitem.xml#updatePaintNode">QQuickItem::updatePaintNode</db:link>() function.</db:para>
</db:note>
</db:section>
<db:section xml:id="beziercurve-implementation">
<db:title>BezierCurve Implementation</db:title>
<db:programlisting language="cpp">BezierCurve::BezierCurve(QQuickItem *parent)
    : QQuickItem(parent)
    , m_p1(0, 0)
    , m_p2(1, 0)
    , m_p3(0, 1)
    , m_p4(1, 1)
    , m_segmentCount(32)
{
    setFlag(ItemHasContents, true);
}
</db:programlisting>
<db:para>The BezierCurve constructor sets up default values for the control points and the number of segments. The bezier curve is specified in normalized coordinates relative to the item's bounding rectangle.</db:para>
<db:para>The constructor also sets the flag <db:link xlink:href="qquickitem.xml#Flag-enum">QQuickItem::ItemHasContents</db:link>. This flags tells the canvas that this item provides visual content and will call <db:link xlink:href="qquickitem.xml#updatePaintNode">QQuickItem::updatePaintNode</db:link>() when it is time for the QML scene to be synchronized with the rendering scene graph.</db:para>
<db:programlisting language="cpp">BezierCurve::~BezierCurve() = default;
</db:programlisting>
<db:para>The BezierCurve class has no data members that need to be cleaned up so the destructor does nothing. It is worth mentioning that the rendering scene graph is managed by the scene graph it self, potentially in a different thread, so one should never retain <db:link xlink:href="qsgnode.xml">QSGNode</db:link> references in the <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> class nor try to clean them up explicitly.</db:para>
<db:programlisting language="cpp">void BezierCurve::setP1(const QPointF &amp;p)
{
    if (p == m_p1)
        return;

    m_p1 = p;
    emit p1Changed(p);
    update();
}
</db:programlisting>
<db:para>The setter function for the p1 property checks if the value is unchanged and exits early if this is the case. Then it updates the internal value and emits the changed signal. It then proceeds to call the <db:link xlink:href="qquickitem.xml#update">QQuickItem::update</db:link>() function which will notify the rendering scene graph, that the state of this object has changed and needs to be synchronized with the rendering scene graph. A call to update() will result in a call to <db:link xlink:href="qquickitem.xml#updatePaintNode">QQuickItem::updatePaintNode</db:link>() at a later time.</db:para>
<db:para>The other property setters are equivalent, and are omitted from this example.</db:para>
<db:programlisting language="cpp">QSGNode *BezierCurve::updatePaintNode(QSGNode *oldNode, UpdatePaintNodeData *)
{
    QSGGeometryNode *node = nullptr;
    QSGGeometry *geometry = nullptr;

    if (!oldNode) {
        node = new QSGGeometryNode;
</db:programlisting>
<db:para>The updatePaintNode() function is the primary integration point for synchronizing the state of the QML scene with the rendering scene graph. The function gets passed a <db:link xlink:href="qsgnode.xml">QSGNode</db:link> which is the instance that was returned on the last call to the function. It will be null the first time the function gets called and we create our <db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link> which we will fill with geometry and a material.</db:para>
<db:programlisting language="cpp">        geometry = new QSGGeometry(QSGGeometry::defaultAttributes_Point2D(), m_segmentCount);
        geometry-&gt;setLineWidth(2);
        geometry-&gt;setDrawingMode(QSGGeometry::DrawLineStrip);
        node-&gt;setGeometry(geometry);
        node-&gt;setFlag(QSGNode::OwnsGeometry);
</db:programlisting>
<db:para>We then create the geometry and add it to the node. The first argument to the <db:link xlink:href="qsggeometry.xml">QSGGeometry</db:link> constructor is a definition of the vertex type, called an &quot;attribute set&quot;. Since the graphics often used in QML centers around a few common standard attribute sets, these are provided by default. Here we use the Point2D attribute set which has two floats, one for x coordinates and one for y coordinates. The second argument is the vertex count.</db:para>
<db:para>Custom attribute sets can also created, but that is not covered in this example.</db:para>
<db:para>Since we do not have any special needs for memory managing the geometry, we specify that the <db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link> should own the geometry.</db:para>
<db:para>To minimize allocations, reduce memory fragmentation and improve performance, it would also be possible to make the geometry a member of a <db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link> subclass, in which case, we would not have set the QSGGeometryNode::OwnsGeometry flag.</db:para>
<db:programlisting language="cpp">        auto *material = new QSGFlatColorMaterial;
        material-&gt;setColor(QColor(255, 0, 0));
        node-&gt;setMaterial(material);
        node-&gt;setFlag(QSGNode::OwnsMaterial);
</db:programlisting>
<db:para>The scene graph API provides a few commonly used material implementations. In this example we use the <db:link xlink:href="qsgflatcolormaterial.xml">QSGFlatColorMaterial</db:link>, which will fill the shape defined by the geometry with a solid color. Again we pass the ownership of the material to the node, so it can be cleaned up by the scene graph.</db:para>
<db:programlisting language="cpp">    } else {
        node = static_cast&lt;QSGGeometryNode *&gt;(oldNode);
        geometry = node-&gt;geometry();
        geometry-&gt;allocate(m_segmentCount);
    }
</db:programlisting>
<db:para>In the case where the QML item has changed and we only want to modify the existing node's geometry, we cast the <db:code>oldNode</db:code> to a <db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link> instance and extract it's geometry. In case the segment count has changed, we call <db:link xlink:href="qsggeometry.xml#allocate">QSGGeometry::allocate</db:link>() to make sure it has the right number of vertices.</db:para>
<db:programlisting language="cpp">    QSizeF itemSize = size();
    QSGGeometry::Point2D *vertices = geometry-&gt;vertexDataAsPoint2D();
    for (int i = 0; i &lt; m_segmentCount; ++i) {
        qreal t = i / qreal(m_segmentCount - 1);
        qreal invt = 1 - t;

        QPointF pos = invt * invt * invt * m_p1
                    + 3 * invt * invt * t * m_p2
                    + 3 * invt * t * t * m_p3
                    + t * t * t * m_p4;

        float x = pos.x() * itemSize.width();
        float y = pos.y() * itemSize.height();

        vertices[i].set(x, y);
    }
    node-&gt;markDirty(QSGNode::DirtyGeometry);
</db:programlisting>
<db:para>To fill the geometry we first extract the vertex array from it. Since we are using one of the default attribute sets, we can use the convenience function <db:link xlink:href="qsggeometry.xml#vertexDataAsPoint2D">QSGGeometry::vertexDataAsPoint2D</db:link>(). Then we go through each segment and calculate its position and write that value to the vertex.</db:para>
<db:programlisting language="cpp">    return node;
}
</db:programlisting>
<db:para>At the end of the function we return the node so the scene graph can render it.</db:para>
</db:section>
<db:section xml:id="application-entry-point">
<db:title>Application Entry-Point</db:title>
<db:programlisting language="cpp">int main(int argc, char **argv)
{
    QGuiApplication app(argc, argv);

    QQuickView view;
    QSurfaceFormat format = view.format();
    format.setSamples(16);
    view.setFormat(format);
    view.setSource(QUrl(&quot;qrc:///scenegraph/customgeometry/main.qml&quot;));
    view.show();

    return app.exec();
}
</db:programlisting>
<db:para>The application is a straightforward QML application, with a <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> and a <db:link xlink:href="qquickview.xml">QQuickView</db:link> that we pass a .qml file.</db:para>
<db:programlisting language="cpp">    QML_ELEMENT
</db:programlisting>
<db:para>To make use of the BezierCurve item, we need to register it in the QML engine, using the <db:link xlink:href="qqmlintegration-h-qtqml-proxy.xml#QML_ELEMENT">QML_ELEMENT</db:link> macro. This gives it the name BezierCurve and makes it part of the <db:code>CustomGeometry 1.0</db:code> module as defined in the project's build files:</db:para>
</db:section>
<db:section xml:id="using-cmake">
<db:title>Using CMake</db:title>
<db:programlisting language="cpp"># Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

cmake_minimum_required(VERSION 3.16)
project(customgeometry_declarative LANGUAGES CXX)

find_package(Qt6 REQUIRED COMPONENTS Core Gui Quick)

qt_standard_project_setup()

qt_add_executable(customgeometry_declarative WIN32 MACOSX_BUNDLE
    beziercurve.cpp beziercurve.h
    main.cpp
)

target_link_libraries(customgeometry_declarative PRIVATE
    Qt6::Core
    Qt6::Gui
    Qt6::Quick
)

qt_add_qml_module(customgeometry_declarative
    URI CustomGeometry
    QML_FILES main.qml
    RESOURCE_PREFIX /scenegraph/customgeometry
    NO_RESOURCE_TARGET_PATH
)

install(TARGETS customgeometry_declarative
    BUNDLE  DESTINATION .
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

qt_generate_deploy_qml_app_script(
    TARGET customgeometry_declarative
    OUTPUT_SCRIPT deploy_script
    MACOS_BUNDLE_POST_BUILD
    NO_UNSUPPORTED_PLATFORM_ERROR
    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM
)
install(SCRIPT ${deploy_script})

</db:programlisting>
</db:section>
<db:section xml:id="using-qmake">
<db:title>Using qmake</db:title>
<db:programlisting language="cpp">TARGET = customgeometry
QT += quick

CONFIG += qmltypes
QML_IMPORT_NAME = CustomGeometry
QML_IMPORT_MAJOR_VERSION = 1

SOURCES += \
    main.cpp \
    beziercurve.cpp

HEADERS += \
    beziercurve.h

RESOURCES += customgeometry.qrc

target.path = $$[QT_INSTALL_EXAMPLES]/quick/scenegraph/customgeometry
INSTALLS += target

</db:programlisting>
<db:para>As the bezier curve is drawn as line strips, we specify that the view should be multisampled to get antialiasing. This is not required, but it will make the item look a bit nicer on hardware that supports it. Multisampling is not enabled by default because it often results in higher memory usage.</db:para>
</db:section>
<db:section xml:id="using-the-item">
<db:title>Using the Item</db:title>
<db:programlisting language="qml">import QtQuick
import CustomGeometry
</db:programlisting>
<db:para>Our .qml file imports the <db:code>QtQuick 2.0</db:code> module to get the standard types and also our own <db:code>CustomGeometry 1.0</db:code> module which contains our newly created BezierCurve objects.</db:para>
<db:programlisting language="qml">Item {
    width: 300
    height: 200

    BezierCurve {
        id: line
        anchors.fill: parent
        anchors.margins: 20
</db:programlisting>
<db:para>Then we create the our root item and an instance of the BezierCurve which we anchor to fill the root.</db:para>
<db:programlisting language="qml">        property real t
        SequentialAnimation on t {
            NumberAnimation { to: 1; duration: 2000; easing.type: Easing.InOutQuad }
            NumberAnimation { to: 0; duration: 2000; easing.type: Easing.InOutQuad }
            loops: Animation.Infinite
        }

        p2: Qt.point(t, 1 - t)
        p3: Qt.point(1 - t, t)
    }
</db:programlisting>
<db:para>To make the example a bit more interesting we add an animation to change the two control points in the curve. The end points stay unchanged.</db:para>
<db:programlisting language="qml">    Text {
        anchors.bottom: line.bottom

        x: 20
        width: parent.width - 40
        wrapMode: Text.WordWrap

        text: qsTr(&quot;This curve is a custom scene graph item, implemented using line strips&quot;)
    }
}
</db:programlisting>
<db:para>Finally we overlay a short text outlining what the example shows.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/scenegraph/customgeometry?h=6.8">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
