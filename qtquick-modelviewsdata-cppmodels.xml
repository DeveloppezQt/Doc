<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using C++ Models with Qt Quick Views</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>using Qt Quick views with models defined in C++.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="data-provided-in-a-custom-c-model">
<db:title>Data Provided In A Custom C++ Model</db:title>
<db:para>Models can be defined in C++ and then made available to QML. This is useful for exposing existing C++ data models or otherwise complex datasets to QML.</db:para>
<db:para>A C++ model class can be defined as a <db:link xlink:href="qstringlist.xml">QStringList</db:link>, a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link>, a <db:link xlink:href="qobject.xml#QObjectList-typedef">QObjectList</db:link> or a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>. The first three are useful for exposing simpler datasets, while <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> provides a more flexible solution for more complex models.</db:para>
<db:para>Here is a video tutorial that takes you through the whole process of exposing a C++ model to QML:</db:para>
<db:mediaobject>
<db:videoobject>
<?db video="iframe"?>
<db:videodata format="youtube" fileref="9BcAYDlpuT8">
</db:videodata>
</db:videoobject>
<db:imageobject>
<db:imagedata fileref="images/9BcAYDlpuT8.jpg">
</db:imagedata>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="qstringlist-based-model">
<db:title>QStringList-based Model</db:title>
<db:para>A model may be a simple <db:link xlink:href="qstringlist.xml">QStringList</db:link>, which provides the contents of the list via the <db:emphasis>modelData</db:emphasis> role.</db:para>
<db:para>Here is a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> with a delegate that references its model item's value using the <db:code>modelData</db:code> role:</db:para>
<db:programlisting language="qml">ListView {
    width: 100
    height: 100
    required model

    delegate: Rectangle {
        required property string modelData
        height: 25
        width: 100
        Text { text: parent.modelData }
    }
}
</db:programlisting>
<db:para>A Qt application can load this QML document and set the value of <db:code>myModel</db:code> to a <db:link xlink:href="qstringlist.xml">QStringList</db:link>:</db:para>
<db:programlisting language="cpp">    QStringList dataList = {
        &quot;Item 1&quot;,
        &quot;Item 2&quot;,
        &quot;Item 3&quot;,
        &quot;Item 4&quot;
    };

    QQuickView view;
    view.setInitialProperties({{ &quot;model&quot;, QVariant::fromValue(dataList) }});
</db:programlisting>
<db:para>The complete source code for this example is available in <db:link xlink:href="qtquick-models-stringlistmodel-example.xml">examples/quick/models/stringlistmodel</db:link> within the Qt install directory.</db:para>
<db:note>
<db:para>There is no way for the view to know that the contents of a <db:link xlink:href="qstringlist.xml">QStringList</db:link> have changed. If the <db:link xlink:href="qstringlist.xml">QStringList</db:link> changes, it will be necessary to reset the model by calling <db:link xlink:href="qqmlcontext.xml#setContextProperty">QQmlContext::setContextProperty</db:link>() again.</db:para>
</db:note>
</db:section>
<db:section xml:id="qvariantlist-based-model">
<db:title>QVariantList-based Model</db:title>
<db:para>A model may be a single <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link>, which provides the contents of the list via the <db:emphasis>modelData</db:emphasis> role.</db:para>
<db:para>The API works just like with <db:link xlink:href="qstringlist.xml">QStringList</db:link>, as shown in the previous section.</db:para>
<db:note>
<db:para>There is no way for the view to know that the contents of a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> have changed. If the <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> changes, it will be necessary to reset the model.</db:para>
</db:note>
</db:section>
<db:section xml:id="qobjectlist-based-model">
<db:title>QObjectList-based Model</db:title>
<db:para>A list of <db:link xlink:href="qobject.xml">QObject</db:link>* values can also be used as a model. A <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qobject.xml">QObject</db:link>*&gt; provides the properties of the objects in the list as roles.</db:para>
<db:para>The following application creates a <db:code>DataObject</db:code> class with <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> values that will be accessible as named roles when a <db:link xlink:href="qlist.xml">QList</db:link>&lt;DataObject*&gt; is exposed to QML:</db:para>
<db:programlisting language="cpp">class DataObject : public QObject
{
    Q_OBJECT

    Q_PROPERTY(QString name READ name WRITE setName NOTIFY nameChanged)
    Q_PROPERTY(QString color READ color WRITE setColor NOTIFY colorChanged)
    ...
};

int main(int argc, char ** argv)
{
    QGuiApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
    QGuiApplication app(argc, argv);

    QList&amp;lt;QObject *&amp;gt; dataList = {
        new DataObject(&quot;Item 1&quot;, &quot;red&quot;),
        new DataObject(&quot;Item 2&quot;, &quot;green&quot;),
        new DataObject(&quot;Item 3&quot;, &quot;blue&quot;),
        new DataObject(&quot;Item 4&quot;, &quot;yellow&quot;)
    };

    QQuickView view;
    view.setResizeMode(QQuickView::SizeRootObjectToView);
    view.setInitialProperties({{ &quot;model&quot;, QVariant::fromValue(dataList) }});
    ...
</db:programlisting>
<db:para>The <db:link xlink:href="qobject.xml">QObject</db:link>* is available as the <db:code>modelData</db:code> property. As a convenience, the properties of the object are also made available directly in the delegate's context. Here, <db:code>view.qml</db:code> references the <db:code>DataModel</db:code> properties in the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> delegate:</db:para>
<db:programlisting language="qml">ListView {
    width: 100; height: 100
    required model

    delegate: Rectangle {
        required color
        required property string name

        height: 25
        width: 100
        Text { text: parent.name }
    }
}
</db:programlisting>
<db:para>Note the use of <db:code>color</db:code> property with qualifier. The properties of the object are not replicated in the <db:code>model</db:code> object, as they are easily available via the <db:code>modelData</db:code> object.</db:para>
<db:para>The complete source code for this example is available in <db:link xlink:href="qtquick-models-objectlistmodel-example.xml">examples/quick/models/objectlistmodel</db:link> within the Qt install directory.</db:para>
<db:para>Note: There is no way for the view to know that the contents of a <db:link xlink:href="qlist.xml">QList</db:link> has changed. If the <db:link xlink:href="qlist.xml">QList</db:link> changes, it is necessary to reset the model by calling <db:link xlink:href="qqmlcontext.xml#setContextProperty">QQmlContext::setContextProperty</db:link>() again.</db:para>
</db:section>
<db:section xml:id="qabstractitemmodel-subclass">
<db:title>QAbstractItemModel Subclass</db:title>
<db:para>A model can be defined by subclassing <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>. This is the best approach if you have a more complex model that cannot be supported by the other approaches. A <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> can also automatically notify a QML view when the model data changes.</db:para>
<db:para>The roles of a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> subclass can be exposed to QML by reimplementing <db:link xlink:href="qabstractitemmodel.xml#roleNames">QAbstractItemModel::roleNames</db:link>().</db:para>
<db:para>Here is an application with a <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link> subclass named <db:code>AnimalModel</db:code>, which exposes the <db:emphasis>type</db:emphasis> and <db:emphasis>sizes</db:emphasis> roles. It reimplements <db:link xlink:href="qabstractitemmodel.xml#roleNames">QAbstractItemModel::roleNames</db:link>() to expose the role names, so that they can be accessed via QML:</db:para>
<db:programlisting language="cpp">class Animal
{
public:
    Animal(const QString &amp;amp;type, const QString &amp;amp;size);
    ...
};

class AnimalModel : public QAbstractListModel
{
    Q_OBJECT
public:
    enum AnimalRoles {
        TypeRole = Qt::UserRole + 1,
        SizeRole
    };

    AnimalModel(QObject *parent = 0);
    ...
};

QHash&amp;lt;int, QByteArray&amp;gt; AnimalModel::roleNames() const {
    QHash&amp;lt;int, QByteArray&amp;gt; roles;
    roles[TypeRole] = &quot;type&quot;;
    roles[SizeRole] = &quot;size&quot;;
    return roles;
}

int main(int argc, char ** argv)
{
    QGuiApplication app(argc, argv);

    AnimalModel model;
    model.addAnimal(Animal(&quot;Wolf&quot;, &quot;Medium&quot;));
    model.addAnimal(Animal(&quot;Polar bear&quot;, &quot;Large&quot;));
    model.addAnimal(Animal(&quot;Quoll&quot;, &quot;Small&quot;));

    QQuickView view;
    view.setResizeMode(QQuickView::SizeRootObjectToView);
    view.setInitialProperties({{&quot;model&quot;, QVariant::fromValue(&amp;amp;model)}});
    ...
</db:programlisting>
<db:para>This model is displayed by a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> delegate that accesses the <db:emphasis>type</db:emphasis> and <db:emphasis>size</db:emphasis> roles:</db:para>
<db:programlisting language="qml">ListView {
    width: 200; height: 250

    required model

    delegate: Text {
        required property string type
        required property string size

        text: &quot;Animal: &quot; + type + &quot;, &quot; + size
    }
}
</db:programlisting>
<db:para>QML views are automatically updated when the model changes. Remember the model must follow the standard rules for model changes and notify the view when the model has changed by using <db:link xlink:href="qabstractitemmodel.xml#dataChanged">QAbstractItemModel::dataChanged</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">QAbstractItemModel::beginInsertRows</db:link>(), and so on. See the <db:link xlink:href="model-view-programming.xml#model-subclassing-reference">Model subclassing reference</db:link> for more information.</db:para>
<db:para>The complete source code for this example is available in <db:link xlink:href="qtquick-models-abstractitemmodel-example.xml">examples/quick/models/abstractitemmodel</db:link> within the Qt install directory.</db:para>
<db:para><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> presents a hierarchy of tables, but the views currently provided by QML can only display list data. In order to display the child lists of a hierarchical model, use the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> QML type, which provides the following properties and functions to be used with list models of <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> type:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>hasModelChildren</db:emphasis> role property to determine whether a node has child nodes.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-models-delegatemodel.xml#rootIndex-prop">DelegateModel::rootIndex</db:link> allows the root node to be specified</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-models-delegatemodel.xml#modelIndex-method">DelegateModel::modelIndex</db:link>() returns a <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> which can be assigned to <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#rootIndex-prop">DelegateModel::rootIndex</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-models-delegatemodel.xml#parentModelIndex-method">DelegateModel::parentModelIndex</db:link>() returns a <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> which can be assigned to <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#rootIndex-prop">DelegateModel::rootIndex</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sql-models">
<db:title>SQL Models</db:title>
<db:para>Qt provides C++ classes that support SQL data models. These classes work transparently on the underlying SQL data, reducing the need to run SQL queries for basic SQL operations such as create, insert, or update. For more details about these classes, see <db:link xlink:href="sql-model.xml">Using the SQL Model Classes</db:link>.</db:para>
<db:para>Although the C++ classes provide complete feature sets to operate on SQL data, they do not provide data access to QML. So you must implement a C++ custom data model as a subclass of one of these classes, and expose it to QML either as a type or context property.</db:para>
<db:section xml:id="read-only-data-model">
<db:title>Read-only Data Model</db:title>
<db:para>The custom model must reimplement the following methods to enable read-only access to the data from QML:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemmodel.xml#roleNames">roleNames</db:link>() to expose the role names to the QML frontend. For example, the following version returns the selected table's field names as role names:</db:para>
<db:programlisting language="cpp"> QHash&amp;lt;int, QByteArray&amp;gt; SqlQueryModel::roleNames() const
 {
    QHash&amp;lt;int, QByteArray&amp;gt; roles;
    // record() returns an empty QSqlRecord
    for (int i = 0; i &amp;lt; this-&amp;gt;record().count(); i ++) {
        roles.insert(Qt::UserRole + i + 1, record().fieldName(i).toUtf8());
    }
    return roles;
}
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsqlquerymodel.xml#data">data</db:link>() to expose SQL data to the QML frontend. For example, the following implementation returns data for the given model index:</db:para>
<db:programlisting language="cpp">QVariant SqlQueryModel::data(const QModelIndex &amp;amp;index, int role) const
{
    QVariant value;

    if (index.isValid()) {
        if (role &amp;lt; Qt::UserRole) {
            value = QSqlQueryModel::data(index, role);
        } else {
            int columnIdx = role - Qt::UserRole - 1;
            QModelIndex modelIndex = this-&amp;gt;index(index.row(), columnIdx);
            value = QSqlQueryModel::data(modelIndex, Qt::DisplayRole);
        }
    }
    return value;
}
</db:programlisting>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> class is good enough to implement a custom read-only model that represents data in an SQL database. The <db:link xlink:href="qtquickcontrols-chattutorial-example.xml">chat tutorial</db:link> example demonstrates this very well by implementing a custom model to fetch the contact details from an SQLite database.</db:para>
</db:section>
<db:section xml:id="editable-data-model">
<db:title>Editable Data Model</db:title>
<db:para><db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link> implements setData() as described <db:link xlink:href="qtquick-modelviewsdata-cppmodels.xml#changing-model-data">below</db:link>.</db:para>
<db:para>Depending on the <db:link xlink:href="qsqltablemodel.xml#EditStrategy-enum">EditStrategy</db:link> used by the model, the changes are either queued for submission later or submitted immediately.</db:para>
<db:para>You can also insert new data into the model by calling <db:link xlink:href="qsqltablemodel.xml#insertRecord">QSqlTableModel::insertRecord</db:link>(). In the following example snippet, a <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link> is populated with book details and appended to the model:</db:para>
<db:programlisting language="cpp">...
QSqlRecord newRecord = record();
newRecord.setValue(&quot;author&quot;, &quot;John Grisham&quot;);
newRecord.setValue(&quot;booktitle&quot;, &quot;The Litigators&quot;);
insertRecord(rowCount(), newRecord);
...
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="exposing-c-data-models-to-qml">
<db:title>Exposing C++ Data Models to QML</db:title>
<db:para>The above examples use <db:link xlink:href="qqmlcontext.xml#setContextProperty">QQmlContext::setContextProperty</db:link>() to set model values directly in QML components. An alternative to this is to register the C++ model class as a QML type (either <db:link xlink:href="qtqml-cppintegration-definetypes.xml">directly</db:link> from a C++ entry-point, or within the initialization function of a <db:link xlink:href="qtqml-modules-cppplugins.xml">QML C++ plugin</db:link>, as shown below). This would allow the model classes to be created directly as types within QML:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>C++</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">class MyModelPlugin : public QQmlExtensionPlugin
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.QmlExtension.MyModel&quot; FILE &quot;mymodel.json&quot;)
public:
    void registerTypes(const char *uri)
    {
        qmlRegisterType&amp;lt;MyModel&amp;gt;(uri, 1, 0,
                &quot;MyModel&quot;);
    }
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QML</db:para>
</db:td>
<db:td>
<db:programlisting language="qml">MyModel {
    id: myModel
    ListElement { someProperty: &quot;some value&quot; }
}
</db:programlisting>
<db:programlisting language="qml">ListView {
    width: 200; height: 250
    model: myModel
    delegate: Text { text: someProperty }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>See <db:link xlink:href="qtqml-tutorials-extending-qml-example.xml">Writing QML Extensions with C++</db:link> for details on writing QML C++ plugins.</db:para>
</db:section>
<db:section xml:id="changing-model-data">
<db:title>Changing Model Data</db:title>
<db:para>Besides the <db:code>roleNames()</db:code> and <db:code>data()</db:code>, editable models must reimplement the <db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link> method to save changes to existing model data. The following version of the method checks if the given model index is valid and the <db:code>role</db:code> is equal to <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link>:</db:para>
<db:programlisting language="cpp">bool EditableModel::setData(const QModelIndex &amp;amp;index, const QVariant &amp;amp;value, int role)
{
    if (index.isValid() &amp;amp;&amp;amp; role == Qt::EditRole) {
        // Set data in model here. It can also be a good idea to check whether
        // the new value actually differs from the current value
        if (m_entries[index.row()] != value.toString()) {
            m_entries[index.row()] = value.toString();
            emit dataChanged(index, index, { Qt::EditRole, Qt::DisplayRole });
            return true;
        }
    }
    return false;
}
</db:programlisting>
<db:note>
<db:para>It is important to emit the <db:link xlink:href="qabstractitemmodel.xml#dataChanged">dataChanged</db:link>() signal after saving the changes.</db:para>
</db:note>
<db:para>Unlike the C++ item views such as <db:link xlink:href="qlistview.xml">QListView</db:link> or <db:link xlink:href="qtableview.xml">QTableView</db:link>, the <db:code>setData()</db:code> method must be explicitly invoked from QML delegates whenever appropriate. This is done by simply assigning a new value to the corresponding model property.</db:para>
<db:programlisting language="qml">ListView {
    anchors.fill: parent
    model: EditableModel {}
    delegate: TextField {
        width: ListView.view.width
        text: model.edit
        onAccepted: model.edit = text
    }
}
</db:programlisting>
<db:note>
<db:para>The <db:code>edit</db:code> role is equal to <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link>. See <db:link xlink:href="qabstractitemmodel.xml#roleNames">roleNames</db:link>() for the built-in role names. However, real life models would usually register custom roles.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
