<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt WebEngine Platform Notes</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Contains information about issues that are specific to the Qt WebEngine module.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="building-qt-webengine-from-source">
<db:title>Building Qt WebEngine from Source</db:title>
<db:para>Static builds are not supported.</db:para>
<db:para>The requirements for building Qt modules from source are listed separately for each supported platform:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="windows-building.xml">Qt for Windows - Building from Source</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="linux-requirements.xml">Qt for X11 Requirements</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="macos-building.xml">Qt for macOS - Building from Source</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In addition, the following tools are required for building the <db:link xlink:href="qtwebengine-index.xml">Qt WebEngine</db:link> module:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-platform-notes.xml#all-platforms">All Platforms</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-platform-notes.xml#windows">Windows</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-platform-notes.xml#linux">Linux</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-platform-notes.xml#macos">macOS</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="all-platforms">
<db:title>All Platforms</db:title>
<db:para>On all platforms, the following tools are required at build time:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>C++20 compiler support</db:para>
</db:listitem>
<db:listitem>
<db:para>CMake 3.19 or newer</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://www.python.org/">Python</db:link> 3 with html5lib library</db:para>
</db:listitem>
<db:listitem>
<db:para>Bison, Flex</db:para>
</db:listitem>
<db:listitem>
<db:para>GPerf</db:para>
</db:listitem>
<db:listitem>
<db:para>Node.js version 14 or later</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="windows">
<db:title>Windows</db:title>
<db:para>On Windows, the following additional tools are required:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Visual Studio 2019 or later, or clang-cl version 10 or later</db:para>
</db:listitem>
<db:listitem>
<db:para>Active Template Library (ATL), usually included in the Visual Studio installation</db:para>
</db:listitem>
<db:listitem>
<db:para>Windows 11 SDK version 10.0.22621.0 or later</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>It is not recommended to use tools from <db:code>msys2</db:code> or <db:code>cygwin</db:code> to build Qt WebEngine as it may result in build errors.</db:para>
</db:note>
</db:section>
<db:section xml:id="linux">
<db:title>Linux</db:title>
<db:para>On Linux, Clang or GCC version 9 or later is required.</db:para>
<db:para>Qt WebEngine requires <db:code>pkg-config</db:code> to detect most of its dependencies. The following <db:code>pkg-config</db:code> files are required:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>dbus-1</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>fontconfig</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If Qt was configured for <db:code>xcb</db:code>, the following <db:code>pkg-config</db:code> files are also required:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>libdrm</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>xcomposite</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>xcursor</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>xi</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>xrandr</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>xscrnsaver</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>xtst</db:code></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="macos">
<db:title>macOS</db:title>
<db:para>On macOS, the following are required:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>macOS 10.14 or later</db:para>
</db:listitem>
<db:listitem>
<db:para>Xcode 12.0 or later</db:para>
</db:listitem>
<db:listitem>
<db:para>macOS 11 SDK or later</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Qt WebEngine cannot be built for the 32-bit mode of macOS (using the <db:code>macx-clang-32</db:code> <db:code>mkspec</db:code>).</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="using-earlier-qt-versions-to-build-qt-webengine">
<db:title>Using Earlier Qt Versions to Build Qt WebEngine</db:title>
<db:para>Building Qt WebEngine with earlier Qt versions (down to the last LTS version) is supported. It means that Qt WebEngine 6.4 can be built with Qt 6.2.x, Qt 6.3.x, and Qt 6.4.</db:para>
<db:para>To use an earlier Qt version to build Qt Webengine:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Download the qtwebengine sources.</db:para>
</db:listitem>
<db:listitem>
<db:para>From the earlier Qt version, run <db:code>qmake &amp;&amp; make (&amp;&amp; make install)</db:code>.</db:para>
</db:listitem>
</db:orderedlist>
</db:section>
<db:section xml:id="mac-app-store-compatibility">
<db:title>Mac App Store Compatibility</db:title>
<db:para>Applications using Qt WebEngine are not compatible with the Mac App Store, because:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The Chromium part of the code uses several private API methods, which are prohibited by the App Store.</db:para>
</db:listitem>
<db:listitem>
<db:para>Applications submitted to the App Store must be code-signed with the App Sandbox feature enabled. The App Sandbox feature interferes with Chromium's own sandbox initialization, which results in Chromium not being properly initialized. This also ties in with the private API usage. Furthermore, standalone Chromium itself is not officially tested with the App Sandbox enabled, and even if work is done to bypass the App Store's restrictions, that would not guarantee correct behavior of the library.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="macos-airplay-support-on-macbooks-with-dual-gpus">
<db:title>macOS Airplay Support on MacBooks with Dual GPUs</db:title>
<db:para>To make Qt WebEngine work correctly when streaming to an AppleTV from a MacBook that supports GPU switching, it is important to add the <db:code>NSSupportsAutomaticGraphicsSwitching</db:code> option to the application Info.plist file, with the value set to <db:code>YES</db:code>. Otherwise rendering issues might occur when creating new web engine view instances after Airplay is switched on or off.</db:para>
</db:section>
<db:section xml:id="default-qsurfaceformat-opengl-profile-support">
<db:title>Default QSurfaceFormat OpenGL Profile Support</db:title>
<db:para>If a new default <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> with a modified OpenGL profile has to be set, it should be set before the application instance is declared, to make sure that all created OpenGL contexts use the same OpenGL profile.</db:para>
<db:para>On macOS, if the default <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> is set after the application instance, the application will exit with <db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>(), and print a message that the default <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> should be set before the application instance.</db:para>
</db:section>
<db:section xml:id="sandboxing-support">
<db:title>Sandboxing Support</db:title>
<db:para>Qt WebEngine provides out-of-the-box sandboxing support for Chromium render processes.</db:para>
<db:para>On Linux, note the following restrictions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The kernel has to support the anonymous namespaces feature (kernel version 3.8 or later). However, on Debian, Ubuntu, and other Debian-derived distributions, this feature is off by default. It can be turned on by setting <db:code>/proc/sys/kernel/unprivileged_userns_clone</db:code> to 1.</db:para>
</db:listitem>
<db:listitem>
<db:para>The kernel has to support the <db:code>seccomp-bpf</db:code> feature (kernel version 3.5 or later).</db:para>
</db:listitem>
<db:listitem>
<db:para>Setuid sandboxes are not supported and are thus disabled.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To explicitly disable sandboxing, use one of the following options:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Set the <db:code>QTWEBENGINE_DISABLE_SANDBOX</db:code> environment variable to 1.</db:para>
</db:listitem>
<db:listitem>
<db:para>Pass the <db:code>--no-sandbox</db:code> command line argument to the user application executable.</db:para>
</db:listitem>
<db:listitem>
<db:para>Set <db:code>QTWEBENGINE_CHROMIUM_FLAGS</db:code> to <db:code>--no-sandbox</db:code>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For more information, see <db:link xlink:href="qtwebengine-debugging.xml#using-command-line-arguments">Using Command-Line Arguments</db:link>.</db:para>
</db:section>
<db:section xml:id="memory-requirements-in-docker-environment">
<db:title>Memory Requirements in Docker Environment</db:title>
<db:para>When running Qt Web Engine examples in a Docker container and browsing content-heavy sites, BUS errors (SIGBUS) might be reported. Typically, this is caused by Docker running a container with a too small memory space (such as 64MB). To fix this problem, increase the memory space size.</db:para>
</db:section>
<db:section xml:id="accessibility-and-performance">
<db:title>Accessibility and Performance</db:title>
<db:para>Qt WebEngine enables accessibility support for web pages when the following conditions are met:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt Core is configured and built with accessibility support enabled.</db:para>
</db:listitem>
<db:listitem>
<db:para>The QPA plugin is notified by the operating system that accessibility should be activated. This happens for example when using a screen reader application on Windows or VoiceOver on macOS.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>On some old Linux configurations, accessibility can cause a significant slowdown on large HTML pages.</db:para>
<db:para>Because of that, Qt WebEngine accessibility support can be disabled on Linux, by setting the <db:code>QTWEBENGINE_ENABLE_LINUX_ACCESSIBILITY</db:code> environment variable to 0.</db:para>
</db:section>
<db:section xml:id="popups-in-fullscreen-applications-on-windows">
<db:title>Popups in Fullscreen Applications on Windows</db:title>
<db:para>Because of a limitation in the Windows compositor, applications that show a fullscreen web engine view will not properly display popups or other top-level windows. The reason and workaround is described in <db:link xlink:href="windows-issues.xml#fullscreen-opengl-based-windows">Fullscreen OpenGL Based Windows</db:link>.</db:para>
<db:anchor xml:id="windows-manifest"/>
</db:section>
<db:section xml:id="windows-application-manifest">
<db:title>Windows Application Manifest</db:title>
<db:para>A manifest is an XML file that is read when the program starts and informs Windows how to run the program. Some Qt WebEngine features may require adding a manifest file for the user application to work correctly on Windows.</db:para>
<db:para>The following snippets show the manifest file's structure and how to embed it into the program.</db:para>
<db:note>
<db:para>These code snippets are taken from the <db:link xlink:href="qtwebengine-webenginequick-quicknanobrowser-example.xml">WebEngine Quick Nano Browser</db:link> example.</db:para>
</db:note>
<db:para>The manifest file defines which Windows versions the application supports. <db:link xlink:href="qwebengineprofile.xml#httpUserAgent">httpUserAgent</db:link> needs this information to report the correct Windows version.</db:para>
<db:programlisting language="cpp">&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;
&amp;lt;assembly xmlns=&quot;urn:schemas-microsoft-com:asm.v1&quot; manifestVersion=&quot;1.0&quot;&amp;gt;
&amp;lt;compatibility xmlns=&quot;urn:schemas-microsoft-com:compatibility.v1&quot;&amp;gt;
    &amp;lt;application&amp;gt;
    &amp;lt;!--The ID below indicates application support for Windows Vista --&amp;gt;
    &amp;lt;supportedOS Id=&quot;{e2011457-1546-43c5-a5fe-008deee3d3f0}&quot;/&amp;gt;
    &amp;lt;!--The ID below indicates application support for Windows 7 --&amp;gt;
    &amp;lt;supportedOS Id=&quot;{35138b9a-5d96-4fbd-8e2d-a2440225f93a}&quot;/&amp;gt;
    &amp;lt;!--The ID below indicates application support for Windows 8 --&amp;gt;
    &amp;lt;supportedOS Id=&quot;{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}&quot;/&amp;gt;
    &amp;lt;!--The ID below indicates application support for Windows 8.1 --&amp;gt;
    &amp;lt;supportedOS Id=&quot;{1f676c76-80e1-4239-95bb-83d0f6d0da78}&quot;/&amp;gt;
    &amp;lt;!--The ID below indicates application support for Windows 10/11 --&amp;gt;
    &amp;lt;supportedOS Id=&quot;{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}&quot;/&amp;gt;
    &amp;lt;/application&amp;gt;
&amp;lt;/compatibility&amp;gt;
&amp;lt;/assembly&amp;gt;
</db:programlisting>
<db:para>To embed the file into the executable, add it to the sources:</db:para>
<db:programlisting language="cpp">    ...
qt_add_executable(quicknanobrowser
    main.cpp
    utils.h
)

if(WIN32)
    set_property(
        TARGET quicknanobrowser
        APPEND PROPERTY
            SOURCES quicknanobrowser.exe.manifest)
endif()
    ...
</db:programlisting>
<db:para>For more information, see the <db:link xlink:href="https://learn.microsoft.com/en-us/windows/win32/sbscs/application-manifests">Application manifest documentation page</db:link>.</db:para>
</db:section>
</db:article>
