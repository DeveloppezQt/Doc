<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QtVersionChecks&gt;</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Core Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QT_VERSION">
<db:title>QT_VERSION</db:title>
<db:para>This macro expands to a numeric value of the same form as <db:link xlink:href="qtversionchecks-qtcore-proxy.xml#QT_VERSION_CHECK">QT_VERSION_CHECK</db:link>() constructs, that specifies the version of Qt with which code using it is compiled. For example, if you compile your application with Qt 6.1.2, the QT_VERSION macro will expand to 0x060102, the same as QT_VERSION_CHECK(6, 1, 2). Note that this need not agree with the version the application will find itself using at <db:emphasis>runtime</db:emphasis>.</db:para>
<db:para>You can use QT_VERSION to select the latest Qt features where available while falling back to older implementations otherwise. Using <db:link xlink:href="qtversionchecks-qtcore-proxy.xml#QT_VERSION_CHECK">QT_VERSION_CHECK</db:link>() for the value to compare with is recommended.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">#if QT_VERSION &gt;= QT_VERSION_CHECK(4, 1, 0)
    QIcon icon = style()-&gt;standardIcon(QStyle::SP_TrashIcon);
#else
    QPixmap pixmap = style()-&gt;standardPixmap(QStyle::SP_TrashIcon);
    QIcon icon(pixmap);
#endif
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtversion-qtcore-proxy.xml#QT_VERSION_STR">QT_VERSION_STR</db:link></db:member>
<db:member><db:link xlink:href="qtversionchecks-qtcore-proxy.xml#QT_VERSION_CHECK">QT_VERSION_CHECK</db:link>()</db:member>
<db:member><db:link xlink:href="qtversion-qtcore-proxy.xml#qVersion">qVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QT_VERSION_CHECK">
<db:title>QT_VERSION_CHECK(<db:emphasis>major</db:emphasis>, <db:emphasis>minor</db:emphasis>, <db:emphasis>patch</db:emphasis>)</db:title>
<db:para>Turns the <db:code role="parameter">major</db:code>, <db:code role="parameter">minor</db:code> and <db:code role="parameter">patch</db:code> numbers of a version into an integer that encodes all three. When expressed in hexadecimal, this integer is of form 0xMMNNPP wherein 0xMM == <db:code role="parameter">major</db:code>, 0xNN == <db:code role="parameter">minor</db:code>, and 0xPP == <db:code role="parameter">patch</db:code>. This can be compared with another similarly processed version ID.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">#include &lt;QtGlobal&gt;

#if QT_VERSION &gt;= QT_VERSION_CHECK(5, 0, 0)
#include &lt;QtWidgets&gt;
#else
#include &lt;QtGui&gt;
#endif
</db:programlisting>
<db:note>
<db:para>the parameters are read as integers in the normal way, so should normally be written in decimal (so a 0x prefix must be used if writing them in hexadecimal). Thus QT_VERSION_CHECK(5, 15, 0) is equal to 0x050f00, which could equally be written QT_VERSION_CHECK(5, 0xf, 0).</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtversionchecks-qtcore-proxy.xml#QT_VERSION">QT_VERSION</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
