<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFontDialog Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfontdialog.xml">QFontDialog</db:link> class provides a dialog widget for selecting a font.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFontDialog</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdialog.xml" xlink:role="class">QDialog</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFontDialog is part of <db:simplelist><db:member><db:link xlink:href="standard-dialogs.xml">Standard Dialogs</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A font dialog is created through one of the static <db:link xlink:href="qfontdialog.xml#getFont">getFont</db:link>() functions.</db:para>
<db:para>Examples:</db:para>
<db:programlisting language="cpp">bool ok;
QFont font = QFontDialog::getFont(
                &amp;amp;ok, QFont(&quot;Helvetica [Cronyx]&quot;, 10), this);
if (ok) {
    // the user clicked OK and font is set to the font the user selected
} else {
    // the user canceled the dialog; font is set to the initial
    // value, in this case Helvetica [Cronyx], 10
}
</db:programlisting>
<db:para>The dialog can also be used to set a widget's font directly:</db:para>
<db:programlisting language="cpp">myWidget.setFont(QFontDialog::getFont(0, myWidget.font()));
</db:programlisting>
<db:para>If the user clicks OK the font they chose will be used for myWidget, and if they click Cancel the original font is used.</db:para>
<db:mediaobject>
<db:alt>A font dialog in the Fusion widget style.</db:alt>
<db:imageobject>
<db:imagedata fileref="images/fusion-fontdialog.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml">QFont</db:link></db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
<db:member><db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link></db:member>
<db:member><db:link xlink:href="qcolordialog.xml">QColorDialog</db:link></db:member>
<db:member><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-standarddialogs-example.xml">Standard Dialogs Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FontDialogOption-enum">
<db:title>enum QFontDialog::FontDialogOption</db:title>
<db:bridgehead renderas="sect2">flags QFontDialog::FontDialogOptions</db:bridgehead>
<db:enumsynopsis>
<db:enumname>FontDialogOption</db:enumname>
<db:enumitem>
<db:enumidentifier>NoButtons</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DontUseNativeDialog</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ScalableFonts</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NonScalableFonts</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MonospacedFonts</db:enumidentifier>
<db:enumvalue>0x00000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ProportionalFonts</db:enumidentifier>
<db:enumvalue>0x00000020</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QFontDialog::FontDialogOptions</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum specifies various options that affect the look and feel of a font dialog.</db:para>
<db:para>For instance, it allows to specify which type of font should be displayed. If none are specified all fonts available will be listed.</db:para>
<db:para>Note that the font filtering options might not be supported on some platforms (e.g. Mac). They are always supported by the non native dialog (used on Windows or Linux).</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml">QFontDialog</db:link></db:emphasis>::NoButtons</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Don't display <db:guilabel>OK</db:guilabel> and <db:guilabel>Cancel</db:guilabel> buttons. (Useful for &quot;live dialogs&quot;.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml">QFontDialog</db:link></db:emphasis>::DontUseNativeDialog</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Use Qt's standard font dialog on the Mac instead of Apple's native font panel.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml">QFontDialog</db:link></db:emphasis>::ScalableFonts</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>Show scalable fonts</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml">QFontDialog</db:link></db:emphasis>::NonScalableFonts</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>Show non scalable fonts</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml">QFontDialog</db:link></db:emphasis>::MonospacedFonts</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>Show monospaced fonts</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml">QFontDialog</db:link></db:emphasis>::ProportionalFonts</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>Show proportional fonts</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>FontDialogOptions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;FontDialogOption&gt;. </db:code>It stores an OR combination of <db:code>FontDialogOption</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdialog.xml#options">options</db:link></db:member>
<db:member><db:link xlink:href="qfontdialog.xml#setOption">setOption</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdialog.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="currentFont-prop">
<db:title>currentFont : QFont</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QFont</db:type>
<db:varname>currentFont</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentFont</db:synopsisinfo>
<db:synopsisinfo role="setter">setCurrentFont</db:synopsisinfo>
<db:synopsisinfo role="notifier">currentFontChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current font of the dialog.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml#currentFont">currentFont</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml#setCurrentFont">setCurrentFont</db:link></db:emphasis>(const <db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> &amp;<db:emphasis>font</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml#currentFontChanged">currentFontChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qfont.xml">QFont</db:link></db:type> &amp;<db:emphasis>font</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="options-prop">
<db:title>options : FontDialogOptions</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>FontDialogOptions</db:type>
<db:varname>options</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">options</db:synopsisinfo>
<db:synopsisinfo role="setter">setOptions</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the various options that affect the look and feel of the dialog</db:para>
<db:para>By default, all options are disabled.</db:para>
<db:para>Options should be set before showing the dialog. Setting them while the dialog is visible is not guaranteed to have an immediate effect on the dialog (depending on the option and on the platform).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qfontdialog.xml#FontDialogOption-enum">QFontDialog::FontDialogOptions</db:link></db:type> <db:emphasis role="bold">options</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOptions</db:emphasis>(<db:type><db:link xlink:href="qfontdialog.xml#FontDialogOption-enum">QFontDialog::FontDialogOptions</db:link></db:type> <db:emphasis>options</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdialog.xml#setOption">setOption</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdialog.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFontDialog">
<db:title>[explicit] QFontDialog::QFontDialog(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QFontDialog</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QFontDialog(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a standard font dialog.</db:para>
<db:para>Use <db:link xlink:href="qfontdialog.xml#setCurrentFont">setCurrentFont</db:link>() to set the initial font attributes.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> parameter is passed to the <db:link xlink:href="qdialog.xml">QDialog</db:link> constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdialog.xml#getFont">getFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFontDialog-1">
<db:title>[explicit] QFontDialog::QFontDialog(const QFont &amp;<db:emphasis>initial</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QFontDialog</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>initial</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFontDialog(const QFont &amp;initial, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a standard font dialog with the given <db:code role="parameter">parent</db:code> and specified <db:code role="parameter">initial</db:code> font.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QFontDialog::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>changeEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changeEvent(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="currentFont">
<db:title>QFont QFontDialog::currentFont() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont</db:type>
<db:methodname>currentFont</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">currentFont</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont currentFont() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current font.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qfontdialog.xml#currentFont-prop">currentFont</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdialog.xml#setCurrentFont">setCurrentFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdialog.xml#selectedFont">selectedFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentFontChanged">
<db:title>void QFontDialog::currentFontChanged(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>currentFontChanged</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">currentFont</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentFontChanged(const QFont &amp;font)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the current font is changed. The new font is specified in <db:code role="parameter">font</db:code>.</db:para>
<db:para>The signal is emitted while a user is selecting a font. Ultimately, the chosen font may differ from the font currently selected.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qfontdialog.xml#currentFont-prop">currentFont</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdialog.xml#currentFont">currentFont</db:link></db:member>
<db:member><db:link xlink:href="qfontdialog.xml#fontSelected">fontSelected</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdialog.xml#selectedFont">selectedFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="done">
<db:title>[override virtual protected] void QFontDialog::done(int <db:emphasis>result</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>done</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>result</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void done(int result) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#done" role="function">QDialog::done(int r)</db:link>.</db:para>
<db:para>Closes the dialog and sets its result code to <db:code role="parameter">result</db:code>. If this dialog is shown with <db:link xlink:href="qdialog.xml#exec">exec</db:link>(), done() causes the local event loop to finish, and <db:link xlink:href="qdialog.xml#exec">exec</db:link>() to return <db:code role="parameter">result</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml#done">QDialog::done</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontSelected">
<db:title>void QFontDialog::fontSelected(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fontSelected</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fontSelected(const QFont &amp;font)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a font has been selected. The selected font is specified in <db:code role="parameter">font</db:code>.</db:para>
<db:para>The signal is only emitted when a user has chosen the final font to be used. It is not emitted while the user is changing the current font in the font dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdialog.xml#selectedFont">selectedFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdialog.xml#currentFontChanged">currentFontChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdialog.xml#currentFont">currentFont</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getFont">
<db:title>[static] QFont QFontDialog::getFont(bool *<db:emphasis>ok</db:emphasis>, const QFont &amp;<db:emphasis>initial</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr, const QString &amp;<db:emphasis>title</db:emphasis> = QString(), QFontDialog::FontDialogOptions <db:emphasis>options</db:emphasis> = FontDialogOptions())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QFont</db:type>
<db:methodname>getFont</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>initial</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>title</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QFontDialog::FontDialogOptions</db:type>
<db:parameter>options</db:parameter>
<db:initializer>FontDialogOptions()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont getFont(bool *ok, const QFont &amp;initial, QWidget *parent, const QString &amp;title, QFontDialog::FontDialogOptions options)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Executes a modal font dialog and returns a font.</db:para>
<db:para>If the user clicks <db:guilabel>OK</db:guilabel>, the selected font is returned. If the user clicks <db:guilabel>Cancel</db:guilabel>, the <db:code role="parameter">initial</db:code> font is returned.</db:para>
<db:para>The dialog is constructed with the given <db:code role="parameter">parent</db:code> and the options specified in <db:code role="parameter">options</db:code>. <db:code role="parameter">title</db:code> is shown as the window title of the dialog and <db:code role="parameter">initial</db:code> is the initially selected font. If the <db:code role="parameter">ok</db:code> parameter is not-null, the value it refers to is set to true if the user clicks <db:guilabel>OK</db:guilabel>, and set to false if the user clicks <db:guilabel>Cancel</db:guilabel>.</db:para>
<db:para>Examples:</db:para>
<db:programlisting language="cpp">bool ok;
QFont font = QFontDialog::getFont(&amp;amp;ok, QFont(&quot;Times&quot;, 12), this);
if (ok) {
    // font is set to the font the user selected
} else {
    // the user canceled the dialog; font is set to the initial
    // value, in this case Times, 12.
}
</db:programlisting>
<db:para>The dialog can also be used to set a widget's font directly:</db:para>
<db:programlisting language="cpp">myWidget.setFont(QFontDialog::getFont(0, myWidget.font()));
</db:programlisting>
<db:para>In this example, if the user clicks OK the font they chose will be used, and if they click Cancel the original font is used.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qfontdialog.xml">QFontDialog</db:link> constructors.</db:para>
</db:warning>
</db:section>
<db:section xml:id="getFont-1">
<db:title>[static] QFont QFontDialog::getFont(bool *<db:emphasis>ok</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QFont</db:type>
<db:methodname>getFont</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont getFont(bool *ok, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Executes a modal font dialog and returns a font.</db:para>
<db:para>If the user clicks <db:guilabel>OK</db:guilabel>, the selected font is returned. If the user clicks <db:guilabel>Cancel</db:guilabel>, the Qt default font is returned.</db:para>
<db:para>The dialog is constructed with the given <db:code role="parameter">parent</db:code>. If the <db:code role="parameter">ok</db:code> parameter is not-null, the value it refers to is set to true if the user clicks <db:guilabel>OK</db:guilabel>, and false if the user clicks <db:guilabel>Cancel</db:guilabel>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">bool ok;
QFont font = QFontDialog::getFont(&amp;amp;ok, this);
if (ok) {
    // font is set to the font the user selected
} else {
    // the user canceled the dialog; font is set to the default
    // application font, QApplication::font()
}
</db:programlisting>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qfontdialog.xml">QFontDialog</db:link> constructors.</db:para>
</db:warning>
</db:section>
<db:section xml:id="open">
<db:title>void QFontDialog::open(QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>open</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>member</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void open(QObject *receiver, const char *member)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens the dialog and connects its <db:link xlink:href="qfontdialog.xml#fontSelected">fontSelected</db:link>() signal to the slot specified by <db:code role="parameter">receiver</db:code> and <db:code role="parameter">member</db:code>.</db:para>
<db:para>The signal will be disconnected from the slot when the dialog is closed.</db:para>
</db:section>
<db:section xml:id="selectedFont">
<db:title>QFont QFontDialog::selectedFont() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont</db:type>
<db:methodname>selectedFont</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont selectedFont() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the font that the user selected by clicking the <db:guilabel>OK</db:guilabel> or equivalent button.</db:para>
<db:note>
<db:para>This font is not always the same as the font held by the <db:link xlink:href="qfontdialog.xml#currentFont">currentFont</db:link> property since the user can choose different fonts before finally selecting the one to use.</db:para>
</db:note>
</db:section>
<db:section xml:id="setCurrentFont">
<db:title>void QFontDialog::setCurrentFont(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCurrentFont</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">currentFont</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCurrentFont(const QFont &amp;font)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the font highlighted in the <db:link xlink:href="qfontdialog.xml">QFontDialog</db:link> to the given <db:code role="parameter">font</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qfontdialog.xml#currentFont-prop">currentFont</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdialog.xml#currentFont">currentFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdialog.xml#selectedFont">selectedFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOption">
<db:title>void QFontDialog::setOption(QFontDialog::FontDialogOption <db:emphasis>option</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOption</db:methodname>
<db:methodparam>
<db:type>QFontDialog::FontDialogOption</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOption(QFontDialog::FontDialogOption option, bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the given <db:code role="parameter">option</db:code> to be enabled if <db:code role="parameter">on</db:code> is true; otherwise, clears the given <db:code role="parameter">option</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdialog.xml#options">options</db:link></db:member>
<db:member><db:link xlink:href="qfontdialog.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>[override virtual] void QFontDialog::setVisible(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setVisible</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>visible</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVisible(bool visible) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#setVisible" role="function">QDialog::setVisible(bool visible)</db:link>.</db:para>
</db:section>
<db:section xml:id="testOption">
<db:title>bool QFontDialog::testOption(QFontDialog::FontDialogOption <db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>testOption</db:methodname>
<db:methodparam>
<db:type>QFontDialog::FontDialogOption</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool testOption(QFontDialog::FontDialogOption option) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the given <db:code role="parameter">option</db:code> is enabled; otherwise, returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdialog.xml#options">options</db:link></db:member>
<db:member><db:link xlink:href="qfontdialog.xml#setOption">setOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
