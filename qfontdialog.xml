<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QFontDialog Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfontdialog.xml">QFontDialog</db:link> class provides a dialog widget for selecting a font.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFontDialog</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdialog.xml" xlink:role="class">QDialog</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFontDialog is part of <db:simplelist><db:member><db:link xlink:href="standard-dialogs.xml">Standard Dialogs</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A font dialog is created through one of the static <db:link xlink:href="qfontdialog.xml#getFont">getFont</db:link>() functions.</db:para>
<db:para>Examples:</db:para>
<db:programlisting language="cpp">bool ok;
QFont font = QFontDialog::getFont(
                &amp;ok, QFont(&quot;Helvetica [Cronyx]&quot;, 10), this);
if (ok) {
    // the user clicked OK and font is set to the font the user selected
} else {
    // the user canceled the dialog; font is set to the initial
    // value, in this case Helvetica [Cronyx], 10
}
</db:programlisting>
<db:para>The dialog can also be used to set a widget's font directly:</db:para>
<db:programlisting language="cpp">myWidget.setFont(QFontDialog::getFont(0, myWidget.font()));
</db:programlisting>
<db:para>If the user clicks OK the font they chose will be used for myWidget, and if they click Cancel the original font is used.</db:para>
<db:mediaobject>
<db:alt>A font dialog in the Fusion widget style.</db:alt>
<db:imageobject>
<db:imagedata fileref="images/fusion-fontdialog.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml">QFont</db:link></db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
<db:member><db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link></db:member>
<db:member><db:link xlink:href="qcolordialog.xml">QColorDialog</db:link></db:member>
<db:member><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-standarddialogs-example.xml">Standard Dialogs Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FontDialogOption-enum">
<db:title>[since 4.5] enum QFontDialog::FontDialogOption</db:title>
<db:bridgehead renderas="sect2">flags QFontDialog::FontDialogOptions</db:bridgehead>
<db:para>This enum specifies various options that affect the look and feel of a font dialog.</db:para>
<db:para>For instance, it allows to specify which type of font should be displayed. If none are specified all fonts available will be listed.</db:para>
<db:para>Note that the font filtering options might not be supported on some platforms (e.g. Mac). They are always supported by the non native dialog (used on Windows or Linux).</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml">QFontDialog</db:link></db:emphasis>::NoButtons</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Don't display <db:guilabel>OK</db:guilabel> and <db:guilabel>Cancel</db:guilabel> buttons. (Useful for &quot;live dialogs&quot;.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml">QFontDialog</db:link></db:emphasis>::DontUseNativeDialog</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Use Qt's standard font dialog on the Mac instead of Apple's native font panel. (Currently, the native dialog is never used, but this is likely to change in future Qt releases.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml">QFontDialog</db:link></db:emphasis>::ScalableFonts</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>Show scalable fonts</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml">QFontDialog</db:link></db:emphasis>::NonScalableFonts</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>Show non scalable fonts</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml">QFontDialog</db:link></db:emphasis>::MonospacedFonts</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>Show monospaced fonts</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdialog.xml">QFontDialog</db:link></db:emphasis>::ProportionalFonts</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>Show proportional fonts</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.5.</db:para>
<db:para>The <db:code>FontDialogOptions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;FontDialogOption&gt;. </db:code>It stores an OR combination of <db:code>FontDialogOption</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qauthenticator.xml#using-qt-test-remotely-on-windows-ce-options-13">options</db:link></db:member>
<db:member><db:link xlink:href="qfontdialog.xml#setOption">setOption</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdialog.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFontDialog">
<db:title>[explicit, since 4.5] QFontDialog::QFontDialog(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a standard font dialog.</db:para>
<db:para>Use <db:link xlink:href="qfontdialog.xml#setCurrentFont">setCurrentFont</db:link>() to set the initial font attributes.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> parameter is passed to the <db:link xlink:href="qdialog.xml">QDialog</db:link> constructor.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdialog.xml#getFont">getFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QFontDialog-1">
<db:title>[explicit, since 4.5] QFontDialog::QFontDialog(const QFont &amp;<db:emphasis>initial</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a standard font dialog with the given <db:code role="parameter">parent</db:code> and specified <db:code role="parameter">initial</db:code> color.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QFontDialog::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="currentFont">
<db:title>[since 4.5] QFont QFontDialog::currentFont() const</db:title>
<db:para>Returns the current font.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdialog.xml#setCurrentFont">setCurrentFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdialog.xml#selectedFont">selectedFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentFontChanged">
<db:title>[since 4.5] void QFontDialog::currentFontChanged(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:para>This signal is emitted when the current font is changed. The new font is specified in <db:code role="parameter">font</db:code>.</db:para>
<db:para>The signal is emitted while a user is selecting a font. Ultimately, the chosen font may differ from the font currently selected.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdialog.xml#currentFont">currentFont</db:link></db:member>
<db:member><db:link xlink:href="qfontdialog.xml#fontSelected">fontSelected</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdialog.xml#selectedFont">selectedFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="done">
<db:title>[override virtual protected] void QFontDialog::done(int <db:emphasis>result</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#done" role="function">QDialog::done(int r)</db:link>.</db:para>
<db:para>Closes the dialog and sets its result code to <db:code role="parameter">result</db:code>. If this dialog is shown with <db:link xlink:href="qdialog.xml#exec">exec</db:link>(), done() causes the local event loop to finish, and <db:link xlink:href="qdialog.xml#exec">exec</db:link>() to return <db:code role="parameter">result</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdialog.xml#done">QDialog::done</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontSelected">
<db:title>[since 4.5] void QFontDialog::fontSelected(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:para>This signal is emitted when a font has been selected. The selected font is specified in <db:code role="parameter">font</db:code>.</db:para>
<db:para>The signal is only emitted when a user has chosen the final font to be used. It is not emitted while the user is changing the current font in the font dialog.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdialog.xml#selectedFont">selectedFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdialog.xml#currentFontChanged">currentFontChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdialog.xml#currentFont">currentFont</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getFont">
<db:title>[static] QFont QFontDialog::getFont(bool *<db:emphasis>ok</db:emphasis>, const QFont &amp;<db:emphasis>initial</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = 0, const QString &amp;<db:emphasis>title</db:emphasis> = QString(), QFontDialog::FontDialogOptions <db:emphasis>options</db:emphasis> = 0)</db:title>
<db:para>Executes a modal font dialog and returns a font.</db:para>
<db:para>If the user clicks <db:guilabel>OK</db:guilabel>, the selected font is returned. If the user clicks <db:guilabel>Cancel</db:guilabel>, the <db:code role="parameter">initial</db:code> font is returned.</db:para>
<db:para>The dialog is constructed with the given <db:code role="parameter">parent</db:code> and the options specified in <db:code role="parameter">options</db:code>. <db:code role="parameter">title</db:code> is shown as the window title of the dialog and <db:code role="parameter">initial</db:code> is the initially selected font. If the <db:code role="parameter">ok</db:code> parameter is not-null, the value it refers to is set to true if the user clicks <db:guilabel>OK</db:guilabel>, and set to false if the user clicks <db:guilabel>Cancel</db:guilabel>.</db:para>
<db:para>Examples:</db:para>
<db:programlisting language="cpp">bool ok;
QFont font = QFontDialog::getFont(&amp;ok, QFont(&quot;Times&quot;, 12), this);
if (ok) {
    // font is set to the font the user selected
} else {
    // the user canceled the dialog; font is set to the initial
    // value, in this case Times, 12.
}
</db:programlisting>
<db:para>The dialog can also be used to set a widget's font directly:</db:para>
<db:programlisting language="cpp">myWidget.setFont(QFontDialog::getFont(0, myWidget.font()));
</db:programlisting>
<db:para>In this example, if the user clicks OK the font they chose will be used, and if they click Cancel the original font is used.</db:para>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qfontdialog.xml">QFontDialog</db:link> constructors.</db:para>
</db:warning>
</db:section>
<db:section xml:id="getFont-1">
<db:title>[static] QFont QFontDialog::getFont(bool *<db:emphasis>ok</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Executes a modal font dialog and returns a font.</db:para>
<db:para>If the user clicks <db:guilabel>OK</db:guilabel>, the selected font is returned. If the user clicks <db:guilabel>Cancel</db:guilabel>, the Qt default font is returned.</db:para>
<db:para>The dialog is constructed with the given <db:code role="parameter">parent</db:code>. If the <db:code role="parameter">ok</db:code> parameter is not-null, the value it refers to is set to true if the user clicks <db:guilabel>OK</db:guilabel>, and false if the user clicks <db:guilabel>Cancel</db:guilabel>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">bool ok;
QFont font = QFontDialog::getFont(&amp;ok, this);
if (ok) {
    // font is set to the font the user selected
} else {
    // the user canceled the dialog; font is set to the default
    // application font, QApplication::font()
}
</db:programlisting>
<db:warning>
<db:para>Do not delete <db:code role="parameter">parent</db:code> during the execution of the dialog. If you want to do this, you should create the dialog yourself using one of the <db:link xlink:href="qfontdialog.xml">QFontDialog</db:link> constructors.</db:para>
</db:warning>
</db:section>
<db:section xml:id="open">
<db:title>[since 4.5] void QFontDialog::open(QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Opens the dialog and connects its <db:link xlink:href="qfontdialog.xml#fontSelected">fontSelected</db:link>() signal to the slot specified by <db:code role="parameter">receiver</db:code> and <db:code role="parameter">member</db:code>.</db:para>
<db:para>The signal will be disconnected from the slot when the dialog is closed.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="selectedFont">
<db:title>QFont QFontDialog::selectedFont() const</db:title>
<db:para>Returns the font that the user selected by clicking the <db:guilabel>OK</db:guilabel> or equivalent button.</db:para>
<db:note>
<db:para>This font is not always the same as the font held by the <db:link xlink:href="qfontdialog.xml#currentFont">currentFont</db:link> property since the user can choose different fonts before finally selecting the one to use.</db:para>
</db:note>
</db:section>
<db:section xml:id="setCurrentFont">
<db:title>[since 4.5] void QFontDialog::setCurrentFont(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:para>Sets the font highlighted in the <db:link xlink:href="qfontdialog.xml">QFontDialog</db:link> to the given <db:code role="parameter">font</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdialog.xml#currentFont">currentFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdialog.xml#selectedFont">selectedFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOption">
<db:title>void QFontDialog::setOption(QFontDialog::FontDialogOption <db:emphasis>option</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:para>Sets the given <db:code role="parameter">option</db:code> to be enabled if <db:code role="parameter">on</db:code> is true; otherwise, clears the given <db:code role="parameter">option</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qauthenticator.xml#using-qt-test-remotely-on-windows-ce-options-13">options</db:link></db:member>
<db:member><db:link xlink:href="qfontdialog.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>[override virtual] void QFontDialog::setVisible(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#setVisible" role="function">QDialog::setVisible(bool visible)</db:link>.</db:para>
</db:section>
<db:section xml:id="testOption">
<db:title>bool QFontDialog::testOption(QFontDialog::FontDialogOption <db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the given <db:code role="parameter">option</db:code> is enabled; otherwise, returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qauthenticator.xml#using-qt-test-remotely-on-windows-ce-options-13">options</db:link></db:member>
<db:member><db:link xlink:href="qfontdialog.xml#setOption">setOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
