<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Connection QML Type</db:title>
<db:productname>QtOpcUa</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>An OPC UA module for Qt</db:titleabbrev>
<db:abstract>
<db:para>Connects to a server.</db:para>
<db:para>This type was introduced in QtOpcUa 5.12.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtOpcUa</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtOpcUa 5.12</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The main API uses backends to make connections. You have to set the backend before any connection attempt.</db:para>
<db:programlisting language="cpp">import QtOpcUa as QtOpcUa

QtOpcUa.Connection {
    backend: &quot;open62541&quot;
}

Component.onCompleted: {
    connection.connectToEndpoint(&quot;opc.tcp://127.0.0.1:43344&quot;);
}
</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="authenticationInformation-prop">
<db:title>authenticationInformation : AuthenticationInformation</db:title>
<db:fieldsynopsis>
<db:type>AuthenticationInformation</db:type>
<db:varname>authenticationInformation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Set the authentication information to this connection. The authentication information has to be set before calling <db:link xlink:href="qml-qtopcua-connection.xml#connectToEndpoint-method">connectToEndpoint</db:link>. If no authentication information is set, the anonymous mode will be used. It has no effect on the current connection. If the client is disconnected and then reconnected, the new credentials are used. Reading and writing this property before a <db:link xlink:href="qml-qtopcua-connection.xml#backend-prop">backend</db:link> is set, writes are ignored and reads return and invalid <db:link xlink:href="qml-qtopcua-authenticationinformation.xml">AuthenticationInformation</db:link>.</db:para>
</db:section>
<db:section xml:id="availableBackends-prop">
<db:title>[read-only] availableBackends : stringlist</db:title>
<db:fieldsynopsis>
<db:type>stringlist</db:type>
<db:varname>availableBackends</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the names of all available backends as a list. These are used to select a backend when connecting.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-connection.xml#backend-prop">Connection::backend</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="backend-prop">
<db:title>backend : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>backend</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Set the backend to use for a connection to the server. Has to be set before any connection attempt.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-connection.xml#availableBackends-prop">Connection::availableBackends</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connected-prop">
<db:title>[read-only] connected : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>connected</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Status of the connection. <db:code>true</db:code> when there is a connection, otherwise <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="connection-prop">
<db:title>[since 5.13] connection : QOpcUaClient</db:title>
<db:fieldsynopsis>
<db:type>QOpcUaClient</db:type>
<db:varname>connection</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is used only to inject a connection from C++. In case of complex setup of a connection you can use C++ to handle all the details. After the connection is established it can be handed to QML using this property. Ownership of the client is transferred to QML.</db:para>
<db:programlisting language="cpp">class MyClass : public QObject {
    Q_OBJECT
    Q_PROPERTY(QOpcUaClient* connection READ connection NOTIFY connectionChanged)

public:
    MyClass (QObject* parent = nullptr);
    QOpcUaClient *connection() const;

signals:
    void connectionChanged(QOpcUaClient *);
</db:programlisting>
<db:para>Emitting the signal <db:code>connectionChanged</db:code> when the client setup is completed, the QML code below will use the connection.</db:para>
<db:programlisting language="cpp">import QtOpcUa as QtOpcUa

MyClass {
    id: myclass
}

QtOpcUa.Connection {
    connection: myclass.connection
 }
</db:programlisting>
<db:para>This property was introduced in Qt 5.13.</db:para>
</db:section>
<db:section xml:id="currentEndpoint-prop">
<db:title>[since 5.13] currentEndpoint : QOpcUaEndpointDescription</db:title>
<db:fieldsynopsis>
<db:type>QOpcUaEndpointDescription</db:type>
<db:varname>currentEndpoint</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>An endpoint description of the server to which the connection is connected to. When the connection is not established, an empty endpoint description is returned.</db:para>
<db:para>This property was introduced in Qt 5.13.</db:para>
</db:section>
<db:section xml:id="defaultConnection-prop">
<db:title>defaultConnection : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>defaultConnection</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Makes this the default connection. Usually each node needs to be given a connection to use. If this property is set to <db:code>true</db:code>, this connection will be used in all cases where a node has no connection set. Already established connections are not affected. If <db:code>defaultConnection</db:code> is set to <db:code>true</db:code> on multiple connection the last one is used.</db:para>
<db:programlisting language="cpp">QtOpcUa.Connection {
    ...
    defaultConnection: true
    ...
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-node.xml">Node</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="namespaces-prop">
<db:title>[read-only] namespaces : stringlist</db:title>
<db:fieldsynopsis>
<db:type>stringlist</db:type>
<db:varname>namespaces</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>List of strings of all namespace URIs registered on the connected server.</db:para>
</db:section>
<db:section xml:id="supportedSecurityPolicies-prop">
<db:title>[since 5.13] supportedSecurityPolicies : stringlist</db:title>
<db:fieldsynopsis>
<db:type>stringlist</db:type>
<db:varname>supportedSecurityPolicies</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>A list of strings containing the supported security policies</db:para>
<db:para>This property is currently available as a Technology Preview, and therefore the API and functionality provided may be subject to change at any time without prior notice.</db:para>
<db:para>This property was introduced in Qt 5.13.</db:para>
</db:section>
<db:section xml:id="supportedUserTokenTypes-prop">
<db:title>[since 5.13] supportedUserTokenTypes : array[tokenTypes]</db:title>
<db:fieldsynopsis>
<db:type>array[tokenTypes]</db:type>
<db:varname>supportedUserTokenTypes</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>An array of user token policy types of all supported user token types.</db:para>
<db:para>This property is currently available as a Technology Preview, and therefore the API and functionality provided may be subject to change at any time without prior notice.</db:para>
<db:para>This property was introduced in Qt 5.13.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="nodeChanged-signal">
<db:title>nodeChanged()</db:title>
<db:para>Emitted when the underlying node has changed. This happens when the namespace or identifier of the <db:link xlink:href="qml-qtopcua-nodeid.xml">NodeId</db:link> changed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onNodeChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="readNodeAttributesFinished-signal">
<db:title>[since 5.13] readNodeAttributesFinished(<db:emphasis>readResults</db:emphasis>)</db:title>
<db:para>Emitted when the read request, started using <db:link xlink:href="qml-qtopcua-connection.xml#readNodeAttributes-method">readNodeAttributes</db:link>(), is finished. The <db:code role="parameter">readResults</db:code> parameter is an array of <db:link xlink:href="qml-qtopcua-readresult.xml">ReadResult</db:link> entries, containing the values requested from the server.</db:para>
<db:programlisting language="cpp">connection.onReadNodeAttributesFinished(results) {
    for (var i = 0; results.length; i++) {
        if (results[i].status.isGood) {
            console.log(results[i].value);
        } else {
            // handle error
        }
    }
}
</db:programlisting>
<db:note>
<db:para>The corresponding handler is <db:code>onReadNodeAttributesFinished</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-connection.xml#readNodeAttributes-method">readNodeAttributes</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtopcua-readresult.xml">ReadResult</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeNodeAttributesFinished-signal">
<db:title>[since 5.13] writeNodeAttributesFinished(<db:emphasis>writeResults</db:emphasis>)</db:title>
<db:para>Emitted when the write request started using <db:link xlink:href="qml-qtopcua-connection.xml#writeNodeAttributes-method">writeNodeAttributes</db:link>() is finished. The <db:code role="parameter">writeResults</db:code> parameter is an array of <db:link xlink:href="qml-qtopcua-writeresult.xml">WriteResult</db:link> entries, containing the values requested from the server.</db:para>
<db:programlisting language="cpp">for (var i = 0; i &amp;lt; writeResults.length; i++) {
    console.log(writeResults[i].nodeId);
    console.log(writeResults[i].namespaceName);
    console.log(writeResults[i].attribute);

    if (writeResults[i].status.isBad) {
        // value was not written
    }
}
</db:programlisting>
<db:note>
<db:para>The corresponding handler is <db:code>onWriteNodeAttributesFinished</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-connection.xml#writeNodeAttributes-method">writeNodeAttributes</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtopcua-writeresult.xml">WriteResult</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="connectToEndpoint-method">
<db:title>connectToEndpoint(<db:emphasis>endpointDescription</db:emphasis>)</db:title>
<db:para>Connects to the endpoint specified with <db:code role="parameter">endpointDescription</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-endpointdescription.xml">EndpointDescription</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disconnectFromEndpoint-method">
<db:title>disconnectFromEndpoint()</db:title>
<db:para>Disconnects an established connection.</db:para>
</db:section>
<db:section xml:id="readNodeAttributes-method">
<db:title>readNodeAttributes(<db:emphasis>valuesToBeRead</db:emphasis>)</db:title>
<db:para>This function is used to read multiple values from a server in one go. Returns <db:code>true</db:code> if the read request was dispatched successfully.</db:para>
<db:para>The <db:code role="parameter">valuesToBeRead</db:code> parameter must be a JavaScript array of <db:link xlink:href="qml-qtopcua-readitem.xml">ReadItem</db:link> entries.</db:para>
<db:programlisting language="cpp">// List of items to read
var readItemList = [];
// Item to be added to the list of items to be read
var readItem;

// Prepare an item to be read

// Create a new read item and fill properties
readItem = QtOpcUa.ReadItem.create();
readItem.ns = &quot;http://qt-project.org&quot;;
readItem.nodeId = &quot;s=Demo.Static.Scalar.Double&quot;;
readItem.attribute = QtOpcUa.Constants.NodeAttribute.DisplayName;

// Add the prepared item to the list of items to be read
readItemList.push(readItem);

// Add further items
[...]

if (!connection.readNodeAttributes(readItemList)) {
    // handle error
}
</db:programlisting>
<db:para>The result of the read request are provided by the signal <db:link xlink:href="qml-qtopcua-connection.xml#readNodeAttributesFinished-signal">readNodeAttributesFinished</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-connection.xml#readNodeAttributesFinished-signal">readNodeAttributesFinished</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtopcua-readitem.xml">ReadItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeNodeAttributes-method">
<db:title>writeNodeAttributes(<db:emphasis>valuesToBeWritten</db:emphasis>)</db:title>
<db:para>This function is used to write multiple values to a server in one go. Returns <db:code>true</db:code> if the write request was dispatched successfully.</db:para>
<db:para>The <db:code role="parameter">valuesToBeWritten</db:code> parameter must be a JavaScript array of <db:link xlink:href="qml-qtopcua-writeitem.xml">WriteItem</db:link> entries.</db:para>
<db:programlisting language="cpp">// List of items to write
var writeItemList = [];
// Item to be added to the list of items to be written
var writeItem;

// Prepare an item to be written

// Create a new write item and fill properties
writeItem = QtOpcUa.WriteItem.create();
writeItem.ns = &quot;http://qt-project.org&quot;;
writeItem.nodeId = &quot;s=Demo.Static.Scalar.Double&quot;;
writeItem.attribute = QtOpcUa.Constants.NodeAttribute.Value;
writeItem.value = 32.1;
writeItem.valueType = QtOpcUa.Constants.Double;

// Add the prepared item to the list of items to be written
writeItemList.push(writeItem);

// Add further items
[...]

if (!connection.writeNodeAttributes(writeItemList)) {
    // handle error
}
</db:programlisting>
<db:para>The result of the write request are provided by the signal <db:link xlink:href="qml-qtopcua-connection.xml#writeNodeAttributesFinished-signal">Connection::writeNodeAttributesFinished</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtopcua-connection.xml#writeNodeAttributesFinished-signal">Connection::writeNodeAttributesFinished</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtopcua-writeitem.xml">WriteItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
