<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D Render Pro Tips</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This sections tries to make you aware of various pitfalls inherent to 3D rendering and ways to prevent them.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>To render even the simplest shapes, Qt 3D needs to perform various operations through several stages. If anything goes wrong at any of these stages you may end up, in the best cases with something different than what you expected, in the worst cases with a black screen.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-protips.xml#technique-selection">Technique Selection</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-protips.xml#order-matters">Order Matters</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-protips.xml#blending">Blending</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-protips.xml#useful-tools">Useful Tools</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="technique-selection">
<db:title>Technique Selection</db:title>
<db:para>Qt 3D provides a technique selection mechanism allowing you to provide shaders for various rendering APIs and versions of these APIs.</db:para>
<db:para>In order to avoid unnecessary waste of your time, you should make sure that your technique's API filter data is correct for the platform you are targeting.</db:para>
</db:section>
<db:section xml:id="order-matters">
<db:title>Order Matters</db:title>
<db:para>The order of the draw calls performed by the renderer is not necessarily the same as the order of the entities in the scene.</db:para>
<db:para>The renderer tries to optimize calls that are sent to the graphics API. It orders draw calls based on the material/shader being used, the render states that are defined for a given material, their depth, the parameters shared in common between two materials, etc.</db:para>
<db:para>If your rendering depends on a specific draw order you should then have a few options:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Filtering with a <db:link xlink:href="qt3drender-qlayer.xml">Qt3DRender::QLayer</db:link> component and <db:link xlink:href="qt3drender-qlayerfilter.xml">Qt3DRender::QLayerFilter</db:link> in the FrameGraph</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt3d-render-renderpass.xml">RenderPass</db:link> or Technique filtering using <db:link xlink:href="qt3drender-qrenderpassfilter.xml">Qt3DRender::QRenderPassFilter</db:link> or <db:link xlink:href="qt3drender-qtechniquefilter.xml">Qt3DRender::QTechniqueFilter</db:link> in the FrameGraph</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="blending">
<db:title>Blending</db:title>
<db:para>Mastering blending with proper arguments and functions is an art in itself. Therefore obtaining the proper visual result is often hit and miss.</db:para>
<db:para><db:link xlink:href="http://www.andersriggelsen.dk/glblendfunc.php">Anders Riggelsen's online visualizer</db:link> may help you find out which arguments and functions work for you.</db:para>
<db:section xml:id="blending-with-scene3d">
<db:title>Blending with Scene3D</db:title>
<db:para>When rendering a Qt 3D scene through a Qt Quick scene with the <db:link xlink:href="qml-qtquick-scene3d-scene3d.xml">Scene3D</db:link> element you should be aware that you might have to adjust the blending arguments of your render state to obtain a sensible rendering. This is because of the way Qt 3D first renders a scene into an offscreen texture which is then blended in with the rest of the Qt Quick scene.</db:para>
<db:para>Sensible values are often <db:link xlink:href="qt3drender-qblendequationarguments.xml#Blending-enum">Qt3DRender::QBlendEquationArguments::Zero</db:link> for the source alpha and <db:link xlink:href="qt3drender-qblendequationarguments.xml#Blending-enum">Qt3DRender::QBlendEquationArguments::One</db:link> for the destination alpha.</db:para>
</db:section>
</db:section>
<db:section xml:id="useful-tools">
<db:title>Useful Tools</db:title>
<db:para>Given the rather limited of troubleshooting given by Qt 3D in its first versions it sometimes helps to have tools to capture OpenGL draw calls and get more clues about what's happening</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="https://github.com/apitrace/apitrace">apitrace</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://github.com/ValveSoftware/vogl">vogl</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>These tools allow you to gather traces of all the OpenGL calls being made by a Qt 3D application. Having a look at a generated trace file may help you verify that draw calls are being made, textures correctly uploaded, uniforms set with proper values, ...</db:para>
<db:para>There are plans for Qt 3D tooling in later releases.</db:para>
</db:section>
</db:article>
