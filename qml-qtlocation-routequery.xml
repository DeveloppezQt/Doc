<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>RouteQuery QML Type</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link> type is used to provide query parameters to a <db:link xlink:href="qml-qtlocation-routemodel.xml">RouteModel</db:link>.</db:para>
<db:para>This type was introduced in QtLocation 5.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtLocation 5.12</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtLocation 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>RouteQuery is part of <db:simplelist><db:member>qml-QtLocation5-routing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link> is used to pack all the parameters necessary to make a request to a routing service, which can then populate the contents of a <db:link xlink:href="qml-qtlocation-routemodel.xml">RouteModel</db:link>.</db:para>
<db:para>These parameters describe key details of the route, such as <db:link xlink:href="qml-qtlocation-routequery.xml#waypoints-prop">waypoints</db:link> to pass through, <db:link xlink:href="qml-qtlocation-routequery.xml#excludedAreas-prop">excludedAreas</db:link> to avoid, the <db:link xlink:href="qml-qtlocation-routequery.xml#travelModes-prop">travelModes</db:link> in use, as well as detailed preferences on how to optimize the route and what features to prefer or avoid along the path (such as toll roads, highways, etc).</db:para>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link> objects are used exclusively to fill out the value of a <db:link xlink:href="qml-qtlocation-routemodel.xml">RouteModel</db:link>'s <db:link xlink:href="qml-qtlocation-routemodel.xml#query-prop">query</db:link> property, which can then begin the retrieval process to populate the model.</db:para>
<db:para>Some plugins might allow or require specific parameters to operate. In order to specify these plugin-specific parameters, MapParameter elements can be nested inside a <db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link>.</db:para>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:para>The following snipped shows an incomplete example of creating a <db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link> object and setting it as the value of a <db:link xlink:href="qml-qtlocation-routemodel.xml">RouteModel</db:link>'s <db:link xlink:href="qml-qtlocation-routemodel.xml#query-prop">query</db:link> property.</db:para>
<db:programlisting language="cpp">RouteQuery {
    id: aQuery
}

RouteModel {
    query: aQuery
    autoUpdate: false
}
</db:programlisting>
<db:para>For a more complete example, see the documentation for the <db:link xlink:href="qml-qtlocation-routemodel.xml">RouteModel</db:link> type, and the Mapviewer example.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-routemodel.xml">RouteModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="excludedAreas-prop">
<db:title>excludedAreas : list&lt;georectangle&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;georectangle&gt;</db:type>
<db:varname>excludedAreas</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Areas that the route must not cross.</db:para>
<db:para>Excluded areas can be set as part of the <db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link> type declaration or dynamically with the functions provided.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#addExcludedArea-method">addExcludedArea</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#removeExcludedArea-method">removeExcludedArea</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#clearExcludedAreas-method">clearExcludedAreas</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extraParameters-prop">
<db:title>[read-only, since 5.11] extraParameters : VariantMap</db:title>
<db:fieldsynopsis>
<db:type>VariantMap</db:type>
<db:varname>extraParameters</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The route query extra parameters. This property is read only. If the query is defined by the user, these can be set by using MapParameters. If the route query comes from the engine via signals, the query is intended to be read-only.</db:para>
<db:para>This property was introduced in Qt 5.11.</db:para>
</db:section>
<db:section xml:id="featureTypes-prop">
<db:title>featureTypes : QList&lt;FeatureType&gt;</db:title>
<db:fieldsynopsis>
<db:type>QList&lt;FeatureType&gt;</db:type>
<db:varname>featureTypes</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>List of features that will be considered when planning the route. Features with a weight of NeutralFeatureWeight will not be returned.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link>.NoFeature - No features will be taken into account when planning the route</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link>.TollFeature - Consider tollways when planning the route</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link>.HighwayFeature - Consider highways when planning the route</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link>.PublicTransitFeature - Consider public transit when planning the route</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link>.FerryFeature - Consider ferries when planning the route</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link>.TunnelFeature - Consider tunnels when planning the route</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link>.DirtRoadFeature - Consider dirt roads when planning the route</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link>.ParksFeature - Consider parks when planning the route</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link>.MotorPoolLaneFeature - Consider motor pool lanes when planning the route</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link>.TrafficFeature - Consider traffic when planning the route</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#setFeatureWeight-method">setFeatureWeight</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#featureWeight-method">featureWeight</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maneuverDetail-prop">
<db:title>maneuverDetail : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>maneuverDetail</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The level of detail which will be used in the representation of routing maneuvers.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>RouteQuery.NoManeuvers</db:para>
</db:td>
<db:td>
<db:para>No maneuvers should be included with the route</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>RouteQuery.BasicManeuvers</db:para>
</db:td>
<db:td>
<db:para>Basic maneuvers will be included with the route</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default value is <db:code>RouteQuery.BasicManeuvers</db:code>.</db:para>
</db:section>
<db:section xml:id="numberAlternativeRoutes-prop">
<db:title>numberAlternativeRoutes : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>numberAlternativeRoutes</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The number of alternative routes requested when requesting routes. The default value is 0.</db:para>
</db:section>
<db:section xml:id="routeOptimizations-prop">
<db:title>routeOptimizations : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>routeOptimizations</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The route optimizations which should be considered during the planning of the route. Values can be combined with OR ('|') -operator.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>RouteQuery.ShortestRoute</db:para>
</db:td>
<db:td>
<db:para>Minimize the length of the journey</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>RouteQuery.FastestRoute</db:para>
</db:td>
<db:td>
<db:para>Minimize the traveling time for the journey</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>RouteQuery.MostEconomicRoute</db:para>
</db:td>
<db:td>
<db:para>Minimize the cost of the journey</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>RouteQuery.MostScenicRoute</db:para>
</db:td>
<db:td>
<db:para>Maximize the scenic potential of the journey</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default value is <db:code>RouteQuery.FastestRoute</db:code>.</db:para>
</db:section>
<db:section xml:id="segmentDetail-prop">
<db:title>segmentDetail : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>segmentDetail</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The level of detail which will be used in the representation of routing segments.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>RouteQuery.NoSegmentData</db:para>
</db:td>
<db:td>
<db:para>No segment data should be included with the route</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>RouteQuery.BasicSegmentData</db:para>
</db:td>
<db:td>
<db:para>Basic segment data will be included with the route</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default value is <db:code>RouteQuery.BasicSegmentData</db:code>.</db:para>
</db:section>
<db:section xml:id="travelModes-prop">
<db:title>travelModes : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>travelModes</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The travel modes which should be considered during the planning of the route. Values can be combined with OR ('|') -operator.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>RouteQuery.CarTravel</db:para>
</db:td>
<db:td>
<db:para>The route will be optimized for someone who is driving a car</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>RouteQuery.PedestrianTravel</db:para>
</db:td>
<db:td>
<db:para>The route will be optimized for someone who is walking</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>RouteQuery.BicycleTravel</db:para>
</db:td>
<db:td>
<db:para>The route will be optimized for someone who is riding a bicycle</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>RouteQuery.PublicTransit</db:para>
</db:td>
<db:td>
<db:para>Travel The route will be optimized for someone who is making use of public transit</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>RouteQuery.TruckTravel</db:para>
</db:td>
<db:td>
<db:para>The route will be optimized for someone who is driving a truck</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default value is <db:code>RouteQuery.CarTravel</db:code>.</db:para>
</db:section>
<db:section xml:id="waypoints-prop">
<db:title>waypoints : list&lt;coordinate&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;coordinate&gt;</db:type>
<db:varname>waypoints</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The coordinates of the waypoints for the desired route. The waypoints should be given in order from origin to destination. Two or more coordinates are needed.</db:para>
<db:para>Waypoints can be set as part of the <db:link xlink:href="qml-qtlocation-routequery.xml">RouteQuery</db:link> type declaration or dynamically with the functions provided.</db:para>
<db:para>When setting this property to a list of waypoints, each waypoint can be either a <db:link xlink:href="qml-coordinate.xml">coordinate</db:link> or a <db:link xlink:href="qml-qtlocation-waypoint.xml">Waypoint</db:link>, interchangeably. If a <db:link xlink:href="qml-coordinate.xml">coordinate</db:link> is passed, it will be internally converted to a <db:link xlink:href="qml-qtlocation-waypoint.xml">Waypoint</db:link>.</db:para>
<db:para>This property, however, always contains a list of coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#waypointObjects-method">waypointObjects</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#addWaypoint-method">addWaypoint</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#removeWaypoint-method">removeWaypoint</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#clearWaypoints-method">clearWaypoints</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addExcludedArea-method">
<db:title>void addExcludedArea(<db:emphasis>georectangle</db:emphasis>)</db:title>
<db:para>Adds the given area to excluded areas (areas that the route must not cross). Same area can only be added once.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#removeExcludedArea-method">removeExcludedArea</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#clearExcludedAreas-method">clearExcludedAreas</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addWaypoint-method">
<db:title>void addWaypoint(<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:para>Appends a coordinate to the list of waypoints. Same coordinate can be set multiple times. The <db:code role="parameter">coordinate</db:code> argument can be a <db:link xlink:href="qml-coordinate.xml">coordinate</db:link> or a <db:link xlink:href="qml-qtlocation-waypoint.xml">Waypoint</db:link>. If a <db:link xlink:href="qml-coordinate.xml">coordinate</db:link> is used, it will be internally converted to a <db:link xlink:href="qml-qtlocation-waypoint.xml">Waypoint</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#removeWaypoint-method">removeWaypoint</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#clearWaypoints-method">clearWaypoints</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearExcludedAreas-method">
<db:title>void clearExcludedAreas()</db:title>
<db:para>Clears all excluded areas (areas that the route must not cross).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#addExcludedArea-method">addExcludedArea</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#removeExcludedArea-method">removeExcludedArea</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearWaypoints-method">
<db:title>void clearWaypoints()</db:title>
<db:para>Clears all waypoints.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#removeWaypoint-method">removeWaypoint</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#addWaypoint-method">addWaypoint</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="featureWeight-method">
<db:title>FeatureWeight featureWeight(FeatureType <db:emphasis>featureType</db:emphasis>)</db:title>
<db:para>Gets the weight for the <db:code role="parameter">featureType</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#featureTypes-prop">featureTypes</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#setFeatureWeight-method">setFeatureWeight</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#resetFeatureWeights-method">resetFeatureWeights</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeExcludedArea-method">
<db:title>void removeExcludedArea(<db:emphasis>georectangle</db:emphasis>)</db:title>
<db:para>Removes the given area to excluded areas (areas that the route must not cross).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#addExcludedArea-method">addExcludedArea</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#clearExcludedAreas-method">clearExcludedAreas</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeWaypoint-method">
<db:title>void removeWaypoint(<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:para>Removes the given from the list of waypoints. In case same coordinate appears multiple times, the most recently added coordinate instance is removed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#addWaypoint-method">addWaypoint</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#clearWaypoints-method">clearWaypoints</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetFeatureWeights-method">
<db:title>void resetFeatureWeights()</db:title>
<db:para>Resets all feature weights to their default state (NeutralFeatureWeight).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#featureTypes-prop">featureTypes</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#setFeatureWeight-method">setFeatureWeight</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#featureWeight-method">featureWeight</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFeatureWeight-method">
<db:title>void setFeatureWeight(<db:emphasis>FeatureType</db:emphasis>, <db:emphasis>FeatureWeight</db:emphasis>)</db:title>
<db:para>Defines the weight to associate with a feature during the planning of a route.</db:para>
<db:para>Following lists the possible feature weights:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>RouteQuery.NeutralFeatureWeight</db:para>
</db:td>
<db:td>
<db:para>The presence or absence of the feature will not affect the planning of the route</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>RouteQuery.PreferFeatureWeight</db:para>
</db:td>
<db:td>
<db:para>Routes which contain the feature will be preferred over those that do not</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>RouteQuery.RequireFeatureWeight</db:para>
</db:td>
<db:td>
<db:para>Only routes which contain the feature will be considered, otherwise no route will be returned</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>RouteQuery.AvoidFeatureWeight</db:para>
</db:td>
<db:td>
<db:para>Routes which do not contain the feature will be preferred over those that do</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>RouteQuery.DisallowFeatureWeight</db:para>
</db:td>
<db:td>
<db:para>Only routes which do not contain the feature will be considered, otherwise no route will be returned</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#featureTypes-prop">featureTypes</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#resetFeatureWeights-method">resetFeatureWeights</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#featureWeight-method">featureWeight</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waypointObjects-method">
<db:title>list&lt;Waypoint&gt; waypointObjects()</db:title>
<db:para>This method can be used to retrieve the list of Waypoint objects relative to <db:link xlink:href="qml-qtlocation-routequery.xml#waypoints-prop">RouteQuery::waypoints</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>waypointObjects</db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#addWaypoint-method">addWaypoint</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#removeWaypoint-method">removeWaypoint</db:link></db:member>
<db:member><db:link xlink:href="qml-qtlocation-routequery.xml#clearWaypoints-method">clearWaypoints</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
