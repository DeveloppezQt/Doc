<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDrag Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdrag.xml">QDrag</db:link> class provides support for MIME-based drag and drop data transfer.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDrag</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDrag is part of <db:simplelist><db:member>draganddrop</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Drag and drop is an intuitive way for users to copy or move data around in an application, and is used in many desktop environments as a mechanism for copying data between applications. Drag and drop support in Qt is centered around the <db:link xlink:href="qdrag.xml">QDrag</db:link> class that handles most of the details of a drag and drop operation.</db:para>
<db:para>The data to be transferred by the drag and drop operation is contained in a <db:link xlink:href="qmimedata.xml">QMimeData</db:link> object. This is specified with the <db:link xlink:href="qdrag.xml#setMimeData">setMimeData</db:link>() function in the following way:</db:para>
<db:programlisting language="cpp">        QDrag *drag = new QDrag(this);
        QMimeData *mimeData = new QMimeData;

        mimeData-&amp;gt;setText(commentEdit-&amp;gt;toPlainText());
        drag-&amp;gt;setMimeData(mimeData);
</db:programlisting>
<db:para>Note that <db:link xlink:href="qdrag.xml#setMimeData">setMimeData</db:link>() assigns ownership of the <db:link xlink:href="qmimedata.xml">QMimeData</db:link> object to the <db:link xlink:href="qdrag.xml">QDrag</db:link> object. The <db:link xlink:href="qdrag.xml">QDrag</db:link> must be constructed on the heap with a parent <db:link xlink:href="qobject.xml">QObject</db:link> to ensure that Qt can clean up after the drag and drop operation has been completed.</db:para>
<db:para>A pixmap can be used to represent the data while the drag is in progress, and will move with the cursor to the drop target. This pixmap typically shows an icon that represents the MIME type of the data being transferred, but any pixmap can be set with <db:link xlink:href="qdrag.xml#setPixmap">setPixmap</db:link>(). The cursor's hot spot can be given a position relative to the top-left corner of the pixmap with the <db:link xlink:href="qdrag.xml#setHotSpot">setHotSpot</db:link>() function. The following code positions the pixmap so that the cursor's hot spot points to the center of its bottom edge:</db:para>
<db:programlisting language="cpp">    drag-&amp;gt;setHotSpot(QPoint(drag-&amp;gt;pixmap().width()/2,
                            drag-&amp;gt;pixmap().height()));
</db:programlisting>
<db:note>
<db:para>On X11, the pixmap may not be able to keep up with the mouse movements if the hot spot causes the pixmap to be displayed directly under the cursor.</db:para>
</db:note>
<db:para>The source and target widgets can be found with <db:link xlink:href="qdrag.xml#source">source</db:link>() and <db:link xlink:href="qdrag.xml#target">target</db:link>(). These functions are often used to determine whether drag and drop operations started and finished at the same widget, so that special behavior can be implemented.</db:para>
<db:para><db:link xlink:href="qdrag.xml">QDrag</db:link> only deals with the drag and drop operation itself. It is up to the developer to decide when a drag operation begins, and how a <db:link xlink:href="qdrag.xml">QDrag</db:link> object should be constructed and used. For a given widget, it is often necessary to reimplement <db:link xlink:href="qwidget.xml#mousePressEvent">mousePressEvent</db:link>() to determine whether the user has pressed a mouse button, and reimplement <db:link xlink:href="qwidget.xml#mouseMoveEvent">mouseMoveEvent</db:link>() to check whether a <db:link xlink:href="qdrag.xml">QDrag</db:link> is required.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="dnd.xml">Drag and Drop</db:link></db:member>
<db:member><db:link xlink:href="qclipboard.xml">QClipboard</db:link></db:member>
<db:member><db:link xlink:href="qmimedata.xml">QMimeData</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-draganddrop-draggableicons-example.xml">Draggable Icons Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-draganddrop-draggabletext-example.xml">Draggable Text Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-draganddrop-dropsite-example.xml">Drop Site Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDrag">
<db:title>[explicit] QDrag::QDrag(QObject *<db:emphasis>dragSource</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDrag</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>dragSource</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDrag(QObject *dragSource)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new drag object for the widget specified by <db:code role="parameter">dragSource</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QDrag">
<db:title>[virtual] QDrag::~QDrag()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QDrag</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDrag()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the drag object.</db:para>
</db:section>
<db:section xml:id="actionChanged">
<db:title>void QDrag::actionChanged(Qt::DropAction <db:emphasis>action</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>actionChanged</db:methodname>
<db:methodparam>
<db:type>Qt::DropAction</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void actionChanged(Qt::DropAction action)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:code role="parameter">action</db:code> associated with the drag changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrag.xml#targetChanged">targetChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cancel">
<db:title>[static] void QDrag::cancel()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>cancel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cancel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Cancels a drag operation initiated by Qt.</db:para>
<db:note>
<db:para>This is currently implemented on Windows and X11.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrag.xml#exec">exec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultAction">
<db:title>Qt::DropAction QDrag::defaultAction() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::DropAction</db:type>
<db:methodname>defaultAction</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::DropAction defaultAction() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default proposed drop action for this drag operation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrag.xml#exec">exec</db:link>()</db:member>
<db:member><db:link xlink:href="qdrag.xml#supportedActions">supportedActions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragCursor">
<db:title>QPixmap QDrag::dragCursor(Qt::DropAction <db:emphasis>action</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>dragCursor</db:methodname>
<db:methodparam>
<db:type>Qt::DropAction</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap dragCursor(Qt::DropAction action) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the drag cursor for the <db:code role="parameter">action</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrag.xml#setDragCursor">setDragCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exec">
<db:title>Qt::DropAction QDrag::exec(Qt::DropActions <db:emphasis>supportedActions</db:emphasis> = Qt::MoveAction)</db:title>
<db:methodsynopsis>
<db:type>Qt::DropAction</db:type>
<db:methodname>exec</db:methodname>
<db:methodparam>
<db:type>Qt::DropActions</db:type>
<db:parameter>supportedActions</db:parameter>
<db:initializer>Qt::MoveAction</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::DropAction exec(Qt::DropActions supportedActions)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the drag and drop operation and returns a value indicating the requested drop action when it is completed. The drop actions that the user can choose from are specified in <db:code role="parameter">supportedActions</db:code>. The default proposed action will be selected among the allowed actions in the following order: Move, Copy and Link.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> On Linux and macOS, the drag and drop operation can take some time, but this function does not block the event loop. Other events are still delivered to the application while the operation is performed. On Windows, the Qt event loop is blocked during the operation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrag.xml#cancel">cancel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exec-1">
<db:title>Qt::DropAction QDrag::exec(Qt::DropActions <db:emphasis>supportedActions</db:emphasis>, Qt::DropAction <db:emphasis>defaultDropAction</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>Qt::DropAction</db:type>
<db:methodname>exec</db:methodname>
<db:methodparam>
<db:type>Qt::DropActions</db:type>
<db:parameter>supportedActions</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::DropAction</db:type>
<db:parameter>defaultDropAction</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::DropAction exec(Qt::DropActions supportedActions, Qt::DropAction defaultDropAction)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts the drag and drop operation and returns a value indicating the requested drop action when it is completed. The drop actions that the user can choose from are specified in <db:code role="parameter">supportedActions</db:code>.</db:para>
<db:para>The <db:code role="parameter">defaultDropAction</db:code> determines which action will be proposed when the user performs a drag without using modifier keys.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> On Linux and macOS, the drag and drop operation can take some time, but this function does not block the event loop. Other events are still delivered to the application while the operation is performed. On Windows, the Qt event loop is blocked during the operation. However, <db:link xlink:href="qdrag.xml#exec">QDrag::exec</db:link>() on Windows causes processEvents() to be called frequently to keep the GUI responsive. If any loops or operations are called while a drag operation is active, it will block the drag operation.</db:para>
</db:section>
<db:section xml:id="hotSpot">
<db:title>QPoint QDrag::hotSpot() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>hotSpot</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint hotSpot() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the hot spot relative to the top-left corner of the cursor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrag.xml#setHotSpot">setHotSpot</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mimeData">
<db:title>QMimeData *QDrag::mimeData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMimeData *</db:type>
<db:methodname>mimeData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMimeData * mimeData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the MIME data that is encapsulated by the drag object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrag.xml#setMimeData">setMimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pixmap">
<db:title>QPixmap QDrag::pixmap() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPixmap</db:type>
<db:methodname>pixmap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap pixmap() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pixmap used to represent the data in a drag and drop operation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrag.xml#setPixmap">setPixmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDragCursor">
<db:title>void QDrag::setDragCursor(const QPixmap &amp;<db:emphasis>cursor</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDragCursor</db:methodname>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>cursor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::DropAction</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDragCursor(const QPixmap &amp;cursor, Qt::DropAction action)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the drag <db:code role="parameter">cursor</db:code> for the <db:code role="parameter">action</db:code>. This allows you to override the default native cursors. To revert to using the native cursor for <db:code role="parameter">action</db:code> pass in a null <db:link xlink:href="qpixmap.xml">QPixmap</db:link> as <db:code role="parameter">cursor</db:code>.</db:para>
<db:para>Note: setting the drag cursor for IgnoreAction may not work on all platforms. X11 and macOS has been tested to work. Windows does not support it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrag.xml#dragCursor">dragCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHotSpot">
<db:title>void QDrag::setHotSpot(const QPoint &amp;<db:emphasis>hotspot</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHotSpot</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>hotspot</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHotSpot(const QPoint &amp;hotspot)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the position of the hot spot relative to the top-left corner of the pixmap used to the point specified by <db:code role="parameter">hotspot</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> on X11, the pixmap may not be able to keep up with the mouse movements if the hot spot causes the pixmap to be displayed directly under the cursor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrag.xml#hotSpot">hotSpot</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMimeData">
<db:title>void QDrag::setMimeData(QMimeData *<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMimeData</db:methodname>
<db:methodparam>
<db:type>QMimeData *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMimeData(QMimeData *data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the data to be sent to the given MIME <db:code role="parameter">data</db:code>. Ownership of the data is transferred to the <db:link xlink:href="qdrag.xml">QDrag</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrag.xml#mimeData">mimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPixmap">
<db:title>void QDrag::setPixmap(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPixmap</db:methodname>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPixmap(const QPixmap &amp;pixmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">pixmap</db:code> as the pixmap used to represent the data in a drag and drop operation. You can only set a pixmap before the drag is started.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrag.xml#pixmap">pixmap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="source">
<db:title>QObject *QDrag::source() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>source</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * source() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the source of the drag object. This is the widget where the drag and drop operation originated.</db:para>
</db:section>
<db:section xml:id="supportedActions">
<db:title>Qt::DropActions QDrag::supportedActions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::DropActions</db:type>
<db:methodname>supportedActions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::DropActions supportedActions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the set of possible drop actions for this drag operation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrag.xml#exec">exec</db:link>()</db:member>
<db:member><db:link xlink:href="qdrag.xml#defaultAction">defaultAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="target">
<db:title>QObject *QDrag::target() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>target</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * target() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the target of the drag and drop operation. This is the widget where the drag object was dropped.</db:para>
</db:section>
<db:section xml:id="targetChanged">
<db:title>void QDrag::targetChanged(QObject *<db:emphasis>newTarget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>targetChanged</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>newTarget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void targetChanged(QObject *newTarget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the target of the drag and drop operation changes, with <db:code role="parameter">newTarget</db:code> the new target.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdrag.xml#target">target</db:link>()</db:member>
<db:member><db:link xlink:href="qdrag.xml#actionChanged">actionChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
