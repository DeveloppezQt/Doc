<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Inter-Process Communication</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of Qt's inter-process communication functionality.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt supports many ways of communicating with other processes running in the same system or in different systems. There are basically three types of inter-process communication mechanisms:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Synchronization primitives</db:para>
</db:listitem>
<db:listitem>
<db:para>Exchanging of arbitrary byte-level data</db:para>
</db:listitem>
<db:listitem>
<db:para>Passing structured messages</db:para>
</db:listitem>
</db:orderedlist>
<db:section xml:id="synchronization-primitives">
<db:title>Synchronization primitives</db:title>
<db:para>Qt only provides one class for explicit inter-process synchronization: <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link>. A <db:link xlink:href="qsystemsemaphore.xml">QSystemSemaphore</db:link> is like a <db:link xlink:href="qsemaphore.xml">QSemaphore</db:link> that is accessible by multiple processes in the same system. It is globally identified by a &quot;key&quot;, which in Qt is represented by the <db:link xlink:href="qnativeipckey.xml">QNativeIpcKey</db:link> class. Additionally, depending on the OS, Qt may support multiple different backends for sharing memory; see the <db:link xlink:href="native-ipc-keys.xml">Native IPC Keys</db:link> documentation for more information and limitations.</db:para>
<db:para>It is possible to use regular thread-synchronization primitives such as mutexes, wait conditions, and read-write locks, located in memory that is shared between processes. Qt does not provide any class to support this, but applications can use low-level operations on certain operating systems.</db:para>
<db:para>Other Qt classes may be used to provide higher-level locking, like <db:link xlink:href="qlockfile.xml">QLockFile</db:link>, or by acquiring a unique, system-wide resource. Such techniques include TCP or UDP ports or well-known names in <db:link xlink:href="">D-Bus</db:link>.</db:para>
</db:section>
<db:section xml:id="byte-level-data-sharing">
<db:title>Byte-level data sharing</db:title>
<db:para>Using byte-level data, applications can implement any communication protocol they may choose. Sharing of byte data can be stream-oriented (serialized) or can allow random access (a similar condition to <db:link xlink:href="qfiledevice.xml#isSequential">QFileDevice::isSequential</db:link>()).</db:para>
<db:para>For serial communication, Qt provides a number of different classes and even full modules:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Pipes and FIFOs: <db:link xlink:href="qfile.xml">QFile</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Child processes: <db:link xlink:href="qprocess.xml">QProcess</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Sockets: QTcpSocket, QUdpSocket (in <db:link xlink:href="">Qt Network</db:link>)</db:para>
</db:listitem>
<db:listitem>
<db:para>HTTP(S): QNetworkAccessManager (in <db:link xlink:href="">Qt Network</db:link>) and QHttpServer (in <db:link xlink:href="">Qt HTTP Server</db:link>)</db:para>
</db:listitem>
<db:listitem>
<db:para>CoAP(S): QCoapClient (in <db:link xlink:href="">Qt CoAP</db:link>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For random-access data sharing within the same system, Qt provides <db:link xlink:href="qsharedmemory.xml">QSharedMemory</db:link>. See the <db:link xlink:href="shared-memory.xml">Shared Memory</db:link> documentation for detailed information.</db:para>
</db:section>
<db:section xml:id="structured-message-passing">
<db:title>Structured message passing</db:title>
<db:para>Qt also provides a number of techniques to exchange structured messages with other processes. Applications can build on top of the byte-level solutions above, such as by using <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> or <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> / <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> over HTTP to perform JSONRPC or XMLRPC, respectively, or <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> with QtCoAP.</db:para>
<db:para>Dedicated Qt modules for structured messages and remote procedure-calling include:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="">Qt D-Bus</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt Remote Objects</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt WebSockets</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
