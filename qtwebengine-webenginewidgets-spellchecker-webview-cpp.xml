<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Widgets Spellchecker Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Integrates a spellchecker into a simple HTML form.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;webview.h&quot;
#include &amp;lt;QContextMenuEvent&amp;gt;
#include &amp;lt;QMenu&amp;gt;
#include &amp;lt;QWebEngineProfile&amp;gt;
#include &amp;lt;QWebEngineContextMenuData&amp;gt;

WebView::WebView(QWidget *parent)
    : QWebEngineView(parent)
{
    m_spellCheckLanguages[&quot;English&quot;] = &quot;en-US&quot;;
    m_spellCheckLanguages[&quot;German&quot;] = &quot;de-DE&quot;;
    QWebEngineProfile *profile = page()-&amp;gt;profile();
    profile-&amp;gt;setSpellCheckEnabled(true);
    profile-&amp;gt;setSpellCheckLanguages({&quot;en-US&quot;});
}

void WebView::contextMenuEvent(QContextMenuEvent *event)
{
    const QWebEngineContextMenuData &amp;amp;data = page()-&amp;gt;contextMenuData();
    Q_ASSERT(data.isValid());

    if (!data.isContentEditable()) {
        QWebEngineView::contextMenuEvent(event);
        return;
    }

    QWebEngineProfile *profile = page()-&amp;gt;profile();
    const QStringList &amp;amp;languages = profile-&amp;gt;spellCheckLanguages();
    QMenu *menu = page()-&amp;gt;createStandardContextMenu();
    menu-&amp;gt;addSeparator();

    QAction *spellcheckAction = new QAction(tr(&quot;Check Spelling&quot;), nullptr);
    spellcheckAction-&amp;gt;setCheckable(true);
    spellcheckAction-&amp;gt;setChecked(profile-&amp;gt;isSpellCheckEnabled());
    connect(spellcheckAction, &amp;amp;QAction::toggled, this, [profile](bool toogled) {
        profile-&amp;gt;setSpellCheckEnabled(toogled);
    });
    menu-&amp;gt;addAction(spellcheckAction);

    if (profile-&amp;gt;isSpellCheckEnabled()) {
        QMenu *subMenu = menu-&amp;gt;addMenu(tr(&quot;Select Language&quot;));
        const QStringList keys = m_spellCheckLanguages.keys();
        for (const QString &amp;amp;str : keys) {
            QAction *action = subMenu-&amp;gt;addAction(str);
            action-&amp;gt;setCheckable(true);
            QString lang = m_spellCheckLanguages[str];
            action-&amp;gt;setChecked(languages.contains(lang));
            connect(action, &amp;amp;QAction::triggered, this, [profile, lang](){
               profile-&amp;gt;setSpellCheckLanguages(QStringList()&amp;lt;&amp;lt;lang);
            });
        }
    }
    connect(menu, &amp;amp;QMenu::aboutToHide, menu, &amp;amp;QObject::deleteLater);
    menu-&amp;gt;popup(event-&amp;gt;globalPos());
}

</db:programlisting>
</db:article>
