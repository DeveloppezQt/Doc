<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDesignerPropertySheetExtension Class</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link> class allows you to manipulate a widget's properties which is displayed in Qt Designer's property editor.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDesignerPropertySheetExtension</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += designer</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link> provides a collection of functions that are typically used to query a widget's properties, and to manipulate the properties' appearance in the property editor. For example:</db:para>
<db:programlisting language="cpp">QDesignerPropertySheetExtension *propertySheet  = 0;
QExtensionManager manager = formEditor-&amp;gt;extensionManager();

propertySheet = qt_extension&amp;lt;QDesignerPropertySheetExtension*&amp;gt;(manager, widget);
int index = propertySheet-&amp;gt;indexOf(QLatin1String(&quot;margin&quot;));

propertySheet-&amp;gt;setProperty(index, 10);
propertySheet-&amp;gt;setChanged(index, true);

delete propertySheet;
</db:programlisting>
<db:para>Note that if you change the value of a property using the <db:link xlink:href="qdesignerpropertysheetextension.xml#setProperty">QDesignerPropertySheetExtension::setProperty</db:link>() function, the undo stack is not updated. To ensure that a property's value can be reverted using the undo stack, you must use the QDesignerFormWindowCursorInterface::setProperty() function, or its buddy <db:link xlink:href="">setWidgetProperty()</db:link>, instead.</db:para>
<db:para>When implementing a custom widget plugin, a pointer to <db:emphasis>Qt Designer</db:emphasis>'s current QDesignerFormEditorInterface object (<db:code>formEditor</db:code> in the example above) is provided by the <db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">QDesignerCustomWidgetInterface::initialize</db:link>() function's parameter.</db:para>
<db:para>The property sheet, or any other extension, can be retrieved by querying <db:emphasis>Qt Designer</db:emphasis>'s extension manager using the qt_extension() function. When you want to release the extension, you only need to delete the pointer.</db:para>
<db:para>All widgets have a default property sheet which populates <db:emphasis>Qt Designer</db:emphasis>'s property editor with the widget's properties (i.e the ones defined with the <db:link xlink:href="qobject-proxy.xml#Q_PROPERTY">Q_PROPERTY</db:link>() macro). But <db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link> also provides an interface for creating custom property sheet extensions.</db:para>
<db:para>Keep the following limitations in mind:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>Qt Designer</db:emphasis> uses the <db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link> to feed its property editor. Whenever a widget is selected in its workspace, <db:emphasis>Qt Designer</db:emphasis> will query for the widget's property sheet extension. If the selected widget has an implemented property sheet extension, this extension will override the default property sheet.</db:para>
</db:listitem>
<db:listitem>
<db:para>The data types used by the property sheet for some properties are opaque custom QVariant types containing additional information instead of plain Qt data types. For example, this is the case for enumerations, flags, icons, pixmaps and strings.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>Qt Designer</db:emphasis>'s property editor has no implementation for handling <db:link xlink:href="qobject-proxy.xml#Q_PROPERTY">Q_PROPERTY</db:link> types for custom types that have been declared with <db:link xlink:href="qmetatype.xml#Q_DECLARE_METATYPE">Q_DECLARE_METATYPE</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To create a property sheet extension, your extension class must inherit from both QObject and <db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link>. Then, since we are implementing an interface, we must ensure that it's made known to the meta object system using the <db:link xlink:href="qobject-proxy.xml#Q_INTERFACES">Q_INTERFACES</db:link>() macro:</db:para>
<db:programlisting language="cpp">class MyPropertySheetExtension : public QObject,
        public QDesignerPropertySheetExtension
{
    Q_OBJECT
    Q_INTERFACES(QDesignerPropertySheetExtension)

public:
    ...
}
</db:programlisting>
<db:para>This enables <db:emphasis>Qt Designer</db:emphasis> to use <db:link xlink:href="qobject-proxy.xml#qobject_cast-1">qobject_cast</db:link>() to query for supported interfaces using nothing but a QObject pointer.</db:para>
<db:para>In <db:emphasis>Qt Designer</db:emphasis> the extensions are not created until they are required. For that reason, when implementing a property sheet extension, you must also create a QExtensionFactory, i.e a class that is able to make an instance of your extension, and register it using <db:emphasis>Qt Designer</db:emphasis>'s <db:link xlink:href="qextensionmanager-proxy.xml">extension manager</db:link>.</db:para>
<db:para>When a property sheet extension is required, <db:emphasis>Qt Designer</db:emphasis>'s <db:link xlink:href="qextensionmanager-proxy.xml">extension manager</db:link> will run through all its registered factories calling QExtensionFactory::createExtension() for each until the first one that is able to create a property sheet extension for the selected widget, is found. This factory will then make an instance of the extension. If no such factory can be found, <db:emphasis>Qt Designer</db:emphasis> will use the default property sheet.</db:para>
<db:para>There are four available types of extensions in <db:emphasis>Qt Designer</db:emphasis>: <db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link>, <db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link>, <db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link> and <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link>. Qt Designer's behavior is the same whether the requested extension is associated with a multi page container, a member sheet, a property sheet or a task menu.</db:para>
<db:para>The QExtensionFactory class provides a standard extension factory, and can also be used as an interface for custom extension factories. You can either create a new QExtensionFactory and reimplement the QExtensionFactory::createExtension() function. For example:</db:para>
<db:programlisting language="cpp">QObject *ANewExtensionFactory::createExtension(QObject *object,
        const QString &amp;amp;iid, QObject *parent) const
{
    if (iid != Q_TYPEID(QDesignerPropertySheetExtension))
        return 0;

    if (MyCustomWidget *widget = qobject_cast&amp;lt;MyCustomWidget*&amp;gt;
           (object))
        return new MyPropertySheetExtension(widget, parent);

    return 0;
}
</db:programlisting>
<db:para>Or you can use an existing factory, expanding the QExtensionFactory::createExtension() function to make the factory able to create a property sheet extension extension as well. For example:</db:para>
<db:programlisting language="cpp">QObject *AGeneralExtensionFactory::createExtension(QObject *object,
        const QString &amp;amp;iid, QObject *parent) const
{
    MyCustomWidget *widget = qobject_cast&amp;lt;MyCustomWidget*&amp;gt;(object);

    if (widget &amp;amp;&amp;amp; (iid == Q_TYPEID(QDesignerTaskMenuExtension))) {
        return new MyTaskMenuExtension(widget, parent);

    } else if (widget &amp;amp;&amp;amp; (iid == Q_TYPEID(QDesignerPropertySheetExtension))) {
        return new MyPropertySheetExtension(widget, parent);

    } else {
        return 0;
    }
}
</db:programlisting>
<db:para>For a complete example using an extension class, see the <db:link xlink:href="qtdesigner-taskmenuextension-example.xml">Task Menu Extension example</db:link>. The example shows how to create a custom widget plugin for Qt Designer, and how to to use the <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> class to add custom items to <db:emphasis>Qt Designer</db:emphasis>'s task menu.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerdynamicpropertysheetextension.xml">QDesignerDynamicPropertySheetExtension</db:link></db:member>
<db:member>QExtensionFactory</db:member>
<db:member><db:link xlink:href="qextensionmanager-proxy.xml">QExtensionManager</db:link></db:member>
<db:member><db:link xlink:href="designer-creating-custom-widgets-extensions.xml">Creating Custom Widget Extensions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QDesignerPropertySheetExtension">
<db:title>[virtual] QDesignerPropertySheetExtension::~QDesignerPropertySheetExtension()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QDesignerPropertySheetExtension</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDesignerPropertySheetExtension()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the property sheet extension.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>[pure virtual] int QDesignerPropertySheetExtension::count() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the selected widget's number of properties.</db:para>
</db:section>
<db:section xml:id="hasReset">
<db:title>[pure virtual] bool QDesignerPropertySheetExtension::hasReset(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasReset</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasReset(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the property at the given <db:code role="parameter">index</db:code> has a reset button in <db:emphasis>Qt Designer</db:emphasis>'s property editor, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#reset">reset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf">
<db:title>[pure virtual] int QDesignerPropertySheetExtension::indexOf(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOf</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOf(const QString &amp;name) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index for a given property <db:code role="parameter">name</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#propertyName">propertyName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAttribute">
<db:title>[pure virtual] bool QDesignerPropertySheetExtension::isAttribute(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAttribute</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAttribute(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the property at the given <db:code role="parameter">index</db:code> is an attribute, which will be <db:emphasis>excluded</db:emphasis> from the UI file, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#setAttribute">setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isChanged">
<db:title>[pure virtual] bool QDesignerPropertySheetExtension::isChanged(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isChanged(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the value of the property at the given <db:code role="parameter">index</db:code> differs from the property's default value, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#setChanged">setChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#reset">reset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEnabled">
<db:title>[virtual, since 5.0] bool QDesignerPropertySheetExtension::isEnabled(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEnabled</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEnabled(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the property at the given <db:code role="parameter">index</db:code> is enabled in <db:emphasis>Qt Designer</db:emphasis>'s property editor, otherwise false.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isVisible">
<db:title>[pure virtual] bool QDesignerPropertySheetExtension::isVisible(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isVisible</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isVisible(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the property at the given <db:code role="parameter">index</db:code> is visible in <db:emphasis>Qt Designer</db:emphasis>'s property editor, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#setVisible">setVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property">
<db:title>[pure virtual] QVariant QDesignerPropertySheetExtension::property(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>property</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant property(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the property at the given <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#propertyGroup">propertyGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyGroup">
<db:title>[pure virtual] QString QDesignerPropertySheetExtension::propertyGroup(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>propertyGroup</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString propertyGroup(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the property group for the property at the given <db:code role="parameter">index</db:code>.</db:para>
<db:para><db:emphasis>Qt Designer</db:emphasis>'s property editor supports property groups, i.e. sections of related properties. A property can be related to a group using the <db:link xlink:href="qdesignerpropertysheetextension.xml#setPropertyGroup">setPropertyGroup</db:link>() function. The default group of any property is the name of the class that defines it. For example, the QObject::objectName property appears within the QObject property group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#setPropertyGroup">setPropertyGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyName">
<db:title>[pure virtual] QString QDesignerPropertySheetExtension::propertyName(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>propertyName</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString propertyName(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the property at the given <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reset">
<db:title>[pure virtual] bool QDesignerPropertySheetExtension::reset(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>reset</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool reset(int index) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the value of the property at the given <db:code role="parameter">index</db:code>, to the default value. Returns true if a default value could be found, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#hasReset">hasReset</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#isChanged">isChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttribute">
<db:title>[pure virtual] void QDesignerPropertySheetExtension::setAttribute(int <db:emphasis>index</db:emphasis>, bool <db:emphasis>attribute</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setAttribute</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>attribute</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttribute(int index, bool attribute) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">attribute</db:code> is true, the property at the given <db:code role="parameter">index</db:code> is made an attribute which will be <db:emphasis>excluded</db:emphasis> from the UI file; otherwise it will be included.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#isAttribute">isAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setChanged">
<db:title>[pure virtual] void QDesignerPropertySheetExtension::setChanged(int <db:emphasis>index</db:emphasis>, bool <db:emphasis>changed</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>changed</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setChanged(int index, bool changed) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether the property at the given <db:code role="parameter">index</db:code> is different from its default value, or not, depending on the <db:code role="parameter">changed</db:code> parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#isChanged">isChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty">
<db:title>[pure virtual] void QDesignerPropertySheetExtension::setProperty(int <db:emphasis>index</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setProperty</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setProperty(int index, const QVariant &amp;value) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">value</db:code> of the property at the given <db:code role="parameter">index</db:code>.</db:para>
<db:warning>
<db:para>If you change the value of a property using this function, the undo stack is not updated. To ensure that a property's value can be reverted using the undo stack, you must use the QDesignerFormWindowCursorInterface::setProperty() function, or its buddy <db:link xlink:href="">setWidgetProperty()</db:link>, instead.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#propertyGroup">propertyGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPropertyGroup">
<db:title>[pure virtual] void QDesignerPropertySheetExtension::setPropertyGroup(int <db:emphasis>index</db:emphasis>, const QString &amp;<db:emphasis>group</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setPropertyGroup</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>group</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPropertyGroup(int index, const QString &amp;group) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the property group for the property at the given <db:code role="parameter">index</db:code> to <db:code role="parameter">group</db:code>.</db:para>
<db:para>Relating a property to a group makes it appear within that group's section in the property editor. The default property group of any property is the name of the class that defines it. For example, the QObject::objectName property appears within the QObject property group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#propertyGroup">propertyGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>[pure virtual] void QDesignerPropertySheetExtension::setVisible(int <db:emphasis>index</db:emphasis>, bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setVisible</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>visible</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVisible(int index, bool visible) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">visible</db:code> is true, the property at the given <db:code role="parameter">index</db:code> is visible in <db:emphasis>Qt Designer</db:emphasis>'s property editor; otherwise the property is hidden.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerpropertysheetextension.xml#isVisible">isVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
