<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Pie Chart Customization Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how the look and feel of a pie chart can be customized.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/
#include &quot;mainwidget.h&quot;
#include &quot;customslice.h&quot;
#include &quot;pentool.h&quot;
#include &quot;brushtool.h&quot;
#include &lt;QtWidgets/QPushButton&gt;
#include &lt;QtWidgets/QComboBox&gt;
#include &lt;QtWidgets/QCheckBox&gt;
#include &lt;QtWidgets/QLineEdit&gt;
#include &lt;QtWidgets/QGroupBox&gt;
#include &lt;QtWidgets/QDoubleSpinBox&gt;
#include &lt;QtWidgets/QFormLayout&gt;
#include &lt;QtWidgets/QFontDialog&gt;
#include &lt;QtCharts/QChartView&gt;
#include &lt;QtCharts/QPieSeries&gt;

QT_CHARTS_USE_NAMESPACE

MainWidget::MainWidget(QWidget *parent)
    : QWidget(parent),
      m_slice(0)
{
    // create chart
    QChart *chart = new QChart;
    chart-&gt;setTitle(&quot;Piechart customization&quot;);
    chart-&gt;setAnimationOptions(QChart::AllAnimations);

    // create series
    m_series = new QPieSeries();
    *m_series &lt;&lt; new CustomSlice(&quot;Slice 1&quot;, 10.0);
    *m_series &lt;&lt; new CustomSlice(&quot;Slice 2&quot;, 20.0);
    *m_series &lt;&lt; new CustomSlice(&quot;Slice 3&quot;, 30.0);
    *m_series &lt;&lt; new CustomSlice(&quot;Slice 4&quot;, 40.0);
    *m_series &lt;&lt; new CustomSlice(&quot;Slice 5&quot;, 50.0);
    m_series-&gt;setLabelsVisible();
    chart-&gt;addSeries(m_series);

    connect(m_series, SIGNAL(clicked(QPieSlice*)), this, SLOT(handleSliceClicked(QPieSlice*)));

    // chart settings
    m_themeComboBox = new QComboBox();
    m_themeComboBox-&gt;addItem(&quot;Light&quot;, QChart::ChartThemeLight);
    m_themeComboBox-&gt;addItem(&quot;BlueCerulean&quot;, QChart::ChartThemeBlueCerulean);
    m_themeComboBox-&gt;addItem(&quot;Dark&quot;, QChart::ChartThemeDark);
    m_themeComboBox-&gt;addItem(&quot;BrownSand&quot;, QChart::ChartThemeBrownSand);
    m_themeComboBox-&gt;addItem(&quot;BlueNcs&quot;, QChart::ChartThemeBlueNcs);
    m_themeComboBox-&gt;addItem(&quot;High Contrast&quot;, QChart::ChartThemeHighContrast);
    m_themeComboBox-&gt;addItem(&quot;Blue Icy&quot;, QChart::ChartThemeBlueIcy);
    m_themeComboBox-&gt;addItem(&quot;Qt&quot;, QChart::ChartThemeQt);

    m_aaCheckBox = new QCheckBox();
    m_animationsCheckBox = new QCheckBox();
    m_animationsCheckBox-&gt;setCheckState(Qt::Checked);

    m_legendCheckBox = new QCheckBox();

    QFormLayout *chartSettingsLayout = new QFormLayout();
    chartSettingsLayout-&gt;addRow(&quot;Theme&quot;, m_themeComboBox);
    chartSettingsLayout-&gt;addRow(&quot;Antialiasing&quot;, m_aaCheckBox);
    chartSettingsLayout-&gt;addRow(&quot;Animations&quot;, m_animationsCheckBox);
    chartSettingsLayout-&gt;addRow(&quot;Legend&quot;, m_legendCheckBox);
    QGroupBox *chartSettings = new QGroupBox(&quot;Chart&quot;);
    chartSettings-&gt;setLayout(chartSettingsLayout);

    connect(m_themeComboBox, SIGNAL(currentIndexChanged(int)), this, SLOT(updateChartSettings()));
    connect(m_aaCheckBox, SIGNAL(toggled(bool)), this, SLOT(updateChartSettings()));
    connect(m_animationsCheckBox, SIGNAL(toggled(bool)), this, SLOT(updateChartSettings()));
    connect(m_legendCheckBox, SIGNAL(toggled(bool)), this, SLOT(updateChartSettings()));

    // series settings
    m_hPosition = new QDoubleSpinBox();
    m_hPosition-&gt;setMinimum(0.0);
    m_hPosition-&gt;setMaximum(1.0);
    m_hPosition-&gt;setSingleStep(0.1);
    m_hPosition-&gt;setValue(m_series-&gt;horizontalPosition());

    m_vPosition = new QDoubleSpinBox();
    m_vPosition-&gt;setMinimum(0.0);
    m_vPosition-&gt;setMaximum(1.0);
    m_vPosition-&gt;setSingleStep(0.1);
    m_vPosition-&gt;setValue(m_series-&gt;verticalPosition());

    m_sizeFactor = new QDoubleSpinBox();
    m_sizeFactor-&gt;setMinimum(0.0);
    m_sizeFactor-&gt;setMaximum(1.0);
    m_sizeFactor-&gt;setSingleStep(0.1);
    m_sizeFactor-&gt;setValue(m_series-&gt;pieSize());

    m_startAngle = new QDoubleSpinBox();
    m_startAngle-&gt;setMinimum(-720);
    m_startAngle-&gt;setMaximum(720);
    m_startAngle-&gt;setValue(m_series-&gt;pieStartAngle());
    m_startAngle-&gt;setSingleStep(1);

    m_endAngle = new QDoubleSpinBox();
    m_endAngle-&gt;setMinimum(-720);
    m_endAngle-&gt;setMaximum(720);
    m_endAngle-&gt;setValue(m_series-&gt;pieEndAngle());
    m_endAngle-&gt;setSingleStep(1);

    m_holeSize = new QDoubleSpinBox();
    m_holeSize-&gt;setMinimum(0.0);
    m_holeSize-&gt;setMaximum(1.0);
    m_holeSize-&gt;setSingleStep(0.1);
    m_holeSize-&gt;setValue(m_series-&gt;holeSize());

    QPushButton *appendSlice = new QPushButton(&quot;Append slice&quot;);
    QPushButton *insertSlice = new QPushButton(&quot;Insert slice&quot;);
    QPushButton *removeSlice = new QPushButton(&quot;Remove selected slice&quot;);

    QFormLayout *seriesSettingsLayout = new QFormLayout();
    seriesSettingsLayout-&gt;addRow(&quot;Horizontal position&quot;, m_hPosition);
    seriesSettingsLayout-&gt;addRow(&quot;Vertical position&quot;, m_vPosition);
    seriesSettingsLayout-&gt;addRow(&quot;Size factor&quot;, m_sizeFactor);
    seriesSettingsLayout-&gt;addRow(&quot;Start angle&quot;, m_startAngle);
    seriesSettingsLayout-&gt;addRow(&quot;End angle&quot;, m_endAngle);
    seriesSettingsLayout-&gt;addRow(&quot;Hole size&quot;, m_holeSize);
    seriesSettingsLayout-&gt;addRow(appendSlice);
    seriesSettingsLayout-&gt;addRow(insertSlice);
    seriesSettingsLayout-&gt;addRow(removeSlice);
    QGroupBox *seriesSettings = new QGroupBox(&quot;Series&quot;);
    seriesSettings-&gt;setLayout(seriesSettingsLayout);

    connect(m_vPosition, SIGNAL(valueChanged(double)), this, SLOT(updateSerieSettings()));
    connect(m_hPosition, SIGNAL(valueChanged(double)), this, SLOT(updateSerieSettings()));
    connect(m_sizeFactor, SIGNAL(valueChanged(double)), this, SLOT(updateSerieSettings()));
    connect(m_startAngle, SIGNAL(valueChanged(double)), this, SLOT(updateSerieSettings()));
    connect(m_endAngle, SIGNAL(valueChanged(double)), this, SLOT(updateSerieSettings()));
    connect(m_holeSize, SIGNAL(valueChanged(double)), this, SLOT(updateSerieSettings()));
    connect(appendSlice, SIGNAL(clicked()), this, SLOT(appendSlice()));
    connect(insertSlice, SIGNAL(clicked()), this, SLOT(insertSlice()));
    connect(removeSlice, SIGNAL(clicked()), this, SLOT(removeSlice()));

    // slice settings
    m_sliceName = new QLineEdit(&quot;&lt;click a slice&gt;&quot;);
    m_sliceName-&gt;setSizePolicy(QSizePolicy::Maximum, QSizePolicy::Maximum);
    m_sliceValue = new QDoubleSpinBox();
    m_sliceValue-&gt;setMaximum(1000);
    m_sliceLabelVisible = new QCheckBox();
    m_sliceLabelArmFactor = new QDoubleSpinBox();
    m_sliceLabelArmFactor-&gt;setSingleStep(0.01);
    m_sliceExploded = new QCheckBox();
    m_sliceExplodedFactor = new QDoubleSpinBox();
    m_sliceExplodedFactor-&gt;setSingleStep(0.01);
    m_pen = new QPushButton();
    m_penTool = new PenTool(&quot;Slice pen&quot;, this);
    m_brush = new QPushButton();
    m_brushTool = new BrushTool(&quot;Slice brush&quot;, this);
    m_font = new QPushButton();
    m_labelBrush = new QPushButton();
    m_labelBrushTool = new BrushTool(&quot;Label brush&quot;, this);
    m_labelPosition = new QComboBox(this);
    m_labelPosition-&gt;addItem(&quot;Outside&quot;, QPieSlice::LabelOutside);
    m_labelPosition-&gt;addItem(&quot;Inside horizontal&quot;, QPieSlice::LabelInsideHorizontal);
    m_labelPosition-&gt;addItem(&quot;Inside tangential&quot;, QPieSlice::LabelInsideTangential);
    m_labelPosition-&gt;addItem(&quot;Inside normal&quot;, QPieSlice::LabelInsideNormal);

    QFormLayout *sliceSettingsLayout = new QFormLayout();
    sliceSettingsLayout-&gt;addRow(&quot;Label&quot;, m_sliceName);
    sliceSettingsLayout-&gt;addRow(&quot;Value&quot;, m_sliceValue);
    sliceSettingsLayout-&gt;addRow(&quot;Pen&quot;, m_pen);
    sliceSettingsLayout-&gt;addRow(&quot;Brush&quot;, m_brush);
    sliceSettingsLayout-&gt;addRow(&quot;Label visible&quot;, m_sliceLabelVisible);
    sliceSettingsLayout-&gt;addRow(&quot;Label font&quot;, m_font);
    sliceSettingsLayout-&gt;addRow(&quot;Label brush&quot;, m_labelBrush);
    sliceSettingsLayout-&gt;addRow(&quot;Label position&quot;, m_labelPosition);
    sliceSettingsLayout-&gt;addRow(&quot;Label arm length&quot;, m_sliceLabelArmFactor);
    sliceSettingsLayout-&gt;addRow(&quot;Exploded&quot;, m_sliceExploded);
    sliceSettingsLayout-&gt;addRow(&quot;Explode distance&quot;, m_sliceExplodedFactor);
    QGroupBox *sliceSettings = new QGroupBox(&quot;Selected slice&quot;);
    sliceSettings-&gt;setLayout(sliceSettingsLayout);

    connect(m_sliceName, SIGNAL(textChanged(QString)), this, SLOT(updateSliceSettings()));
    connect(m_sliceValue, SIGNAL(valueChanged(double)), this, SLOT(updateSliceSettings()));
    connect(m_pen, SIGNAL(clicked()), m_penTool, SLOT(show()));
    connect(m_penTool, SIGNAL(changed()), this, SLOT(updateSliceSettings()));
    connect(m_brush, SIGNAL(clicked()), m_brushTool, SLOT(show()));
    connect(m_brushTool, SIGNAL(changed()), this, SLOT(updateSliceSettings()));
    connect(m_font, SIGNAL(clicked()), this, SLOT(showFontDialog()));
    connect(m_labelBrush, SIGNAL(clicked()), m_labelBrushTool, SLOT(show()));
    connect(m_labelBrushTool, SIGNAL(changed()), this, SLOT(updateSliceSettings()));
    connect(m_sliceLabelVisible, SIGNAL(toggled(bool)), this, SLOT(updateSliceSettings()));
    connect(m_sliceLabelVisible, SIGNAL(toggled(bool)), this, SLOT(updateSliceSettings()));
    connect(m_sliceLabelArmFactor, SIGNAL(valueChanged(double)), this, SLOT(updateSliceSettings()));
    connect(m_sliceExploded, SIGNAL(toggled(bool)), this, SLOT(updateSliceSettings()));
    connect(m_sliceExplodedFactor, SIGNAL(valueChanged(double)), this, SLOT(updateSliceSettings()));
    connect(m_labelPosition, SIGNAL(currentIndexChanged(int)), this, SLOT(updateSliceSettings()));

    // create chart view
    m_chartView = new QChartView(chart);

    // create main layout
    QVBoxLayout *settingsLayout = new QVBoxLayout();
    settingsLayout-&gt;addWidget(chartSettings);
    settingsLayout-&gt;addWidget(seriesSettings);
    settingsLayout-&gt;addWidget(sliceSettings);
    settingsLayout-&gt;addStretch();

    QGridLayout *baseLayout = new QGridLayout();
    baseLayout-&gt;addLayout(settingsLayout, 0, 0);
    baseLayout-&gt;addWidget(m_chartView, 0, 1);
    setLayout(baseLayout);

    updateSerieSettings();
    updateChartSettings();
}

void MainWidget::updateChartSettings()
{
    QChart::ChartTheme theme = (QChart::ChartTheme) m_themeComboBox-&gt;itemData(m_themeComboBox-&gt;currentIndex()).toInt();
    m_chartView-&gt;chart()-&gt;setTheme(theme);
    m_chartView-&gt;setRenderHint(QPainter::Antialiasing, m_aaCheckBox-&gt;isChecked());

    if (m_animationsCheckBox-&gt;checkState() == Qt::Checked)
        m_chartView-&gt;chart()-&gt;setAnimationOptions(QChart::AllAnimations);
    else
        m_chartView-&gt;chart()-&gt;setAnimationOptions(QChart::NoAnimation);

    if (m_legendCheckBox-&gt;checkState() == Qt::Checked)
        m_chartView-&gt;chart()-&gt;legend()-&gt;show();
    else
        m_chartView-&gt;chart()-&gt;legend()-&gt;hide();
}

void MainWidget::updateSerieSettings()
{
    m_series-&gt;setHorizontalPosition(m_hPosition-&gt;value());
    m_series-&gt;setVerticalPosition(m_vPosition-&gt;value());
    m_series-&gt;setPieSize(m_sizeFactor-&gt;value());
    m_holeSize-&gt;setMaximum(m_sizeFactor-&gt;value());
    m_series-&gt;setPieStartAngle(m_startAngle-&gt;value());
    m_series-&gt;setPieEndAngle(m_endAngle-&gt;value());
    m_series-&gt;setHoleSize(m_holeSize-&gt;value());
}

void MainWidget::updateSliceSettings()
{
    if (!m_slice)
        return;

    m_slice-&gt;setLabel(m_sliceName-&gt;text());

    m_slice-&gt;setValue(m_sliceValue-&gt;value());

    m_slice-&gt;setPen(m_penTool-&gt;pen());
    m_slice-&gt;setBrush(m_brushTool-&gt;brush());

    m_slice-&gt;setLabelBrush(m_labelBrushTool-&gt;brush());
    m_slice-&gt;setLabelVisible(m_sliceLabelVisible-&gt;isChecked());
    m_slice-&gt;setLabelArmLengthFactor(m_sliceLabelArmFactor-&gt;value());
    m_slice-&gt;setLabelPosition((QPieSlice::LabelPosition)m_labelPosition-&gt;currentIndex()); // assumes that index is in sync with the enum

    m_slice-&gt;setExploded(m_sliceExploded-&gt;isChecked());
    m_slice-&gt;setExplodeDistanceFactor(m_sliceExplodedFactor-&gt;value());
}

void MainWidget::handleSliceClicked(QPieSlice *slice)
{
    m_slice = static_cast&lt;CustomSlice *&gt;(slice);

    // name
    m_sliceName-&gt;blockSignals(true);
    m_sliceName-&gt;setText(slice-&gt;label());
    m_sliceName-&gt;blockSignals(false);

    // value
    m_sliceValue-&gt;blockSignals(true);
    m_sliceValue-&gt;setValue(slice-&gt;value());
    m_sliceValue-&gt;blockSignals(false);

    // pen
    m_pen-&gt;setText(PenTool::name(m_slice-&gt;pen()));
    m_penTool-&gt;setPen(m_slice-&gt;pen());

    // brush
    m_brush-&gt;setText(m_slice-&gt;originalBrush().color().name());
    m_brushTool-&gt;setBrush(m_slice-&gt;originalBrush());

    // label
    m_labelBrush-&gt;setText(BrushTool::name(m_slice-&gt;labelBrush()));
    m_labelBrushTool-&gt;setBrush(m_slice-&gt;labelBrush());
    m_font-&gt;setText(slice-&gt;labelFont().toString());
    m_sliceLabelVisible-&gt;blockSignals(true);
    m_sliceLabelVisible-&gt;setChecked(slice-&gt;isLabelVisible());
    m_sliceLabelVisible-&gt;blockSignals(false);
    m_sliceLabelArmFactor-&gt;blockSignals(true);
    m_sliceLabelArmFactor-&gt;setValue(slice-&gt;labelArmLengthFactor());
    m_sliceLabelArmFactor-&gt;blockSignals(false);
    m_labelPosition-&gt;blockSignals(true);
    m_labelPosition-&gt;setCurrentIndex(slice-&gt;labelPosition()); // assumes that index is in sync with the enum
    m_labelPosition-&gt;blockSignals(false);

    // exploded
    m_sliceExploded-&gt;blockSignals(true);
    m_sliceExploded-&gt;setChecked(slice-&gt;isExploded());
    m_sliceExploded-&gt;blockSignals(false);
    m_sliceExplodedFactor-&gt;blockSignals(true);
    m_sliceExplodedFactor-&gt;setValue(slice-&gt;explodeDistanceFactor());
    m_sliceExplodedFactor-&gt;blockSignals(false);
}

void MainWidget::showFontDialog()
{
    if (!m_slice)
        return;

    QFontDialog dialog(m_slice-&gt;labelFont());
    dialog.show();
    dialog.exec();

    m_slice-&gt;setLabelFont(dialog.currentFont());
    m_font-&gt;setText(dialog.currentFont().toString());
}

void MainWidget::appendSlice()
{
    *m_series &lt;&lt; new CustomSlice(&quot;Slice &quot; + QString::number(m_series-&gt;count() + 1), 10.0);
}

void MainWidget::insertSlice()
{
    if (!m_slice)
        return;

    int i = m_series-&gt;slices().indexOf(m_slice);

    m_series-&gt;insert(i, new CustomSlice(&quot;Slice &quot; + QString::number(m_series-&gt;count() + 1), 10.0));
}

void MainWidget::removeSlice()
{
    if (!m_slice)
        return;

    m_sliceName-&gt;setText(&quot;&lt;click a slice&gt;&quot;);

    m_series-&gt;remove(m_slice);
    m_slice = 0;
}

#include &quot;moc_mainwidget.cpp&quot;

</db:programlisting>
</db:article>
