<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QImageEncoderSettings Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qimageencodersettings.xml">QImageEncoderSettings</db:link> class provides a set of image encoder settings.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QImageEncoderSettings</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QImageEncoderSettings is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_camera</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A image encoder settings object is used to specify the image encoder settings used by <db:link xlink:href="qcameraimagecapture.xml">QCameraImageCapture</db:link>. Image encoder settings are selected by constructing a <db:link xlink:href="qimageencodersettings.xml">QImageEncoderSettings</db:link> object, setting the desired properties and then passing it to a <db:link xlink:href="qcameraimagecapture.xml">QCameraImageCapture</db:link> instance using the QCameraImageCapture::setImageSettings() function.</db:para>
<db:programlisting language="cpp">QImageEncoderSettings imageSettings;
imageSettings.setCodec(&quot;image/jpeg&quot;);
imageSettings.setResolution(1600, 1200);

imageCapture-&gt;setEncodingSettings(imageSettings);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimageencodercontrol.xml">QImageEncoderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QImageEncoderSettings">
<db:title>QImageEncoderSettings::QImageEncoderSettings()</db:title>
<db:para>Constructs a null image encoder settings object.</db:para>
</db:section>
<db:section xml:id="QImageEncoderSettings-1">
<db:title>QImageEncoderSettings::QImageEncoderSettings(const QImageEncoderSettings &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of the image encoder settings object <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QImageEncoderSettings">
<db:title>[noexcept] QImageEncoderSettings::~QImageEncoderSettings()</db:title>
<db:para>Destroys a image encoder settings object.</db:para>
</db:section>
<db:section xml:id="codec">
<db:title>QString QImageEncoderSettings::codec() const</db:title>
<db:para>Returns the image codec.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimageencodersettings.xml#setCodec">setCodec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="encodingOption">
<db:title>QVariant QImageEncoderSettings::encodingOption(const QString &amp;<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Returns the value of encoding <db:code role="parameter">option</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimageencodersettings.xml#setEncodingOption">setEncodingOption</db:link>()</db:member>
<db:member><db:link xlink:href="qimageencodersettings.xml#encodingOptions">encodingOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="encodingOptions">
<db:title>QVariantMap QImageEncoderSettings::encodingOptions() const</db:title>
<db:para>Returns the all the encoding options as <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimageencodersettings.xml#encodingOption">encodingOption</db:link>()</db:member>
<db:member><db:link xlink:href="qimageencodersettings.xml#setEncodingOptions">setEncodingOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QImageEncoderSettings::isNull() const</db:title>
<db:para>Identifies if a image encoder settings object is uninitalized.</db:para>
<db:para>Returns true if the settings are null, and false if they are not.</db:para>
</db:section>
<db:section xml:id="quality">
<db:title>QMultimedia::EncodingQuality QImageEncoderSettings::quality() const</db:title>
<db:para>Returns the image encoding quality.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimageencodersettings.xml#setQuality">setQuality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resolution">
<db:title>QSize QImageEncoderSettings::resolution() const</db:title>
<db:para>Returns the resolution of the encoded image.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimageencodersettings.xml#setResolution">setResolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCodec">
<db:title>void QImageEncoderSettings::setCodec(const QString &amp;<db:emphasis>codec</db:emphasis>)</db:title>
<db:para>Sets the image <db:code role="parameter">codec</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimageencodersettings.xml#codec">codec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEncodingOption">
<db:title>void QImageEncoderSettings::setEncodingOption(const QString &amp;<db:emphasis>option</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Set the encoding <db:code role="parameter">option</db:code> <db:code role="parameter">value</db:code>.</db:para>
<db:para>The supported set and meaning of encoding options are system and selected codec specific.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimageencodersettings.xml#encodingOption">encodingOption</db:link>()</db:member>
<db:member><db:link xlink:href="qimageencodersettings.xml#setEncodingOptions">setEncodingOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEncodingOptions">
<db:title>void QImageEncoderSettings::setEncodingOptions(const QVariantMap &amp;<db:emphasis>options</db:emphasis>)</db:title>
<db:para>Replace all the encoding options with <db:code role="parameter">options</db:code>.</db:para>
<db:para>The supported set and meaning of encoding options are system and selected codec specific.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimageencodersettings.xml#encodingOptions">encodingOptions</db:link>()</db:member>
<db:member><db:link xlink:href="qimageencodersettings.xml#encodingOption">encodingOption</db:link>()</db:member>
<db:member><db:link xlink:href="qimageencodersettings.xml#setEncodingOption">setEncodingOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setQuality">
<db:title>void QImageEncoderSettings::setQuality(QMultimedia::EncodingQuality <db:emphasis>quality</db:emphasis>)</db:title>
<db:para>Sets the image encoding <db:code role="parameter">quality</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimageencodersettings.xml#quality">quality</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResolution">
<db:title>void QImageEncoderSettings::setResolution(const QSize &amp;<db:emphasis>resolution</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">resolution</db:code> of the encoded image.</db:para>
<db:para>An empty <db:link xlink:href="qsize.xml">QSize</db:link> indicates the encoder should make an optimal choice based on what is available from the image source and the limitations of the codec.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimageencodersettings.xml#resolution">resolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResolution-1">
<db:title>void QImageEncoderSettings::setResolution(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code> of the resolution of the encoded image.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QImageEncoderSettings::operator!=(const QImageEncoderSettings &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Determines if <db:code role="parameter">other</db:code> is of equal value to a image encoder settings object.</db:para>
<db:para>Returns true if the settings objects are not of equal value, and false if they are of equal value.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QImageEncoderSettings &amp;QImageEncoderSettings::operator=(const QImageEncoderSettings &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the value of <db:code role="parameter">other</db:code> to a image encoder settings object.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QImageEncoderSettings::operator==(const QImageEncoderSettings &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Determines if <db:code role="parameter">other</db:code> is of equal value to a image encoder settings object.</db:para>
<db:para>Returns true if the settings objects are of equal value, and false if they are not of equal value.</db:para>
</db:section>
</db:section>
</db:article>
