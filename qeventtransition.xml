<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QEventTransition Class</db:title>
<db:productname>QtStateMachine</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt State Machine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qeventtransition.xml">QEventTransition</db:link> class provides a <db:link xlink:href="qobject.xml">QObject</db:link>-specific transition for Qt events.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QEventTransition</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS StateMachine)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::StateMachine)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += statemachine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstracttransition.xml" xlink:role="class">QAbstractTransition</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qkeyeventtransition.xml" xlink:role="class">QKeyEventTransition</db:link> and <db:link xlink:href="qmouseeventtransition.xml" xlink:role="class">QMouseEventTransition</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QEventTransition is part of <db:simplelist><db:member>statemachine</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qeventtransition.xml">QEventTransition</db:link> object binds an event to a particular <db:link xlink:href="qobject.xml">QObject</db:link>. <db:link xlink:href="qeventtransition.xml">QEventTransition</db:link> is part of <db:link xlink:href="qtstatemachine-overview.xml">Qt State Machine Framework</db:link>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QPushButton *button = ...;
QState *s1 = ...;
QState *s2 = ...;
// If in s1 and the button receives an Enter event, transition to s2
QEventTransition *enterTransition = new QEventTransition(button, QEvent::Enter);
enterTransition-&amp;gt;setTargetState(s2);
s1-&amp;gt;addTransition(enterTransition);
// If in s2 and the button receives an Exit event, transition back to s1
QEventTransition *leaveTransition = new QEventTransition(button, QEvent::Leave);
leaveTransition-&amp;gt;setTargetState(s1);
s2-&amp;gt;addTransition(leaveTransition);
</db:programlisting>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>When reimplementing the <db:link xlink:href="qeventtransition.xml#eventTest">eventTest</db:link>() function, you should first call the base implementation to verify that the event is a <db:link xlink:href="qstatemachine-wrappedevent.xml">QStateMachine::WrappedEvent</db:link> for the proper object and event type. You may then cast the event to a <db:link xlink:href="qstatemachine-wrappedevent.xml">QStateMachine::WrappedEvent</db:link> and get the original event by calling <db:link xlink:href="qstatemachine-wrappedevent.xml#event">QStateMachine::WrappedEvent::event</db:link>(), and perform additional checks on that object.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#addTransition">QState::addTransition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="eventSource-prop">
<db:title>[bindable] eventSource : QObject*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QObject*</db:type>
<db:varname>eventSource</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">eventSource</db:synopsisinfo>
<db:synopsisinfo role="setter">setEventSource</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the event source that this event transition is associated with</db:para>
</db:section>
<db:section xml:id="eventType-prop">
<db:title>[bindable] eventType : QEvent::Type</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QEvent::Type</db:type>
<db:varname>eventType</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">eventType</db:synopsisinfo>
<db:synopsisinfo role="setter">setEventType</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the type of event that this event transition is associated with</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QEventTransition">
<db:title>QEventTransition::QEventTransition(QState *<db:emphasis>sourceState</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QEventTransition</db:methodname>
<db:methodparam>
<db:type>QState *</db:type>
<db:parameter>sourceState</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QEventTransition(QState *sourceState)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qeventtransition.xml">QEventTransition</db:link> object with the given <db:code role="parameter">sourceState</db:code>.</db:para>
</db:section>
<db:section xml:id="QEventTransition-1">
<db:title>QEventTransition::QEventTransition(QObject *<db:emphasis>object</db:emphasis>, QEvent::Type <db:emphasis>type</db:emphasis>, QState *<db:emphasis>sourceState</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QEventTransition</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QEvent::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QState *</db:type>
<db:parameter>sourceState</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QEventTransition(QObject *object, QEvent::Type type, QState *sourceState)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qeventtransition.xml">QEventTransition</db:link> object associated with events of the given <db:code role="parameter">type</db:code> for the given <db:code role="parameter">object</db:code>, and with the given <db:code role="parameter">sourceState</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QEventTransition">
<db:title>[virtual] QEventTransition::~QEventTransition()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QEventTransition</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QEventTransition()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this <db:link xlink:href="qobject.xml">QObject</db:link> event transition.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QEventTransition::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstracttransition.xml#event" role="function">QAbstractTransition::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventSource">
<db:title>QObject *QEventTransition::eventSource() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>eventSource</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">eventSource</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * eventSource() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the event source associated with this event transition.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qeventtransition.xml#eventSource-prop">eventSource</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventtransition.xml#setEventSource">setEventSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="eventTest">
<db:title>[override virtual protected] bool QEventTransition::eventTest(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>eventTest</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool eventTest(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstracttransition.xml#eventTest" role="function">QAbstractTransition::eventTest(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventType">
<db:title>QEvent::Type QEventTransition::eventType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QEvent::Type</db:type>
<db:methodname>eventType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">eventType</db:synopsisinfo>
<db:synopsisinfo role="signature">QEvent::Type eventType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the event type that this event transition is associated with.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qeventtransition.xml#eventType-prop">eventType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventtransition.xml#setEventType">setEventType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="onTransition">
<db:title>[override virtual protected] void QEventTransition::onTransition(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>onTransition</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void onTransition(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstracttransition.xml#onTransition" role="function">QAbstractTransition::onTransition(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="setEventSource">
<db:title>void QEventTransition::setEventSource(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEventSource</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">eventSource</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEventSource(QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the event source associated with this event transition to be the given <db:code role="parameter">object</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qeventtransition.xml#eventSource-prop">eventSource</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventtransition.xml#eventSource">eventSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEventType">
<db:title>void QEventTransition::setEventType(QEvent::Type <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEventType</db:methodname>
<db:methodparam>
<db:type>QEvent::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">eventType</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEventType(QEvent::Type type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the event <db:code role="parameter">type</db:code> that this event transition is associated with.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qeventtransition.xml#eventType-prop">eventType</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventtransition.xml#eventType">eventType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
