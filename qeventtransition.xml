<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QEventTransition Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qeventtransition.xml">QEventTransition</db:link> class provides a <db:link xlink:href="qobject.xml">QObject</db:link>-specific transition for Qt events.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QEventTransition</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstracttransition.xml" xlink:role="class">QAbstractTransition</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QEventTransition is part of <db:simplelist><db:member><db:link xlink:href="statemachine.xml">State Machine Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qeventtransition.xml">QEventTransition</db:link> object binds an event to a particular <db:link xlink:href="qobject.xml">QObject</db:link>. <db:link xlink:href="qeventtransition.xml">QEventTransition</db:link> is part of <db:link xlink:href="statemachine-api.xml">The State Machine Framework</db:link>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QPushButton *button = ...;
QState *s1 = ...;
QState *s2 = ...;
// If in s1 and the button receives an Enter event, transition to s2
QEventTransition *enterTransition = new QEventTransition(button, QEvent::Enter);
enterTransition-&gt;setTargetState(s2);
s1-&gt;addTransition(enterTransition);
// If in s2 and the button receives an Exit event, transition back to s1
QEventTransition *leaveTransition = new QEventTransition(button, QEvent::Leave);
leaveTransition-&gt;setTargetState(s1);
s2-&gt;addTransition(leaveTransition);
</db:programlisting>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:para>When reimplementing the <db:link xlink:href="qeventtransition.xml#eventTest">eventTest</db:link>() function, you should first call the base implementation to verify that the event is a <db:link xlink:href="qstatemachine-wrappedevent.xml">QStateMachine::WrappedEvent</db:link> for the proper object and event type. You may then cast the event to a <db:link xlink:href="qstatemachine-wrappedevent.xml">QStateMachine::WrappedEvent</db:link> and get the original event by calling <db:link xlink:href="qstatemachine-wrappedevent.xml#event">QStateMachine::WrappedEvent::event</db:link>(), and perform additional checks on that object.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstate.xml#addTransition">QState::addTransition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QEventTransition">
<db:title>QEventTransition::QEventTransition(QState *<db:emphasis>sourceState</db:emphasis> = 0)</db:title>
<db:para>Constructs a new <db:link xlink:href="qeventtransition.xml">QEventTransition</db:link> object with the given <db:code role="parameter">sourceState</db:code>.</db:para>
</db:section>
<db:section xml:id="QEventTransition-1">
<db:title>QEventTransition::QEventTransition(QObject *<db:emphasis>object</db:emphasis>, int <db:emphasis>type</db:emphasis>, QState *<db:emphasis>sourceState</db:emphasis> = 0)</db:title>
<db:para>Constructs a new <db:link xlink:href="qeventtransition.xml">QEventTransition</db:link> object associated with events of the given <db:code role="parameter">type</db:code> for the given <db:code role="parameter">object</db:code>, and with the given <db:code role="parameter">sourceState</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QEventTransition">
<db:title>[virtual noexcept] QEventTransition::~QEventTransition()</db:title>
<db:para>Destroys this <db:link xlink:href="qobject.xml">QObject</db:link> event transition.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QEventTransition::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstracttransition.xml#event" role="function">QAbstractTransition::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventSource">
<db:title>QObject *QEventTransition::eventSource() const</db:title>
<db:para>Returns the event source associated with this event transition.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventtransition.xml#setEventSource">setEventSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="eventTest">
<db:title>[override virtual protected] bool QEventTransition::eventTest(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstracttransition.xml#eventTest" role="function">QAbstractTransition::eventTest(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventType">
<db:title>int QEventTransition::eventType() const</db:title>
<db:para>Returns the event type that this event transition is associated with.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventtransition.xml#setEventType">setEventType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="onTransition">
<db:title>[override virtual protected] void QEventTransition::onTransition(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstracttransition.xml#onTransition" role="function">QAbstractTransition::onTransition(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="setEventSource">
<db:title>void QEventTransition::setEventSource(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Sets the event source associated with this event transition to be the given <db:code role="parameter">object</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventtransition.xml#eventSource">eventSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEventType">
<db:title>void QEventTransition::setEventType(int <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Sets the event <db:code role="parameter">type</db:code> that this event transition is associated with.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventtransition.xml#eventType">eventType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
