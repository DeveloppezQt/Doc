<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPoint Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpoint.xml">QPoint</db:link> class defines a point in the plane using integer precision.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPoint</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPoint is part of <db:simplelist><db:member>painting</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A point is specified by a x coordinate and an y coordinate which can be accessed using the <db:link xlink:href="qpoint.xml#x">x</db:link>() and <db:link xlink:href="qpoint.xml#y">y</db:link>() functions. The <db:link xlink:href="qpoint.xml#isNull">isNull</db:link>() function returns true if both x and y are set to 0. The coordinates can be set (or altered) using the <db:link xlink:href="qpoint.xml#setX">setX</db:link>() and <db:link xlink:href="qpoint.xml#setY">setY</db:link>() functions, or alternatively the <db:link xlink:href="qpoint.xml#rx">rx</db:link>() and <db:link xlink:href="qpoint.xml#ry">ry</db:link>() functions which return references to the coordinates (allowing direct manipulation).</db:para>
<db:para>Given a point <db:emphasis>p</db:emphasis>, the following statements are all equivalent:</db:para>
<db:programlisting language="cpp">QPoint p;

p.setX(p.x() + 1);
p += QPoint(1, 0);
p.rx()++;
</db:programlisting>
<db:para>A <db:link xlink:href="qpoint.xml">QPoint</db:link> object can also be used as a vector: Addition and subtraction are defined as for vectors (each component is added separately). A <db:link xlink:href="qpoint.xml">QPoint</db:link> object can also be divided or multiplied by an int or a qreal.</db:para>
<db:para>In addition, the <db:link xlink:href="qpoint.xml">QPoint</db:link> class provides the <db:link xlink:href="qpoint.xml#manhattanLength">manhattanLength</db:link>() function which gives an inexpensive approximation of the length of the <db:link xlink:href="qpoint.xml">QPoint</db:link> object interpreted as a vector. Finally, <db:link xlink:href="qpoint.xml">QPoint</db:link> objects can be streamed as well as compared.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointf.xml">QPointF</db:link></db:member>
<db:member>QPolygon</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPoint">
<db:title>[constexpr] QPoint::QPoint()</db:title>
<db:para>Constructs a null point, i.e. with coordinates (0, 0)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPoint-1">
<db:title>[constexpr] QPoint::QPoint(int <db:emphasis>xpos</db:emphasis>, int <db:emphasis>ypos</db:emphasis>)</db:title>
<db:para>Constructs a point with the given coordinates (<db:code role="parameter">xpos</db:code>, <db:code role="parameter">ypos</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qpoint.xml#setY">setY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dotProduct">
<db:title>[static constexpr, since 5.1] int QPoint::dotProduct(const QPoint &amp;<db:emphasis>p1</db:emphasis>, const QPoint &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:programlisting language="cpp">QPoint p( 3, 7);
QPoint q(-1, 4);
int lengthSquared = QPoint::dotProduct(p, q);   // lengthSquared becomes 25
</db:programlisting>
<db:para>Returns the dot product of <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>[constexpr] bool QPoint::isNull() const</db:title>
<db:para>Returns true if both the x and y coordinates are set to 0, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="manhattanLength">
<db:title>[constexpr] int QPoint::manhattanLength() const</db:title>
<db:para>Returns the sum of the absolute values of <db:link xlink:href="qpoint.xml#x">x</db:link>() and <db:link xlink:href="qpoint.xml#y">y</db:link>(), traditionally known as the &quot;Manhattan length&quot; of the vector from the origin to the point. For example:</db:para>
<db:programlisting language="cpp">QPoint oldPosition;

MyWidget::mouseMoveEvent(QMouseEvent *event)
{
    QPoint point = event-&gt;pos() - oldPosition;
    if (point.manhattanLength() &gt; 3)
        // the mouse has moved more than 3 pixels since the oldPosition
}
</db:programlisting>
<db:para>This is a useful, and quick to calculate, approximation to the true length:</db:para>
<db:programlisting language="cpp">double trueLength = std::sqrt(std::pow(x(), 2) + std::pow(y(), 2));
</db:programlisting>
<db:para>The tradition of &quot;Manhattan length&quot; arises because such distances apply to travelers who can only travel on a rectangular grid, like the streets of Manhattan.</db:para>
</db:section>
<db:section xml:id="rx">
<db:title>[constexpr] int &amp;QPoint::rx()</db:title>
<db:para>Returns a reference to the x coordinate of this point.</db:para>
<db:para>Using a reference makes it possible to directly manipulate x. For example:</db:para>
<db:programlisting language="cpp">QPoint p(1, 2);
p.rx()--;   // p becomes (0, 2)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qpoint.xml#setX">setX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ry">
<db:title>[constexpr] int &amp;QPoint::ry()</db:title>
<db:para>Returns a reference to the y coordinate of this point.</db:para>
<db:para>Using a reference makes it possible to directly manipulate y. For example:</db:para>
<db:programlisting language="cpp">QPoint p(1, 2);
p.ry()++;   // p becomes (1, 3)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qpoint.xml#setY">setY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setX">
<db:title>[constexpr] void QPoint::setX(int <db:emphasis>x</db:emphasis>)</db:title>
<db:para>Sets the x coordinate of this point to the given <db:code role="parameter">x</db:code> coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qpoint.xml#setY">setY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setY">
<db:title>[constexpr] void QPoint::setY(int <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Sets the y coordinate of this point to the given <db:code role="parameter">y</db:code> coordinate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qpoint.xml#setX">setX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="x">
<db:title>[constexpr] int QPoint::x() const</db:title>
<db:para>Returns the x coordinate of this point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#setX">setX</db:link>()</db:member>
<db:member><db:link xlink:href="qpoint.xml#rx">rx</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="y">
<db:title>[constexpr] int QPoint::y() const</db:title>
<db:para>Returns the y coordinate of this point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#setY">setY</db:link>()</db:member>
<db:member><db:link xlink:href="qpoint.xml#ry">ry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-eq">
<db:title>[constexpr] QPoint &amp;QPoint::operator*=(double <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Multiplies this point's coordinates by the given <db:code role="parameter">factor</db:code>, and returns a reference to this point. For example:</db:para>
<db:programlisting language="cpp">QPoint p(-1, 4);
p *= 2.5;    // p becomes (-3, 10)
</db:programlisting>
<db:para>Note that the result is rounded to the nearest integer as points are held as integers. Use <db:link xlink:href="qpointf.xml">QPointF</db:link> for floating point accuracy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator-2f-eq">operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-eq-1">
<db:title>[constexpr] QPoint &amp;QPoint::operator*=(float <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Multiplies this point's coordinates by the given <db:code role="parameter">factor</db:code>, and returns a reference to this point.</db:para>
<db:para>Note that the result is rounded to the nearest integer as points are held as integers. Use <db:link xlink:href="qpointf.xml">QPointF</db:link> for floating point accuracy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator-2f-eq">operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-eq-2">
<db:title>[constexpr] QPoint &amp;QPoint::operator*=(int <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Multiplies this point's coordinates by the given <db:code role="parameter">factor</db:code>, and returns a reference to this point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator-2f-eq">operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>[constexpr] QPoint &amp;QPoint::operator+=(const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">point</db:code> to this point and returns a reference to this point. For example:</db:para>
<db:programlisting language="cpp">QPoint p( 3, 7);
QPoint q(-1, 4);
p += q;    // p becomes (2, 11)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--eq">
<db:title>[constexpr] QPoint &amp;QPoint::operator-=(const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Subtracts the given <db:code role="parameter">point</db:code> from this point and returns a reference to this point. For example:</db:para>
<db:programlisting language="cpp">QPoint p( 3, 7);
QPoint q(-1, 4);
p -= q;    // p becomes (4, 3)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-eq">
<db:title>[constexpr] QPoint &amp;QPoint::operator/=(qreal <db:emphasis>divisor</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Divides both x and y by the given <db:code role="parameter">divisor</db:code>, and returns a reference to this point. For example:</db:para>
<db:programlisting language="cpp">QPoint p(-3, 10);
p /= 2.5;           // p becomes (-1, 4)
</db:programlisting>
<db:para>Note that the result is rounded to the nearest integer as points are held as integers. Use <db:link xlink:href="qpointf.xml">QPointF</db:link> for floating point accuracy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator-2a-eq">operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq-1">
<db:title>[constexpr] bool operator!=(const QPoint &amp;<db:emphasis>p1</db:emphasis>, const QPoint &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code> are not equal; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-2a-6">
<db:title>[constexpr] const QPoint operator*(const QPoint &amp;<db:emphasis>point</db:emphasis>, double <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Returns a copy of the given <db:code role="parameter">point</db:code> multiplied by the given <db:code role="parameter">factor</db:code>.</db:para>
<db:para>Note that the result is rounded to the nearest integer as points are held as integers. Use <db:link xlink:href="qpointf.xml">QPointF</db:link> for floating point accuracy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator-2a-eq">QPoint::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-7">
<db:title>[constexpr] const QPoint operator*(const QPoint &amp;<db:emphasis>point</db:emphasis>, float <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Returns a copy of the given <db:code role="parameter">point</db:code> multiplied by the given <db:code role="parameter">factor</db:code>.</db:para>
<db:para>Note that the result is rounded to the nearest integer as points are held as integers. Use <db:link xlink:href="qpointf.xml">QPointF</db:link> for floating point accuracy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator-2a-eq">QPoint::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-8">
<db:title>[constexpr] const QPoint operator*(const QPoint &amp;<db:emphasis>point</db:emphasis>, int <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Returns a copy of the given <db:code role="parameter">point</db:code> multiplied by the given <db:code role="parameter">factor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator-2a-eq">QPoint::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-9">
<db:title>[constexpr] const QPoint operator*(double <db:emphasis>factor</db:emphasis>, const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a copy of the given <db:code role="parameter">point</db:code> multiplied by the given <db:code role="parameter">factor</db:code>.</db:para>
<db:para>Note that the result is rounded to the nearest integer as points are held as integers. Use <db:link xlink:href="qpointf.xml">QPointF</db:link> for floating point accuracy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator-2a-eq">QPoint::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-10">
<db:title>[constexpr] const QPoint operator*(float <db:emphasis>factor</db:emphasis>, const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a copy of the given <db:code role="parameter">point</db:code> multiplied by the given <db:code role="parameter">factor</db:code>.</db:para>
<db:para>Note that the result is rounded to the nearest integer as points are held as integers. Use <db:link xlink:href="qpointf.xml">QPointF</db:link> for floating point accuracy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator-2a-eq">QPoint::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-11">
<db:title>[constexpr] const QPoint operator*(int <db:emphasis>factor</db:emphasis>, const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a copy of the given <db:code role="parameter">point</db:code> multiplied by the given <db:code role="parameter">factor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator-2a-eq">QPoint::operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2">
<db:title>[constexpr, since 5.0] const QPoint operator+(const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Returns <db:code role="parameter">point</db:code> unmodified.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="operator-2b-3">
<db:title>[constexpr] const QPoint operator+(const QPoint &amp;<db:emphasis>p1</db:emphasis>, const QPoint &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qpoint.xml">QPoint</db:link> object that is the sum of the given points, <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code>; each component is added separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator-2b-eq">QPoint::operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--2">
<db:title>[constexpr] const QPoint operator-(const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qpoint.xml">QPoint</db:link> object that is formed by changing the sign of both components of the given <db:code role="parameter">point</db:code>.</db:para>
<db:para>Equivalent to QPoint(0,0) - point.</db:para>
</db:section>
<db:section xml:id="operator--3">
<db:title>[constexpr] const QPoint operator-(const QPoint &amp;<db:emphasis>p1</db:emphasis>, const QPoint &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qpoint.xml">QPoint</db:link> object that is formed by subtracting <db:code role="parameter">p2</db:code> from <db:code role="parameter">p1</db:code>; each component is subtracted separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator--eq">QPoint::operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-1">
<db:title>[constexpr] const QPoint operator/(const QPoint &amp;<db:emphasis>point</db:emphasis>, qreal <db:emphasis>divisor</db:emphasis>)</db:title>
<db:para>Returns the <db:link xlink:href="qpoint.xml">QPoint</db:link> formed by dividing both components of the given <db:code role="parameter">point</db:code> by the given <db:code role="parameter">divisor</db:code>.</db:para>
<db:para>Note that the result is rounded to the nearest integer as points are held as integers. Use <db:link xlink:href="qpointf.xml">QPointF</db:link> for floating point accuracy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpoint.xml#operator-2f-eq">QPoint::operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-10">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Writes the given <db:code role="parameter">point</db:code> to the given <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>[constexpr] bool operator==(const QPoint &amp;<db:emphasis>p1</db:emphasis>, const QPoint &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code> are equal; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-10">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:para>Reads a point from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">point</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
