<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVideoProbe Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvideoprobe.xml">QVideoProbe</db:link> class allows you to monitor video frames being played or recorded.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVideoProbe</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QVideoProbe is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_video</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:programlisting language="cpp">QMediaPlayer *player = new QMediaPlayer();
QVideoProbe *probe = new QVideoProbe;

connect(probe, SIGNAL(videoFrameProbed(QVideoFrame)), this, SLOT(processFrame(QVideoFrame)));

probe-&amp;gt;setSource(player); // Returns true, hopefully.

player-&amp;gt;setVideoOutput(myVideoSurface);
player-&amp;gt;setMedia(QUrl::fromLocalFile(&quot;observation.mp4&quot;));
player-&amp;gt;play(); // Start receiving frames as they get presented to myVideoSurface
</db:programlisting>
<db:para>This same approach works with the <db:link xlink:href="qcamera.xml">QCamera</db:link> object as well, to receive viewfinder or video frames as they are captured.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudioprobe.xml">QAudioProbe</db:link></db:member>
<db:member><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:member>
<db:member><db:link xlink:href="qcamera.xml">QCamera</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QVideoProbe">
<db:title>[explicit] QVideoProbe::QVideoProbe(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QVideoProbe</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoProbe(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new <db:link xlink:href="qvideoprobe.xml">QVideoProbe</db:link> class with <db:code role="parameter">parent</db:code>. After setting the source to monitor with <db:link xlink:href="qvideoprobe.xml#setSource">setSource</db:link>(), the <db:link xlink:href="qvideoprobe.xml#videoFrameProbed">videoFrameProbed</db:link>() signal will be emitted when video frames are flowing in the source media object.</db:para>
</db:section>
<db:section xml:id="dtor.QVideoProbe">
<db:title>[virtual] QVideoProbe::~QVideoProbe()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QVideoProbe</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QVideoProbe()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this probe and disconnects from any media object.</db:para>
</db:section>
<db:section xml:id="flush">
<db:title>void QVideoProbe::flush()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>flush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void flush()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal should be emitted when it is required to release all frames. Application must release all outstanding references to video frames.</db:para>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QVideoProbe::isActive() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isActive</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isActive() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this probe is monitoring something, or false otherwise.</db:para>
<db:para>The source being monitored does not need to be active.</db:para>
</db:section>
<db:section xml:id="setSource">
<db:title>bool QVideoProbe::setSource(QMediaObject *<db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setSource</db:methodname>
<db:methodparam>
<db:type>QMediaObject *</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setSource(QMediaObject *source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the media object to monitor to <db:code role="parameter">source</db:code>.</db:para>
<db:para>If <db:code role="parameter">source</db:code> is zero, this probe will be deactivated and this function wil return true.</db:para>
<db:para>If the media object does not support monitoring video, this function will return false.</db:para>
<db:para>Any previously monitored objects will no longer be monitored. Passing in the same object will be ignored, but monitoring will continue.</db:para>
</db:section>
<db:section xml:id="setSource-1">
<db:title>bool QVideoProbe::setSource(QMediaRecorder *<db:emphasis>mediaRecorder</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setSource</db:methodname>
<db:methodparam>
<db:type>QMediaRecorder *</db:type>
<db:parameter>mediaRecorder</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setSource(QMediaRecorder *mediaRecorder)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts monitoring the given <db:code role="parameter">mediaRecorder</db:code>.</db:para>
<db:para>If there is no mediaObject associated with <db:code role="parameter">mediaRecorder</db:code>, or if it is zero, this probe will be deactivated and this function wil return true.</db:para>
<db:para>If the media recorder instance does not support monitoring video, this function will return false.</db:para>
<db:para>Any previously monitored objects will no longer be monitored. Passing in the same object will be ignored, but monitoring will continue.</db:para>
</db:section>
<db:section xml:id="videoFrameProbed">
<db:title>void QVideoProbe::videoFrameProbed(const QVideoFrame &amp;<db:emphasis>frame</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>videoFrameProbed</db:methodname>
<db:methodparam>
<db:type>const QVideoFrame &amp;</db:type>
<db:parameter>frame</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void videoFrameProbed(const QVideoFrame &amp;frame)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal should be emitted when a video <db:code role="parameter">frame</db:code> is processed in the media service.</db:para>
</db:section>
</db:section>
</db:article>
