<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Creating and Using Components for Qt Designer</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>How to create and use custom widget plugins.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="creating-custom-widget-plugins">
<db:title>Creating Custom Widget Plugins</db:title>
<db:para>When implementing a custom widget plugin for <db:emphasis>Qt Designer</db:emphasis>, you must subclass <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> to expose your custom widget to <db:emphasis>Qt Designer</db:emphasis>. A single custom widget plugin is built as a separate library. If you want to include several custom widget plugins in the same library, you must in addition subclass <db:link xlink:href="qdesignercustomwidgetcollectioninterface.xml">QDesignerCustomWidgetCollectionInterface</db:link>.</db:para>
<db:para>To provide your custom widget plugin with the expected behavior and functionality within <db:emphasis>Qt Designer</db:emphasis>'s workspace you can subclass the associated extension classes:</db:para>
<db:para>The <db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link> class allows you to add pages to a custom multi-page container. The <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> class allows you to add custom menu entries to <db:emphasis>Qt Designer</db:emphasis>'s task menu. The <db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link> class allows you to manipulate a widget's member functions which is displayed when configuring connections using <db:emphasis>Qt Designer</db:emphasis>'s mode for editing signals and slots. And finally, the <db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link> class allows you to manipulate a widget's properties which is displayed in <db:emphasis>Qt Designer</db:emphasis>'s property editor.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtdesignerextensions.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In <db:emphasis>Qt Designer</db:emphasis> the extensions are not created until they are required. For that reason, when implementing extensions, you must also subclass <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link>, i.e create a class that is able to make instances of your extensions. In addition, you must make <db:emphasis>Qt Designer</db:emphasis>'s extension manager register your factory; the extension manager controls the construction of extensions as they are required, and you can access it through <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> and <db:link xlink:href="qextensionmanager.xml">QExtensionManager</db:link>.</db:para>
<db:para>For a complete example creating a custom widget plugin with an extension, see the <db:link xlink:href="qtdesigner-taskmenuextension-example.xml">Task Menu Extension</db:link> or <db:link xlink:href="qtdesigner-containerextension-example.xml">Container Extension</db:link> examples.</db:para>
</db:section>
<db:section xml:id="retrieving-access-to-qt-designer-components">
<db:title>Retrieving Access to <db:emphasis>Qt Designer</db:emphasis> Components</db:title>
<db:para>The purpose of the classes mentioned in this section is to provide access to <db:emphasis>Qt Designer</db:emphasis>'s components, managers and workspace, and they are not intended to be instantiated directly.</db:para>
<db:para><db:emphasis>Qt Designer</db:emphasis> is composed by several components. It has an action editor, a property editor, widget box and object inspector which you can view in its workspace.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtdesignerscreenshot.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Qt Designer</db:emphasis> also has an object that works behind the scene; it contains the logic that integrates all of <db:emphasis>Qt Designer</db:emphasis>'s components into a coherent application. You can access this object, using the <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link>, to retrieve interfaces to <db:emphasis>Qt Designer</db:emphasis>'s components:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qdesigneractioneditorinterface.xml">QDesignerActionEditorInterface</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdesignerobjectinspectorinterface.xml">QDesignerObjectInspectorInterface</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdesignerpropertyeditorinterface.xml">QDesignerPropertyEditorInterface</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdesignerwidgetboxinterface.xml">QDesignerWidgetBoxInterface</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In addition, you can use <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> to retrieve interfaces to <db:emphasis>Qt Designer</db:emphasis>'s extension manager (<db:link xlink:href="qextensionmanager.xml">QExtensionManager</db:link>) and form window manager (<db:link xlink:href="qdesignerformwindowmanagerinterface.xml">QDesignerFormWindowManagerInterface</db:link>). The extension manager controls the construction of extensions as they are required, while the form window manager controls the form windows appearing in <db:emphasis>Qt Designer</db:emphasis>'s workspace.</db:para>
<db:para>Once you have an interface to <db:emphasis>Qt Designer</db:emphasis>'s form window manager (<db:link xlink:href="qdesignerformwindowmanagerinterface.xml">QDesignerFormWindowManagerInterface</db:link>), you also have access to all the form windows currently appearing in <db:emphasis>Qt Designer</db:emphasis>'s workspace: The <db:link xlink:href="qdesignerformwindowinterface.xml">QDesignerFormWindowInterface</db:link> class allows you to query and manipulate the form windows, and it provides an interface to the form windows' cursors. <db:link xlink:href="qdesignerformwindowcursorinterface.xml">QDesignerFormWindowCursorInterface</db:link> is a convenience class allowing you to query and modify a given form window's widget selection, and in addition modify the properties of all the form's widgets.</db:para>
</db:section>
<db:section xml:id="creating-user-interfaces-at-run-time">
<db:title>Creating User Interfaces at Run-Time</db:title>
<db:para>The <db:code>QtDesigner</db:code> module contains the <db:link xlink:href="qformbuilder.xml">QFormBuilder</db:link> class that provides a mechanism for dynamically creating user interfaces at run-time, based on UI files created with <db:emphasis>Qt Designer</db:emphasis>. This class is typically used by custom components and applications that embed <db:emphasis>Qt Designer</db:emphasis>. Standalone applications that need to dynamically generate user interfaces at run-time use the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class, found in the <db:link xlink:href="qtuitools-module.xml">QtUiTools</db:link> module.</db:para>
<db:para>For a complete example using <db:link xlink:href="quiloader.xml">QUiLoader</db:link>, see the <db:link xlink:href="qtdesigner-calculatorbuilder-example.xml">Calculator Builder example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtdesigner-manual.xml">Qt Designer Manual</db:link></db:member>
<db:member><db:link xlink:href="qtuitools-index.xml">Qt UI Tools</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
