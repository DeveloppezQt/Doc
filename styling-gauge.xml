<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Styling Gauge</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Tutorial for styling the Gauge control.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>As <db:link xlink:href="qml-qtquick-controls-styles-gaugestyle.xml">GaugeStyle</db:link>'s documentation adequately covers common use cases, this tutorial will cover a different scenario: one where the gauge's tickmarks cover the value bar, instead of being aligned to the left or right of it.</db:para>
<db:anchor xml:id="styling-gauge-valuebar"/>
<db:section xml:id="the-value-bar-component">
<db:title>The Value Bar Component</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-controls-styles-gaugestyle.xml#valueBar-prop">valueBar</db:link> component is resized according to the gauge's value; if the value is low, the bar will be small, and vice versa.</db:para>
<db:para>Starting from the default style, we'll change the color of the value bar to orange, and increase its width slightly:</db:para>
<db:programlisting language="qml">valueBar: Rectangle {
    color: &quot;#e34c22&quot;
    implicitWidth: 28
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/styling-gauge-valueBar.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>As mentioned in the documentation for <db:link xlink:href="qml-qtquick-controls-styles-gaugestyle.xml">GaugeStyle</db:link>, <db:code>implicitWidth</db:code> needs to be set when defining your own value bar.</db:para>
<db:anchor xml:id="styling-gauge-foreground"/>
</db:section>
<db:section xml:id="the-foreground-component">
<db:title>The Foreground Component</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-controls-styles-gaugestyle.xml#foreground-prop">foreground</db:link> component covers the full width and height of the value bar, even when the value bar is not at its highest. By default, the foreground component provides a &quot;sheen&quot;. We'll choose to discard this, and leave it empty instead:</db:para>
<db:programlisting language="qml">foreground: null
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/styling-gauge-foreground.png"/>
</db:imageobject>
</db:mediaobject>
<db:anchor xml:id="styling-gauge-tickmark"/>
</db:section>
<db:section xml:id="the-tickmark-component">
<db:title>The Tickmark Component</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-controls-styles-gaugestyle.xml#tickmark-prop">tickmark</db:link> component sits to the left or right of the value bar, depending on the control's <db:link xlink:href="qml-qtquick-extras-gauge.xml#tickmarkAlignment-prop">tickmarkAlignment</db:link>. In order to have the tickmarks cover the width of the value bar instead, we need to do two things:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Remove the space the tickmarks previously assumed so that there is just enough space for margins between the tickmarks and value bar.</db:para>
</db:listitem>
<db:listitem>
<db:para>Position the tickmarks according to the control's orientation and tickmark alignment.</db:para>
</db:listitem>
</db:orderedlist>
<db:programlisting language="qml">tickmark: Item {
    implicitWidth: 8
    implicitHeight: 4

    Rectangle {
        x: control.tickmarkAlignment === Qt.AlignLeft
            || control.tickmarkAlignment === Qt.AlignTop ? parent.implicitWidth : -28
        width: 28
        height: parent.height
        color: &quot;#ffffff&quot;
    }
}
</db:programlisting>
<db:para>In this case we chose <db:code>8</db:code> pixel margins, so we set the <db:code>implicitWidth</db:code> of the tickmarks to that.</db:para>
<db:para>We account for every possible orientation and tickmark alignment, something that is not necessary if the gauge will only ever have one orientation and alignment. For example, if the gauge will always be of a vertical orientation and the tickmarks left-aligned, then it is enough to set the <db:code>x</db:code> property of the <db:code>Rectangle</db:code> to the following:</db:para>
<db:programlisting language="cpp">x: parent.implicitWidth
</db:programlisting>
<db:para>The value bar is <db:code>28</db:code> pixels wide, so we give the same width to our tickmarks so that they cover the width of it.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/styling-gauge-tickmark.png"/>
</db:imageobject>
</db:mediaobject>
<db:anchor xml:id="styling-gauge-minortickmark"/>
</db:section>
<db:section xml:id="the-minor-tickmark-component">
<db:title>The Minor Tickmark Component</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-controls-styles-gaugestyle.xml#minorTickmark-prop">minorTickmark</db:link> component is almost identical to its larger counterpart, except that its width does not affect the layout of the gauge's components. We'll do similar adjustments to the ones in the previous section - the only difference being the height:</db:para>
<db:programlisting language="qml">minorTickmark: Item {
    implicitWidth: 8
    implicitHeight: 2

    Rectangle {
        x: control.tickmarkAlignment === Qt.AlignLeft
            || control.tickmarkAlignment === Qt.AlignTop ? parent.implicitWidth : -28
        width: 28
        height: parent.height
        color: &quot;#ffffff&quot;
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/styling-gauge-minorTickmark.png"/>
</db:imageobject>
</db:mediaobject>
<db:anchor xml:id="styling-gauge-font-size"/>
</db:section>
<db:section xml:id="adjusting-font-size">
<db:title>Adjusting Font Size</db:title>
<db:para>Finally, we increase the <db:link xlink:href="qml-qtquick-extras-gauge.xml#font-prop">font</db:link> size to <db:code>15</db:code> pixels:</db:para>
<db:programlisting language="qml">font.pixelSize: 15
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/styling-gauge-font-size.png"/>
</db:imageobject>
</db:mediaobject>
<db:anchor xml:id="styling-gauge-complete"/>
</db:section>
<db:section xml:id="complete-source-code">
<db:title>Complete Source Code</db:title>
<db:programlisting language="qml">import QtQuick 2.2
import QtQuick.Controls 1.4
import QtQuick.Controls.Styles 1.4
import QtQuick.Extras 1.4

Rectangle {
    width: 100
    height: 220
    color: &quot;#494d53&quot;

    Gauge {
        value: 50
        tickmarkStepSize: 20
        minorTickmarkCount: 1
        font.pixelSize: 15
        anchors.centerIn: parent
        anchors.horizontalCenterOffset: -4

        style: GaugeStyle {
            valueBar: Rectangle {
                color: &quot;#e34c22&quot;
                implicitWidth: 28
            }

            foreground: null

            tickmark: Item {
                implicitWidth: 8
                implicitHeight: 4

                Rectangle {
                    x: control.tickmarkAlignment === Qt.AlignLeft
                        || control.tickmarkAlignment === Qt.AlignTop ? parent.implicitWidth : -28
                    width: 28
                    height: parent.height
                    color: &quot;#ffffff&quot;
                }
            }

            minorTickmark: Item {
                implicitWidth: 8
                implicitHeight: 2

                Rectangle {
                    x: control.tickmarkAlignment === Qt.AlignLeft
                        || control.tickmarkAlignment === Qt.AlignTop ? parent.implicitWidth : -28
                    width: 28
                    height: parent.height
                    color: &quot;#ffffff&quot;
                }
            }
        }
    }
}
</db:programlisting>
</db:section>
</db:article>
