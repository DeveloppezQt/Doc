<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Resource Compiler (rcc)</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The <db:code>rcc</db:code> tool is used to embed resources into a Qt application during the build process. It works by generating a C++ source file containing data specified in a Qt resource (.qrc) file.</db:para>
<db:para>Usage:</db:para>
<db:programlisting language="cpp">rcc [options] &amp;lt;inputs&amp;gt;
</db:programlisting>
<db:para>RCC accepts the following command line options:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Argument</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>-o</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>file</db:code></db:para>
</db:td>
<db:td>
<db:para>Write output to <db:code>file</db:code> rather than to stdout.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-name</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>name</db:code></db:para>
</db:td>
<db:td>
<db:para>Create an external initialization function with <db:code>name</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-threshold</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>level</db:code></db:para>
</db:td>
<db:td>
<db:para>Specifies a threshold <db:code>level</db:code> (as a percentage) to use when deciding whether to compress a file. If the reduction in the file size is greater than the threshold <db:code>level</db:code>, it is compressed; otherwise, the uncompressed data is stored instead. The default threshold level is 70%, meaning that compressed files which are 30% or less of their original size are stored as compressed data.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-compress-algo</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>algorithm</db:code></db:para>
</db:td>
<db:td>
<db:para>The algorithm to compress files with. Supported algorithms are <db:code>zstd</db:code>, <db:code>zlib</db:code>, and <db:code>none</db:code>, which respectively mean to compress the content using the <db:link xlink:href="https://zstd.net">Zstandard</db:link> library, <db:link xlink:href="https://zlib.net">zlib</db:link> library, and no compression. The default is <db:code>zstd</db:code> if that library was found at compile time, <db:code>zlib</db:code> if not.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-compress</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>level</db:code></db:para>
</db:td>
<db:td>
<db:para>Compress input files to the given compression <db:code>level</db:code>, which is algorithm-dependent. If the algorithm is <db:code>zstd</db:code>, the valid levels are 1 to 19, with the special values of 0 and -1 meaning <db:code>libzstd</db:code>'s and <db:code>rcc</db:code>'s default compressions. If the algorithm is <db:code>zlib</db:code>, the level is an integer in the range 1 to 9. For both algorithms, level 1 does the least compression but is fastest. Levels 9 or 19 do the most compression but are slowest. To turn off compression, use <db:code>-no-compress</db:code>. The default value for <db:code>level</db:code> is -1.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-root</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>path</db:code></db:para>
</db:td>
<db:td>
<db:para>Prefix the resource access path with <db:code>path</db:code>. The default is no prefix.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-no-compress</db:code></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Disable compression.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-binary</db:code></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Output a binary file for use as a dynamic resource.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-version</db:code></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Display version information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-help</db:code></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Display usage information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-t, --temp &lt;file&gt;</db:code></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Use temporary &lt;file&gt; for big resources.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--namespace</db:code></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Turn off namespace macros.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--verbose</db:code></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Enable verbose mode.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--list</db:code></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Only list .qrc file entries, do not generate code.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-project</db:code></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Output a resource file containing all files from the current directory.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>See also <db:link xlink:href="resources.xml">The Qt Resource System</db:link> for more information about embedding resources in Qt applications.</db:para>
</db:article>
