<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QtLiterals Namespace</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtliterals.xml">QtLiterals</db:link> namespace declares literal operators for Qt types.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtLiterals</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QtLiterals</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qtliterals.xml">QtLiterals</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-function-documentation">
<db:title>Obsolete Function Documentation</db:title>
<db:section xml:id="operator-22-22_qba">
<db:title>[noexcept, since 6.2, deprecated in 6.8] QByteArray operator&quot;&quot;_qba(const char *<db:emphasis>str</db:emphasis>, size_t <db:emphasis>size</db:emphasis>)</db:title>
<db:para>This function is deprecated since 6.8. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:code>_ba</db:code> from Qt::StringLiterals namespace instead.</db:para>
<db:para>Literal operator that creates a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> out of the first <db:code role="parameter">size</db:code> characters in the char string literal <db:code role="parameter">str</db:code>.</db:para>
<db:para>The <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is created at compile time, and the generated string data is stored in the read-only segment of the compiled object file. Duplicate literals may share the same read-only memory. This functionality is interchangeable with <db:link xlink:href="qbytearray.xml#QByteArrayLiteral">QByteArrayLiteral</db:link>, but saves typing when many string literals are present in the code.</db:para>
<db:para>The following code creates a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>:</db:para>
<db:programlisting language="cpp">auto str = &quot;hello&quot;_qba;
</db:programlisting>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearray.xml#QByteArrayLiteral">QByteArrayLiteral</db:link></db:member>
<db:member><db:link xlink:href="qstring.xml#operator-22-22_qs">QtLiterals::operator&quot;&quot;_qs</db:link>(const char16_t *str, size_t size)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-22-22_qs">
<db:title>[noexcept, since 6.2, deprecated in 6.8] QString operator&quot;&quot;_qs(const char16_t *<db:emphasis>str</db:emphasis>, size_t <db:emphasis>size</db:emphasis>)</db:title>
<db:para>This function is deprecated since 6.8. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:code>_s</db:code> from Qt::StringLiterals namespace instead.</db:para>
<db:para>Literal operator that creates a <db:link xlink:href="qstring.xml">QString</db:link> out of the first <db:code role="parameter">size</db:code> characters in the char16_t string literal <db:code role="parameter">str</db:code>.</db:para>
<db:para>The <db:link xlink:href="qstring.xml">QString</db:link> is created at compile time, and the generated string data is stored in the read-only segment of the compiled object file. Duplicate literals may share the same read-only memory. This functionality is interchangeable with <db:link xlink:href="qstring.xml#QStringLiteral">QStringLiteral</db:link>, but saves typing when many string literals are present in the code.</db:para>
<db:para>The following code creates a <db:link xlink:href="qstring.xml">QString</db:link>:</db:para>
<db:programlisting language="cpp">auto str = u&quot;hello&quot;_qs;
</db:programlisting>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#QStringLiteral">QStringLiteral</db:link></db:member>
<db:member><db:link xlink:href="qbytearray.xml#operator-22-22_qba">QtLiterals::operator&quot;&quot;_qba</db:link>(const char *str, size_t size)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
