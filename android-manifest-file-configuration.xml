<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Android Manifest File Configuration</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-openssl-support.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Adding OpenSSL Support for Android"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-services.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Android Services"/></db:extendedlink>
<db:abstract>
<db:para>Provides details on the AndroidManifest.xml configuration.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Android Manifest is an XML file necessary for any Android app. It contains app configuration for different settings and features that the app use, as well as details on the app itself, such as, package name, app name, version, etc. Permissions and hardware features can also be set from the manifest.</db:para>
<db:para>Qt for Android maintains a version of AndroidManifest.xml with default configuration that include features, permissions and other configuration used by the build system which are needed for building and running Qt apps on Android.</db:para>
<db:section xml:id="qt-project-to-manifest-configuration">
<db:title>Qt Project to Manifest Configuration</db:title>
<db:para>Qt defines some <db:link xlink:href="https://developer.android.com/guide/topics/manifest/meta-data-element">meta-data</db:link> that is passed from the build systems and to <db:link xlink:href="deployment-android.xml">androiddeployqt</db:link> which populates the manifest with the correct values without explicitly setting these in the manifest file. Such <db:link xlink:href="https://developer.android.com/guide/topics/manifest/meta-data-element">meta-data</db:link> is assigned a value in the form &quot;-- %%INSERT_VALUE%% --&quot;, for example:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;manifest ...
    android:versionCode=&quot;-- %%INSERT_VERSION_CODE%% --&quot;
    ...
&amp;lt;/manifest&amp;gt;
</db:programlisting>
<db:para>This would be populated with the version code that is set in, for example, CMake.</db:para>
</db:section>
<db:section xml:id="qt-default-configuration">
<db:title>Qt Default Configuration</db:title>
<db:para>Qt sets the following manifest configuration by default:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Section</db:para>
</db:th>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td rowspan="5">
<db:para><db:link xlink:href="https://developer.android.com/guide/topics/manifest/manifest-element">&lt;manifest&gt;</db:link></db:para>
</db:td>
<db:td>
<db:para>package</db:para>
</db:td>
<db:td>
<db:para>Sets the package name. The default value is org.qtproject.example.app_name.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android:installLocation</db:para>
</db:td>
<db:td>
<db:para>Sets the app's installation location, whether internal or external storage. The default value is auto.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android:versionCode</db:para>
</db:td>
<db:td>
<db:para>Sets the internal version code. Populated from ANDROID_VERSION_CODE (qmake) and QT_ANDROID_VERSION_CODE (CMake). The default value is 1.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android:versionName</db:para>
</db:td>
<db:td>
<db:para>Sets the public version name. Populated from ANDROID_VERSION_NAME (qmake) and QT_ANDROID_VERSION_NAME (CMake). The default value is 1.0.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&lt;supports-screens&gt;</db:para>
</db:td>
<db:td>
<db:para>Sets the screen sizes that the app supports, default values are anyDensity, largeScreens, normalScreens, and smallScreens.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="7">
<db:para><db:link xlink:href="https://developer.android.com/guide/topics/manifest/application-element">&lt;application&gt;</db:link></db:para>
</db:td>
<db:td>
<db:para>android:name</db:para>
</db:td>
<db:td>
<db:para>The application class name. Default value is org.qtproject.qt.android.bindings.QtApplication.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android:label</db:para>
</db:td>
<db:td>
<db:para>The application name label. Default value is the Qt project's target name.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android:hardwareAccelerated</db:para>
</db:td>
<db:td>
<db:para>Sets hardware acceleration preference. The default value is true.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android:requestLegacyExternalStorage</db:para>
</db:td>
<db:td>
<db:para>Whether to use Android scoped storage. The default value is true.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android:allowNativeHeapPointerTagging</db:para>
</db:td>
<db:td>
<db:para>Whether or not the app has the Heap pointer tagging feature enabled. This has to be set to false when targeting Arm64 hardware with Android 11+ because it can break QML's NaN-tagging scheme. For more information, see <db:link xlink:href="https://source.android.com/devices/tech/debug/tagged-pointers">Tagged Pointers</db:link>. The default value is false.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android:allowBackup</db:para>
</db:td>
<db:td>
<db:para>Whether to allow the application to participate in the backup and restore infrastructure. If this is set to false, no backup or restore of the application will ever be performed. The default value is true.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android:fullBackupOnly</db:para>
</db:td>
<db:td>
<db:para>Whether or not to use Auto Backup on devices where it is available. The default value is false.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="7">
<db:para><db:link xlink:href="https://developer.android.com/guide/topics/manifest/activity-element">&lt;activity&gt;</db:link></db:para>
</db:td>
<db:td>
<db:para>android:name</db:para>
</db:td>
<db:td>
<db:para>The activity class name. The default value is org.qtproject.qt.android.bindings.QtActivity.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android:label</db:para>
</db:td>
<db:td>
<db:para>The activity name label. Default value is the Qt project's target name.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android:configChanges</db:para>
</db:td>
<db:td>
<db:para>Lists configuration changes that the activity handles. Default value is orientation, uiMode, screenLayout, screenSize, smallestScreenSize, layoutDirection, locale, fontScale, keyboard, keyboardHidden, navigation, mcc, mnc, density.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android:launchMode</db:para>
</db:td>
<db:td>
<db:para>The method used to launch the activity. The default value is singleTop.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android:screenOrientation</db:para>
</db:td>
<db:td>
<db:para>The orientation of the activity's display on the device. The default value is unspecified.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&lt;intent-filter&gt;</db:para>
</db:td>
<db:td>
<db:para>Specifies the types of intents that the activity can respond to. Default value is</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;action android:name=&quot;android.intent.action.MAIN&quot;/&amp;gt;
&amp;lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&amp;gt;
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android:exported</db:para>
</db:td>
<db:td>
<db:para>Sets whether the activity can be launched by components of other applications. The default value is true.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="qt-specific-meta-data">
<db:title>Qt Specific Meta-data</db:title>
<db:para>In addition to the default manifest configuration that Qt sets, Qt defines some meta-data that is valid for Qt apps only. Such meta-data is usually under the &lt;activity&gt; section in the form:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;meta-data
    android:name=&quot;meta-data-name&quot;
    android:value=&quot;meta-data-value&quot; /&amp;gt;
</db:programlisting>
<db:para>The following is a list of such meta-data defined by Qt:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Meta-data Name</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>android.app.lib_name <db:anchor xml:id="android-app-lib-name"/>
</db:para>
</db:td>
<db:td>
<db:para>The filename of the native C++ library that is used by the activity.</db:para>
<db:note>
<db:para>This attribute is mandatory and shouldn't be removed. Default value is the Qt project's target name.</db:para>
</db:note>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android.app.extract_android_style</db:para>
</db:td>
<db:td>
<db:para>The method used to extract the native Android Style information. For more information, see <db:link xlink:href="android-manifest-file-configuration.xml#style-extraction">Style Extraction</db:link>. The default value is minimal.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android.app.background_running <db:anchor xml:id="android-app-background-running"/>
</db:para>
</db:td>
<db:td>
<db:para>Sets whether the app keeps running tasks in the background. Setting this to true is the equivalent of setting the environment variable QT_BLOCK_EVENT_LOOPS_WHEN_SUSPENDED to 0. The default value is false.</db:para>
<db:warning>
<db:para>Setting this to true may cause unexpected crash if the application tries to draw after <db:link xlink:href="qguiapplication.xml#applicationStateChanged">QGuiApplication::applicationStateChanged</db:link>() signal is sent with a <db:link xlink:href="qt.xml#ApplicationState-enum">Qt::ApplicationSuspended</db:link> state.</db:para>
</db:warning>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android.app.arguments <db:anchor xml:id="android-app-arguments"/>
</db:para>
</db:td>
<db:td>
<db:para>Sets a list of arguments to pass to the app &quot;arg1 arg2&quot;. Populated from ANDROID_APPLICATION_ARGUMENTS (qmake) and QT_ANDROID_APPLICATION_ARGUMENTS (CMake). Default value is not set.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android.app.splash_screen_drawable_portrait</db:para>
</db:td>
<db:td>
<db:para>Sets a drawable for a splash screen specific to portrait mode. For example: android:resource=&quot;@drawable/splash_portrait&quot;. Default value is not set.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android.app.splash_screen_drawable_landscape</db:para>
</db:td>
<db:td>
<db:para>Sets a drawable for a splash screen specific to landscape mode. For example: android:resource=&quot;@drawable/splash_landscape&quot;. Default value is not set.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android.app.splash_screen_drawable</db:para>
</db:td>
<db:td>
<db:para>Sets a drawable for a splash screen at the start of the app.</db:para>
<db:note>
<db:para>Orientation specific splash screens are checked first, if not set, this is used instead. For example: android:resource=&quot;@drawable/splash&quot;. Default value is not set.</db:para>
</db:note>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android.app.splash_screen_sticky</db:para>
</db:td>
<db:td>
<db:para>Sets whether the splash screen stays visible until explicitly hidden by the app. For more information, see <db:link xlink:href="qnativeinterface-qandroidapplication.xml#hideSplashScreen">QAndroidApplication::hideSplashScreen</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>android.app.trace_location</db:para>
</db:td>
<db:td>
<db:para>Specifies a location on device where the application can save tracing files. For example: /storage/emulated/0/Android/data/&lt;app_package_name&gt;/files/. This is needed when using Common Trace Format (CTF) tracing backend.</db:para>
<db:note>
<db:para>The application needs storage permission for the location. Default: not set.</db:para>
</db:note>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="application-specific-meta-data">
<db:title>Application Specific Meta-data</db:title>
<db:para>Some meta-data attributes are application-wide, and should be placed under the &lt;application&gt; section:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Meta-data Name</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>android.app.system_libs_prefix <db:anchor xml:id="android-app-system-libs-prefix"/>
</db:para>
</db:td>
<db:td>
<db:para>Specifies a custom system library path to use for library loading lookup. This is necessary when using Qt libraries installed outside an app's default native (JNI) library directory. The default value is /system/lib/.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="meta-data-in-services">
<db:title>Meta-data in Services</db:title>
<db:para>Some meta-data attributes can also be used in <db:link xlink:href="android-services.xml">Services</db:link>. The main ones are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="android-manifest-file-configuration.xml#android-app-lib-name">android.app.lib_name</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="android-manifest-file-configuration.xml#android-app-background-running">android.app.background_running</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="android-manifest-file-configuration.xml#android-app-arguments">android.app.arguments</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-permissions-and-features">
<db:title>Qt Permissions and Features</db:title>
<db:para>Different Qt modules might require some Android permissions or features to function properly, for example, Camera permission in <db:link xlink:href="qtmultimedia-qmlmodule.xml">QtMultimedia</db:link>. l{The androiddeployqt Tool} takes care of including such requirements into the Android manifest during the build. Qt defines the following lines into the manifest, which they get replaced by the actual values:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;manifest ...
    &amp;lt;!-- %%INSERT_PERMISSIONS --&amp;gt;
    &amp;lt;!-- %%INSERT_FEATURES --&amp;gt;
    ...
&amp;lt;/manifest&amp;gt;
</db:programlisting>
<db:note>
<db:para>If those lines are removed from the project manifest, Qt won't be able to include the correct permissions. So some functionalities might not work properly.</db:para>
</db:note>
</db:section>
<db:section xml:id="style-extraction">
<db:title>Style Extraction</db:title>
<db:para>Qt uses different methods to determine how Qt Widgets and Qt Quick Controls should be styled:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>default or full: when using Qt Widgets or Qt Quick Controls 1.</db:para>
<db:note>
<db:para>This method uses some Android non-SDK interfaces, that are being restricted and removed by Google starting from Android 9.0 (API 28). For that reason, this is not recommended for Android 9.0 or greater.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>minimal: when using Qt Quick Controls 2 and no Qt Widgets or Qt Quick Controls 1. This is faster than using the default or full options.</db:para>
</db:listitem>
<db:listitem>
<db:para>none: no style extraction.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="qt-manifest-before-6-2-release">
<db:title>Qt Manifest before 6.2 Release</db:title>
<db:para>Versions of Qt earlier than 6.2 used to have an additional set of meta-data defined by Qt. These attributes used to manage dependencies and some were used by the discontinued Ministro service. With Qt 6.2, they should be removed. Here is a list of these attributes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>android.app.qt_sources_resource_id</db:para>
</db:listitem>
<db:listitem>
<db:para>android.app.repository</db:para>
</db:listitem>
<db:listitem>
<db:para>android.app.bundled_libs_resource_id</db:para>
</db:listitem>
<db:listitem>
<db:para>android.app.bundle_local_qt_libs</db:para>
</db:listitem>
<db:listitem>
<db:para>android.app.use_local_qt_libs</db:para>
</db:listitem>
<db:listitem>
<db:para>android.app.libs_prefix</db:para>
</db:listitem>
<db:listitem>
<db:para>android.app.load_local_libs_resource_id</db:para>
</db:listitem>
<db:listitem>
<db:para>android.app.load_local_jars</db:para>
</db:listitem>
<db:listitem>
<db:para>android.app.static_init_classes</db:para>
</db:listitem>
<db:listitem>
<db:para>android.app.qt_libs_resource_id</db:para>
</db:listitem>
<db:listitem>
<db:para>android.app.ministro_not_found_msg</db:para>
</db:listitem>
<db:listitem>
<db:para>android.app.ministro_needed_msg</db:para>
</db:listitem>
<db:listitem>
<db:para>android.app.fatal_error_msg</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For more information on the Android Manifest, see <db:link xlink:href="http://developer.android.com/guide/topics/manifest/manifest-intro.html">Android App Manifest</db:link>.</db:para>
</db:section>
</db:article>
