<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Movie Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Movie example demonstrates how to use QMovie and QLabel to display animations.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;movieplayer.h&quot;

MoviePlayer::MoviePlayer(QWidget *parent)
    : QWidget(parent)
{
    movie = new QMovie(this);
    movie-&gt;setCacheMode(QMovie::CacheAll);

    movieLabel = new QLabel(tr(&quot;No movie loaded&quot;));
    movieLabel-&gt;setAlignment(Qt::AlignCenter);
    movieLabel-&gt;setSizePolicy(QSizePolicy::Ignored, QSizePolicy::Ignored);
    movieLabel-&gt;setBackgroundRole(QPalette::Dark);
    movieLabel-&gt;setAutoFillBackground(true);

    currentMovieDirectory = &quot;movies&quot;;

    createControls();
    createButtons();

    connect(movie, SIGNAL(frameChanged(int)), this, SLOT(updateFrameSlider()));
    connect(movie, SIGNAL(stateChanged(QMovie::MovieState)),
            this, SLOT(updateButtons()));
    connect(fitCheckBox, SIGNAL(clicked()), this, SLOT(fitToWindow()));
    connect(frameSlider, SIGNAL(valueChanged(int)), this, SLOT(goToFrame(int)));
    connect(speedSpinBox, SIGNAL(valueChanged(int)),
            movie, SLOT(setSpeed(int)));

    mainLayout = new QVBoxLayout;
    mainLayout-&gt;addWidget(movieLabel);
    mainLayout-&gt;addLayout(controlsLayout);
    mainLayout-&gt;addLayout(buttonsLayout);
    setLayout(mainLayout);

    updateFrameSlider();
    updateButtons();

    setWindowTitle(tr(&quot;Movie Player&quot;));
    resize(400, 400);
}

void MoviePlayer::open()
{
    QString fileName = QFileDialog::getOpenFileName(this, tr(&quot;Open a Movie&quot;),
                               currentMovieDirectory);
    if (!fileName.isEmpty())
        openFile(fileName);
}

void MoviePlayer::openFile(const QString &amp;fileName)
{
    currentMovieDirectory = QFileInfo(fileName).path();

    movie-&gt;stop();
    movieLabel-&gt;setMovie(movie);
    movie-&gt;setFileName(fileName);
    movie-&gt;start();

    updateFrameSlider();
    updateButtons();
}

void MoviePlayer::goToFrame(int frame)
{
    movie-&gt;jumpToFrame(frame);
}

void MoviePlayer::fitToWindow()
{
    movieLabel-&gt;setScaledContents(fitCheckBox-&gt;isChecked());
}

void MoviePlayer::updateFrameSlider()
{
    bool hasFrames = (movie-&gt;currentFrameNumber() &gt;= 0);

    if (hasFrames) {
        if (movie-&gt;frameCount() &gt; 0) {
            frameSlider-&gt;setMaximum(movie-&gt;frameCount() - 1);
        } else {
            if (movie-&gt;currentFrameNumber() &gt; frameSlider-&gt;maximum())
                frameSlider-&gt;setMaximum(movie-&gt;currentFrameNumber());
        }
        frameSlider-&gt;setValue(movie-&gt;currentFrameNumber());
    } else {
        frameSlider-&gt;setMaximum(0);
    }
    frameLabel-&gt;setEnabled(hasFrames);
    frameSlider-&gt;setEnabled(hasFrames);
}

void MoviePlayer::updateButtons()
{
    playButton-&gt;setEnabled(movie-&gt;isValid() &amp;&amp; movie-&gt;frameCount() != 1
                           &amp;&amp; movie-&gt;state() == QMovie::NotRunning);
    pauseButton-&gt;setEnabled(movie-&gt;state() != QMovie::NotRunning);
    pauseButton-&gt;setChecked(movie-&gt;state() == QMovie::Paused);
    stopButton-&gt;setEnabled(movie-&gt;state() != QMovie::NotRunning);
}

void MoviePlayer::createControls()
{
    fitCheckBox = new QCheckBox(tr(&quot;Fit to Window&quot;));

    frameLabel = new QLabel(tr(&quot;Current frame:&quot;));

    frameSlider = new QSlider(Qt::Horizontal);
    frameSlider-&gt;setTickPosition(QSlider::TicksBelow);
    frameSlider-&gt;setTickInterval(10);

    speedLabel = new QLabel(tr(&quot;Speed:&quot;));

    speedSpinBox = new QSpinBox;
    speedSpinBox-&gt;setRange(1, 9999);
    speedSpinBox-&gt;setValue(100);
    speedSpinBox-&gt;setSuffix(tr(&quot;%&quot;));

    controlsLayout = new QGridLayout;
    controlsLayout-&gt;addWidget(fitCheckBox, 0, 0, 1, 2);
    controlsLayout-&gt;addWidget(frameLabel, 1, 0);
    controlsLayout-&gt;addWidget(frameSlider, 1, 1, 1, 2);
    controlsLayout-&gt;addWidget(speedLabel, 2, 0);
    controlsLayout-&gt;addWidget(speedSpinBox, 2, 1);
}

void MoviePlayer::createButtons()
{
    QSize iconSize(36, 36);

    openButton = new QToolButton;
    openButton-&gt;setIcon(style()-&gt;standardIcon(QStyle::SP_DialogOpenButton));
    openButton-&gt;setIconSize(iconSize);
    openButton-&gt;setToolTip(tr(&quot;Open File&quot;));
    connect(openButton, SIGNAL(clicked()), this, SLOT(open()));

    playButton = new QToolButton;
    playButton-&gt;setIcon(style()-&gt;standardIcon(QStyle::SP_MediaPlay));
    playButton-&gt;setIconSize(iconSize);
    playButton-&gt;setToolTip(tr(&quot;Play&quot;));
    connect(playButton, SIGNAL(clicked()), movie, SLOT(start()));

    pauseButton = new QToolButton;
    pauseButton-&gt;setCheckable(true);
    pauseButton-&gt;setIcon(style()-&gt;standardIcon(QStyle::SP_MediaPause));
    pauseButton-&gt;setIconSize(iconSize);
    pauseButton-&gt;setToolTip(tr(&quot;Pause&quot;));
    connect(pauseButton, SIGNAL(clicked(bool)), movie, SLOT(setPaused(bool)));

    stopButton = new QToolButton;
    stopButton-&gt;setIcon(style()-&gt;standardIcon(QStyle::SP_MediaStop));
    stopButton-&gt;setIconSize(iconSize);
    stopButton-&gt;setToolTip(tr(&quot;Stop&quot;));
    connect(stopButton, SIGNAL(clicked()), movie, SLOT(stop()));

    quitButton = new QToolButton;
    quitButton-&gt;setIcon(style()-&gt;standardIcon(QStyle::SP_DialogCloseButton));
    quitButton-&gt;setIconSize(iconSize);
    quitButton-&gt;setToolTip(tr(&quot;Quit&quot;));
    connect(quitButton, SIGNAL(clicked()), this, SLOT(close()));

    buttonsLayout = new QHBoxLayout;
    buttonsLayout-&gt;addStretch();
    buttonsLayout-&gt;addWidget(openButton);
    buttonsLayout-&gt;addWidget(playButton);
    buttonsLayout-&gt;addWidget(pauseButton);
    buttonsLayout-&gt;addWidget(stopButton);
    buttonsLayout-&gt;addWidget(quitButton);
    buttonsLayout-&gt;addStretch();
}

</db:programlisting>
</db:article>
