<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>DelegateModel QML Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Encapsulates a model and delegate.</db:para>
<db:para>This type was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQml.Models 2.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> type encapsulates a model and the delegate that will be instantiated for items in the model.</db:para>
<db:para>It is usually not necessary to create a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link>. However, it can be useful for manipulating and accessing the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#modelIndex-method">modelIndex</db:link> when a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> subclass is used as the model. Also, <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> is used together with <db:link xlink:href="qml-package.xml">Package</db:link> to provide delegates to multiple views, and with <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml">DelegateModelGroup</db:link> to sort and filter delegate items.</db:para>
<db:para>The example below illustrates using a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> with a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>.</db:para>
<db:programlisting language="qml">import QtQuick 2.0
import QtQml.Models 2.2

Rectangle {
    width: 200; height: 100

    DelegateModel {
        id: visualModel
        model: ListModel {
            ListElement { name: &quot;Apple&quot; }
            ListElement { name: &quot;Orange&quot; }
        }
        delegate: Rectangle {
            height: 25
            width: 100
            Text { text: &quot;Name: &quot; + name}
        }
    }

    ListView {
        anchors.fill: parent
        model: visualModel
    }
}
</db:programlisting>
<db:note>
<db:para>This type is also available as <db:link xlink:href="qml-visualdatamodel.xml">VisualDataModel</db:link> in the <db:link xlink:href="qtqml-index.xml">Qt QML</db:link> module due to compatibility reasons.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
</db:section>
<db:section xml:id="delegate-prop">
<db:title>delegate : Component</db:title>
<db:para>The delegate provides a template defining each item instantiated by a view. The index is exposed as an accessible index property. Properties of the model are also available depending upon the type of <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#models">Data Model</db:link>.</db:para>
</db:section>
<db:section xml:id="filterOnGroup-prop">
<db:title>filterOnGroup : string</db:title>
<db:para>This property holds the name of the group used to filter the visual data model.</db:para>
<db:para>Only items which belong to this group are visible to a view.</db:para>
<db:para>By default this is the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#items-prop">items</db:link> group.</db:para>
</db:section>
<db:section xml:id="groups-prop">
<db:title>[read-only] groups : list&lt;DelegateModelGroup&gt;</db:title>
<db:para>This property holds a delegate model's group definitions.</db:para>
<db:para>Groups define a sub-set of the items in a delegate model and can be used to filter a model.</db:para>
<db:para>For every group defined in a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> two attached properties are added to each delegate item. The first of the form <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link>.in<db:emphasis>GroupName</db:emphasis> holds whether the item belongs to the group and the second <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link>.<db:emphasis>groupName</db:emphasis>Index holds the index of the item in that group.</db:para>
<db:para>The following example illustrates using groups to select items in a model.</db:para>
<db:programlisting language="qml">import QtQuick 2.0
import QtQml.Models 2.2

Rectangle {
    width: 200; height: 100

    DelegateModel {
        id: visualModel
        model: ListModel {
            ListElement { name: &quot;Apple&quot; }
            ListElement { name: &quot;Orange&quot; }
        }

        groups: [
            DelegateModelGroup { name: &quot;selected&quot; }
        ]

        delegate: Rectangle {
            id: item
            height: 25
            width: 200
            Text {
                text: {
                    var text = &quot;Name: &quot; + name
                    if (item.DelegateModel.inSelected)
                        text += &quot; (&quot; + item.DelegateModel.selectedIndex + &quot;)&quot;
                    return text;
                }
            }
            MouseArea {
                anchors.fill: parent
                onClicked: item.DelegateModel.inSelected = !item.DelegateModel.inSelected
            }
        }
    }

    ListView {
        anchors.fill: parent
        model: visualModel
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="items-prop">
<db:title>[read-only] items : DelegateModelGroup</db:title>
<db:para>This property holds visual data model's default group to which all new items are added.</db:para>
</db:section>
<db:section xml:id="model-prop">
<db:title>model : model</db:title>
<db:para>This property holds the model providing data for the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link>.</db:para>
<db:para>The model provides a set of data that is used to create the items for a view. For large or dynamic datasets the model is usually provided by a C++ model object. The C++ model object must be a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> subclass or a simple list.</db:para>
<db:para>Models can also be created directly in QML, using a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> or <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-modelviewsdata-modelview.xml#models">Data Models</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parts-prop">
<db:title>[read-only] parts : object</db:title>
<db:para>The <db:code role="parameter">parts</db:code> property selects a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> which creates delegates from the part named. This is used in conjunction with the <db:link xlink:href="qml-package.xml">Package</db:link> type.</db:para>
<db:para>For example, the code below selects a model which creates delegates named <db:emphasis>list</db:emphasis> from a <db:link xlink:href="qml-package.xml">Package</db:link>:</db:para>
<db:programlisting language="cpp">DelegateModel {
    id: visualModel
    delegate: Package {
        Item { Package.name: &quot;list&quot; }
    }
    model: myModel
}

ListView {
    width: 200; height:200
    model: visualModel.parts.list
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-package.xml">Package</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="persistedItems-prop">
<db:title>[read-only] persistedItems : DelegateModelGroup</db:title>
<db:para>This property holds visual data model's persisted items group.</db:para>
<db:para>Items in this group are not destroyed when released by a view, instead they are persisted until removed from the group.</db:para>
<db:para>An item can be removed from the persistedItems group by setting the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link>.<db:link xlink:href="qml-qtqml-models-delegatemodel.xml#inPersistedItems-attached-prop">inPersistedItems</db:link> property to false. If the item is not referenced by a view at that time it will be destroyed. Adding an item to this group will not create a new instance.</db:para>
<db:para>Items returned by the <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml#create-method">QtQml.Models::DelegateModelGroup::create</db:link>() function are automatically added to this group.</db:para>
</db:section>
<db:section xml:id="rootIndex-prop">
<db:title>rootIndex : QModelIndex</db:title>
<db:para><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> provides a hierarchical tree of data, whereas QML only operates on list data. rootIndex allows the children of any node in a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> to be provided by this model.</db:para>
<db:para>This property only affects models of type <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> that are hierarchical (e.g, a tree model).</db:para>
<db:para>For example, here is a simple interactive file system browser. When a directory name is clicked, the view's rootIndex is set to the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> node of the clicked directory, thus updating the view to show the new directory's contents.</db:para>
<db:para>main.cpp:</db:para>
<db:programlisting language="cpp">int main(int argc, char ** argv)
{
    QApplication app(argc, argv);

    QQuickView view;

    QDirModel model;
    view.rootContext()-&gt;setContextProperty(&quot;dirModel&quot;, &amp;model);

    view.setSource(QUrl::fromLocalFile(&quot;view.qml&quot;));
    view.show();

    return app.exec();
}
</db:programlisting>
<db:para>view.qml:</db:para>
<db:programlisting language="qml">import QtQuick 2.0
import QtQml.Models 2.2

ListView {
    id: view
    width: 300
    height: 400

    model: DelegateModel {
        model: dirModel

        delegate: Rectangle {
            width: 200; height: 25
            Text { text: filePath }

            MouseArea {
                anchors.fill: parent
                onClicked: {
                    if (model.hasModelChildren)
                        view.model.rootIndex = view.model.modelIndex(index)
                }
            }
        }
    }
}
</db:programlisting>
<db:para>If the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#model-attached-prop">model</db:link> is a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> subclass, the delegate can also reference a hasModelChildren property (optionally qualified by a <db:emphasis>model</db:emphasis>. prefix) that indicates whether the delegate's model item has any child nodes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-models-delegatemodel.xml#modelIndex-method">modelIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtqml-models-delegatemodel.xml#parentModelIndex-method">parentModelIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="attached-property-documentation">
<db:title>Attached Property Documentation</db:title>
<db:section xml:id="groups-attached-prop">
<db:title>[read-only] DelegateModel.groups : stringlist</db:title>
<db:para>This attached property holds the name of DelegateModelGroups the item belongs to.</db:para>
<db:para>It is attached to each instance of the delegate.</db:para>
</db:section>
<db:section xml:id="inItems-attached-prop">
<db:title>DelegateModel.inItems : int</db:title>
<db:para>This attached property holds whether the item belongs to the default <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#items-prop">items</db:link> <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml">DelegateModelGroup</db:link>.</db:para>
<db:para>Changing this property will add or remove the item from the items group.</db:para>
<db:para>It is attached to each instance of the delegate.</db:para>
</db:section>
<db:section xml:id="inPersistedItems-attached-prop">
<db:title>DelegateModel.inPersistedItems : int</db:title>
<db:para>This attached property holds whether the item belongs to the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#persistedItems-prop">persistedItems</db:link> <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml">DelegateModelGroup</db:link>.</db:para>
<db:para>Changing this property will add or remove the item from the items group. Change with caution as removing an item from the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#persistedItems-prop">persistedItems</db:link> group will destroy the current instance if it is not referenced by a model.</db:para>
<db:para>It is attached to each instance of the delegate.</db:para>
</db:section>
<db:section xml:id="isUnresolved-attached-prop">
<db:title>DelegateModel.isUnresolved : bool</db:title>
<db:para>This attached property holds whether the visual item is bound to a data model index. Returns true if the item is not bound to the model, and false if it is.</db:para>
<db:para>An unresolved item can be bound to the data model using the <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml#resolve-method">DelegateModelGroup::resolve</db:link>() function.</db:para>
<db:para>It is attached to each instance of the delegate.</db:para>
</db:section>
<db:section xml:id="itemsIndex-attached-prop">
<db:title>DelegateModel.itemsIndex : int</db:title>
<db:para>This attached property holds the index of the item in the default <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#items-prop">items</db:link> <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml">DelegateModelGroup</db:link>.</db:para>
<db:para>It is attached to each instance of the delegate.</db:para>
</db:section>
<db:section xml:id="model-attached-prop">
<db:title>DelegateModel.model : int</db:title>
<db:para>This attached property holds the visual data model this delegate instance belongs to.</db:para>
<db:para>It is attached to each instance of the delegate.</db:para>
</db:section>
<db:section xml:id="persistedItemsIndex-attached-prop">
<db:title>DelegateModel.persistedItemsIndex : int</db:title>
<db:para>This attached property holds the index of the item in the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#persistedItems-prop">persistedItems</db:link> <db:link xlink:href="qml-qtqml-models-delegatemodelgroup.xml">DelegateModelGroup</db:link>.</db:para>
<db:para>It is attached to each instance of the delegate.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="modelIndex-method">
<db:title>QModelIndex modelIndex(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> provides a hierarchical tree of data, whereas QML only operates on list data. This function assists in using tree models in QML.</db:para>
<db:para>Returns a <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> for the specified index. This value can be assigned to <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#rootIndex-prop">rootIndex</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-models-delegatemodel.xml#rootIndex-prop">rootIndex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parentModelIndex-method">
<db:title>QModelIndex parentModelIndex()</db:title>
<db:para><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> provides a hierarchical tree of data, whereas QML only operates on list data. This function assists in using tree models in QML.</db:para>
<db:para>Returns a <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> for the parent of the current <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#rootIndex-prop">rootIndex</db:link>. This value can be assigned to <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#rootIndex-prop">rootIndex</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-models-delegatemodel.xml#rootIndex-prop">rootIndex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
