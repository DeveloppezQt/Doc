<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEngineProfile Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link> class provides a web engine profile shared by multiple pages.</db:para>
<db:para>This class was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEngineProfile</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webenginewidgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A web engine profile contains settings, scripts, persistent cookie policy, and the list of visited links shared by all web engine pages that belong to the profile.</db:para>
<db:para>All pages that belong to the profile share a common <db:link xlink:href="qwebenginesettings.xml">QWebEngineSettings</db:link> instance, which can be accessed with the <db:link xlink:href="qwebengineprofile.xml#settings">settings</db:link>() method. Likewise, the <db:link xlink:href="qwebengineprofile.xml#scripts">scripts</db:link>() method provides access to a common <db:link xlink:href="qwebenginescriptcollection.xml">QWebEngineScriptCollection</db:link> instance.</db:para>
<db:para>Information about visited links is stored together with persistent cookies and other persistent data in a storage returned by <db:link xlink:href="qwebengineprofile.xml#storageName">storageName</db:link>(). Persistent data is stored in a subdirectory set by calling <db:link xlink:href="qwebengineprofile.xml#setPersistentStoragePath">setPersistentStoragePath</db:link>(), and the cache is located in a subdirectory set by calling <db:link xlink:href="qwebengineprofile.xml#setCachePath">setCachePath</db:link>(). The cache type can be set to <db:emphasis>in-memory</db:emphasis> or <db:emphasis>on-disk</db:emphasis> by calling <db:link xlink:href="qwebengineprofile.xml#setHttpCacheType">setHttpCacheType</db:link>(). If only the storage name is set, the subdirectories are created and named automatically. If you set any of the values manually, you should do it before creating any pages that belong to the profile.</db:para>
<db:para>The cache can be cleared of links by calling <db:link xlink:href="qwebengineprofile.xml#clearVisitedLinks">clearVisitedLinks</db:link>() or <db:link xlink:href="qwebengineprofile.xml#clearAllVisitedLinks">clearAllVisitedLinks</db:link>(). <db:link xlink:href="qwebengineprofile.xml#PersistentCookiesPolicy-enum">PersistentCookiesPolicy</db:link> describes whether session and persistent cookies are saved to and restored from memory or disk.</db:para>
<db:para>Profiles can be used to isolate pages from each other. A typical use case is a dedicated <db:emphasis>off-the-record profile</db:emphasis> for a <db:emphasis>private browsing</db:emphasis> mode. Using <db:link xlink:href="qwebengineprofile.xml#QWebEngineProfile">QWebEngineProfile</db:link>() without defining a storage name constructs a new off-the-record profile that leaves no record on the local machine, and has no persistent data or cache. The <db:link xlink:href="qwebengineprofile.xml#isOffTheRecord">isOffTheRecord</db:link>() method can be used to check whether a profile is off-the-record.</db:para>
<db:para>The default profile can be accessed by <db:link xlink:href="qwebengineprofile.xml#defaultProfile">defaultProfile</db:link>(). It is a built-in profile that all web pages not specifically created with another profile belong to.</db:para>
<db:para>Implementing the <db:link xlink:href="qwebengineurlrequestinterceptor.xml">QWebEngineUrlRequestInterceptor</db:link> interface and registering the interceptor on a profile by <db:link xlink:href="qwebengineprofile.xml#setRequestInterceptor">setRequestInterceptor</db:link>() enables intercepting, blocking, and modifying URL requests (<db:link xlink:href="qwebengineurlrequestinfo.xml">QWebEngineUrlRequestInfo</db:link>) before they reach the networking stack of Chromium.</db:para>
<db:para>A <db:link xlink:href="qwebengineurlschemehandler.xml">QWebEngineUrlSchemeHandler</db:link> can be registered for a profile by <db:link xlink:href="qwebengineprofile.xml#installUrlSchemeHandler">installUrlSchemeHandler</db:link>() to add support for custom URL schemes. Requests for the scheme are then issued to <db:link xlink:href="qwebengineurlschemehandler.xml#requestStarted">QWebEngineUrlSchemeHandler::requestStarted</db:link>() as <db:link xlink:href="qwebengineurlrequestjob.xml">QWebEngineUrlRequestJob</db:link> objects.</db:para>
<db:para>Spellchecking HTML form fields can be enabled per profile by using the <db:link xlink:href="qwebengineprofile.xml#setSpellCheckEnabled">setSpellCheckEnabled</db:link>() method and the current languages used for spellchecking can be set by using the <db:link xlink:href="qwebengineprofile.xml#setSpellCheckLanguages">setSpellCheckLanguages</db:link>() method.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="HttpCacheType-enum">
<db:title>enum QWebEngineProfile::HttpCacheType</db:title>
<db:enumsynopsis>
<db:enumname>HttpCacheType</db:enumname>
<db:enumitem>
<db:enumidentifier>MemoryHttpCache</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DiskHttpCache</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoCache</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the HTTP cache type:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link></db:emphasis>::MemoryHttpCache</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Use an in-memory cache. This is the default if <db:code>off-the-record</db:code> is set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link></db:emphasis>::DiskHttpCache</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Use a disk cache. This is the default if the profile is not <db:code>off-the-record</db:code>. If set on an <db:code>off-the-record</db:code> profile will instead set <db:code>MemoryHttpCache</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link></db:emphasis>::NoCache</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Disable both in-memory and disk caching. (Added in Qt 5.7)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PersistentCookiesPolicy-enum">
<db:title>enum QWebEngineProfile::PersistentCookiesPolicy</db:title>
<db:enumsynopsis>
<db:enumname>PersistentCookiesPolicy</db:enumname>
<db:enumitem>
<db:enumidentifier>NoPersistentCookies</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AllowPersistentCookies</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ForcePersistentCookies</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes policy for cookie persistency:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link></db:emphasis>::NoPersistentCookies</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Both session and persistent cookies are stored in memory. This is the only setting possible if <db:code>off-the-record</db:code> is set or no persistent data path is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link></db:emphasis>::AllowPersistentCookies</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Cookies marked persistent are saved to and restored from disk, whereas session cookies are only stored to disk for crash recovery. This is the default setting.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link></db:emphasis>::ForcePersistentCookies</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Both session and persistent cookies are saved to and restored from disk.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWebEngineProfile">
<db:title>[explicit] QWebEngineProfile::QWebEngineProfile(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEngineProfile</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>Q_NULLPTR</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineProfile(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new off-the-record profile with the parent <db:code role="parameter">parent</db:code>.</db:para>
<db:para>An off-the-record profile leaves no record on the local machine, and has no persistent data or cache. Thus, the HTTP cache can only be in memory and the cookies can only be non-persistent. Trying to change these settings will have no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#isOffTheRecord">isOffTheRecord</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QWebEngineProfile-1">
<db:title>[explicit] QWebEngineProfile::QWebEngineProfile(const QString &amp;<db:emphasis>storageName</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEngineProfile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>storageName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>Q_NULLPTR</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineProfile(const QString &amp;storageName, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new profile with the storage name <db:code role="parameter">storageName</db:code> and parent <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The storage name must be unique.</db:para>
<db:para>A disk-based <db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link> should be destroyed on or before application exit, otherwise the cache and persistent data may not be fully flushed to disk.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#storageName">storageName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cachePath">
<db:title>QString QWebEngineProfile::cachePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>cachePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString cachePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the path used for caches.</db:para>
<db:para>By default, this is below StandardPaths::CacheLocation in a QtWebengine/StorageName specific subdirectory.</db:para>
<db:note>
<db:para>Use <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>(<db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::CacheLocation</db:link>) to obtain the <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::CacheLocation</db:link> path.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#setCachePath">setCachePath</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineprofile.xml#storageName">storageName</db:link>()</db:member>
<db:member><db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearAllVisitedLinks">
<db:title>void QWebEngineProfile::clearAllVisitedLinks()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearAllVisitedLinks</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearAllVisitedLinks()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears all links from the visited links database.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#clearVisitedLinks">clearVisitedLinks</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearHttpCache">
<db:title>[since 5.7] void QWebEngineProfile::clearHttpCache()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearHttpCache</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearHttpCache()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the profile's cache entries.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="clearVisitedLinks">
<db:title>void QWebEngineProfile::clearVisitedLinks(const QList&lt;QUrl&gt; &amp;<db:emphasis>urls</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearVisitedLinks</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QUrl&gt; &amp;</db:type>
<db:parameter>urls</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearVisitedLinks(const QList&lt;QUrl&gt; &amp;urls)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the links in <db:code role="parameter">urls</db:code> from the visited links database.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#clearAllVisitedLinks">clearAllVisitedLinks</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cookieStore">
<db:title>[since 5.6] QWebEngineCookieStore *QWebEngineProfile::cookieStore()</db:title>
<db:methodsynopsis>
<db:type>QWebEngineCookieStore *</db:type>
<db:methodname>cookieStore</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineCookieStore * cookieStore()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cookie store for this profile.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="defaultProfile">
<db:title>[static] QWebEngineProfile *QWebEngineProfile::defaultProfile()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWebEngineProfile *</db:type>
<db:methodname>defaultProfile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineProfile * defaultProfile()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default profile.</db:para>
<db:para>The default profile uses the storage name &quot;Default&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#storageName">storageName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="downloadRequested">
<db:title>[since 5.5] void QWebEngineProfile::downloadRequested(QWebEngineDownloadItem *<db:emphasis>download</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>downloadRequested</db:methodname>
<db:methodparam>
<db:type>QWebEngineDownloadItem *</db:type>
<db:parameter>download</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void downloadRequested(QWebEngineDownloadItem *download)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a download has been triggered. The <db:code role="parameter">download</db:code> argument holds the state of the download. The download has to be explicitly accepted with <db:link xlink:href="qwebenginedownloaditem.xml#accept">QWebEngineDownloadItem::accept</db:link>() or it will be cancelled by default. The download item is parented by the profile. If it is not accepted, it will be deleted immediately after the signal emission. This signal cannot be used with a queued connection.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginedownloaditem.xml">QWebEngineDownloadItem</db:link></db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#download">QWebEnginePage::download</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="httpAcceptLanguage">
<db:title>[since 5.6] QString QWebEngineProfile::httpAcceptLanguage() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>httpAcceptLanguage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString httpAcceptLanguage() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the Accept-Language HTTP request-header field.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#setHttpAcceptLanguage">setHttpAcceptLanguage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="httpCacheMaximumSize">
<db:title>int QWebEngineProfile::httpCacheMaximumSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>httpCacheMaximumSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int httpCacheMaximumSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum size of the HTTP cache in bytes.</db:para>
<db:para>Will return <db:code>0</db:code> if the size is automatically controlled by <db:link xlink:href="qtwebengine-module.xml">QtWebEngine</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#setHttpCacheMaximumSize">setHttpCacheMaximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineprofile.xml#httpCacheType">httpCacheType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="httpCacheType">
<db:title>QWebEngineProfile::HttpCacheType QWebEngineProfile::httpCacheType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineProfile::HttpCacheType</db:type>
<db:methodname>httpCacheType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineProfile::HttpCacheType httpCacheType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of HTTP cache used.</db:para>
<db:para>If the profile is off-the-record, <db:link xlink:href="qwebengineprofile.xml#HttpCacheType-enum">MemoryHttpCache</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#setHttpCacheType">setHttpCacheType</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineprofile.xml#cachePath">cachePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="httpUserAgent">
<db:title>QString QWebEngineProfile::httpUserAgent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>httpUserAgent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString httpUserAgent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the user-agent string sent with HTTP to identify the browser.</db:para>
<db:note>
<db:para>On Windows 8.1 and newer, the default user agent will always report &quot;Windows NT 6.2&quot; (Windows 8), unless the application does contain a manifest that declares newer Windows versions as supported.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#setHttpUserAgent">setHttpUserAgent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="installUrlSchemeHandler">
<db:title>[since 5.6] void QWebEngineProfile::installUrlSchemeHandler(const QByteArray &amp;<db:emphasis>scheme</db:emphasis>, QWebEngineUrlSchemeHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>installUrlSchemeHandler</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>scheme</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWebEngineUrlSchemeHandler *</db:type>
<db:parameter>handler</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void installUrlSchemeHandler(const QByteArray &amp;scheme, QWebEngineUrlSchemeHandler *handler)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers a handler <db:code role="parameter">handler</db:code> for custom URL scheme <db:code role="parameter">scheme</db:code> in the profile.</db:para>
<db:para>It is necessary to first register the scheme with <db:link xlink:href="qwebengineurlscheme.xml#registerScheme">QWebEngineUrlScheme::registerScheme</db:link> at application startup.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="isOffTheRecord">
<db:title>bool QWebEngineProfile::isOffTheRecord() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isOffTheRecord</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isOffTheRecord() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this is an off-the-record profile that leaves no record on the computer.</db:para>
<db:para>This will force cookies and HTTP cache to be in memory, but also force all other normally persistent data to be stored in memory.</db:para>
</db:section>
<db:section xml:id="isSpellCheckEnabled">
<db:title>[since 5.8] bool QWebEngineProfile::isSpellCheckEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSpellCheckEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSpellCheckEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the spell checker is enabled; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#setSpellCheckEnabled">setSpellCheckEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="persistentCookiesPolicy">
<db:title>QWebEngineProfile::PersistentCookiesPolicy QWebEngineProfile::persistentCookiesPolicy() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineProfile::PersistentCookiesPolicy</db:type>
<db:methodname>persistentCookiesPolicy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineProfile::PersistentCookiesPolicy persistentCookiesPolicy() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current policy for persistent cookies.</db:para>
<db:para>If the profile is off-the-record, <db:link xlink:href="qwebengineprofile.xml#PersistentCookiesPolicy-enum">NoPersistentCookies</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#setPersistentCookiesPolicy">setPersistentCookiesPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="persistentStoragePath">
<db:title>QString QWebEngineProfile::persistentStoragePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>persistentStoragePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString persistentStoragePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the path used to store persistent data for the browser and web content.</db:para>
<db:para>Persistent data includes persistent cookies, HTML5 local storage, and visited links.</db:para>
<db:para>By default, this is below <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::DataLocation</db:link> in a QtWebengine/StorageName specific subdirectory.</db:para>
<db:note>
<db:para>Use <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>(<db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::DataLocation</db:link>) to obtain the <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::DataLocation</db:link> path.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#setPersistentStoragePath">setPersistentStoragePath</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineprofile.xml#storageName">storageName</db:link>()</db:member>
<db:member><db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAllUrlSchemeHandlers">
<db:title>[since 5.6] void QWebEngineProfile::removeAllUrlSchemeHandlers()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeAllUrlSchemeHandlers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeAllUrlSchemeHandlers()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all custom URL scheme handlers installed in the profile.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="removeUrlScheme">
<db:title>[since 5.6] void QWebEngineProfile::removeUrlScheme(const QByteArray &amp;<db:emphasis>scheme</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeUrlScheme</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>scheme</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeUrlScheme(const QByteArray &amp;scheme)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the custom URL scheme <db:code role="parameter">scheme</db:code> from the profile.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#removeUrlSchemeHandler">removeUrlSchemeHandler</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeUrlSchemeHandler">
<db:title>[since 5.6] void QWebEngineProfile::removeUrlSchemeHandler(QWebEngineUrlSchemeHandler *<db:emphasis>handler</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeUrlSchemeHandler</db:methodname>
<db:methodparam>
<db:type>QWebEngineUrlSchemeHandler *</db:type>
<db:parameter>handler</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeUrlSchemeHandler(QWebEngineUrlSchemeHandler *handler)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the custom URL scheme handler <db:code role="parameter">handler</db:code> from the profile.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#removeUrlScheme">removeUrlScheme</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scripts">
<db:title>QWebEngineScriptCollection *QWebEngineProfile::scripts() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineScriptCollection *</db:type>
<db:methodname>scripts</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineScriptCollection * scripts() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the collection of scripts that are injected into all pages that share this profile.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginescriptcollection.xml">QWebEngineScriptCollection</db:link></db:member>
<db:member><db:link xlink:href="qwebenginescript.xml">QWebEngineScript</db:link></db:member>
<db:member><db:link xlink:href="qwebenginepage.xml#scripts">QWebEnginePage::scripts</db:link>()</db:member>
<db:member><db:link xlink:href="qtwebengine-overview.xml#script-injection">Script Injection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCachePath">
<db:title>void QWebEngineProfile::setCachePath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCachePath</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCachePath(const QString &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Overrides the default path used for disk caches, setting it to <db:code role="parameter">path</db:code>.</db:para>
<db:para>If set to the null string, the default path is restored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#cachePath">cachePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHttpAcceptLanguage">
<db:title>[since 5.6] void QWebEngineProfile::setHttpAcceptLanguage(const QString &amp;<db:emphasis>httpAcceptLanguage</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHttpAcceptLanguage</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>httpAcceptLanguage</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHttpAcceptLanguage(const QString &amp;httpAcceptLanguage)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value of the Accept-Language HTTP request-header field to <db:code role="parameter">httpAcceptLanguage</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#httpAcceptLanguage">httpAcceptLanguage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHttpCacheMaximumSize">
<db:title>void QWebEngineProfile::setHttpCacheMaximumSize(int <db:emphasis>maxSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHttpCacheMaximumSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>maxSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHttpCacheMaximumSize(int maxSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum size of the HTTP cache to <db:code role="parameter">maxSize</db:code> bytes.</db:para>
<db:para>Setting it to <db:code>0</db:code> means the size will be controlled automatically by <db:link xlink:href="qtwebengine-module.xml">QtWebEngine</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#httpCacheMaximumSize">httpCacheMaximumSize</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineprofile.xml#setHttpCacheType">setHttpCacheType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHttpCacheType">
<db:title>void QWebEngineProfile::setHttpCacheType(QWebEngineProfile::HttpCacheType <db:emphasis>httpCacheType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHttpCacheType</db:methodname>
<db:methodparam>
<db:type>QWebEngineProfile::HttpCacheType</db:type>
<db:parameter>httpCacheType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHttpCacheType(QWebEngineProfile::HttpCacheType httpCacheType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the HTTP cache type to <db:code role="parameter">httpCacheType</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#httpCacheType">httpCacheType</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineprofile.xml#setCachePath">setCachePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHttpUserAgent">
<db:title>void QWebEngineProfile::setHttpUserAgent(const QString &amp;<db:emphasis>userAgent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHttpUserAgent</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>userAgent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHttpUserAgent(const QString &amp;userAgent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Overrides the default user-agent string, setting it to <db:code role="parameter">userAgent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#httpUserAgent">httpUserAgent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPersistentCookiesPolicy">
<db:title>void QWebEngineProfile::setPersistentCookiesPolicy(QWebEngineProfile::PersistentCookiesPolicy <db:emphasis>newPersistentCookiesPolicy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPersistentCookiesPolicy</db:methodname>
<db:methodparam>
<db:type>QWebEngineProfile::PersistentCookiesPolicy</db:type>
<db:parameter>newPersistentCookiesPolicy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPersistentCookiesPolicy(QWebEngineProfile::PersistentCookiesPolicy newPersistentCookiesPolicy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the policy for persistent cookies to <db:code role="parameter">newPersistentCookiesPolicy</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#persistentCookiesPolicy">persistentCookiesPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPersistentStoragePath">
<db:title>void QWebEngineProfile::setPersistentStoragePath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPersistentStoragePath</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPersistentStoragePath(const QString &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Overrides the default path used to store persistent web engine data.</db:para>
<db:para>If <db:code role="parameter">path</db:code> is set to the null string, the default path is restored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#persistentStoragePath">persistentStoragePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRequestInterceptor">
<db:title>[since 5.6] void QWebEngineProfile::setRequestInterceptor(QWebEngineUrlRequestInterceptor *<db:emphasis>interceptor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRequestInterceptor</db:methodname>
<db:methodparam>
<db:type>QWebEngineUrlRequestInterceptor *</db:type>
<db:parameter>interceptor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRequestInterceptor(QWebEngineUrlRequestInterceptor *interceptor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers a request interceptor singleton <db:code role="parameter">interceptor</db:code> to intercept URL requests.</db:para>
<db:para>The profile does not take ownership of the pointer.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlrequestinfo.xml">QWebEngineUrlRequestInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSpellCheckEnabled">
<db:title>[since 5.8] void QWebEngineProfile::setSpellCheckEnabled(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSpellCheckEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSpellCheckEnabled(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables spell checker if <db:code role="parameter">enable</db:code> is <db:code>true</db:code>, otherwise disables it.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#isSpellCheckEnabled">isSpellCheckEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSpellCheckLanguages">
<db:title>[since 5.8] void QWebEngineProfile::setSpellCheckLanguages(const QStringList &amp;<db:emphasis>languages</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSpellCheckLanguages</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>languages</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSpellCheckLanguages(const QStringList &amp;languages)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current list of <db:code role="parameter">languages</db:code> for the spell checker. Each language should match the name of the <db:code>.bdic</db:code> dictionary. For example, the language <db:code>en-US</db:code> will load the <db:code>en-US.bdic</db:code> dictionary file.</db:para>
<db:para>See the <db:link xlink:href="qtwebengine-features.xml#spellchecker">Spellchecker feature documentation</db:link> for how dictionary files are searched.</db:para>
<db:para>For more information about how to compile <db:code>.bdic</db:code> dictionaries, see the <db:link xlink:href="qtwebengine-webenginewidgets-spellchecker-example.xml">Spellchecker Example</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#spellCheckLanguages">spellCheckLanguages</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="settings">
<db:title>QWebEngineSettings *QWebEngineProfile::settings() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWebEngineSettings *</db:type>
<db:methodname>settings</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineSettings * settings() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the default settings for all pages in this profile.</db:para>
</db:section>
<db:section xml:id="spellCheckLanguages">
<db:title>[since 5.8] QStringList QWebEngineProfile::spellCheckLanguages() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>spellCheckLanguages</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList spellCheckLanguages() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of languages used by the spell checker.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineprofile.xml#setSpellCheckLanguages">setSpellCheckLanguages</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="storageName">
<db:title>QString QWebEngineProfile::storageName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>storageName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString storageName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the storage name for the profile.</db:para>
<db:para>The storage name is used to give each profile that uses the disk separate subdirectories for persistent data and cache.</db:para>
</db:section>
<db:section xml:id="urlSchemeHandler">
<db:title>[since 5.6] const QWebEngineUrlSchemeHandler *QWebEngineProfile::urlSchemeHandler(const QByteArray &amp;<db:emphasis>scheme</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QWebEngineUrlSchemeHandler *</db:type>
<db:methodname>urlSchemeHandler</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>scheme</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QWebEngineUrlSchemeHandler * urlSchemeHandler(const QByteArray &amp;scheme) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the custom URL scheme handler register for the URL scheme <db:code role="parameter">scheme</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="visitedLinksContainsUrl">
<db:title>bool QWebEngineProfile::visitedLinksContainsUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>visitedLinksContainsUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool visitedLinksContainsUrl(const QUrl &amp;url) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">url</db:code> is considered a visited link by this profile.</db:para>
</db:section>
</db:section>
</db:article>
