<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_target_compile_qml_to_cpp</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Compiles QML files (.qml) to C++ source code with <db:link xlink:href="qtqml-tool-qmltc.xml">qmltc</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt6-target-compile-qml-to-cpp"/>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_target_compile_qml_to_cpp(
    target
    QML_FILES ...
    [NAMESPACE namespace]
    [IMPORT_PATHS ...]
)
</db:programlisting>
<db:para>If <db:link xlink:href="">versionless commands</db:link> are disabled, use <db:code>qt6_target_compile_qml_to_cpp()</db:code> instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>By default, <db:link xlink:href="qtqml-tool-qmltc.xml">qmltc</db:link> creates lower-case <db:code>.h</db:code> and <db:code>.cpp</db:code> files for a given <db:code>.qml</db:code> file. For example, <db:code>Foo.qml</db:code> ends up being compiled into <db:code>foo.h</db:code> and <db:code>foo.cpp</db:code>.</db:para>
<db:para>The created C++ files are placed into a dedicated <db:code>.qmltc/&lt;target&gt;/</db:code> sub-directory of the <db:code>BINARY_DIR</db:code> of the <db:code>target</db:code> passed as an argument to this command. These files are then automatically added to the target sources and compiled as Qt C++ code along with other source files.</db:para>
<db:note>
<db:para>This command is in technology preview and may change in future releases.</db:para>
</db:note>
</db:section>
<db:section xml:id="arguments">
<db:title>Arguments</db:title>
<db:para>The <db:code>target</db:code> specifies the name of the binary that the QML files belong to. In order for the compilation to succeed, the target is expected to be a valid QML module, defined with qt_add_qml_module() command.</db:para>
<db:para><db:code>QML_FILES</db:code> lists the <db:code>.qml</db:code> files that are going to be compiled into C++. In most cases, all the target's QML files would be specified in the QML_FILES. This way, QML_FILES argument of this command is equivalent to QML_FILES argument of the qt_add_qml_module() command.</db:para>
<db:para><db:code>NAMESPACE</db:code> argument defines a namespace, in which the generated C++ code resides. By default, no namespace is specified for user projects. The code generated from Qt's own sources is put under a <db:link xlink:href="qt.xml">QT_NAMESPACE</db:link> namespace.</db:para>
<db:para><db:code>IMPORT_PATHS</db:code> can be used to add locations that contain QML modules. The specified entries are passed to qmltc and allow to correctly import modules that do not reside under the location specified by <db:link xlink:href="qlibraryinfo.xml#LibraryPath-enum">QLibraryInfo::QmlImportsPath</db:link>.</db:para>
<db:para>While processing QML_FILES, the following source file properties are respected:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>QT_QMLTC_FILE_BASENAME</db:code>: use this source file property to specify a non-default .h and .cpp file name, which might be useful to e.g. resolve conflicting file names (imagine you have main.qml that is being compiled, but main.h already exists, so #include &quot;main.h&quot; might not do what you expect it to do). QT_QMLTC_FILE_BASENAME is expected to be a file name (without extension), so any preceding directory is ignored. Unlike in the case of default behavior, the QT_QMLTC_FILE_BASENAME is not lower-cased.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
