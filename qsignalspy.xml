<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QSignalSpy Class</db:title>
<db:productname>QtTestLib</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Test Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> class enables introspection of signal emission.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSignalSpy</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += testlib</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> can connect to any signal of any object and records its emission. <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> itself is a list of <db:link xlink:href="qvariant.xml">QVariant</db:link> lists. Each emission of the signal will append one item to the list, containing the arguments of the signal.</db:para>
<db:para>The following example records all signal emissions for the <db:code>clicked()</db:code> signal of a QCheckBox:</db:para>
<db:programlisting language="cpp">QCheckBox *box = ...;
QSignalSpy spy(box, SIGNAL(clicked(bool)));

// do something that triggers the signal
box-&gt;animateClick();

QCOMPARE(spy.count(), 1); // make sure the signal was emitted exactly one time
QList&lt;QVariant&gt; arguments = spy.takeFirst(); // take the first signal

QVERIFY(arguments.at(0).toBool() == true); // verify the first argument
</db:programlisting>
<db:para><db:code>spy.takeFirst()</db:code> returns the arguments for the first emitted signal, as a list of <db:link xlink:href="qvariant.xml">QVariant</db:link> objects. The <db:code>clicked()</db:code> signal has a single bool argument, which is stored as the first entry in the list of arguments.</db:para>
<db:para>The example below catches a signal from a custom object:</db:para>
<db:programlisting language="cpp">QSignalSpy spy(myCustomObject, SIGNAL(mySignal(int,QString,double)));

myCustomObject-&gt;doSomething(); // trigger emission of the signal

QList&lt;QVariant&gt; arguments = spy.takeFirst();
QVERIFY(arguments.at(0).type() == QVariant::Int);
QVERIFY(arguments.at(1).type() == QVariant::QString);
QVERIFY(arguments.at(2).type() == QVariant::double);
</db:programlisting>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Non-standard data types need to be registered, using the qRegisterMetaType() function, before you can create a <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link>. For example:</db:para>
<db:programlisting language="cpp">qRegisterMetaType&lt;SomeStruct&gt;();
QSignalSpy spy(&amp;model, SIGNAL(whatever(SomeStruct)));
</db:programlisting>
<db:para>To retrieve the instance, you can use <db:link xlink:href="qvariant.xml#qvariant_cast">qvariant_cast</db:link>:</db:para>
<db:programlisting language="cpp">// get the first argument from the first received signal:
SomeStruct result = qvariant_cast&lt;SomeStruct&gt;(spy.at(0).at(0));
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSignalSpy">
<db:title>[explicit] QSignalSpy::QSignalSpy(const QObject *<db:emphasis>object</db:emphasis>, const char *<db:emphasis>signal</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> that listens for emissions of the <db:code role="parameter">signal</db:code> from the <db:link xlink:href="qobject.xml">QObject</db:link> <db:code role="parameter">object</db:code>. If <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> is not able to listen for a valid signal (for example, because <db:code role="parameter">object</db:code> is null or <db:code role="parameter">signal</db:code> does not denote a valid signal of <db:code role="parameter">object</db:code>), an explanatory warning message will be output using <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>() and subsequent calls to <db:code>isValid()</db:code> will return false.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSignalSpy spy(myPushButton, SIGNAL(clicked(bool)));
</db:programlisting>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QSignalSpy::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if the signal spy listens to a valid signal, otherwise false.</db:para>
</db:section>
<db:section xml:id="signal">
<db:title>QByteArray QSignalSpy::signal() const</db:title>
<db:para>Returns the normalized signal the spy is currently listening to.</db:para>
</db:section>
<db:section xml:id="wait">
<db:title>[since 5.0] bool QSignalSpy::wait(int <db:emphasis>timeout</db:emphasis> = 5000)</db:title>
<db:para>Starts an event loop that runs until the given signal is received. Optionally the event loop can return earlier on a <db:code role="parameter">timeout</db:code> (in milliseconds).</db:para>
<db:para>Returns <db:code>true</db:code> if the signal was emitted at least once in <db:code role="parameter">timeout</db:code> milliseconds, otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QVERIFY(spy.wait(1000));
</db:programlisting>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
</db:section>
</db:article>
