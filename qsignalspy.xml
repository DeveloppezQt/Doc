<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSignalSpy Class</db:title>
<db:productname>QtTestLib</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Test Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> class enables introspection of signal emission.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSignalSpy</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += testlib</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qlist.xml" xlink:role="class">QList</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> can connect to any signal of any object and records its emission. <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> itself is a list of <db:link xlink:href="qvariant.xml">QVariant</db:link> lists. Each emission of the signal will append one item to the list, containing the arguments of the signal.</db:para>
<db:para>The following example records all signal emissions for the <db:code>clicked()</db:code> signal of a <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link>:</db:para>
<db:programlisting language="cpp">QCheckBox *box = ...;
QSignalSpy spy(box, SIGNAL(clicked(bool)));

// do something that triggers the signal
box-&amp;gt;animateClick();

QCOMPARE(spy.count(), 1); // make sure the signal was emitted exactly one time
QList&amp;lt;QVariant&amp;gt; arguments = spy.takeFirst(); // take the first signal

QVERIFY(arguments.at(0).toBool() == true); // verify the first argument
</db:programlisting>
<db:para><db:code>spy.takeFirst()</db:code> returns the arguments for the first emitted signal, as a list of <db:link xlink:href="qvariant.xml">QVariant</db:link> objects. The <db:code>clicked()</db:code> signal has a single bool argument, which is stored as the first entry in the list of arguments.</db:para>
<db:para>The example below catches a signal from a custom object:</db:para>
<db:programlisting language="cpp">QSignalSpy spy(myCustomObject, SIGNAL(mySignal(int,QString,double)));

myCustomObject-&amp;gt;doSomething(); // trigger emission of the signal

QList&amp;lt;QVariant&amp;gt; arguments = spy.takeFirst();
QVERIFY(arguments.at(0).type() == QVariant::Int);
QVERIFY(arguments.at(1).type() == QVariant::String);
QVERIFY(arguments.at(2).type() == QVariant::double);
</db:programlisting>
<db:note>
<db:para>Non-standard data types need to be registered, using the <db:link xlink:href="qmetatype.xml#qRegisterMetaType-1">qRegisterMetaType</db:link>() function, before you can create a <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link>. For example:</db:para>
</db:note>
<db:programlisting language="cpp">qRegisterMetaType&amp;lt;SomeStruct&amp;gt;();
QSignalSpy spy(&amp;amp;model, SIGNAL(whatever(SomeStruct)));
</db:programlisting>
<db:para>To retrieve the instance, you can use <db:link xlink:href="qvariant.xml#qvariant_cast">qvariant_cast</db:link>:</db:para>
<db:programlisting language="cpp">// get the first argument from the first received signal:
SomeStruct result = qvariant_cast&amp;lt;SomeStruct&amp;gt;(spy.at(0).at(0));
</db:programlisting>
<db:section xml:id="verifying-signal-emissions">
<db:title>Verifying Signal Emissions</db:title>
<db:para>The <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> class provides an elegant mechanism for capturing the list of signals emitted by an object. However, you should verify its validity after construction. The constructor does a number of sanity checks, such as verifying that the signal to be spied upon actually exists. To make the diagnosis of test failures easier, the results of these checks should be checked by calling <db:code>QVERIFY(spy.isValid())</db:code> before proceeding further with a test.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtest.xml#QVERIFY">QVERIFY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSignalSpy">
<db:title>[explicit] QSignalSpy::QSignalSpy(const QObject *<db:emphasis>object</db:emphasis>, const char *<db:emphasis>signal</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSignalSpy</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSignalSpy(const QObject *object, const char *signal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> that listens for emissions of the <db:code role="parameter">signal</db:code> from the <db:link xlink:href="qobject.xml">QObject</db:link> <db:code role="parameter">object</db:code>. If <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> is not able to listen for a valid signal (for example, because <db:code role="parameter">object</db:code> is <db:code>nullptr</db:code> or <db:code role="parameter">signal</db:code> does not denote a valid signal of <db:code role="parameter">object</db:code>), an explanatory warning message will be output using <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>() and subsequent calls to <db:code>isValid()</db:code> will return false.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSignalSpy spy(myPushButton, SIGNAL(clicked(bool)));
</db:programlisting>
</db:section>
<db:section xml:id="QSignalSpy-1">
<db:title>[since 5.4] QSignalSpy::QSignalSpy(const QObject *<db:emphasis>object</db:emphasis>, PointerToMemberFunction <db:emphasis>signal</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSignalSpy</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>PointerToMemberFunction</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSignalSpy(const QObject *object, PointerToMemberFunction signal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> that listens for emissions of the <db:code role="parameter">signal</db:code> from the <db:link xlink:href="qobject.xml">QObject</db:link> <db:code role="parameter">object</db:code>. If <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> is not able to listen for a valid signal (for example, because <db:code role="parameter">object</db:code> is <db:code>nullptr</db:code> or <db:code role="parameter">signal</db:code> does not denote a valid signal of <db:code role="parameter">object</db:code>), an explanatory warning message will be output using <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>() and subsequent calls to <db:code>isValid()</db:code> will return false.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSignalSpy spy(myPushButton, &amp;amp;QPushButton::clicked);
</db:programlisting>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="QSignalSpy-2">
<db:title>[since 5.14] QSignalSpy::QSignalSpy(const QObject *<db:emphasis>obj</db:emphasis>, const QMetaMethod &amp;<db:emphasis>signal</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSignalSpy</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMetaMethod &amp;</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QSignalSpy(const QObject *obj, const QMetaMethod &amp;signal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> that listens for emissions of the <db:code role="parameter">signal</db:code> from the <db:link xlink:href="qobject.xml">QObject</db:link> <db:code role="parameter">obj</db:code>. If <db:link xlink:href="qsignalspy.xml">QSignalSpy</db:link> is not able to listen for a valid signal (for example, because <db:code role="parameter">obj</db:code> is <db:code>nullptr</db:code> or <db:code role="parameter">signal</db:code> does not denote a valid signal of <db:code role="parameter">obj</db:code>), an explanatory warning message will be output using <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>() and subsequent calls to <db:code>isValid()</db:code> will return false.</db:para>
<db:para>This constructor is convenient to use when Qt's meta-object system is heavily used in a test.</db:para>
<db:para>Basic usage example:</db:para>
<db:programlisting language="cpp">QObject object;
auto mo = object.metaObject();
auto signalIndex = mo-&amp;gt;indexOfSignal(&quot;objectNameChanged(QString)&quot;);
auto signal = mo-&amp;gt;method(signalIndex);

QSignalSpy spy(&amp;amp;object, signal);
object.setObjectName(&quot;A new object name&quot;);
QCOMPARE(spy.count(), 1);
</db:programlisting>
<db:para>Imagine we need to check whether all properties of the <db:link xlink:href="qwindow.xml">QWindow</db:link> class that represent minimum and maximum dimensions are properly writable. The following example demonstrates one of the approaches:</db:para>
<db:programlisting language="cpp">void tst_QWindow::writeMinMaxDimensionalProps_data()
    QTest::addColumn&amp;lt;int&amp;gt;(&quot;propertyIndex&quot;);

    // Collect all relevant properties
    static const auto mo = QWindow::staticMetaObject;
    for (int i = mo.propertyOffset(); i &amp;lt; mo.propertyCount(); ++i) {
        auto property = mo.property(i);

        // ...that have type int
        if (property.type() == QVariant::Int) {
            static const QRegularExpression re(&quot;^minimum|maximum&quot;);
            const auto name = property.name();

            // ...and start with &quot;minimum&quot; or &quot;maximum&quot;
            if (re.match(name).hasMatch()) {
                QTest::addRow(&quot;%s&quot;, name) &amp;lt;&amp;lt; i;
            }
        }
    }
}

void tst_QWindow::writeMinMaxDimensionalProps()
{
    QFETCH(int, propertyIndex);

    auto property = QWindow::staticMetaObject.property(propertyIndex);
    QVERIFY(property.isWritable());
    QVERIFY(property.hasNotifySignal());

    QWindow window;
    QSignalSpy spy(&amp;amp;window, property.notifySignal());

    QVERIFY(property.write(&amp;amp;window, 42));
    QCOMPARE(spy.count(), 1);
}
</db:programlisting>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QSignalSpy::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the signal spy listens to a valid signal, otherwise false.</db:para>
</db:section>
<db:section xml:id="signal">
<db:title>QByteArray QSignalSpy::signal() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>signal</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray signal() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the normalized signal the spy is currently listening to.</db:para>
</db:section>
<db:section xml:id="wait">
<db:title>[since 5.0] bool QSignalSpy::wait(int <db:emphasis>timeout</db:emphasis> = 5000)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>wait</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>timeout</db:parameter>
<db:initializer>5000</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool wait(int timeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts an event loop that runs until the given signal is received. Optionally the event loop can return earlier on a <db:code role="parameter">timeout</db:code> (in milliseconds).</db:para>
<db:para>Returns <db:code>true</db:code> if the signal was emitted at least once in <db:code role="parameter">timeout</db:code> milliseconds, otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QVERIFY(spy.wait(1000));
</db:programlisting>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
</db:section>
</db:article>
