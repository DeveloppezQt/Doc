<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCandlestickSeries Class</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcandlestickseries.xml">QCandlestickSeries</db:link> class presents data as candlesticks.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCandlestickSeries</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtcharts-candlestickseries.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractseries.xml" xlink:role="class">QAbstractSeries</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class acts as a container for single candlestick items. Each item is drawn to its own category when using <db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link>. <db:link xlink:href="qdatetimeaxis.xml">QDateTimeAxis</db:link> and <db:link xlink:href="qvalueaxis.xml">QValueAxis</db:link> can be used as alternatives to <db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link>. In this case, each candlestick item is drawn according to its timestamp value.</db:para>
<db:note>
<db:para>The timestamps must be unique within a <db:link xlink:href="qcandlestickseries.xml">QCandlestickSeries</db:link>. When using <db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link>, only the first one of the candlestick items sharing a timestamp is drawn. If the chart includes multiple instances of <db:link xlink:href="qcandlestickseries.xml">QCandlestickSeries</db:link>, items from different series sharing a timestamp are drawn to the same category. When using <db:link xlink:href="qvalueaxis.xml">QValueAxis</db:link> or <db:link xlink:href="qdatetimeaxis.xml">QDateTimeAxis</db:link>, candlestick items sharing a timestamp will overlap each other.</db:para>
</db:note>
<db:para>See the <db:link xlink:href="qtcharts-chartsgallery-example.xml">Charts with Widgets Gallery</db:link> to learn how to create a candlestick chart.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_candlestickchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandlestickset.xml">QCandlestickSet</db:link></db:member>
<db:member><db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeaxis.xml">QDateTimeAxis</db:link></db:member>
<db:member><db:link xlink:href="qvalueaxis.xml">QValueAxis</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="bodyOutlineVisible-prop">
<db:title>bodyOutlineVisible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>bodyOutlineVisible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">bodyOutlineVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setBodyOutlineVisible</db:synopsisinfo>
<db:synopsisinfo role="notifier">bodyOutlineVisibilityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the visibility of the candlestick body outline.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">bodyOutlineVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBodyOutlineVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>bodyOutlineVisible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcandlestickseries.xml#bodyOutlineVisibilityChanged">bodyOutlineVisibilityChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="bodyWidth-prop">
<db:title>bodyWidth : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>bodyWidth</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">bodyWidth</db:synopsisinfo>
<db:synopsisinfo role="setter">setBodyWidth</db:synopsisinfo>
<db:synopsisinfo role="notifier">bodyWidthChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the relative width of the candlestick item within its own slot, in the range from 0.0 to 1.0.</db:para>
<db:para>Values outside this range are clamped to 0.0 or 1.0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">bodyWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBodyWidth</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>bodyWidth</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcandlestickseries.xml#bodyWidthChanged">bodyWidthChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="brush-prop">
<db:title>brush : QBrush</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QBrush</db:type>
<db:varname>brush</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">brush</db:synopsisinfo>
<db:synopsisinfo role="setter">setBrush</db:synopsisinfo>
<db:synopsisinfo role="notifier">brushChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the brush used to fill the candlestick items.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbrush.xml">QBrush</db:link></db:type> <db:emphasis role="bold">brush</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBrush</db:emphasis>(const <db:type><db:link xlink:href="qbrush.xml">QBrush</db:link></db:type> &amp;<db:emphasis>brush</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcandlestickseries.xml#brushChanged">brushChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="capsVisible-prop">
<db:title>capsVisible : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>capsVisible</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">capsVisible</db:synopsisinfo>
<db:synopsisinfo role="setter">setCapsVisible</db:synopsisinfo>
<db:synopsisinfo role="notifier">capsVisibilityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the visibility of the caps.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">capsVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCapsVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>capsVisible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcandlestickseries.xml#capsVisibilityChanged">capsVisibilityChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="capsWidth-prop">
<db:title>capsWidth : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>capsWidth</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">capsWidth</db:synopsisinfo>
<db:synopsisinfo role="setter">setCapsWidth</db:synopsisinfo>
<db:synopsisinfo role="notifier">capsWidthChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the relative width of the caps within a candlestick, in the range from 0.0 to 1.0.</db:para>
<db:para>Values outside this range are clamped to 0.0 or 1.0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">capsWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCapsWidth</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>capsWidth</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcandlestickseries.xml#capsWidthChanged">capsWidthChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only] count : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">count</db:synopsisinfo>
<db:synopsisinfo role="notifier">countChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of candlestick items in a series.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qcandlestickseries.xml#count">count</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcandlestickseries.xml#countChanged">countChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="decreasingColor-prop">
<db:title>decreasingColor : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>decreasingColor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">decreasingColor</db:synopsisinfo>
<db:synopsisinfo role="setter">setDecreasingColor</db:synopsisinfo>
<db:synopsisinfo role="notifier">decreasingColorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the color of the decreasing candlestick item body.</db:para>
<db:para>A candlestick is <db:emphasis>decreasing</db:emphasis> when its open value is higher than the close value. By default, this property is set to the brush color with the alpha channel set to 128. The default color is used also when the property is set to an invalid color value.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">decreasingColor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDecreasingColor</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>decreasingColor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcandlestickseries.xml#decreasingColorChanged">decreasingColorChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="increasingColor-prop">
<db:title>increasingColor : QColor</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QColor</db:type>
<db:varname>increasingColor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">increasingColor</db:synopsisinfo>
<db:synopsisinfo role="setter">setIncreasingColor</db:synopsisinfo>
<db:synopsisinfo role="notifier">increasingColorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the color of the increasing candlestick item body.</db:para>
<db:para>A candlestick is <db:emphasis>increasing</db:emphasis> when its close value is higher than the open value. By default, this property is set to the brush color. The default color is used also when the property is set to an invalid color value.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> <db:emphasis role="bold">increasingColor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setIncreasingColor</db:emphasis>(const <db:type><db:link xlink:href="qcolor.xml">QColor</db:link></db:type> &amp;<db:emphasis>increasingColor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcandlestickseries.xml#increasingColorChanged">increasingColorChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maximumColumnWidth-prop">
<db:title>maximumColumnWidth : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>maximumColumnWidth</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maximumColumnWidth</db:synopsisinfo>
<db:synopsisinfo role="setter">setMaximumColumnWidth</db:synopsisinfo>
<db:synopsisinfo role="notifier">maximumColumnWidthChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum width of the candlestick items in pixels. Setting a negative value means there is no maximum width. All negative values are converted to -1.0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">maximumColumnWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximumColumnWidth</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>maximumColumnWidth</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcandlestickseries.xml#maximumColumnWidthChanged">maximumColumnWidthChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="minimumColumnWidth-prop">
<db:title>minimumColumnWidth : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>minimumColumnWidth</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">minimumColumnWidth</db:synopsisinfo>
<db:synopsisinfo role="setter">setMinimumColumnWidth</db:synopsisinfo>
<db:synopsisinfo role="notifier">minimumColumnWidthChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum width of the candlestick items in pixels. Setting a negative value means there is no minimum width. All negative values are converted to -1.0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">minimumColumnWidth</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinimumColumnWidth</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>minimumColumnWidth</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcandlestickseries.xml#minimumColumnWidthChanged">minimumColumnWidthChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="pen-prop">
<db:title>pen : QPen</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPen</db:type>
<db:varname>pen</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pen</db:synopsisinfo>
<db:synopsisinfo role="setter">setPen</db:synopsisinfo>
<db:synopsisinfo role="notifier">penChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the pen used to draw the lines of the candlestick items.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpen.xml">QPen</db:link></db:type> <db:emphasis role="bold">pen</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPen</db:emphasis>(const <db:type><db:link xlink:href="qpen.xml">QPen</db:link></db:type> &amp;<db:emphasis>pen</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcandlestickseries.xml#penChanged">penChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCandlestickSeries">
<db:title>[explicit] QCandlestickSeries::QCandlestickSeries(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCandlestickSeries</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCandlestickSeries(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty <db:link xlink:href="qcandlestickseries.xml">QCandlestickSeries</db:link>. The <db:code role="parameter">parent</db:code> is optional.</db:para>
</db:section>
<db:section xml:id="dtor.QCandlestickSeries">
<db:title>[virtual] QCandlestickSeries::~QCandlestickSeries()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QCandlestickSeries</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCandlestickSeries()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the series. Removes the series from the chart.</db:para>
</db:section>
<db:section xml:id="append">
<db:title>bool QCandlestickSeries::append(QCandlestickSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>QCandlestickSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool append(QCandlestickSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a single candlestick item specified by <db:code role="parameter">set</db:code> to the series and takes ownership of it. If the item is null or it is already in the series, it is not appended. Returns <db:code>true</db:code> if appending succeeded, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="append-1">
<db:title>bool QCandlestickSeries::append(const QList&lt;QCandlestickSet *&gt; &amp;<db:emphasis>sets</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QCandlestickSet *&gt; &amp;</db:type>
<db:parameter>sets</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool append(const QList&lt;QCandlestickSet *&gt; &amp;sets)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a list of candlestick items specified by <db:code role="parameter">sets</db:code> to the series and takes ownership of it. If any of the items are null, already belong to the series, or appear in the list more than once, nothing is appended. Returns <db:code>true</db:code> if all items were appended successfully, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="bodyOutlineVisibilityChanged">
<db:title>void QCandlestickSeries::bodyOutlineVisibilityChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bodyOutlineVisibilityChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">bodyOutlineVisible</db:synopsisinfo>
<db:synopsisinfo role="signature">void bodyOutlineVisibilityChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the visibility of the candlestick item body outline changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcandlestickseries.xml#bodyOutlineVisible-prop">bodyOutlineVisible</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandlestickseries.xml#bodyOutlineVisible-prop">bodyOutlineVisible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bodyWidthChanged">
<db:title>void QCandlestickSeries::bodyWidthChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bodyWidthChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">bodyWidth</db:synopsisinfo>
<db:synopsisinfo role="signature">void bodyWidthChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the candlestick item width changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcandlestickseries.xml#bodyWidth-prop">bodyWidth</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandlestickseries.xml#bodyWidth-prop">bodyWidth</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="brushChanged">
<db:title>void QCandlestickSeries::brushChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>brushChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">brush</db:synopsisinfo>
<db:synopsisinfo role="signature">void brushChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the candlestick item brush changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcandlestickseries.xml#brush-prop">brush</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandlestickseries.xml#brush-prop">brush</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="candlestickSetsAdded">
<db:title>void QCandlestickSeries::candlestickSetsAdded(const QList&lt;QCandlestickSet *&gt; &amp;<db:emphasis>sets</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>candlestickSetsAdded</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QCandlestickSet *&gt; &amp;</db:type>
<db:parameter>sets</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void candlestickSetsAdded(const QList&lt;QCandlestickSet *&gt; &amp;sets)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the candlestick items specified by <db:code role="parameter">sets</db:code> are added to the series.</db:para>
</db:section>
<db:section xml:id="candlestickSetsRemoved">
<db:title>void QCandlestickSeries::candlestickSetsRemoved(const QList&lt;QCandlestickSet *&gt; &amp;<db:emphasis>sets</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>candlestickSetsRemoved</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QCandlestickSet *&gt; &amp;</db:type>
<db:parameter>sets</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void candlestickSetsRemoved(const QList&lt;QCandlestickSet *&gt; &amp;sets)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the candlestick items specified by <db:code role="parameter">sets</db:code> are removed from the series.</db:para>
</db:section>
<db:section xml:id="capsVisibilityChanged">
<db:title>void QCandlestickSeries::capsVisibilityChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>capsVisibilityChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">capsVisible</db:synopsisinfo>
<db:synopsisinfo role="signature">void capsVisibilityChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the visibility of the candlestick item caps changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcandlestickseries.xml#capsVisible-prop">capsVisible</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandlestickseries.xml#capsVisible-prop">capsVisible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="capsWidthChanged">
<db:title>void QCandlestickSeries::capsWidthChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>capsWidthChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">capsWidth</db:synopsisinfo>
<db:synopsisinfo role="signature">void capsWidthChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the candlestick item caps width changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcandlestickseries.xml#capsWidth-prop">capsWidth</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandlestickseries.xml#capsWidth-prop">capsWidth</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QCandlestickSeries::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all candlestick items from the series and permanently deletes them.</db:para>
</db:section>
<db:section xml:id="clicked">
<db:title>void QCandlestickSeries::clicked(QCandlestickSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clicked</db:methodname>
<db:methodparam>
<db:type>QCandlestickSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clicked(QCandlestickSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the candlestick item specified by <db:code role="parameter">set</db:code> is clicked on the chart.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>int QCandlestickSeries::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">count</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of the candlestick items in the series.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qcandlestickseries.xml#count-prop">count</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="countChanged">
<db:title>void QCandlestickSeries::countChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>countChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">count</db:synopsisinfo>
<db:synopsisinfo role="signature">void countChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the number of candlestick items in the series changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcandlestickseries.xml#count-prop">count</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandlestickseries.xml#count">count</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="decreasingColorChanged">
<db:title>void QCandlestickSeries::decreasingColorChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>decreasingColorChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">decreasingColor</db:synopsisinfo>
<db:synopsisinfo role="signature">void decreasingColorChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the candlestick item decreasing color changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcandlestickseries.xml#decreasingColor-prop">decreasingColor</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandlestickseries.xml#decreasingColor-prop">decreasingColor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="doubleClicked">
<db:title>void QCandlestickSeries::doubleClicked(QCandlestickSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>doubleClicked</db:methodname>
<db:methodparam>
<db:type>QCandlestickSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void doubleClicked(QCandlestickSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the candlestick item specified by <db:code role="parameter">set</db:code> is double-clicked on the chart.</db:para>
</db:section>
<db:section xml:id="hovered">
<db:title>void QCandlestickSeries::hovered(bool <db:emphasis>status</db:emphasis>, QCandlestickSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hovered</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>status</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QCandlestickSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hovered(bool status, QCandlestickSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a mouse is hovered over the candlestick item specified by <db:code role="parameter">set</db:code> in a chart.</db:para>
<db:para>When the mouse moves over the item, <db:code role="parameter">status</db:code> turns <db:code>true</db:code>, and when the mouse moves away again, it turns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="increasingColorChanged">
<db:title>void QCandlestickSeries::increasingColorChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>increasingColorChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">increasingColor</db:synopsisinfo>
<db:synopsisinfo role="signature">void increasingColorChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the candlestick item increasing color changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcandlestickseries.xml#increasingColor-prop">increasingColor</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandlestickseries.xml#increasingColor-prop">increasingColor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert">
<db:title>bool QCandlestickSeries::insert(int <db:emphasis>index</db:emphasis>, QCandlestickSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QCandlestickSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insert(int index, QCandlestickSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the candlestick item specified by <db:code role="parameter">set</db:code> to the series at the position specified by <db:code role="parameter">index</db:code>. Takes ownership of the item. If the item is null or already belongs to the series, it is not inserted. Returns <db:code>true</db:code> if inserting succeeded, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="maximumColumnWidthChanged">
<db:title>void QCandlestickSeries::maximumColumnWidthChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>maximumColumnWidthChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">maximumColumnWidth</db:synopsisinfo>
<db:synopsisinfo role="signature">void maximumColumnWidthChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when there is a change in the maximum column width of candlestick items.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcandlestickseries.xml#maximumColumnWidth-prop">maximumColumnWidth</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandlestickseries.xml#maximumColumnWidth-prop">maximumColumnWidth</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumColumnWidthChanged">
<db:title>void QCandlestickSeries::minimumColumnWidthChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>minimumColumnWidthChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">minimumColumnWidth</db:synopsisinfo>
<db:synopsisinfo role="signature">void minimumColumnWidthChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when there is a change in the minimum column width of candlestick items.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcandlestickseries.xml#minimumColumnWidth-prop">minimumColumnWidth</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandlestickseries.xml#minimumColumnWidth-prop">minimumColumnWidth</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="penChanged">
<db:title>void QCandlestickSeries::penChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>penChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">pen</db:synopsisinfo>
<db:synopsisinfo role="signature">void penChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the candlestick item pen changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcandlestickseries.xml#pen-prop">pen</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcandlestickseries.xml#pen-prop">pen</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pressed">
<db:title>void QCandlestickSeries::pressed(QCandlestickSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pressed</db:methodname>
<db:methodparam>
<db:type>QCandlestickSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pressed(QCandlestickSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user clicks the candlestick item specified by <db:code role="parameter">set</db:code> and holds down the mouse button.</db:para>
</db:section>
<db:section xml:id="released">
<db:title>void QCandlestickSeries::released(QCandlestickSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>released</db:methodname>
<db:methodparam>
<db:type>QCandlestickSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void released(QCandlestickSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user releases the mouse press on the candlestick item specified by <db:code role="parameter">set</db:code>.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>bool QCandlestickSeries::remove(QCandlestickSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>QCandlestickSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool remove(QCandlestickSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes a single candlestick item, specified by <db:code role="parameter">set</db:code>, from the series. Returns <db:code>true</db:code> if the item is successfully deleted, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="remove-1">
<db:title>bool QCandlestickSeries::remove(const QList&lt;QCandlestickSet *&gt; &amp;<db:emphasis>sets</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QCandlestickSet *&gt; &amp;</db:type>
<db:parameter>sets</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool remove(const QList&lt;QCandlestickSet *&gt; &amp;sets)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes a list of candlestick items specified by <db:code role="parameter">sets</db:code> from the series. If any of the items are null, were already removed from the series, or appear in the list more than once, nothing is removed. Returns <db:code>true</db:code> if all items were removed successfully, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="sets">
<db:title>QList&lt;QCandlestickSet *&gt; QCandlestickSeries::sets() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QCandlestickSet *&gt;</db:type>
<db:methodname>sets</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QCandlestickSet *&gt; sets() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of candlestick items in the series. Ownership of the items does not change.</db:para>
</db:section>
<db:section xml:id="take">
<db:title>bool QCandlestickSeries::take(QCandlestickSet *<db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>take</db:methodname>
<db:methodparam>
<db:type>QCandlestickSet *</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool take(QCandlestickSet *set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Takes a single candlestick item, specified by <db:code role="parameter">set</db:code>, from the series. Does not delete the item. Returns <db:code>true</db:code> if the take operation was successful, <db:code>false</db:code> otherwise.</db:para>
<db:note>
<db:para>The series remains the item's parent object. You must set the parent object to take full ownership.</db:para>
</db:note>
</db:section>
<db:section xml:id="type">
<db:title>[override virtual] QAbstractSeries::SeriesType QCandlestickSeries::type() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QAbstractSeries::SeriesType</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractSeries::SeriesType type() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qabstractseries.xml#type-prop" role="property">QAbstractSeries::type</db:link>.</db:para>
<db:para>Returns the type of the series (<db:link xlink:href="qabstractseries.xml#SeriesType-enum">QAbstractSeries::SeriesTypeCandlestick</db:link>).</db:para>
</db:section>
</db:section>
</db:article>
