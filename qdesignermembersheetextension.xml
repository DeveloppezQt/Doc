<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDesignerMemberSheetExtension Class</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link> class allows you to manipulate a widget's member functions which is displayed when configuring connections using Qt Designer's mode for editing signals and slots.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDesignerMemberSheetExtension</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += designer</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link> is a collection of functions that is typically used to query a widget's member functions, and to manipulate the member functions' appearance in <db:emphasis>Qt Designer</db:emphasis>'s signals and slots editing mode. For example:</db:para>
<db:programlisting language="cpp">QDesignerMemberSheetExtension *memberSheet  = 0;
QExtensionManager manager = formEditor-&amp;gt;extensionManager();

memberSheet = qt_extension&amp;lt;QDesignerMemberSheetExtension*&amp;gt;(manager, widget);
int index = memberSheet-&amp;gt;indexOf(setEchoMode);
memberSheet-&amp;gt;setVisible(index, false);

delete memberSheet;
</db:programlisting>
<db:para>When implementing a custom widget plugin, a pointer to <db:emphasis>Qt Designer</db:emphasis>'s current QDesignerFormEditorInterface object (<db:code>formEditor</db:code> in the example above) is provided by the <db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">QDesignerCustomWidgetInterface::initialize</db:link>() function's parameter.</db:para>
<db:para>The member sheet (and any other extension), can be retrieved by querying <db:emphasis>Qt Designer</db:emphasis>'s extension manager using the qt_extension() function. When you want to release the extension, you only need to delete the pointer.</db:para>
<db:para>All widgets have a default member sheet used in <db:emphasis>Qt Designer</db:emphasis>'s signals and slots editing mode with the widget's member functions. But <db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link> also provides an interface for creating custom member sheet extensions.</db:para>
<db:warning>
<db:para><db:emphasis>Qt Designer</db:emphasis> uses the <db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link> to facilitate the signal and slot editing mode. Whenever a connection between two widgets is requested, <db:emphasis>Qt Designer</db:emphasis> will query for the widgets' member sheet extensions. If a widget has an implemented member sheet extension, this extension will override the default member sheet.</db:para>
</db:warning>
<db:para>To create a member sheet extension, your extension class must inherit from both QObject and <db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link>. Then, since we are implementing an interface, we must ensure that it's made known to the meta object system using the <db:link xlink:href="qobject-proxy.xml#Q_INTERFACES">Q_INTERFACES</db:link>() macro:</db:para>
<db:programlisting language="cpp">class MyMemberSheetExtension : public QObject,
        public QDesignerMemberSheetExtension
{
    Q_OBJECT
    Q_INTERFACES(QDesignerMemberSheetExtension)

public:
    ...
}
</db:programlisting>
<db:para>This enables <db:emphasis>Qt Designer</db:emphasis> to use <db:link xlink:href="qobject-proxy.xml#qobject_cast-1">qobject_cast</db:link>() to query for supported interfaces using nothing but a QObject pointer.</db:para>
<db:para>In <db:emphasis>Qt Designer</db:emphasis> the extensions are not created until they are required. For that reason, when implementing a member sheet extension, you must also create a QExtensionFactory, i.e a class that is able to make an instance of your extension, and register it using <db:emphasis>Qt Designer</db:emphasis>'s <db:link xlink:href="qextensionmanager-proxy.xml">extension manager</db:link>.</db:para>
<db:para>When a widget's member sheet extension is required, <db:emphasis>Qt Designer</db:emphasis>'s <db:link xlink:href="qextensionmanager-proxy.xml">extension manager</db:link> will run through all its registered factories calling QExtensionFactory::createExtension() for each until the first one that is able to create a member sheet extension for that widget, is found. This factory will then make an instance of the extension. If no such factory is found, <db:emphasis>Qt Designer</db:emphasis> will use the default member sheet.</db:para>
<db:para>There are four available types of extensions in <db:emphasis>Qt Designer</db:emphasis>: <db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link>, <db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link>, <db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link> and <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link>. <db:emphasis>Qt Designer</db:emphasis>'s behavior is the same whether the requested extension is associated with a multi page container, a member sheet, a property sheet or a task menu.</db:para>
<db:para>The QExtensionFactory class provides a standard extension factory, and can also be used as an interface for custom extension factories. You can either create a new QExtensionFactory and reimplement the QExtensionFactory::createExtension() function. For example:</db:para>
<db:programlisting language="cpp">QObject *ANewExtensionFactory::createExtension(QObject *object,
        const QString &amp;amp;iid, QObject *parent) const
{
    if (iid != Q_TYPEID(QDesignerMemberSheetExtension))
        return 0;

    if (MyCustomWidget *widget = qobject_cast&amp;lt;MyCustomWidget*&amp;gt;
           (object))
        return new MyMemberSheetExtension(widget, parent);

    return 0;
}
</db:programlisting>
<db:para>Or you can use an existing factory, expanding the QExtensionFactory::createExtension() function to make the factory able to create a member sheet extension as well. For example:</db:para>
<db:programlisting language="cpp">QObject *AGeneralExtensionFactory::createExtension(QObject *object,
        const QString &amp;amp;iid, QObject *parent) const
{
    MyCustomWidget *widget = qobject_cast&amp;lt;MyCustomWidget*&amp;gt;(object);

    if (widget &amp;amp;&amp;amp; (iid == Q_TYPEID(QDesignerTaskMenuExtension))) {
        return new MyTaskMenuExtension(widget, parent);

    } else if (widget &amp;amp;&amp;amp; (iid == Q_TYPEID(QDesignerMemberSheetExtension))) {
        return new MyMemberSheetExtension(widget, parent);

    } else {
        return 0;
    }
}
</db:programlisting>
<db:para>For a complete example using an extension class, see <db:link xlink:href="qtdesigner-taskmenuextension-example.xml">Task Menu Extension example</db:link>. The example shows how to create a custom widget plugin for Qt Designer, and how to to use the <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> class to add custom items to <db:emphasis>Qt Designer</db:emphasis>'s task menu.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QExtensionFactory</db:member>
<db:member><db:link xlink:href="qextensionmanager-proxy.xml">QExtensionManager</db:link></db:member>
<db:member><db:link xlink:href="designer-creating-custom-widgets-extensions.xml">Creating Custom Widget Extensions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QDesignerMemberSheetExtension">
<db:title>[virtual] QDesignerMemberSheetExtension::~QDesignerMemberSheetExtension()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QDesignerMemberSheetExtension</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDesignerMemberSheetExtension()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the member sheet extension.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>[pure virtual] int QDesignerMemberSheetExtension::count() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the extension's number of member functions.</db:para>
</db:section>
<db:section xml:id="declaredInClass">
<db:title>[pure virtual] QString QDesignerMemberSheetExtension::declaredInClass(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>declaredInClass</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString declaredInClass(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the class in which the member function with the given <db:code role="parameter">index</db:code> is declared.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf">
<db:title>[pure virtual] int QDesignerMemberSheetExtension::indexOf(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOf</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOf(const QString &amp;name) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of the member function specified by the given <db:code role="parameter">name</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#memberName">memberName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inheritedFromWidget">
<db:title>[pure virtual] bool QDesignerMemberSheetExtension::inheritedFromWidget(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>inheritedFromWidget</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool inheritedFromWidget(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the member function with the given <db:code role="parameter">index</db:code> is inherited from QWidget, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSignal">
<db:title>[pure virtual] bool QDesignerMemberSheetExtension::isSignal(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSignal</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSignal(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the member function with the given <db:code role="parameter">index</db:code> is a signal, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSlot">
<db:title>[pure virtual] bool QDesignerMemberSheetExtension::isSlot(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSlot</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSlot(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the member function with the given <db:code role="parameter">index</db:code> is a slot, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isVisible">
<db:title>[pure virtual] bool QDesignerMemberSheetExtension::isVisible(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isVisible</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isVisible(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the member function with the given <db:code role="parameter">index</db:code> is visible in <db:emphasis>Qt Designer</db:emphasis>'s signal and slot editor, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#setVisible">setVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="memberGroup">
<db:title>[pure virtual] QString QDesignerMemberSheetExtension::memberGroup(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>memberGroup</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString memberGroup(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the member group specified for the function with the given <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#setMemberGroup">setMemberGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="memberName">
<db:title>[pure virtual] QString QDesignerMemberSheetExtension::memberName(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>memberName</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString memberName(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the member function with the given <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parameterNames">
<db:title>int QDesignerMemberSheetExtension::parameterNames(<db:emphasis>int</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>parameterNames</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int parameterNames(int) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the parameter names of the member function with the given <db:code role="parameter">index</db:code>, as a QByteArray list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#parameterTypes">parameterTypes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parameterTypes">
<db:title>int QDesignerMemberSheetExtension::parameterTypes(<db:emphasis>int</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>parameterTypes</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int parameterTypes(int) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the parameter types of the member function with the given <db:code role="parameter">index</db:code>, as a QByteArray list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#parameterNames">parameterNames</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMemberGroup">
<db:title>[pure virtual] void QDesignerMemberSheetExtension::setMemberGroup(int <db:emphasis>index</db:emphasis>, const QString &amp;<db:emphasis>group</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setMemberGroup</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>group</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMemberGroup(int index, const QString &amp;group) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the member group of the member function with the given <db:code role="parameter">index</db:code>, to <db:code role="parameter">group</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#memberGroup">memberGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>[pure virtual] void QDesignerMemberSheetExtension::setVisible(int <db:emphasis>index</db:emphasis>, bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setVisible</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>visible</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVisible(int index, bool visible) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">visible</db:code> is true, the member function with the given <db:code role="parameter">index</db:code> is visible in <db:emphasis>Qt Designer</db:emphasis>'s signals and slots editing mode; otherwise the member function is hidden.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#isVisible">isVisible</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signature">
<db:title>[pure virtual] QString QDesignerMemberSheetExtension::signature(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>signature</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString signature(int index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the signature of the member function with the given <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignermembersheetextension.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
