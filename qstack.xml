<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStack Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QStack</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstack.xml">QStack</db:link> class is a template class that provides a stack.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStack</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlist.xml" xlink:role="class">QList</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStack is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstack.xml">QStack</db:link>&lt;T&gt; is one of Qt's generic <db:link xlink:href="containers.xml">container classes</db:link>. It implements a stack data structure for items of a same type.</db:para>
<db:para>A stack is a last in, first out (LIFO) structure. Items are added to the top of the stack using <db:link xlink:href="qstack.xml#push">push</db:link>() and retrieved from the top using <db:link xlink:href="qstack.xml#pop">pop</db:link>(). The <db:link xlink:href="qstack.xml#top">top</db:link>() function provides access to the topmost item without removing it.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QStack&lt;int&gt; stack;
    stack.push(1);
    stack.push(2);
    stack.push(3);
    while (!stack.isEmpty())
        cout &lt;&lt; stack.pop() &lt;&lt; Qt::endl;
</db:programlisting>
<db:para>The example will output 3, 2, 1 in that order.</db:para>
<db:para><db:link xlink:href="qstack.xml">QStack</db:link> inherits from <db:link xlink:href="qlist.xml">QList</db:link>. All of <db:link xlink:href="qlist.xml">QList</db:link>'s functionality also applies to <db:link xlink:href="qstack.xml">QStack</db:link>. For example, you can use <db:link xlink:href="qlist.xml#isEmpty">isEmpty</db:link>() to test whether the stack is empty, and you can traverse a <db:link xlink:href="qstack.xml">QStack</db:link> using <db:link xlink:href="qlist.xml">QList</db:link>'s iterator classes (for example, <db:link xlink:href="qlistiterator.xml">QListIterator</db:link>). But in addition, <db:link xlink:href="qstack.xml">QStack</db:link> provides three convenience functions that make it easy to implement LIFO semantics: <db:link xlink:href="qstack.xml#push">push</db:link>(), <db:link xlink:href="qstack.xml#pop">pop</db:link>(), and <db:link xlink:href="qstack.xml#top">top</db:link>().</db:para>
<db:para><db:link xlink:href="qstack.xml">QStack</db:link>'s value type must be an <db:link xlink:href="containers.xml#assignable-data-type">assignable data type</db:link>. This covers most data types that are commonly used, but the compiler won't let you, for example, store a QWidget as a value; instead, store a QWidget *.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist.xml">QList</db:link></db:member>
<db:member><db:link xlink:href="qqueue.xml">QQueue</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="pop">
<db:title>T QStack::pop()</db:title>
<db:para>Removes the top item from the stack and returns it. This function assumes that the stack isn't empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstack.xml#top">top</db:link>()</db:member>
<db:member><db:link xlink:href="qstack.xml#push">push</db:link>()</db:member>
<db:member><db:link xlink:href="qlist.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="push">
<db:title>void QStack::push(const T &amp;<db:emphasis>t</db:emphasis>)</db:title>
<db:para>Adds element <db:code role="parameter">t</db:code> to the top of the stack.</db:para>
<db:para>This is the same as <db:link xlink:href="qlist.xml#append">QList::append</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstack.xml#pop">pop</db:link>()</db:member>
<db:member><db:link xlink:href="qstack.xml#top">top</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QStack::swap(QStack&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this stack with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="top">
<db:title>T &amp;QStack::top()</db:title>
<db:para>Returns a reference to the stack's top item. This function assumes that the stack isn't empty.</db:para>
<db:para>This is the same as <db:link xlink:href="qlist.xml#last">QList::last</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstack.xml#pop">pop</db:link>()</db:member>
<db:member><db:link xlink:href="qstack.xml#push">push</db:link>()</db:member>
<db:member><db:link xlink:href="qlist.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="top-1">
<db:title>const T &amp;QStack::top() const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstack.xml#pop">pop</db:link>()</db:member>
<db:member><db:link xlink:href="qstack.xml#push">push</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
