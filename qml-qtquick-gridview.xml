<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>GridView QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>For specifying a grid view of items provided by a model.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.12</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Flickable</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>GridView is part of <db:simplelist><db:member>qtquick-views</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> displays data from models created from built-in QML types like <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> and <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link>, or custom model classes defined in C++ that inherit from <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link>.</db:para>
<db:para>A <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> has a <db:link xlink:href="qml-qtquick-gridview.xml#model-prop">model</db:link>, which defines the data to be displayed, and a <db:link xlink:href="qml-qtquick-gridview.xml#delegate-prop">delegate</db:link>, which defines how the data should be displayed. Items in a <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> are laid out horizontally or vertically. Grid views are inherently flickable as <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> inherits from <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link>.</db:para>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:para>The following example shows the definition of a simple list model defined in a file called <db:code>ContactModel.qml</db:code>:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

ListModel {

    ListElement {
        name: &quot;Jim Williams&quot;
        portrait: &quot;pics/portrait.png&quot;
    }
    ListElement {
        name: &quot;John Brown&quot;
        portrait: &quot;pics/portrait.png&quot;
    }
    ListElement {
        name: &quot;Bill Smyth&quot;
        portrait: &quot;pics/portrait.png&quot;
    }
    ListElement {
        name: &quot;Sam Wise&quot;
        portrait: &quot;pics/portrait.png&quot;
    }
}
</db:programlisting>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/gridview-simple.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:para>This model can be referenced as <db:code>ContactModel</db:code> in other QML files. See <db:link xlink:href="qtqml-modules-topic.xml">QML Modules</db:link> for more information about creating reusable components like this.</db:para>
<db:para>Another component can display this model data in a <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>, as in the following example, which creates a <db:code>ContactModel</db:code> component for its model, and a <db:link xlink:href="qml-qtquick-column.xml">Column</db:link> (containing <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> and <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> items) for its delegate.</db:para>
<db:programlisting language="qml">import QtQuick 2.0

GridView {
    width: 300; height: 200

    model: ContactModel {}
    delegate: Column {
        Image { source: portrait; anchors.horizontalCenter: parent.horizontalCenter }
        Text { text: name; anchors.horizontalCenter: parent.horizontalCenter }
    }
}
</db:programlisting>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/gridview-highlight.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:para>The view will create a new delegate for each item in the model. Note that the delegate is able to access the model's <db:code>name</db:code> and <db:code>portrait</db:code> data directly.</db:para>
<db:para>An improved grid view is shown below. The delegate is visually improved and is moved into a separate <db:code>contactDelegate</db:code> component.</db:para>
<db:programlisting language="qml">Rectangle {
    width: 300; height: 200

    Component {
        id: contactDelegate
        Item {
            width: grid.cellWidth; height: grid.cellHeight
            Column {
                anchors.fill: parent
                Image { source: portrait; anchors.horizontalCenter: parent.horizontalCenter }
                Text { text: name; anchors.horizontalCenter: parent.horizontalCenter }
            }
        }
    }

    GridView {
        id: grid
        anchors.fill: parent
        cellWidth: 80; cellHeight: 80

        model: ContactModel {}
        delegate: contactDelegate
        highlight: Rectangle { color: &quot;lightsteelblue&quot;; radius: 5 }
        focus: true
    }
}
</db:programlisting>
<db:para>The currently selected item is highlighted with a blue <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> using the <db:link xlink:href="qml-qtquick-gridview.xml#highlight-prop">highlight</db:link> property, and <db:code>focus</db:code> is set to <db:code>true</db:code> to enable keyboard navigation for the grid view. The grid view itself is a focus scope (see <db:link xlink:href="qtquick-input-focus.xml">Keyboard Focus in Qt Quick</db:link> for more details).</db:para>
<db:para>Delegates are instantiated as needed and may be destroyed at any time. State should <db:emphasis>never</db:emphasis> be stored in a delegate.</db:para>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> attaches a number of properties to the root item of the delegate, for example <db:code>GridView.isCurrentItem</db:code>. In the following example, the root delegate item can access this attached property directly as <db:code>GridView.isCurrentItem</db:code>, while the child <db:code>contactInfo</db:code> object must refer to this property as <db:code>wrapper.GridView.isCurrentItem</db:code>.</db:para>
<db:programlisting language="qml">GridView {
    width: 300; height: 200
    cellWidth: 80; cellHeight: 80

    Component {
        id: contactsDelegate
        Rectangle {
            id: wrapper
            width: 80
            height: 80
            color: GridView.isCurrentItem ? &quot;black&quot; : &quot;red&quot;
            Text {
                id: contactInfo
                text: name + &quot;: &quot; + number
                color: wrapper.GridView.isCurrentItem ? &quot;red&quot; : &quot;black&quot;
            }
        }
    }

    model: ContactModel {}
    delegate: contactsDelegate
    focus: true
}
</db:programlisting>
<db:note>
<db:para>Views do not set the <db:link xlink:href="qml-qtquick-item.xml#clip-prop">clip</db:link> property automatically. If the view is not clipped by another item or the screen, it will be necessary to set this property to true in order to clip the items that are partially or fully outside the view.</db:para>
</db:note>
</db:section>
<db:section xml:id="gridview-layouts">
<db:title>GridView Layouts</db:title>
<db:para>The layout of the items in a <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> can be controlled by these properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml#flow-prop">flow</db:link> - controls whether items flow from left to right (as a series of rows) or from top to bottom (as a series of columns). This value can be either <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.FlowLeftToRight or <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.FlowTopToBottom.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml#layoutDirection-prop">layoutDirection</db:link> - controls the horizontal layout direction: that is, whether items are laid out from the left side of the view to the right, or vice-versa. This value can be either Qt.LeftToRight or Qt.RightToLeft.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml#verticalLayoutDirection-prop">verticalLayoutDirection</db:link> - controls the vertical layout direction: that is, whether items are laid out from the top of the view down towards the bottom of the view, or vice-versa. This value can be either <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.TopToBottom or <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.BottomToTop.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>By default, a <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> flows from left to right, and items are laid out from left to right horizontally, and from top to bottom vertically.</db:para>
<db:para>These properties can be combined to produce a variety of layouts, as shown in the table below. The GridViews in the first row all have a <db:link xlink:href="qml-qtquick-gridview.xml#flow-prop">flow</db:link> value of <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.FlowLeftToRight, but use different combinations of horizontal and vertical layout directions (specified by <db:link xlink:href="qml-qtquick-gridview.xml#layoutDirection-prop">layoutDirection</db:link> and <db:link xlink:href="qml-qtquick-gridview.xml#verticalLayoutDirection-prop">verticalLayoutDirection</db:link> respectively). Similarly, the GridViews in the second row below all have a <db:link xlink:href="qml-qtquick-gridview.xml#flow-prop">flow</db:link> value of <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.FlowTopToBottom, but use different combinations of horizontal and vertical layout directions to lay out their items in different ways.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th colspan="4" rowspan="1">
<db:para><db:emphasis role="bold">GridViews</db:emphasis> with <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.FlowLeftToRight flow</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">(H)</db:emphasis> Left to right <db:emphasis role="bold">(V)</db:emphasis> Top to bottom</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/gridview-layout-lefttoright-ltr-ttb.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">(H)</db:emphasis> Right to left <db:emphasis role="bold">(V)</db:emphasis> Top to bottom</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/gridview-layout-lefttoright-rtl-ttb.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">(H)</db:emphasis> Left to right <db:emphasis role="bold">(V)</db:emphasis> Bottom to top</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/gridview-layout-lefttoright-ltr-btt.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">(H)</db:emphasis> Right to left <db:emphasis role="bold">(V)</db:emphasis> Bottom to top</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/gridview-layout-lefttoright-rtl-btt.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="">
<db:thead>
<db:tr>
<db:th colspan="4" rowspan="1">
<db:para><db:emphasis role="bold">GridViews</db:emphasis> with <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.FlowTopToBottom flow</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">(H)</db:emphasis> Left to right <db:emphasis role="bold">(V)</db:emphasis> Top to bottom</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/gridview-layout-toptobottom-ltr-ttb.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">(H)</db:emphasis> Right to left <db:emphasis role="bold">(V)</db:emphasis> Top to bottom</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/gridview-layout-toptobottom-rtl-ttb.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">(H)</db:emphasis> Left to right <db:emphasis role="bold">(V)</db:emphasis> Bottom to top</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/gridview-layout-toptobottom-ltr-btt.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">(H)</db:emphasis> Right to left <db:emphasis role="bold">(V)</db:emphasis> Bottom to top</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/gridview-layout-toptobottom-rtl-btt.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-modelviewsdata-modelview.xml#qml-data-models">QML Data Models</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-pathview.xml">PathView</db:link></db:member>
<db:member><db:link xlink:href="qtquick-views-example.xml">Qt Quick Examples - Views</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>currentIndex</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">[read-only] currentItem : Item</db:bridgehead><db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>currentItem</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The <db:code>currentIndex</db:code> property holds the index of the current item, and <db:code>currentItem</db:code> holds the current item. Setting the <db:link xlink:href="qml-qtquick-gridview.xml#currentIndex-prop">currentIndex</db:link> to -1 will clear the highlight and set <db:link xlink:href="qml-qtquick-gridview.xml#currentItem-prop">currentItem</db:link> to null.</db:para>
<db:para>If <db:link xlink:href="qml-qtquick-gridview.xml#highlightFollowsCurrentItem-prop">highlightFollowsCurrentItem</db:link> is <db:code>true</db:code>, setting either of these properties will smoothly scroll the <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> so that the current item becomes visible.</db:para>
<db:para>Note that the position of the current item may only be approximate until it becomes visible in the view.</db:para>
</db:section>
<db:section xml:id="highlightRangeMode-prop">
<db:title>highlightRangeMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>highlightRangeMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">preferredHighlightBegin : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>preferredHighlightBegin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">preferredHighlightEnd : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>preferredHighlightEnd</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties define the preferred range of the highlight (for the current item) within the view. The <db:code>preferredHighlightBegin</db:code> value must be less than the <db:code>preferredHighlightEnd</db:code> value.</db:para>
<db:para>These properties affect the position of the current item when the view is scrolled. For example, if the currently selected item should stay in the middle of the view when it is scrolled, set the <db:code>preferredHighlightBegin</db:code> and <db:code>preferredHighlightEnd</db:code> values to the top and bottom coordinates of where the middle item would be. If the <db:code>currentItem</db:code> is changed programmatically, the view will automatically scroll so that the current item is in the middle of the view. Furthermore, the behavior of the current item index will occur whether or not a highlight exists.</db:para>
<db:para>Valid values for <db:code>highlightRangeMode</db:code> are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.ApplyRange - the view attempts to maintain the highlight within the range. However, the highlight can move outside of the range at the ends of the view or due to mouse interaction.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.StrictlyEnforceRange - the highlight never moves outside of the range. The current item changes if a keyboard or mouse action would cause the highlight to move outside of the range.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.NoHighlightRange - this is the default value.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="displayMarginBeginning-prop">
<db:title>[since QtQuick 2.3] displayMarginBeginning : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>displayMarginBeginning</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">[since QtQuick 2.3] displayMarginEnd : int</db:bridgehead><db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>displayMarginEnd</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property allows delegates to be displayed outside of the view geometry.</db:para>
<db:para>If this value is non-zero, the view will create extra delegates before the start of the view, or after the end. The view will create as many delegates as it can fit into the pixel size specified.</db:para>
<db:para>For example, if in a vertical view the delegate is 20 pixels high, there are 3 columns, and <db:code>displayMarginBeginning</db:code> and <db:code>displayMarginEnd</db:code> are both set to 40, then 6 delegates above and 6 delegates below will be created and shown.</db:para>
<db:para>The default value is 0.</db:para>
<db:para>This property is meant for allowing certain UI configurations, and not as a performance optimization. If you wish to create delegates outside of the view geometry for performance reasons, you probably want to use the <db:link xlink:href="qml-qtquick-gridview.xml#cacheBuffer-prop">cacheBuffer</db:link> property instead.</db:para>
<db:para>This QML property was introduced in QtQuick 2.3.</db:para>
</db:section>
<db:section xml:id="cellHeight-prop">
<db:title>cellHeight : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>cellHeight</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">cellWidth : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>cellWidth</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties holds the width and height of each cell in the grid.</db:para>
<db:para>The default cell size is 100x100.</db:para>
</db:section>
<db:section xml:id="add-prop">
<db:title>add : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>add</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the transition to apply to items that are added to the view.</db:para>
<db:para>For example, here is a view that specifies such a transition:</db:para>
<db:programlisting language="cpp">GridView {
    ...
    add: Transition {
        NumberAnimation { properties: &quot;x,y&quot;; from: 100; duration: 1000 }
    }
}
</db:programlisting>
<db:para>Whenever an item is added to the above view, the item will be animated from the position (100,100) to its final x,y position within the view, over one second. The transition only applies to the new items that are added to the view; it does not apply to the items below that are displaced by the addition of the new items. To animate the displaced items, set the <db:link xlink:href="qml-qtquick-gridview.xml#displaced-prop">displaced</db:link> or <db:link xlink:href="qml-qtquick-gridview.xml#addDisplaced-prop">addDisplaced</db:link> properties.</db:para>
<db:para>For more details and examples on how to use view transitions, see the <db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link> documentation.</db:para>
<db:note>
<db:para>This transition is not applied to the items that are created when the view is initially populated, or when the view's <db:link xlink:href="qml-qtquick-gridview.xml#model-prop">model</db:link> changes. (In those cases, the <db:link xlink:href="qml-qtquick-gridview.xml#populate-prop">populate</db:link> transition is applied instead.) Additionally, this transition should <db:emphasis>not</db:emphasis> animate the height of the new item; doing so will cause any items beneath the new item to be laid out at the wrong position. Instead, the height can be animated within the <db:link xlink:href="qml-qtquick-gridview.xml#add-signal">onAdd</db:link> handler in the delegate.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#addDisplaced-prop">addDisplaced</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#populate-prop">populate</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addDisplaced-prop">
<db:title>addDisplaced : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>addDisplaced</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the transition to apply to items within the view that are displaced by the addition of other items to the view.</db:para>
<db:para>For example, here is a view that specifies such a transition:</db:para>
<db:programlisting language="cpp">GridView {
    ...
    addDisplaced: Transition {
        NumberAnimation { properties: &quot;x,y&quot;; duration: 1000 }
    }
}
</db:programlisting>
<db:para>Whenever an item is added to the above view, all items beneath the new item are displaced, causing them to move down (or sideways, if horizontally orientated) within the view. As this displacement occurs, the items' movement to their new x,y positions within the view will be animated by a <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> over one second, as specified. This transition is not applied to the new item that has been added to the view; to animate the added items, set the <db:link xlink:href="qml-qtquick-gridview.xml#add-signal">add</db:link> property.</db:para>
<db:para>If an item is displaced by multiple types of operations at the same time, it is not defined as to whether the addDisplaced, <db:link xlink:href="qml-qtquick-gridview.xml#moveDisplaced-prop">moveDisplaced</db:link> or <db:link xlink:href="qml-qtquick-gridview.xml#removeDisplaced-prop">removeDisplaced</db:link> transition will be applied. Additionally, if it is not necessary to specify different transitions depending on whether an item is displaced by an add, move or remove operation, consider setting the <db:link xlink:href="qml-qtquick-gridview.xml#displaced-prop">displaced</db:link> property instead.</db:para>
<db:para>For more details and examples on how to use view transitions, see the <db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link> documentation.</db:para>
<db:note>
<db:para>This transition is not applied to the items that are created when the view is initially populated, or when the view's <db:link xlink:href="qml-qtquick-gridview.xml#model-prop">model</db:link> changes. In those cases, the <db:link xlink:href="qml-qtquick-gridview.xml#populate-prop">populate</db:link> transition is applied instead.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#displaced-prop">displaced</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#add-signal">add</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#populate-prop">populate</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cacheBuffer-prop">
<db:title>cacheBuffer : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>cacheBuffer</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines whether delegates are retained outside the visible area of the view.</db:para>
<db:para>If this value is greater than zero, the view may keep as many delegates instantiated as will fit within the buffer specified. For example, if in a vertical view the delegate is 20 pixels high, there are 3 columns and <db:code>cacheBuffer</db:code> is set to 40, then up to 6 delegates above and 6 delegates below the visible area may be created/retained. The buffered delegates are created asynchronously, allowing creation to occur across multiple frames and reducing the likelihood of skipping frames. In order to improve painting performance delegates outside the visible area are not painted.</db:para>
<db:para>The default value of this property is platform dependent, but will usually be a value greater than zero. Negative values are ignored.</db:para>
<db:para>Note that cacheBuffer is not a pixel buffer - it only maintains additional instantiated delegates.</db:para>
<db:note>
<db:para>Setting this property is not a replacement for creating efficient delegates. It can improve the smoothness of scrolling behavior at the expense of additional memory usage. The fewer objects and bindings in a delegate, the faster a view can be scrolled. It is important to realize that setting a cacheBuffer will only postpone issues caused by slow-loading delegates, it is not a solution for this scenario.</db:para>
</db:note>
<db:para>The cacheBuffer operates outside of any display margins specified by <db:link xlink:href="qml-qtquick-gridview.xml#displayMarginBeginning-prop">displayMarginBeginning</db:link> or <db:link xlink:href="qml-qtquick-gridview.xml#displayMarginEnd-prop">displayMarginEnd</db:link>.</db:para>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of items in the view.</db:para>
</db:section>
<db:section xml:id="delegate-prop">
<db:title>delegate : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>delegate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The delegate provides a template defining each item instantiated by the view. The index is exposed as an accessible <db:code>index</db:code> property. Properties of the model are also available depending upon the type of <db:link xlink:href="qtquick-modelviewsdata-modelview.xml#qml-data-models">Data Model</db:link>.</db:para>
<db:para>The number of objects and bindings in the delegate has a direct effect on the flicking performance of the view. If at all possible, place functionality that is not needed for the normal display of the delegate in a <db:link xlink:href="qml-qtquick-loader.xml">Loader</db:link> which can load additional components when needed.</db:para>
<db:para>The item size of the <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> is determined by <db:link xlink:href="qml-qtquick-gridview.xml#cellHeight-prop">cellHeight</db:link> and <db:link xlink:href="qml-qtquick-gridview.xml#cellWidth-prop">cellWidth</db:link>. It will not resize the items based on the size of the root item in the delegate.</db:para>
<db:para>The default <db:link xlink:href="qquickitem.xml#z-prop">stacking order</db:link> of delegate instances is <db:code>1</db:code>.</db:para>
<db:note>
<db:para>Delegates are instantiated as needed and may be destroyed at any time. State should <db:emphasis>never</db:emphasis> be stored in a delegate.</db:para>
</db:note>
</db:section>
<db:section xml:id="displaced-prop">
<db:title>displaced : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>displaced</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the generic transition to apply to items that have been displaced by any model operation that affects the view.</db:para>
<db:para>This is a convenience for specifying a generic transition for items that are displaced by add, move or remove operations, without having to specify the individual <db:link xlink:href="qml-qtquick-gridview.xml#addDisplaced-prop">addDisplaced</db:link>, <db:link xlink:href="qml-qtquick-gridview.xml#moveDisplaced-prop">moveDisplaced</db:link> and <db:link xlink:href="qml-qtquick-gridview.xml#removeDisplaced-prop">removeDisplaced</db:link> properties. For example, here is a view that specifies a displaced transition:</db:para>
<db:programlisting language="cpp">GridView {
    ...
    displaced: Transition {
        NumberAnimation { properties: &quot;x,y&quot;; duration: 1000 }
    }
}
</db:programlisting>
<db:para>When any item is added, moved or removed within the above view, the items below it are displaced, causing them to move down (or sideways, if horizontally orientated) within the view. As this displacement occurs, the items' movement to their new x,y positions within the view will be animated by a <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> over one second, as specified.</db:para>
<db:para>If a view specifies this generic displaced transition as well as a specific <db:link xlink:href="qml-qtquick-gridview.xml#addDisplaced-prop">addDisplaced</db:link>, <db:link xlink:href="qml-qtquick-gridview.xml#moveDisplaced-prop">moveDisplaced</db:link> or <db:link xlink:href="qml-qtquick-gridview.xml#removeDisplaced-prop">removeDisplaced</db:link> transition, the more specific transition will be used instead of the generic displaced transition when the relevant operation occurs, providing that the more specific transition has not been disabled (by setting <db:link xlink:href="qml-qtquick-transition.xml#enabled-prop">enabled</db:link> to false). If it has indeed been disabled, the generic displaced transition is applied instead.</db:para>
<db:para>For more details and examples on how to use view transitions, see the <db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link> documentation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#addDisplaced-prop">addDisplaced</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#moveDisplaced-prop">moveDisplaced</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#removeDisplaced-prop">removeDisplaced</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="effectiveLayoutDirection-prop">
<db:title>[read-only] effectiveLayoutDirection : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>effectiveLayoutDirection</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the effective layout direction of the grid.</db:para>
<db:para>When using the attached property <db:link xlink:href="qml-qtquick-layoutmirroring.xml#enabled-prop">LayoutMirroring::enabled</db:link> for locale layouts, the visual layout direction of the grid will be mirrored. However, the property <db:link xlink:href="qml-qtquick-gridview.xml#layoutDirection-prop">layoutDirection</db:link> will remain unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#layoutDirection-prop">GridView::layoutDirection</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-layoutmirroring.xml">LayoutMirroring</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flow-prop">
<db:title>flow : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>flow</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the flow of the grid.</db:para>
<db:para>Possible values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.FlowLeftToRight (default) - Items are laid out from left to right, and the view scrolls vertically</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.FlowTopToBottom - Items are laid out from top to bottom, and the view scrolls horizontally</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="footer-prop">
<db:title>footer : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>footer</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the component to use as the footer.</db:para>
<db:para>An instance of the footer component is created for each view. The footer is positioned at the end of the view, after any items. The default <db:link xlink:href="qquickitem.xml#z-prop">stacking order</db:link> of the footer is <db:code>1</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#header-prop">header</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#footerItem-prop">footerItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="footerItem-prop">
<db:title>[read-only] footerItem : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>footerItem</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This holds the footer item created from the <db:link xlink:href="qml-qtquick-gridview.xml#footer-prop">footer</db:link> component.</db:para>
<db:para>An instance of the footer component is created for each view. The footer is positioned at the end of the view, after any items. The default <db:link xlink:href="qquickitem.xml#z-prop">stacking order</db:link> of the footer is <db:code>1</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#footer-prop">footer</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#headerItem-prop">headerItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="header-prop">
<db:title>header : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>header</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the component to use as the header.</db:para>
<db:para>An instance of the header component is created for each view. The header is positioned at the beginning of the view, before any items. The default <db:link xlink:href="qquickitem.xml#z-prop">stacking order</db:link> of the header is <db:code>1</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#footer-prop">footer</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#headerItem-prop">headerItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="headerItem-prop">
<db:title>[read-only] headerItem : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>headerItem</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This holds the header item created from the <db:link xlink:href="qml-qtquick-gridview.xml#header-prop">header</db:link> component.</db:para>
<db:para>An instance of the header component is created for each view. The header is positioned at the beginning of the view, before any items. The default <db:link xlink:href="qquickitem.xml#z-prop">stacking order</db:link> of the header is <db:code>1</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#header-prop">header</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#footerItem-prop">footerItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="highlight-prop">
<db:title>highlight : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>highlight</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the component to use as the highlight.</db:para>
<db:para>An instance of the highlight component is created for each view. The geometry of the resulting component instance will be managed by the view so as to stay with the current item, unless the <db:link xlink:href="qml-qtquick-gridview.xml#highlightFollowsCurrentItem-prop">highlightFollowsCurrentItem</db:link> property is false. The default <db:link xlink:href="qquickitem.xml#z-prop">stacking order</db:link> of the highlight item is <db:code>0</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#highlightItem-prop">highlightItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#highlightFollowsCurrentItem-prop">highlightFollowsCurrentItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="highlightFollowsCurrentItem-prop">
<db:title>highlightFollowsCurrentItem : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>highlightFollowsCurrentItem</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property sets whether the highlight is managed by the view.</db:para>
<db:para>If this property is true (the default value), the highlight is moved smoothly to follow the current item. Otherwise, the highlight is not moved by the view, and any movement must be implemented by the highlight.</db:para>
<db:para>Here is a highlight with its motion defined by a <db:link xlink:href="qml-qtquick-springanimation.xml">SpringAnimation</db:link> item:</db:para>
<db:programlisting language="qml">Component {
    id: highlight
    Rectangle {
        width: view.cellWidth; height: view.cellHeight
        color: &quot;lightsteelblue&quot;; radius: 5
        x: view.currentItem.x
        y: view.currentItem.y
        Behavior on x { SpringAnimation { spring: 3; damping: 0.2 } }
        Behavior on y { SpringAnimation { spring: 3; damping: 0.2 } }
    }
}

GridView {
    id: view
    width: 300; height: 200
    cellWidth: 80; cellHeight: 80

    model: ContactModel {}
    delegate: Column {
        Image { source: portrait; anchors.horizontalCenter: parent.horizontalCenter }
        Text { text: name; anchors.horizontalCenter: parent.horizontalCenter }
    }

    highlight: highlight
    highlightFollowsCurrentItem: false
    focus: true
}
</db:programlisting>
</db:section>
<db:section xml:id="highlightItem-prop">
<db:title>[read-only] highlightItem : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>highlightItem</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This holds the highlight item created from the <db:link xlink:href="qml-qtquick-gridview.xml#highlight-prop">highlight</db:link> component.</db:para>
<db:para>The highlightItem is managed by the view unless <db:link xlink:href="qml-qtquick-gridview.xml#highlightFollowsCurrentItem-prop">highlightFollowsCurrentItem</db:link> is set to false. The default <db:link xlink:href="qquickitem.xml#z-prop">stacking order</db:link> of the highlight item is <db:code>0</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#highlight-prop">highlight</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#highlightFollowsCurrentItem-prop">highlightFollowsCurrentItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="highlightMoveDuration-prop">
<db:title>highlightMoveDuration : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>highlightMoveDuration</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the move animation duration of the highlight delegate.</db:para>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml#highlightFollowsCurrentItem-prop">highlightFollowsCurrentItem</db:link> must be true for this property to have effect.</db:para>
<db:para>The default value for the duration is 150ms.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#highlightFollowsCurrentItem-prop">highlightFollowsCurrentItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyNavigationEnabled-prop">
<db:title>[since 5.7] keyNavigationEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>keyNavigationEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the key navigation of the grid is enabled.</db:para>
<db:para>If this is <db:code>true</db:code>, the user can navigate the view with a keyboard. It is useful for applications that need to selectively enable or disable mouse and keyboard interaction.</db:para>
<db:para>By default, the value of this property is bound to <db:link xlink:href="qml-qtquick-flickable.xml#interactive-prop">interactive</db:link> to ensure behavior compatibility for existing applications. When explicitly set, it will cease to be bound to the interactive property.</db:para>
<db:para>This property was introduced in Qt 5.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-flickable.xml#interactive-prop">interactive</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyNavigationWraps-prop">
<db:title>keyNavigationWraps : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>keyNavigationWraps</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the grid wraps key navigation</db:para>
<db:para>If this is true, key navigation that would move the current item selection past one end of the view instead wraps around and moves the selection to the other end of the view.</db:para>
<db:para>By default, key navigation is not wrapped.</db:para>
</db:section>
<db:section xml:id="layoutDirection-prop">
<db:title>layoutDirection : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>layoutDirection</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the layout direction of the grid.</db:para>
<db:para>Possible values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.LeftToRight (default) - Items will be laid out starting in the top, left corner. The flow is dependent on the <db:link xlink:href="qml-qtquick-gridview.xml#flow-prop">GridView::flow</db:link> property.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.RightToLeft - Items will be laid out starting in the top, right corner. The flow is dependent on the <db:link xlink:href="qml-qtquick-gridview.xml#flow-prop">GridView::flow</db:link> property.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:emphasis role="bold">Note</db:emphasis>: If <db:link xlink:href="qml-qtquick-gridview.xml#flow-prop">GridView::flow</db:link> is set to <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.FlowLeftToRight, this is not to be confused if GridView::layoutDirection is set to Qt.RightToLeft. The <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.FlowLeftToRight flow value simply indicates that the flow is horizontal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#effectiveLayoutDirection-prop">GridView::effectiveLayoutDirection</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#verticalLayoutDirection-prop">GridView::verticalLayoutDirection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="model-prop">
<db:title>model : model</db:title>
<db:fieldsynopsis>
<db:type>model</db:type>
<db:varname>model</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the model providing data for the grid.</db:para>
<db:para>The model provides the set of data that is used to create the items in the view. Models can be created directly in QML using <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link>, <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link>, <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link>, or <db:link xlink:href="qtquick-views-example.xml#objectmodel">ObjectModel</db:link>, or provided by C++ model classes. If a C++ model class is used, it must be a subclass of <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> or a simple list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-modelviewsdata-modelview.xml#qml-data-models">Data Models</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="move-prop">
<db:title>move : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>move</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the transition to apply to items in the view that are being moved due to a move operation in the view's <db:link xlink:href="qml-qtquick-gridview.xml#model-prop">model</db:link>.</db:para>
<db:para>For example, here is a view that specifies such a transition:</db:para>
<db:programlisting language="cpp">GridView {
    ...
    move: Transition {
        NumberAnimation { properties: &quot;x,y&quot;; duration: 1000 }
    }
}
</db:programlisting>
<db:para>Whenever the <db:link xlink:href="qml-qtquick-gridview.xml#model-prop">model</db:link> performs a move operation to move a particular set of indexes, the respective items in the view will be animated to their new positions in the view over one second. The transition only applies to the items that are the subject of the move operation in the model; it does not apply to items below them that are displaced by the move operation. To animate the displaced items, set the <db:link xlink:href="qml-qtquick-gridview.xml#displaced-prop">displaced</db:link> or <db:link xlink:href="qml-qtquick-gridview.xml#moveDisplaced-prop">moveDisplaced</db:link> properties.</db:para>
<db:para>For more details and examples on how to use view transitions, see the <db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link> documentation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#moveDisplaced-prop">moveDisplaced</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveDisplaced-prop">
<db:title>moveDisplaced : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>moveDisplaced</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the transition to apply to items that are displaced by a move operation in the view's <db:link xlink:href="qml-qtquick-gridview.xml#model-prop">model</db:link>.</db:para>
<db:para>For example, here is a view that specifies such a transition:</db:para>
<db:programlisting language="cpp">GridView {
    ...
    moveDisplaced: Transition {
        NumberAnimation { properties: &quot;x,y&quot;; duration: 1000 }
    }
}
</db:programlisting>
<db:para>Whenever the <db:link xlink:href="qml-qtquick-gridview.xml#model-prop">model</db:link> performs a move operation to move a particular set of indexes, the items between the source and destination indexes of the move operation are displaced, causing them to move upwards or downwards (or sideways, if horizontally orientated) within the view. As this displacement occurs, the items' movement to their new x,y positions within the view will be animated by a <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> over one second, as specified. This transition is not applied to the items that are the actual subjects of the move operation; to animate the moved items, set the <db:link xlink:href="qml-qtquick-gridview.xml#move-prop">move</db:link> property.</db:para>
<db:para>If an item is displaced by multiple types of operations at the same time, it is not defined as to whether the <db:link xlink:href="qml-qtquick-gridview.xml#addDisplaced-prop">addDisplaced</db:link>, moveDisplaced or <db:link xlink:href="qml-qtquick-gridview.xml#removeDisplaced-prop">removeDisplaced</db:link> transition will be applied. Additionally, if it is not necessary to specify different transitions depending on whether an item is displaced by an add, move or remove operation, consider setting the <db:link xlink:href="qml-qtquick-gridview.xml#displaced-prop">displaced</db:link> property instead.</db:para>
<db:para>For more details and examples on how to use view transitions, see the <db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link> documentation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#displaced-prop">displaced</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#move-prop">move</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="populate-prop">
<db:title>populate : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>populate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the transition to apply to the items that are initially created for a view.</db:para>
<db:para>It is applied to all items that are created when:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The view is first created</db:para>
</db:listitem>
<db:listitem>
<db:para>The view's <db:link xlink:href="qml-qtquick-gridview.xml#model-prop">model</db:link> changes in such a way that the visible delegates are completely replaced</db:para>
</db:listitem>
<db:listitem>
<db:para>The view's <db:link xlink:href="qml-qtquick-gridview.xml#model-prop">model</db:link> is reset, if the model is a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> subclass</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, here is a view that specifies such a transition:</db:para>
<db:programlisting language="cpp">GridView {
    ...
    populate: Transition {
        NumberAnimation { properties: &quot;x,y&quot;; duration: 1000 }
    }
}
</db:programlisting>
<db:para>When the view is initialized, the view will create all the necessary items for the view, then animate them to their correct positions within the view over one second.</db:para>
<db:para>However when scrolling the view later, the populate transition does not run, even though delegates are being instantiated as they become visible. When the model changes in a way that new delegates become visible, the <db:link xlink:href="qml-qtquick-gridview.xml#add-signal">add</db:link> transition is the one that runs. So you should not depend on the <db:code>populate</db:code> transition to initialize properties in the delegate, because it does not apply to every delegate. If your animation sets the <db:code>to</db:code> value of a property, the property should initially have the <db:code>to</db:code> value, and the animation should set the <db:code>from</db:code> value in case it is animated:</db:para>
<db:programlisting language="cpp">GridView {
    ...
    delegate: Rectangle {
        opacity: 1 // not necessary because it's the default; but don't set 0
        ...
    }
    populate: Transition {
        NumberAnimation { property: &quot;opacity&quot;; from: 0; to: 1; duration: 1000 }
    }
}
</db:programlisting>
<db:para>For more details and examples on how to use view transitions, see the <db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link> documentation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#add-signal">add</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove-prop">
<db:title>remove : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>remove</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the transition to apply to items that are removed from the view.</db:para>
<db:para>For example, here is a view that specifies such a transition:</db:para>
<db:programlisting language="cpp">GridView {
    ...
    remove: Transition {
        ParallelAnimation {
            NumberAnimation { property: &quot;opacity&quot;; to: 0; duration: 1000 }
            NumberAnimation { properties: &quot;x,y&quot;; to: 100; duration: 1000 }
        }
    }
}
</db:programlisting>
<db:para>Whenever an item is removed from the above view, the item will be animated to the position (100,100) over one second, and in parallel will also change its opacity to 0. The transition only applies to the items that are removed from the view; it does not apply to the items below them that are displaced by the removal of the items. To animate the displaced items, set the <db:link xlink:href="qml-qtquick-gridview.xml#displaced-prop">displaced</db:link> or <db:link xlink:href="qml-qtquick-gridview.xml#removeDisplaced-prop">removeDisplaced</db:link> properties.</db:para>
<db:para>Note that by the time the transition is applied, the item has already been removed from the model; any references to the model data for the removed index will not be valid.</db:para>
<db:para>Additionally, if the <db:link xlink:href="qml-qtquick-gridview.xml#delayRemove-attached-prop">delayRemove</db:link> attached property has been set for a delegate item, the remove transition will not be applied until <db:link xlink:href="qml-qtquick-gridview.xml#delayRemove-attached-prop">delayRemove</db:link> becomes false again.</db:para>
<db:para>For more details and examples on how to use view transitions, see the <db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link> documentation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#removeDisplaced-prop">removeDisplaced</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeDisplaced-prop">
<db:title>removeDisplaced : Transition</db:title>
<db:fieldsynopsis>
<db:type>Transition</db:type>
<db:varname>removeDisplaced</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the transition to apply to items in the view that are displaced by the removal of other items in the view.</db:para>
<db:para>For example, here is a view that specifies such a transition:</db:para>
<db:programlisting language="cpp">GridView {
    ...
    removeDisplaced: Transition {
        NumberAnimation { properties: &quot;x,y&quot;; duration: 1000 }
    }
}
</db:programlisting>
<db:para>Whenever an item is removed from the above view, all items beneath it are displaced, causing them to move upwards (or sideways, if horizontally orientated) within the view. As this displacement occurs, the items' movement to their new x,y positions within the view will be animated by a <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> over one second, as specified. This transition is not applied to the item that has actually been removed from the view; to animate the removed items, set the <db:link xlink:href="qml-qtquick-gridview.xml#remove-signal">remove</db:link> property.</db:para>
<db:para>If an item is displaced by multiple types of operations at the same time, it is not defined as to whether the <db:link xlink:href="qml-qtquick-gridview.xml#addDisplaced-prop">addDisplaced</db:link>, <db:link xlink:href="qml-qtquick-gridview.xml#moveDisplaced-prop">moveDisplaced</db:link> or removeDisplaced transition will be applied. Additionally, if it is not necessary to specify different transitions depending on whether an item is displaced by an add, move or remove operation, consider setting the <db:link xlink:href="qml-qtquick-gridview.xml#displaced-prop">displaced</db:link> property instead.</db:para>
<db:para>For more details and examples on how to use view transitions, see the <db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link> documentation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#displaced-prop">displaced</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#remove-signal">remove</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-viewtransition.xml">ViewTransition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="snapMode-prop">
<db:title>snapMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>snapMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines how the view scrolling will settle following a drag or flick. The possible values are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.NoSnap (default) - the view stops anywhere within the visible area.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.SnapToRow - the view settles with a row (or column for <db:code>GridView.FlowTopToBottom</db:code> flow) aligned with the start of the view.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.SnapOneRow - the view will settle no more than one row (or column for <db:code>GridView.FlowTopToBottom</db:code> flow) away from the first visible row at the time the mouse button is released. This mode is particularly useful for moving one page at a time.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="verticalLayoutDirection-prop">
<db:title>verticalLayoutDirection : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>verticalLayoutDirection</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the vertical layout direction of the grid.</db:para>
<db:para>Possible values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.TopToBottom (default) - Items are laid out from the top of the view down to the bottom of the view.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.BottomToTop - Items are laid out from the bottom of the view up to the top of the view.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-gridview.xml#layoutDirection-prop">GridView::layoutDirection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="attached-property-documentation">
<db:title>Attached Property Documentation</db:title>
<db:section xml:id="delayRemove-attached-prop">
<db:title>GridView.delayRemove : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>GridView.delayRemove</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This attached property holds whether the delegate may be destroyed. It is attached to each instance of the delegate. The default value is false.</db:para>
<db:para>It is sometimes necessary to delay the destruction of an item until an animation completes. The example delegate below ensures that the animation completes before the item is removed from the list.</db:para>
<db:programlisting language="qml">Component {
    id: delegate
    Item {
        GridView.onRemove: SequentialAnimation {
            PropertyAction { target: wrapper; property: &quot;GridView.delayRemove&quot;; value: true }
            NumberAnimation { target: wrapper; property: &quot;scale&quot;; to: 0; duration: 250; easing.type: Easing.InOutQuad }
            PropertyAction { target: wrapper; property: &quot;GridView.delayRemove&quot;; value: false }
        }
    }
}
</db:programlisting>
<db:para>If a <db:link xlink:href="qml-qtquick-gridview.xml#remove-signal">remove</db:link> transition has been specified, it will not be applied until delayRemove is returned to <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isCurrentItem-attached-prop">
<db:title>GridView.isCurrentItem : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>GridView.isCurrentItem</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This attached property is true if this delegate is the current item; otherwise false.</db:para>
<db:para>It is attached to each instance of the delegate.</db:para>
</db:section>
<db:section xml:id="view-attached-prop">
<db:title>GridView.view : GridView</db:title>
<db:fieldsynopsis>
<db:type>GridView</db:type>
<db:varname>GridView.view</db:varname>
<db:modifier>attached</db:modifier>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This attached property holds the view that manages this delegate instance.</db:para>
<db:para>It is attached to each instance of the delegate and also to the header, the footer and the highlight delegates.</db:para>
<db:programlisting language="qml">GridView {
    width: 300; height: 200
    cellWidth: 80; cellHeight: 80

    Component {
        id: contactsDelegate
        Rectangle {
            id: wrapper
            width: 80
            height: 80
            color: GridView.isCurrentItem ? &quot;black&quot; : &quot;red&quot;
            Text {
                id: contactInfo
                text: name + &quot;: &quot; + number
                color: wrapper.GridView.isCurrentItem ? &quot;red&quot; : &quot;black&quot;
            }
        }
    }

    model: ContactModel {}
    delegate: contactsDelegate
    focus: true
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="attached-signal-documentation">
<db:title>Attached Signal Documentation</db:title>
<db:section xml:id="add-signal">
<db:title>add()</db:title>
<db:para>This attached signal is emitted immediately after an item is added to the view.</db:para>
<db:para>The corresponding handler is <db:code>onAdd</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onAdd</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="remove-signal">
<db:title>remove()</db:title>
<db:para>This attached signal is emitted immediately before an item is removed from the view.</db:para>
<db:para>If a remove transition has been specified, it is applied after this signal is handled, providing that <db:link xlink:href="qml-qtquick-gridview.xml#delayRemove-attached-prop">delayRemove</db:link> is false.</db:para>
<db:para>The corresponding handler is <db:code>onRemove</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onRemove</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="positionViewAtBeginning-method">
<db:title>positionViewAtBeginning()</db:title>
<db:methodsynopsis>
<db:type></db:type>
<db:methodname>positionViewAtBeginning</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="signature">positionViewAtBeginning()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:bridgehead renderas="sect2">positionViewAtEnd()</db:bridgehead><db:methodsynopsis>
<db:type></db:type>
<db:methodname>positionViewAtEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="signature">positionViewAtEnd()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Positions the view at the beginning or end, taking into account any header or footer.</db:para>
<db:para>It is not recommended to use <db:link xlink:href="qml-qtquick-flickable.xml#contentX-prop">contentX</db:link> or <db:link xlink:href="qml-qtquick-flickable.xml#contentY-prop">contentY</db:link> to position the view at a particular index. This is unreliable since removing items from the start of the list does not cause all other items to be repositioned, and because the actual start of the view can vary based on the size of the delegates.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: methods should only be called after the Component has completed. To position the view at startup, this method should be called by Component.onCompleted. For example, to position the view at the end on startup:</db:para>
<db:programlisting language="cpp">Component.onCompleted: positionViewAtEnd()
</db:programlisting>
</db:section>
<db:section xml:id="forceLayout-method">
<db:title>[since 5.1] forceLayout()</db:title>
<db:para>Responding to changes in the model is usually batched to happen only once per frame. This means that inside script blocks it is possible for the underlying model to have changed, but the <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> has not caught up yet.</db:para>
<db:para>This method forces the <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> to immediately respond to any outstanding changes in the model.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: methods should only be called after the Component has completed.</db:para>
<db:para>This method was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="indexAt-method">
<db:title>int indexAt(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns the index of the visible item containing the point <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> in content coordinates. If there is no item at the point specified, or the item is not visible -1 is returned.</db:para>
<db:para>If the item is outside the visible area, -1 is returned, regardless of whether an item will exist at that point when scrolled into view.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: methods should only be called after the Component has completed.</db:para>
</db:section>
<db:section xml:id="itemAt-method">
<db:title>Item itemAt(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns the visible item containing the point <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> in content coordinates. If there is no item at the point specified, or the item is not visible null is returned.</db:para>
<db:para>If the item is outside the visible area, null is returned, regardless of whether an item will exist at that point when scrolled into view.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: methods should only be called after the Component has completed.</db:para>
</db:section>
<db:section xml:id="moveCurrentIndexDown-method">
<db:title>moveCurrentIndexDown()</db:title>
<db:para>Move the <db:link xlink:href="qml-qtquick-gridview.xml#currentIndex-prop">currentIndex</db:link> down one item in the view. The current index will wrap if <db:link xlink:href="qml-qtquick-gridview.xml#keyNavigationWraps-prop">keyNavigationWraps</db:link> is true and it is currently at the end. This method has no effect if the <db:link xlink:href="qml-qtquick-gridview.xml#count-prop">count</db:link> is zero.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: methods should only be called after the Component has completed.</db:para>
</db:section>
<db:section xml:id="moveCurrentIndexLeft-method">
<db:title>moveCurrentIndexLeft()</db:title>
<db:para>Move the <db:link xlink:href="qml-qtquick-gridview.xml#currentIndex-prop">currentIndex</db:link> left one item in the view. The current index will wrap if <db:link xlink:href="qml-qtquick-gridview.xml#keyNavigationWraps-prop">keyNavigationWraps</db:link> is true and it is currently at the end. This method has no effect if the <db:link xlink:href="qml-qtquick-gridview.xml#count-prop">count</db:link> is zero.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: methods should only be called after the Component has completed.</db:para>
</db:section>
<db:section xml:id="moveCurrentIndexRight-method">
<db:title>moveCurrentIndexRight()</db:title>
<db:para>Move the <db:link xlink:href="qml-qtquick-gridview.xml#currentIndex-prop">currentIndex</db:link> right one item in the view. The current index will wrap if <db:link xlink:href="qml-qtquick-gridview.xml#keyNavigationWraps-prop">keyNavigationWraps</db:link> is true and it is currently at the end. This method has no effect if the <db:link xlink:href="qml-qtquick-gridview.xml#count-prop">count</db:link> is zero.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: methods should only be called after the Component has completed.</db:para>
</db:section>
<db:section xml:id="moveCurrentIndexUp-method">
<db:title>moveCurrentIndexUp()</db:title>
<db:para>Move the <db:link xlink:href="qml-qtquick-gridview.xml#currentIndex-prop">currentIndex</db:link> up one item in the view. The current index will wrap if <db:link xlink:href="qml-qtquick-gridview.xml#keyNavigationWraps-prop">keyNavigationWraps</db:link> is true and it is currently at the end. This method has no effect if the <db:link xlink:href="qml-qtquick-gridview.xml#count-prop">count</db:link> is zero.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: methods should only be called after the Component has completed.</db:para>
</db:section>
<db:section xml:id="positionViewAtIndex-method">
<db:title>positionViewAtIndex(int <db:emphasis>index</db:emphasis>, PositionMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Positions the view such that the <db:code role="parameter">index</db:code> is at the position specified by <db:code role="parameter">mode</db:code>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.Beginning - position item at the top (or left for <db:code>GridView.FlowTopToBottom</db:code> flow) of the view.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.Center - position item in the center of the view.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.End - position item at bottom (or right for horizontal orientation) of the view.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.Visible - if any part of the item is visible then take no action, otherwise bring the item into view.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.Contain - ensure the entire item is visible. If the item is larger than the view the item is positioned at the top (or left for <db:code>GridView.FlowTopToBottom</db:code> flow) of the view.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>.SnapPosition - position the item at <db:link xlink:href="qml-qtquick-gridview.xml#preferredHighlightBegin-prop">preferredHighlightBegin</db:link>. This mode is only valid if <db:link xlink:href="qml-qtquick-gridview.xml#highlightRangeMode-prop">highlightRangeMode</db:link> is StrictlyEnforceRange or snapping is enabled via <db:link xlink:href="qml-qtquick-gridview.xml#snapMode-prop">snapMode</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If positioning the view at the index would cause empty space to be displayed at the beginning or end of the view, the view will be positioned at the boundary.</db:para>
<db:para>It is not recommended to use <db:link xlink:href="qml-qtquick-flickable.xml#contentX-prop">contentX</db:link> or <db:link xlink:href="qml-qtquick-flickable.xml#contentY-prop">contentY</db:link> to position the view at a particular index. This is unreliable since removing items from the start of the view does not cause all other items to be repositioned. The correct way to bring an item into view is with <db:code>positionViewAtIndex</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: methods should only be called after the Component has completed. To position the view at startup, this method should be called by Component.onCompleted. For example, to position the view at the end:</db:para>
<db:programlisting language="cpp">Component.onCompleted: positionViewAtIndex(count - 1, GridView.Beginning)
</db:programlisting>
</db:section>
</db:section>
</db:article>
