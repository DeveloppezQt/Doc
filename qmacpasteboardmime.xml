<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMacPasteboardMime Class</db:title>
<db:productname>QtMacExtras</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Mac Extras Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmacpasteboardmime.xml">QMacPasteboardMime</db:link> class converts between a MIME type and a <db:link xlink:href="http://developer.apple.com/macosx/uniformtypeidentifiers.html">Uniform Type Identifier (UTI)</db:link> format.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMacPasteboardMime</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += macextras</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Qt's drag and drop and clipboard facilities use the MIME standard. On X11, this maps trivially to the Xdnd protocol. On Mac, although some applications use MIME to describe clipboard contents, it is more common to use Apple's UTI format.</db:para>
<db:para><db:link xlink:href="qmacpasteboardmime.xml">QMacPasteboardMime</db:link>'s role is to bridge the gap between MIME and UTI; By subclasses this class, one can extend Qt's drag and drop and clipboard handling to convert to and from unsupported, or proprietary, UTI formats.</db:para>
<db:para>A subclass of <db:link xlink:href="qmacpasteboardmime.xml">QMacPasteboardMime</db:link> will automatically be registered, and active, upon instantiation.</db:para>
<db:para>Qt has predefined support for the following UTIs:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>UTI</db:para>
</db:th>
<db:th>
<db:para>Converts to</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>public.utf8-plain-text</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>text/plain</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>public.utf16-plain-text</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>text/plain</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>public.html</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>text/html</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>public.url</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>text/uri-list</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>public.file-url</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>text/uri-list</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>public.tiff</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>application/x-qt-image</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>public.vcard</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>text/plain</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>com.apple.traditional-mac-plain-text</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>text/plain</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>com.apple.pict</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>application/x-qt-image</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>When working with MIME data, Qt will interate through all instances of <db:link xlink:href="qmacpasteboardmime.xml">QMacPasteboardMime</db:link> to find an instance that can convert to, or from, a specific MIME type. It will do this by calling <db:link xlink:href="qmacpasteboardmime.xml#canConvert">canConvert</db:link>() on each instance, starting with (and choosing) the last created instance first. The actual conversions will be done by using <db:link xlink:href="qmacpasteboardmime.xml#convertToMime">convertToMime</db:link>() and <db:link xlink:href="qmacpasteboardmime.xml#convertFromMime">convertFromMime</db:link>().</db:para>
<db:note>
<db:para>The API uses the term &quot;flavor&quot; in some cases. This is for backwards compatibility reasons, and should now be understood as UTIs.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="canConvert">
<db:title>[pure virtual] bool QMacPasteboardMime::canConvert(const QString &amp;<db:emphasis>mime</db:emphasis>, QString <db:emphasis>flav</db:emphasis>)</db:title>
<db:para>Returns true if the converter can convert (both ways) between <db:code role="parameter">mime</db:code> and <db:code role="parameter">flav</db:code>; otherwise returns false.</db:para>
<db:para>All subclasses must reimplement this pure virtual function.</db:para>
</db:section>
<db:section xml:id="convertFromMime">
<db:title>[pure virtual] QList&lt;QByteArray&gt; QMacPasteboardMime::convertFromMime(const QString &amp;<db:emphasis>mime</db:emphasis>, QVariant <db:emphasis>data</db:emphasis>, QString <db:emphasis>flav</db:emphasis>)</db:title>
<db:para>Returns <db:code role="parameter">data</db:code> converted from MIME type <db:code role="parameter">mime</db:code> to Mac UTI <db:code role="parameter">flav</db:code>.</db:para>
<db:para>Note that Mac flavors must all be self-terminating. The return value may contain trailing data.</db:para>
<db:para>All subclasses must reimplement this pure virtual function.</db:para>
</db:section>
<db:section xml:id="convertToMime">
<db:title>[pure virtual] QVariant QMacPasteboardMime::convertToMime(const QString &amp;<db:emphasis>mime</db:emphasis>, QList&lt;QByteArray&gt; <db:emphasis>data</db:emphasis>, QString <db:emphasis>flav</db:emphasis>)</db:title>
<db:para>Returns <db:code role="parameter">data</db:code> converted from Mac UTI <db:code role="parameter">flav</db:code> to MIME type <db:code role="parameter">mime</db:code>.</db:para>
<db:para>Note that Mac flavors must all be self-terminating. The input <db:code role="parameter">data</db:code> may contain trailing data.</db:para>
<db:para>All subclasses must reimplement this pure virtual function.</db:para>
</db:section>
<db:section xml:id="convertorName">
<db:title>[pure virtual] QString QMacPasteboardMime::convertorName()</db:title>
<db:para>Returns a name for the converter.</db:para>
<db:para>All subclasses must reimplement this pure virtual function.</db:para>
</db:section>
<db:section xml:id="flavorFor">
<db:title>[pure virtual] QString QMacPasteboardMime::flavorFor(const QString &amp;<db:emphasis>mime</db:emphasis>)</db:title>
<db:para>Returns the Mac UTI used for MIME type <db:code role="parameter">mime</db:code>, or 0 if this converter does not support <db:code role="parameter">mime</db:code>.</db:para>
<db:para>All subclasses must reimplement this pure virtual function.</db:para>
</db:section>
<db:section xml:id="mimeFor">
<db:title>[pure virtual] QString QMacPasteboardMime::mimeFor(QString <db:emphasis>flav</db:emphasis>)</db:title>
<db:para>Returns the MIME UTI used for Mac flavor <db:code role="parameter">flav</db:code>, or 0 if this converter does not support <db:code role="parameter">flav</db:code>.</db:para>
<db:para>All subclasses must reimplement this pure virtual function.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qRegisterDraggedTypes">
<db:title>void qRegisterDraggedTypes(const QStringList &amp;<db:emphasis>types</db:emphasis>)</db:title>
<db:para>Registers the given <db:code role="parameter">types</db:code> as custom pasteboard types.</db:para>
<db:para>This function should be called to enable the Drag and Drop events for custom pasteboard types on Cocoa implementations. This is required in addition to a <db:link xlink:href="qmacpasteboardmime.xml">QMacPasteboardMime</db:link> subclass implementation. By default drag and drop is enabled for all standard pasteboard types.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmacpasteboardmime.xml">QMacPasteboardMime</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
