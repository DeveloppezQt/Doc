<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QGraphicsScene Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> class provides a surface for managing a large number of 2D graphical items.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsScene</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsScene is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class serves as a container for QGraphicsItems. It is used together with <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> for visualizing graphical items, such as lines, rectangles, text, or even custom items, on a 2D surface. <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> is part of the <db:link xlink:href="graphicsview.xml">Graphics View Framework</db:link>.</db:para>
<db:para><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> also provides functionality that lets you efficiently determine both the location of items, and for determining what items are visible within an arbitrary area on the scene. With the <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> widget, you can either visualize the whole scene, or zoom in and view only parts of the scene.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QGraphicsScene scene;
scene.addText(&quot;Hello, world!&quot;);

QGraphicsView view(&amp;scene);
view.show();
</db:programlisting>
<db:para>Note that <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> has no visual appearance of its own; it only manages the items. You need to create a <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> widget to visualize the scene.</db:para>
<db:para>To add items to a scene, you start off by constructing a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> object. Then, you have two options: either add your existing <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> objects by calling <db:link xlink:href="qgraphicsscene.xml#addItem">addItem</db:link>(), or you can call one of the convenience functions <db:link xlink:href="qgraphicsscene.xml#addEllipse">addEllipse</db:link>(), <db:link xlink:href="qgraphicsscene.xml#addLine">addLine</db:link>(), <db:link xlink:href="qgraphicsscene.xml#addPath">addPath</db:link>(), <db:link xlink:href="qgraphicsscene.xml#addPixmap">addPixmap</db:link>(), <db:link xlink:href="qgraphicsscene.xml#addPolygon">addPolygon</db:link>(), <db:link xlink:href="qgraphicsscene.xml#addRect">addRect</db:link>(), or <db:link xlink:href="qgraphicsscene.xml#addText">addText</db:link>(), which all return a pointer to the newly added item. The dimensions of the items added with these functions are relative to the item's coordinate system, and the items position is initialized to (0, 0) in the scene.</db:para>
<db:para>You can then visualize the scene using <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>. When the scene changes, (e.g., when an item moves or is transformed) <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> emits the <db:link xlink:href="qgraphicsscene.xml#changed">changed</db:link>() signal. To remove an item, call <db:link xlink:href="qgraphicsscene.xml#removeItem">removeItem</db:link>().</db:para>
<db:para><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> uses an indexing algorithm to manage the location of items efficiently. By default, a BSP (Binary Space Partitioning) tree is used; an algorithm suitable for large scenes where most items remain static (i.e., do not move around). You can choose to disable this index by calling setItemIndexMethod(). For more information about the available indexing algorithms, see the itemIndexMethod property.</db:para>
<db:para>The scene's bounding rect is set by calling setSceneRect(). Items can be placed at any position on the scene, and the size of the scene is by default unlimited. The scene rect is used only for internal bookkeeping, maintaining the scene's item index. If the scene rect is unset, <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will use the bounding area of all items, as returned by <db:link xlink:href="qgraphicsscene.xml#itemsBoundingRect">itemsBoundingRect</db:link>(), as the scene rect. However, <db:link xlink:href="qgraphicsscene.xml#itemsBoundingRect">itemsBoundingRect</db:link>() is a relatively time consuming function, as it operates by collecting positional information for every item on the scene. Because of this, you should always set the scene rect when operating on large scenes.</db:para>
<db:para>One of <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>'s greatest strengths is its ability to efficiently determine the location of items. Even with millions of items on the scene, the <db:link xlink:href="qgraphicsscene.xml#items">items</db:link>() functions can determine the location of an item within a few milliseconds. There are several overloads to <db:link xlink:href="qgraphicsscene.xml#items">items</db:link>(): one that finds items at a certain position, one that finds items inside or intersecting with a polygon or a rectangle, and more. The list of returned items is sorted by stacking order, with the topmost item being the first item in the list. For convenience, there is also an <db:link xlink:href="qgraphicsscene.xml#itemAt">itemAt</db:link>() function that returns the topmost item at a given position.</db:para>
<db:para><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> maintains selection information for the scene. To select items, call <db:link xlink:href="qgraphicsscene.xml#setSelectionArea">setSelectionArea</db:link>(), and to clear the current selection, call <db:link xlink:href="qgraphicsscene.xml#clearSelection">clearSelection</db:link>(). Call <db:link xlink:href="qgraphicsscene.xml#selectedItems">selectedItems</db:link>() to get the list of all selected items.</db:para>
<db:section xml:id="event-handling-and-propagation">
<db:title>Event Handling and Propagation</db:title>
<db:para>Another responsibility that <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> has, is to propagate events from <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>. To send an event to a scene, you construct an event that inherits <db:link xlink:href="qevent.xml">QEvent</db:link>, and then send it using, for example, <db:link xlink:href="qcoreapplication.xml#sendEvent">QApplication::sendEvent</db:link>(). <db:link xlink:href="qgraphicsscene.xml#event">event</db:link>() is responsible for dispatching the event to the individual items. Some common events are handled by convenience event handlers. For example, key press events are handled by <db:link xlink:href="qgraphicsscene.xml#keyPressEvent">keyPressEvent</db:link>(), and mouse press events are handled by <db:link xlink:href="qgraphicsscene.xml#mousePressEvent">mousePressEvent</db:link>().</db:para>
<db:para>Key events are delivered to the <db:emphasis>focus item</db:emphasis>. To set the focus item, you can either call <db:link xlink:href="qgraphicsscene.xml#setFocusItem">setFocusItem</db:link>(), passing an item that accepts focus, or the item itself can call <db:link xlink:href="qgraphicsitem.xml#setFocus">QGraphicsItem::setFocus</db:link>(). Call <db:link xlink:href="qgraphicsscene.xml#focusItem">focusItem</db:link>() to get the current focus item. For compatibility with widgets, the scene also maintains its own focus information. By default, the scene does not have focus, and all key events are discarded. If <db:link xlink:href="qgraphicsscene.xml#setFocus">setFocus</db:link>() is called, or if an item on the scene gains focus, the scene automatically gains focus. If the scene has focus, <db:link xlink:href="qgraphicsscene.xml#hasFocus">hasFocus</db:link>() will return true, and key events will be forwarded to the focus item, if any. If the scene loses focus, (i.e., someone calls <db:link xlink:href="qgraphicsscene.xml#clearFocus">clearFocus</db:link>()) while an item has focus, the scene will maintain its item focus information, and once the scene regains focus, it will make sure the last focus item regains focus.</db:para>
<db:para>For mouse-over effects, <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> dispatches <db:emphasis>hover events</db:emphasis>. If an item accepts hover events (see <db:link xlink:href="qgraphicsitem.xml#acceptHoverEvents">QGraphicsItem::acceptHoverEvents</db:link>()), it will receive a <db:link xlink:href="qevent.xml#Type-enum">GraphicsSceneHoverEnter</db:link> event when the mouse enters its area. As the mouse continues moving inside the item's area, <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will send it <db:link xlink:href="qevent.xml#Type-enum">GraphicsSceneHoverMove</db:link> events. When the mouse leaves the item's area, the item will receive a <db:link xlink:href="qevent.xml#Type-enum">GraphicsSceneHoverLeave</db:link> event.</db:para>
<db:para>All mouse events are delivered to the current <db:emphasis>mouse grabber</db:emphasis> item. An item becomes the scene's mouse grabber if it accepts mouse events (see <db:link xlink:href="qgraphicsitem.xml#acceptedMouseButtons">QGraphicsItem::acceptedMouseButtons</db:link>()) and it receives a mouse press. It stays the mouse grabber until it receives a mouse release when no other mouse buttons are pressed. You can call <db:link xlink:href="qgraphicsscene.xml#mouseGrabberItem">mouseGrabberItem</db:link>() to determine what item is currently grabbing the mouse.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ItemIndexMethod-enum">
<db:title>enum QGraphicsScene::ItemIndexMethod</db:title>
<db:para>This enum describes the indexing algorithms <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> provides for managing positional information about items on the scene.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link></db:emphasis>::BspTreeIndex</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A Binary Space Partitioning tree is applied. All <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>'s item location algorithms are of an order close to logarithmic complexity, by making use of binary search. Adding, moving and removing items is logarithmic. This approach is best for static scenes (i.e., scenes where most items do not move).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link></db:emphasis>::NoIndex</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>No index is applied. Item location is of linear complexity, as all items on the scene are searched. Adding, moving and removing items, however, is done in constant time. This approach is ideal for dynamic scenes, where many items are added, moved or removed continuously.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setItemIndexMethod()</db:link></db:member>
<db:member>bspTreeDepth</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="SceneLayer-enum">
<db:title>[since 4.3] enum QGraphicsScene::SceneLayer</db:title>
<db:bridgehead renderas="sect2">flags QGraphicsScene::SceneLayers</db:bridgehead>
<db:para>This enum describes the rendering layers in a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>. When <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> draws the scene contents, it renders each of these layers separately, in order.</db:para>
<db:para>Each layer represents a flag that can be OR'ed together when calling functions such as <db:link xlink:href="qgraphicsscene.xml#invalidate">invalidate</db:link>() or <db:link xlink:href="qgraphicsview.xml#invalidateScene">QGraphicsView::invalidateScene</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link></db:emphasis>::ItemLayer</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>The item layer. <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> renders all items are in this layer by calling the virtual function drawItems(). The item layer is drawn after the background layer, but before the foreground layer.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link></db:emphasis>::BackgroundLayer</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>The background layer. <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> renders the scene's background in this layer by calling the virtual function <db:link xlink:href="qgraphicsscene.xml#drawBackground">drawBackground</db:link>(). The background layer is drawn first of all layers.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link></db:emphasis>::ForegroundLayer</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>The foreground layer. <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> renders the scene's foreground in this layer by calling the virtual function <db:link xlink:href="qgraphicsscene.xml#drawForeground">drawForeground</db:link>(). The foreground layer is drawn last of all layers.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link></db:emphasis>::AllLayers</db:code></db:para>
</db:td>
<db:td><db:code>0xffff</db:code></db:td>
<db:td>
<db:para>All layers; this value represents a combination of all three layers.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.3.</db:para>
<db:para>The <db:code>SceneLayers</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;SceneLayer&gt;. </db:code>It stores an OR combination of <db:code>SceneLayer</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#invalidate">invalidate</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsview.xml#invalidateScene">QGraphicsView::invalidateScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsScene">
<db:title>QGraphicsScene::QGraphicsScene(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> object. The <db:code role="parameter">parent</db:code> parameter is passed to <db:link xlink:href="qobject.xml">QObject</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="QGraphicsScene-1">
<db:title>QGraphicsScene::QGraphicsScene(const QRectF &amp;<db:emphasis>sceneRect</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> object, using <db:code role="parameter">sceneRect</db:code> for its scene rectangle. The <db:code role="parameter">parent</db:code> parameter is passed to <db:link xlink:href="qobject.xml">QObject</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>sceneRect</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGraphicsScene-2">
<db:title>QGraphicsScene::QGraphicsScene(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>width</db:emphasis>, qreal <db:emphasis>height</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> object, using the rectangle specified by (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), and the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code> for its scene rectangle. The <db:code role="parameter">parent</db:code> parameter is passed to <db:link xlink:href="qobject.xml">QObject</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>sceneRect</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QGraphicsScene">
<db:title>[virtual noexcept] QGraphicsScene::~QGraphicsScene()</db:title>
<db:para>Removes and deletes all items from the scene object before destroying the scene object. The scene object is removed from the application's global scene list, and it is removed from all associated views.</db:para>
</db:section>
<db:section xml:id="activePanel">
<db:title>[since 4.6] QGraphicsItem *QGraphicsScene::activePanel() const</db:title>
<db:para>Returns the current active panel, or 0 if no panel is currently active.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#setActivePanel">QGraphicsScene::setActivePanel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activeWindow">
<db:title>[since 4.4] QGraphicsWidget *QGraphicsScene::activeWindow() const</db:title>
<db:para>Returns the current active window, or 0 if no window is currently active.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#setActiveWindow">QGraphicsScene::setActiveWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addEllipse">
<db:title>QGraphicsEllipseItem *QGraphicsScene::addEllipse(const QRectF &amp;<db:emphasis>rect</db:emphasis>, const QPen &amp;<db:emphasis>pen</db:emphasis> = QPen(), const QBrush &amp;<db:emphasis>brush</db:emphasis> = QBrush())</db:title>
<db:para>Creates and adds an ellipse item to the scene, and returns the item pointer. The geometry of the ellipse is defined by <db:code role="parameter">rect</db:code>, and its pen and brush are initialized to <db:code role="parameter">pen</db:code> and <db:code role="parameter">brush</db:code>.</db:para>
<db:para>Note that the item's geometry is provided in item coordinates, and its position is initialized to (0, 0).</db:para>
<db:para>If the item is visible (i.e., <db:link xlink:href="qgraphicsitem.xml#isVisible">QGraphicsItem::isVisible</db:link>() returns true), <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will emit <db:link xlink:href="qgraphicsscene.xml#changed">changed</db:link>() once control goes back to the event loop.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addLine">addLine</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPath">addPath</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPixmap">addPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addRect">addRect</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addText">addText</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addWidget">addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addEllipse-1">
<db:title>[since 4.3] QGraphicsEllipseItem *QGraphicsScene::addEllipse(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>, const QPen &amp;<db:emphasis>pen</db:emphasis> = QPen(), const QBrush &amp;<db:emphasis>brush</db:emphasis> = QBrush())</db:title>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsscene.xml#addEllipse">addEllipse</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>), <db:code role="parameter">pen</db:code>, <db:code role="parameter">brush</db:code>).</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="addItem">
<db:title>void QGraphicsScene::addItem(QGraphicsItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Adds or moves the <db:code role="parameter">item</db:code> and all its childen to this scene. This scene takes ownership of the <db:code role="parameter">item</db:code>.</db:para>
<db:para>If the item is visible (i.e., <db:link xlink:href="qgraphicsitem.xml#isVisible">QGraphicsItem::isVisible</db:link>() returns true), <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will emit <db:link xlink:href="qgraphicsscene.xml#changed">changed</db:link>() once control goes back to the event loop.</db:para>
<db:para>If the item is already in a different scene, it will first be removed from its old scene, and then added to this scene as a top-level.</db:para>
<db:para><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will send ItemSceneChange notifications to <db:code role="parameter">item</db:code> while it is added to the scene. If item does not currently belong to a scene, only one notification is sent. If it does belong to scene already (i.e., it is moved to this scene), <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will send an addition notification as the item is removed from its previous scene.</db:para>
<db:para>If the item is a panel, the scene is active, and there is no active panel in the scene, then the item will be activated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#removeItem">removeItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addEllipse">addEllipse</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addLine">addLine</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPath">addPath</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPixmap">addPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addRect">addRect</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addText">addText</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addLine">
<db:title>QGraphicsLineItem *QGraphicsScene::addLine(const QLineF &amp;<db:emphasis>line</db:emphasis>, const QPen &amp;<db:emphasis>pen</db:emphasis> = QPen())</db:title>
<db:para>Creates and adds a line item to the scene, and returns the item pointer. The geometry of the line is defined by <db:code role="parameter">line</db:code>, and its pen is initialized to <db:code role="parameter">pen</db:code>.</db:para>
<db:para>Note that the item's geometry is provided in item coordinates, and its position is initialized to (0, 0).</db:para>
<db:para>If the item is visible (i.e., <db:link xlink:href="qgraphicsitem.xml#isVisible">QGraphicsItem::isVisible</db:link>() returns true), <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will emit <db:link xlink:href="qgraphicsscene.xml#changed">changed</db:link>() once control goes back to the event loop.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addEllipse">addEllipse</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPath">addPath</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPixmap">addPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addRect">addRect</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addText">addText</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addWidget">addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addLine-1">
<db:title>[since 4.3] QGraphicsLineItem *QGraphicsScene::addLine(qreal <db:emphasis>x1</db:emphasis>, qreal <db:emphasis>y1</db:emphasis>, qreal <db:emphasis>x2</db:emphasis>, qreal <db:emphasis>y2</db:emphasis>, const QPen &amp;<db:emphasis>pen</db:emphasis> = QPen())</db:title>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsscene.xml#addLine">addLine</db:link>(<db:link xlink:href="qlinef.xml">QLineF</db:link>(<db:code role="parameter">x1</db:code>, <db:code role="parameter">y1</db:code>, <db:code role="parameter">x2</db:code>, <db:code role="parameter">y2</db:code>), <db:code role="parameter">pen</db:code>).</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="addPath">
<db:title>QGraphicsPathItem *QGraphicsScene::addPath(const QPainterPath &amp;<db:emphasis>path</db:emphasis>, const QPen &amp;<db:emphasis>pen</db:emphasis> = QPen(), const QBrush &amp;<db:emphasis>brush</db:emphasis> = QBrush())</db:title>
<db:para>Creates and adds a path item to the scene, and returns the item pointer. The geometry of the path is defined by <db:code role="parameter">path</db:code>, and its pen and brush are initialized to <db:code role="parameter">pen</db:code> and <db:code role="parameter">brush</db:code>.</db:para>
<db:para>Note that the item's geometry is provided in item coordinates, and its position is initialized to (0, 0).</db:para>
<db:para>If the item is visible (i.e., <db:link xlink:href="qgraphicsitem.xml#isVisible">QGraphicsItem::isVisible</db:link>() returns true), <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will emit <db:link xlink:href="qgraphicsscene.xml#changed">changed</db:link>() once control goes back to the event loop.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addEllipse">addEllipse</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addLine">addLine</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPixmap">addPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addRect">addRect</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addText">addText</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addWidget">addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addPixmap">
<db:title>QGraphicsPixmapItem *QGraphicsScene::addPixmap(const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>)</db:title>
<db:para>Creates and adds a pixmap item to the scene, and returns the item pointer. The pixmap is defined by <db:code role="parameter">pixmap</db:code>.</db:para>
<db:para>Note that the item's geometry is provided in item coordinates, and its position is initialized to (0, 0).</db:para>
<db:para>If the item is visible (i.e., <db:link xlink:href="qgraphicsitem.xml#isVisible">QGraphicsItem::isVisible</db:link>() returns true), <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will emit <db:link xlink:href="qgraphicsscene.xml#changed">changed</db:link>() once control goes back to the event loop.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addEllipse">addEllipse</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addLine">addLine</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPath">addPath</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addRect">addRect</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addText">addText</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addWidget">addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addPolygon">
<db:title>QGraphicsPolygonItem *QGraphicsScene::addPolygon(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>, const QPen &amp;<db:emphasis>pen</db:emphasis> = QPen(), const QBrush &amp;<db:emphasis>brush</db:emphasis> = QBrush())</db:title>
<db:para>Creates and adds a polygon item to the scene, and returns the item pointer. The polygon is defined by <db:code role="parameter">polygon</db:code>, and its pen and brush are initialized to <db:code role="parameter">pen</db:code> and <db:code role="parameter">brush</db:code>.</db:para>
<db:para>Note that the item's geometry is provided in item coordinates, and its position is initialized to (0, 0).</db:para>
<db:para>If the item is visible (i.e., <db:link xlink:href="qgraphicsitem.xml#isVisible">QGraphicsItem::isVisible</db:link>() returns true), <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will emit <db:link xlink:href="qgraphicsscene.xml#changed">changed</db:link>() once control goes back to the event loop.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addEllipse">addEllipse</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addLine">addLine</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPath">addPath</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addRect">addRect</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addText">addText</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addWidget">addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addRect">
<db:title>QGraphicsRectItem *QGraphicsScene::addRect(const QRectF &amp;<db:emphasis>rect</db:emphasis>, const QPen &amp;<db:emphasis>pen</db:emphasis> = QPen(), const QBrush &amp;<db:emphasis>brush</db:emphasis> = QBrush())</db:title>
<db:para>Creates and adds a rectangle item to the scene, and returns the item pointer. The geometry of the rectangle is defined by <db:code role="parameter">rect</db:code>, and its pen and brush are initialized to <db:code role="parameter">pen</db:code> and <db:code role="parameter">brush</db:code>.</db:para>
<db:para>Note that the item's geometry is provided in item coordinates, and its position is initialized to (0, 0). For example, if a <db:link xlink:href="qrect.xml">QRect</db:link>(50, 50, 100, 100) is added, its top-left corner will be at (50, 50) relative to the origin in the items coordinate system.</db:para>
<db:para>If the item is visible (i.e., <db:link xlink:href="qgraphicsitem.xml#isVisible">QGraphicsItem::isVisible</db:link>() returns true), <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will emit <db:link xlink:href="qgraphicsscene.xml#changed">changed</db:link>() once control goes back to the event loop.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addEllipse">addEllipse</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addLine">addLine</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPixmap">addPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPixmap">addPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addText">addText</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addWidget">addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addRect-1">
<db:title>[since 4.3] QGraphicsRectItem *QGraphicsScene::addRect(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>, const QPen &amp;<db:emphasis>pen</db:emphasis> = QPen(), const QBrush &amp;<db:emphasis>brush</db:emphasis> = QBrush())</db:title>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicsscene.xml#addRect">addRect</db:link>(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>), <db:code role="parameter">pen</db:code>, <db:code role="parameter">brush</db:code>).</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="addSimpleText">
<db:title>QGraphicsSimpleTextItem *QGraphicsScene::addSimpleText(const QString &amp;<db:emphasis>text</db:emphasis>, const QFont &amp;<db:emphasis>font</db:emphasis> = QFont())</db:title>
<db:para>Creates and adds a <db:link xlink:href="qgraphicssimpletextitem.xml">QGraphicsSimpleTextItem</db:link> to the scene, and returns the item pointer. The text string is initialized to <db:code role="parameter">text</db:code>, and its font is initialized to <db:code role="parameter">font</db:code>.</db:para>
<db:para>The item's position is initialized to (0, 0).</db:para>
<db:para>If the item is visible (i.e., <db:link xlink:href="qgraphicsitem.xml#isVisible">QGraphicsItem::isVisible</db:link>() returns true), <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will emit <db:link xlink:href="qgraphicsscene.xml#changed">changed</db:link>() once control goes back to the event loop.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addEllipse">addEllipse</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addLine">addLine</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPixmap">addPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPixmap">addPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addRect">addRect</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addWidget">addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addText">
<db:title>QGraphicsTextItem *QGraphicsScene::addText(const QString &amp;<db:emphasis>text</db:emphasis>, const QFont &amp;<db:emphasis>font</db:emphasis> = QFont())</db:title>
<db:para>Creates and adds a text item to the scene, and returns the item pointer. The text string is initialized to <db:code role="parameter">text</db:code>, and its font is initialized to <db:code role="parameter">font</db:code>.</db:para>
<db:para>The item's position is initialized to (0, 0).</db:para>
<db:para>If the item is visible (i.e., <db:link xlink:href="qgraphicsitem.xml#isVisible">QGraphicsItem::isVisible</db:link>() returns true), <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will emit <db:link xlink:href="qgraphicsscene.xml#changed">changed</db:link>() once control goes back to the event loop.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addEllipse">addEllipse</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addLine">addLine</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPixmap">addPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPixmap">addPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addRect">addRect</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addWidget">addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addWidget">
<db:title>QGraphicsProxyWidget *QGraphicsScene::addWidget(QWidget *<db:emphasis>widget</db:emphasis>, Qt::WindowFlags <db:emphasis>wFlags</db:emphasis> = 0)</db:title>
<db:para>Creates a new <db:link xlink:href="qgraphicsproxywidget.xml">QGraphicsProxyWidget</db:link> for <db:code role="parameter">widget</db:code>, adds it to the scene, and returns a pointer to the proxy. <db:code role="parameter">wFlags</db:code> set the default window flags for the embedding proxy widget.</db:para>
<db:para>The item's position is initialized to (0, 0).</db:para>
<db:para>If the item is visible (i.e., <db:link xlink:href="qgraphicsitem.xml#isVisible">QGraphicsItem::isVisible</db:link>() returns true), <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will emit <db:link xlink:href="qgraphicsscene.xml#changed">changed</db:link>() once control goes back to the event loop.</db:para>
<db:para>Note that widgets with the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_PaintOnScreen</db:link> widget attribute set and widgets that wrap an external application or controller are not supported. Examples are <db:link xlink:href="qglwidget.xml">QGLWidget</db:link> and <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addEllipse">addEllipse</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addLine">addLine</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPixmap">addPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addPixmap">addPixmap</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addRect">addRect</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addText">addText</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addSimpleText">addSimpleText</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="advance">
<db:title>void QGraphicsScene::advance()</db:title>
<db:para>This slot <db:emphasis>advances</db:emphasis> the scene by one step, by calling <db:link xlink:href="qgraphicsitem.xml#advance">QGraphicsItem::advance</db:link>() for all items on the scene. This is done in two phases: in the first phase, all items are notified that the scene is about to change, and in the second phase all items are notified that they can move. In the first phase, <db:link xlink:href="qgraphicsitem.xml#advance">QGraphicsItem::advance</db:link>() is called passing a value of 0 as an argument, and 1 is passed in the second phase.</db:para>
<db:para>Note that you can also use the <db:link xlink:href="animation-overview.xml">Animation Framework</db:link> for animations.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#advance">QGraphicsItem::advance</db:link>()</db:member>
<db:member><db:link xlink:href="qtimeline.xml">QTimeLine</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changed">
<db:title>void QGraphicsScene::changed(const QList&lt;QRectF&gt; &amp;<db:emphasis>region</db:emphasis>)</db:title>
<db:para>This signal is emitted by <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> when control reaches the event loop, if the scene content changes. The <db:code role="parameter">region</db:code> parameter contains a list of scene rectangles that indicate the area that has been changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#updateScene">QGraphicsView::updateScene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>[since 4.4] void QGraphicsScene::clear()</db:title>
<db:para>Removes and deletes all items from the scene, but otherwise leaves the state of the scene unchanged.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearFocus">
<db:title>void QGraphicsScene::clearFocus()</db:title>
<db:para>Clears focus from the scene. If any item has focus when this function is called, it will lose focus, and regain focus again once the scene regains focus.</db:para>
<db:para>A scene that does not have focus ignores key events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#hasFocus">hasFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#setFocus">setFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#setFocusItem">setFocusItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearSelection">
<db:title>void QGraphicsScene::clearSelection()</db:title>
<db:para>Clears the current selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#setSelectionArea">setSelectionArea</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#selectedItems">selectedItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="collidingItems">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsScene::collidingItems(const QGraphicsItem *<db:emphasis>item</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape) const</db:title>
<db:para>Returns a list of all items that collide with <db:code role="parameter">item</db:code>. Collisions are determined by calling <db:link xlink:href="qgraphicsitem.xml#collidesWithItem">QGraphicsItem::collidesWithItem</db:link>(); the collision detection is determined by <db:code role="parameter">mode</db:code>. By default, all items whose shape intersects <db:code role="parameter">item</db:code> or is contained inside <db:code role="parameter">item</db:code>'s shape are returned.</db:para>
<db:para>The items are returned in descending stacking order (i.e., the first item in the list is the uppermost item, and the last item is the lowermost item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#items">items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#collidesWithItem">QGraphicsItem::collidesWithItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[virtual protected] void QGraphicsScene::contextMenuEvent(QGraphicsSceneContextMenuEvent *<db:emphasis>contextMenuEvent</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">contextMenuEvent</db:code>, can be reimplemented in a subclass to receive context menu events. The default implementation forwards the event to the topmost visible item that accepts context menu events at the position of the event. If no items accept context menu events at this position, the event is ignored.</db:para>
<db:para>Note: See <db:link xlink:href="qgraphicsscene.xml#items">items</db:link>() for a definition of which items are considered visible by this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#contextMenuEvent">QGraphicsItem::contextMenuEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createItemGroup">
<db:title>QGraphicsItemGroup *QGraphicsScene::createItemGroup(const QList&lt;QGraphicsItem *&gt; &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:para>Groups all items in <db:code role="parameter">items</db:code> into a new <db:link xlink:href="qgraphicsitemgroup.xml">QGraphicsItemGroup</db:link>, and returns a pointer to the group. The group is created with the common ancestor of <db:code role="parameter">items</db:code> as its parent, and with position (0, 0). The items are all reparented to the group, and their positions and transformations are mapped to the group. If <db:code role="parameter">items</db:code> is empty, this function will return an empty top-level <db:link xlink:href="qgraphicsitemgroup.xml">QGraphicsItemGroup</db:link>.</db:para>
<db:para><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> has ownership of the group item; you do not need to delete it. To dismantle (ungroup) a group, call <db:link xlink:href="qgraphicsscene.xml#destroyItemGroup">destroyItemGroup</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#destroyItemGroup">destroyItemGroup</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitemgroup.xml#addToGroup">QGraphicsItemGroup::addToGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="destroyItemGroup">
<db:title>void QGraphicsScene::destroyItemGroup(QGraphicsItemGroup *<db:emphasis>group</db:emphasis>)</db:title>
<db:para>Reparents all items in <db:code role="parameter">group</db:code> to <db:code role="parameter">group</db:code>'s parent item, then removes <db:code role="parameter">group</db:code> from the scene, and finally deletes it. The items' positions and transformations are mapped from the group to the group's parent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#createItemGroup">createItemGroup</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitemgroup.xml#removeFromGroup">QGraphicsItemGroup::removeFromGroup</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[virtual protected] void QGraphicsScene::dragEnterEvent(QGraphicsSceneDragDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented in a subclass to receive drag enter events for the scene.</db:para>
<db:para>The default implementation accepts the event and prepares the scene to accept drag move events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#dragEnterEvent">QGraphicsItem::dragEnterEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#dragMoveEvent">dragMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#dragLeaveEvent">dragLeaveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#dropEvent">dropEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[virtual protected] void QGraphicsScene::dragLeaveEvent(QGraphicsSceneDragDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented in a subclass to receive drag leave events for the scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#dragLeaveEvent">QGraphicsItem::dragLeaveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#dragEnterEvent">dragEnterEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#dragMoveEvent">dragMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#dropEvent">dropEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[virtual protected] void QGraphicsScene::dragMoveEvent(QGraphicsSceneDragDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented in a subclass to receive drag move events for the scene.</db:para>
<db:para>Note: See <db:link xlink:href="qgraphicsscene.xml#items">items</db:link>() for a definition of which items are considered visible by this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#dragMoveEvent">QGraphicsItem::dragMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#dragEnterEvent">dragEnterEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#dragLeaveEvent">dragLeaveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#dropEvent">dropEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawBackground">
<db:title>[virtual protected] void QGraphicsScene::drawBackground(QPainter *<db:emphasis>painter</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>Draws the background of the scene using <db:code role="parameter">painter</db:code>, before any items and the foreground are drawn. Reimplement this function to provide a custom background for the scene.</db:para>
<db:para>All painting is done in <db:emphasis>scene</db:emphasis> coordinates. The <db:code role="parameter">rect</db:code> parameter is the exposed rectangle.</db:para>
<db:para>If all you want is to define a color, texture, or gradient for the background, you can call setBackgroundBrush() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#drawForeground">drawForeground</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#drawItems" role="deprecated">drawItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawForeground">
<db:title>[virtual protected] void QGraphicsScene::drawForeground(QPainter *<db:emphasis>painter</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>Draws the foreground of the scene using <db:code role="parameter">painter</db:code>, after the background and all items have been drawn. Reimplement this function to provide a custom foreground for the scene.</db:para>
<db:para>All painting is done in <db:emphasis>scene</db:emphasis> coordinates. The <db:code role="parameter">rect</db:code> parameter is the exposed rectangle.</db:para>
<db:para>If all you want is to define a color, texture or gradient for the foreground, you can call setForegroundBrush() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#drawBackground">drawBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#drawItems" role="deprecated">drawItems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[virtual protected] void QGraphicsScene::dropEvent(QGraphicsSceneDragDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented in a subclass to receive drop events for the scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#dropEvent">QGraphicsItem::dropEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#dragEnterEvent">dragEnterEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#dragMoveEvent">dragMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#dragLeaveEvent">dragLeaveEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QGraphicsScene::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
<db:para>Processes the event <db:code role="parameter">event</db:code>, and dispatches it to the respective event handlers.</db:para>
<db:para>In addition to calling the convenience event handlers, this function is responsible for converting mouse move events to hover events for when there is no mouse grabber item. Hover events are delivered directly to items; there is no convenience function for them.</db:para>
<db:para>Unlike <db:link xlink:href="qwidget.xml">QWidget</db:link>, <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> does not have the convenience functions <db:link xlink:href="qwidget.xml#enterEvent">enterEvent</db:link>() and <db:link xlink:href="qwidget.xml#leaveEvent">leaveEvent</db:link>(). Use this function to obtain those events instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#contextMenuEvent">contextMenuEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#keyPressEvent">keyPressEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#keyReleaseEvent">keyReleaseEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#mousePressEvent">mousePressEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#mouseMoveEvent">mouseMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#mouseReleaseEvent">mouseReleaseEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#mouseDoubleClickEvent">mouseDoubleClickEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#focusInEvent">focusInEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#focusOutEvent">focusOutEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[override virtual protected] bool QGraphicsScene::eventFilter(QObject *<db:emphasis>watched</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#eventFilter" role="function">QObject::eventFilter(QObject *, QEvent *)</db:link>.</db:para>
<db:para><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> filters <db:link xlink:href="qapplication.xml">QApplication</db:link>'s events to detect palette and font changes.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[virtual protected] void QGraphicsScene::focusInEvent(QFocusEvent *<db:emphasis>focusEvent</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">focusEvent</db:code>, can be reimplemented in a subclass to receive focus in events.</db:para>
<db:para>The default implementation sets focus on the scene, and then on the last focus item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#focusOutEvent">QGraphicsItem::focusOutEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusItem">
<db:title>QGraphicsItem *QGraphicsScene::focusItem() const</db:title>
<db:para>When the scene is active, this functions returns the scene's current focus item, or 0 if no item currently has focus. When the scene is inactive, this functions returns the item that will gain input focus when the scene becomes active.</db:para>
<db:para>The focus item receives keyboard input when the scene receives a key event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#setFocusItem">setFocusItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#hasFocus">QGraphicsItem::hasFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#isActive">isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusNextPrevChild">
<db:title>[protected, since 4.4] bool QGraphicsScene::focusNextPrevChild(bool <db:emphasis>next</db:emphasis>)</db:title>
<db:para>Finds a new widget to give the keyboard focus to, as appropriate for Tab and Shift+Tab, and returns true if it can find a new widget, or false if it cannot. If <db:code role="parameter">next</db:code> is true, this function searches forward; if <db:code role="parameter">next</db:code> is false, it searches backward.</db:para>
<db:para>You can reimplement this function in a subclass of <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> to provide fine-grained control over how tab focus passes inside your scene. The default implementation is based on the tab focus chain defined by <db:link xlink:href="qgraphicswidget.xml#setTabOrder">QGraphicsWidget::setTabOrder</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[virtual protected] void QGraphicsScene::focusOutEvent(QFocusEvent *<db:emphasis>focusEvent</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">focusEvent</db:code>, can be reimplemented in a subclass to receive focus out events.</db:para>
<db:para>The default implementation removes focus from any focus item, then removes focus from the scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#focusInEvent">QGraphicsItem::focusInEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasFocus">
<db:title>bool QGraphicsScene::hasFocus() const</db:title>
<db:para>Returns true if the scene has focus; otherwise returns false. If the scene has focus, it will will forward key events from <db:link xlink:href="qkeyevent.xml">QKeyEvent</db:link> to any item that has focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#setFocus">setFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#setFocusItem">setFocusItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="height">
<db:title>qreal QGraphicsScene::height() const</db:title>
<db:para>This convenience function is equivalent to calling <db:code>sceneRect().height()</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#width">width</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="helpEvent">
<db:title>[virtual protected] void QGraphicsScene::helpEvent(QGraphicsSceneHelpEvent *<db:emphasis>helpEvent</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">helpEvent</db:code>, can be reimplemented in a subclass to receive help events. The events are of type <db:link xlink:href="qevent.xml#Type-enum">QEvent::ToolTip</db:link>, which are created when a tooltip is requested.</db:para>
<db:para>The default implementation shows the tooltip of the topmost visible item, i.e., the item with the highest z-value, at the mouse cursor position. If no item has a tooltip set, this function does nothing.</db:para>
<db:para>Note: See <db:link xlink:href="qgraphicsscene.xml#items">items</db:link>() for a definition of which items are considered visible by this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#toolTip">QGraphicsItem::toolTip</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscenehelpevent.xml">QGraphicsSceneHelpEvent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodEvent">
<db:title>[virtual protected] void QGraphicsScene::inputMethodEvent(QInputMethodEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">event</db:code>, can be reimplemented in a subclass to receive input method events for the scene.</db:para>
<db:para>The default implementation forwards the event to the <db:link xlink:href="qgraphicsscene.xml#focusItem">focusItem</db:link>(). If no item currently has focus or the current focus item does not accept input methods, this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#inputMethodEvent">QGraphicsItem::inputMethodEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodQuery">
<db:title>[virtual] QVariant QGraphicsScene::inputMethodQuery(Qt::InputMethodQuery <db:emphasis>query</db:emphasis>) const</db:title>
<db:para>This method is used by input methods to query a set of properties of the scene to be able to support complex input method operations as support for surrounding text and reconversions.</db:para>
<db:para>The <db:code role="parameter">query</db:code> parameter specifies which property is queried.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#inputMethodQuery">QWidget::inputMethodQuery</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invalidate">
<db:title>void QGraphicsScene::invalidate(const QRectF &amp;<db:emphasis>rect</db:emphasis> = QRectF(), QGraphicsScene::SceneLayers <db:emphasis>layers</db:emphasis> = AllLayers)</db:title>
<db:para>Invalidates and schedules a redraw of the <db:code role="parameter">layers</db:code> in <db:code role="parameter">rect</db:code> on the scene. Any cached content in <db:code role="parameter">layers</db:code> is unconditionally invalidated and redrawn.</db:para>
<db:para>You can use this function overload to notify <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> of changes to the background or the foreground of the scene. This function is commonly used for scenes with tile-based backgrounds to notify changes when <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> has enabled <db:link xlink:href="qgraphicsview.xml#CacheModeFlag-enum">CacheBackground</db:link>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QRectF TileScene::rectForTile(int x, int y) const
{
    // Return the rectangle for the tile at position (x, y).
    return QRectF(x * tileWidth, y * tileHeight, tileWidth, tileHeight);
}

void TileScene::setTile(int x, int y, const QPixmap &amp;pixmap)
{
    // Sets or replaces the tile at position (x, y) with pixmap.
    if (x &gt;= 0 &amp;&amp; x &lt; numTilesH &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; numTilesV) {
        tiles[y][x] = pixmap;
        invalidate(rectForTile(x, y), BackgroundLayer);
    }
}

void TileScene::drawBackground(QPainter *painter, const QRectF &amp;exposed)
{
    // Draws all tiles that intersect the exposed area.
    for (int y = 0; y &lt; numTilesV; ++y) {
        for (int x = 0; x &lt; numTilesH; ++x) {
            QRectF rect = rectForTile(x, y);
            if (exposed.intersects(rect))
                painter-&gt;drawPixmap(rect.topLeft(), tiles[y][x]);
        }
    }
}
</db:programlisting>
<db:para>Note that <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> currently supports background caching only (see <db:link xlink:href="qgraphicsview.xml#CacheModeFlag-enum">QGraphicsView::CacheBackground</db:link>). This function is equivalent to calling <db:link xlink:href="qgraphicsscene.xml#update">update</db:link>() if any layer but <db:link xlink:href="qgraphicsscene.xml#SceneLayer-enum">BackgroundLayer</db:link> is passed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#resetCachedContent">QGraphicsView::resetCachedContent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invalidate-1">
<db:title>[since 4.3] void QGraphicsScene::invalidate(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>, QGraphicsScene::SceneLayers <db:emphasis>layers</db:emphasis> = AllLayers)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function is equivalent to calling invalidate(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>), <db:code role="parameter">layers</db:code>);</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="isActive">
<db:title>[since 4.6] bool QGraphicsScene::isActive() const</db:title>
<db:para>Returns true if the scene is active (e.g., it's viewed by at least one <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> that is active); otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#isActive">QGraphicsItem::isActive</db:link>()</db:member>
<db:member><db:link xlink:href="">QWidget::isActiveWindow()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemAt">
<db:title>[since 4.6] QGraphicsItem *QGraphicsScene::itemAt(const QPointF &amp;<db:emphasis>position</db:emphasis>, const QTransform &amp;<db:emphasis>deviceTransform</db:emphasis>) const</db:title>
<db:para>Returns the topmost visible item at the specified <db:code role="parameter">position</db:code>, or 0 if there are no items at this position.</db:para>
<db:para><db:code role="parameter">deviceTransform</db:code> is the transformation that applies to the view, and needs to be provided if the scene contains items that ignore transformations.</db:para>
<db:para>Note: See <db:link xlink:href="qgraphicsscene.xml#items">items</db:link>() for a definition of which items are considered visible by this function.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#items">items</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#collidingItems">collidingItems</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemAt-1">
<db:title>[since 4.6] QGraphicsItem *QGraphicsScene::itemAt(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, const QTransform &amp;<db:emphasis>deviceTransform</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the topmost visible item at the position specified by (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>), or 0 if there are no items at this position.</db:para>
<db:para><db:code role="parameter">deviceTransform</db:code> is the transformation that applies to the view, and needs to be provided if the scene contains items that ignore transformations.</db:para>
<db:para>This convenience function is equivalent to calling <db:code>itemAt(QPointF(x, y), deviceTransform)</db:code>.</db:para>
<db:para>Note: See <db:link xlink:href="qgraphicsscene.xml#items">items</db:link>() for a definition of which items are considered visible by this function.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="items">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsScene::items(Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::DescendingOrder) const</db:title>
<db:para>Returns an ordered list of all items on the scene. <db:code role="parameter">order</db:code> decides the stacking order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#removeItem">removeItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items-1">
<db:title>[since 4.6] QList&lt;QGraphicsItem *&gt; QGraphicsScene::items(const QPointF &amp;<db:emphasis>pos</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::DescendingOrder, const QTransform &amp;<db:emphasis>deviceTransform</db:emphasis> = QTransform()) const</db:title>
<db:para>Returns all visible items that, depending on <db:code role="parameter">mode</db:code>, are at the specified <db:code role="parameter">pos</db:code> in a list sorted using <db:code role="parameter">order</db:code>. In this case, &quot;visible&quot; defines items for which: isVisible() returns true, effectiveOpacity() returns a value greater than 0.0 (which is fully transparent) and the parent item does not clip it.</db:para>
<db:para>The default value for <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::IntersectsItemShape</db:link>; all items whose exact shape intersects with <db:code role="parameter">pos</db:code> are returned.</db:para>
<db:para><db:code role="parameter">deviceTransform</db:code> is the transformation that applies to the view, and needs to be provided if the scene contains items that ignore transformations.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items-2">
<db:title>[since 4.6] QList&lt;QGraphicsItem *&gt; QGraphicsScene::items(const QPainterPath &amp;<db:emphasis>path</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::DescendingOrder, const QTransform &amp;<db:emphasis>deviceTransform</db:emphasis> = QTransform()) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns all visible items that, depending on <db:code role="parameter">mode</db:code>, are either inside or intersect with the specified <db:code role="parameter">path</db:code>, in a list sorted using <db:code role="parameter">order</db:code>. In this case, &quot;visible&quot; defines items for which: isVisible() returns true, effectiveOpacity() returns a value greater than 0.0 (which is fully transparent) and the parent item does not clip it.</db:para>
<db:para>The default value for <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::IntersectsItemShape</db:link>; all items whose exact shape intersects with or is contained by <db:code role="parameter">path</db:code> are returned.</db:para>
<db:para><db:code role="parameter">deviceTransform</db:code> is the transformation that applies to the view, and needs to be provided if the scene contains items that ignore transformations.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items-3">
<db:title>[since 4.6] QList&lt;QGraphicsItem *&gt; QGraphicsScene::items(const QPolygonF &amp;<db:emphasis>polygon</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::DescendingOrder, const QTransform &amp;<db:emphasis>deviceTransform</db:emphasis> = QTransform()) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns all visible items that, depending on <db:code role="parameter">mode</db:code>, are either inside or intersect with the specified <db:code role="parameter">polygon</db:code>, in a list sorted using <db:code role="parameter">order</db:code>. In this case, &quot;visible&quot; defines items for which: isVisible() returns true, effectiveOpacity() returns a value greater than 0.0 (which is fully transparent) and the parent item does not clip it.</db:para>
<db:para>The default value for <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::IntersectsItemShape</db:link>; all items whose exact shape intersects with or is contained by <db:code role="parameter">polygon</db:code> are returned.</db:para>
<db:para><db:code role="parameter">deviceTransform</db:code> is the transformation that applies to the view, and needs to be provided if the scene contains items that ignore transformations.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items-4">
<db:title>[since 4.6] QList&lt;QGraphicsItem *&gt; QGraphicsScene::items(const QRectF &amp;<db:emphasis>rect</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::DescendingOrder, const QTransform &amp;<db:emphasis>deviceTransform</db:emphasis> = QTransform()) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns all visible items that, depending on <db:code role="parameter">mode</db:code>, are either inside or intersect with the specified <db:code role="parameter">rect</db:code>, in a list sorted using <db:code role="parameter">order</db:code>. In this case, &quot;visible&quot; defines items for which: isVisible() returns true, effectiveOpacity() returns a value greater than 0.0 (which is fully transparent) and the parent item does not clip it.</db:para>
<db:para>The default value for <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#ItemSelectionMode-enum">Qt::IntersectsItemShape</db:link>; all items whose exact shape intersects with or is contained by <db:code role="parameter">rect</db:code> are returned.</db:para>
<db:para><db:code role="parameter">deviceTransform</db:code> is the transformation that applies to the view, and needs to be provided if the scene contains items that ignore transformations.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sorting">Sorting</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="items-5">
<db:title>[since 4.6] QList&lt;QGraphicsItem *&gt; QGraphicsScene::items(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis>, const QTransform &amp;<db:emphasis>deviceTransform</db:emphasis> = QTransform()) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns all visible items that, depending on <db:code role="parameter">mode</db:code>, are either inside or intersect with the rectangle defined by <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code> and <db:code role="parameter">h</db:code>, in a list sorted using <db:code role="parameter">order</db:code>. In this case, &quot;visible&quot; defines items for which: isVisible() returns true, effectiveOpacity() returns a value greater than 0.0 (which is fully transparent) and the parent item does not clip it.</db:para>
<db:para><db:code role="parameter">deviceTransform</db:code> is the transformation that applies to the view, and needs to be provided if the scene contains items that ignore transformations.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="itemsBoundingRect">
<db:title>QRectF QGraphicsScene::itemsBoundingRect() const</db:title>
<db:para>Calculates and returns the bounding rect of all items on the scene. This function works by iterating over all items, and because of this, it can be slow for large scenes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">sceneRect()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[virtual protected] void QGraphicsScene::keyPressEvent(QKeyEvent *<db:emphasis>keyEvent</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">keyEvent</db:code>, can be reimplemented in a subclass to receive keypress events. The default implementation forwards the event to current focus item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#keyPressEvent">QGraphicsItem::keyPressEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#focusItem">focusItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[virtual protected] void QGraphicsScene::keyReleaseEvent(QKeyEvent *<db:emphasis>keyEvent</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">keyEvent</db:code>, can be reimplemented in a subclass to receive key release events. The default implementation forwards the event to current focus item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#keyReleaseEvent">QGraphicsItem::keyReleaseEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#focusItem">focusItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[virtual protected] void QGraphicsScene::mouseDoubleClickEvent(QGraphicsSceneMouseEvent *<db:emphasis>mouseEvent</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">mouseEvent</db:code>, can be reimplemented in a subclass to receive mouse doubleclick events for the scene.</db:para>
<db:para>If someone doubleclicks on the scene, the scene will first receive a mouse press event, followed by a release event (i.e., a click), then a doubleclick event, and finally a release event. If the doubleclick event is delivered to a different item than the one that received the first press and release, it will be delivered as a press event. However, tripleclick events are not delivered as doubleclick events in this case.</db:para>
<db:para>The default implementation is similar to <db:link xlink:href="qgraphicsscene.xml#mousePressEvent">mousePressEvent</db:link>().</db:para>
<db:para>Note: See <db:link xlink:href="qgraphicsscene.xml#items">items</db:link>() for a definition of which items are considered visible by this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mousePressEvent">QGraphicsItem::mousePressEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseMoveEvent">QGraphicsItem::mouseMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseReleaseEvent">QGraphicsItem::mouseReleaseEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setAcceptedMouseButtons">QGraphicsItem::setAcceptedMouseButtons</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseGrabberItem">
<db:title>QGraphicsItem *QGraphicsScene::mouseGrabberItem() const</db:title>
<db:para>Returns the current mouse grabber item, or 0 if no item is currently grabbing the mouse. The mouse grabber item is the item that receives all mouse events sent to the scene.</db:para>
<db:para>An item becomes a mouse grabber when it receives and accepts a mouse press event, and it stays the mouse grabber until either of the following events occur:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If the item receives a mouse release event when there are no other buttons pressed, it loses the mouse grab.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the item becomes invisible (i.e., someone calls <db:code>item-&gt;setVisible(false)</db:code>), or if it becomes disabled (i.e., someone calls <db:code>item-&gt;setEnabled(false)</db:code>), it loses the mouse grab.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the item is removed from the scene, it loses the mouse grab.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the item loses its mouse grab, the scene will ignore all mouse events until a new item grabs the mouse (i.e., until a new item receives a mouse press event).</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[virtual protected] void QGraphicsScene::mouseMoveEvent(QGraphicsSceneMouseEvent *<db:emphasis>mouseEvent</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">mouseEvent</db:code>, can be reimplemented in a subclass to receive mouse move events for the scene.</db:para>
<db:para>The default implementation depends on the mouse grabber state. If there is a mouse grabber item, the event is sent to the mouse grabber. If there are any items that accept hover events at the current position, the event is translated into a hover event and accepted; otherwise it's ignored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mousePressEvent">QGraphicsItem::mousePressEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseReleaseEvent">QGraphicsItem::mouseReleaseEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseDoubleClickEvent">QGraphicsItem::mouseDoubleClickEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setAcceptedMouseButtons">QGraphicsItem::setAcceptedMouseButtons</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[virtual protected] void QGraphicsScene::mousePressEvent(QGraphicsSceneMouseEvent *<db:emphasis>mouseEvent</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">mouseEvent</db:code>, can be reimplemented in a subclass to receive mouse press events for the scene.</db:para>
<db:para>The default implementation depends on the state of the scene. If there is a mouse grabber item, then the event is sent to the mouse grabber. Otherwise, it is forwarded to the topmost visible item that accepts mouse events at the scene position from the event, and that item promptly becomes the mouse grabber item.</db:para>
<db:para>If there is no item at the given position on the scene, the selection area is reset, any focus item loses its input focus, and the event is then ignored.</db:para>
<db:para>Note: See <db:link xlink:href="qgraphicsscene.xml#items">items</db:link>() for a definition of which items are considered visible by this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mousePressEvent">QGraphicsItem::mousePressEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setAcceptedMouseButtons">QGraphicsItem::setAcceptedMouseButtons</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[virtual protected] void QGraphicsScene::mouseReleaseEvent(QGraphicsSceneMouseEvent *<db:emphasis>mouseEvent</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">mouseEvent</db:code>, can be reimplemented in a subclass to receive mouse release events for the scene.</db:para>
<db:para>The default implementation depends on the mouse grabber state. If there is no mouse grabber, the event is ignored. Otherwise, if there is a mouse grabber item, the event is sent to the mouse grabber. If this mouse release represents the last pressed button on the mouse, the mouse grabber item then loses the mouse grab.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#mousePressEvent">QGraphicsItem::mousePressEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseMoveEvent">QGraphicsItem::mouseMoveEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#mouseDoubleClickEvent">QGraphicsItem::mouseDoubleClickEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setAcceptedMouseButtons">QGraphicsItem::setAcceptedMouseButtons</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeItem">
<db:title>void QGraphicsScene::removeItem(QGraphicsItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Removes the item <db:code role="parameter">item</db:code> and all its children from the scene. The ownership of <db:code role="parameter">item</db:code> is passed on to the caller (i.e., <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will no longer delete <db:code role="parameter">item</db:code> when destroyed).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="render">
<db:title>void QGraphicsScene::render(QPainter *<db:emphasis>painter</db:emphasis>, const QRectF &amp;<db:emphasis>target</db:emphasis> = QRectF(), const QRectF &amp;<db:emphasis>source</db:emphasis> = QRectF(), Qt::AspectRatioMode <db:emphasis>aspectRatioMode</db:emphasis> = Qt::KeepAspectRatio)</db:title>
<db:para>Renders the <db:code role="parameter">source</db:code> rect from scene into <db:code role="parameter">target</db:code>, using <db:code role="parameter">painter</db:code>. This function is useful for capturing the contents of the scene onto a paint device, such as a <db:link xlink:href="qimage.xml">QImage</db:link> (e.g., to take a screenshot), or for printing with <db:link xlink:href="qprinter.xml">QPrinter</db:link>. For example:</db:para>
<db:programlisting language="cpp">QGraphicsScene scene;
scene.addItem(...
...
QPrinter printer(QPrinter::HighResolution);
printer.setPaperSize(QPrinter::A4);

QPainter painter(&amp;printer);
scene.render(&amp;painter);
</db:programlisting>
<db:para>If <db:code role="parameter">source</db:code> is a null rect, this function will use sceneRect() to determine what to render. If <db:code role="parameter">target</db:code> is a null rect, the dimensions of <db:code role="parameter">painter</db:code>'s paint device will be used.</db:para>
<db:para>The source rect contents will be transformed according to <db:code role="parameter">aspectRatioMode</db:code> to fit into the target rect. By default, the aspect ratio is kept, and <db:code role="parameter">source</db:code> is scaled to fit in <db:code role="parameter">target</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#render">QGraphicsView::render</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sceneRectChanged">
<db:title>void QGraphicsScene::sceneRectChanged(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>This signal is emitted by <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> whenever the scene rect changes. The <db:code role="parameter">rect</db:code> parameter is the new scene rectangle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#updateSceneRect">QGraphicsView::updateSceneRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedItems">
<db:title>QList&lt;QGraphicsItem *&gt; QGraphicsScene::selectedItems() const</db:title>
<db:para>Returns a list of all currently selected items. The items are returned in no particular order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#setSelectionArea">setSelectionArea</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionArea">
<db:title>QPainterPath QGraphicsScene::selectionArea() const</db:title>
<db:para>Returns the selection area that was previously set with <db:link xlink:href="qgraphicsscene.xml#setSelectionArea">setSelectionArea</db:link>(), or an empty <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> if no selection area has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#setSelectionArea">setSelectionArea</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionChanged">
<db:title>[since 4.3] void QGraphicsScene::selectionChanged()</db:title>
<db:para>This signal is emitted by <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> whenever the selection changes. You can call <db:link xlink:href="qgraphicsscene.xml#selectedItems">selectedItems</db:link>() to get the new list of selected items.</db:para>
<db:para>The selection changes whenever an item is selected or unselected, a selection area is set, cleared or otherwise changed, if a preselected item is added to the scene, or if a selected item is removed from the scene.</db:para>
<db:para><db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> emits this signal only once for group selection operations. For example, if you set a selection area, select or unselect a <db:link xlink:href="qgraphicsitemgroup.xml">QGraphicsItemGroup</db:link>, or if you add or remove from the scene a parent item that contains several selected items, selectionChanged() is emitted only once after the operation has completed (instead of once for each item).</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#setSelectionArea">setSelectionArea</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#selectedItems">selectedItems</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#setSelected">QGraphicsItem::setSelected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sendEvent">
<db:title>[since 4.6] bool QGraphicsScene::sendEvent(QGraphicsItem *<db:emphasis>item</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Sends event <db:code role="parameter">event</db:code> to item <db:code role="parameter">item</db:code> through possible event filters.</db:para>
<db:para>The event is sent only if the item is enabled.</db:para>
<db:para>Returns <db:code>false</db:code> if the event was filtered or if the item is disabled. Otherwise returns the value that was returned from the event handler.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEvent">QGraphicsItem::sceneEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#sceneEventFilter">QGraphicsItem::sceneEventFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setActivePanel">
<db:title>[since 4.6] void QGraphicsScene::setActivePanel(QGraphicsItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Activates <db:code role="parameter">item</db:code>, which must be an item in this scene. You can also pass 0 for <db:code role="parameter">item</db:code>, in which case <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will deactivate any currently active panel.</db:para>
<db:para>If the scene is currently inactive, <db:code role="parameter">item</db:code> remains inactive until the scene becomes active (or, ir <db:code role="parameter">item</db:code> is 0, no item will be activated).</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#activePanel">activePanel</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#isActive">isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsitem.xml#isActive">QGraphicsItem::isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setActiveWindow">
<db:title>[since 4.4] void QGraphicsScene::setActiveWindow(QGraphicsWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Activates <db:code role="parameter">widget</db:code>, which must be a widget in this scene. You can also pass 0 for <db:code role="parameter">widget</db:code>, in which case <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will deactivate any currently active window.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#activeWindow">activeWindow</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml#isActiveWindow">QGraphicsWidget::isActiveWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFocus">
<db:title>void QGraphicsScene::setFocus(Qt::FocusReason <db:emphasis>focusReason</db:emphasis> = Qt::OtherFocusReason)</db:title>
<db:para>Sets focus on the scene by sending a <db:link xlink:href="qfocusevent.xml">QFocusEvent</db:link> to the scene, passing <db:code role="parameter">focusReason</db:code> as the reason. If the scene regains focus after having previously lost it while an item had focus, the last focus item will receive focus with <db:code role="parameter">focusReason</db:code> as the reason.</db:para>
<db:para>If the scene already has focus, this function does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#hasFocus">hasFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#clearFocus">clearFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#setFocusItem">setFocusItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFocusItem">
<db:title>void QGraphicsScene::setFocusItem(QGraphicsItem *<db:emphasis>item</db:emphasis>, Qt::FocusReason <db:emphasis>focusReason</db:emphasis> = Qt::OtherFocusReason)</db:title>
<db:para>Sets the scene's focus item to <db:code role="parameter">item</db:code>, with the focus reason <db:code role="parameter">focusReason</db:code>, after removing focus from any previous item that may have had focus.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is 0, or if it either does not accept focus (i.e., it does not have the <db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">QGraphicsItem::ItemIsFocusable</db:link> flag enabled), or is not visible or not enabled, this function only removes focus from any previous focusitem.</db:para>
<db:para>If item is not 0, and the scene does not currently have focus (i.e., <db:link xlink:href="qgraphicsscene.xml#hasFocus">hasFocus</db:link>() returns false), this function will call <db:link xlink:href="qgraphicsscene.xml#setFocus">setFocus</db:link>() automatically.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#focusItem">focusItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#hasFocus">hasFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#setFocus">setFocus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelectionArea">
<db:title>[since 4.6] void QGraphicsScene::setSelectionArea(const QPainterPath &amp;<db:emphasis>path</db:emphasis>, const QTransform &amp;<db:emphasis>deviceTransform</db:emphasis>)</db:title>
<db:para>Sets the selection area to <db:code role="parameter">path</db:code>. All items within this area are immediately selected, and all items outside are unselected. You can get the list of all selected items by calling <db:link xlink:href="qgraphicsscene.xml#selectedItems">selectedItems</db:link>().</db:para>
<db:para><db:code role="parameter">deviceTransform</db:code> is the transformation that applies to the view, and needs to be provided if the scene contains items that ignore transformations.</db:para>
<db:para>For an item to be selected, it must be marked as <db:emphasis>selectable</db:emphasis> (<db:link xlink:href="qgraphicsitem.xml#GraphicsItemFlag-enum">QGraphicsItem::ItemIsSelectable</db:link>).</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#clearSelection">clearSelection</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#selectionArea">selectionArea</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelectionArea-1">
<db:title>[since 4.6] void QGraphicsScene::setSelectionArea(const QPainterPath &amp;<db:emphasis>path</db:emphasis>, Qt::ItemSelectionMode <db:emphasis>mode</db:emphasis> = Qt::IntersectsItemShape, const QTransform &amp;<db:emphasis>deviceTransform</db:emphasis> = QTransform())</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the selection area to <db:code role="parameter">path</db:code> using <db:code role="parameter">mode</db:code> to determine if items are included in the selection area.</db:para>
<db:para><db:code role="parameter">deviceTransform</db:code> is the transformation that applies to the view, and needs to be provided if the scene contains items that ignore transformations.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#clearSelection">clearSelection</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#selectionArea">selectionArea</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStyle">
<db:title>[since 4.4] void QGraphicsScene::setStyle(QStyle *<db:emphasis>style</db:emphasis>)</db:title>
<db:para>Sets or replaces the style of the scene to <db:code role="parameter">style</db:code>, and reparents the style to this scene. Any previously assigned style is deleted. The scene's style defaults to <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>(), and serves as the default for all <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> items in the scene.</db:para>
<db:para>Changing the style, either directly by calling this function, or indirectly by calling <db:link xlink:href="qapplication.xml#setStyle">QApplication::setStyle</db:link>(), will automatically update the style for all widgets in the scene that do not have a style explicitly assigned to them.</db:para>
<db:para>If <db:code role="parameter">style</db:code> is 0, <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> will revert to <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#style">style</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="style">
<db:title>[since 4.4] QStyle *QGraphicsScene::style() const</db:title>
<db:para>Returns the scene's style, or the same as <db:link xlink:href="qapplication.xml#style">QApplication::style</db:link>() if the scene has not been explicitly assigned a style.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#setStyle">setStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="update">
<db:title>void QGraphicsScene::update(const QRectF &amp;<db:emphasis>rect</db:emphasis> = QRectF())</db:title>
<db:para>Schedules a redraw of the area <db:code role="parameter">rect</db:code> on the scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">sceneRect()</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#changed">changed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="update-1">
<db:title>[since 4.3] void QGraphicsScene::update(qreal <db:emphasis>x</db:emphasis>, qreal <db:emphasis>y</db:emphasis>, qreal <db:emphasis>w</db:emphasis>, qreal <db:emphasis>h</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function is equivalent to calling update(<db:link xlink:href="qrectf.xml">QRectF</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">w</db:code>, <db:code role="parameter">h</db:code>));</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="views">
<db:title>QList&lt;QGraphicsView *&gt; QGraphicsScene::views() const</db:title>
<db:para>Returns a list of all the views that display this scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsview.xml#scene">QGraphicsView::scene</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[virtual protected] void QGraphicsScene::wheelEvent(QGraphicsSceneWheelEvent *<db:emphasis>wheelEvent</db:emphasis>)</db:title>
<db:para>This event handler, for event <db:code role="parameter">wheelEvent</db:code>, can be reimplemented in a subclass to receive mouse wheel events for the scene.</db:para>
<db:para>By default, the event is delivered to the topmost visible item under the cursor. If ignored, the event propagates to the item beneath, and again until the event is accepted, or it reaches the scene. If no items accept the event, it is ignored.</db:para>
<db:para>Note: See <db:link xlink:href="qgraphicsscene.xml#items">items</db:link>() for a definition of which items are considered visible by this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#wheelEvent">QGraphicsItem::wheelEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="width">
<db:title>qreal QGraphicsScene::width() const</db:title>
<db:para>This convenience function is equivalent to calling sceneRect().width().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#height">height</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QGraphicsScene</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="drawItems">
<db:title>[virtual protected, deprecated] void QGraphicsScene::drawItems(QPainter *<db:emphasis>painter</db:emphasis>, int <db:emphasis>numItems</db:emphasis>, QGraphicsItem *[] <db:emphasis>items</db:emphasis>, const QStyleOptionGraphicsItem[] <db:emphasis>options</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis> = 0)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Paints the given <db:code role="parameter">items</db:code> using the provided <db:code role="parameter">painter</db:code>, after the background has been drawn, and before the foreground has been drawn. All painting is done in <db:emphasis>scene</db:emphasis> coordinates. Before drawing each item, the painter must be transformed using <db:link xlink:href="qgraphicsitem.xml#sceneTransform">QGraphicsItem::sceneTransform</db:link>().</db:para>
<db:para>The <db:code role="parameter">options</db:code> parameter is the list of style option objects for each item in <db:code role="parameter">items</db:code>. The <db:code role="parameter">numItems</db:code> parameter is the number of items in <db:code role="parameter">items</db:code> and options in <db:code role="parameter">options</db:code>. The <db:code role="parameter">widget</db:code> parameter is optional; if specified, it should point to the widget that is being painted on.</db:para>
<db:para>The default implementation prepares the painter matrix, and calls <db:link xlink:href="qgraphicsitem.xml#paint">QGraphicsItem::paint</db:link>() on all items. Reimplement this function to provide custom painting of all items for the scene; gaining complete control over how each item is drawn. In some cases this can increase drawing performance significantly.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void CustomScene::drawItems(QPainter *painter, int numItems,
                            QGraphicsItem *items[],
                            const QStyleOptionGraphicsItem options[],
                            QWidget *widget)
{
    for (int i = 0; i &lt; numItems; ++i) {
         // Draw the item
         painter-&gt;save();
         painter-&gt;setMatrix(items[i]-&gt;sceneMatrix(), true);
         items[i]-&gt;paint(painter, &amp;options[i], widget);
         painter-&gt;restore();
     }
}
</db:programlisting>
<db:para>Since Qt 4.6, this function is not called anymore unless the <db:link xlink:href="qgraphicsview.xml#OptimizationFlag-enum">QGraphicsView::IndirectPainting</db:link> flag is given as an Optimization flag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#drawBackground">drawBackground</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscene.xml#drawForeground">drawForeground</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
