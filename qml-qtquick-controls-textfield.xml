<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TextField QML Type</db:title>
<db:productname>QtQuickControls1</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 1 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Displays a single line of editable plain text.</db:para>
<db:para>This type was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 1.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>FocusScope</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>TextField is part of <db:simplelist><db:member><db:link xlink:href="controls.xml">Buttons and Controls</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/textfield.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> is used to accept a line of text input. Input constraints can be placed on a <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> item (for example, through a <db:link xlink:href="qml-qtquick-controls-textfield.xml#validator-prop">validator</db:link> or <db:link xlink:href="qml-qtquick-controls-textfield.xml#inputMask-prop">inputMask</db:link>). Setting <db:link xlink:href="qml-qtquick-controls-textfield.xml#echoMode-prop">echoMode</db:link> to an appropriate value enables <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> to be used for a password input field.</db:para>
<db:programlisting language="qml">TextField {
    placeholderText: qsTr(&quot;Enter name&quot;)
}
</db:programlisting>
<db:para>You can create a custom appearance for a <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> by assigning a <db:link xlink:href="qml-qtquick-controls-styles-textfieldstyle.xml">TextFieldStyle</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="acceptableInput-prop">
<db:title>[read-only] acceptableInput : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>acceptableInput</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns <db:code>true</db:code> if the text field contains acceptable text.</db:para>
<db:para>If a validator or input mask was set, this property will return <db:code>true</db:code> if the current text satisfies the validator or mask as a final string (not as an intermediate string).</db:para>
<db:para>The default value is <db:code>true</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#validator-prop">validator</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#inputMask-prop">inputMask</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#accepted-signal">accepted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activeFocusOnPress-prop">
<db:title>activeFocusOnPress : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>activeFocusOnPress</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is set to <db:code>true</db:code> if the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> should gain active focus on a mouse press.</db:para>
<db:para>The default value is <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="canPaste-prop">
<db:title>[read-only] canPaste : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>canPaste</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> is writable and the content of the clipboard is suitable for pasting into the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>.</db:para>
</db:section>
<db:section xml:id="canRedo-prop">
<db:title>[read-only] canRedo : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>canRedo</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> is writable and there are <db:link xlink:href="qml-qtquick-controls-textfield.xml#undo-method">undone</db:link> operations that can be redone.</db:para>
</db:section>
<db:section xml:id="canUndo-prop">
<db:title>[read-only] canUndo : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>canUndo</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> is writable and there are previous operations that can be undone.</db:para>
</db:section>
<db:section xml:id="cursorPosition-prop">
<db:title>cursorPosition : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>cursorPosition</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the position of the cursor in the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>.</db:para>
</db:section>
<db:section xml:id="cursorRectangle-prop">
<db:title>[read-only, since QtQuick.Controls 1.3] cursorRectangle : rect</db:title>
<db:fieldsynopsis>
<db:type>rect</db:type>
<db:varname>cursorRectangle</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The rectangle where the text cursor is rendered within the text field.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.3.</db:para>
</db:section>
<db:section xml:id="displayText-prop">
<db:title>[read-only] displayText : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>displayText</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the text displayed in the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>.</db:para>
<db:para>If <db:link xlink:href="qml-qtquick-controls-textfield.xml#echoMode-prop">echoMode</db:link> is set to TextInput::Normal, this holds the same value as the <db:link xlink:href="qml-qtquick-controls-textfield.xml#text-prop">TextField::text</db:link> property. Otherwise, this property holds the text visible to the user, while the <db:link xlink:href="qml-qtquick-controls-textfield.xml#text-prop">text</db:link> property holds the actual entered text.</db:para>
</db:section>
<db:section xml:id="echoMode-prop">
<db:title>echoMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>echoMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies how the text should be displayed in the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>.</db:para>
<db:para>The possible modes are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.Normal - Displays the text as it is. (Default)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.Password - Displays asterisks instead of characters.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.NoEcho - Displays nothing.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.PasswordEchoOnEdit - Displays characters as they are entered while editing, otherwise displays asterisks.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="effectiveHorizontalAlignment-prop">
<db:title>[read-only] effectiveHorizontalAlignment : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>effectiveHorizontalAlignment</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Gets the effective horizontal alignment of the text within the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> item's width.</db:para>
<db:para><db:link xlink:href="qml-qtquick-controls-textfield.xml#horizontalAlignment-prop">horizontalAlignment</db:link> contains the default horizontal alignment.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#horizontalAlignment-prop">horizontalAlignment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font-prop">
<db:title>font : font</db:title>
<db:fieldsynopsis>
<db:type>font</db:type>
<db:varname>font</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the font of the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>.</db:para>
</db:section>
<db:section xml:id="horizontalAlignment-prop">
<db:title>horizontalAlignment : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>horizontalAlignment</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the alignment of the text within the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> item's width.</db:para>
<db:para>By default, the horizontal text alignment follows the natural alignment of the text, for example text that is read from left to right will be aligned to the left.</db:para>
<db:para>The possible alignment values are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.AlignLeft</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.AlignRight</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.AlignHCenter</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When using the attached property, <db:link xlink:href="qml-qtquick-layoutmirroring.xml#enabled-prop">LayoutMirroring::enabled</db:link>, to mirror application layouts, the horizontal alignment of text will also be mirrored. However, the property <db:code>horizontalAlignment</db:code> will remain unchanged. To query the effective horizontal alignment of <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>, use the read-only property <db:code>effectiveHorizontalAlignment</db:code>.</db:para>
</db:section>
<db:section xml:id="hovered-prop">
<db:title>[read-only] hovered : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>hovered</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the control is being hovered.</db:para>
</db:section>
<db:section xml:id="inputMask-prop">
<db:title>inputMask : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>inputMask</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets an input mask on the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>, restricting the allowable text inputs. See <db:link xlink:href="qlineedit.xml#inputMask-prop">QLineEdit::inputMask</db:link> for further details, as the exact same mask strings are used by <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#acceptableInput-prop">acceptableInput</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#validator-prop">validator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodComposing-prop">
<db:title>[read-only, since QtQuick.Controls 1.3] inputMethodComposing : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>inputMethodComposing</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> has partial text input from an input method.</db:para>
<db:para>While it is composing an input method may rely on mouse or key events from the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> to edit or commit the partial text. This property can be used to determine when to disable events handlers that may interfere with the correct operation of an input method.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.3.</db:para>
</db:section>
<db:section xml:id="inputMethodHints-prop">
<db:title>inputMethodHints : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>inputMethodHints</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Provides hints to the input method about the expected content of the text field and how it should operate.</db:para>
<db:para>The value is a bit-wise combination of flags, or <db:code>Qt.ImhNone</db:code> if no hints are set.</db:para>
<db:para>The default value is <db:code>Qt.ImhNone</db:code>.</db:para>
<db:para>Flags that alter behavior are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhHiddenText - Characters should be hidden, as is typically used when entering passwords. This is automatically set when setting <db:link xlink:href="qml-qtquick-controls-textfield.xml#echoMode-prop">echoMode</db:link> to <db:code>TextInput.Password</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhSensitiveData - Typed text should not be stored by the active input method in any persistent storage like predictive user dictionary.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhNoAutoUppercase - The input method should not try to automatically switch to upper case when a sentence ends.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferNumbers - Numbers are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferUppercase - Uppercase letters are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferLowercase - Lowercase letters are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhNoPredictiveText - Do not use predictive text (for example, dictionary lookup) while typing.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhDate - The text editor functions as a date field.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhTime - The text editor functions as a time field.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhMultiLine - The text editor doesn't close software input keyboard when Return or Enter key is pressed (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 1.3).</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Flags that restrict input (exclusive flags) are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhDigitsOnly - Only digits are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhFormattedNumbersOnly - Only number input is allowed. This includes decimal point and minus sign.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhUppercaseOnly - Only uppercase letter input is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhLowercaseOnly - Only lowercase letter input is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhDialableCharactersOnly - Only characters suitable for phone dialing are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhEmailCharactersOnly - Only characters suitable for email addresses are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhUrlCharactersOnly - Only characters suitable for URLs are allowed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Masks:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhExclusiveInputMask - This mask yields nonzero if any of the exclusive flags are used.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="length-prop">
<db:title>[read-only] length : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>length</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the total number of characters in the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> item.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> has an input mask, the length will include mask characters and may differ from the length of the string returned by the <db:link xlink:href="qml-qtquick-controls-textfield.xml#text-prop">text</db:link> property.</db:para>
<db:para>This property can be faster than querying the length of the <db:link xlink:href="qml-qtquick-controls-textfield.xml#text-prop">text</db:link> property as it doesn't require any copying or conversion of the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>'s internal string data.</db:para>
</db:section>
<db:section xml:id="maximumLength-prop">
<db:title>maximumLength : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>maximumLength</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum permitted length of the text in the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>.</db:para>
<db:para>If the text is too long, it is truncated at the limit.</db:para>
</db:section>
<db:section xml:id="menu-prop">
<db:title>[since QtQuick.Controls 1.3] menu : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>menu</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains the edit <db:link xlink:href="qml-qtquick-controls-menu.xml">Menu</db:link> for working with text selection. Set it to <db:code>null</db:code> if no menu is wanted.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.3.</db:para>
</db:section>
<db:section xml:id="placeholderText-prop">
<db:title>placeholderText : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>placeholderText</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains the text that is shown in the text field when the text field is empty.</db:para>
</db:section>
<db:section xml:id="readOnly-prop">
<db:title>readOnly : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>readOnly</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets whether user input can modify the contents of the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>. Read- only is different from a disabled text field in that the text field will appear to be active and text can still be selected and copied.</db:para>
<db:para>If readOnly is set to <db:code>true</db:code>, then user input will not affect the text. Any bindings or attempts to set the text property will still work, however.</db:para>
</db:section>
<db:section xml:id="selectByMouse-prop">
<db:title>[since QtQuick.Controls 1.3] selectByMouse : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>selectByMouse</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines if the user can select the text with the mouse.</db:para>
<db:para>The default value is <db:code>true</db:code>.</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.3.</db:para>
</db:section>
<db:section xml:id="selectedText-prop">
<db:title>[read-only] selectedText : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>selectedText</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Provides the text currently selected in the text input.</db:para>
<db:para>It is equivalent to the following snippet, but is faster and easier to use.</db:para>
<db:programlisting language="cpp">myTextField.text.toString().substring(myTextField.selectionStart, myTextField.selectionEnd);
</db:programlisting>
</db:section>
<db:section xml:id="selectionEnd-prop">
<db:title>[read-only] selectionEnd : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>selectionEnd</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The cursor position after the last character in the current selection.</db:para>
<db:para>This property is read-only. To change the selection, use select(start,end), <db:link xlink:href="qml-qtquick-controls-textfield.xml#selectAll-method">selectAll</db:link>(), or <db:link xlink:href="qml-qtquick-controls-textfield.xml#selectWord-method">selectWord</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#selectionStart-prop">selectionStart</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#cursorPosition-prop">cursorPosition</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#selectedText-prop">selectedText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionStart-prop">
<db:title>[read-only] selectionStart : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>selectionStart</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The cursor position before the first character in the current selection.</db:para>
<db:para>This property is read-only. To change the selection, use select(start,end), <db:link xlink:href="qml-qtquick-controls-textfield.xml#selectAll-method">selectAll</db:link>(), or <db:link xlink:href="qml-qtquick-controls-textfield.xml#selectWord-method">selectWord</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#selectionEnd-prop">selectionEnd</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#cursorPosition-prop">cursorPosition</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#selectedText-prop">selectedText</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="style-prop">
<db:title>style : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>style</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The style Component for this control.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Qt Quick Controls Styles QML Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>text</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains the text in the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>.</db:para>
</db:section>
<db:section xml:id="textColor-prop">
<db:title>textColor : color</db:title>
<db:fieldsynopsis>
<db:type>color</db:type>
<db:varname>textColor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the text color.</db:para>
</db:section>
<db:section xml:id="validator-prop">
<db:title>validator : Validator</db:title>
<db:fieldsynopsis>
<db:type>Validator</db:type>
<db:varname>validator</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Allows you to set a validator on the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>. When a validator is set, the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> will only accept input which leaves the text property in an intermediate state. The accepted signal will only be sent if the text is in an acceptable state when enter is pressed.</db:para>
<db:para>Currently supported validators are <db:link xlink:href="qml-qtquick-intvalidator.xml">IntValidator</db:link>, <db:link xlink:href="qml-qtquick-doublevalidator.xml">DoubleValidator</db:link>, and <db:link xlink:href="qml-qtquick-regexpvalidator.xml">RegExpValidator</db:link>. An example of using validators is shown below, which allows input of integers between 11 and 31 into the text input:</db:para>
<db:programlisting language="cpp">import QtQuick 2.2
import QtQuick.Controls 1.2

TextField {
    validator: IntValidator {bottom: 11; top: 31;}
    focus: true
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#acceptableInput-prop">acceptableInput</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#inputMask-prop">inputMask</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#accepted-signal">accepted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verticalAlignment-prop">
<db:title>verticalAlignment : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>verticalAlignment</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the alignment of the text within the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> item's height.</db:para>
<db:para>The possible alignment values are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.AlignTop</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.AlignBottom</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>.AlignVCenter (default).</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="accepted-signal">
<db:title>accepted()</db:title>
<db:para>This signal is emitted when the Return or Enter key is pressed. Note that if there is a <db:link xlink:href="qml-qtquick-controls-textfield.xml#validator-prop">validator</db:link> or <db:link xlink:href="qml-qtquick-controls-textfield.xml#inputMask-prop">inputMask</db:link> set on the text field, the signal will only be emitted if the input is in an acceptable state.</db:para>
<db:para>The corresponding handler is <db:code>onAccepted</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onAccepted</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="editingFinished-signal">
<db:title>[since QtQuick.Controls 1.1] editingFinished()</db:title>
<db:para>This signal is emitted when the Return or Enter key is pressed or the text field loses focus. Note that if there is a validator or <db:link xlink:href="qml-qtquick-controls-textfield.xml#inputMask-prop">inputMask</db:link> set on the text field and enter/return is pressed, this signal will only be emitted if the input follows the <db:link xlink:href="qml-qtquick-controls-textfield.xml#inputMask-prop">inputMask</db:link> and the validator returns an acceptable state.</db:para>
<db:para>The corresponding handler is <db:code>onEditingFinished</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onEditingFinished</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 1.1.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="copy-method">
<db:title>void copy()</db:title>
<db:para>Copies the currently selected text to the system clipboard.</db:para>
</db:section>
<db:section xml:id="cut-method">
<db:title>void cut()</db:title>
<db:para>Moves the currently selected text to the system clipboard.</db:para>
</db:section>
<db:section xml:id="deselect-method">
<db:title>void deselect()</db:title>
<db:para>Removes active text selection.</db:para>
</db:section>
<db:section xml:id="getText-method">
<db:title>string getText(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Removes the section of text that is between the <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> positions from the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link>.</db:para>
</db:section>
<db:section xml:id="insert-method">
<db:title>void insert(int <db:emphasis>position</db:emphasis>, string <db:emphasis>text</db:emphasis>)</db:title>
<db:para>Inserts <db:code role="parameter">text</db:code> into the <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> at <db:code role="parameter">position</db:code>.</db:para>
</db:section>
<db:section xml:id="isRightToLeft-method">
<db:title>bool isRightToLeft(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the natural reading direction of the editor text found between positions <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> is right to left.</db:para>
</db:section>
<db:section xml:id="paste-method">
<db:title>void paste()</db:title>
<db:para>Replaces the currently selected text by the contents of the system clipboard.</db:para>
</db:section>
<db:section xml:id="redo-method">
<db:title>void redo()</db:title>
<db:para>Performs the last operation if redo is <db:link xlink:href="qml-qtquick-controls-textfield.xml#canRedo-prop">available</db:link>.</db:para>
</db:section>
<db:section xml:id="remove-method">
<db:title>[since QtQuick.Controls 1.4] void remove(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Removes the section of text that is between the start and end positions.</db:para>
<db:para>This method was introduced in QtQuick.Controls 1.4.</db:para>
</db:section>
<db:section xml:id="select-method">
<db:title>void select(int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>Causes the text from <db:code role="parameter">start</db:code> to <db:code role="parameter">end</db:code> to be selected.</db:para>
<db:para>If either start or end is out of range, the selection is not changed.</db:para>
<db:para>After calling select, <db:link xlink:href="qml-qtquick-controls-textfield.xml#selectionStart-prop">selectionStart</db:link> will become the lesser and <db:link xlink:href="qml-qtquick-controls-textfield.xml#selectionEnd-prop">selectionEnd</db:link> will become the greater (regardless of the order passed to this method).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#selectionStart-prop">selectionStart</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-textfield.xml#selectionEnd-prop">selectionEnd</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectAll-method">
<db:title>void selectAll()</db:title>
<db:para>Causes all text to be selected.</db:para>
</db:section>
<db:section xml:id="selectWord-method">
<db:title>void selectWord()</db:title>
<db:para>Causes the word closest to the current cursor position to be selected.</db:para>
</db:section>
<db:section xml:id="undo-method">
<db:title>void undo()</db:title>
<db:para>Reverts the last operation if undo is <db:link xlink:href="qml-qtquick-controls-textfield.xml#canUndo-prop">available</db:link>. undo() deselects any current selection and updates the selection start to the current cursor position.</db:para>
</db:section>
</db:section>
</db:article>
