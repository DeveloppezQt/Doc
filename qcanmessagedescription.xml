<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCanMessageDescription Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcanmessagedescription.xml">QCanMessageDescription</db:link> class describes the rules to process a CAN message and represent it in an application-defined format.</db:para>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCanMessageDescription</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS SerialBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::SerialBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A CAN message is basically a <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link>. The description of a CAN message includes the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Message ID.</db:para>
</db:listitem>
<db:listitem>
<db:para>Message name.</db:para>
</db:listitem>
<db:listitem>
<db:para>Message length in bytes.</db:para>
</db:listitem>
<db:listitem>
<db:para>Source of the message (transmitter).</db:para>
</db:listitem>
<db:listitem>
<db:para>Description of signals in the message.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:link xlink:href="qcanmessagedescription.xml">QCanMessageDescription</db:link> class provides methods to control all those parameters.</db:para>
<db:section xml:id="message-id">
<db:title>Message ID</db:title>
<db:para>The message ID is a unique identifier, which is used to select the proper message description when decoding the incoming <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> or encoding a <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> based on the provided data.</db:para>
<db:para>See <db:link xlink:href="qcanuniqueiddescription.xml">QCanUniqueIdDescription</db:link> documentation for more details on the unique identifier description.</db:para>
</db:section>
<db:section xml:id="signal-description">
<db:title>Signal Description</db:title>
<db:para>The signal description is represented by the <db:link xlink:href="qcansignaldescription.xml">QCanSignalDescription</db:link> class. The <db:link xlink:href="qcanmessagedescription.xml">QCanMessageDescription</db:link> class only provides a list of signals that belong to the message.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml">QCanSignalDescription</db:link></db:member>
<db:member><db:link xlink:href="qcanuniqueiddescription.xml">QCanUniqueIdDescription</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCanMessageDescription">
<db:title>QCanMessageDescription::QCanMessageDescription()</db:title>
<db:constructorsynopsis>
<db:methodname>QCanMessageDescription</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanMessageDescription()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an empty message description.</db:para>
</db:section>
<db:section xml:id="QCanMessageDescription-1">
<db:title>QCanMessageDescription::QCanMessageDescription(const QCanMessageDescription &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCanMessageDescription</db:methodname>
<db:methodparam>
<db:type>const QCanMessageDescription &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanMessageDescription(const QCanMessageDescription &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a message description with the values copied from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QCanMessageDescription-2">
<db:title>QCanMessageDescription::QCanMessageDescription(QCanMessageDescription &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCanMessageDescription</db:methodname>
<db:methodparam>
<db:type>QCanMessageDescription &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanMessageDescription(QCanMessageDescription &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a message description by moving from <db:code role="parameter">other</db:code>.</db:para>
<db:note>
<db:para>The moved-from <db:link xlink:href="qcanmessagedescription.xml">QCanMessageDescription</db:link> object can only be destroyed or assigned to. The effect of calling other functions than the destructor or one of the assignment operators is undefined.</db:para>
</db:note>
</db:section>
<db:section xml:id="dtor.QCanMessageDescription">
<db:title>QCanMessageDescription::~QCanMessageDescription()</db:title>
<db:destructorsynopsis>
<db:methodname>~QCanMessageDescription</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCanMessageDescription()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this message description.</db:para>
</db:section>
<db:section xml:id="addSignalDescription">
<db:title>void QCanMessageDescription::addSignalDescription(const QCanSignalDescription &amp;<db:emphasis>description</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addSignalDescription</db:methodname>
<db:methodparam>
<db:type>const QCanSignalDescription &amp;</db:type>
<db:parameter>description</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addSignalDescription(const QCanSignalDescription &amp;description)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a new signal description <db:code role="parameter">description</db:code> to this message description.</db:para>
<db:para>If the message description already has a signal description for a signal with the same name, it is overwritten.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#signalDescriptions">signalDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#signalDescriptionForName">signalDescriptionForName</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#setSignalDescriptions">setSignalDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#clearSignalDescriptions">clearSignalDescriptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearSignalDescriptions">
<db:title>void QCanMessageDescription::clearSignalDescriptions()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearSignalDescriptions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearSignalDescriptions()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears all the signal descriptions of this message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#signalDescriptions">signalDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#signalDescriptionForName">signalDescriptionForName</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#addSignalDescription">addSignalDescription</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#setSignalDescriptions">setSignalDescriptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="comment">
<db:title>QString QCanMessageDescription::comment() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>comment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString comment() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the comment for the message.</db:para>
<db:para>This parameter is introduced only for extra description. It's not used during message encoding or decoding.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#setComment">setComment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QCanMessageDescription::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> when the message description is valid and <db:code>false</db:code> otherwise.</db:para>
<db:para>A valid message description <db:emphasis>must</db:emphasis> have at least one signal description. All signal descriptions <db:emphasis>must</db:emphasis> be valid as well.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#signalDescriptions">signalDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#isValid">QCanSignalDescription::isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QString QCanMessageDescription::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the CAN message.</db:para>
<db:para>This parameter is introduced only for extra description. It's not used during message encoding or decoding.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#setName">setName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setComment">
<db:title>void QCanMessageDescription::setComment(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setComment</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setComment(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the comment for the message to <db:code role="parameter">text</db:code>.</db:para>
<db:para>This parameter is introduced only for extra description. It's not used during message encoding or decoding.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#comment">comment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setName">
<db:title>void QCanMessageDescription::setName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the name of the CAN message to <db:code role="parameter">name</db:code>.</db:para>
<db:para>This parameter is introduced only for extra description. It's not used during message encoding or decoding.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSignalDescriptions">
<db:title>void QCanMessageDescription::setSignalDescriptions(const QList&lt;QCanSignalDescription&gt; &amp;<db:emphasis>descriptions</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSignalDescriptions</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QCanSignalDescription&gt; &amp;</db:type>
<db:parameter>descriptions</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSignalDescriptions(const QList&lt;QCanSignalDescription&gt; &amp;descriptions)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the descriptions of the signals belonging to this message description to <db:code role="parameter">descriptions</db:code>.</db:para>
<db:note>
<db:para>Message description <db:emphasis>must</db:emphasis> have signal descriptions with unique signal names, so if the <db:code role="parameter">descriptions</db:code> list contains entries with duplicated names, only the last entry will be added.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#signalDescriptions">signalDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#signalDescriptionForName">signalDescriptionForName</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#addSignalDescription">addSignalDescription</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#clearSignalDescriptions">clearSignalDescriptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSize">
<db:title>void QCanMessageDescription::setSize(quint8 <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSize</db:methodname>
<db:methodparam>
<db:type>quint8</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSize(quint8 size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the size in bytes of the CAN message to <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransmitter">
<db:title>void QCanMessageDescription::setTransmitter(const QString &amp;<db:emphasis>transmitter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransmitter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>transmitter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransmitter(const QString &amp;transmitter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the transmitter node of the message to <db:code role="parameter">transmitter</db:code>.</db:para>
<db:para>This parameter is introduced only for extra description. It's not used during message encoding or decoding.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#transmitter">transmitter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniqueId">
<db:title>void QCanMessageDescription::setUniqueId(QtCanBus::UniqueId <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniqueId</db:methodname>
<db:methodparam>
<db:type>QtCanBus::UniqueId</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniqueId(QtCanBus::UniqueId id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the unique identifier of the CAN message to <db:code role="parameter">id</db:code>.</db:para>
<db:para>See the <db:link xlink:href="qcanmessagedescription.xml#message-id">Message ID</db:link> section for more information about the unique identifier.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#uniqueId">uniqueId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signalDescriptionForName">
<db:title>QCanSignalDescription QCanMessageDescription::signalDescriptionForName(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCanSignalDescription</db:type>
<db:methodname>signalDescriptionForName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanSignalDescription signalDescriptionForName(const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the signal description of a signal with the name <db:code role="parameter">name</db:code>.</db:para>
<db:para>If the message description does not have such signal description, a default-constructed <db:link xlink:href="qcansignaldescription.xml">QCanSignalDescription</db:link> object is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#signalDescriptions">signalDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#addSignalDescription">addSignalDescription</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#setSignalDescriptions">setSignalDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#clearSignalDescriptions">clearSignalDescriptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signalDescriptions">
<db:title>QList&lt;QCanSignalDescription&gt; QCanMessageDescription::signalDescriptions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QCanSignalDescription&gt;</db:type>
<db:methodname>signalDescriptions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QCanSignalDescription&gt; signalDescriptions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of signal descriptions that belong to this message description.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#signalDescriptionForName">signalDescriptionForName</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#addSignalDescription">addSignalDescription</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#setSignalDescriptions">setSignalDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanmessagedescription.xml#clearSignalDescriptions">clearSignalDescriptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>quint8 QCanMessageDescription::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint8</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint8 size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size in bytes of the CAN message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#setSize">setSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transmitter">
<db:title>QString QCanMessageDescription::transmitter() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>transmitter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString transmitter() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the transmitter node of the message.</db:para>
<db:para>This parameter is introduced only for extra description. It's not used during message encoding or decoding.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#setTransmitter">setTransmitter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uniqueId">
<db:title>QtCanBus::UniqueId QCanMessageDescription::uniqueId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QtCanBus::UniqueId</db:type>
<db:methodname>uniqueId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QtCanBus::UniqueId uniqueId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the unique identifier of the CAN message.</db:para>
<db:para>See the <db:link xlink:href="qcanmessagedescription.xml#message-id">Message ID</db:link> section for more information about the unique identifier.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml#setUniqueId">setUniqueId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QCanMessageDescription &amp;QCanMessageDescription::operator=(const QCanMessageDescription &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCanMessageDescription &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QCanMessageDescription &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanMessageDescription &amp; operator=(const QCanMessageDescription &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the values from <db:code role="parameter">other</db:code> to this message description.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QCanMessageDescription &amp;QCanMessageDescription::operator=(QCanMessageDescription &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCanMessageDescription &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QCanMessageDescription &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanMessageDescription &amp; operator=(QCanMessageDescription &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns the values from <db:code role="parameter">other</db:code> to this message description.</db:para>
<db:note>
<db:para>The moved-from <db:link xlink:href="qcanmessagedescription.xml">QCanMessageDescription</db:link> object can only be destroyed or assigned to. The effect of calling other functions than the destructor or one of the assignment operators is undefined.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
