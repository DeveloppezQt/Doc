<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using the Qt SCXML Compiler (qscxmlc)</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SCXML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Qt SCXML Compiler, <db:code>qscxmlc</db:code>, compiles state chart XML (.scxml) files to C++ source files.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The <db:code>qscxmlc</db:code> tool reads an .scxml file and produces C++ source and header files, containing a class that implements a state machine as defined in SCXML.</db:para>
<db:section xml:id="usage">
<db:title>Usage</db:title>
<db:para>The <db:code>qscxmlc</db:code> tool is invoked automatically if the project is linked against the <db:code>scxml</db:code> library in the project file, and the <db:code>.scxml</db:code> file to use is specified using the special build directives <db:code>STATECHARTS</db:code> or qt6_add_statecharts.</db:para>
<db:para>When using cmake:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Scxml)
target_link_libraries(mytarget PRIVATE Qt6::Scxml)
</db:programlisting>
<db:programlisting language="cpp">qt6_add_statecharts(mytarget
    MyStatemachine.scxml
)
</db:programlisting>
<db:para>When using qmake:</db:para>
<db:programlisting language="cpp">QT += scxml
</db:programlisting>
<db:programlisting language="cpp">STATECHARTS = MyStatemachine.scxml
</db:programlisting>
<db:para>With above definitions, <db:code>qmake</db:code> or <db:code>cmake</db:code> invokes <db:code>qscxmlc</db:code> to generate MyStatemachine.h and MyStatemachine.cpp, and adds them appropriately to the project as headers and sources.</db:para>
<db:para>By default, the name of the generated class that implements the state machine corresponds with the <db:emphasis>name</db:emphasis> attribute of the <db:code>&lt;scxml&gt;</db:code> root element.</db:para>
<db:para>The <db:code>qscxmlc</db:code> tool can also be invoked manually and the resulting header and source files can be used as regular source files in a project. When using these source files as part of a <db:code>cmake</db:code> project, one must additionally disable automatic moc in the CMakeLists.txt file as illustrated by this example:</db:para>
<db:programlisting language="cpp">set_source_files_properties(statemachine.h PROPERTIES SKIP_AUTOMOC TRUE)
</db:programlisting>
<db:para>If you omit this, you will see duplicate symbol errors during compilation.</db:para>
</db:section>
<db:section xml:id="command-line-options">
<db:title>Command-Line Options</db:title>
<db:para>The <db:code>qscxmlc</db:code> tool supports the following command-line options:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>--namespace &lt;namespace&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>Put the generated class(es) in the specified namespace.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-o &lt;base/out/name&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>The base name of the output files. This can include a path. If none is specified, the basename of the input file is used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--header &lt;header/out&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>The name of the output header file. If none is specified, .h is added to the base name.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--impl &lt;cpp/out&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>The name of the output header file. If none is specified, .cpp is added to the base name.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--classname &lt;StateMachineClassName&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>The class name of the generated state machine. If none is specified, the value of the name attribute of the &lt;scxml&gt; tag is taken. If that attribute is not specified either, the basename (excluding path) is taken from the input file name.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>--statemethods</db:code></db:para>
</db:td>
<db:td>
<db:para>Generate extra accessor and signal methods for states. This way you can connect to state changes with plain <db:link xlink:href="qobject.xml#connect">QObject::connect</db:link>() and directly call a method to find out if a state is currently active.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>qmake</db:code> and <db:code>CMake</db:code> project files support the following options:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>QSCXMLC_DIR|OUTPUT_DIRECTORY &lt;directory&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>QSCXMLC_DIR</db:code> (qmake) or <db:code>OUTPUT_DIRECTORY</db:code> (cmake) specifies the directory for the output files. OUTPUT_DIR (cmake) has been deprecated.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>QSCXMLC_NAMESPACE|NAMESPACE &lt;namespace&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>QSCXMLC_NAMESPACE</db:code> (qmake) or <db:code>NAMESPACE</db:code> (cmake) specifies the namespace for the generated classes.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>QSCXMLC_ARGUMENTS|OPTIONS &lt;options&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>QSCXMLC_ARGUMENTS</db:code> (qmake) or <db:code>OPTIONS</db:code> (cmake) allows specifying additional options for the <db:code>qscxmlc</db:code> compiler. QSCXMLC_ARGUMENTS with cmake has been deprecated.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:article>
