<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Insight - Qt Quick Application</db:title>
<db:productname>QtInsightTracker</db:productname>
<db:edition>Qt Insight Tracker | Commercial</db:edition>
<db:titleabbrev>Qt Insight Tracker Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt Quick application using Qt Insight Tracker.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/coffee_machine_overview.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
<db:para>The example shows how to integrate Qt Insight Tracker to your Qt Quick application.</db:para>
<db:para>In the example, InsighTracker singleton is configured and then enabled.</db:para>
<db:programlisting language="qml">InsightConfiguration {
    syncInterval: 60
}

Component.onCompleted: InsightTracker.enabled = true;
</db:programlisting>
<db:para>The example is using states to control the UI layouts. Qt Insight can be then easily used to track the transitions in the UI flow either from QML:</db:para>
<db:programlisting language="qml">    onStateChanged: InsightTracker.transition(applicationFlow.state);
</db:programlisting>
<db:para>or from C++:</db:para>
<db:programlisting language="cpp">tracker.transition(&quot;initial&quot;);
</db:programlisting>
<db:para>Button presses can also be tracked.</db:para>
<db:programlisting language="qml">    MouseArea {
        anchors.fill: parent
        onClicked: {
            root.clicked()
            InsightTracker.interaction(root.text, root.InsightCategory.category);
            InsightTracker.dimensionData(&quot;CoffeeType&quot;, root.text);
        }
        onPressed: {
            glow.visible = true
            animation1.start()
            animation2.start()
        }
    }
</db:programlisting>
<db:para>The example above also sends custom dimension <db:code>CoffeeType</db:code> that can be used in the Insight Console to filter sessions that selected specific coffee variety.</db:para>
<db:para>An attached property <db:link xlink:href="qml-qtinsighttracker-insightcategory.xml">InsightCategory</db:link> can be used in the QML components. It can be used to filter the tracked events.</db:para>
<db:programlisting language="qml">        CoffeeButton {
            id: cappuccinoButton
            text: &quot;Cappuccino&quot;
            InsightCategory.category: &quot;coffee&quot;
        }
</db:programlisting>
<db:para>Tracked events are always associated with a session, which is always new for each application launch. A new session can also be created if needed. In the example, this is done when the UI is reset back to the initial state.</db:para>
<db:programlisting language="qml">        ScriptAction {
            script: InsightTracker.startNewSession();
        }
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtnetworkauth.git/tree/examples/insighttracker/coffee?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
