<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPrinter Class</db:title>
<db:productname>QtPrintSupport</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Print Support Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qprinter.xml">QPrinter</db:link> class is a paint device that paints on a printer.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPrinter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS PrintSupport)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::PrintSupport)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += printsupport</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpagedpaintdevice.xml" xlink:role="class">QPagedPaintDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPrinter is part of <db:simplelist><db:member><db:link xlink:href="printing.xml">Printer and Printing APIs</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This device represents a series of pages of printed output, and is used in almost exactly the same way as other paint devices such as <db:link xlink:href="qwidget.xml">QWidget</db:link> and <db:link xlink:href="qpixmap.xml">QPixmap</db:link>. A set of additional functions are provided to manage device-specific features, such as orientation and resolution, and to step through the pages in a document as it is generated.</db:para>
<db:para>When printing directly to a printer on Windows or macOS, <db:link xlink:href="qprinter.xml">QPrinter</db:link> uses the built-in printer drivers. On X11, <db:link xlink:href="qprinter.xml">QPrinter</db:link> uses the <db:link xlink:href="http://www.cups.org/">Common Unix Printing System (CUPS)</db:link> to send PDF output to the printer. As an alternative, the <db:link xlink:href="qprinter.xml#printProgram">printProgram</db:link>() function can be used to specify the command or utility to use instead of the system default.</db:para>
<db:para>Note that setting parameters like paper size and resolution on an invalid printer is undefined. You can use <db:link xlink:href="qprinter.xml#isValid">QPrinter::isValid</db:link>() to verify this before changing any parameters.</db:para>
<db:para><db:link xlink:href="qprinter.xml">QPrinter</db:link> supports a number of parameters, most of which can be changed by the end user through a <db:link xlink:href="qprintdialog.xml">print dialog</db:link>. In general, <db:link xlink:href="qprinter.xml">QPrinter</db:link> passes these functions onto the underlying <db:link xlink:href="qprintengine.xml">QPrintEngine</db:link>.</db:para>
<db:para>The most important parameters are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qpagedpaintdevice.xml#setPageLayout">setPageLayout</db:link>() tells <db:link xlink:href="qprinter.xml">QPrinter</db:link> which page orientation to use, and what size to expect from the printer.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprinter.xml#setResolution">setResolution</db:link>() tells <db:link xlink:href="qprinter.xml">QPrinter</db:link> what resolution you wish the printer to provide, in dots per inch (DPI).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprinter.xml#setFullPage">setFullPage</db:link>() tells <db:link xlink:href="qprinter.xml">QPrinter</db:link> whether you want to deal with the full page or just with the part the printer can draw on.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprinter.xml#setCopyCount">setCopyCount</db:link>() tells <db:link xlink:href="qprinter.xml">QPrinter</db:link> how many copies of the document it should print.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Many of these functions can only be called before the actual printing begins (i.e., before <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>() is called). This usually makes sense because, for example, it's not possible to change the number of copies when you are halfway through printing. There are also some settings that the user sets (through the printer dialog) and that applications are expected to obey. See <db:link xlink:href="qabstractprintdialog.xml">QAbstractPrintDialog</db:link>'s documentation for more details.</db:para>
<db:para>When <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>() is called, the <db:link xlink:href="qprinter.xml">QPrinter</db:link> it operates on is prepared for a new page, enabling the <db:link xlink:href="qpainter.xml">QPainter</db:link> to be used immediately to paint the first page in a document. Once the first page has been painted, <db:link xlink:href="qprinter.xml#newPage">newPage</db:link>() can be called to request a new blank page to paint on, or <db:link xlink:href="qpainter.xml#end">QPainter::end</db:link>() can be called to finish printing. The second page and all following pages are prepared using a call to <db:link xlink:href="qprinter.xml#newPage">newPage</db:link>() before they are painted.</db:para>
<db:para>The first page in a document does not need to be preceded by a call to <db:link xlink:href="qprinter.xml#newPage">newPage</db:link>(). You only need to calling <db:link xlink:href="qprinter.xml#newPage">newPage</db:link>() after <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>() if you need to insert a blank page at the beginning of a printed document. Similarly, calling <db:link xlink:href="qprinter.xml#newPage">newPage</db:link>() after the last page in a document is painted will result in a trailing blank page appended to the end of the printed document.</db:para>
<db:para>If you want to abort the print job, <db:link xlink:href="qprinter.xml#abort">abort</db:link>() will try its best to stop printing. It may cancel the entire job or just part of it.</db:para>
<db:para>Since <db:link xlink:href="qprinter.xml">QPrinter</db:link> can print to any <db:link xlink:href="qprintengine.xml">QPrintEngine</db:link> subclass, it is possible to extend printing support to cover new types of printing subsystem by subclassing <db:link xlink:href="qprintengine.xml">QPrintEngine</db:link> and reimplementing its interface.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprintdialog.xml">QPrintDialog</db:link></db:member>
<db:member><db:link xlink:href="qtprintsupport-index.xml">Qt Print Support</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ColorMode-enum">
<db:title>enum QPrinter::ColorMode</db:title>
<db:enumsynopsis>
<db:enumname>ColorMode</db:enumname>
<db:enumitem>
<db:enumidentifier>GrayScale</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Color</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type is used to indicate whether <db:link xlink:href="qprinter.xml">QPrinter</db:link> should print in color or not.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Color</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>print in color if available, otherwise in grayscale.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::GrayScale</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>print in grayscale, even on color printers.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="DuplexMode-enum">
<db:title>enum QPrinter::DuplexMode</db:title>
<db:enumsynopsis>
<db:enumname>DuplexMode</db:enumname>
<db:enumitem>
<db:enumidentifier>DuplexNone</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DuplexAuto</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DuplexLongSide</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DuplexShortSide</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is used to indicate whether printing will occur on one or both sides of each sheet of paper (simplex or duplex printing).</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::DuplexNone</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Single sided (simplex) printing only.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::DuplexAuto</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The printer's default setting is used to determine whether duplex printing is used.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::DuplexLongSide</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Both sides of each sheet of paper are used for printing. The paper is turned over its longest edge before the second side is printed</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::DuplexShortSide</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Both sides of each sheet of paper are used for printing. The paper is turned over its shortest edge before the second side is printed</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="OutputFormat-enum">
<db:title>enum QPrinter::OutputFormat</db:title>
<db:enumsynopsis>
<db:enumname>OutputFormat</db:enumname>
<db:enumitem>
<db:enumidentifier>NativeFormat</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PdfFormat</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The OutputFormat enum is used to describe the format <db:link xlink:href="qprinter.xml">QPrinter</db:link> should use for printing.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::NativeFormat</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qprinter.xml">QPrinter</db:link> will print output using a method defined by the platform it is running on. This mode is the default when printing directly to a printer.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::PdfFormat</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qprinter.xml">QPrinter</db:link> will generate its output as a searchable PDF file. This mode is the default when printing to a file.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#outputFormat">outputFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#setOutputFormat">setOutputFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#setOutputFileName">setOutputFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="PageOrder-enum">
<db:title>enum QPrinter::PageOrder</db:title>
<db:enumsynopsis>
<db:enumname>PageOrder</db:enumname>
<db:enumitem>
<db:enumidentifier>FirstPageFirst</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LastPageFirst</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type is used by <db:link xlink:href="qprinter.xml">QPrinter</db:link> to tell the application program how to print.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::FirstPageFirst</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>the lowest-numbered page should be printed first.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::LastPageFirst</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>the highest-numbered page should be printed first.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PaperSource-enum">
<db:title>enum QPrinter::PaperSource</db:title>
<db:enumsynopsis>
<db:enumname>PaperSource</db:enumname>
<db:enumitem>
<db:enumidentifier>OnlyOne</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Lower</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Middle</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Manual</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Envelope</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EnvelopeManual</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Auto</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Tractor</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SmallFormat</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LargeFormat</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LargeCapacity</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Cassette</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FormSource</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MaxPageSource</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CustomSource</db:enumidentifier>
<db:enumvalue>14</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LastPaperSource</db:enumidentifier>
<db:enumvalue>CustomSource</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Upper</db:enumidentifier>
<db:enumvalue>OnlyOne</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type specifies what paper source <db:link xlink:href="qprinter.xml">QPrinter</db:link> is to use. <db:link xlink:href="qprinter.xml">QPrinter</db:link> does not check that the paper source is available; it just uses this information to try and set the paper source. Whether it will set the paper source depends on whether the printer has that particular source.</db:para>
<db:warning>
<db:para>This is currently only implemented for Windows.</db:para>
</db:warning>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Auto</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Cassette</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Envelope</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::EnvelopeManual</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::FormSource</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::LargeCapacity</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::LargeFormat</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Lower</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::MaxPageSource</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Deprecated, use LastPaperSource instead</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Middle</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Manual</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::OnlyOne</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Tractor</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::SmallFormat</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Upper</db:code></db:para>
</db:td>
<db:td><db:code>OnlyOne</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::CustomSource</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>A PaperSource defined by the printer that is unknown to Qt</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::LastPaperSource</db:code></db:para>
</db:td>
<db:td><db:code>CustomSource</db:code></db:td>
<db:td>
<db:para>The highest valid PaperSource value, currently CustomSource</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PrintRange-enum">
<db:title>enum QPrinter::PrintRange</db:title>
<db:enumsynopsis>
<db:enumname>PrintRange</db:enumname>
<db:enumitem>
<db:enumidentifier>AllPages</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Selection</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PageRange</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CurrentPage</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Used to specify the print range selection option.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::AllPages</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>All pages should be printed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Selection</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Only the selection should be printed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::PageRange</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The specified page range should be printed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::CurrentPage</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Only the current page should be printed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setPrintRange">setPrintRange</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#printRange">printRange</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractprintdialog.xml#PrintRange-enum">QAbstractPrintDialog::PrintRange</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="PrinterMode-enum">
<db:title>enum QPrinter::PrinterMode</db:title>
<db:enumsynopsis>
<db:enumname>PrinterMode</db:enumname>
<db:enumitem>
<db:enumidentifier>ScreenResolution</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PrinterResolution</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HighResolution</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the mode the printer should work in. It basically presets a certain resolution and working mode.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::ScreenResolution</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Sets the resolution of the print device to the screen resolution. This has the big advantage that the results obtained when painting on the printer will match more or less exactly the visible output on the screen. It is the easiest to use, as font metrics on the screen and on the printer are the same. This is the default value. ScreenResolution will produce a lower quality output than HighResolution and should only be used for drafts.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::PrinterResolution</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This value is deprecated. It is equivalent to ScreenResolution on Unix and HighResolution on Windows and Mac. Due to the difference between ScreenResolution and HighResolution, use of this value may lead to non-portable printer code.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::HighResolution</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>On Windows, sets the printer resolution to that defined for the printer in use. For PDF printing, sets the resolution of the PDF driver to 1200 dpi.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>When rendering text on a <db:link xlink:href="qprinter.xml">QPrinter</db:link> device, it is important to realize that the size of text, when specified in points, is independent of the resolution specified for the device itself. Therefore, it may be useful to specify the font size in pixels when combining text with graphics to ensure that their relative sizes are what you expect.</db:para>
</db:note>
</db:section>
<db:section xml:id="PrinterState-enum">
<db:title>enum QPrinter::PrinterState</db:title>
<db:enumsynopsis>
<db:enumname>PrinterState</db:enumname>
<db:enumitem>
<db:enumidentifier>Idle</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Active</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Aborted</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Error</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Idle</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Active</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Aborted</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Error</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Unit-enum">
<db:title>enum QPrinter::Unit</db:title>
<db:enumsynopsis>
<db:enumname>Unit</db:enumname>
<db:enumitem>
<db:enumidentifier>Millimeter</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Point</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Inch</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Pica</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Didot</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Cicero</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DevicePixel</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type is used to specify the measurement unit for page and paper sizes.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Millimeter</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Point</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Inch</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Pica</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Didot</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::Cicero</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprinter.xml">QPrinter</db:link></db:emphasis>::DevicePixel</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
</db:tr>
</db:informaltable>
<db:para>Note the difference between Point and DevicePixel. The Point unit is defined to be 1/72th of an inch, while the DevicePixel unit is resolution dependent and is based on the actual pixels, or dots, on the printer.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPrinter">
<db:title>[explicit] QPrinter::QPrinter(QPrinter::PrinterMode <db:emphasis>mode</db:emphasis> = ScreenResolution)</db:title>
<db:constructorsynopsis>
<db:methodname>QPrinter</db:methodname>
<db:methodparam>
<db:type>QPrinter::PrinterMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>ScreenResolution</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPrinter(QPrinter::PrinterMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new printer object with the given <db:code role="parameter">mode</db:code>.</db:para>
</db:section>
<db:section xml:id="QPrinter-1">
<db:title>[explicit] QPrinter::QPrinter(const QPrinterInfo &amp;<db:emphasis>printer</db:emphasis>, QPrinter::PrinterMode <db:emphasis>mode</db:emphasis> = ScreenResolution)</db:title>
<db:constructorsynopsis>
<db:methodname>QPrinter</db:methodname>
<db:methodparam>
<db:type>const QPrinterInfo &amp;</db:type>
<db:parameter>printer</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPrinter::PrinterMode</db:type>
<db:parameter>mode</db:parameter>
<db:initializer>ScreenResolution</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPrinter(const QPrinterInfo &amp;printer, QPrinter::PrinterMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new printer object with the given <db:code role="parameter">printer</db:code> and <db:code role="parameter">mode</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPrinter">
<db:title>[virtual] QPrinter::~QPrinter()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPrinter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPrinter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the printer object and frees any allocated resources. If the printer is destroyed while a print job is in progress this may or may not affect the print job.</db:para>
</db:section>
<db:section xml:id="abort">
<db:title>bool QPrinter::abort()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>abort</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool abort()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Aborts the current print run. Returns <db:code>true</db:code> if the print run was successfully aborted and <db:link xlink:href="qprinter.xml#printerState">printerState</db:link>() will return <db:link xlink:href="qprinter.xml#PrinterState-enum">QPrinter::Aborted</db:link>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>It is not always possible to abort a print job. For example, all the data has gone to the printer but the printer cannot or will not cancel the job when asked to.</db:para>
</db:section>
<db:section xml:id="collateCopies">
<db:title>bool QPrinter::collateCopies() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>collateCopies</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool collateCopies() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if collation is turned on when multiple copies is selected. Returns <db:code>false</db:code> if it is turned off when multiple copies is selected. When collating is turned off the printing of each individual page will be repeated the numCopies() amount before the next page is started. With collating turned on all pages are printed before the next copy of those pages is started.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setCollateCopies">setCollateCopies</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="colorMode">
<db:title>QPrinter::ColorMode QPrinter::colorMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPrinter::ColorMode</db:type>
<db:methodname>colorMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPrinter::ColorMode colorMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current color mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setColorMode">setColorMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copyCount">
<db:title>int QPrinter::copyCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>copyCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int copyCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of copies that will be printed. The default value is 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setCopyCount">setCopyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#supportsMultipleCopies">supportsMultipleCopies</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="creator">
<db:title>QString QPrinter::creator() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>creator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString creator() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the application that created the document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setCreator">setCreator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="docName">
<db:title>QString QPrinter::docName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>docName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString docName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the document name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setDocName">setDocName</db:link>()</db:member>
<db:member><db:link xlink:href="qprintengine.xml#PrintEnginePropertyKey-enum">QPrintEngine::PrintEnginePropertyKey</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="duplex">
<db:title>QPrinter::DuplexMode QPrinter::duplex() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPrinter::DuplexMode</db:type>
<db:methodname>duplex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPrinter::DuplexMode duplex() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current duplex mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setDuplex">setDuplex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fontEmbeddingEnabled">
<db:title>bool QPrinter::fontEmbeddingEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>fontEmbeddingEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool fontEmbeddingEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if font embedding is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setFontEmbeddingEnabled">setFontEmbeddingEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromPage">
<db:title>int QPrinter::fromPage() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>fromPage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int fromPage() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of the first page in a range of pages to be printed (the &quot;from page&quot; setting). Pages in a document are numbered according to the convention that the first page is page 1.</db:para>
<db:para>By default, this function returns a special value of 0, meaning that the &quot;from page&quot; setting is unset.</db:para>
<db:note>
<db:para>If fromPage() and <db:link xlink:href="qprinter.xml#toPage">toPage</db:link>() both return 0, this indicates that <db:emphasis>the whole document will be printed</db:emphasis>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setFromTo">setFromTo</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#toPage">toPage</db:link>()</db:member>
<db:member><db:link xlink:href="qpagedpaintdevice.xml#pageRanges">pageRanges</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fullPage">
<db:title>bool QPrinter::fullPage() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>fullPage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool fullPage() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the origin of the printer's coordinate system is at the corner of the page and false if it is at the edge of the printable area.</db:para>
<db:para>See <db:link xlink:href="qprinter.xml#setFullPage">setFullPage</db:link>() for details and caveats.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setFullPage">setFullPage</db:link>()</db:member>
<db:member><db:link xlink:href="qpagedpaintdevice.xml#pageLayout">QPagedPaintDevice::pageLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QPrinter::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the printer currently selected is a valid printer in the system, or a pure PDF printer; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>To detect other failures check the output of <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>() or <db:link xlink:href="qprinter.xml#newPage">QPrinter::newPage</db:link>().</db:para>
<db:programlisting language="cpp">    QPrinter printer;
    printer.setOutputFormat(QPrinter::PdfFormat);
    printer.setOutputFileName(&quot;/foobar/nonwritable.pdf&quot;);
    QPainter painter;
    if (! painter.begin(&amp;amp;printer)) { // failed to open file
        qWarning(&quot;failed to open file, is it writable?&quot;);
        return 1;
    }
    painter.drawText(10, 10, &quot;Test&quot;);
    if (! printer.newPage()) {
        qWarning(&quot;failed in flushing page to disk, disk full?&quot;);
        return 1;
    }
    painter.drawText(10, 10, &quot;Test 2&quot;);
    painter.end();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setPrinterName">setPrinterName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="newPage">
<db:title>[override virtual] bool QPrinter::newPage()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>newPage</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool newPage() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpagedpaintdevice.xml#newPage" role="function">QPagedPaintDevice::newPage()</db:link>.</db:para>
<db:para>Tells the printer to eject the current page and to continue printing on a new page. Returns <db:code>true</db:code> if this was successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Calling newPage() on an inactive <db:link xlink:href="qprinter.xml">QPrinter</db:link> object will always fail.</db:para>
</db:section>
<db:section xml:id="outputFileName">
<db:title>QString QPrinter::outputFileName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>outputFileName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString outputFileName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the output file. By default, this is an empty string (indicating that the printer shouldn't print to file).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setOutputFileName">setOutputFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qprintengine.xml#PrintEnginePropertyKey-enum">QPrintEngine::PrintEnginePropertyKey</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="outputFormat">
<db:title>QPrinter::OutputFormat QPrinter::outputFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPrinter::OutputFormat</db:type>
<db:methodname>outputFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPrinter::OutputFormat outputFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the output format for this printer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setOutputFormat">setOutputFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pageOrder">
<db:title>QPrinter::PageOrder QPrinter::pageOrder() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPrinter::PageOrder</db:type>
<db:methodname>pageOrder</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPrinter::PageOrder pageOrder() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current page order.</db:para>
<db:para>The default page order is <db:code>FirstPageFirst</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setPageOrder">setPageOrder</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pageRect">
<db:title>QRectF QPrinter::pageRect(QPrinter::Unit <db:emphasis>unit</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>pageRect</db:methodname>
<db:methodparam>
<db:type>QPrinter::Unit</db:type>
<db:parameter>unit</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF pageRect(QPrinter::Unit unit) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the page's rectangle in <db:code role="parameter">unit</db:code>; this is usually smaller than the <db:link xlink:href="qprinter.xml#paperRect">paperRect</db:link>() since the page normally has margins between its borders and the paper.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpagedpaintdevice.xml#pageLayout">QPagedPaintDevice::pageLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEngine">
<db:title>[override virtual] QPaintEngine *QPrinter::paintEngine() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPaintEngine *</db:type>
<db:methodname>paintEngine</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPaintEngine * paintEngine() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintdevice.xml#paintEngine" role="function">QPaintDevice::paintEngine() const</db:link>.</db:para>
<db:para>Returns the paint engine used by the printer.</db:para>
</db:section>
<db:section xml:id="paperRect">
<db:title>QRectF QPrinter::paperRect(QPrinter::Unit <db:emphasis>unit</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>paperRect</db:methodname>
<db:methodparam>
<db:type>QPrinter::Unit</db:type>
<db:parameter>unit</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF paperRect(QPrinter::Unit unit) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paper's rectangle in <db:code role="parameter">unit</db:code>; this is usually larger than the <db:link xlink:href="qprinter.xml#pageRect">pageRect</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#pageRect">pageRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paperSource">
<db:title>QPrinter::PaperSource QPrinter::paperSource() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPrinter::PaperSource</db:type>
<db:methodname>paperSource</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPrinter::PaperSource paperSource() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the printer's paper source. This is <db:code>Manual</db:code> or a printer tray or paper cassette.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setPaperSource">setPaperSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pdfVersion">
<db:title>[since 5.10] QPagedPaintDevice::PdfVersion QPrinter::pdfVersion() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPagedPaintDevice::PdfVersion</db:type>
<db:methodname>pdfVersion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPagedPaintDevice::PdfVersion pdfVersion() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the PDF version for this printer. The default is <db:code>PdfVersion_1_4</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setPdfVersion">setPdfVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="printEngine">
<db:title>QPrintEngine *QPrinter::printEngine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPrintEngine *</db:type>
<db:methodname>printEngine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPrintEngine * printEngine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the print engine used by the printer.</db:para>
</db:section>
<db:section xml:id="printProgram">
<db:title>QString QPrinter::printProgram() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>printProgram</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString printProgram() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the program that sends the print output to the printer.</db:para>
<db:para>The default is to return an empty string; meaning that <db:link xlink:href="qprinter.xml">QPrinter</db:link> will try to be smart in a system-dependent way. On X11 only, you can set it to something different to use a specific print program. On the other platforms, this returns an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setPrintProgram">setPrintProgram</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#setPrinterSelectionOption">setPrinterSelectionOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="printRange">
<db:title>QPrinter::PrintRange QPrinter::printRange() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPrinter::PrintRange</db:type>
<db:methodname>printRange</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPrinter::PrintRange printRange() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the page range of the <db:link xlink:href="qprinter.xml">QPrinter</db:link>. After the print setup dialog has been opened, this function returns the value selected by the user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setPrintRange">setPrintRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="printerName">
<db:title>QString QPrinter::printerName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>printerName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString printerName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the printer name. This value is initially set to the name of the default printer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setPrinterName">setPrinterName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="printerSelectionOption">
<db:title>QString QPrinter::printerSelectionOption() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>printerSelectionOption</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString printerSelectionOption() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the printer options selection string. This is useful only if the print command has been explicitly set.</db:para>
<db:para>The default value (an empty string) implies that the printer should be selected in a system-dependent manner.</db:para>
<db:para>Any other value implies that the given value should be used.</db:para>
<db:para>This function always returns an empty string on Windows and Mac.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setPrinterSelectionOption">setPrinterSelectionOption</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#setPrintProgram">setPrintProgram</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="printerState">
<db:title>QPrinter::PrinterState QPrinter::printerState() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPrinter::PrinterState</db:type>
<db:methodname>printerState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPrinter::PrinterState printerState() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current state of the printer. This may not always be accurate (for example if the printer doesn't have the capability of reporting its state to the operating system).</db:para>
</db:section>
<db:section xml:id="resolution">
<db:title>int QPrinter::resolution() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>resolution</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int resolution() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current assumed resolution of the printer, as set by <db:link xlink:href="qprinter.xml#setResolution">setResolution</db:link>() or by the printer driver.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setResolution">setResolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCollateCopies">
<db:title>void QPrinter::setCollateCopies(bool <db:emphasis>collate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCollateCopies</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>collate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCollateCopies(bool collate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the default value for collation checkbox when the print dialog appears. If <db:code role="parameter">collate</db:code> is true, it will enable setCollateCopiesEnabled(). The default value is false. This value will be changed by what the user presses in the print dialog.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#collateCopies">collateCopies</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColorMode">
<db:title>void QPrinter::setColorMode(QPrinter::ColorMode <db:emphasis>newColorMode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColorMode</db:methodname>
<db:methodparam>
<db:type>QPrinter::ColorMode</db:type>
<db:parameter>newColorMode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColorMode(QPrinter::ColorMode newColorMode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the printer's color mode to <db:code role="parameter">newColorMode</db:code>, which can be either <db:code>Color</db:code> or <db:code>GrayScale</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#colorMode">colorMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCopyCount">
<db:title>void QPrinter::setCopyCount(int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCopyCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCopyCount(int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the number of copies to be printed to <db:code role="parameter">count</db:code>.</db:para>
<db:para>The printer driver reads this setting and prints the specified number of copies.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#copyCount">copyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#supportsMultipleCopies">supportsMultipleCopies</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCreator">
<db:title>void QPrinter::setCreator(const QString &amp;<db:emphasis>creator</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCreator</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>creator</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCreator(const QString &amp;creator)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the name of the application that created the document to <db:code role="parameter">creator</db:code>.</db:para>
<db:para>This function is only applicable to the X11 version of Qt. If no creator name is specified, the creator will be set to &quot;Qt&quot; followed by some version number.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#creator">creator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDocName">
<db:title>void QPrinter::setDocName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDocName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDocName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the document name to <db:code role="parameter">name</db:code>.</db:para>
<db:para>On X11, the document name is for example used as the default output filename in <db:link xlink:href="qprintdialog.xml">QPrintDialog</db:link>. Note that the document name does not affect the file name if the printer is printing to a file. Use the setOutputFile() function for this.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#docName">docName</db:link>()</db:member>
<db:member><db:link xlink:href="qprintengine.xml#PrintEnginePropertyKey-enum">QPrintEngine::PrintEnginePropertyKey</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDuplex">
<db:title>void QPrinter::setDuplex(QPrinter::DuplexMode <db:emphasis>duplex</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDuplex</db:methodname>
<db:methodparam>
<db:type>QPrinter::DuplexMode</db:type>
<db:parameter>duplex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDuplex(QPrinter::DuplexMode duplex)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables double sided printing based on the <db:code role="parameter">duplex</db:code> mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#duplex">duplex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEngines">
<db:title>[protected] void QPrinter::setEngines(QPrintEngine *<db:emphasis>printEngine</db:emphasis>, QPaintEngine *<db:emphasis>paintEngine</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEngines</db:methodname>
<db:methodparam>
<db:type>QPrintEngine *</db:type>
<db:parameter>printEngine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPaintEngine *</db:type>
<db:parameter>paintEngine</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEngines(QPrintEngine *printEngine, QPaintEngine *paintEngine)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is used by subclasses of <db:link xlink:href="qprinter.xml">QPrinter</db:link> to specify custom print and paint engines (<db:code role="parameter">printEngine</db:code> and <db:code role="parameter">paintEngine</db:code>, respectively).</db:para>
<db:para><db:link xlink:href="qprinter.xml">QPrinter</db:link> does not take ownership of the engines, so you need to manage these engine instances yourself.</db:para>
<db:para>Note that changing the engines will reset the printer state and all its properties.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#printEngine">printEngine</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#paintEngine">paintEngine</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#setOutputFormat">setOutputFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFontEmbeddingEnabled">
<db:title>void QPrinter::setFontEmbeddingEnabled(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFontEmbeddingEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFontEmbeddingEnabled(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enabled or disables font embedding depending on <db:code role="parameter">enable</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#fontEmbeddingEnabled">fontEmbeddingEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFromTo">
<db:title>void QPrinter::setFromTo(int <db:emphasis>from</db:emphasis>, int <db:emphasis>to</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFromTo</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>to</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFromTo(int from, int to)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the range of pages to be printed to cover the pages with numbers specified by <db:code role="parameter">from</db:code> and <db:code role="parameter">to</db:code>, where <db:code role="parameter">from</db:code> corresponds to the first page in the range and <db:code role="parameter">to</db:code> corresponds to the last.</db:para>
<db:note>
<db:para>Pages in a document are numbered according to the convention that the first page is page 1. However, if <db:code role="parameter">from</db:code> and <db:code role="parameter">to</db:code> are both set to 0, the <db:emphasis>whole document will be printed</db:emphasis>.</db:para>
</db:note>
<db:para>This function is mostly used to set a default value that the user can override in the print dialog when you call setup().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#fromPage">fromPage</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#toPage">toPage</db:link>()</db:member>
<db:member><db:link xlink:href="qpagedpaintdevice.xml#pageRanges">pageRanges</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFullPage">
<db:title>void QPrinter::setFullPage(bool <db:emphasis>fp</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFullPage</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>fp</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFullPage(bool fp)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">fp</db:code> is true, enables support for painting over the entire page; otherwise restricts painting to the printable area reported by the device.</db:para>
<db:para>By default, full page printing is disabled. In this case, the origin of the <db:link xlink:href="qprinter.xml">QPrinter</db:link>'s coordinate system coincides with the top-left corner of the printable area.</db:para>
<db:para>If full page printing is enabled, the origin of the <db:link xlink:href="qprinter.xml">QPrinter</db:link>'s coordinate system coincides with the top-left corner of the paper itself. In this case, the <db:link xlink:href="qpaintdevice.xml#PaintDeviceMetric-enum">device metrics</db:link> will report the exact same dimensions as indicated by {<db:link xlink:href="qpagesize.xml">QPageSize</db:link>}. It may not be possible to print on the entire physical page because of the printer's margins, so the application must account for the margins itself.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#fullPage">fullPage</db:link>()</db:member>
<db:member><db:link xlink:href="qpagedpaintdevice.xml#pageLayout">QPagedPaintDevice::pageLayout</db:link>()</db:member>
<db:member><db:link xlink:href="qpagedpaintdevice.xml#setPageSize">QPagedPaintDevice::setPageSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOutputFileName">
<db:title>void QPrinter::setOutputFileName(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOutputFileName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOutputFileName(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the name of the output file to <db:code role="parameter">fileName</db:code>.</db:para>
<db:para>Setting a null or empty name (0 or &quot;&quot;) disables printing to a file. Setting a non-empty name enables printing to a file.</db:para>
<db:para>This can change the value of <db:link xlink:href="qprinter.xml#outputFormat">outputFormat</db:link>(). If the file name has the &quot;.pdf&quot; suffix PDF is generated. If the file name has a suffix other than &quot;.pdf&quot;, the output format used is the one set with <db:link xlink:href="qprinter.xml#setOutputFormat">setOutputFormat</db:link>().</db:para>
<db:para><db:link xlink:href="qprinter.xml">QPrinter</db:link> uses Qt's cross-platform PDF print engines respectively. If you can produce this format natively, for example macOS can generate PDF's from its print engine, set the output format back to <db:link xlink:href="qprinter.xml#OutputFormat-enum">NativeFormat</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#outputFileName">outputFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#setOutputFormat">setOutputFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOutputFormat">
<db:title>void QPrinter::setOutputFormat(QPrinter::OutputFormat <db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOutputFormat</db:methodname>
<db:methodparam>
<db:type>QPrinter::OutputFormat</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOutputFormat(QPrinter::OutputFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the output format for this printer to <db:code role="parameter">format</db:code>.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is the same value as currently set then no change will be made.</db:para>
<db:para>If <db:code role="parameter">format</db:code> is <db:link xlink:href="qprinter.xml#OutputFormat-enum">NativeFormat</db:link> then the <db:link xlink:href="qprinter.xml#printerName">printerName</db:link> will be set to the default printer. If there are no valid printers configured then no change will be made. If you want to set <db:link xlink:href="qprinter.xml#OutputFormat-enum">NativeFormat</db:link> with a specific <db:link xlink:href="qprinter.xml#printerName">printerName</db:link> then use <db:link xlink:href="qprinter.xml#setPrinterName">setPrinterName</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#outputFormat">outputFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#setPrinterName">setPrinterName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPageOrder">
<db:title>void QPrinter::setPageOrder(QPrinter::PageOrder <db:emphasis>pageOrder</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPageOrder</db:methodname>
<db:methodparam>
<db:type>QPrinter::PageOrder</db:type>
<db:parameter>pageOrder</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPageOrder(QPrinter::PageOrder pageOrder)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the page order to <db:code role="parameter">pageOrder</db:code>.</db:para>
<db:para>The page order can be <db:link xlink:href="qprinter.xml#PageOrder-enum">QPrinter::FirstPageFirst</db:link> or <db:link xlink:href="qprinter.xml#PageOrder-enum">QPrinter::LastPageFirst</db:link>. The application is responsible for reading the page order and printing accordingly.</db:para>
<db:para>This function is mostly useful for setting a default value that the user can override in the print dialog.</db:para>
<db:para>This function is only supported under X11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#pageOrder">pageOrder</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPaperSource">
<db:title>void QPrinter::setPaperSource(QPrinter::PaperSource <db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPaperSource</db:methodname>
<db:methodparam>
<db:type>QPrinter::PaperSource</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPaperSource(QPrinter::PaperSource source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the paper source setting to <db:code role="parameter">source</db:code>.</db:para>
<db:para>Windows only: This option can be changed while printing and will take effect from the next call to <db:link xlink:href="qprinter.xml#newPage">newPage</db:link>()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#paperSource">paperSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPdfVersion">
<db:title>[since 5.10] void QPrinter::setPdfVersion(QPagedPaintDevice::PdfVersion <db:emphasis>version</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPdfVersion</db:methodname>
<db:methodparam>
<db:type>QPagedPaintDevice::PdfVersion</db:type>
<db:parameter>version</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPdfVersion(QPagedPaintDevice::PdfVersion version)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the PDF version for this printer to <db:code role="parameter">version</db:code>.</db:para>
<db:para>If <db:code role="parameter">version</db:code> is the same value as currently set then no change will be made.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#pdfVersion">pdfVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrintProgram">
<db:title>void QPrinter::setPrintProgram(const QString &amp;<db:emphasis>printProg</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPrintProgram</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>printProg</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPrintProgram(const QString &amp;printProg)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the name of the program that should do the print job to <db:code role="parameter">printProg</db:code>.</db:para>
<db:para>On X11, this function sets the program to call with the PDF output. On other platforms, it has no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#printProgram">printProgram</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrintRange">
<db:title>void QPrinter::setPrintRange(QPrinter::PrintRange <db:emphasis>range</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPrintRange</db:methodname>
<db:methodparam>
<db:type>QPrinter::PrintRange</db:type>
<db:parameter>range</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPrintRange(QPrinter::PrintRange range)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the print range option in to be <db:code role="parameter">range</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#printRange">printRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrinterName">
<db:title>void QPrinter::setPrinterName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPrinterName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPrinterName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the printer name to <db:code role="parameter">name</db:code>.</db:para>
<db:para>If the <db:code role="parameter">name</db:code> is empty then the output format will be set to <db:link xlink:href="qprinter.xml#OutputFormat-enum">PdfFormat</db:link>.</db:para>
<db:para>If the <db:code role="parameter">name</db:code> is not a valid printer then no change will be made.</db:para>
<db:para>If the <db:code role="parameter">name</db:code> is a valid printer then the output format will be set to <db:link xlink:href="qprinter.xml#OutputFormat-enum">NativeFormat</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#printerName">printerName</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#setOutputFormat">setOutputFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPrinterSelectionOption">
<db:title>void QPrinter::setPrinterSelectionOption(const QString &amp;<db:emphasis>option</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPrinterSelectionOption</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPrinterSelectionOption(const QString &amp;option)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the printer to use <db:code role="parameter">option</db:code> to select the printer. <db:code role="parameter">option</db:code> is null by default (which implies that Qt should be smart enough to guess correctly), but it can be set to other values to use a specific printer selection option.</db:para>
<db:para>If the printer selection option is changed while the printer is active, the current print job may or may not be affected.</db:para>
<db:para>This function has no effect on Windows or Mac.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#printerSelectionOption">printerSelectionOption</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#setPrintProgram">setPrintProgram</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResolution">
<db:title>void QPrinter::setResolution(int <db:emphasis>dpi</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setResolution</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dpi</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setResolution(int dpi)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Requests that the printer prints at <db:code role="parameter">dpi</db:code> or as near to <db:code role="parameter">dpi</db:code> as possible.</db:para>
<db:para>This setting affects the coordinate system as returned by, for example <db:link xlink:href="qpainter.xml#viewport">QPainter::viewport</db:link>().</db:para>
<db:para>This function must be called before <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>() to have an effect on all platforms.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#resolution">resolution</db:link>()</db:member>
<db:member><db:link xlink:href="qpagedpaintdevice.xml#setPageSize">QPagedPaintDevice::setPageSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedPaperSources">
<db:title>QList&lt;QPrinter::PaperSource&gt; QPrinter::supportedPaperSources() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPrinter::PaperSource&gt;</db:type>
<db:methodname>supportedPaperSources</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPrinter::PaperSource&gt; supportedPaperSources() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the supported paper sizes for this printer.</db:para>
<db:para>The values will be either a value that matches an entry in the <db:link xlink:href="qprinter.xml#PaperSource-enum">QPrinter::PaperSource</db:link> enum or a driver spesific value. The driver spesific values are greater than the constant DMBIN_USER declared in wingdi.h.</db:para>
<db:warning>
<db:para>This function is only available in windows.</db:para>
</db:warning>
</db:section>
<db:section xml:id="supportedResolutions">
<db:title>QList&lt;int&gt; QPrinter::supportedResolutions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;int&gt;</db:type>
<db:methodname>supportedResolutions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;int&gt; supportedResolutions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the resolutions (a list of dots-per-inch integers) that the printer says it supports.</db:para>
<db:para>For X11 where all printing is directly to PDF, this function will always return a one item list containing only the PDF resolution, i.e., 72 (72 dpi – but see <db:link xlink:href="qprinter.xml#PrinterMode-enum">PrinterMode</db:link>).</db:para>
</db:section>
<db:section xml:id="supportsMultipleCopies">
<db:title>bool QPrinter::supportsMultipleCopies() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>supportsMultipleCopies</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool supportsMultipleCopies() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the printer supports printing multiple copies of the same document in one job; otherwise false is returned.</db:para>
<db:para>On most systems this function will return true. However, on X11 systems that do not support CUPS, this function will return false. That means the application has to handle the number of copies by printing the same document the required number of times.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setCopyCount">setCopyCount</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#copyCount">copyCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toPage">
<db:title>int QPrinter::toPage() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>toPage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int toPage() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of the last page in a range of pages to be printed (the &quot;to page&quot; setting). Pages in a document are numbered according to the convention that the first page is page 1.</db:para>
<db:para>By default, this function returns a special value of 0, meaning that the &quot;to page&quot; setting is unset.</db:para>
<db:note>
<db:para>If <db:link xlink:href="qprinter.xml#fromPage">fromPage</db:link>() and toPage() both return 0, this indicates that <db:emphasis>the whole document will be printed</db:emphasis>.</db:para>
</db:note>
<db:para>The programmer is responsible for reading this setting and printing accordingly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprinter.xml#setFromTo">setFromTo</db:link>()</db:member>
<db:member><db:link xlink:href="qprinter.xml#fromPage">fromPage</db:link>()</db:member>
<db:member><db:link xlink:href="qpagedpaintdevice.xml#pageRanges">pageRanges</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
