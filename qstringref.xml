<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStringRef Class</db:title>
<db:productname>QtCore5Compat</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 5 Core Compatibility APIs Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstringref.xml">QStringRef</db:link> class provides a thin wrapper around QString substrings.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStringRef</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core5Compat)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core5Compat)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core5compat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStringRef is part of <db:simplelist><db:member>tools</db:member><db:member>string-processing</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstringref.xml">QStringRef</db:link> provides a read-only subset of the QString API.</db:para>
<db:para>A string reference explicitly references a portion of a <db:link xlink:href="qstringref.xml#string">string</db:link>() with a given <db:link xlink:href="qstringref.xml#size">size</db:link>(), starting at a specific <db:link xlink:href="qstringref.xml#position">position</db:link>(). Calling <db:link xlink:href="qstringref.xml#toString">toString</db:link>() returns a copy of the data as a real QString instance.</db:para>
<db:para>This class is designed to improve the performance of substring handling when manipulating substrings obtained from existing QString instances. <db:link xlink:href="qstringref.xml">QStringRef</db:link> avoids the memory allocation and reference counting overhead of a standard QString by simply referencing a part of the original string. This can prove to be advantageous in low level code, such as that used in a parser, at the expense of potentially more complex code.</db:para>
<db:para>For most users, there are no semantic benefits to using <db:link xlink:href="qstringref.xml">QStringRef</db:link> instead of QString since <db:link xlink:href="qstringref.xml">QStringRef</db:link> requires attention to be paid to memory management issues, potentially making code more complex to write and maintain.</db:para>
<db:warning>
<db:para>A <db:link xlink:href="qstringref.xml">QStringRef</db:link> is only valid as long as the referenced string exists. If the original string is deleted, the string reference points to an invalid memory location.</db:para>
</db:warning>
<db:para>We suggest that you only use this class in stable code where profiling has clearly identified that performance improvements can be made by replacing standard string operations with the optimized substring handling provided by this class.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Implicitly Shared Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="const_iterator-typedef">
<db:title>QStringRef::const_iterator</db:title>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#const_reverse_iterator-typedef">QStringRef::const_reverse_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="const_reverse_iterator-typedef">
<db:title>QStringRef::const_reverse_iterator</db:title>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#const_iterator-typedef">QStringRef::const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStringRef">
<db:title>[constexpr noexcept] QStringRef::QStringRef()</db:title>
<db:para>Constructs an empty string reference.</db:para>
</db:section>
<db:section xml:id="QStringRef-1">
<db:title>QStringRef::QStringRef(const QString *<db:emphasis>string</db:emphasis>)</db:title>
<db:para>Constructs a string reference to the given <db:code role="parameter">string</db:code>.</db:para>
</db:section>
<db:section xml:id="QStringRef-3">
<db:title>QStringRef::QStringRef(const QString *<db:emphasis>string</db:emphasis>, int <db:emphasis>position</db:emphasis>, int <db:emphasis>length</db:emphasis>)</db:title>
<db:para>Constructs a string reference to the range of characters in the given <db:code role="parameter">string</db:code> specified by the starting <db:code role="parameter">position</db:code> and <db:code role="parameter">length</db:code> in characters.</db:para>
<db:warning>
<db:para>This function exists to improve performance as much as possible, and performs no bounds checking. For program correctness, <db:code role="parameter">position</db:code> and <db:code role="parameter">length</db:code> must describe a valid substring of <db:code role="parameter">string</db:code>.</db:para>
</db:warning>
<db:para>This means that the starting <db:code role="parameter">position</db:code> must be positive or 0 and smaller than <db:code role="parameter">string</db:code>'s length, and <db:code role="parameter">length</db:code> must be positive or 0 but smaller than the string's length minus the starting <db:code role="parameter">position</db:code>; i.e, 0 &lt;= position &lt; string-&gt;<db:link xlink:href="qstringref.xml#length">length</db:link>() and 0 &lt;= length &lt;= string-&gt;<db:link xlink:href="qstringref.xml#length">length</db:link>() - position must both be satisfied.</db:para>
</db:section>
<db:section xml:id="QStringRef-2">
<db:title>[default] QStringRef::QStringRef(const QStringRef &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of the <db:code role="parameter">other</db:code> string reference.</db:para>
</db:section>
<db:section xml:id="dtor.QStringRef">
<db:title>[noexcept default] QStringRef::~QStringRef()</db:title>
<db:para>Destroys the string reference.</db:para>
<db:para>Since this class is only used to refer to string data, and does not take ownership of it, no memory is freed when instances are destroyed.</db:para>
</db:section>
<db:section xml:id="appendTo">
<db:title>QStringRef QStringRef::appendTo(QString *<db:emphasis>string</db:emphasis>) const</db:title>
<db:para>Appends the string reference to <db:code role="parameter">string</db:code>, and returns a new reference to the combined string data.</db:para>
</db:section>
<db:section xml:id="at">
<db:title>const QChar QStringRef::at(int <db:emphasis>position</db:emphasis>) const</db:title>
<db:para>Returns the character at the given index <db:code role="parameter">position</db:code> in the string reference.</db:para>
<db:para>The <db:code role="parameter">position</db:code> must be a valid index position in the string (i.e., 0 &lt;= <db:code role="parameter">position</db:code> &lt; <db:link xlink:href="qstringref.xml#size">size</db:link>()).</db:para>
</db:section>
<db:section xml:id="back">
<db:title>QChar QStringRef::back() const</db:title>
<db:para>Returns the last character in the string. Same as <db:code>at(size() - 1)</db:code>.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#front">front</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#operator-5b-5d">operator[]</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin">
<db:title>QStringRef::const_iterator QStringRef::begin() const</db:title>
<db:para>Returns a const <db:link xlink:href="">STL-style iterator</db:link> pointing to the first character in the string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#constEnd">constEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cbegin">
<db:title>QStringRef::const_iterator QStringRef::cbegin() const</db:title>
<db:para>Same as <db:link xlink:href="qstringref.xml#begin">begin</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#constEnd">constEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cend">
<db:title>QStringRef::const_iterator QStringRef::cend() const</db:title>
<db:para>Same as <db:link xlink:href="qstringref.xml#end">end</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#constEnd">constEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chop">
<db:title>[noexcept] void QStringRef::chop(int <db:emphasis>n</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">n</db:code> characters from the end of the string.</db:para>
<db:para>If <db:code role="parameter">n</db:code> is greater than or equal to <db:link xlink:href="qstringref.xml#size">size</db:link>(), the result is an empty string; if <db:code role="parameter">n</db:code> is negative, it is equivalent to passing zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::chop()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="chopped">
<db:title>QStringRef QStringRef::chopped(int <db:emphasis>len</db:emphasis>) const</db:title>
<db:para>Returns a substring reference to the <db:link xlink:href="qstringref.xml#size">size</db:link>() - <db:code role="parameter">len</db:code> leftmost characters of this string.</db:para>
<db:note>
<db:para>The behavior is undefined if <db:code role="parameter">len</db:code> is negative or greater than <db:link xlink:href="qstringref.xml#size">size</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#right">right</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#mid">mid</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QStringRef::clear()</db:title>
<db:para>Clears the contents of the string reference by making it null and empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare">
<db:title>[static noexcept] int QStringRef::compare(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:para>Compares <db:code role="parameter">s1</db:code> with <db:code role="parameter">s2</db:code> and returns a negative integer if <db:code role="parameter">s1</db:code> is less than <db:code role="parameter">s2</db:code>, a positive integer if it is greater than <db:code role="parameter">s2</db:code>, and zero if they are equal.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
</db:section>
<db:section xml:id="compare-1">
<db:title>[noexcept] int QStringRef::compare(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares <db:code>*this</db:code> with <db:code role="parameter">ch</db:code> and returns a negative integer if <db:code>*this</db:code> is less than <db:code role="parameter">ch</db:code>, a positive integer if it is greater than <db:code role="parameter">ch</db:code>, and zero if they are equal. Here, <db:code role="parameter">ch</db:code> interpreted as a string of length one.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
</db:section>
<db:section xml:id="compare-2">
<db:title>[noexcept] int QStringRef::compare(QLatin1String <db:emphasis>other</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares <db:code>*this</db:code> with <db:code role="parameter">other</db:code> and returns a negative integer if <db:code>*this</db:code> is less than <db:code role="parameter">other</db:code>, a positive integer if it is greater than <db:code role="parameter">other</db:code>, and zero if they are equal.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>Equivalent to <db:code>compare(*this, other, cs)</db:code>.</db:para>
</db:section>
<db:section xml:id="compare-3">
<db:title>int QStringRef::compare(const QByteArray &amp;<db:emphasis>other</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares <db:code>*this</db:code> with <db:code role="parameter">other</db:code> and returns a negative integer if <db:code>*this</db:code> is less than <db:code role="parameter">other</db:code>, a positive integer if it is greater than <db:code role="parameter">other</db:code>, and zero if they are equal. The contents of <db:code role="parameter">other</db:code> is interpreted as UTF-8.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>Equivalent to <db:code>compare(*this, other, cs)</db:code>.</db:para>
</db:section>
<db:section xml:id="compare-4">
<db:title>[noexcept] int QStringRef::compare(const QString &amp;<db:emphasis>other</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares <db:code>*this</db:code> with <db:code role="parameter">other</db:code> and returns a negative integer if <db:code>*this</db:code> is less than <db:code role="parameter">other</db:code>, a positive integer if it is greater than <db:code role="parameter">other</db:code>, and zero if they are equal.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>Equivalent to <db:code>compare(*this, other, cs)</db:code>.</db:para>
</db:section>
<db:section xml:id="compare-5">
<db:title>[noexcept] int QStringRef::compare(const QStringRef &amp;<db:emphasis>other</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares <db:code>*this</db:code> with <db:code role="parameter">other</db:code> and returns a negative integer if <db:code>*this</db:code> is less than <db:code role="parameter">other</db:code>, a positive integer if it is greater than <db:code role="parameter">other</db:code>, and zero if they are equal.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>Equivalent to <db:code>compare(*this, other, cs)</db:code>.</db:para>
</db:section>
<db:section xml:id="compare-6">
<db:title>[static noexcept] int QStringRef::compare(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares <db:code role="parameter">s1</db:code> with <db:code role="parameter">s2</db:code> and returns a negative integer if <db:code role="parameter">s1</db:code> is less than <db:code role="parameter">s2</db:code>, a positive integer if it is greater than <db:code role="parameter">s2</db:code>, and zero if they are equal.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
</db:section>
<db:section xml:id="compare-7">
<db:title>[static noexcept] int QStringRef::compare(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares <db:code role="parameter">s1</db:code> with <db:code role="parameter">s2</db:code> and returns a negative integer if <db:code role="parameter">s1</db:code> is less than <db:code role="parameter">s2</db:code>, a positive integer if it is greater than <db:code role="parameter">s2</db:code>, and zero if they are equal.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
</db:section>
<db:section xml:id="constBegin">
<db:title>QStringRef::const_iterator QStringRef::constBegin() const</db:title>
<db:para>Same as <db:link xlink:href="qstringref.xml#begin">begin</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#constEnd">constEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constData">
<db:title>const QChar *QStringRef::constData() const</db:title>
<db:para>Same as <db:link xlink:href="qstringref.xml#unicode">unicode</db:link>().</db:para>
</db:section>
<db:section xml:id="constEnd">
<db:title>QStringRef::const_iterator QStringRef::constEnd() const</db:title>
<db:para>Same as <db:link xlink:href="qstringref.xml#end">end</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#cend">cend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QStringRef::contains(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns <db:code>true</db:code> if this string reference contains an occurrence of the string <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-1">
<db:title>bool QStringRef::contains(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#contains">contains</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if this string contains an occurrence of the character <db:code role="parameter">ch</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
</db:section>
<db:section xml:id="contains-2">
<db:title>bool QStringRef::contains(QLatin1String <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#contains">contains</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if this string reference contains an occurrence of the string <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-3">
<db:title>[noexcept] bool QStringRef::contains(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#contains">contains</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if this string reference contains an occurrence of the string view <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-4">
<db:title>bool QStringRef::contains(const QStringRef &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#contains">contains</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if this string reference contains an occurrence of the string reference <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>int QStringRef::count() const</db:title>
<db:para>Returns the number of characters referred to by the string reference. Equivalent to <db:link xlink:href="qstringref.xml#size">size</db:link>() and <db:link xlink:href="qstringref.xml#length">length</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#position">position</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#string">string</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-1">
<db:title>int QStringRef::count(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns the number of (potentially overlapping) occurrences of the string <db:code role="parameter">str</db:code> in this string reference.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::count()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-2">
<db:title>int QStringRef::count(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#count">count</db:link>().</db:para>
<db:para>Returns the number of occurrences of the character <db:code role="parameter">ch</db:code> in the string reference.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::count()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-3">
<db:title>int QStringRef::count(const QStringRef &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#count">count</db:link>().</db:para>
<db:para>Returns the number of (potentially overlapping) occurrences of the string reference <db:code role="parameter">str</db:code> in this string reference.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::count()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crbegin">
<db:title>QStringRef::const_reverse_iterator QStringRef::crbegin() const</db:title>
<db:para>Same as <db:link xlink:href="qstringref.xml#rbegin">rbegin</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crend">
<db:title>QStringRef::const_reverse_iterator QStringRef::crend() const</db:title>
<db:para>Same as <db:link xlink:href="qstringref.xml#rend">rend</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rend">rend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rbegin">rbegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>const QChar *QStringRef::data() const</db:title>
<db:para>Same as <db:link xlink:href="qstringref.xml#unicode">unicode</db:link>().</db:para>
</db:section>
<db:section xml:id="end">
<db:title>QStringRef::const_iterator QStringRef::end() const</db:title>
<db:para>Returns a const <db:link xlink:href="">STL-style iterator</db:link> pointing to the imaginary character after the last character in the list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#constBegin">constBegin</db:link>()</db:member>
<db:member>end()</db:member>
<db:member><db:link xlink:href="qstringref.xml#constEnd">constEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rbegin">rbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endsWith">
<db:title>bool QStringRef::endsWith(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns <db:code>true</db:code> if the string reference ends with <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::endsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#startsWith">startsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endsWith-1">
<db:title>bool QStringRef::endsWith(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if the string reference ends with <db:code role="parameter">ch</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::endsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endsWith-2">
<db:title>bool QStringRef::endsWith(QLatin1String <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::endsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endsWith-3">
<db:title>[noexcept] bool QStringRef::endsWith(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::endsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#startsWith">startsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endsWith-4">
<db:title>bool QStringRef::endsWith(const QStringRef &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::endsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="front">
<db:title>QChar QStringRef::front() const</db:title>
<db:para>Returns the first character in the string. Same as <db:code>at(0)</db:code>.</db:para>
<db:para>This function is provided for STL compatibility.</db:para>
<db:warning>
<db:para>Calling this function on an empty string constitutes undefined behavior.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#back">back</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#operator-5b-5d">operator[]</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf">
<db:title>int QStringRef::indexOf(QLatin1String <db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns the index position of the first occurrence of the string <db:code role="parameter">str</db:code> in this string reference, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is -1, the search starts at the last character; if it is -2, at the next to last character and so on.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::indexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-1">
<db:title>int QStringRef::indexOf(const QString &amp;<db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns the index position of the first occurrence of the string <db:code role="parameter">str</db:code> in this string reference, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is -1, the search starts at the last character; if it is -2, at the next to last character and so on.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::indexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-2">
<db:title>int QStringRef::indexOf(QChar <db:emphasis>ch</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>().</db:para>
<db:para>Returns the index position of the first occurrence of the character <db:code role="parameter">ch</db:code> in the string reference, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">ch</db:code> could not be found.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::indexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-3">
<db:title>[noexcept] int QStringRef::indexOf(QStringView <db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>().</db:para>
<db:para>Returns the index position of the first occurrence of the string view <db:code role="parameter">str</db:code> in this string reference, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is -1, the search starts at the last character; if it is -2, at the next to last character and so on.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::indexOf()</db:link></db:member>
<db:member><db:link xlink:href="">QStringView::indexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-4">
<db:title>int QStringRef::indexOf(const QStringRef &amp;<db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>().</db:para>
<db:para>Returns the index position of the first occurrence of the string reference <db:code role="parameter">str</db:code> in this string reference, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::indexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QStringRef::isEmpty() const</db:title>
<db:para>Returns <db:code>true</db:code> if the string reference has no characters; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>A string reference is empty if its size is zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QStringRef::isNull() const</db:title>
<db:para>Returns <db:code>true</db:code> if this string reference does not reference a string or if the string it references is null (i.e. QString::isNull() is true).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRightToLeft">
<db:title>bool QStringRef::isRightToLeft() const</db:title>
<db:para>Returns <db:code>true</db:code> if the string is read right to left.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::isRightToLeft()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf">
<db:title>int QStringRef::lastIndexOf(const QString &amp;<db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns the index position of the last occurrence of the string <db:code role="parameter">str</db:code> in this string reference, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (default), the search starts at the last character; if <db:code role="parameter">from</db:code> is -2, at the next to last character and so on. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::lastIndexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-1">
<db:title>int QStringRef::lastIndexOf(QChar <db:emphasis>ch</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>().</db:para>
<db:para>Returns the index position of the last occurrence of the character <db:code role="parameter">ch</db:code>, searching backward from position <db:code role="parameter">from</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::lastIndexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-2">
<db:title>int QStringRef::lastIndexOf(QLatin1String <db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>().</db:para>
<db:para>Returns the index position of the last occurrence of the string <db:code role="parameter">str</db:code> in this string reference, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (default), the search starts at the last character; if <db:code role="parameter">from</db:code> is -2, at the next to last character and so on. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::lastIndexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-3">
<db:title>[noexcept] int QStringRef::lastIndexOf(QStringView <db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>().</db:para>
<db:para>Returns the index position of the last occurrence of the string view <db:code role="parameter">str</db:code> in this string, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (default), the search starts at the last character; if <db:code role="parameter">from</db:code> is -2, at the next to last character and so on. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-4">
<db:title>int QStringRef::lastIndexOf(const QStringRef &amp;<db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>().</db:para>
<db:para>Returns the index position of the last occurrence of the string reference <db:code role="parameter">str</db:code> in this string reference, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (default), the search starts at the last character; if <db:code role="parameter">from</db:code> is -2, at the next to last character and so on. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::lastIndexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="left">
<db:title>QStringRef QStringRef::left(int <db:emphasis>n</db:emphasis>) const</db:title>
<db:para>Returns a substring reference to the <db:code role="parameter">n</db:code> leftmost characters of the string.</db:para>
<db:para>If <db:code role="parameter">n</db:code> is greater than or equal to <db:link xlink:href="qstringref.xml#size">size</db:link>(), or less than zero, a reference to the entire string is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#right">right</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#mid">mid</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#startsWith">startsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="length">
<db:title>int QStringRef::length() const</db:title>
<db:para>Returns the number of characters referred to by the string reference. Equivalent to <db:link xlink:href="qstringref.xml#size">size</db:link>() and <db:link xlink:href="qstringref.xml#count">count</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#position">position</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#string">string</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localeAwareCompare">
<db:title>[static] int QStringRef::localeAwareCompare(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Compares <db:code role="parameter">s1</db:code> with <db:code role="parameter">s2</db:code> and returns a negative integer if <db:code role="parameter">s1</db:code> is less than <db:code role="parameter">s2</db:code>, a positive integer if it is greater than <db:code role="parameter">s2</db:code>, and zero if they are equal.</db:para>
<db:para>The comparison is performed in a locale- and also platform-dependent manner. Use this function to present sorted lists of strings to the user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#compare">compare</db:link>()</db:member>
<db:member>QLocale</db:member>
<db:member><db:link xlink:href="">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localeAwareCompare-1">
<db:title>int QStringRef::localeAwareCompare(const QString &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares <db:code>*this</db:code> with <db:code role="parameter">other</db:code> and returns a negative integer if <db:code>*this</db:code> is less than <db:code role="parameter">other</db:code>, a positive integer if it is greater than <db:code role="parameter">other</db:code>, and zero if they are equal.</db:para>
<db:para>The comparison is performed in a locale- and also platform-dependent manner. Use this function to present sorted lists of strings to the user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localeAwareCompare-2">
<db:title>int QStringRef::localeAwareCompare(const QStringRef &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares <db:code>*this</db:code> with <db:code role="parameter">other</db:code> and returns a negative integer if <db:code>*this</db:code> is less than <db:code role="parameter">other</db:code>, a positive integer if it is greater than <db:code role="parameter">other</db:code>, and zero if they are equal.</db:para>
<db:para>The comparison is performed in a locale- and also platform-dependent manner. Use this function to present sorted lists of strings to the user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localeAwareCompare-3">
<db:title>[static] int QStringRef::localeAwareCompare(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares <db:code role="parameter">s1</db:code> with <db:code role="parameter">s2</db:code> and returns a negative integer if <db:code role="parameter">s1</db:code> is less than <db:code role="parameter">s2</db:code>, a positive integer if it is greater than <db:code role="parameter">s2</db:code>, and zero if they are equal.</db:para>
<db:para>The comparison is performed in a locale- and also platform-dependent manner. Use this function to present sorted lists of strings to the user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mid">
<db:title>QStringRef QStringRef::mid(int <db:emphasis>position</db:emphasis>, int <db:emphasis>n</db:emphasis> = -1) const</db:title>
<db:para>Returns a substring reference to <db:code role="parameter">n</db:code> characters of this string, starting at the specified <db:code role="parameter">position</db:code>.</db:para>
<db:para>If the <db:code role="parameter">position</db:code> exceeds the length of the string, a null reference is returned.</db:para>
<db:para>If there are less than <db:code role="parameter">n</db:code> characters available in the string, starting at the given <db:code role="parameter">position</db:code>, or if <db:code role="parameter">n</db:code> is -1 (default), the function returns all characters from the specified <db:code role="parameter">position</db:code> onwards.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#right">right</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="position">
<db:title>int QStringRef::position() const</db:title>
<db:para>Returns the starting position in the referenced string that is referred to by the string reference.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#string">string</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rbegin">
<db:title>QStringRef::const_reverse_iterator QStringRef::rbegin() const</db:title>
<db:para>Returns a const <db:link xlink:href="">STL-style</db:link> reverse iterator pointing to the first character in the string, in reverse order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#crbegin">crbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rend">rend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rend">
<db:title>QStringRef::const_reverse_iterator QStringRef::rend() const</db:title>
<db:para>Returns a <db:link xlink:href="">STL-style</db:link> reverse iterator pointing to one past the last character in the string, in reverse order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#crend">crend</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#rbegin">rbegin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="right">
<db:title>QStringRef QStringRef::right(int <db:emphasis>n</db:emphasis>) const</db:title>
<db:para>Returns a substring reference to the <db:code role="parameter">n</db:code> rightmost characters of the string.</db:para>
<db:para>If <db:code role="parameter">n</db:code> is greater than or equal to <db:link xlink:href="qstringref.xml#size">size</db:link>(), or less than zero, a reference to the entire string is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#mid">mid</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#chopped">chopped</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#chop">chop</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#truncate">truncate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>int QStringRef::size() const</db:title>
<db:para>Returns the number of characters referred to by the string reference. Equivalent to <db:link xlink:href="qstringref.xml#length">length</db:link>() and <db:link xlink:href="qstringref.xml#count">count</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#position">position</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#string">string</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="split">
<db:title>QList&lt;QStringRef&gt; QStringRef::split(const QString &amp;<db:emphasis>sep</db:emphasis>, Qt::SplitBehavior <db:emphasis>behavior</db:emphasis> = Qt::KeepEmptyParts, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Splits the string into substrings references wherever <db:code role="parameter">sep</db:code> occurs, and returns the list of those strings.</db:para>
<db:para>See QString::split() for how <db:code role="parameter">sep</db:code>, <db:code role="parameter">behavior</db:code> and <db:code role="parameter">cs</db:code> interact to form the result.</db:para>
<db:note>
<db:para>All references are valid as long this string is alive. Destroying this string will cause all references to be dangling pointers.</db:para>
</db:note>
</db:section>
<db:section xml:id="split-1">
<db:title>QList&lt;QStringRef&gt; QStringRef::split(QChar <db:emphasis>sep</db:emphasis>, Qt::SplitBehavior <db:emphasis>behavior</db:emphasis> = Qt::KeepEmptyParts, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="startsWith">
<db:title>bool QStringRef::startsWith(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns <db:code>true</db:code> if the string reference starts with <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::startsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startsWith-1">
<db:title>bool QStringRef::startsWith(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#startsWith">startsWith</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if the string reference starts with <db:code role="parameter">ch</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is Qt::CaseSensitive (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::startsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startsWith-2">
<db:title>bool QStringRef::startsWith(QLatin1String <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#startsWith">startsWith</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::startsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startsWith-3">
<db:title>[noexcept] bool QStringRef::startsWith(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#startsWith">startsWith</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::startsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startsWith-4">
<db:title>bool QStringRef::startsWith(const QStringRef &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#startsWith">startsWith</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::startsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="string">
<db:title>const QString *QStringRef::string() const</db:title>
<db:para>Returns a pointer to the string referred to by the string reference, or 0 if it does not reference a string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#unicode">unicode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toDouble">
<db:title>double QStringRef::toDouble(bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:para>Returns the string converted to a <db:code>double</db:code> value.</db:para>
<db:para>Returns an infinity if the conversion overflows or 0.0 if the conversion fails for other reasons (e.g. underflow).</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toDouble()</db:para>
<db:para>For historic reasons, this function does not handle thousands group separators. If you need to convert such numbers, use QLocale::toDouble().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toDouble()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toFloat">
<db:title>float QStringRef::toFloat(bool *<db:emphasis>ok</db:emphasis> = nullptr) const</db:title>
<db:para>Returns the string converted to a <db:code>float</db:code> value.</db:para>
<db:para>Returns an infinity if the conversion overflows or 0.0 if the conversion fails for other reasons (e.g. underflow).</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toFloat()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toFloat()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toInt">
<db:title>int QStringRef::toInt(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to an <db:code>int</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toInt()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toInt()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLatin1">
<db:title>QByteArray QStringRef::toLatin1() const</db:title>
<db:para>Returns a Latin-1 representation of the string as a QByteArray.</db:para>
<db:para>The returned byte array is undefined if the string contains non-Latin1 characters. Those characters may be suppressed or replaced with a question mark.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member>QStringEncoder</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLocal8Bit">
<db:title>QByteArray QStringRef::toLocal8Bit() const</db:title>
<db:para>Returns the local 8-bit representation of the string as a QByteArray. The returned byte array is undefined if the string contains characters not supported by the local 8-bit encoding.</db:para>
<db:para>On Unix systems this is equivalent to <db:link xlink:href="qstringref.xml#toUtf8">toUtf8</db:link>(), on Windows the systems current code page is being used.</db:para>
<db:para>If this string contains any characters that cannot be encoded in the locale, the returned byte array is undefined. Those characters may be suppressed or replaced by another.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member>QStringEncoder</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLong">
<db:title>long QStringRef::toLong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to a <db:code>long</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toLong()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toLong()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLongLong">
<db:title>qlonglong QStringRef::toLongLong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to a <db:code>long long</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toLongLong()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toLongLong()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toShort">
<db:title>short QStringRef::toShort(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to a <db:code>short</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toShort()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toShort()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QStringRef::toString() const</db:title>
<db:para>Returns a copy of the string reference as a QString object.</db:para>
<db:para>If the string reference is not a complete reference of the string (meaning that <db:link xlink:href="qstringref.xml#position">position</db:link>() is 0 and <db:link xlink:href="qstringref.xml#size">size</db:link>() equals <db:link xlink:href="qstringref.xml#string">string</db:link>()-&gt;<db:link xlink:href="qstringref.xml#size">size</db:link>()), this function will allocate a new string to return.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#string">string</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUInt">
<db:title>uint QStringRef::toUInt(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to an <db:code>unsigned int</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toUInt()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toUInt()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toULong">
<db:title>ulong QStringRef::toULong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to an <db:code>unsigned long</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toULongLong()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toULong()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toULongLong">
<db:title>qulonglong QStringRef::toULongLong(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to an <db:code>unsigned long long</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toULongLong()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toULongLong()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUShort">
<db:title>ushort QStringRef::toUShort(bool *<db:emphasis>ok</db:emphasis> = nullptr, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to an <db:code>unsigned short</db:code> using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If <db:code role="parameter">ok</db:code> is not <db:code>nullptr</db:code>, failure is reported by setting *<db:code role="parameter">ok</db:code> to <db:code>false</db:code>, and success by setting *<db:code role="parameter">ok</db:code> to <db:code>true</db:code>.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toUShort()</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toUShort()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUcs4">
<db:title>QList&lt;uint&gt; QStringRef::toUcs4() const</db:title>
<db:para>Returns a UCS-4/UTF-32 representation of the string as a QList&lt;uint&gt;.</db:para>
<db:para>UCS-4 is a Unicode codec and therefore it is lossless. All characters from this string will be encoded in UCS-4. Any invalid sequence of code units in this string is replaced by the Unicode's replacement character (QChar::ReplacementCharacter, which corresponds to <db:code>U+FFFD</db:code>).</db:para>
<db:para>The returned list is not \0'-terminated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member>QStringEncoder</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUtf8">
<db:title>QByteArray QStringRef::toUtf8() const</db:title>
<db:para>Returns a UTF-8 representation of the string as a QByteArray.</db:para>
<db:para>UTF-8 is a Unicode codec and can represent all characters in a Unicode string like QString.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member>QStringEncoder</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="trimmed">
<db:title>QStringRef QStringRef::trimmed() const</db:title>
<db:para>Returns a string that has whitespace removed from the start and the end.</db:para>
<db:para>Whitespace means any character for which QChar::isSpace() returns <db:code>true</db:code>. This includes the ASCII characters '\t', '\n', '\v', '\f', '\r', and ' '.</db:para>
<db:para>Unlike QString::simplified(), trimmed() leaves internal whitespace alone.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::trimmed()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="truncate">
<db:title>[noexcept] void QStringRef::truncate(int <db:emphasis>position</db:emphasis>)</db:title>
<db:para>Truncates the string at the given <db:code role="parameter">position</db:code> index.</db:para>
<db:para>If the specified <db:code role="parameter">position</db:code> index is beyond the end of the string, nothing happens.</db:para>
<db:para>If <db:code role="parameter">position</db:code> is negative, it is equivalent to passing zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::truncate()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unicode">
<db:title>const QChar *QStringRef::unicode() const</db:title>
<db:para>Returns a Unicode representation of the string reference. Since the data stems directly from the referenced string, it is not \0'-terminated unless the string reference includes the string's null terminator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#string">string</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool QStringRef::operator!=(const char *<db:emphasis>s</db:emphasis>) const</db:title>
<db:para>This function overloads operator!=().</db:para>
<db:para>The <db:code role="parameter">s</db:code> const char pointer is converted to a <db:link xlink:href="qstringref.xml">QStringRef</db:link> using the fromUtf8() function.</db:para>
<db:para>You can disable this operator by defining <db:code>QT_NO_CAST_FROM_ASCII</db:code> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through QObject::tr(), for example.</db:para>
<db:para>Returns <db:code>true</db:code> if this string is not lexically equal to the parameter string <db:code role="parameter">s</db:code>. Otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QT_NO_CAST_FROM_ASCII</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-3">
<db:title>bool QStringRef::operator&lt;(const char *<db:emphasis>s</db:emphasis>) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#operator-lt">operator&lt;</db:link>().</db:para>
<db:para>The <db:code role="parameter">s</db:code> const char pointer is converted to a <db:link xlink:href="qstringref.xml">QStringRef</db:link> using the fromUtf8() function.</db:para>
<db:para>You can disable this operator by defining <db:code>QT_NO_CAST_FROM_ASCII</db:code> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through QObject::tr(), for example.</db:para>
<db:para>Returns <db:code>true</db:code> if this string is lexically smaller than the parameter string <db:code role="parameter">s</db:code>. Otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QT_NO_CAST_FROM_ASCII</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-eq-2">
<db:title>bool QStringRef::operator&lt;=(const char *<db:emphasis>s</db:emphasis>) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#operator-lt-eq">operator&lt;=</db:link>().</db:para>
<db:para>The <db:code role="parameter">s</db:code> const char pointer is converted to a <db:link xlink:href="qstringref.xml">QStringRef</db:link> using the fromUtf8() function.</db:para>
<db:para>You can disable this operator by defining <db:code>QT_NO_CAST_FROM_ASCII</db:code> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through QObject::tr(), for example.</db:para>
<db:para>Returns <db:code>true</db:code> if this string is lexically smaller than or equal to the parameter string <db:code role="parameter">s</db:code>. Otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QT_NO_CAST_FROM_ASCII</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QStringRef &amp;QStringRef::operator=(const QString *<db:emphasis>string</db:emphasis>)</db:title>
<db:para>Constructs a string reference to the given <db:code role="parameter">string</db:code> and assigns it to this string reference, returning the result.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[default] QStringRef &amp;QStringRef::operator=(const QStringRef &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the <db:code role="parameter">other</db:code> string reference to this string reference, and returns the result.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-3">
<db:title>bool QStringRef::operator==(const char *<db:emphasis>s</db:emphasis>) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#operator-eq-eq">operator==</db:link>().</db:para>
<db:para>The <db:code role="parameter">s</db:code> byte array is converted to a <db:link xlink:href="qstringref.xml">QStringRef</db:link> using the fromUtf8() function. This function stops conversion at the first NUL character found, or the end of the byte array.</db:para>
<db:para>You can disable this operator by defining <db:code>QT_NO_CAST_FROM_ASCII</db:code> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through QObject::tr(), for example.</db:para>
<db:para>Returns <db:code>true</db:code> if this string is lexically equal to the parameter string <db:code role="parameter">s</db:code>. Otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QT_NO_CAST_FROM_ASCII</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-3">
<db:title>bool QStringRef::operator&gt;(const char *<db:emphasis>s</db:emphasis>) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#operator-gt">operator&gt;</db:link>().</db:para>
<db:para>The <db:code role="parameter">s</db:code> const char pointer is converted to a <db:link xlink:href="qstringref.xml">QStringRef</db:link> using the fromUtf8() function.</db:para>
<db:para>You can disable this operator by defining <db:code>QT_NO_CAST_FROM_ASCII</db:code> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through QObject::tr(), for example.</db:para>
<db:para>Returns <db:code>true</db:code> if this string is lexically greater than the parameter string <db:code role="parameter">s</db:code>. Otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QT_NO_CAST_FROM_ASCII</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-eq-2">
<db:title>bool QStringRef::operator&gt;=(const char *<db:emphasis>s</db:emphasis>) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#operator-gt-eq">operator&gt;=</db:link>().</db:para>
<db:para>The <db:code role="parameter">s</db:code> const char pointer is converted to a <db:link xlink:href="qstringref.xml">QStringRef</db:link> using the fromUtf8() function.</db:para>
<db:para>You can disable this operator by defining <db:code>QT_NO_CAST_FROM_ASCII</db:code> when you compile your applications. This can be useful if you want to ensure that all user-visible strings go through QObject::tr(), for example.</db:para>
<db:para>Returns <db:code>true</db:code> if this string is lexically greater than or equal to the parameter string <db:code role="parameter">s</db:code>. Otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QT_NO_CAST_FROM_ASCII</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>QChar QStringRef::operator[](int <db:emphasis>position</db:emphasis>) const</db:title>
<db:para>Returns the character at the given index <db:code role="parameter">position</db:code> in the string reference.</db:para>
<db:para>The <db:code role="parameter">position</db:code> must be a valid index position in the string reference (i.e., 0 &lt;= <db:code role="parameter">position</db:code> &lt; <db:link xlink:href="qstringref.xml#size">size</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#at">at</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt">
<db:title>[noexcept] bool operator&lt;(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if string reference <db:code role="parameter">s1</db:code> is lexically less than string reference <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>[noexcept] bool operator&lt;=(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if string reference <db:code role="parameter">s1</db:code> is lexically less than or equal to string reference <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool operator==(QLatin1String <db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically equal to string reference <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-4">
<db:title>[noexcept] bool operator==(const QString &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if string <db:code role="parameter">s1</db:code> is lexically equal to string reference <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-5">
<db:title>[noexcept] bool operator==(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if string reference <db:code role="parameter">s1</db:code> is lexically equal to string reference <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt">
<db:title>[noexcept] bool operator&gt;(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if string reference <db:code role="parameter">s1</db:code> is lexically greater than string reference <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>[noexcept] bool operator&gt;=(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if string reference <db:code role="parameter">s1</db:code> is lexically greater than or equal to string reference <db:code role="parameter">s2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Comparing Strings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
