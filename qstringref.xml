<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QStringRef Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstringref.xml">QStringRef</db:link> class provides a thin wrapper around <db:link xlink:href="qstring.xml">QString</db:link> substrings.</db:para>
<db:para>This class was introduced in Qt 4.3.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStringRef</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStringRef is part of <db:simplelist><db:member>tools</db:member><db:member>string-processing</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstringref.xml">QStringRef</db:link> provides a read-only subset of the <db:link xlink:href="qstring.xml">QString</db:link> API.</db:para>
<db:para>A string reference explicitly references a portion of a <db:link xlink:href="qstringref.xml#string">string</db:link>() with a given <db:link xlink:href="qstringref.xml#size">size</db:link>(), starting at a specific <db:link xlink:href="qstringref.xml#position">position</db:link>(). Calling <db:link xlink:href="qstringref.xml#toString">toString</db:link>() returns a copy of the data as a real <db:link xlink:href="qstring.xml">QString</db:link> instance.</db:para>
<db:para>This class is designed to improve the performance of substring handling when manipulating substrings obtained from existing <db:link xlink:href="qstring.xml">QString</db:link> instances. <db:link xlink:href="qstringref.xml">QStringRef</db:link> avoids the memory allocation and reference counting overhead of a standard <db:link xlink:href="qstring.xml">QString</db:link> by simply referencing a part of the original string. This can prove to be advantageous in low level code, such as that used in a parser, at the expense of potentially more complex code.</db:para>
<db:para>For most users, there are no semantic benefits to using <db:link xlink:href="qstringref.xml">QStringRef</db:link> instead of <db:link xlink:href="qstring.xml">QString</db:link> since <db:link xlink:href="qstringref.xml">QStringRef</db:link> requires attention to be paid to memory management issues, potentially making code more complex to write and maintain.</db:para>
<db:warning>
<db:para>A <db:link xlink:href="qstringref.xml">QStringRef</db:link> is only valid as long as the referenced string exists. If the original string is deleted, the string reference points to an invalid memory location.</db:para>
</db:warning>
<db:para>We suggest that you only use this class in stable code where profiling has clearly identified that performance improvements can be made by replacing standard string operations with the optimized substring handling provided by this class.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStringRef">
<db:title>QStringRef::QStringRef()</db:title>
<db:para>Constructs an empty string reference.</db:para>
</db:section>
<db:section xml:id="QStringRef-1">
<db:title>QStringRef::QStringRef(const QString *<db:emphasis>string</db:emphasis>)</db:title>
<db:para>Constructs a string reference to the given <db:code role="parameter">string</db:code>.</db:para>
</db:section>
<db:section xml:id="QStringRef-3">
<db:title>QStringRef::QStringRef(const QString *<db:emphasis>string</db:emphasis>, int <db:emphasis>position</db:emphasis>, int <db:emphasis>length</db:emphasis>)</db:title>
<db:para>Constructs a string reference to the range of characters in the given <db:code role="parameter">string</db:code> specified by the starting <db:code role="parameter">position</db:code> and <db:code role="parameter">length</db:code> in characters.</db:para>
<db:warning>
<db:para>This function exists to improve performance as much as possible, and performs no bounds checking. For program correctness, <db:code role="parameter">position</db:code> and <db:code role="parameter">length</db:code> must describe a valid substring of <db:code role="parameter">string</db:code>.</db:para>
</db:warning>
<db:para>This means that the starting <db:code role="parameter">position</db:code> must be positive or 0 and smaller than <db:code role="parameter">string</db:code>'s length, and <db:code role="parameter">length</db:code> must be positive or 0 but smaller than the string's length minus the starting <db:code role="parameter">position</db:code>; i.e, 0 &lt;= position &lt; string-&gt;<db:link xlink:href="qstringref.xml#length">length</db:link>() and 0 &lt;= length &lt;= string-&gt;<db:link xlink:href="qstringref.xml#length">length</db:link>() - position must both be satisfied.</db:para>
</db:section>
<db:section xml:id="QStringRef-2">
<db:title>QStringRef::QStringRef(const QStringRef &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of the <db:code role="parameter">other</db:code> string reference.</db:para>
</db:section>
<db:section xml:id="dtor.QStringRef">
<db:title>[noexcept] QStringRef::~QStringRef()</db:title>
<db:para>Destroys the string reference.</db:para>
<db:para>Since this class is only used to refer to string data, and does not take ownership of it, no memory is freed when instances are destroyed.</db:para>
</db:section>
<db:section xml:id="appendTo">
<db:title>QStringRef QStringRef::appendTo(QString *<db:emphasis>string</db:emphasis>) const</db:title>
<db:para>Appends the string reference to <db:code role="parameter">string</db:code>, and returns a new reference to the combined string data.</db:para>
</db:section>
<db:section xml:id="at">
<db:title>const QChar QStringRef::at(int <db:emphasis>position</db:emphasis>) const</db:title>
<db:para>Returns the character at the given index <db:code role="parameter">position</db:code> in the string reference.</db:para>
<db:para>The <db:code role="parameter">position</db:code> must be a valid index position in the string (i.e., 0 &lt;= <db:code role="parameter">position</db:code> &lt; <db:link xlink:href="qstringref.xml#size">size</db:link>()).</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QStringRef::clear()</db:title>
<db:para>Clears the contents of the string reference by making it null and empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare">
<db:title>[static, since 4.5] int QStringRef::compare(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:para>Compares the string <db:code role="parameter">s1</db:code> with the string <db:code role="parameter">s2</db:code> and returns an integer less than, equal to, or greater than zero if <db:code role="parameter">s1</db:code> is less than, equal to, or greater than <db:code role="parameter">s2</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link>, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="compare-1">
<db:title>[since 4.5] int QStringRef::compare(QLatin1String <db:emphasis>other</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares this string with the <db:code role="parameter">other</db:code> string and returns an integer less than, equal to, or greater than zero if this string is less than, equal to, or greater than the <db:code role="parameter">other</db:code> string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link>, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>Equivalent to compare(*this, other, cs).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::compare()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare-2">
<db:title>[since 4.5] int QStringRef::compare(const QString &amp;<db:emphasis>other</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares this string with the <db:code role="parameter">other</db:code> string and returns an integer less than, equal to, or greater than zero if this string is less than, equal to, or greater than the <db:code role="parameter">other</db:code> string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link>, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>Equivalent to compare(*this, other, cs).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::compare()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare-3">
<db:title>[since 4.5] int QStringRef::compare(const QStringRef &amp;<db:emphasis>other</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares this string with the <db:code role="parameter">other</db:code> string and returns an integer less than, equal to, or greater than zero if this string is less than, equal to, or greater than the <db:code role="parameter">other</db:code> string.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link>, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>Equivalent to compare(*this, other, cs).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::compare()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare-4">
<db:title>[static, since 4.5] int QStringRef::compare(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, QLatin1String <db:emphasis>s2</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares the string <db:code role="parameter">s1</db:code> with the string <db:code role="parameter">s2</db:code> and returns an integer less than, equal to, or greater than zero if <db:code role="parameter">s1</db:code> is less than, equal to, or greater than <db:code role="parameter">s2</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link>, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="compare-5">
<db:title>[static, since 4.5] int QStringRef::compare(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares the string <db:code role="parameter">s1</db:code> with the string <db:code role="parameter">s2</db:code> and returns an integer less than, equal to, or greater than zero if <db:code role="parameter">s1</db:code> is less than, equal to, or greater than <db:code role="parameter">s2</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link>, the comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="constData">
<db:title>const QChar *QStringRef::constData() const</db:title>
<db:para>Same as <db:link xlink:href="qstringref.xml#unicode">unicode</db:link>().</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>[since 4.8] bool QStringRef::contains(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns true if this string reference contains an occurrence of the string <db:code role="parameter">str</db:code>; otherwise returns false.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-1">
<db:title>[since 4.8] bool QStringRef::contains(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#contains">contains</db:link>().</db:para>
<db:para>Returns true if this string contains an occurrence of the character <db:code role="parameter">ch</db:code>; otherwise returns false.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="contains-2">
<db:title>[since 4,8] bool QStringRef::contains(QLatin1String <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#contains">contains</db:link>().</db:para>
<db:para>Returns true if this string reference contains an occurrence of the string <db:code role="parameter">str</db:code>; otherwise returns false.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4,8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-3">
<db:title>[since 4.8] bool QStringRef::contains(const QStringRef &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#contains">contains</db:link>().</db:para>
<db:para>Returns true if this string reference contains an occurrence of the string reference <db:code role="parameter">str</db:code>; otherwise returns false.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>int QStringRef::count() const</db:title>
<db:para>Returns the number of characters referred to by the string reference. Equivalent to <db:link xlink:href="qstringref.xml#size">size</db:link>() and <db:link xlink:href="qstringref.xml#length">length</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#position">position</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#string">string</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-1">
<db:title>[since 4.8] int QStringRef::count(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns the number of (potentially overlapping) occurrences of the string <db:code role="parameter">str</db:code> in this string reference.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::count()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-2">
<db:title>[since 4.8] int QStringRef::count(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#count">count</db:link>().</db:para>
<db:para>Returns the number of occurrences of the character <db:code role="parameter">ch</db:code> in the string reference.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::count()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count-3">
<db:title>[since 4.8] int QStringRef::count(const QStringRef &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#count">count</db:link>().</db:para>
<db:para>Returns the number of (potentially overlapping) occurrences of the string reference <db:code role="parameter">str</db:code> in this string reference.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::count()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>const QChar *QStringRef::data() const</db:title>
<db:para>Same as <db:link xlink:href="qstringref.xml#unicode">unicode</db:link>().</db:para>
</db:section>
<db:section xml:id="endsWith">
<db:title>[since 4.8] bool QStringRef::endsWith(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns true if the string reference ends with <db:code role="parameter">str</db:code>; otherwise returns false.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::endsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#startsWith">startsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endsWith-1">
<db:title>[since 4.8] bool QStringRef::endsWith(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>().</db:para>
<db:para>Returns true if the string reference ends with <db:code role="parameter">ch</db:code>; otherwise returns false.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::endsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endsWith-2">
<db:title>[since 4.8] bool QStringRef::endsWith(QLatin1String <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::endsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endsWith-3">
<db:title>[since 4.8] bool QStringRef::endsWith(const QStringRef &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::endsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf">
<db:title>[since 4.8] int QStringRef::indexOf(QLatin1String <db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns the index position of the first occurrence of the string <db:code role="parameter">str</db:code> in this string reference, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is -1, the search starts at the last character; if it is -2, at the next to last character and so on.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::indexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-1">
<db:title>[since 4.8] int QStringRef::indexOf(const QString &amp;<db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns the index position of the first occurrence of the string <db:code role="parameter">str</db:code> in this string reference, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>If <db:code role="parameter">from</db:code> is -1, the search starts at the last character; if it is -2, at the next to last character and so on.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::indexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-2">
<db:title>[since 4.8] int QStringRef::indexOf(QChar <db:emphasis>ch</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>().</db:para>
<db:para>Returns the index position of the first occurrence of the character <db:code role="parameter">ch</db:code> in the string reference, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">ch</db:code> could not be found.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::indexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-3">
<db:title>[since 4.8] int QStringRef::indexOf(const QStringRef &amp;<db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>().</db:para>
<db:para>Returns the index position of the first occurrence of the string reference <db:code role="parameter">str</db:code> in this string reference, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::indexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QStringRef::isEmpty() const</db:title>
<db:para>Returns true if the string reference has no characters; otherwise returns false.</db:para>
<db:para>A string reference is empty if its size is zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QStringRef::isNull() const</db:title>
<db:para>Returns true if <db:link xlink:href="qstringref.xml#string">string</db:link>() returns a null pointer or a pointer to a null string; otherwise returns true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf">
<db:title>[since 4.8] int QStringRef::lastIndexOf(const QString &amp;<db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns the index position of the last occurrence of the string <db:code role="parameter">str</db:code> in this string reference, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (default), the search starts at the last character; if <db:code role="parameter">from</db:code> is -2, at the next to last character and so on. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::lastIndexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-1">
<db:title>[since 4.8] int QStringRef::lastIndexOf(QChar <db:emphasis>ch</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>().</db:para>
<db:para>Returns the index position of the last occurrence of the character <db:code role="parameter">ch</db:code>, searching backward from position <db:code role="parameter">from</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::lastIndexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-2">
<db:title>[since 4.8] int QStringRef::lastIndexOf(QLatin1String <db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>().</db:para>
<db:para>Returns the index position of the last occurrence of the string <db:code role="parameter">str</db:code> in this string reference, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (default), the search starts at the last character; if <db:code role="parameter">from</db:code> is -2, at the next to last character and so on. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::lastIndexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-3">
<db:title>[since 4.8] int QStringRef::lastIndexOf(const QStringRef &amp;<db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#lastIndexOf">lastIndexOf</db:link>().</db:para>
<db:para>Returns the index position of the last occurrence of the string reference <db:code role="parameter">str</db:code> in this string reference, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (default), the search starts at the last character; if <db:code role="parameter">from</db:code> is -2, at the next to last character and so on. Returns -1 if <db:code role="parameter">str</db:code> is not found.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::lastIndexOf()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#count">count</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="left">
<db:title>[since 5.2] QStringRef QStringRef::left(int <db:emphasis>n</db:emphasis>) const</db:title>
<db:para>Returns a substring reference to the <db:code role="parameter">n</db:code> leftmost characters of the string.</db:para>
<db:para>If <db:code role="parameter">n</db:code> is greater than <db:link xlink:href="qstringref.xml#size">size</db:link>() or less than zero, a reference to the entire string is returned.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#right">right</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#mid">mid</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#startsWith">startsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="length">
<db:title>int QStringRef::length() const</db:title>
<db:para>Returns the number of characters referred to by the string reference. Equivalent to <db:link xlink:href="qstringref.xml#size">size</db:link>() and <db:link xlink:href="qstringref.xml#count">count</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#position">position</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#string">string</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localeAwareCompare">
<db:title>[static, since 4.5] int QStringRef::localeAwareCompare(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QString &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Compares <db:code role="parameter">s1</db:code> with <db:code role="parameter">s2</db:code> and returns an integer less than, equal to, or greater than zero if <db:code role="parameter">s1</db:code> is less than, equal to, or greater than <db:code role="parameter">s2</db:code>.</db:para>
<db:para>The comparison is performed in a locale- and also platform-dependent manner. Use this function to present sorted lists of strings to the user.</db:para>
<db:para>On Mac OS X, this function compares according the &quot;Order for sorted lists&quot; setting in the International prefereces panel.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#compare">compare</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml">QLocale</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="localeAwareCompare-1">
<db:title>[since 4.5] int QStringRef::localeAwareCompare(const QString &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares this string with the <db:code role="parameter">other</db:code> string and returns an integer less than, equal to, or greater than zero if this string is less than, equal to, or greater than the <db:code role="parameter">other</db:code> string.</db:para>
<db:para>The comparison is performed in a locale- and also platform-dependent manner. Use this function to present sorted lists of strings to the user.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="localeAwareCompare-2">
<db:title>[since 4.5] int QStringRef::localeAwareCompare(const QStringRef &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares this string with the <db:code role="parameter">other</db:code> string and returns an integer less than, equal to, or greater than zero if this string is less than, equal to, or greater than the <db:code role="parameter">other</db:code> string.</db:para>
<db:para>The comparison is performed in a locale- and also platform-dependent manner. Use this function to present sorted lists of strings to the user.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="localeAwareCompare-3">
<db:title>[static, since 4.5] int QStringRef::localeAwareCompare(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Compares <db:code role="parameter">s1</db:code> with <db:code role="parameter">s2</db:code> and returns an integer less than, equal to, or greater than zero if <db:code role="parameter">s1</db:code> is less than, equal to, or greater than <db:code role="parameter">s2</db:code>.</db:para>
<db:para>The comparison is performed in a locale- and also platform-dependent manner. Use this function to present sorted lists of strings to the user.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="mid">
<db:title>[since 5.2] QStringRef QStringRef::mid(int <db:emphasis>position</db:emphasis>, int <db:emphasis>n</db:emphasis> = -1) const</db:title>
<db:para>Returns a substring reference to <db:code role="parameter">n</db:code> characters of this string, starting at the specified <db:code role="parameter">position</db:code>.</db:para>
<db:para>If the <db:code role="parameter">position</db:code> exceeds the length of the string, a null reference is returned.</db:para>
<db:para>If there are less than <db:code role="parameter">n</db:code> characters available in the string, starting at the given <db:code role="parameter">position</db:code>, or if <db:code role="parameter">n</db:code> is -1 (default), the function returns all characters from the specified <db:code role="parameter">position</db:code> onwards.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#right">right</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="position">
<db:title>int QStringRef::position() const</db:title>
<db:para>Returns the starting position in the referenced string that is referred to by the string reference.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#string">string</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="right">
<db:title>[since 5.2] QStringRef QStringRef::right(int <db:emphasis>n</db:emphasis>) const</db:title>
<db:para>Returns a substring reference to the <db:code role="parameter">n</db:code> rightmost characters of the string.</db:para>
<db:para>If <db:code role="parameter">n</db:code> is greater than <db:link xlink:href="qstringref.xml#size">size</db:link>() or less than zero, a reference to the entire string is returned.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#left">left</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#mid">mid</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>int QStringRef::size() const</db:title>
<db:para>Returns the number of characters referred to by the string reference. Equivalent to <db:link xlink:href="qstringref.xml#length">length</db:link>() and <db:link xlink:href="qstringref.xml#count">count</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#position">position</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#string">string</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startsWith">
<db:title>[since 4.8] bool QStringRef::startsWith(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns true if the string reference starts with <db:code role="parameter">str</db:code>; otherwise returns false.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::startsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startsWith-1">
<db:title>[since 4.8] bool QStringRef::startsWith(QChar <db:emphasis>ch</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#startsWith">startsWith</db:link>().</db:para>
<db:para>Returns true if the string reference starts with <db:code role="parameter">ch</db:code>; otherwise returns false.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (default), the search is case sensitive; otherwise the search is case insensitive.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::startsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startsWith-2">
<db:title>[since 4.8] bool QStringRef::startsWith(QLatin1String <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#startsWith">startsWith</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::startsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startsWith-3">
<db:title>[since 4.8] bool QStringRef::startsWith(const QStringRef &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringref.xml#startsWith">startsWith</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::startsWith()</db:link></db:member>
<db:member><db:link xlink:href="qstringref.xml#endsWith">endsWith</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="string">
<db:title>const QString *QStringRef::string() const</db:title>
<db:para>Returns a pointer to the string referred to by the string reference, or 0 if it does not reference a string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#unicode">unicode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toDouble">
<db:title>[since 5.1] double QStringRef::toDouble(bool *<db:emphasis>ok</db:emphasis> = 0) const</db:title>
<db:para>Returns the string converted to a double value.</db:para>
<db:para>Returns 0.0 if the conversion fails.</db:para>
<db:para>If a conversion error occurs, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toDouble()</db:para>
<db:para>For historic reasons, this function does not handle thousands group separators. If you need to convert such numbers, use QLocale::toDouble().</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toDouble()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toFloat">
<db:title>[since 5.1] float QStringRef::toFloat(bool *<db:emphasis>ok</db:emphasis> = 0) const</db:title>
<db:para>Returns the string converted to a float value.</db:para>
<db:para>If a conversion error occurs, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true. Returns 0.0 if the conversion fails.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toFloat()</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toFloat()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toInt">
<db:title>[since 5.1] int QStringRef::toInt(bool *<db:emphasis>ok</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to an int using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If a conversion error occurs, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toInt()</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toInt()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLatin1">
<db:title>[since 4.8] QByteArray QStringRef::toLatin1() const</db:title>
<db:para>Returns a Latin-1 representation of the string as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>The returned byte array is undefined if the string contains non-Latin1 characters. Those characters may be suppressed or replaced with a question mark.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLocal8Bit">
<db:title>[since 4.8] QByteArray QStringRef::toLocal8Bit() const</db:title>
<db:para>Returns the local 8-bit representation of the string as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>. The returned byte array is undefined if the string contains characters not supported by the local 8-bit encoding.</db:para>
<db:para>QTextCodec::codecForLocale() is used to perform the conversion from Unicode. If the locale encoding could not be determined, this function does the same as <db:link xlink:href="qstringref.xml#toLatin1">toLatin1</db:link>().</db:para>
<db:para>If this string contains any characters that cannot be encoded in the locale, the returned byte array is undefined. Those characters may be suppressed or replaced by another.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLong">
<db:title>[since 5.1] long QStringRef::toLong(bool *<db:emphasis>ok</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to a long using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If a conversion error occurs, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toLong()</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toLong()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLongLong">
<db:title>[since 5.1] qlonglong QStringRef::toLongLong(bool *<db:emphasis>ok</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to a long long using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If a conversion error occurs, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toLongLong()</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toLongLong()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toShort">
<db:title>[since 5.1] short QStringRef::toShort(bool *<db:emphasis>ok</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to a short using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If a conversion error occurs, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toShort()</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toShort()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QStringRef::toString() const</db:title>
<db:para>Returns a copy of the string reference as a <db:link xlink:href="qstring.xml">QString</db:link> object.</db:para>
<db:para>If the string reference is not a complete reference of the string (meaning that <db:link xlink:href="qstringref.xml#position">position</db:link>() is 0 and <db:link xlink:href="qstringref.xml#size">size</db:link>() equals <db:link xlink:href="qstringref.xml#string">string</db:link>()-&gt;<db:link xlink:href="qstringref.xml#size">size</db:link>()), this function will allocate a new string to return.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#string">string</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUInt">
<db:title>[since 5.1] uint QStringRef::toUInt(bool *<db:emphasis>ok</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to an unsigned int using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If a conversion error occurs, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toUInt()</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toUInt()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toULong">
<db:title>[since 5.1] ulong QStringRef::toULong(bool *<db:emphasis>ok</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to an unsigned long using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If a conversion error occurs, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toULong()</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toULong()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toULongLong">
<db:title>[since 5.1] qulonglong QStringRef::toULongLong(bool *<db:emphasis>ok</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to an unsigned long long using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If a conversion error occurs, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toULongLong()</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toULongLong()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUShort">
<db:title>[since 5.1] ushort QStringRef::toUShort(bool *<db:emphasis>ok</db:emphasis> = 0, int <db:emphasis>base</db:emphasis> = 10) const</db:title>
<db:para>Returns the string converted to an unsigned short using base <db:code role="parameter">base</db:code>, which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the conversion fails.</db:para>
<db:para>If a conversion error occurs, *<db:code role="parameter">ok</db:code> is set to false; otherwise *<db:code role="parameter">ok</db:code> is set to true.</db:para>
<db:para>If <db:code role="parameter">base</db:code> is 0, the C language convention is used: If the string begins with &quot;0x&quot;, base 16 is used; if the string begins with &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</db:para>
<db:para>The string conversion will always happen in the 'C' locale. For locale dependent conversion use QLocale::toUShort()</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::toUShort()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUcs4">
<db:title>[since 4.8] QVector&lt;uint&gt; QStringRef::toUcs4() const</db:title>
<db:para>Returns a UCS-4/UTF-32 representation of the string as a <db:link xlink:href="qvector.xml">QVector</db:link>&lt;uint&gt;.</db:para>
<db:para>UCS-4 is a Unicode codec and is lossless. All characters from this string can be encoded in UCS-4.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#toUtf8">toUtf8</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUtf8">
<db:title>[since 4.8] QByteArray QStringRef::toUtf8() const</db:title>
<db:para>Returns a UTF-8 representation of the string as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>UTF-8 is a Unicode codec and can represent all characters in a Unicode string like <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>However, in the Unicode range, there are certain codepoints that are not considered characters. The Unicode standard reserves the last two codepoints in each Unicode Plane (U+FFFE, U+FFFF, U+1FFFE, U+1FFFF, U+2FFFE, etc.), as well as 16 codepoints in the range U+FDD0..U+FDDF, inclusive, as non-characters. If any of those appear in the string, they may be discarded and will not appear in the UTF-8 representation, or they may be replaced by one or more replacement characters.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qstringref.xml#toLocal8Bit">toLocal8Bit</db:link>()</db:member>
<db:member><db:link xlink:href="qtextcodec.xml">QTextCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="trimmed">
<db:title>[since 5.1] QStringRef QStringRef::trimmed() const</db:title>
<db:para>Returns a string that has whitespace removed from the start and the end.</db:para>
<db:para>Whitespace means any character for which <db:link xlink:href="qchar.xml#isSpace">QChar::isSpace</db:link>() returns true. This includes the ASCII characters '\t', '\n', '\v', '\f', '\r', and ' '.</db:para>
<db:para>Unlike QString::simplified(), trimmed() leaves internal whitespace alone.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::trimmed()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unicode">
<db:title>const QChar *QStringRef::unicode() const</db:title>
<db:para>Returns a Unicode representation of the string reference. Since the data stems directly from the referenced string, it is not null-terminated unless the string reference includes the string's null terminator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringref.xml#string">string</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QStringRef &amp;QStringRef::operator=(const QString *<db:emphasis>string</db:emphasis>)</db:title>
<db:para>Constructs a string reference to the given <db:code role="parameter">string</db:code> and assigns it to this string reference, returning the result.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QStringRef &amp;QStringRef::operator=(const QStringRef &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the <db:code role="parameter">other</db:code> string reference to this string reference, and returns the result.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-1">
<db:title>bool operator&lt;(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns true if string reference <db:code role="parameter">s1</db:code> is lexically less than string reference <db:code role="parameter">s2</db:code>; otherwise returns false.</db:para>
<db:para>The comparison is based exclusively on the numeric Unicode values of the characters and is very fast, but is not what a human would expect. Consider sorting user-interface strings using the QString::localeAwareCompare() function.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-1">
<db:title>bool operator&lt;=(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns true if string reference <db:code role="parameter">s1</db:code> is lexically less than or equal to string reference <db:code role="parameter">s2</db:code>; otherwise returns false.</db:para>
<db:para>The comparison is based exclusively on the numeric Unicode values of the characters and is very fast, but is not what a human would expect. Consider sorting user-interface strings using the QString::localeAwareCompare() function.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool operator==(QLatin1String <db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns true if string <db:code role="parameter">s1</db:code> is lexically equal to string reference <db:code role="parameter">s2</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-2">
<db:title>bool operator==(const QString &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns true if string <db:code role="parameter">s1</db:code> is lexically equal to string reference <db:code role="parameter">s2</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-3">
<db:title>bool operator==(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns true if string reference <db:code role="parameter">s1</db:code> is lexically equal to string reference <db:code role="parameter">s2</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt-1">
<db:title>bool operator&gt;(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns true if string reference <db:code role="parameter">s1</db:code> is lexically greater than string reference <db:code role="parameter">s2</db:code>; otherwise returns false.</db:para>
<db:para>The comparison is based exclusively on the numeric Unicode values of the characters and is very fast, but is not what a human would expect. Consider sorting user-interface strings using the QString::localeAwareCompare() function.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq-1">
<db:title>bool operator&gt;=(const QStringRef &amp;<db:emphasis>s1</db:emphasis>, const QStringRef &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns true if string reference <db:code role="parameter">s1</db:code> is lexically greater than or equal to string reference <db:code role="parameter">s2</db:code>; otherwise returns false.</db:para>
<db:para>The comparison is based exclusively on the numeric Unicode values of the characters and is very fast, but is not what a human would expect. Consider sorting user-interface strings using the QString::localeAwareCompare() function.</db:para>
</db:section>
</db:section>
</db:article>
