<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>How to Create Qt Plugins</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A guide to creating plugins to extend Qt's applications and functionalities.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt provides two APIs for creating plugins:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A high-level API for writing extensions to Qt itself, such as custom database drivers, image formats, text codecs, and custom styles.</db:para>
</db:listitem>
<db:listitem>
<db:para>A low-level API for extending Qt applications.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, if you want to write a custom <db:link xlink:href="qstyle.xml">QStyle</db:link> subclass and have Qt applications load it dynamically, you would use the higher-level API.</db:para>
<db:para>Since the higher-level API is built on top of the lower-level API, some issues are common to both.</db:para>
<db:para>If you want to provide plugins for use with <db:emphasis>Qt Designer</db:emphasis>, see <db:link xlink:href="qtdesigner-components.xml#creating-custom-widget-plugins">Creating Custom Widget Plugins</db:link>.</db:para>
<db:section xml:id="the-high-level-api-writing-qt-extensions">
<db:title>The High-Level API: Writing Qt Extensions</db:title>
<db:para>Writing a plugin that extends Qt itself is achieved by subclassing the appropriate plugin base class, implementing a few functions, and adding a macro.</db:para>
<db:para>There are several plugin base classes. Derived plugins are stored by default in sub-directories of the standard plugin directory. Qt will not find plugins if they are not stored in the appropriate directory.</db:para>
<db:para>The following table summarizes the plugin base classes. Some of the classes are private, and are therefore not documented. You can use them, but there is no compatibility promise with later Qt versions.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Base Class</db:para>
</db:th>
<db:th>
<db:para>Directory Name</db:para>
</db:th>
<db:th>
<db:para>Qt Module</db:para>
</db:th>
<db:th>
<db:para>Key Case Sensitivity</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>QAccessibleBridgePlugin</db:para>
</db:td>
<db:td>
<db:para>accessiblebridge</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtgui-index.xml">Qt GUI</db:link></db:para>
</db:td>
<db:td>
<db:para>Case Sensitive</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link></db:para>
</db:td>
<db:td>
<db:para>imageformats</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtgui-index.xml">Qt GUI</db:link></db:para>
</db:td>
<db:td>
<db:para>Case Sensitive</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QPictureFormatPlugin (obsolete)</db:para>
</db:td>
<db:td>
<db:para>pictureformats</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtgui-index.xml">Qt GUI</db:link></db:para>
</db:td>
<db:td>
<db:para>Case Sensitive</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QBearerEnginePlugin</db:para>
</db:td>
<db:td>
<db:para>bearer</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtnetwork-index.xml">Qt Network</db:link></db:para>
</db:td>
<db:td>
<db:para>Case Sensitive</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QPlatformInputContextPlugin</db:para>
</db:td>
<db:td>
<db:para>platforminputcontexts</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpa.xml">Qt Platform Abstraction</db:link></db:para>
</db:td>
<db:td>
<db:para>Case Insensitive</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QPlatformIntegrationPlugin</db:para>
</db:td>
<db:td>
<db:para>platforms</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpa.xml">Qt Platform Abstraction</db:link></db:para>
</db:td>
<db:td>
<db:para>Case Insensitive</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QPlatformThemePlugin</db:para>
</db:td>
<db:td>
<db:para>platformthemes</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qpa.xml">Qt Platform Abstraction</db:link></db:para>
</db:td>
<db:td>
<db:para>Case Insensitive</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QPlatformPrinterSupportPlugin</db:para>
</db:td>
<db:td>
<db:para>printsupport</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtprintsupport-index.xml">Qt Print Support</db:link></db:para>
</db:td>
<db:td>
<db:para>Case Insensitive</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QSGContextPlugin</db:para>
</db:td>
<db:td>
<db:para>scenegraph</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtquick-index.xml">Qt Quick</db:link></db:para>
</db:td>
<db:td>
<db:para>Case Sensitive</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qsqldriverplugin.xml">QSqlDriverPlugin</db:link></db:para>
</db:td>
<db:td>
<db:para>sqldrivers</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtsql-index.xml">Qt SQL</db:link></db:para>
</db:td>
<db:td>
<db:para>Case Sensitive</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qiconengineplugin.xml">QIconEnginePlugin</db:link></db:para>
</db:td>
<db:td>
<db:para>iconengines</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtsvg-index.xml">Qt SVG</db:link></db:para>
</db:td>
<db:td>
<db:para>Case Insensitive</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qaccessibleplugin.xml">QAccessiblePlugin</db:link></db:para>
</db:td>
<db:td>
<db:para>accessible</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link></db:para>
</db:td>
<db:td>
<db:para>Case Sensitive</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qstyleplugin.xml">QStylePlugin</db:link></db:para>
</db:td>
<db:td>
<db:para>styles</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtwidgets-index.xml">Qt Widgets</db:link></db:para>
</db:td>
<db:td>
<db:para>Case Insensitive</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If you have a new document viewer class called JsonViewer that you want to make available as a plugin, the class needs to be defined as follows (jsonviewer.h):</db:para>
<db:programlisting language="cpp">class JsonViewer : public ViewerInterface
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.Examples.DocumentViewer.ViewerInterface/1.0&quot; FILE &quot;jsonviewer.json&quot;)
    Q_INTERFACES(ViewerInterface)
public:
    JsonViewer();
    ~JsonViewer() override;
private:
    bool openJsonFile();

    QTreeView *m_tree;
    QListWidget *m_toplevel = nullptr;
    QJsonDocument m_root;

    QPointer&amp;lt;QLineEdit&amp;gt; m_searchKey;
};
</db:programlisting>
<db:para>Ensure that the class implementation is located in a .cpp file:</db:para>
<db:programlisting language="cpp">JsonViewer::JsonViewer()
{
    connect(this, &amp;amp;AbstractViewer::uiInitialized, this, &amp;amp;JsonViewer::setupJsonUi);
}

void JsonViewer::init(QFile *file, QWidget *parent, QMainWindow *mainWindow)
{
    AbstractViewer::init(file, new QTreeView(parent), mainWindow);
    m_tree = qobject_cast&amp;lt;QTreeView *&amp;gt;(widget());
}
</db:programlisting>
<db:para>In addition, a json file (jsonviewer.json) containing meta data describing the plugin is required for most plugins. For document viewer plugins it simply contains the name of the viewer plugin.</db:para>
<db:programlisting language="cpp">{ &quot;Keys&quot;: [ &quot;jsonviewer&quot; ] }
</db:programlisting>
<db:para>The type of information that needs to be provided in the json file is plugin dependent. See the class documentation for details on the information that needs to be contained in the file.</db:para>
<db:para>For database drivers, image formats, text codecs, and most other plugin types, no explicit object creation is required. Qt will find and create them as required.</db:para>
<db:para>Plugin classes may require additional functions to be implemented. See the class documentation for details of the virtual functions that must be reimplemented for each type of plugin.</db:para>
<db:para>The <db:link xlink:href="qtdoc-demos-documentviewer-example.xml">Document Viewer Demo</db:link> shows how to implement a plugin that displayes structured contents of a file. Each plugin therefore reimplements virtual functions, which</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>identify the plugin</db:para>
</db:listitem>
<db:listitem>
<db:para>return the MIME types it supports</db:para>
</db:listitem>
<db:listitem>
<db:para>inform whether there is content to display and</db:para>
</db:listitem>
<db:listitem>
<db:para>how contents are presented</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">    QString viewerName() const override { return QLatin1StringView(staticMetaObject.className()); };
    QStringList supportedMimeTypes() const override;
    bool hasContent() const override;
    bool supportsOverview() const override { return true; }
</db:programlisting>
</db:section>
<db:section xml:id="the-low-level-api-extending-qt-applications">
<db:title>The Low-Level API: Extending Qt Applications</db:title>
<db:para>In addition to Qt itself, Qt applications can be extended through plugins. This requires the application to detect and load plugins using <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link>. In that context, plugins may provide arbitrary functionality and are not limited to database drivers, image formats, text codecs, styles, and other types of plugins that extend Qt's functionality.</db:para>
<db:para>Making an application extensible through plugins involves the following steps:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Define a set of interfaces (classes with only pure virtual functions) used to talk to the plugins.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use the <db:link xlink:href="qtplugin.xml#Q_DECLARE_INTERFACE">Q_DECLARE_INTERFACE</db:link>() macro to tell Qt's <db:link xlink:href="metaobjects.xml">meta-object system</db:link> about the interface.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> in the application to load the plugins.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use qobject_cast() to test whether a plugin implements a given interface.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Writing a plugin involves these steps:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Declare a plugin class that inherits from <db:link xlink:href="qobject.xml">QObject</db:link> and from the interfaces that the plugin wants to provide.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use the <db:link xlink:href="qobject.xml#Q_INTERFACES">Q_INTERFACES</db:link>() macro to tell Qt's <db:link xlink:href="metaobjects.xml">meta-object system</db:link> about the interfaces.</db:para>
</db:listitem>
<db:listitem>
<db:para>Export the plugin using the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>For example, here's the definition of an interface class:</db:para>
<db:programlisting language="cpp">class ViewerInterface : public AbstractViewer
{
public:
    virtual ~ViewerInterface() = default;
};
</db:programlisting>
<db:para>Here's the interface declaration:</db:para>
<db:programlisting language="cpp">#define ViewerInterface_iid &quot;org.qt-project.Qt.Examples.DocumentViewer.ViewerInterface/1.0&quot;
Q_DECLARE_INTERFACE(ViewerInterface, ViewerInterface_iid)
</db:programlisting>
<db:para>See also <db:link xlink:href="designer-creating-custom-widgets.xml">Creating Custom Widgets for Qt Designer</db:link> for information about issues that are specific to <db:emphasis>Qt Designer</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="locating-plugins">
<db:title>Locating Plugins</db:title>
<db:para>Qt applications automatically know which plugins are available, because plugins are stored in the standard plugin subdirectories. Because of this, applications don't require any code to find and load plugins, since Qt handles them automatically.</db:para>
<db:para>During development, the directory for plugins is QTDIR/plugins (where QTDIR is the directory where Qt is installed), with each type of plugin in a subdirectory for that type, for example, styles. If you want your applications to use plugins and you don't want to use the standard plugins path, have your installation process determine the path you want to use for the plugins, and save the path, for example, by using <db:link xlink:href="qsettings.xml">QSettings</db:link>, for the application to read when it runs. The application can then call <db:link xlink:href="qcoreapplication.xml#addLibraryPath">QCoreApplication::addLibraryPath</db:link>() with this path and your plugins will be available to the application. Note that the final part of the path (for example, styles) cannot be changed.</db:para>
<db:para>If you want the plugin to be loadable, one approach is to create a subdirectory under the application, and place the plugin in that directory. If you distribute any of the plugins that come with Qt (the ones located in the plugins directory), you must copy the subdirectory under plugins where the plugin is located to your applications root folder (i.e., do not include the plugins directory).</db:para>
<db:para>For more information about deployment, see the <db:link xlink:href="deployment.xml">Deploying Qt Applications</db:link> and <db:link xlink:href="deployment-plugins.xml">Deploying Plugins</db:link> documentation.</db:para>
</db:section>
<db:section xml:id="static-plugins">
<db:title>Static Plugins</db:title>
<db:para>The normal and most flexible way to include a plugin with an application is to compile it into a dynamic library that is shipped separately, and detected and loaded at runtime.</db:para>
<db:para>Plugins can be linked statically into your application. If you build the static version of Qt, this is the only option for including Qt's predefined plugins. Using static plugins makes the deployment less error-prone, but has the disadvantage that no functionality from plugins can be added without a complete rebuild and redistribution of the application.</db:para>
<db:para>CMake and qmake automatically add the plugins that are typically needed by the Qt modules that are used, while more specialized plugins need to be added manually. The default list of automatically added plugins can be overridden per type.</db:para>
<db:para>The defaults are tuned towards an optimal out-of-the-box experience, but may unnecessarily bloat the application. It is recommended to inspect the linker command line and eliminate unnecessary plugins.</db:para>
<db:para>To cause static plugins actually being linked and instantiated, <db:link xlink:href="qtplugin.xml#Q_IMPORT_PLUGIN">Q_IMPORT_PLUGIN</db:link>() macros are also needed in application code, but those are automatically generated by the build system and added to your application project.</db:para>
<db:section xml:id="importing-static-plugins-in-cmake">
<db:title>Importing Static Plugins in CMake</db:title>
<db:para>To statically link plugins in a CMake project, you need to call the <db:link xlink:href="qt-import-plugins.xml">qt_import_plugins</db:link> command.</db:para>
<db:para>For example, the Linux libinput plugin is not imported by default. The following command imports it:</db:para>
<db:programlisting language="cpp">qt_import_plugins(myapp INCLUDE Qt::QLibInputPlugin)
</db:programlisting>
<db:para>To link the minimal platform integration plugin instead of the default Qt platform adaptation plugin, use:</db:para>
<db:programlisting language="cpp">qt_import_plugins(myapp
    INCLUDE_BY_TYPE platforms Qt::MinimalIntegrationPlugin
)
</db:programlisting>
<db:para>Another typical use case is to link only a certain set of imageformats plugins:</db:para>
<db:programlisting language="cpp">qt_import_plugins(myapp
    INCLUDE_BY_TYPE imageformats Qt::QJpegPlugin Qt::QGifPlugin
)
</db:programlisting>
<db:para>If you want to prevent the linking of any imageformats plugin, use:</db:para>
<db:programlisting language="cpp">qt_import_plugins(myapp
    EXCLUDE_BY_TYPE imageformats
)
</db:programlisting>
<db:para>If you want to turn off the addition of any default plugin, use the NO_DEFAULT option of <db:link xlink:href="qt-import-plugins.xml">qt_import_plugins</db:link>.</db:para>
</db:section>
<db:section xml:id="importing-static-plugins-in-qmake">
<db:title>Importing Static Plugins in qmake</db:title>
<db:para>In a qmake project, you need to add the required plugins to your build using QTPLUGIN:</db:para>
<db:programlisting language="cpp">QTPLUGIN += qlibinputplugin
</db:programlisting>
<db:para>For example, to link the minimal plugin instead of the default Qt platform adaptation plugin, use:</db:para>
<db:programlisting language="cpp">QTPLUGIN.platforms = qminimal
</db:programlisting>
<db:para>If you want neither the default, nor the minimal QPA plugin to be linked automatically, use:</db:para>
<db:programlisting language="cpp">QTPLUGIN.platforms = -
</db:programlisting>
<db:para>If you do not want all plugins added to QTPLUGIN to be automatically linked, remove import_plugins from the CONFIG variable:</db:para>
<db:programlisting language="cpp">CONFIG -= import_plugins
</db:programlisting>
</db:section>
<db:section xml:id="creating-static-plugins">
<db:title>Creating Static Plugins</db:title>
<db:para>It is also possible to create your own static plugins by following these steps:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Pass the STATIC option to the <db:link xlink:href="qt-add-plugin.xml">qt_add_plugin</db:link> command in your CMakeLists.txt. For a qmake project, add CONFIG += static to your plugin's .pro file.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use the <db:link xlink:href="qtplugin.xml#Q_IMPORT_PLUGIN">Q_IMPORT_PLUGIN</db:link>() macro in your application.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use the <db:link xlink:href="qtresource-proxy.xml#Q_INIT_RESOURCE">Q_INIT_RESOURCE</db:link>() macro in your application if the plugin ships qrc files.</db:para>
</db:listitem>
<db:listitem>
<db:para>Link your application with your plugin library using <db:link xlink:href="https://cmake.org/cmake/help/latest/command/target_link_libraries.html">target_link_libraries</db:link> in your CMakeLists.txt or LIBS in your .pro file.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>See the <db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/tests/manual/examples/widgets/tools/plugandpaint/app?h=6.7">Plug &amp; Paint</db:link> example and the associated <db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/tests/manual/examples/widgets/tools/plugandpaint/plugins/basictools?h=6.7">Basic Tools</db:link> plugin for details on how to do this.</db:para>
<db:note>
<db:para>If you are not using CMake or qmake to build your plugin, you need to make sure that the QT_STATICPLUGIN preprocessor macro is defined.</db:para>
</db:note>
</db:section>
<db:section xml:id="loading-plugins">
<db:title>Loading plugins</db:title>
<db:para>Plugin types (static or shared) and operating systems require specific approaches to locate and load plugins. It's useful to implement an abstraction for loading plugins.</db:para>
<db:programlisting language="cpp">void ViewerFactory::loadViewerPlugins()
{
    if (!m_viewers.isEmpty())
        return;
</db:programlisting>
<db:para><db:link xlink:href="qpluginloader.xml#staticInstances">QPluginLoader::staticInstances</db:link>() returns a <db:link xlink:href="qobject.xml#QObjectList-typedef">QObjectList</db:link> with a pointer to each statically linked plugin</db:para>
<db:programlisting language="cpp">    // Load static plugins
    const QObjectList &amp;amp;staticPlugins = QPluginLoader::staticInstances();
    for (auto *plugin : staticPlugins)
        addViewer(plugin);
</db:programlisting>
<db:para>Shared plugins reside in their deployment directories, which may require OS-specific handling.</db:para>
<db:programlisting language="cpp">    // Load shared plugins
    QDir pluginsDir = QDir(QApplication::applicationDirPath());

#if defined(Q_OS_WINDOWS)
    pluginsDir.cd(&quot;app&quot;_L1);
#elif defined(Q_OS_DARWIN)
    if (pluginsDir.dirName() == &quot;MacOS&quot;_L1) {
        pluginsDir.cdUp();
        pluginsDir.cdUp();
        pluginsDir.cdUp();
    }
#endif
    const auto entryList = pluginsDir.entryList(QDir::Files);
    for (const QString &amp;amp;fileName : entryList) {
        QPluginLoader loader(pluginsDir.absoluteFilePath(fileName));
        QObject *plugin = loader.instance();
        if (plugin)
            addViewer(plugin);
#if 0
        else
            qDebug() &amp;lt;&amp;lt; loader.errorString();
#endif
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="deploying-and-debugging-plugins">
<db:title>Deploying and Debugging Plugins</db:title>
<db:para>The <db:link xlink:href="deployment-plugins.xml">Deploying Plugins</db:link> document covers the process of deploying plugins with applications and debugging them when problems arise.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link></db:member>
<db:member><db:link xlink:href="qlibrary.xml">QLibrary</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
