<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick OpenVG Adaptation</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The OpenVG adaptation is an alternative renderer for <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> 2 that will renderer the contents of the scene graph using OpenVG commands to provide hardware-acclerated 2D vector and raster graphics. Much like the Software adaptation, some features and optimizations are no longer available. Most Qt Quick 2 applications will run without modification though any attempts to use unsupported features will be ignored.</db:para>
<db:section xml:id="egl-requirement">
<db:title>EGL Requirement</db:title>
<db:para>Unlike the defualt OpenGL Renderer, there is no built in support for acquiring an OpenVG context. This means that the renderer has the responsbility of requesting and managing the the current context. To do this EGL has to be used directly in the OpenVG renderer. This means that the OpenVG renderer is only usable with platform plugins that support creating QWindows with support for <db:link xlink:href="qsurfaceformat.xml#RenderableType-enum">QSurfaceFormat::OpenVG</db:link>. From this window, the renderer can get an EGLSurface which can be used with an EGLContext to render OpenVG content.</db:para>
</db:section>
<db:section xml:id="renderer">
<db:title>Renderer</db:title>
<db:para>The OpenVG Renderer works by using the OpenVG API to send commands and data to a Vector GPU which will render the scenegraph in an accelerated manner, offloading graphics rendering from the CPU. Many operations like the rendering of rectangles and fonts glyphs ideal for OpenVG because these can be represented as paths which are stroked and filled. Rendering scenegraph items that would typically involve textures are handled in the OpenVG renderer by using VGImage. In addition when rendering to offscreen surfaces (like when using Layers), the scene subtree is rendered to a VGImage which can be reused in the scene.</db:para>
</db:section>
<db:section xml:id="render-loop">
<db:title>Render Loop</db:title>
<db:para>The OpenVG Renderer mirrors the behavior of the Basic render loop and will execute all OpenVG commands in a single thread.</db:para>
<db:para>See the <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml">Scene Graph page</db:link> for more information on render loops</db:para>
</db:section>
<db:section xml:id="shader-effects">
<db:title>Shader Effects</db:title>
<db:para><db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> components in <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> 2 can not be rendered by the OpenVG adaptation. While it is possible to user <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> and QML Item Layers (which are both offscreen surfaces), it is not actually possible to apply shader effects to them via the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> item. This is because OpenVG lacks an API for applying per vertex and per fragment shader operations. It may be possible however to take advantage of Image Filter operations in the OpenVG API to get similar effects to what is provided by ShaderEffects in custom items. To integrate custom OpenVG rendering, use <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> in combination with <db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link>.</db:para>
</db:section>
<db:section xml:id="qt-graphical-effects-module">
<db:title>Qt Graphical Effects Module</db:title>
<db:para><db:link xlink:href="qtgraphicaleffects-index.xml">Qt Graphical Effects</db:link> uses <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> items to render effects. If you use graphical effects from this module, then you should not hide the source item so that the original item can still be rendered.</db:para>
</db:section>
<db:section xml:id="particle-effects">
<db:title>Particle Effects</db:title>
<db:para>It is not possible to render particle effects with the OpenVG adaptation. Whenever possible, remove particles completely from the scene. Otherwise they will still require some processing, even though they are not visible.</db:para>
</db:section>
<db:section xml:id="rendering-text">
<db:title>Rendering Text</db:title>
<db:para>The text rendering with the OpenVG adaptation is based on rendering the glpyh paths, and does not use the distance fields technique used by the OpenGL backend.</db:para>
</db:section>
<db:section xml:id="perspective-transforms">
<db:title>Perspective Transforms</db:title>
<db:para>The OpenVG API does not allow paths to be transformed with non-affine transforms, while it is possible with Qt Quick. This means that rendering components using paths like Rectangles and Text, when applying perspective transforms the OpenVG backend will first render to a VGImage before applying transformations. This uses more memory at runtime and is a slower path so avoid doing this if necessary.</db:para>
</db:section>
</db:article>
