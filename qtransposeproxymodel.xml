<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTransposeProxyModel Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This proxy transposes the source model.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTransposeProxyModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractproxymodel.xml" xlink:role="class">QAbstractProxyModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This model will make the rows of the source model become columns of the proxy model and vice-versa.</db:para>
<db:para>If the model is a tree, the parents will be transposed as well. For example, if an index in the source model had parent `index(2,0)`, it will have parent `index(0,2)` in the proxy.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTransposeProxyModel">
<db:title>[explicit] QTransposeProxyModel::QTransposeProxyModel(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new proxy model with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QTransposeProxyModel">
<db:title>[virtual noexcept] QTransposeProxyModel::~QTransposeProxyModel()</db:title>
<db:para>Destructs the proxy model.</db:para>
</db:section>
<db:section xml:id="columnCount">
<db:title>[override virtual] int QTransposeProxyModel::columnCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#columnCount" role="function">QAbstractItemModel::columnCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="headerData">
<db:title>[override virtual] QVariant QTransposeProxyModel::headerData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#headerData" role="function">QAbstractProxyModel::headerData(int section, Qt::Orientation orientation, int role) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtransposeproxymodel.xml#setHeaderData">setHeaderData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="index">
<db:title>[override virtual] QModelIndex QTransposeProxyModel::index(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#index" role="function">QAbstractItemModel::index(int row, int column, const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="insertColumns">
<db:title>[override virtual] bool QTransposeProxyModel::insertColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#insertColumns" role="function">QAbstractItemModel::insertColumns(int column, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="insertRows">
<db:title>[override virtual] bool QTransposeProxyModel::insertRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#insertRows" role="function">QAbstractItemModel::insertRows(int row, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="itemData">
<db:title>[override virtual] QMap&lt;int, QVariant&gt; QTransposeProxyModel::itemData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#itemData" role="function">QAbstractProxyModel::itemData(const QModelIndex &amp;proxyIndex) const</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtransposeproxymodel.xml#setItemData">setItemData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapFromSource">
<db:title>[override virtual] QModelIndex QTransposeProxyModel::mapFromSource(const QModelIndex &amp;<db:emphasis>sourceIndex</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mapFromSource" role="function">QAbstractProxyModel::mapFromSource(const QModelIndex &amp;sourceIndex) const</db:link>.</db:para>
</db:section>
<db:section xml:id="mapToSource">
<db:title>[override virtual] QModelIndex QTransposeProxyModel::mapToSource(const QModelIndex &amp;<db:emphasis>proxyIndex</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#mapToSource" role="function">QAbstractProxyModel::mapToSource(const QModelIndex &amp;proxyIndex) const</db:link>.</db:para>
</db:section>
<db:section xml:id="moveColumns">
<db:title>[override virtual] bool QTransposeProxyModel::moveColumns(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceRow</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationChild</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#moveColumns" role="function">QAbstractItemModel::moveColumns(const QModelIndex &amp;sourceParent, int sourceColumn, int count, const QModelIndex &amp;destinationParent, int destinationChild)</db:link>.</db:para>
</db:section>
<db:section xml:id="moveRows">
<db:title>[override virtual] bool QTransposeProxyModel::moveRows(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceRow</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationChild</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#moveRows" role="function">QAbstractItemModel::moveRows(const QModelIndex &amp;sourceParent, int sourceRow, int count, const QModelIndex &amp;destinationParent, int destinationChild)</db:link>.</db:para>
</db:section>
<db:section xml:id="parent">
<db:title>[override virtual] QModelIndex QTransposeProxyModel::parent(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#parent" role="function">QAbstractItemModel::parent(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="removeColumns">
<db:title>[override virtual] bool QTransposeProxyModel::removeColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#removeColumns" role="function">QAbstractItemModel::removeColumns(int column, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="removeRows">
<db:title>[override virtual] bool QTransposeProxyModel::removeRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#removeRows" role="function">QAbstractItemModel::removeRows(int row, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
</db:section>
<db:section xml:id="rowCount">
<db:title>[override virtual] int QTransposeProxyModel::rowCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#rowCount" role="function">QAbstractItemModel::rowCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="setHeaderData">
<db:title>[override virtual] bool QTransposeProxyModel::setHeaderData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#setHeaderData" role="function">QAbstractProxyModel::setHeaderData(int section, Qt::Orientation orientation, const QVariant &amp;value, int role)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtransposeproxymodel.xml#headerData">headerData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemData">
<db:title>[override virtual] bool QTransposeProxyModel::setItemData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, const QMap&lt;int, QVariant&gt; &amp;<db:emphasis>roles</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#setItemData" role="function">QAbstractProxyModel::setItemData(const QModelIndex &amp;index, const QMap&lt;int, QVariant&gt; &amp;roles)</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtransposeproxymodel.xml#itemData">itemData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSourceModel">
<db:title>[override virtual] void QTransposeProxyModel::setSourceModel(QAbstractItemModel *<db:emphasis>newSourceModel</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#setSourceModel" role="function">QAbstractProxyModel::setSourceModel(QAbstractItemModel *sourceModel)</db:link>.</db:para>
</db:section>
<db:section xml:id="sort">
<db:title>[override virtual] void QTransposeProxyModel::sort(int <db:emphasis>column</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::AscendingOrder)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#sort" role="function">QAbstractProxyModel::sort(int column, Qt::SortOrder order)</db:link>.</db:para>
<db:para>This method will perform no action. Use a <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> on top of this one if you require sorting.</db:para>
</db:section>
<db:section xml:id="span">
<db:title>[override virtual] QSize QTransposeProxyModel::span(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractproxymodel.xml#span" role="function">QAbstractProxyModel::span(const QModelIndex &amp;index) const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
