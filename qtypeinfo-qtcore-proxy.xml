<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QTypeInfo&gt;</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Core Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_DECLARE_TYPEINFO">
<db:title>Q_DECLARE_TYPEINFO(<db:emphasis>Type</db:emphasis>, <db:emphasis>Flags</db:emphasis>)</db:title>
<db:para>You can use this macro to specify information about a custom type <db:code role="parameter">Type</db:code>. With accurate type information, Qt's <db:link xlink:href="containers.xml">generic containers</db:link> can choose appropriate storage methods and algorithms.</db:para>
<db:para><db:code role="parameter">Flags</db:code> can be one of the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Q_PRIMITIVE_TYPE specifies that <db:code role="parameter">Type</db:code> requires no operation to be performed in order to be properly destroyed, and that it is possible to use memcpy() in order to create a valid independent copy of an object.</db:para>
</db:listitem>
<db:listitem>
<db:para>Q_RELOCATABLE_TYPE specifies that <db:code role="parameter">Type</db:code> has a constructor and/or a destructor, but it can still be <db:emphasis>relocated</db:emphasis> in memory by using memcpy().</db:para>
</db:listitem>
<db:listitem>
<db:para>Q_MOVABLE_TYPE is the same as Q_RELOCATABLE_TYPE. Prefer to use Q_RELOCATABLE_TYPE in new code. Note: despite the name, this has nothing to do with move constructors or C++ move semantics.</db:para>
</db:listitem>
<db:listitem>
<db:para>Q_COMPLEX_TYPE (the default) specifies that <db:code role="parameter">Type</db:code> has constructors and/or a destructor and that it may not be moved in memory.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Example of a &quot;primitive&quot; type:</db:para>
<db:programlisting language="cpp">struct Point2D
{
    int x;
    int y;
};

Q_DECLARE_TYPEINFO(Point2D, Q_PRIMITIVE_TYPE);
</db:programlisting>
<db:para>An example of a non-POD &quot;primitive&quot; type is <db:link xlink:href="quuid.xml">QUuid</db:link>: Even though <db:link xlink:href="quuid.xml">QUuid</db:link> has constructors (and therefore isn't POD), every bit pattern still represents a valid object, and memcpy() can be used to create a valid independent copy of a <db:link xlink:href="quuid.xml">QUuid</db:link> object.</db:para>
<db:para>Example of a relocatable type:</db:para>
<db:programlisting language="cpp">class Point2D
{
public:
    Point2D() { data = new int[2]; }
    Point2D(const Point2D &amp;other) { ... }
    ~Point2D() { delete[] data; }

    Point2D &amp;operator=(const Point2D &amp;other) { ... }

    int x() const { return data[0]; }
    int y() const { return data[1]; }

private:
    int *data;
};

Q_DECLARE_TYPEINFO(Point2D, Q_RELOCATABLE_TYPE);
</db:programlisting>
<db:para>Qt will try to detect the class of a type using standard C++ type traits; use this macro to tune the behavior. For instance many types would be candidates for Q_RELOCATABLE_TYPE despite not being trivially-copyable.</db:para>
</db:section>
</db:section>
</db:article>
