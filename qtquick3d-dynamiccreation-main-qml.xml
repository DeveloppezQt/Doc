<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Dynamic Model Creation Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates dynamic model creation.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2019 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick.Controls
import QtQuick3D

ApplicationWindow {
    id: window
    width: 1280
    height: 720
    visible: true
    color: &quot;black&quot;
    title: &quot;Dynamic Model Creation example&quot;

    Column {
        anchors.top: parent.top
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.margins: 20

        Label {
            id: countLabel
            font.pointSize: 20
            font.bold: true
            color: &quot;slategrey&quot;
            text: &quot;No. models: &quot; + shapeSpawner.count
        }

        Row {
            anchors.horizontalCenter: parent.horizontalCenter
            spacing: 10

            RoundButton {
                text: &quot;-&quot;
                font.bold: true
                palette.button: &quot;slategrey&quot;

                onClicked: shapeSpawner.removeShape()
            }

            RoundButton {
                text: &quot;+&quot;
                font.bold: true
                palette.button: &quot;slategrey&quot;

                onClicked: shapeSpawner.addShape()
            }
        }
    }

    View3D {
        anchors.fill: parent
        camera: camera
        renderMode: View3D.Underlay

        environment: SceneEnvironment {
            clearColor: &quot;black&quot;
            backgroundMode: SceneEnvironment.Color
            antialiasingMode: SceneEnvironment.MSAA
            antialiasingQuality: SceneEnvironment.High
        }

        PointLight {
            position: Qt.vector3d(0, 0, 0);
            brightness: 2.5
        }

        Node {
            position: Qt.vector3d(0, 0, 0);

            PerspectiveCamera {
                position: Qt.vector3d(0, 0, 600)
            }

            SequentialAnimation on eulerRotation.y {
                loops: Animation.Infinite
                PropertyAnimation {
                    duration: 5000
                    to: 360
                    from: 0
                }
            }
        }

        Node {
            id: shapeSpawner
            property real range: 300
            property var instances: []
            property int count

            function addShape()
            {
                var xPos = (2 * Math.random() * range) - range;
                var yPos = (2 * Math.random() * range) - range;
                var zPos = (2 * Math.random() * range) - range;
                var shapeComponent = Qt.createComponent(&quot;WeirdShape.qml&quot;);
                let instance = shapeComponent.createObject(shapeSpawner,
                    { &quot;x&quot;: xPos, &quot;y&quot;: yPos, &quot;z&quot;: zPos, &quot;scale&quot;: Qt.vector3d(0.25, 0.25, 0.25)});
                instances.push(instance);
                count = instances.length
            }

            function removeShape()
            {
                if (instances.length &amp;gt; 0) {
                    let instance = instances.pop();
                    instance.destroy();
                    count = instances.length
                }
            }
        }

        Component.onCompleted: {
            for (var i = 0; i &amp;lt; 10; ++i)
                shapeSpawner.addShape()
        }
    }
}

</db:programlisting>
</db:article>
