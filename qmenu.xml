<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QMenu Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmenu.xml">QMenu</db:link> class provides a menu widget for use in menu bars, context menus, and other popup menus.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMenu</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMenu is part of <db:simplelist><db:member>mainwindow-classes</db:member><db:member>basicwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A menu widget is a selection menu. It can be either a pull-down menu in a menu bar or a standalone context menu. Pull-down menus are shown by the menu bar when the user clicks on the respective item or presses the specified shortcut key. Use <db:link xlink:href="qmenubar.xml#addMenu">QMenuBar::addMenu</db:link>() to insert a menu into a menu bar. Context menus are usually invoked by some special keyboard key or by right-clicking. They can be executed either asynchronously with <db:link xlink:href="qmenu.xml#popup">popup</db:link>() or synchronously with <db:link xlink:href="qmenu.xml#exec">exec</db:link>(). Menus can also be invoked in response to button presses; these are just like context menus except for how they are invoked.</db:para>
<db:table style="generic" width="100%">
<db:caption>Fig. A menu shown in <db:link xlink:href="gallery-fusion.xml">Fusion widget style</db:link>, <db:link xlink:href="gallery-windowsxp.xml">Windows XP widget style</db:link>, and <db:link xlink:href="gallery-macintosh.xml">Macintosh widget style</db:link>.</db:caption>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-menu.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsxp-menu.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/macintosh-menu.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:table>
<db:section xml:id="actions">
<db:title>Actions</db:title>
<db:para>A menu consists of a list of action items. Actions are added with the <db:link xlink:href="qmenu.xml#addAction">addAction</db:link>(), <db:link xlink:href="qwidget.xml#addActions">addActions</db:link>() and <db:link xlink:href="qwidget.xml#insertAction">insertAction</db:link>() functions. An action is represented vertically and rendered by <db:link xlink:href="qstyle.xml">QStyle</db:link>. In addition, actions can have a text label, an optional icon drawn on the very left side, and shortcut key sequence such as &quot;Ctrl+X&quot;.</db:para>
<db:para>The existing actions held by a menu can be found with <db:link xlink:href="qwidget.xml#actions">actions</db:link>().</db:para>
<db:para>There are four kinds of action items: separators, actions that show a submenu, widgets, and actions that perform an action. Separators are inserted with <db:link xlink:href="qmenu.xml#addSeparator">addSeparator</db:link>(), submenus with <db:link xlink:href="qmenu.xml#addMenu">addMenu</db:link>(), and all other items are considered action items.</db:para>
<db:para>When inserting action items you usually specify a receiver and a slot. The receiver will be notifed whenever the item is <db:link xlink:href="qaction.xml#triggered">triggered</db:link>(). In addition, <db:link xlink:href="qmenu.xml">QMenu</db:link> provides two signals, activated() and highlighted(), which signal the <db:link xlink:href="qaction.xml">QAction</db:link> that was triggered from the menu.</db:para>
<db:para>You clear a menu with <db:link xlink:href="qmenu.xml#clear">clear</db:link>() and remove individual action items with <db:link xlink:href="qwidget.xml#removeAction">removeAction</db:link>().</db:para>
<db:para>A <db:link xlink:href="qmenu.xml">QMenu</db:link> can also provide a tear-off menu. A tear-off menu is a top-level window that contains a copy of the menu. This makes it possible for the user to &quot;tear off&quot; frequently used menus and position them in a convenient place on the screen. If you want this functionality for a particular menu, insert a tear-off handle with setTearOffEnabled(). When using tear-off menus, bear in mind that the concept isn't typically used on Microsoft Windows so some users may not be familiar with it. Consider using a <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> instead.</db:para>
<db:para>Widgets can be inserted into menus with the <db:link xlink:href="qwidgetaction.xml">QWidgetAction</db:link> class. Instances of this class are used to hold widgets, and are inserted into menus with the <db:link xlink:href="qmenu.xml#addAction">addAction</db:link>() overload that takes a <db:link xlink:href="qaction.xml">QAction</db:link>.</db:para>
<db:para>Conversely, actions can be added to widgets with the <db:link xlink:href="qmenu.xml#addAction">addAction</db:link>(), <db:link xlink:href="qwidget.xml#addActions">addActions</db:link>() and <db:link xlink:href="qwidget.xml#insertAction">insertAction</db:link>() functions.</db:para>
<db:warning>
<db:para>To make <db:link xlink:href="qmenu.xml">QMenu</db:link> visible on the screen, <db:link xlink:href="qmenu.xml#exec">exec</db:link>() or <db:link xlink:href="qmenu.xml#popup">popup</db:link>() should be used instead of <db:link xlink:href="qwidget.xml#show">show</db:link>().</db:para>
</db:warning>
</db:section>
<db:section xml:id="qmenu-on-qt-for-windows-ce">
<db:title>QMenu on Qt for Windows CE</db:title>
<db:para>If a menu is integrated into the native menubar on Windows Mobile we do not support the signals: <db:link xlink:href="qmenu.xml#aboutToHide">aboutToHide</db:link> (), <db:link xlink:href="qmenu.xml#aboutToShow">aboutToShow</db:link> () and hovered (). It is not possible to display an icon in a native menu on Windows Mobile.</db:para>
</db:section>
<db:section xml:id="qmenu-on-mac-os-x-with-qt-build-against-cocoa">
<db:title>QMenu on Mac OS X with Qt build against Cocoa</db:title>
<db:para><db:link xlink:href="qmenu.xml">QMenu</db:link> can be inserted only once in a menu/menubar. Subsequent insertions will have no effect or will result in a disabled menu item.</db:para>
<db:para>See the <db:link xlink:href="qtwidgets-mainwindows-menus-example.xml">Menus</db:link> example for an example of how to use <db:link xlink:href="qmenubar.xml">QMenuBar</db:link> and <db:link xlink:href="qmenu.xml">QMenu</db:link> in your application.</db:para>
<db:para><db:emphasis role="bold">Important inherited functions:</db:emphasis> <db:link xlink:href="qmenu.xml#addAction">addAction</db:link>(), <db:link xlink:href="qwidget.xml#removeAction">removeAction</db:link>(), <db:link xlink:href="qmenu.xml#clear">clear</db:link>(), <db:link xlink:href="qmenu.xml#addSeparator">addSeparator</db:link>(), and <db:link xlink:href="qmenu.xml#addMenu">addMenu</db:link>().</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenubar.xml">QMenuBar</db:link></db:member>
<db:member><db:link xlink:href="guibooks.xml#fowler">GUI Design Handbook: Menu, Drop-Down and Pop-Up</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-application-example.xml">Application Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-menus-example.xml">Menus Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-recentfiles-example.xml">Recent Files Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMenu">
<db:title>[explicit] QMenu::QMenu(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a menu with parent <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Although a popup menu is always a top-level widget, if a parent is passed the popup menu will be deleted when that parent is destroyed (as with any other <db:link xlink:href="qobject.xml">QObject</db:link>).</db:para>
</db:section>
<db:section xml:id="QMenu-1">
<db:title>[explicit] QMenu::QMenu(const QString &amp;<db:emphasis>title</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a menu with a <db:code role="parameter">title</db:code> and a <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Although a popup menu is always a top-level widget, if a parent is passed the popup menu will be deleted when that parent is destroyed (as with any other <db:link xlink:href="qobject.xml">QObject</db:link>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>title</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QMenu">
<db:title>[virtual noexcept] QMenu::~QMenu()</db:title>
<db:para>Destroys the menu.</db:para>
</db:section>
<db:section xml:id="aboutToHide">
<db:title>[since 4.2] void QMenu::aboutToHide()</db:title>
<db:para>This signal is emitted just before the menu is hidden from the user.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml#aboutToShow">aboutToShow</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#hide">hide</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="aboutToShow">
<db:title>void QMenu::aboutToShow()</db:title>
<db:para>This signal is emitted just before the menu is shown to the user.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml#aboutToHide">aboutToHide</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#show">show</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="actionAt">
<db:title>QAction *QMenu::actionAt(const QPoint &amp;<db:emphasis>pt</db:emphasis>) const</db:title>
<db:para>Returns the item at <db:code role="parameter">pt</db:code>; returns 0 if there is no item there.</db:para>
</db:section>
<db:section xml:id="actionEvent">
<db:title>[override virtual protected] void QMenu::actionEvent(QActionEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#actionEvent" role="function">QWidget::actionEvent(QActionEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="actionGeometry">
<db:title>QRect QMenu::actionGeometry(QAction *<db:emphasis>act</db:emphasis>) const</db:title>
<db:para>Returns the geometry of action <db:code role="parameter">act</db:code>.</db:para>
</db:section>
<db:section xml:id="activeAction">
<db:title>QAction *QMenu::activeAction() const</db:title>
<db:para>Returns the currently highlighted action, or 0 if no action is currently highlighted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml#setActiveAction">setActiveAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addAction">
<db:title>void QMenu::addAction(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the action <db:code role="parameter">action</db:code> to the menu's list of actions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenubar.xml#addAction">QMenuBar::addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addAction-1">
<db:title>QAction *QMenu::addAction(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function creates a new action with <db:code role="parameter">text</db:code>. The function adds the newly created action to the menu's list of actions, and returns it.</db:para>
<db:para><db:link xlink:href="qmenu.xml">QMenu</db:link> takes ownership of the returned <db:link xlink:href="qaction.xml">QAction</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addAction-2">
<db:title>QAction *QMenu::addAction(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function creates a new action with an <db:code role="parameter">icon</db:code> and some <db:code role="parameter">text</db:code>. The function adds the newly created action to the menu's list of actions, and returns it.</db:para>
<db:para><db:link xlink:href="qmenu.xml">QMenu</db:link> takes ownership of the returned <db:link xlink:href="qaction.xml">QAction</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addAction-3">
<db:title>QAction *QMenu::addAction(const QString &amp;<db:emphasis>text</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>, const QKeySequence &amp;<db:emphasis>shortcut</db:emphasis> = 0)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function creates a new action with the text <db:code role="parameter">text</db:code> and an optional shortcut <db:code role="parameter">shortcut</db:code>. The action's <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signal is connected to the <db:code role="parameter">receiver</db:code>'s <db:code role="parameter">member</db:code> slot. The function adds the newly created action to the menu's list of actions and returns it.</db:para>
<db:para><db:link xlink:href="qmenu.xml">QMenu</db:link> takes ownership of the returned <db:link xlink:href="qaction.xml">QAction</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addAction-4">
<db:title>QAction *QMenu::addAction(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>, const QKeySequence &amp;<db:emphasis>shortcut</db:emphasis> = 0)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function creates a new action with an <db:code role="parameter">icon</db:code> and some <db:code role="parameter">text</db:code> and an optional shortcut <db:code role="parameter">shortcut</db:code>. The action's <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signal is connected to the <db:code role="parameter">member</db:code> slot of the <db:code role="parameter">receiver</db:code> object. The function adds the newly created action to the menu's list of actions, and returns it.</db:para>
<db:para><db:link xlink:href="qmenu.xml">QMenu</db:link> takes ownership of the returned <db:link xlink:href="qaction.xml">QAction</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMenu">
<db:title>QAction *QMenu::addMenu(QMenu *<db:emphasis>menu</db:emphasis>)</db:title>
<db:para>This convenience function adds <db:code role="parameter">menu</db:code> as a submenu to this menu. It returns <db:code role="parameter">menu</db:code>'s <db:link xlink:href="qmenu.xml#menuAction">menuAction</db:link>(). This menu does not take ownership of <db:code role="parameter">menu</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml#menuAction">QMenu::menuAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMenu-1">
<db:title>QMenu *QMenu::addMenu(const QString &amp;<db:emphasis>title</db:emphasis>)</db:title>
<db:para>Appends a new <db:link xlink:href="qmenu.xml">QMenu</db:link> with <db:code role="parameter">title</db:code> to the menu. The menu takes ownership of the menu. Returns the new menu.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml#menuAction">QMenu::menuAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMenu-2">
<db:title>QMenu *QMenu::addMenu(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>)</db:title>
<db:para>Appends a new <db:link xlink:href="qmenu.xml">QMenu</db:link> with <db:code role="parameter">icon</db:code> and <db:code role="parameter">title</db:code> to the menu. The menu takes ownership of the menu. Returns the new menu.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml#menuAction">QMenu::menuAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSeparator">
<db:title>QAction *QMenu::addSeparator()</db:title>
<db:para>This convenience function creates a new separator action, i.e. an action with <db:link xlink:href="qaction.xml#isSeparator">QAction::isSeparator</db:link>() returning true, and adds the new action to this menu's list of actions. It returns the newly created action.</db:para>
<db:para><db:link xlink:href="qmenu.xml">QMenu</db:link> takes ownership of the returned <db:link xlink:href="qaction.xml">QAction</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QMenu::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QMenu::clear()</db:title>
<db:para>Removes all the menu's actions. Actions owned by the menu and not shown in any other widget are deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#removeAction">removeAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnCount">
<db:title>[protected] int QMenu::columnCount() const</db:title>
<db:para>If a menu does not fit on the screen it lays itself out so that it does fit. It is style dependent what layout means (for example, on Windows it will use multiple columns).</db:para>
<db:para>This functions returns the number of columns necessary.</db:para>
</db:section>
<db:section xml:id="defaultAction">
<db:title>QAction *QMenu::defaultAction() const</db:title>
<db:para>Returns the current default action.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml#setDefaultAction">setDefaultAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enterEvent">
<db:title>[override virtual protected] void QMenu::enterEvent(<db:emphasis>QEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#enterEvent" role="function">QWidget::enterEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QMenu::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="exec">
<db:title>QAction *QMenu::exec()</db:title>
<db:para>Executes this menu synchronously.</db:para>
<db:para>This is equivalent to <db:code>exec(pos())</db:code>.</db:para>
<db:para>This returns the triggered <db:link xlink:href="qaction.xml">QAction</db:link> in either the popup menu or one of its submenus, or 0 if no item was triggered (normally because the user pressed Esc).</db:para>
<db:para>In most situations you'll want to specify the position yourself, for example, the current mouse position:</db:para>
<db:programlisting language="cpp">exec(QCursor::pos());
</db:programlisting>
<db:para>or aligned to a widget:</db:para>
<db:programlisting language="cpp">exec(somewidget.mapToGlobal(QPoint(0,0)));
</db:programlisting>
<db:para>or in reaction to a <db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link> *e:</db:para>
<db:programlisting language="cpp">exec(e-&gt;globalPos());
</db:programlisting>
</db:section>
<db:section xml:id="exec-1">
<db:title>QAction *QMenu::exec(const QPoint &amp;<db:emphasis>p</db:emphasis>, QAction *<db:emphasis>action</db:emphasis> = 0)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Executes this menu synchronously.</db:para>
<db:para>Pops up the menu so that the action <db:code role="parameter">action</db:code> will be at the specified <db:emphasis>global</db:emphasis> position <db:code role="parameter">p</db:code>. To translate a widget's local coordinates into global coordinates, use <db:link xlink:href="qwidget.xml#mapToGlobal">QWidget::mapToGlobal</db:link>().</db:para>
<db:para>This returns the triggered <db:link xlink:href="qaction.xml">QAction</db:link> in either the popup menu or one of its submenus, or 0 if no item was triggered (normally because the user pressed Esc).</db:para>
<db:para>Note that all signals are emitted as usual. If you connect a <db:link xlink:href="qaction.xml">QAction</db:link> to a slot and call the menu's <db:link xlink:href="qmenu.xml#exec">exec</db:link>(), you get the result both via the signal-slot connection and in the return value of <db:link xlink:href="qmenu.xml#exec">exec</db:link>().</db:para>
<db:para>Common usage is to position the menu at the current mouse position:</db:para>
<db:programlisting language="cpp">exec(QCursor::pos());
</db:programlisting>
<db:para>or aligned to a widget:</db:para>
<db:programlisting language="cpp">exec(somewidget.mapToGlobal(QPoint(0, 0)));
</db:programlisting>
<db:para>or in reaction to a <db:link xlink:href="qmouseevent.xml">QMouseEvent</db:link> *e:</db:para>
<db:programlisting language="cpp">exec(e-&gt;globalPos());
</db:programlisting>
<db:para>When positioning a menu with <db:link xlink:href="qmenu.xml#exec">exec</db:link>() or <db:link xlink:href="qmenu.xml#popup">popup</db:link>(), bear in mind that you cannot rely on the menu's current size(). For performance reasons, the menu adapts its size only when necessary. So in many cases, the size before and after the show is different. Instead, use <db:link xlink:href="qmenu.xml#sizeHint">sizeHint</db:link>() which calculates the proper size depending on the menu's current contents.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml#popup">popup</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#mapToGlobal">QWidget::mapToGlobal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exec-2">
<db:title>[static] QAction *QMenu::exec(QList&lt;QAction *&gt; <db:emphasis>actions</db:emphasis>, const QPoint &amp;<db:emphasis>pos</db:emphasis>, QAction *<db:emphasis>at</db:emphasis> = 0, QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Executes a menu synchronously.</db:para>
<db:para>The menu's actions are specified by the list of <db:code role="parameter">actions</db:code>. The menu will pop up so that the specified action, <db:code role="parameter">at</db:code>, appears at global position <db:code role="parameter">pos</db:code>. If <db:code role="parameter">at</db:code> is not specified then the menu appears at position <db:code role="parameter">pos</db:code>. <db:code role="parameter">parent</db:code> is the menu's parent widget; specifying the parent will provide context when <db:code role="parameter">pos</db:code> alone is not enough to decide where the menu should go (e.g., with multiple desktops or when the parent is embedded in <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link>).</db:para>
<db:para>The function returns the triggered <db:link xlink:href="qaction.xml">QAction</db:link> in either the popup menu or one of its submenus, or 0 if no item was triggered (normally because the user pressed Esc).</db:para>
<db:para>This is equivalent to:</db:para>
<db:programlisting language="cpp">QMenu menu;
QAction *at = actions[0]; // Assumes actions is not empty
foreach (QAction *a, actions)
    menu.addAction(a);
menu.exec(pos, at);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml#popup">popup</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#mapToGlobal">QWidget::mapToGlobal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusNextPrevChild">
<db:title>[override virtual protected] bool QMenu::focusNextPrevChild(bool <db:emphasis>next</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusNextPrevChild" role="function">QWidget::focusNextPrevChild(bool next)</db:link>.</db:para>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[override virtual protected] void QMenu::hideEvent(<db:emphasis>QHideEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#hideEvent" role="function">QWidget::hideEvent(QHideEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hideTearOffMenu">
<db:title>void QMenu::hideTearOffMenu()</db:title>
<db:para>This function will forcibly hide the torn off menu making it disappear from the users desktop.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml#isTearOffMenuVisible">isTearOffMenuVisible</db:link>()</db:member>
<db:member><db:link xlink:href="">isTearOffEnabled()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hovered">
<db:title>void QMenu::hovered(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:para>This signal is emitted when a menu action is highlighted; <db:code role="parameter">action</db:code> is the action that caused the signal to be emitted.</db:para>
<db:para>Often this is used to update status information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml#triggered">triggered</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#hovered">QAction::hovered</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[protected] void QMenu::initStyleOption(QStyleOptionMenuItem *<db:emphasis>option</db:emphasis>, const QAction *<db:emphasis>action</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this menu and information from <db:code role="parameter">action</db:code>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptionmenuitem.xml">QStyleOptionMenuItem</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
<db:member><db:link xlink:href="qmenubar.xml#initStyleOption">QMenuBar::initStyleOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertMenu">
<db:title>QAction *QMenu::insertMenu(QAction *<db:emphasis>before</db:emphasis>, QMenu *<db:emphasis>menu</db:emphasis>)</db:title>
<db:para>This convenience function inserts <db:code role="parameter">menu</db:code> before action <db:code role="parameter">before</db:code> and returns the menus <db:link xlink:href="qmenu.xml#menuAction">menuAction</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#insertAction">QWidget::insertAction</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml#addMenu">addMenu</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertSeparator">
<db:title>QAction *QMenu::insertSeparator(QAction *<db:emphasis>before</db:emphasis>)</db:title>
<db:para>This convenience function creates a new separator action, i.e. an action with <db:link xlink:href="qaction.xml#isSeparator">QAction::isSeparator</db:link>() returning true. The function inserts the newly created action into this menu's list of actions before action <db:code role="parameter">before</db:code> and returns it.</db:para>
<db:para><db:link xlink:href="qmenu.xml">QMenu</db:link> takes ownership of the returned <db:link xlink:href="qaction.xml">QAction</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#insertAction">QWidget::insertAction</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml#addSeparator">addSeparator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[since 4.2] bool QMenu::isEmpty() const</db:title>
<db:para>Returns true if there are no visible actions inserted into the menu, false otherwise.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#actions">QWidget::actions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isTearOffMenuVisible">
<db:title>bool QMenu::isTearOffMenuVisible() const</db:title>
<db:para>When a menu is torn off a second menu is shown to display the menu contents in a new window. When the menu is in this mode and the menu is visible returns true; otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml#hideTearOffMenu">hideTearOffMenu</db:link>()</db:member>
<db:member><db:link xlink:href="">isTearOffEnabled()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QMenu::keyPressEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="leaveEvent">
<db:title>[override virtual protected] void QMenu::leaveEvent(<db:emphasis>QEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#leaveEvent" role="function">QWidget::leaveEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="menuAction">
<db:title>QAction *QMenu::menuAction() const</db:title>
<db:para>Returns the action associated with this menu.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QMenu::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QMenu::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QMenu::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QMenu::paintEvent(QPaintEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="popup">
<db:title>void QMenu::popup(const QPoint &amp;<db:emphasis>p</db:emphasis>, QAction *<db:emphasis>atAction</db:emphasis> = 0)</db:title>
<db:para>Displays the menu so that the action <db:code role="parameter">atAction</db:code> will be at the specified <db:emphasis>global</db:emphasis> position <db:code role="parameter">p</db:code>. To translate a widget's local coordinates into global coordinates, use <db:link xlink:href="qwidget.xml#mapToGlobal">QWidget::mapToGlobal</db:link>().</db:para>
<db:para>When positioning a menu with <db:link xlink:href="qmenu.xml#exec">exec</db:link>() or popup(), bear in mind that you cannot rely on the menu's current size(). For performance reasons, the menu adapts its size only when necessary, so in many cases, the size before and after the show is different. Instead, use <db:link xlink:href="qmenu.xml#sizeHint">sizeHint</db:link>() which calculates the proper size depending on the menu's current contents.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#mapToGlobal">QWidget::mapToGlobal</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml#exec">exec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setActiveAction">
<db:title>void QMenu::setActiveAction(QAction *<db:emphasis>act</db:emphasis>)</db:title>
<db:para>Sets the currently highlighted action to <db:code role="parameter">act</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml#activeAction">activeAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDefaultAction">
<db:title>void QMenu::setDefaultAction(QAction *<db:emphasis>act</db:emphasis>)</db:title>
<db:para>This sets the default action to <db:code role="parameter">act</db:code>. The default action may have a visual cue, depending on the current <db:link xlink:href="qstyle.xml">QStyle</db:link>. A default action usually indicates what will happen by default when a drop occurs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml#defaultAction">defaultAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QMenu::sizeHint() const</db:title>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QMenu::timerEvent(QTimerEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="triggered">
<db:title>void QMenu::triggered(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:para>This signal is emitted when an action in this menu is triggered.</db:para>
<db:para><db:code role="parameter">action</db:code> is the action that caused the signal to be emitted.</db:para>
<db:para>Normally, you connect each menu action's <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signal to its own custom slot, but sometimes you will want to connect several actions to a single slot, for example, when you have a group of closely related actions, such as &quot;left justify&quot;, &quot;center&quot;, &quot;right justify&quot;.</db:para>
<db:note>
<db:para>This signal is emitted for the main parent menu in a hierarchy. Hence, only the parent menu needs to be connected to a slot; sub-menus need not be connected.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml#hovered">hovered</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#triggered">QAction::triggered</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QMenu::wheelEvent(QWheelEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#wheelEvent" role="function">QWidget::wheelEvent(QWheelEvent *event)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
