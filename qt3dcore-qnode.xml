<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNode Class</db:title>
<db:subtitle>Qt3DCore::QNode</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> is the base class of all Qt3D node classes used to build a Qt3D scene.</db:para>
<db:para>This class was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNode</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3dcore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3dcore-qcomponent.xml" xlink:role="class">Qt3DCore::QComponent</db:link>, <db:link xlink:href="qt3dcore-qentity.xml" xlink:role="class">Qt3DCore::QEntity</db:link>, <db:link xlink:href="qt3dinput-qabstractactioninput.xml" xlink:role="class">Qt3DInput::QAbstractActionInput</db:link>, <db:link xlink:href="qt3dinput-qabstractaxisinput.xml" xlink:role="class">Qt3DInput::QAbstractAxisInput</db:link>, <db:link xlink:href="qt3dinput-qabstractphysicaldevice.xml" xlink:role="class">Qt3DInput::QAbstractPhysicalDevice</db:link>, <db:link xlink:href="qt3dinput-qaction.xml" xlink:role="class">Qt3DInput::QAction</db:link>, <db:link xlink:href="qt3dinput-qaxis.xml" xlink:role="class">Qt3DInput::QAxis</db:link>, <db:link xlink:href="qt3dinput-qaxissetting.xml" xlink:role="class">Qt3DInput::QAxisSetting</db:link>, <db:link xlink:href="qt3drender-qabstracttexture.xml" xlink:role="class">Qt3DRender::QAbstractTexture</db:link>, <db:link xlink:href="qt3drender-qabstracttextureimage.xml" xlink:role="class">Qt3DRender::QAbstractTextureImage</db:link>, <db:link xlink:href="qt3drender-qattribute.xml" xlink:role="class">Qt3DRender::QAttribute</db:link>, <db:link xlink:href="qt3drender-qbuffer.xml" xlink:role="class">Qt3DRender::QBuffer</db:link>, <db:link xlink:href="qt3drender-qeffect.xml" xlink:role="class">Qt3DRender::QEffect</db:link>, <db:link xlink:href="qt3drender-qfilterkey.xml" xlink:role="class">Qt3DRender::QFilterKey</db:link>, <db:link xlink:href="qt3drender-qframegraphnode.xml" xlink:role="class">Qt3DRender::QFrameGraphNode</db:link>, <db:link xlink:href="qt3drender-qgeometry.xml" xlink:role="class">Qt3DRender::QGeometry</db:link>, <db:link xlink:href="qt3drender-qparameter.xml" xlink:role="class">Qt3DRender::QParameter</db:link>, <db:link xlink:href="qt3drender-qpickingsettings.xml" xlink:role="class">Qt3DRender::QPickingSettings</db:link>, <db:link xlink:href="qt3drender-qrenderpass.xml" xlink:role="class">Qt3DRender::QRenderPass</db:link>, <db:link xlink:href="qt3drender-qrenderstate.xml" xlink:role="class">Qt3DRender::QRenderState</db:link>, <db:link xlink:href="qt3drender-qrendertargetoutput.xml" xlink:role="class">Qt3DRender::QRenderTargetOutput</db:link>, <db:link xlink:href="qt3drender-qshaderprogram.xml" xlink:role="class">Qt3DRender::QShaderProgram</db:link>, and <db:link xlink:href="qt3drender-qtechnique.xml" xlink:role="class">Qt3DRender::QTechnique</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The owernship of <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> is determined by the <db:link xlink:href="qobject.xml">QObject</db:link> parent/child relationship between nodes. By itself, a <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> has no visual appearance and no particular meaning, it is there as a way of building a node based tree structure.</db:para>
<db:para>The parent of a <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> instance can only be another <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> instance.</db:para>
<db:para>Each <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> instance has a unique id that allows it to be recognizable from other instances.</db:para>
<db:para>When properties are defined on a <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> subclass, their NOTIFY signal will automatically generate notifications that the Qt3D backend aspects will receive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qentity.xml">QEntity</db:link></db:member>
<db:member><db:link xlink:href="qt3dcore-qcomponent.xml">QComponent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:para>Holds the <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> enabled flag. By default a <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> is always enabled.</db:para>
<db:note>
<db:para>the interpretation of what enabled means is aspect-dependent. Even if enabled is set to <db:code>false</db:code>, some aspects may still consider the node in some manner. This is documented on a class by class basis.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>isEnabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">enabledChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enabled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="parent-prop">
<db:title>parent : Qt3DCore::QNode*</db:title>
<db:para>Holds the immediate <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> parent, or null if the node has no parent.</db:para>
<db:para>Setting the parent will notify the backend aspects about current <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> instance's parent change.</db:para>
<db:note>
<db:para>if <db:code role="parameter">parent</db:code> happens to be null, this will actually notify that the current <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> instance was removed from the scene.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3dcore-qnode.xml">Qt3DCore::QNode</db:link></db:type> *<db:emphasis role="bold">parentNode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setParent</db:emphasis>(<db:type><db:link xlink:href="qt3dcore-qnode.xml">Qt3DCore::QNode</db:link></db:type> *<db:emphasis>parent</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">parentChanged</db:emphasis>(<db:type><db:link xlink:href="qobject.xml#QObject">QObject</db:link></db:type> *<db:emphasis>parent</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNode">
<db:title>[explicit] QNode::QNode(Qt3DCore::QNode *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Creates a new <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> instance with parent <db:code role="parameter">parent</db:code>.</db:para>
<db:note>
<db:para>The backend aspects will be notified that a <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> instance is part of the scene only if it has a parent; unless this is the root node of the Qt3D scene.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#setParent">setParent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blockNotifications">
<db:title>bool QNode::blockNotifications(bool <db:emphasis>block</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">block</db:code> is <db:code>true</db:code>, property change notifications sent by this object to aspects are blocked. If <db:code role="parameter">block</db:code> is <db:code>false</db:code>, no such blocking will occur.</db:para>
<db:para>The return value is the previous value of <db:link xlink:href="qt3dcore-qnode.xml#notificationsBlocked">notificationsBlocked</db:link>().</db:para>
<db:para>Note that the other notification types will be sent even if the notifications for this object have been blocked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qnode.xml#notificationsBlocked">notificationsBlocked</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="childNodes">
<db:title>Qt3DCore::QNodeVector QNode::childNodes() const</db:title>
<db:para>Returns a list filled with the <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> children of the current <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> instance.</db:para>
</db:section>
<db:section xml:id="id">
<db:title>Qt3DCore::QNodeId QNode::id() const</db:title>
<db:para>Returns the id that uniquely identifies the <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> instance.</db:para>
</db:section>
<db:section xml:id="nodeDestroyed">
<db:title>void QNode::nodeDestroyed()</db:title>
<db:para>emitted when the node is destroyed.</db:para>
</db:section>
<db:section xml:id="notificationsBlocked">
<db:title>bool QNode::notificationsBlocked() const</db:title>
<db:para>Returns <db:code>true</db:code> if aspect notifications are blocked; otherwise returns <db:code>false</db:code>. By default, notifications are <db:emphasis>not</db:emphasis> blocked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qnode.xml#blockNotifications">blockNotifications</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="notifyObservers">
<db:title>[protected] void QNode::notifyObservers(const Qt3DCore::QSceneChangePtr &amp;<db:emphasis>change</db:emphasis>)</db:title>
<db:para>Sends the <db:code role="parameter">change</db:code> <db:link xlink:href="qt3dcore-qscenechange.xml#QSceneChangePtr-typedef">QSceneChangePtr</db:link> to any QBackendNodes in the registered aspects that correspond to this <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link>.</db:para>
<db:para>For the common case of a <db:link xlink:href="qobject.xml">QObject</db:link> property change, <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> handles this for you automatically by sending a <db:link xlink:href="qt3dcore-qpropertyupdatedchange.xml">QPropertyUpdatedChange</db:link> event to the backend nodes. You only need to call this function if you wish to send a specific type of change in place of the automatic handling.</db:para>
</db:section>
<db:section xml:id="sceneChangeEvent">
<db:title>[virtual protected] void QNode::sceneChangeEvent(const Qt3DCore::QSceneChangePtr &amp;<db:emphasis>change</db:emphasis>)</db:title>
<db:para>Called when one or more backend aspects sends a notification <db:code role="parameter">change</db:code> to the current <db:link xlink:href="qt3dcore-qnode.xml">Qt3DCore::QNode</db:link> instance.</db:para>
<db:note>
<db:para>This method should be reimplemented in your subclasses to properly handle the <db:code role="parameter">change</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QNodePtr-typedef">
<db:title>QNodePtr</db:title>
<db:para>A shared pointer for <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link>.</db:para>
</db:section>
<db:section xml:id="QNodeVector-typedef">
<db:title>QNodeVector</db:title>
<db:para>List of <db:link xlink:href="qt3dcore-qnode.xml">QNode</db:link> pointers.</db:para>
</db:section>
<db:section xml:id="qIdForNode">
<db:title>Qt3DCore::QNodeId qIdForNode(Qt3DCore::QNode *<db:emphasis>node</db:emphasis>)</db:title>
<db:para>Returns node id for <db:code role="parameter">node</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
