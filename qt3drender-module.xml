<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D Render C++ Classes</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Qt 3D Render module contains functionality to support 2D and 3D rendering using Qt 3D.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt 3D Render module contains functionality to support 2D and 3D rendering using Qt 3D.</db:para>
<db:section xml:id="namespaces">
<db:title>Namespaces</db:title>
<db:variablelist role="namespaces">
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender.xml" xlink:role="namespace">Qt3DRender</db:link></db:term>
<db:listitem>
<db:para>Contains classes that enable 2D and 3D rendering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-render.xml" xlink:role="namespace">Qt3DRender::Render</db:link></db:term>
<db:listitem>
<db:para>Namespace used for accessing the classes Renderer and QRenderPlugin.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="classes">
<db:title>Classes</db:title>
<db:variablelist role="classes">
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qabstractlight.xml" xlink:role="class">Qt3DRender::QAbstractLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a QAbstractLight object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qabstractraycaster.xml" xlink:role="class">Qt3DRender::QAbstractRayCaster</db:link></db:term>
<db:listitem>
<db:para>An abstract base class for ray casting in 3d scenes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qabstracttexture.xml" xlink:role="class">Qt3DRender::QAbstractTexture</db:link></db:term>
<db:listitem>
<db:para>A base class to be used to provide textures.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qabstracttextureimage.xml" xlink:role="class">Qt3DRender::QAbstractTextureImage</db:link></db:term>
<db:listitem>
<db:para>Encapsulates the necessary information to create an OpenGL texture image.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qalphacoverage.xml" xlink:role="class">Qt3DRender::QAlphaCoverage</db:link></db:term>
<db:listitem>
<db:para>Enable alpha-to-coverage multisampling mode.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qalphatest.xml" xlink:role="class">Qt3DRender::QAlphaTest</db:link></db:term>
<db:listitem>
<db:para>The QAlphaTest class specify alpha reference test.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qblendequation.xml" xlink:role="class">Qt3DRender::QBlendEquation</db:link></db:term>
<db:listitem>
<db:para>The QBlendEquation class specifies the equation used for both the RGB blend equation and the Alpha blend equation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qblendequationarguments.xml" xlink:role="class">Qt3DRender::QBlendEquationArguments</db:link></db:term>
<db:listitem>
<db:para>Encapsulates blending information: specifies how the incoming values (what's going to be drawn) are going to affect the existing values (what is already drawn).</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qblitframebuffer.xml" xlink:role="class">Qt3DRender::QBlitFramebuffer</db:link></db:term>
<db:listitem>
<db:para>FrameGraph node to transfer a rectangle of pixel values from one region of a render target to another.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qbuffercapture.xml" xlink:role="class">Qt3DRender::QBufferCapture</db:link></db:term>
<db:listitem>
<db:para>Exchanges buffer data between GPU and CPU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcamera.xml" xlink:role="class">Qt3DRender::QCamera</db:link></db:term>
<db:listitem>
<db:para>The QCamera class defines a view point through which the scene will be rendered.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcameralens.xml" xlink:role="class">Qt3DRender::QCameraLens</db:link></db:term>
<db:listitem>
<db:para>Qt3DRender::QCameraLens specifies the projection matrix that will be used to define a Camera for a 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcameraselector.xml" xlink:role="class">Qt3DRender::QCameraSelector</db:link></db:term>
<db:listitem>
<db:para>Class to allow for selection of camera to be used.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qclearbuffers.xml" xlink:role="class">Qt3DRender::QClearBuffers</db:link></db:term>
<db:listitem>
<db:para>Class to clear buffers.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qclipplane.xml" xlink:role="class">Qt3DRender::QClipPlane</db:link></db:term>
<db:listitem>
<db:para>Enables an additional OpenGL clipping plane that can be in shaders using gl_ClipDistance.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcolormask.xml" xlink:role="class">Qt3DRender::QColorMask</db:link></db:term>
<db:listitem>
<db:para>Allows specifying which color components should be written to the currently bound frame buffer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcomputecommand.xml" xlink:role="class">Qt3DRender::QComputeCommand</db:link></db:term>
<db:listitem>
<db:para>QComponent to issue work for the compute shader on GPU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcullface.xml" xlink:role="class">Qt3DRender::QCullFace</db:link></db:term>
<db:listitem>
<db:para>The QCullFace class specifies whether front or back face culling is enabled.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdebugoverlay.xml" xlink:role="class">Qt3DRender::QDebugOverlay</db:link></db:term>
<db:listitem>
<db:para>Enables a visual overlay with scene details.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdepthrange.xml" xlink:role="class">Qt3DRender::QDepthRange</db:link></db:term>
<db:listitem>
<db:para>Enables remapping depth values written into the depth buffer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdepthtest.xml" xlink:role="class">Qt3DRender::QDepthTest</db:link></db:term>
<db:listitem>
<db:para>The QDepthTest class tests the fragment shader's depth value against the depth of a sample being written to.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdirectionallight.xml" xlink:role="class">Qt3DRender::QDirectionalLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Directional Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdispatchcompute.xml" xlink:role="class">Qt3DRender::QDispatchCompute</db:link></db:term>
<db:listitem>
<db:para>FrameGraph node to issue work for the compute shader on GPU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdithering.xml" xlink:role="class">Qt3DRender::QDithering</db:link></db:term>
<db:listitem>
<db:para>Enable dithering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qeffect.xml" xlink:role="class">Qt3DRender::QEffect</db:link></db:term>
<db:listitem>
<db:para>The base class for effects in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qenvironmentlight.xml" xlink:role="class">Qt3DRender::QEnvironmentLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate an environment light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qfilterkey.xml" xlink:role="class">Qt3DRender::QFilterKey</db:link></db:term>
<db:listitem>
<db:para>The QFilterKey class provides storage for filter keys and their values.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qframegraphnode.xml" xlink:role="class">Qt3DRender::QFrameGraphNode</db:link></db:term>
<db:listitem>
<db:para>Base class of all FrameGraph configuration nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qfrontface.xml" xlink:role="class">Qt3DRender::QFrontFace</db:link></db:term>
<db:listitem>
<db:para>The QFrontFace class defines front and back facing polygons.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qfrustumculling.xml" xlink:role="class">Qt3DRender::QFrustumCulling</db:link></db:term>
<db:listitem>
<db:para>Enable frustum culling for the FrameGraph.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qgeometryrenderer.xml" xlink:role="class">Qt3DRender::QGeometryRenderer</db:link></db:term>
<db:listitem>
<db:para>Encapsulates geometry rendering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qgraphicsapifilter.xml" xlink:role="class">Qt3DRender::QGraphicsApiFilter</db:link></db:term>
<db:listitem>
<db:para>The QGraphicsApiFilter class identifies the API required for the attached QTechnique.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qlayer.xml" xlink:role="class">Qt3DRender::QLayer</db:link></db:term>
<db:listitem>
<db:para>The QLayer class provides a way of filtering which entities will be rendered.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qlayerfilter.xml" xlink:role="class">Qt3DRender::QLayerFilter</db:link></db:term>
<db:listitem>
<db:para>Controls layers drawn in a frame graph branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qlevelofdetail.xml" xlink:role="class">Qt3DRender::QLevelOfDetail</db:link></db:term>
<db:listitem>
<db:para>The QLevelOfDetail class provides a way of controlling the complexity of rendered entities based on their size on the screen.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qlevelofdetailboundingsphere.xml" xlink:role="class">Qt3DRender::QLevelOfDetailBoundingSphere</db:link></db:term>
<db:listitem>
<db:para>The QLevelOfDetailBoundingSphere class provides a simple spherical volume, defined by its center and radius.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qlevelofdetailswitch.xml" xlink:role="class">Qt3DRender::QLevelOfDetailSwitch</db:link></db:term>
<db:listitem>
<db:para>Provides a way of enabling child entities based on distance or screen size.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qlinewidth.xml" xlink:role="class">Qt3DRender::QLineWidth</db:link></db:term>
<db:listitem>
<db:para>Specifies the width of rasterized lines.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qmaterial.xml" xlink:role="class">Qt3DRender::QMaterial</db:link></db:term>
<db:listitem>
<db:para>Provides an abstract class that should be the base of all material component classes in a scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qmemorybarrier.xml" xlink:role="class">Qt3DRender::QMemoryBarrier</db:link></db:term>
<db:listitem>
<db:para>Class to emplace a memory barrier.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qmesh.xml" xlink:role="class">Qt3DRender::QMesh</db:link></db:term>
<db:listitem>
<db:para>A custom mesh loader.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qmultisampleantialiasing.xml" xlink:role="class">Qt3DRender::QMultiSampleAntiAliasing</db:link></db:term>
<db:listitem>
<db:para>Enable multisample antialiasing.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qnodepthmask.xml" xlink:role="class">Qt3DRender::QNoDepthMask</db:link></db:term>
<db:listitem>
<db:para>Disable depth write.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qnodraw.xml" xlink:role="class">Qt3DRender::QNoDraw</db:link></db:term>
<db:listitem>
<db:para>When a Qt3DRender::QNoDraw node is present in a FrameGraph branch, this prevents the renderer from rendering any primitive.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qnopicking.xml" xlink:role="class">Qt3DRender::QNoPicking</db:link></db:term>
<db:listitem>
<db:para>When a Qt3DRender::QNoPicking node is present in a FrameGraph branch, this prevents the render aspect from performing picking selection for the given branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qobjectpicker.xml" xlink:role="class">Qt3DRender::QObjectPicker</db:link></db:term>
<db:listitem>
<db:para>The QObjectPicker class instantiates a component that can be used to interact with a QEntity by a process known as picking.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpaintedtextureimage.xml" xlink:role="class">Qt3DRender::QPaintedTextureImage</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTextureImage that can be written through a QPainter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qparameter.xml" xlink:role="class">Qt3DRender::QParameter</db:link></db:term>
<db:listitem>
<db:para>Provides storage for a name and value pair. This maps to a shader uniform.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpickevent.xml" xlink:role="class">Qt3DRender::QPickEvent</db:link></db:term>
<db:listitem>
<db:para>The QPickEvent class holds information when an object is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpicklineevent.xml" xlink:role="class">Qt3DRender::QPickLineEvent</db:link></db:term>
<db:listitem>
<db:para>The QPickLineEvent class holds information when a segment of a line is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpickpointevent.xml" xlink:role="class">Qt3DRender::QPickPointEvent</db:link></db:term>
<db:listitem>
<db:para>The QPickPointEvent class holds information when a segment of a point cloud is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpicktriangleevent.xml" xlink:role="class">Qt3DRender::QPickTriangleEvent</db:link></db:term>
<db:listitem>
<db:para>The QPickTriangleEvent class holds information when a triangle is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpickingproxy.xml" xlink:role="class">Qt3DRender::QPickingProxy</db:link></db:term>
<db:listitem>
<db:para>Can be used to provide an alternate QGeometryView used only for picking.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpickingsettings.xml" xlink:role="class">Qt3DRender::QPickingSettings</db:link></db:term>
<db:listitem>
<db:para>The QPickingSettings class specifies how entity picking is handled.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpointlight.xml" xlink:role="class">Qt3DRender::QPointLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Point Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpointsize.xml" xlink:role="class">Qt3DRender::QPointSize</db:link></db:term>
<db:listitem>
<db:para>Specifies the size of rasterized points. May either be set statically or by shader programs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpolygonoffset.xml" xlink:role="class">Qt3DRender::QPolygonOffset</db:link></db:term>
<db:listitem>
<db:para>The QPolygonOffset class sets the scale and steps to calculate depth values for polygon offsets.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qproximityfilter.xml" xlink:role="class">Qt3DRender::QProximityFilter</db:link></db:term>
<db:listitem>
<db:para>Select entities which are within a distance threshold of a target entity.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrastermode.xml" xlink:role="class">Qt3DRender::QRasterMode</db:link></db:term>
<db:listitem>
<db:para>The QRasterMode render state allows to control the type of rasterization to be performed.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qraycaster.xml" xlink:role="class">Qt3DRender::QRayCaster</db:link></db:term>
<db:listitem>
<db:para>Qt3DRender::QRayCaster is used to perform ray casting tests in 3d world coordinates.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qraycasterhit.xml" xlink:role="class">Qt3DRender::QRayCasterHit</db:link></db:term>
<db:listitem>
<db:para>Details of a hit when casting a ray through a model.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderaspect.xml" xlink:role="class">Qt3DRender::QRenderAspect</db:link></db:term>
<db:listitem>
<db:para>The QRenderAspect class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendercapabilities.xml" xlink:role="class">Qt3DRender::QRenderCapabilities</db:link></db:term>
<db:listitem>
<db:para>The QRenderCapabilities class holds settings related to available rendering engines.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendercapture.xml" xlink:role="class">Qt3DRender::QRenderCapture</db:link></db:term>
<db:listitem>
<db:para>Frame graph node for render capture.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendercapturereply.xml" xlink:role="class">Qt3DRender::QRenderCaptureReply</db:link></db:term>
<db:listitem>
<db:para>Receives the result of render capture request.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderpass.xml" xlink:role="class">Qt3DRender::QRenderPass</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Render Pass.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderpassfilter.xml" xlink:role="class">Qt3DRender::QRenderPassFilter</db:link></db:term>
<db:listitem>
<db:para>Provides storage for vectors of Filter Keys and Parameters.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendersettings.xml" xlink:role="class">Qt3DRender::QRenderSettings</db:link></db:term>
<db:listitem>
<db:para>The QRenderSettings class holds settings related to rendering process and host the active FrameGraph.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderstate.xml" xlink:role="class">Qt3DRender::QRenderState</db:link></db:term>
<db:listitem>
<db:para>An abstract base class for all render states.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderstateset.xml" xlink:role="class">Qt3DRender::QRenderStateSet</db:link></db:term>
<db:listitem>
<db:para>The QRenderStateSet FrameGraph node offers a way of specifying a set of QRenderState objects to be applied during the execution of a framegraph branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendersurfaceselector.xml" xlink:role="class">Qt3DRender::QRenderSurfaceSelector</db:link></db:term>
<db:listitem>
<db:para>Provides a way of specifying the render surface.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendertarget.xml" xlink:role="class">Qt3DRender::QRenderTarget</db:link></db:term>
<db:listitem>
<db:para>The QRenderTarget class encapsulates a target (usually a frame buffer object) which the renderer can render into.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendertargetoutput.xml" xlink:role="class">Qt3DRender::QRenderTargetOutput</db:link></db:term>
<db:listitem>
<db:para>The QRenderTargetOutput class allows the specification of an attachment of a render target (whether it is a color texture, a depth texture, etc... ).</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendertargetselector.xml" xlink:role="class">Qt3DRender::QRenderTargetSelector</db:link></db:term>
<db:listitem>
<db:para>Provides a way of specifying a render target.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qsceneloader.xml" xlink:role="class">Qt3DRender::QSceneLoader</db:link></db:term>
<db:listitem>
<db:para>Provides the facility to load an existing Scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qscissortest.xml" xlink:role="class">Qt3DRender::QScissorTest</db:link></db:term>
<db:listitem>
<db:para>The QScissorTest class discards fragments that fall outside of a certain rectangular portion of the screen.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qscreenraycaster.xml" xlink:role="class">Qt3DRender::QScreenRayCaster</db:link></db:term>
<db:listitem>
<db:para>Performe ray casting test based on screen coordinates.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qseamlesscubemap.xml" xlink:role="class">Qt3DRender::QSeamlessCubemap</db:link></db:term>
<db:listitem>
<db:para>Enables seamless cubemap texture filtering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qsetfence.xml" xlink:role="class">Qt3DRender::QSetFence</db:link></db:term>
<db:listitem>
<db:para>FrameGraphNode used to insert a fence in the graphics command stream.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qshaderdata.xml" xlink:role="class">Qt3DRender::QShaderData</db:link></db:term>
<db:listitem>
<db:para>Provides a way of specifying values of a Uniform Block or a shader structure.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qshaderimage.xml" xlink:role="class">Qt3DRender::QShaderImage</db:link></db:term>
<db:listitem>
<db:para>Provides Image access to shader programs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qshaderprogram.xml" xlink:role="class">Qt3DRender::QShaderProgram</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Shader Program.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qshaderprogrambuilder.xml" xlink:role="class">Qt3DRender::QShaderProgramBuilder</db:link></db:term>
<db:listitem>
<db:para>Generates a Shader Program content from loaded graphs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qsharedgltexture.xml" xlink:role="class">Qt3DRender::QSharedGLTexture</db:link></db:term>
<db:listitem>
<db:para>Allows to use a textureId from a separate OpenGL context in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qsortpolicy.xml" xlink:role="class">Qt3DRender::QSortPolicy</db:link></db:term>
<db:listitem>
<db:para>Provides storage for the sort types to be used.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qspotlight.xml" xlink:role="class">Qt3DRender::QSpotLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Spot Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstencilmask.xml" xlink:role="class">Qt3DRender::QStencilMask</db:link></db:term>
<db:listitem>
<db:para>The QStencilMask class controls the front and back writing of individual bits in the stencil planes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstenciloperation.xml" xlink:role="class">Qt3DRender::QStencilOperation</db:link></db:term>
<db:listitem>
<db:para>The QStencilOperation class specifies stencil operation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstenciloperationarguments.xml" xlink:role="class">Qt3DRender::QStencilOperationArguments</db:link></db:term>
<db:listitem>
<db:para>The QStencilOperationArguments class sets the actions to be taken when stencil and depth tests fail.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstenciltest.xml" xlink:role="class">Qt3DRender::QStencilTest</db:link></db:term>
<db:listitem>
<db:para>The QStencilTest class specifies arguments for the stecil test.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstenciltestarguments.xml" xlink:role="class">Qt3DRender::QStencilTestArguments</db:link></db:term>
<db:listitem>
<db:para>The QStencilTestArguments class specifies arguments for stencil test.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qsubtreeenabler.xml" xlink:role="class">Qt3DRender::QSubtreeEnabler</db:link></db:term>
<db:listitem>
<db:para>Enables or disables entire subtrees of framegraph nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtechnique.xml" xlink:role="class">Qt3DRender::QTechnique</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Technique.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtechniquefilter.xml" xlink:role="class">Qt3DRender::QTechniqueFilter</db:link></db:term>
<db:listitem>
<db:para>A QFrameGraphNode used to select QTechniques to use.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture1d.xml" xlink:role="class">Qt3DRender::QTexture1D</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target1D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture1darray.xml" xlink:role="class">Qt3DRender::QTexture1DArray</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target1DArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture2d.xml" xlink:role="class">Qt3DRender::QTexture2D</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target2D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture2darray.xml" xlink:role="class">Qt3DRender::QTexture2DArray</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target2DArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture2dmultisample.xml" xlink:role="class">Qt3DRender::QTexture2DMultisample</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target2DMultisample target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture2dmultisamplearray.xml" xlink:role="class">Qt3DRender::QTexture2DMultisampleArray</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target2DMultisampleArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture3d.xml" xlink:role="class">Qt3DRender::QTexture3D</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target3D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturebuffer.xml" xlink:role="class">Qt3DRender::QTextureBuffer</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a TargetBuffer target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturecubemap.xml" xlink:role="class">Qt3DRender::QTextureCubeMap</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a TargetCubeMap target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturecubemaparray.xml" xlink:role="class">Qt3DRender::QTextureCubeMapArray</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a TargetCubeMapArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturedata.xml" xlink:role="class">Qt3DRender::QTextureData</db:link></db:term>
<db:listitem>
<db:para>The QTextureData class stores texture information such as the target, height, width, depth, layers, wrap, and if mipmaps are enabled.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturedataupdate.xml" xlink:role="class">Qt3DRender::QTextureDataUpdate</db:link></db:term>
<db:listitem>
<db:para>QTextureDataUpdate holds content and information required to perform partial updates of a texture content.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturegenerator.xml" xlink:role="class">Qt3DRender::QTextureGenerator</db:link></db:term>
<db:listitem>
<db:para>Provides the image data for a texture.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtextureimage.xml" xlink:role="class">Qt3DRender::QTextureImage</db:link></db:term>
<db:listitem>
<db:para>Encapsulates the necessary information to create an OpenGL texture image from an image source.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtextureimagedata.xml" xlink:role="class">Qt3DRender::QTextureImageData</db:link></db:term>
<db:listitem>
<db:para>QTextureImageData stores data representing a texture.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtextureimagedatagenerator.xml" xlink:role="class">Qt3DRender::QTextureImageDataGenerator</db:link></db:term>
<db:listitem>
<db:para>Provides texture image data for QAbstractTextureImage.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtextureloader.xml" xlink:role="class">Qt3DRender::QTextureLoader</db:link></db:term>
<db:listitem>
<db:para>Handles the texture loading and setting the texture's properties.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturerectangle.xml" xlink:role="class">Qt3DRender::QTextureRectangle</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a TargetRectangle target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturewrapmode.xml" xlink:role="class">Qt3DRender::QTextureWrapMode</db:link></db:term>
<db:listitem>
<db:para>Defines the wrap mode a Qt3DRender::QAbstractTexture should apply to a texture.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qviewport.xml" xlink:role="class">Qt3DRender::QViewport</db:link></db:term>
<db:listitem>
<db:para>A viewport on the Qt3D Scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qwaitfence.xml" xlink:role="class">Qt3DRender::QWaitFence</db:link></db:term>
<db:listitem>
<db:para>FrameGraphNode used to wait for a fence in the graphics command stream to become signaled.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Qt 3D Render module provides an aspect, components, and other supporting types necessary to implement 2D and 3D rendering as part of the Qt 3D framework.</db:para>
<db:para>To use classes from this module, add this directive into the C++ files:</db:para>
<db:programlisting language="cpp">#include &amp;lt;Qt3DRender&amp;gt;
</db:programlisting>
<db:para>To link against the corresponding C++ library, add the following to your qmake project file:</db:para>
<db:programlisting language="cpp" role="bad">QT += 3drender
</db:programlisting>
<db:para>Classes, types, and functions are declared under the <db:link xlink:href="qt3drender-module.xml">Qt3DRender</db:link> namespace.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>The Qt 3D Render aspect offers support for data-driven configuration as described in <db:link xlink:href="qt3drender-framegraph.xml">Qt 3D Render Framegraph</db:link>.</db:para>
</db:section>
<db:section xml:id="selecting-a-rendering-backend">
<db:title>Selecting a Rendering Backend</db:title>
<db:para>The Render aspect comes with two rendering backends.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>OpenGL backend (ES 2, ES 3.2, GL 2, GL 3, GL 3.2, GL 4.3)</db:para>
</db:listitem>
<db:listitem>
<db:para>RHI backend (ES 2, GL, DirectX, Vulkan, Metal)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you are targeting OpenGL exclusively and are using specific OpenGL features, you might be better off using the OpenGL backend. This is the OpenGL backend that Qt 3D exclusively used in the Qt 5 series.</db:para>
<db:para>For cases where you are not using specific OpenGL features and want to target different platforms that might have deprecated OpenGL, using the RHI backend is a better alternative.</db:para>
<db:para>To select your rendering backend, the environment variable QT3D_RENDERER is to be set to either &quot;opengl&quot; or &quot;rhi&quot;. Defaults to the OpenGL backend.</db:para>
<db:para>When using the RHI backend, you can further force the internal RHI backend by setting the QSG_RHI_BACKEND to one of the following values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>opengl -&gt; RHI OpenGL backend</db:para>
</db:listitem>
<db:listitem>
<db:para>gl -&gt; RHI OpenGL backend</db:para>
</db:listitem>
<db:listitem>
<db:para>gles2 -&gt; RHI OpenGL backend</db:para>
</db:listitem>
<db:listitem>
<db:para>metal -&gt; RHI Metal backend</db:para>
</db:listitem>
<db:listitem>
<db:para>vulkan -&gt; RHI Vulkan backend</db:para>
</db:listitem>
<db:listitem>
<db:para>d3d11 -&gt; RHI DirectX 11 backend</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If not specified, RHI will default to what it deduces to be the best backend for the platform.</db:para>
</db:section>
<db:section xml:id="reference">
<db:title>Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt3drender-module.xml">Qt 3D Render C++ Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt3d-examples.xml">Qt 3D Examples</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:article>
