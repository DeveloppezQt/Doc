<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for macOS - Specific Issues</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A description of issues with Qt that are specific to macOS.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This page outlines the main issues regarding macOS support in Qt. macOS terminologies and specific processes are found at <db:link xlink:href="https://developer.apple.com/">https://developer.apple.com/</db:link>.</db:para>
<db:section xml:id="aqua">
<db:title>Aqua</db:title>
<db:para>Aqua is an essential part of the macOS platform. As with Cocoa and Carbon, Qt provides widgets that look like those described in the Human Interface Descriptions. Qt's widgets use HIThemes to implement the look and feel. In other words, we use Apple's own APIs for doing the rendering. More documentation about Aqua is found at the <db:link xlink:href="http://developer.apple.com/library/mac/#documentation/UserExperience/Conceptual/AppleHIGuidelines/Intro/Intro.html#//apple_ref/doc/uid/20000957">macOS Human Interface Guidelines</db:link>.</db:para>
<db:para>The <db:link xlink:href="gallery.xml">Qt Widget Gallery</db:link> page contains sample images of applications using the macOS platform theme.</db:para>
<db:section xml:id="qt-attributes-for-macos">
<db:title>Qt Attributes for macOS</db:title>
<db:para>The following lists a set of useful attributes that can be used to tweak applications on macOS:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_MacPluginApplication</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_DontUseNativeMenuBar</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_MacDontSwapCtrlAndMeta</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_MacNoClickThrough</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_MacOpaqueSizeGrip</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_MacShowFocusRect</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_MacNormalSize</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_MacSmallSize</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_MacMiniSize</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_MacVariableSize</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_MacBrushedMetal</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_MacAlwaysShowToolWindow</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_MacFrameworkScaled</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_MacNoShadow</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#WindowType-enum">Qt::Sheet</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#WindowType-enum">Qt::Drawer</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#WindowType-enum">Qt::MacWindowToolBarButtonHint</db:link>,</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmainwindow.xml#unifiedTitleAndToolBarOnMac-prop">QMainWindow::unifiedTitleAndToolBarOnMac</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>macOS always double buffers the screen, therefore, the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_PaintOnScreen</db:link> attribute has no effect. Also it is impossible to paint outside of a paint event so Qt::WA_PaintOutsidePaintEvent has no effect either.</db:para>
</db:section>
<db:section xml:id="right-mouse-clicks">
<db:title>Right Mouse Clicks</db:title>
<db:para>The <db:link xlink:href="qcontextmenuevent.xml">QContextMenuEvent</db:link> class provides right mouse click support for macOS applications. This will map to a context menu event, for example, a menu that will display a pop-up selection. This is the most common use of right mouse clicks, and maps to a control-click with the macOS one-button mouse support.</db:para>
</db:section>
<db:section xml:id="menu-bar">
<db:title>Menu Bar</db:title>
<db:para>Qt detects menu bars and turns them into Mac native menu bars. Fitting this into existing Qt applications is normally automatic. However, if you have special needs, the Qt implementation currently selects a menu bar by starting at the active window (for example, <db:link xlink:href="qguiapplication.xml#focusWindow">QGuiApplication::focusWindow</db:link>()) and applying the following tests:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>If the window has a <db:link xlink:href="qmenubar.xml">QMenuBar</db:link>, then it is used.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the window is modal, then its menu bar is used. If no menu bar is specified, then a default menu bar is used (as documented below).</db:para>
</db:listitem>
<db:listitem>
<db:para>If the window has no parent, then the default menu bar is used (as documented below).</db:para>
</db:listitem>
</db:orderedlist>
<db:para>These tests are followed all the way up the parent window chain until one of the above rules is satisfied. If all else fails, a default menu bar will be created. The default menu bar on Qt is an empty menu bar. However, you can create a different default menu bar by creating a parentless <db:link xlink:href="qmenubar.xml">QMenuBar</db:link>. The first one created will be designated the default menu bar and will be used whenever a default menu bar is needed.</db:para>
<db:para>Using native menu bars introduces certain limitations on Qt classes. The section with the <db:link xlink:href="macos-issues.xml#limitations">list of limitations</db:link> below has more information.</db:para>
<db:para>Qt provides support for the Global Menu Bar with <db:link xlink:href="qmenubar.xml">QMenuBar</db:link>. macOS users expect to have a menu bar at the top of the screen and Qt honors this.</db:para>
<db:para>Additionally, users expect certain conventions to be respected, for example the application menu should contain <db:emphasis role="bold">About</db:emphasis>, <db:emphasis role="bold">Preferences</db:emphasis>, <db:emphasis role="bold">Quit</db:emphasis>, and so on. Qt handles these conventions, although it does not provide a means of interacting directly with the application menu.</db:para>
<db:para>Each <db:link xlink:href="qaction.xml">QAction</db:link> has a <db:link xlink:href="qaction.xml#menuRole-prop">menuRole</db:link> property which controls the special placement of application menu items; however by default the menuRole is <db:link xlink:href="qaction.xml#MenuRole-enum">TextHeuristicRole</db:link> which mean the menu items will be auto-detected by their <db:link xlink:href="qaction.xml#text-prop">text</db:link>.</db:para>
<db:para>Other standard menu items such as <db:emphasis role="bold">Cut</db:emphasis>, <db:emphasis role="bold">Copy</db:emphasis>, <db:emphasis role="bold">Paste</db:emphasis> and <db:emphasis role="bold">Select All</db:emphasis> are applicable both in your application and in some native dialogs such as <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link>. It's important that you create these menu items with the standard shortcuts so that the corresponding editing features will be enabled in the dialogs. At this time there are no MenuRole identifiers for them, but they will be auto-detected just like the application menu items when the QAction has the default <db:link xlink:href="qaction.xml#MenuRole-enum">TextHeuristicRole</db:link>.</db:para>
</db:section>
<db:section xml:id="special-keys">
<db:title>Special Keys</db:title>
<db:para>To provide the expected behavior for Qt applications on macOS, the <db:link xlink:href="qt.xml#Key-enum">Qt::Key_Meta</db:link>, <db:link xlink:href="qt.xml#KeyboardModifier-enum">Qt::MetaModifier</db:link>, and <db:link xlink:href="qt.xml#Modifier-enum">Qt::META</db:link> enum values correspond to the Control keys on the standard Apple keyboard, and the <db:link xlink:href="qt.xml#Key-enum">Qt::Key_Control</db:link>, <db:link xlink:href="qt.xml#KeyboardModifier-enum">Qt::ControlModifier</db:link>, and <db:link xlink:href="qt.xml#Modifier-enum">Qt::CTRL</db:link> enum values correspond to the Command keys.</db:para>
</db:section>
<db:section xml:id="dock">
<db:title>Dock</db:title>
<db:para>Interaction with the dock is possible. The icon can be set by calling QWindow::setWindowIcon() from the main window in your application. The setWindowIcon() call can be made as often as necessary, providing an icon that can be easily updated.</db:para>
</db:section>
<db:section xml:id="accessiblity">
<db:title>Accessiblity</db:title>
<db:para>Many users interact with macOS with assistive devices. With Qt the aim is to make this automatic in your application so that it conforms to accepted practice on its platform. Qt uses Apple's accessibility framework to provide access to users with disabilities.</db:para>
</db:section>
</db:section>
<db:section xml:id="library-and-deployment-support">
<db:title>Library and Deployment Support</db:title>
<db:para>Qt provides support for macOS structures such as Frameworks and bundles. It is important to be aware of these structure as they directly affect the deployment of applications.</db:para>
<db:para>Qt provides a deploy tool, <db:link xlink:href="macos-deployment.xml#the-mac-deployment-tool">macdeployqt</db:link>, to simplify the deployment process. The <db:link xlink:href="macos-deployment.xml">Qt for macOS - Deployment</db:link> article covers the deployment process in more detail.</db:para>
<db:section xml:id="qt-libraries-as-frameworks">
<db:title>Qt Libraries as Frameworks</db:title>
<db:para>By default, Qt is built as a set of frameworks. Frameworks are the macOS preferred way of distributing libraries. The <db:link xlink:href="http://developer.apple.com/documentation/MacOSX/Conceptual/BPFrameworks/index.html">Apple's Framework Programming Guide</db:link> site has far more information about Frameworks.</db:para>
<db:para>It is important to remember that Frameworks always link with <db:emphasis>release</db:emphasis> versions of libraries. If the <db:emphasis>debug</db:emphasis> version of a Qt framework is desired, use the DYLD_IMAGE_SUFFIX environment variables to ensure that the debug version is loaded:</db:para>
<db:programlisting language="cpp">export DYLD_IMAGE_SUFFIX=_debug
</db:programlisting>
<db:para>Alternatively, you can temporarily swap your debug and release versions, which is documented in <db:link xlink:href="http://developer.apple.com/technotes/tn2004/tn2124.html#SECJUSTONELIB">Apple's &quot;Debugging Magic&quot; technical note</db:link>.</db:para>
<db:para>If you don't want to use frameworks, simply configure Qt with -no-framework.</db:para>
<db:programlisting language="cpp">./configure -no-framework
</db:programlisting>
</db:section>
<db:section xml:id="bundle-based-libraries">
<db:title>Bundle-Based Libraries</db:title>
<db:para>If you want to use some dynamic libraries in the macOS application bundle (the application directory), create a subdirectory named <db:emphasis>Frameworks</db:emphasis> in the application bundle directory and place your dynamic libraries there. The application will find a dynamic library if it has the install name <db:emphasis>@executable_path/../Frameworks/libname.dylib</db:emphasis>.</db:para>
<db:para>If you use qmake and Makefiles, use the QMAKE_LFLAGS_SONAME setting:</db:para>
<db:programlisting language="cpp">QMAKE_LFLAGS_SONAME  = -Wl,-install_name,@executable_path/../Frameworks/
</db:programlisting>
<db:para>Alternatively, you can modify the install name using the install_name_tool(1) on the command line.</db:para>
<db:para>The DYLD_LIBRARY_PATH environment variable will override these settings, and any other default paths, such as a lookup of dynamic libraries inside <db:emphasis>/usr/lib</db:emphasis> and similar default locations.</db:para>
<db:para>If you are using older versions of GDB you must run with the full path to the executable. Later versions allow you to pass the bundle name on the command line.</db:para>
</db:section>
<db:section xml:id="combining-libraries">
<db:title>Combining Libraries</db:title>
<db:para>If you want to build a new dynamic library combining the Qt 4 dynamic libraries, you need to introduce the ld -r flag. Then relocation information is stored in the output file, so that this file could be the subject of another ld run. This is done by setting the -r flag in the .pro file, and the LFLAGS settings.</db:para>
</db:section>
<db:section xml:id="initialization-order">
<db:title>Initialization Order</db:title>
<db:para>dyld(1) calls global static initializers in the order they are linked into the application. If a library links against Qt and references the globals in Qt (from global initializers in your own library), link the application against Qt before linking it against the library. Otherwise the result will be undefined because Qt's global initializers have not been called yet.</db:para>
</db:section>
</db:section>
<db:section xml:id="compile-time-flags">
<db:title>Compile-Time Flags</db:title>
<db:para>The following flags are helpful when you want to define macOS specific code:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Q_OS_DARWIN is defined when Qt detects you are on a Darwin-based system such as macOS or iOS.</db:para>
</db:listitem>
<db:listitem>
<db:para>Q_OS_MACOS is defined when you are on an macOS system.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Q_WS_MAC is no longer defined in Qt 5.</db:para>
</db:note>
<db:para>If you want to define code for specific versions of macOS, use the availability macros defined in <db:emphasis>/usr/include/AvailabilityMacros.h</db:emphasis>.</db:para>
<db:para>The <db:link xlink:href="qsysinfo.xml">QSysInfo</db:link> documentation has information about runtime version checking.</db:para>
</db:section>
<db:section xml:id="macos-native-api-access">
<db:title>macOS Native API Access</db:title>
<db:section xml:id="accessing-the-bundle-path">
<db:title>Accessing the Bundle Path</db:title>
<db:para>macOS applications are structured as a directory (ending with <db:emphasis>.app</db:emphasis>). This directory contains sub-directories and files. It may be useful to place items, such as plugins and online documentation, inside this bundle. The following code returns the path of the application bundle:</db:para>
<db:programlisting language="cpp">#ifdef Q_OS_MAC
    CFURLRef appUrlRef = CFBundleCopyBundleURL(CFBundleGetMainBundle());
    CFStringRef macPath = CFURLCopyFileSystemPath(appUrlRef,
                                           kCFURLPOSIXPathStyle);
    const char *pathPtr = CFStringGetCStringPtr(macPath,
                                           CFStringGetSystemEncoding());
    qDebug(&quot;Path = %s&quot;, pathPtr);
    CFRelease(appUrlRef);
    CFRelease(macPath);
#endif
</db:programlisting>
<db:note>
<db:para>When macOS is set to use Japanese, a bug causes this sequence to fail and return an empty string. Therefore, always test the returned string.</db:para>
</db:note>
<db:para>For more information about using the CFBundle API, visit <db:link xlink:href="http://developer.apple.com/documentation/CoreFoundation/Reference/CFBundleRef/index.html">Apple's Developer Website</db:link>.</db:para>
<db:para><db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>() can be used to determine the path of the binary within the bundle.</db:para>
</db:section>
<db:section xml:id="translating-the-application-menu-and-native-dialogs">
<db:title>Translating the Application Menu and Native Dialogs</db:title>
<db:para>The items in the Application Menu will be merged correctly for localized applications, but they will not show up translated until the application bundle contains a localized resource folder. to the application bundle.</db:para>
<db:para>Essentially, there needs to be a file called <db:emphasis>locversion.plist</db:emphasis>. Here is an example of an application with Norwegian localization:</db:para>
<db:programlisting language="cpp">&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple Computer//DTD PLIST 1.0//EN&quot;
&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;
&amp;lt;plist version=&quot;1.0&quot;&amp;gt;
&amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;LprojCompatibleVersion&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;123&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;LprojLocale&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;no&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;LprojRevisionLevel&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;1&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;LprojVersion&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;123&amp;lt;/string&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
</db:programlisting>
<db:para>Afterwards, when the application is run with the preferred language set to Norwegian, the menu items should display <db:emphasis role="bold">Avslutt</db:emphasis> instead of <db:emphasis role="bold">Quit</db:emphasis>.</db:para>
<db:para>The <db:link xlink:href="http://developer.apple.com/library/mac/#documentation/CoreFoundation/Conceptual/CFBundles/BundleTypes/BundleTypes.html#//apple_ref/doc/uid/10000123i-CH101-SW13">Bundle Programming Guide</db:link> contains information about bundles and the localized resource folder.</db:para>
</db:section>
<db:section xml:id="mixing-qt-with-native-code">
<db:title>Mixing Qt with Native Code</db:title>
<db:para>Two classes are available for adding native Cocoa views and controls inside a Qt application, or for embedding Qt into a native Cocoa application: <db:link xlink:href="qmaccocoaviewcontainer.xml">QMacCocoaViewContainer</db:link>, and <db:link xlink:href="qmacnativewidget.xml">QMacNativeWidget</db:link>.</db:para>
</db:section>
<db:section xml:id="using-native-cocoa-panels">
<db:title>Using Native Cocoa Panels</db:title>
<db:para>Qt's event dispatcher is more flexible than what Cocoa offers, and lets the user spin the event dispatcher (and running <db:link xlink:href="qeventloop.xml#exec">QEventLoop::exec</db:link>) without having to think about whether or not modal dialogs are showing on screen (which is a difference compared to Cocoa). Therefore, we need to do extra management in Qt to handle this correctly, which unfortunately makes mixing native panels hard. The best way at the moment to do this, is to follow the pattern below, where we post the call to the function with native code rather than calling it directly. Then we know that Qt has cleanly updated any pending event loop recursions before the native panel is shown:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QtGui&amp;gt;

class NativeProxyObject : public QObject
{
    Q_OBJECT
public slots:
    void execNativeDialogLater()
    {
        QMetaObject::invokeMethod(this, &quot;execNativeDialogNow&quot;, Qt::QueuedConnection);
    }

    void execNativeDialogNow()
    {
        NSRunAlertPanel(@&quot;A Native dialog&quot;, @&quot;&quot;, @&quot;OK&quot;, @&quot;&quot;, @&quot;&quot;);
    }

};

#include &quot;main.moc&quot;

int main(int argc, char **argv){
    QApplication app(argc, argv);
    NativeProxyObject proxy;
    QPushButton button(&quot;Show native dialog&quot;);
    QObject::connect(&amp;amp;button, SIGNAL(clicked()), &amp;amp;proxy, SLOT(execNativeDialogLater()));
    button.show();
    return app.exec();
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="limitations">
<db:title>Limitations</db:title>
<db:section xml:id="mysql-and-macos">
<db:title>MySQL and macOS</db:title>
<db:para>There seems to be a issue when both -prebind and -multi_module are defined when linking static C libraries into dynamic libraries. If you get the following error message when linking Qt:</db:para>
<db:programlisting language="cpp">ld: common symbols not allowed with MH_DYLIB output format with the -multi_module option
/usr/local/mysql/lib/libmysqlclient.a(my_error.o) definition of common _errbuff (size 512)
/usr/bin/libtool: internal link edit command failed
</db:programlisting>
<db:para>re-link Qt using -single_module. This is only a problem when building the MySQL driver into Qt. It does not affect plugins or static builds.</db:para>
</db:section>
<db:section xml:id="d-bus-and-macos">
<db:title>D-Bus and macOS</db:title>
<db:para>The <db:link xlink:href="qtdbus-module.xml">QtDBus</db:link> module defaults to dynamically loading the libdbus-1 library on macOS. That means applications linking against the <db:link xlink:href="qtdbus-module.xml">QtDBus</db:link> module will load even on macOS systems that do not have the libraries, but they will fail to connect to any D-Bus server and they will fail to open a server using <db:link xlink:href="qdbusserver.xml">QDBusServer</db:link>.</db:para>
<db:para>To use D-Bus functionality, you need to install the libdbus-1 library, for example through Homebrew, Fink or MacPorts. You may want to include those libraries in your application's bundle if you're deploying to other systems. Additionally, note that there is no system bus on macOS and that the session bus will only be started after launchd is configured to manage it.</db:para>
</db:section>
<db:section xml:id="menu-actions">
<db:title>Menu Actions</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Actions in a <db:link xlink:href="qmenu.xml">QMenu</db:link> with accelerators that have more than one keystroke (<db:link xlink:href="qkeysequence.xml">QKeySequence</db:link>) will not display correctly, when the <db:link xlink:href="qmenu.xml">QMenu</db:link> is translated into a Mac native menu bar. The first key will be displayed. However, the shortcut will still be activated as on all other platforms.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmenu.xml">QMenu</db:link> objects used in the native menu bar are not able to handle Qt events via the normal event handlers. Install a delegate on the menu itself to be notified of these changes. Alternatively, consider using the <db:link xlink:href="qmenu.xml#aboutToShow">QMenu::aboutToShow</db:link>() and <db:link xlink:href="qmenu.xml#aboutToHide">QMenu::aboutToHide</db:link>() signals to keep track of menu visibility; these provide a solution that should work on all platforms supported by Qt.</db:para>
</db:listitem>
<db:listitem>
<db:para>By default, Qt creates a native <db:emphasis role="bold">Quit</db:emphasis> menu item that will react to the CMD+Q shortcut. Creating a <db:link xlink:href="qaction.xml">QAction</db:link> for the <db:link xlink:href="qaction.xml#MenuRole-enum">QAction::QuitRole</db:link> role will replace that menu item. Therefore, the replacement action should be connected to either the <db:link xlink:href="qcoreapplication.xml#quit">QCoreApplication::quit</db:link> slot, or a custom slot that stops the application.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="native-widgets">
<db:title>Native Widgets</db:title>
<db:para>Qt has support for sheets, represented by the window flag, <db:link xlink:href="qt.xml#WindowType-enum">Qt::Sheet</db:link>.</db:para>
<db:para>Usually, when referring to a native macOS application, <db:emphasis>native</db:emphasis> means an application that interfaces directly to the underlying window system, rather than one that uses some intermediary layer. Qt applications run as first class citizens, just like Cocoa and Carbon applications. We use Cocoa internally to communicate with the operating system.</db:para>
</db:section>
</db:section>
</db:article>
