<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: Scene3D QML with Widgets Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A <db:link xlink:href="qwidget.xml">QWidget</db:link>-based application with a QML scene containing a 3D scene.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/widgets-scene3d.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>widgets-scene3D</db:emphasis> demonstrates visualizing a 3D scene from a <db:link xlink:href="qwidget.xml">QWidget</db:link>-based application using <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>.</db:para>
<db:para>The actual 3D scene is the same as in the <db:emphasis>scene3d</db:emphasis> example.</db:para>
<db:para>This approach is different from the one based on <db:link xlink:href="qwidget.xml#createWindowContainer">QWidget::createWindowContainer</db:link>() demonstrated in <db:emphasis>basicshapes-cpp</db:emphasis> because it does not create a native window for the Qt 3D content. Rather, it uses <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>, a genuine <db:link xlink:href="qwidget.xml">QWidget</db:link> subclass to compose the Qt Quick and Qt 3D content together with the traditional widgets.</db:para>
<db:note>
<db:para>Be aware of the performance implications. While this approach is very flexible in the sense that it allows mixing QML and Qt 3D with widgets without clipping or stacking issues, using <db:link xlink:href="qml-qtquick-scene3d-scene3d.xml">Scene3D</db:link> in a <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> involves rendering to offscreen render targets (via framebuffer objects) twice. This is not always desirable for more complex scenes. For those the native window based approach shown in <db:emphasis>basicshapes-cpp</db:emphasis> will likely be a better choice.</db:para>
</db:note>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="widgets-scene3d/main.cpp">widgets-scene3d/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets-scene3d/widgets-scene3d.pro">widgets-scene3d/widgets-scene3d.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets-scene3d/widgets-scene3d.qrc">widgets-scene3d/widgets-scene3d.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
