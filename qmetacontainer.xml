<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMetaContainer Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmetacontainer.xml">QMetaContainer</db:link> class provides common functionality for sequential and associative containers.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
<db:para>This class is <db:emphasis>equality-comparable</db:emphasis>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMetaContainer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmetasequence.xml" xlink:role="class">QMetaSequence</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMetaContainer is part of <db:simplelist><db:member>objectmodel</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="advanceConstIterator">
<db:title>void QMetaContainer::advanceConstIterator(void *<db:emphasis>iterator</db:emphasis>, qsizetype <db:emphasis>step</db:emphasis>) const</db:title>
<db:para>Advances the const <db:code role="parameter">iterator</db:code> by <db:code role="parameter">step</db:code> steps. If <db:code role="parameter">step</db:code> is negative the <db:code role="parameter">iterator</db:code> is moved backwards, towards the beginning of the container. The behavior is unspecified for negative values of <db:code role="parameter">step</db:code> if <db:link xlink:href="qmetacontainer.xml#hasBidirectionalIterator">hasBidirectionalIterator</db:link>() returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="advanceIterator">
<db:title>void QMetaContainer::advanceIterator(void *<db:emphasis>iterator</db:emphasis>, qsizetype <db:emphasis>step</db:emphasis>) const</db:title>
<db:para>Advances the non-const <db:code role="parameter">iterator</db:code> by <db:code role="parameter">step</db:code> steps. If <db:code role="parameter">step</db:code> is negative the <db:code role="parameter">iterator</db:code> is moved backwards, towards the beginning of the container. The behavior is unspecified for negative values of <db:code role="parameter">step</db:code> if <db:link xlink:href="qmetacontainer.xml#hasBidirectionalIterator">hasBidirectionalIterator</db:link>() returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin">
<db:title>void *QMetaContainer::begin(void *<db:emphasis>container</db:emphasis>) const</db:title>
<db:para>Creates and returns a non-const iterator pointing to the beginning of <db:code role="parameter">container</db:code>. The iterator is allocated on the heap using new. It has to be destroyed using <db:link xlink:href="qmetacontainer.xml#destroyIterator">destroyIterator</db:link> eventually, to reclaim the memory.</db:para>
<db:para>Returns nullptr if the container doesn't offer any non-const iterators.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#constEnd">constEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#destroyIterator">destroyIterator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canClear">
<db:title>bool QMetaContainer::canClear() const</db:title>
<db:para>Returns true if the container can be cleared, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QMetaContainer::clear(void *<db:emphasis>container</db:emphasis>) const</db:title>
<db:para>Clears the given <db:code role="parameter">container</db:code> if it can be cleared.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#canClear">canClear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compareConstIterator">
<db:title>bool QMetaContainer::compareConstIterator(const void *<db:emphasis>i</db:emphasis>, const void *<db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns true if the const iterators <db:code role="parameter">i</db:code> and <db:code role="parameter">j</db:code> point to the same value in the container they are iterating over, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compareIterator">
<db:title>bool QMetaContainer::compareIterator(const void *<db:emphasis>i</db:emphasis>, const void *<db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns true if the non-const iterators <db:code role="parameter">i</db:code> and <db:code role="parameter">j</db:code> point to the same value in the container they are iterating over, otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constBegin">
<db:title>void *QMetaContainer::constBegin(const void *<db:emphasis>container</db:emphasis>) const</db:title>
<db:para>Creates and returns a const iterator pointing to the beginning of <db:code role="parameter">container</db:code>. The iterator is allocated on the heap using new. It has to be destroyed using <db:link xlink:href="qmetacontainer.xml#destroyConstIterator">destroyConstIterator</db:link> eventually, to reclaim the memory.</db:para>
<db:para>Returns nullptr if the container doesn't offer any const iterators.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#constEnd">constEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#destroyConstIterator">destroyConstIterator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constEnd">
<db:title>void *QMetaContainer::constEnd(const void *<db:emphasis>container</db:emphasis>) const</db:title>
<db:para>Creates and returns a const iterator pointing to the end of <db:code role="parameter">container</db:code>. The iterator is allocated on the heap using new. It has to be destroyed using <db:link xlink:href="qmetacontainer.xml#destroyConstIterator">destroyConstIterator</db:link> eventually, to reclaim the memory.</db:para>
<db:para>Returns nullptr if the container doesn't offer any const iterators.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#destroyConstIterator">destroyConstIterator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copyConstIterator">
<db:title>void QMetaContainer::copyConstIterator(void *<db:emphasis>target</db:emphasis>, const void *<db:emphasis>source</db:emphasis>) const</db:title>
<db:para>Copies the const iterator <db:code role="parameter">source</db:code> into the const iterator <db:code role="parameter">target</db:code>. Afterwards <db:link xlink:href="qmetacontainer.xml#compareConstIterator">compareConstIterator</db:link>(target, source) returns true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copyIterator">
<db:title>void QMetaContainer::copyIterator(void *<db:emphasis>target</db:emphasis>, const void *<db:emphasis>source</db:emphasis>) const</db:title>
<db:para>Copies the non-const iterator <db:code role="parameter">source</db:code> into the non-const iterator <db:code role="parameter">target</db:code>. Afterwards <db:link xlink:href="qmetacontainer.xml#compareIterator">compareIterator</db:link>(target, source) returns true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="destroyConstIterator">
<db:title>void QMetaContainer::destroyConstIterator(const void *<db:emphasis>iterator</db:emphasis>) const</db:title>
<db:para>Destroys a const <db:code role="parameter">iterator</db:code> previously created using <db:link xlink:href="qmetacontainer.xml#constBegin">constBegin</db:link>() or <db:link xlink:href="qmetacontainer.xml#constEnd">constEnd</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#constEnd">constEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#destroyIterator">destroyIterator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="destroyIterator">
<db:title>void QMetaContainer::destroyIterator(const void *<db:emphasis>iterator</db:emphasis>) const</db:title>
<db:para>Destroys a non-const <db:code role="parameter">iterator</db:code> previously created using <db:link xlink:href="qmetacontainer.xml#begin">begin</db:link>() or <db:link xlink:href="qmetacontainer.xml#end">end</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#destroyConstIterator">destroyConstIterator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="diffConstIterator">
<db:title>qsizetype QMetaContainer::diffConstIterator(const void *<db:emphasis>i</db:emphasis>, const void *<db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns the distance between the const iterators <db:code role="parameter">i</db:code> and <db:code role="parameter">j</db:code>, the equivalent of <db:code role="parameter">i</db:code> - <db:code role="parameter">j</db:code>. If <db:code role="parameter">j</db:code> is closer to the end of the container than <db:code role="parameter">i</db:code>, the returned value is negative. The behavior is unspecified in this case if <db:link xlink:href="qmetacontainer.xml#hasBidirectionalIterator">hasBidirectionalIterator</db:link>() returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="diffIterator">
<db:title>qsizetype QMetaContainer::diffIterator(const void *<db:emphasis>i</db:emphasis>, const void *<db:emphasis>j</db:emphasis>) const</db:title>
<db:para>Returns the distance between the non-const iterators <db:code role="parameter">i</db:code> and <db:code role="parameter">j</db:code>, the equivalent of <db:code role="parameter">i</db:code> - <db:code role="parameter">j</db:code>. If <db:code role="parameter">j</db:code> is closer to the end of the container than <db:code role="parameter">i</db:code>, the returned value is negative. The behavior is unspecified in this case if <db:link xlink:href="qmetacontainer.xml#hasBidirectionalIterator">hasBidirectionalIterator</db:link>() returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="end">
<db:title>void *QMetaContainer::end(void *<db:emphasis>container</db:emphasis>) const</db:title>
<db:para>Creates and returns a non-const iterator pointing to the end of <db:code role="parameter">container</db:code>. The iterator is allocated on the heap using new. It has to be destroyed using <db:link xlink:href="qmetacontainer.xml#destroyIterator">destroyIterator</db:link> eventually, to reclaim the memory.</db:para>
<db:para>Returns nullptr if the container doesn't offer any non-const iterators.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#hasIterator">hasIterator</db:link>()</db:member>
<db:member>end()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#constEnd">constEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#destroyIterator">destroyIterator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasBidirectionalIterator">
<db:title>bool QMetaContainer::hasBidirectionalIterator() const</db:title>
<db:para>Returns true if the underlying container provides a bi-directional iterator or a random access iterator as defined by std::bidirectional_iterator_tag and std::random_access_iterator_tag, respectively. Otherwise returns false.</db:para>
<db:para><db:link xlink:href="qmetasequence.xml">QMetaSequence</db:link> assumes that const and non-const iterators for the same container have the same iterator traits.</db:para>
</db:section>
<db:section xml:id="hasConstIterator">
<db:title>bool QMetaContainer::hasConstIterator() const</db:title>
<db:para>Returns true if the underlying container offers a const iterator, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#constEnd">constEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#destroyConstIterator">destroyConstIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#compareConstIterator">compareConstIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#diffConstIterator">diffConstIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#advanceConstIterator">advanceConstIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#copyConstIterator">copyConstIterator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasForwardIterator">
<db:title>bool QMetaContainer::hasForwardIterator() const</db:title>
<db:para>Returns true if the underlying container provides at least a forward iterator as defined by std::forward_iterator_tag, otherwise returns false. Bi-directional iterators and random access iterators are specializations of forward iterators. This method will also return true if the container provides one of those.</db:para>
<db:para><db:link xlink:href="qmetasequence.xml">QMetaSequence</db:link> assumes that const and non-const iterators for the same container have the same iterator traits.</db:para>
</db:section>
<db:section xml:id="hasInputIterator">
<db:title>bool QMetaContainer::hasInputIterator() const</db:title>
<db:para>Returns true if the underlying container provides at least an input iterator as defined by std::input_iterator_tag, otherwise returns false. Forward, Bi-directional, and random access iterators are specializations of input iterators. This method will also return true if the container provides one of those.</db:para>
<db:para><db:link xlink:href="qmetasequence.xml">QMetaSequence</db:link> assumes that const and non-const iterators for the same container have the same iterator traits.</db:para>
</db:section>
<db:section xml:id="hasIterator">
<db:title>bool QMetaContainer::hasIterator() const</db:title>
<db:para>Returns true if the underlying container offers a non-const iterator, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#destroyIterator">destroyIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#compareIterator">compareIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#diffIterator">diffIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#advanceIterator">advanceIterator</db:link>()</db:member>
<db:member><db:link xlink:href="qmetacontainer.xml#copyIterator">copyIterator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasRandomAccessIterator">
<db:title>bool QMetaContainer::hasRandomAccessIterator() const</db:title>
<db:para>Returns true if the underlying container provides a random access iterator as defined by std::random_access_iterator_tag, otherwise returns false.</db:para>
<db:para><db:link xlink:href="qmetasequence.xml">QMetaSequence</db:link> assumes that const and non-const iterators for the same container have the same iterator traits.</db:para>
</db:section>
<db:section xml:id="hasSize">
<db:title>bool QMetaContainer::hasSize() const</db:title>
<db:para>Returns true if the container can be queried for its size, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>qsizetype QMetaContainer::size(const void *<db:emphasis>container</db:emphasis>) const</db:title>
<db:para>Returns the number of values in the given <db:code role="parameter">container</db:code> if it can be queried for its size. Otherwise returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetacontainer.xml#hasSize">hasSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
