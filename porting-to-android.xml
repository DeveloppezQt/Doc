<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Porting to Android</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="android-building.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Qt for Android - Building from Source"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="deployment-android.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Deploying an Application on Android"/></db:extendedlink>
<db:abstract>
<db:para>Provides instructions to port your existing Qt application to Android.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Most Qt applications should be portable to Android with ease unless they depend on a specific hardware or software feature not supported by Android.</db:para>
<db:para>The porting approach differs depending on whether the existing application is QML or Widget based, your intended build tool, and if you are porting from a mobile or desktop application.</db:para>
<db:para>QML-based applications built with CMake are considered the best approach for mobile applications.</db:para>
<db:section xml:id="porting-from-qt-desktop-applications">
<db:title>Porting from Qt desktop applications</db:title>
<db:para>Most of your existing Qt code should work, but you must make some decisions around your UI scalability and layout for different orientations and screen sizes. Consider a <db:link xlink:href="https://www.qt.io/blog/responsive-layouts-in-qt">responsive layouts</db:link> approach to fully take advantage of Qt Qml Applications.</db:para>
<db:para>There are considerations that are not directly impacted by using Qt, such as app store guidelines, theme guidelines, and others that may impact the way you develop your application. These won't be discussed here.</db:para>
</db:section>
<db:section xml:id="adding-resources">
<db:title>Adding resources</db:title>
<db:para>Most applications need resources. Here, we discuss how that impacts porting your application to Android.</db:para>
<db:section xml:id="the-qt-resource-system">
<db:title>The Qt resource system</db:title>
<db:para>Like most UI applications, Qt applications also depend on resources such as images, icons, translation files, and so on. These resources must be made available on the device as they are required for the application to function correctly.</db:para>
<db:para>The most convenient option is to bundle the resources into a qrc file, which gets built into the application binary. This approach reduces the porting effort considerably and provides faster access to the resources. It is also a cross-platform approach, which makes porting to other platforms easier.</db:para>
<db:para>By default, all Qt applications can access the contents of a qrc file using the &quot;:/&quot; prefix or the URL scheme prefix, &quot;qrc:&quot;. To know more about qrc files and how they are handled, see <db:link xlink:href="porting-to-android.xml#the-qt-resource-system">the Qt Resource System</db:link>.</db:para>
</db:section>
<db:section xml:id="adding-resources-using-the-asset-approach">
<db:title>Adding resources using the asset approach</db:title>
<db:para>Qt for Android provides a special, virtual file system that is based on the <db:link xlink:href="https://developer.android.com/guide/topics/resources/providing-resources#OriginalFiles">Android Assets mechanism</db:link>. Files that are put under the directory &quot;<db:link xlink:href="qmake-variable-reference.xml#android-package-source-dir">ANDROID_PACKAGE_SOURCE_DIR</db:link>/assets/&quot; are packaged as part of your application package.</db:para>
<db:para>The asset approach is the best option for better interoperability with the Android APIs. You can access all resources in the directory using the &quot;assets:&quot; prefix. Unlike qrc, this approach is Android-specific, not a cross-platform solution.</db:para>
<db:note>
<db:para>Using <db:link xlink:href="porting-to-android.xml#the-qt-resource-system">The Qt Resource System</db:link> entails having qrc files bundled in the shared libraries which must be unpacked first and loaded by the linker, while the Android assets are compressed in the <db:emphasis>APK</db:emphasis> and can be directly used in your application. That means using the Android assets can take up less space, but it's not a cross-platform solution with Qt.</db:para>
</db:note>
<db:section xml:id="the-asset-approach-with-cmake">
<db:title>The asset approach with CMake</db:title>
<db:para>If you are new to using CMake or CMake with Qt for the first time, see <db:link xlink:href="cmake-manual.xml">Build with CMake</db:link>. Here, the focus is on the steps applicable for adding resources.</db:para>
<db:para>You will likely want to modify a few things that are controlled by the Android Manifest file. See <db:link xlink:href="android-manifest-file-configuration.xml">Qt Android Manifest File Configuration</db:link> for more information on that. So you likely have already set <db:link xlink:href="cmake-target-property-qt-android-package-source-dir.xml">QT_ANDROID_PACKAGE_SOURCE_DIR</db:link> like so:</db:para>
<db:programlisting language="cpp" role="bad">set_property(TARGET target_name PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
             &quot;${CMAKE_CURRENT_SOURCE_DIR}/android&quot;)
</db:programlisting>
<db:para>Now, you can place your assets directly in that folder or have a custom step with CMake to copy them from the main project path to the assets path.</db:para>
<db:para>Then, you can access that image asset from C++ as follows:</db:para>
<db:programlisting language="cpp">QImage image(&quot;assets:/images/happy.png&quot;);
</db:programlisting>
</db:section>
</db:section>
</db:section>
</db:article>
