<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Porting to Android</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides instructions to port your existing Qt application to Android.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In this section, we are going to port an existing Qt Application to <db:link xlink:href="android.xml">Android</db:link> and deploy it to the device.</db:para>
<db:para>Most Qt applications should be portable to Android with ease, unless they depend on a specific hardware or software feature not supported by Android. If your application is not using any such feature, deployment is probably the only step that demands some changes to your application.</db:para>
<db:para>Like most UI applications, Qt applications also depend on resources such as images, icons, translation files, and so on. These resources must be made available on the device as they are required for the application to function correctly.</db:para>
<db:para>The most convenient option is to bundle the resources into a qrc file, which gets built into the application binary. This approach reduces the porting effort considerably and provides faster access to the resources. It is also a cross-platform approach, which makes porting to other platforms easier.</db:para>
<db:para>By default, all Qt applications can access the contents of a qrc file using the &quot;:/&quot; prefix or the URL scheme prefix, &quot;qrc:&quot;. To know more about qrc files and how they are handled, see <db:link xlink:href="resources.xml">the Qt Resource System</db:link>.</db:para>
<db:para>The other approach is to deploy the resources into the package's assets directory. It is the best option if you want to achieve better interoperability with the Android APIs. You can access all resources in the directory using the &quot;assets:&quot; prefix. Unlike qrc, this approach is not a cross-platform solution.</db:para>
<db:para>The following step-by-step instructions guide you to port an existing Qt Quick application to Android using the qrc approach:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Open the existing project in Qt Creator and configure it with &quot;Android for ARM&quot; kit. For more information, see <db:link xlink:href="http://doc.qt.io/qtcreator/creator-configuring-projects.html">Qt Creator: Configuring Projects</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Identify all the resources used by your application and add them to one or more qrc files. Qt Creator updates your qmake project file with the &quot;RESOURCES&quot; variable listing the qrc files you added.</db:para>
</db:listitem>
<db:listitem>
<db:para>To load or refer to the resources in the qrc file from your C++ code, use the &quot;qrc:&quot; scheme followed by the absolute URL. For example, to load the main.qml file from resources.qrc, you can use the following C++ code:</db:para>
<db:programlisting language="cpp">QQuickView viewer;
viewer.setSource(QUrl(&quot;qrc:/qml/main.qml&quot;));
viewer.show();
</db:programlisting>
<db:note>
<db:para>QML documents can refer to the contents in qrc files using the relative path to the document. Such references do not require the &quot;qrc:&quot; or &quot;:/&quot; prefix.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Save the changes to your project and run the application.</db:para>
</db:listitem>
</db:orderedlist>
<db:note>
<db:para>Qt Quick Controls in the application will use native <db:link xlink:href="qtquickcontrols-platformnotes.xml#android-style">Android style</db:link> if the target device is running Android 3.0 (API 11) or later. The application should function normally on devices with Android versions earlier than v3.0, but without native style for controls.</db:para>
</db:note>
<db:para>Qt Creator deploys your application on the Android device, if the device is detected by the PC. Otherwise, it tries to run the application on an AVD (Android Virtual Device). You will be prompted to create one if there are no AVDs found.</db:para>
</db:article>
