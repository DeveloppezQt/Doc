<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScriptValue Class</db:title>
<db:productname>QtScript</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>QtScript Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> class acts as a container for the Qt Script data types.</db:para>
<db:para>This class was introduced in Qt 4.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScriptValue</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += script</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QScriptValue is part of <db:simplelist><db:member><db:link xlink:href="script.xml">Scripting Classes and Overviews</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> supports the types defined in the <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> standard: The primitive types, which are Undefined, Null, Boolean, Number, and String; and the Object type. Additionally, Qt Script has built-in support for <db:link xlink:href="qvariant.xml">QVariant</db:link>, <db:link xlink:href="qobject.xml">QObject</db:link> and <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>.</db:para>
<db:para>For the object-based types (including Date and RegExp), use the newT() functions in <db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link> (e.g. <db:link xlink:href="qscriptengine.xml#newObject">QScriptEngine::newObject</db:link>()) to create a <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> of the desired type. For the primitive types, use one of the <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> constructor overloads.</db:para>
<db:para>The methods named isT() (e.g. <db:link xlink:href="qscriptvalue.xml#isBool">isBool</db:link>(), <db:link xlink:href="qscriptvalue.xml#isUndefined">isUndefined</db:link>()) can be used to test if a value is of a certain type. The methods named toT() (e.g. <db:link xlink:href="qscriptvalue.xml#toBool">toBool</db:link>(), <db:link xlink:href="qscriptvalue.xml#toString">toString</db:link>()) can be used to convert a <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> to another type. You can also use the generic <db:link xlink:href="qscriptvalue.xml#qscriptvalue_cast">qscriptvalue_cast</db:link>() function.</db:para>
<db:para>Object values have zero or more properties which are themselves QScriptValues. Use <db:link xlink:href="qscriptvalue.xml#setProperty">setProperty</db:link>() to set a property of an object, and call <db:link xlink:href="qscriptvalue.xml#property">property</db:link>() to retrieve the value of a property.</db:para>
<db:programlisting language="cpp">QScriptEngine myEngine;
QScriptValue myObject = myEngine.newObject();
QScriptValue myOtherObject = myEngine.newObject();
myObject.setProperty(&quot;myChild&quot;, myOtherObject);
myObject.setProperty(&quot;name&quot;, &quot;John Doe&quot;);
</db:programlisting>
<db:para>Each property can have a set of attributes; these are specified as the third (optional) argument to <db:link xlink:href="qscriptvalue.xml#setProperty">setProperty</db:link>(). The attributes of a property can be queried by calling the <db:link xlink:href="qscriptvalue.xml#propertyFlags">propertyFlags</db:link>() function. The following code snippet creates a property that cannot be modified by script code:</db:para>
<db:programlisting language="cpp">QScriptValue val(&amp;myEngine, 123);
myObject.setProperty(&quot;myReadOnlyProperty&quot;, val, QScriptValue::ReadOnly);
</db:programlisting>
<db:para>If you want to iterate over the properties of a script object, use the <db:link xlink:href="qscriptvalueiterator.xml">QScriptValueIterator</db:link> class.</db:para>
<db:para>Object values have an internal <db:code>prototype</db:code> property, which can be accessed with <db:link xlink:href="qscriptvalue.xml#prototype">prototype</db:link>() and <db:link xlink:href="qscriptvalue.xml#setPrototype">setPrototype</db:link>(). Properties added to a prototype are shared by all objects having that prototype; this is referred to as prototype-based inheritance. In practice, it means that (by default) the <db:link xlink:href="qscriptvalue.xml#property">property</db:link>() function will automatically attempt to look up look the property in the <db:link xlink:href="qscriptvalue.xml#prototype">prototype</db:link>() (and in the prototype of the <db:link xlink:href="qscriptvalue.xml#prototype">prototype</db:link>(), and so on), if the object itself does not have the requested property. Note that this prototype-based lookup is not performed by <db:link xlink:href="qscriptvalue.xml#setProperty">setProperty</db:link>(); <db:link xlink:href="qscriptvalue.xml#setProperty">setProperty</db:link>() will always create the property in the script object itself. For more information, see the <db:link xlink:href="qtscript-index.xml">Qt Script</db:link> documentation.</db:para>
<db:para>Function objects (objects for which <db:link xlink:href="qscriptvalue.xml#isFunction">isFunction</db:link>() returns true) can be invoked by calling <db:link xlink:href="qscriptvalue.xml#call">call</db:link>(). Constructor functions can be used to construct new objects by calling <db:link xlink:href="qscriptvalue.xml#construct">construct</db:link>().</db:para>
<db:para>Use <db:link xlink:href="qscriptvalue.xml#equals">equals</db:link>(), <db:link xlink:href="qscriptvalue.xml#strictlyEquals">strictlyEquals</db:link>() and <db:link xlink:href="qscriptvalue.xml#lessThan">lessThan</db:link>() to compare a <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> to another.</db:para>
<db:para>Object values can have custom data associated with them; see the <db:link xlink:href="qscriptvalue.xml#setData">setData</db:link>() and <db:link xlink:href="qscriptvalue.xml#data">data</db:link>() functions. By default, this data is not accessible to scripts; it can be used to store any data you want to associate with the script object. Typically this is used by custom class objects (see <db:link xlink:href="qscriptclass.xml">QScriptClass</db:link>) to store a C++ type that contains the &quot;native&quot; object data.</db:para>
<db:para>Note that a <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> for which <db:link xlink:href="qscriptvalue.xml#isObject">isObject</db:link>() is true only carries a reference to an actual object; copying the <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> will only copy the object reference, not the object itself. If you want to clone an object (i.e. copy an object's properties to another object), you can do so with the help of a <db:code>for-in</db:code> statement in script code, or <db:link xlink:href="qscriptvalueiterator.xml">QScriptValueIterator</db:link> in C++.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link></db:member>
<db:member><db:link xlink:href="qscriptvalueiterator.xml">QScriptValueIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PropertyFlag-enum">
<db:title>enum QScriptValue::PropertyFlag</db:title>
<db:bridgehead renderas="sect2">flags QScriptValue::PropertyFlags</db:bridgehead>
<db:para>This enum describes the attributes of a property.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link></db:emphasis>::ReadOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>The property is read-only. Attempts by Qt Script code to write to the property will be ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link></db:emphasis>::Undeletable</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Attempts by Qt Script code to <db:code>delete</db:code> the property will be ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link></db:emphasis>::SkipInEnumeration</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>The property is not to be enumerated by a <db:code>for-in</db:code> enumeration.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link></db:emphasis>::PropertyGetter</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>The property is defined by a function which will be called to get the property value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link></db:emphasis>::PropertySetter</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>The property is defined by a function which will be called to set the property value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link></db:emphasis>::KeepExistingFlags</db:code></db:para>
</db:td>
<db:td><db:code>0x00000800</db:code></db:td>
<db:td>
<db:para>This value is used to indicate to <db:link xlink:href="qscriptvalue.xml#setProperty">setProperty</db:link>() that the property's flags should be left unchanged. If the property doesn't exist, the default flags (0) will be used.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>PropertyFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PropertyFlag&gt;. </db:code>It stores an OR combination of <db:code>PropertyFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="ResolveFlag-enum">
<db:title>enum QScriptValue::ResolveFlag</db:title>
<db:bridgehead renderas="sect2">flags QScriptValue::ResolveFlags</db:bridgehead>
<db:para>This enum specifies how to look up a property of an object.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link></db:emphasis>::ResolveLocal</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
<db:td>
<db:para>Only check the object's own properties.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link></db:emphasis>::ResolvePrototype</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Check the object's own properties first, then search the prototype chain. This is the default.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ResolveFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ResolveFlag&gt;. </db:code>It stores an OR combination of <db:code>ResolveFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="SpecialValue-enum">
<db:title>enum QScriptValue::SpecialValue</db:title>
<db:para>This enum is used to specify a single-valued type.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link></db:emphasis>::UndefinedValue</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An undefined value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link></db:emphasis>::NullValue</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A null value.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScriptValue">
<db:title>QScriptValue::QScriptValue()</db:title>
<db:para>Constructs an invalid <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>.</db:para>
</db:section>
<db:section xml:id="QScriptValue-1">
<db:title>[since 4.5] QScriptValue::QScriptValue(QScriptValue::SpecialValue <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with a special <db:code role="parameter">value</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="QScriptValue-2">
<db:title>[since 4.5] QScriptValue::QScriptValue(bool <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with a boolean <db:code role="parameter">value</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="QScriptValue-3">
<db:title>[since 4.5] QScriptValue::QScriptValue(const QLatin1String &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with a string <db:code role="parameter">value</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="QScriptValue-5">
<db:title>[since 4.5] QScriptValue::QScriptValue(const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with a string <db:code role="parameter">value</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="QScriptValue-6">
<db:title>[since 4.5] QScriptValue::QScriptValue(const char *<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with a string <db:code role="parameter">value</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="QScriptValue-7">
<db:title>[since 4.5] QScriptValue::QScriptValue(int <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with a number <db:code role="parameter">value</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="QScriptValue-8">
<db:title>[since 4.5] QScriptValue::QScriptValue(qsreal <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with a number <db:code role="parameter">value</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="QScriptValue-9">
<db:title>[since 4.5] QScriptValue::QScriptValue(uint <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with a number <db:code role="parameter">value</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="QScriptValue-4">
<db:title>QScriptValue::QScriptValue(const QScriptValue &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> that is a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>Note that if <db:code role="parameter">other</db:code> is an object (i.e., <db:link xlink:href="qscriptvalue.xml#isObject">isObject</db:link>() would return true), then only a reference to the underlying object is copied into the new script value (i.e., the object itself is not copied).</db:para>
</db:section>
<db:section xml:id="dtor.QScriptValue">
<db:title>[noexcept] QScriptValue::~QScriptValue()</db:title>
<db:para>Destroys this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>.</db:para>
</db:section>
<db:section xml:id="call">
<db:title>QScriptValue QScriptValue::call(const QScriptValue &amp;<db:emphasis>thisObject</db:emphasis>, const QScriptValue &amp;<db:emphasis>arguments</db:emphasis>)</db:title>
<db:para>Calls this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> as a function, using <db:code role="parameter">thisObject</db:code> as the `this' object in the function call, and passing <db:code role="parameter">arguments</db:code> as arguments to the function. Returns the value returned from the function.</db:para>
<db:para>If this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is not a function, call() does nothing and returns an invalid <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>.</db:para>
<db:para><db:code role="parameter">arguments</db:code> can be an arguments object, an array, null or undefined; any other type will cause a TypeError to be thrown.</db:para>
<db:para>Note that if <db:code role="parameter">thisObject</db:code> is not an object, the global object (see <db:link xlink:href="qscriptengine.xml#globalObject">QScriptEngine::globalObject</db:link>()) will be used as the `this' object.</db:para>
<db:para>One common usage of this function is to forward native function calls to another function:</db:para>
<db:programlisting language="cpp">QScriptValue myNativeFunction(QScriptContext *ctx, QScriptEngine *)
{
    QScriptValue otherFunction = ...;
    return otherFunction.call(ctx-&gt;thisObject(), ctx-&gt;argumentsObject());
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#construct">construct</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptcontext.xml#argumentsObject">QScriptContext::argumentsObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="call-1">
<db:title>QScriptValue QScriptValue::call(const QScriptValue &amp;<db:emphasis>thisObject</db:emphasis> = QScriptValue(), const QScriptValueList &amp;<db:emphasis>args</db:emphasis> = QScriptValueList())</db:title>
<db:para>Calls this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> as a function, using <db:code role="parameter">thisObject</db:code> as the `this' object in the function call, and passing <db:code role="parameter">args</db:code> as arguments to the function. Returns the value returned from the function.</db:para>
<db:para>If this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is not a function, <db:link xlink:href="qscriptvalue.xml#call">call</db:link>() does nothing and returns an invalid <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>.</db:para>
<db:para>Note that if <db:code role="parameter">thisObject</db:code> is not an object, the global object (see <db:link xlink:href="qscriptengine.xml#globalObject">QScriptEngine::globalObject</db:link>()) will be used as the `this' object.</db:para>
<db:para>Calling <db:link xlink:href="qscriptvalue.xml#call">call</db:link>() can cause an exception to occur in the script engine; in that case, <db:link xlink:href="qscriptvalue.xml#call">call</db:link>() returns the value that was thrown (typically an <db:code>Error</db:code> object). You can call <db:link xlink:href="qscriptengine.xml#hasUncaughtException">QScriptEngine::hasUncaughtException</db:link>() to determine if an exception occurred.</db:para>
<db:programlisting language="cpp">QScriptEngine engine;
engine.evaluate(&quot;function fullName() { return this.firstName + ' ' + this.lastName; }&quot;);
engine.evaluate(&quot;somePerson = { firstName: 'John', lastName: 'Doe' }&quot;);

QScriptValue global = engine.globalObject();
QScriptValue fullName = global.property(&quot;fullName&quot;);
QScriptValue who = global.property(&quot;somePerson&quot;);
qDebug() &lt;&lt; fullName.call(who).toString(); // &quot;John Doe&quot;

engine.evaluate(&quot;function cube(x) { return x * x * x; }&quot;);
QScriptValue cube = global.property(&quot;cube&quot;);
QScriptValueList args;
args &lt;&lt; 3;
qDebug() &lt;&lt; cube.call(QScriptValue(), args).toNumber(); // 27
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#construct">construct</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="construct">
<db:title>QScriptValue QScriptValue::construct(const QScriptValue &amp;<db:emphasis>arguments</db:emphasis>)</db:title>
<db:para>Creates a new <db:code>Object</db:code> and calls this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> as a constructor, using the created object as the `this' object and passing <db:code role="parameter">arguments</db:code> as arguments. If the return value from the constructor call is an object, then that object is returned; otherwise the default constructed object is returned.</db:para>
<db:para>If this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is not a function, construct() does nothing and returns an invalid <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>.</db:para>
<db:para><db:code role="parameter">arguments</db:code> can be an arguments object, an array, null or undefined. Any other type will cause a TypeError to be thrown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#call">call</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptengine.xml#newObject">QScriptEngine::newObject</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptcontext.xml#argumentsObject">QScriptContext::argumentsObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="construct-1">
<db:title>QScriptValue QScriptValue::construct(const QScriptValueList &amp;<db:emphasis>args</db:emphasis> = QScriptValueList())</db:title>
<db:para>Creates a new <db:code>Object</db:code> and calls this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> as a constructor, using the created object as the `this' object and passing <db:code role="parameter">args</db:code> as arguments. If the return value from the constructor call is an object, then that object is returned; otherwise the default constructed object is returned.</db:para>
<db:para>If this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is not a function, <db:link xlink:href="qscriptvalue.xml#construct">construct</db:link>() does nothing and returns an invalid <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>.</db:para>
<db:para>Calling <db:link xlink:href="qscriptvalue.xml#construct">construct</db:link>() can cause an exception to occur in the script engine; in that case, <db:link xlink:href="qscriptvalue.xml#construct">construct</db:link>() returns the value that was thrown (typically an <db:code>Error</db:code> object). You can call <db:link xlink:href="qscriptengine.xml#hasUncaughtException">QScriptEngine::hasUncaughtException</db:link>() to determine if an exception occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#call">call</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptengine.xml#newObject">QScriptEngine::newObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>[since 4.4] QScriptValue QScriptValue::data() const</db:title>
<db:para>Returns the internal data of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> object. Qt Script uses this property to store the primitive value of Date, String, Number and Boolean objects. For other types of object, custom data may be stored using <db:link xlink:href="qscriptvalue.xml#setData">setData</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="engine">
<db:title>QScriptEngine *QScriptValue::engine() const</db:title>
<db:para>Returns the <db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link> that created this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>, or 0 if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is invalid or the value is not associated with a particular engine.</db:para>
</db:section>
<db:section xml:id="equals">
<db:title>bool QScriptValue::equals(const QScriptValue &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is equal to <db:code role="parameter">other</db:code>, otherwise returns false. The comparison follows the behavior described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 11.9.3, &quot;The Abstract Equality Comparison Algorithm&quot;.</db:para>
<db:para>This function can return true even if the type of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is different from the type of the <db:code role="parameter">other</db:code> value; i.e. the comparison is not strict. For example, comparing the number 9 to the string &quot;9&quot; returns true; comparing an undefined value to a null value returns true; comparing a <db:code>Number</db:code> object whose primitive value is 6 to a <db:code>String</db:code> object whose primitive value is &quot;6&quot; returns true; and comparing the number 1 to the boolean value <db:code>true</db:code> returns true. If you want to perform a comparison without such implicit value conversion, use <db:link xlink:href="qscriptvalue.xml#strictlyEquals">strictlyEquals</db:link>().</db:para>
<db:para>Note that if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> or the <db:code role="parameter">other</db:code> value are objects, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly <db:link xlink:href="qscriptvalue.xml#toString">toString</db:link>()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#strictlyEquals">strictlyEquals</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptvalue.xml#lessThan">lessThan</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="instanceOf">
<db:title>bool QScriptValue::instanceOf(const QScriptValue &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is an instance of <db:code role="parameter">other</db:code>; otherwise returns false.</db:para>
<db:para>This <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is considered to be an instance of <db:code role="parameter">other</db:code> if <db:code role="parameter">other</db:code> is a function and the value of the <db:code>prototype</db:code> property of <db:code role="parameter">other</db:code> is in the prototype chain of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>.</db:para>
</db:section>
<db:section xml:id="isArray">
<db:title>bool QScriptValue::isArray() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is an object of the Array class; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengine.xml#newArray">QScriptEngine::newArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isBool">
<db:title>[since 4.5] bool QScriptValue::isBool() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is of the primitive type Boolean; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#toBool">toBool</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDate">
<db:title>bool QScriptValue::isDate() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is an object of the Date class; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengine.xml#newDate">QScriptEngine::newDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isError">
<db:title>bool QScriptValue::isError() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is an object of the Error class; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptcontext.xml#throwError">QScriptContext::throwError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFunction">
<db:title>bool QScriptValue::isFunction() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is a function; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#call">call</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QScriptValue::isNull() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is of the primitive type Null; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengine.xml#nullValue">QScriptEngine::nullValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNumber">
<db:title>bool QScriptValue::isNumber() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is of the primitive type Number; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#toNumber">toNumber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isObject">
<db:title>bool QScriptValue::isObject() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is of the Object type; otherwise returns false.</db:para>
<db:para>Note that function values, variant values, and <db:link xlink:href="qobject.xml">QObject</db:link> values are objects, so this function returns true for such values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#toObject" role="deprecated">toObject</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptengine.xml#newObject">QScriptEngine::newObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isQMetaObject">
<db:title>bool QScriptValue::isQMetaObject() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is a <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#toQMetaObject">toQMetaObject</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptengine.xml#newQMetaObject">QScriptEngine::newQMetaObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isQObject">
<db:title>bool QScriptValue::isQObject() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is a <db:link xlink:href="qobject.xml">QObject</db:link>; otherwise returns false.</db:para>
<db:para>Note: This function returns true even if the <db:link xlink:href="qobject.xml">QObject</db:link> that this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> wraps has been deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#toQObject">toQObject</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptengine.xml#newQObject">QScriptEngine::newQObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRegExp">
<db:title>bool QScriptValue::isRegExp() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is an object of the RegExp class; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengine.xml#newRegExp">QScriptEngine::newRegExp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isString">
<db:title>bool QScriptValue::isString() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is of the primitive type String; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#toString">toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isUndefined">
<db:title>bool QScriptValue::isUndefined() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is of the primitive type Undefined; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengine.xml#undefinedValue">QScriptEngine::undefinedValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QScriptValue::isValid() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is valid; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isVariant">
<db:title>bool QScriptValue::isVariant() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is a variant value; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#toVariant">toVariant</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptengine.xml#newVariant">QScriptEngine::newVariant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lessThan">
<db:title>bool QScriptValue::lessThan(const QScriptValue &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is less than <db:code role="parameter">other</db:code>, otherwise returns false. The comparison follows the behavior described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 11.8.5, &quot;The Abstract Relational Comparison Algorithm&quot;.</db:para>
<db:para>Note that if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> or the <db:code role="parameter">other</db:code> value are objects, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly <db:link xlink:href="qscriptvalue.xml#toString">toString</db:link>()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#equals">equals</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property">
<db:title>[since 4.4] QScriptValue QScriptValue::property(const QScriptString &amp;<db:emphasis>name</db:emphasis>, const QScriptValue::ResolveFlags &amp;<db:emphasis>mode</db:emphasis> = ResolvePrototype) const</db:title>
<db:para>Returns the value of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>'s property with the given <db:code role="parameter">name</db:code>, using the given <db:code role="parameter">mode</db:code> to resolve the property.</db:para>
<db:para>This overload of property() is useful when you need to look up the same property repeatedly, since the lookup can be performed faster when the name is represented as an interned string.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengine.xml#toStringHandle">QScriptEngine::toStringHandle</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptvalue.xml#setProperty">setProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-1">
<db:title>QScriptValue QScriptValue::property(const QString &amp;<db:emphasis>name</db:emphasis>, const QScriptValue::ResolveFlags &amp;<db:emphasis>mode</db:emphasis> = ResolvePrototype) const</db:title>
<db:para>Returns the value of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>'s property with the given <db:code role="parameter">name</db:code>, using the given <db:code role="parameter">mode</db:code> to resolve the property.</db:para>
<db:para>If no such property exists, an invalid <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is returned.</db:para>
<db:para>If the property is implemented using a getter function (i.e. has the <db:link xlink:href="qscriptvalue.xml#PropertyFlag-enum">PropertyGetter</db:link> flag set), calling <db:link xlink:href="qscriptvalue.xml#property">property</db:link>() has side-effects on the script engine, since the getter function will be called (possibly resulting in an uncaught script exception). If an exception occurred, <db:link xlink:href="qscriptvalue.xml#property">property</db:link>() returns the value that was thrown (typically an <db:code>Error</db:code> object).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#setProperty">setProperty</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptvalue.xml#propertyFlags">propertyFlags</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptvalueiterator.xml">QScriptValueIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-2">
<db:title>QScriptValue QScriptValue::property(quint32 <db:emphasis>arrayIndex</db:emphasis>, const QScriptValue::ResolveFlags &amp;<db:emphasis>mode</db:emphasis> = ResolvePrototype) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the property at the given <db:code role="parameter">arrayIndex</db:code>, using the given <db:code role="parameter">mode</db:code> to resolve the property.</db:para>
<db:para>This function is provided for convenience and performance when working with array objects.</db:para>
<db:para>If this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is not an Array object, this function behaves as if <db:link xlink:href="qscriptvalue.xml#property">property</db:link>() was called with the string representation of <db:code role="parameter">arrayIndex</db:code>.</db:para>
</db:section>
<db:section xml:id="propertyFlags">
<db:title>[since 4.4] QScriptValue::PropertyFlags QScriptValue::propertyFlags(const QScriptString &amp;<db:emphasis>name</db:emphasis>, const QScriptValue::ResolveFlags &amp;<db:emphasis>mode</db:emphasis> = ResolvePrototype) const</db:title>
<db:para>Returns the flags of the property with the given <db:code role="parameter">name</db:code>, using the given <db:code role="parameter">mode</db:code> to resolve the property.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#property">property</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyFlags-1">
<db:title>QScriptValue::PropertyFlags QScriptValue::propertyFlags(const QString &amp;<db:emphasis>name</db:emphasis>, const QScriptValue::ResolveFlags &amp;<db:emphasis>mode</db:emphasis> = ResolvePrototype) const</db:title>
<db:para>Returns the flags of the property with the given <db:code role="parameter">name</db:code>, using the given <db:code role="parameter">mode</db:code> to resolve the property.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#property">property</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prototype">
<db:title>QScriptValue QScriptValue::prototype() const</db:title>
<db:para>If this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is an object, returns the internal prototype (<db:code>__proto__</db:code> property) of this object; otherwise returns an invalid <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#setPrototype">setPrototype</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptvalue.xml#isObject">isObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scriptClass">
<db:title>[since 4.4] QScriptClass *QScriptValue::scriptClass() const</db:title>
<db:para>Returns the custom script class that this script object is an instance of, or 0 if the object is not of a custom class.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#setScriptClass">setScriptClass</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>[since 4.4] void QScriptValue::setData(const QScriptValue &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Sets the internal <db:code role="parameter">data</db:code> of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> object. You can use this function to set object-specific data that won't be directly accessible to scripts, but may be retrieved in C++ using the <db:link xlink:href="qscriptvalue.xml#data">data</db:link>() function.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptengine.xml#reportAdditionalMemoryCost">QScriptEngine::reportAdditionalMemoryCost</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty">
<db:title>[since 4.4] void QScriptValue::setProperty(const QScriptString &amp;<db:emphasis>name</db:emphasis>, const QScriptValue &amp;<db:emphasis>value</db:emphasis>, const QScriptValue::PropertyFlags &amp;<db:emphasis>flags</db:emphasis> = KeepExistingFlags)</db:title>
<db:para>Sets the value of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>'s property with the given <db:code role="parameter">name</db:code> to the given <db:code role="parameter">value</db:code>. The given <db:code role="parameter">flags</db:code> specify how this property may be accessed by script code.</db:para>
<db:para>This overload of setProperty() is useful when you need to set the same property repeatedly, since the operation can be performed faster when the name is represented as an interned string.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#property">property</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptengine.xml#toStringHandle">QScriptEngine::toStringHandle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty-1">
<db:title>void QScriptValue::setProperty(const QString &amp;<db:emphasis>name</db:emphasis>, const QScriptValue &amp;<db:emphasis>value</db:emphasis>, const QScriptValue::PropertyFlags &amp;<db:emphasis>flags</db:emphasis> = KeepExistingFlags)</db:title>
<db:para>Sets the value of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>'s property with the given <db:code role="parameter">name</db:code> to the given <db:code role="parameter">value</db:code>.</db:para>
<db:para>If this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is not an object, this function does nothing.</db:para>
<db:para>If this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> does not already have a property with name <db:code role="parameter">name</db:code>, a new property is created; the given <db:code role="parameter">flags</db:code> then specify how this property may be accessed by script code.</db:para>
<db:para>If <db:code role="parameter">value</db:code> is invalid, the property is removed.</db:para>
<db:para>If the property is implemented using a setter function (i.e. has the <db:link xlink:href="qscriptvalue.xml#PropertyFlag-enum">PropertySetter</db:link> flag set), calling <db:link xlink:href="qscriptvalue.xml#setProperty">setProperty</db:link>() has side-effects on the script engine, since the setter function will be called with the given <db:code role="parameter">value</db:code> as argument (possibly resulting in an uncaught script exception).</db:para>
<db:para>Note that you cannot specify custom getter or setter functions for built-in properties, such as the <db:code>length</db:code> property of Array objects or meta properties of <db:link xlink:href="qobject.xml">QObject</db:link> objects.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#property">property</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setProperty-2">
<db:title>void QScriptValue::setProperty(quint32 <db:emphasis>arrayIndex</db:emphasis>, const QScriptValue &amp;<db:emphasis>value</db:emphasis>, const QScriptValue::PropertyFlags &amp;<db:emphasis>flags</db:emphasis> = KeepExistingFlags)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the property at the given <db:code role="parameter">arrayIndex</db:code> to the given <db:code role="parameter">value</db:code>.</db:para>
<db:para>This function is provided for convenience and performance when working with array objects.</db:para>
<db:para>If this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is not an Array object, this function behaves as if <db:link xlink:href="qscriptvalue.xml#setProperty">setProperty</db:link>() was called with the string representation of <db:code role="parameter">arrayIndex</db:code>.</db:para>
</db:section>
<db:section xml:id="setPrototype">
<db:title>void QScriptValue::setPrototype(const QScriptValue &amp;<db:emphasis>prototype</db:emphasis>)</db:title>
<db:para>If this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is an object, sets the internal prototype (<db:code>__proto__</db:code> property) of this object to be <db:code role="parameter">prototype</db:code>; otherwise does nothing.</db:para>
<db:para>The internal prototype should not be confused with the public property with name &quot;prototype&quot;; the public prototype is usually only set on functions that act as constructors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#prototype">prototype</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptvalue.xml#isObject">isObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScriptClass">
<db:title>[since 4.4] void QScriptValue::setScriptClass(QScriptClass *<db:emphasis>scriptClass</db:emphasis>)</db:title>
<db:para>Sets the custom script class of this script object to <db:code role="parameter">scriptClass</db:code>. This can be used to &quot;promote&quot; a plain script object (e.g. created by the &quot;new&quot; operator in a script, or by <db:link xlink:href="qscriptengine.xml#newObject">QScriptEngine::newObject</db:link>() in C++) to an object of a custom type.</db:para>
<db:para>If <db:code role="parameter">scriptClass</db:code> is 0, the object will be demoted to a plain script object.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#scriptClass">scriptClass</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptvalue.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="strictlyEquals">
<db:title>bool QScriptValue::strictlyEquals(const QScriptValue &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is equal to <db:code role="parameter">other</db:code> using strict comparison (no conversion), otherwise returns false. The comparison follows the behavior described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 11.9.6, &quot;The Strict Equality Comparison Algorithm&quot;.</db:para>
<db:para>If the type of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is different from the type of the <db:code role="parameter">other</db:code> value, this function returns false. If the types are equal, the result depends on the type, as shown in the following table:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Undefined</db:para>
</db:td>
<db:td>
<db:para>true</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Null</db:para>
</db:td>
<db:td>
<db:para>true</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Boolean</db:para>
</db:td>
<db:td>
<db:para>true if both values are true, false otherwise</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Number</db:para>
</db:td>
<db:td>
<db:para>false if either value is NaN (Not-a-Number); true if values are equal, false otherwise</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>String</db:para>
</db:td>
<db:td>
<db:para>true if both values are exactly the same sequence of characters, false otherwise</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Object</db:para>
</db:td>
<db:td>
<db:para>true if both values refer to the same object, false otherwise</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#equals">equals</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toBool">
<db:title>[since 4.5] bool QScriptValue::toBool() const</db:title>
<db:para>Returns the boolean value of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>, using the conversion rules described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 9.2, &quot;ToBoolean&quot;.</db:para>
<db:para>Note that if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly <db:link xlink:href="qscriptvalue.xml#toString">toString</db:link>()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#isBool">isBool</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toDateTime">
<db:title>QDateTime QScriptValue::toDateTime() const</db:title>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> representation of this value, in local time. If this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is not a date, or the value of the date is NaN (Not-a-Number), an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#isDate">isDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toInt32">
<db:title>qint32 QScriptValue::toInt32() const</db:title>
<db:para>Returns the signed 32-bit integer value of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>, using the conversion rules described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 9.5, &quot;ToInt32&quot;.</db:para>
<db:para>Note that if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly <db:link xlink:href="qscriptvalue.xml#toString">toString</db:link>()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#toNumber">toNumber</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptvalue.xml#toUInt32">toUInt32</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toInteger">
<db:title>qsreal QScriptValue::toInteger() const</db:title>
<db:para>Returns the integer value of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>, using the conversion rules described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 9.4, &quot;ToInteger&quot;.</db:para>
<db:para>Note that if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly <db:link xlink:href="qscriptvalue.xml#toString">toString</db:link>()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#toNumber">toNumber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toNumber">
<db:title>qsreal QScriptValue::toNumber() const</db:title>
<db:para>Returns the number value of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>, as defined in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 9.3, &quot;ToNumber&quot;.</db:para>
<db:para>Note that if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly <db:link xlink:href="qscriptvalue.xml#toString">toString</db:link>()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#isNumber">isNumber</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptvalue.xml#toInteger">toInteger</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptvalue.xml#toInt32">toInt32</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptvalue.xml#toUInt32">toUInt32</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptvalue.xml#toUInt16">toUInt16</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toQMetaObject">
<db:title>const QMetaObject *QScriptValue::toQMetaObject() const</db:title>
<db:para>If this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is a <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>, returns the <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link> pointer that the <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> represents; otherwise, returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#isQMetaObject">isQMetaObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toQObject">
<db:title>QObject *QScriptValue::toQObject() const</db:title>
<db:para>If this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is a <db:link xlink:href="qobject.xml">QObject</db:link>, returns the <db:link xlink:href="qobject.xml">QObject</db:link> pointer that the <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> represents; otherwise, returns 0.</db:para>
<db:para>If the <db:link xlink:href="qobject.xml">QObject</db:link> that this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> wraps has been deleted, this function returns 0 (i.e. it is possible for toQObject() to return 0 even when <db:link xlink:href="qscriptvalue.xml#isQObject">isQObject</db:link>() returns true).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#isQObject">isQObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toRegExp">
<db:title>QRegExp QScriptValue::toRegExp() const</db:title>
<db:para>Returns the <db:link xlink:href="qregexp.xml">QRegExp</db:link> representation of this value. If this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is not a regular expression, an empty <db:link xlink:href="qregexp.xml">QRegExp</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#isRegExp">isRegExp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QScriptValue::toString() const</db:title>
<db:para>Returns the string value of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>, as defined in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 9.8, &quot;ToString&quot;.</db:para>
<db:para>Note that if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is an object, calling this function has side effects on the script engine, since the engine will call the object's toString() function (and possibly valueOf()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#isString">isString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUInt16">
<db:title>quint16 QScriptValue::toUInt16() const</db:title>
<db:para>Returns the unsigned 16-bit integer value of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>, using the conversion rules described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 9.7, &quot;ToUint16&quot;.</db:para>
<db:para>Note that if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly <db:link xlink:href="qscriptvalue.xml#toString">toString</db:link>()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#toNumber">toNumber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUInt32">
<db:title>quint32 QScriptValue::toUInt32() const</db:title>
<db:para>Returns the unsigned 32-bit integer value of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>, using the conversion rules described in <db:link xlink:href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">ECMA-262</db:link> section 9.6, &quot;ToUint32&quot;.</db:para>
<db:para>Note that if this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> is an object, calling this function has side effects on the script engine, since the engine will call the object's valueOf() function (and possibly <db:link xlink:href="qscriptvalue.xml#toString">toString</db:link>()) in an attempt to convert the object to a primitive value (possibly resulting in an uncaught script exception).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#toNumber">toNumber</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptvalue.xml#toInt32">toInt32</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toVariant">
<db:title>QVariant QScriptValue::toVariant() const</db:title>
<db:para>Returns the <db:link xlink:href="qvariant.xml">QVariant</db:link> value of this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>, if it can be converted to a <db:link xlink:href="qvariant.xml">QVariant</db:link>; otherwise returns an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>. The conversion is performed according to the following table:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Input Type</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Undefined</db:para>
</db:td>
<db:td>
<db:para>An invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Null</db:para>
</db:td>
<db:td>
<db:para>An invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Boolean</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qvariant.xml">QVariant</db:link> containing the value of the boolean.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Number</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qvariant.xml">QVariant</db:link> containing the value of the number.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>String</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qvariant.xml">QVariant</db:link> containing the value of the string.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qvariant.xml">QVariant</db:link> Object</db:para>
</db:td>
<db:td>
<db:para>The result is the <db:link xlink:href="qvariant.xml">QVariant</db:link> value of the object (no conversion).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qobject.xml">QObject</db:link> Object</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qvariant.xml">QVariant</db:link> containing a pointer to the <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Date Object</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qvariant.xml">QVariant</db:link> containing the date value (<db:link xlink:href="qscriptvalue.xml#toDateTime">toDateTime</db:link>()).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>RegExp Object</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="qvariant.xml">QVariant</db:link> containing the regular expression value (<db:link xlink:href="qscriptvalue.xml#toRegExp">toRegExp</db:link>()).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Array Object</db:para>
</db:td>
<db:td>
<db:para>The array is converted to a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link>. Each element is converted to a <db:link xlink:href="qvariant.xml">QVariant</db:link>, recursively; cyclic references are not followed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Object</db:para>
</db:td>
<db:td>
<db:para>The object is converted to a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>. Each property is converted to a <db:link xlink:href="qvariant.xml">QVariant</db:link>, recursively; cyclic references are not followed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptvalue.xml#isVariant">isVariant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QScriptValue &amp;QScriptValue::operator=(const QScriptValue &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the <db:code role="parameter">other</db:code> value to this <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link>.</db:para>
<db:para>Note that if <db:code role="parameter">other</db:code> is an object (<db:link xlink:href="qscriptvalue.xml#isObject">isObject</db:link>() returns true), only a reference to the underlying object will be assigned; the object itself will not be copied.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qscriptvalue_cast">
<db:title>[since 4.3] QVariant qscriptvalue_cast(const QScriptValue &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Returns the given <db:code role="parameter">value</db:code> converted to the template type <db:code>T</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">qScriptRegisterMetaType()</db:link></db:member>
<db:member><db:link xlink:href="">QScriptEngine::toScriptValue()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QScriptValue</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="QScriptValue-10">
<db:title>[deprecated] QScriptValue::QScriptValue(QScriptEngine *<db:emphasis>engine</db:emphasis>, QScriptValue::SpecialValue <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with the special <db:code role="parameter">value</db:code> and registers it with the script <db:code role="parameter">engine</db:code>.</db:para>
</db:section>
<db:section xml:id="QScriptValue-11">
<db:title>[deprecated] QScriptValue::QScriptValue(QScriptEngine *<db:emphasis>engine</db:emphasis>, bool <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with the boolean <db:code role="parameter">value</db:code> and registers it with the script <db:code role="parameter">engine</db:code>.</db:para>
</db:section>
<db:section xml:id="QScriptValue-12">
<db:title>[deprecated] QScriptValue::QScriptValue(QScriptEngine *<db:emphasis>engine</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with the string <db:code role="parameter">value</db:code> and registers it with the script <db:code role="parameter">engine</db:code>.</db:para>
</db:section>
<db:section xml:id="QScriptValue-13">
<db:title>[deprecated] QScriptValue::QScriptValue(QScriptEngine *<db:emphasis>engine</db:emphasis>, const char *<db:emphasis>value</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with the string <db:code role="parameter">value</db:code> and registers it with the script <db:code role="parameter">engine</db:code>.</db:para>
</db:section>
<db:section xml:id="QScriptValue-14">
<db:title>[deprecated] QScriptValue::QScriptValue(QScriptEngine *<db:emphasis>engine</db:emphasis>, int <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with the integer <db:code role="parameter">value</db:code> and registers it with the script <db:code role="parameter">engine</db:code>.</db:para>
</db:section>
<db:section xml:id="QScriptValue-15">
<db:title>[deprecated] QScriptValue::QScriptValue(QScriptEngine *<db:emphasis>engine</db:emphasis>, qsreal <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with the qsreal <db:code role="parameter">value</db:code> and registers it with the script <db:code role="parameter">engine</db:code>.</db:para>
</db:section>
<db:section xml:id="QScriptValue-16">
<db:title>[deprecated] QScriptValue::QScriptValue(QScriptEngine *<db:emphasis>engine</db:emphasis>, uint <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Constructs a new <db:link xlink:href="qscriptvalue.xml">QScriptValue</db:link> with the unsigned integer <db:code role="parameter">value</db:code> and registers it with the script <db:code role="parameter">engine</db:code>.</db:para>
</db:section>
<db:section xml:id="isBoolean">
<db:title>[deprecated] bool QScriptValue::isBoolean() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qscriptvalue.xml#isBool">isBool</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="toBoolean">
<db:title>[deprecated] bool QScriptValue::toBoolean() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qscriptvalue.xml#toBool">toBool</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="toObject">
<db:title>[deprecated] QScriptValue QScriptValue::toObject() const</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This function is obsolete; use <db:link xlink:href="qscriptengine.xml#toObject">QScriptEngine::toObject</db:link>() instead.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
