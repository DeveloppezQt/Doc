<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Volumetric Rendering</db:title>
<db:productname>QtDataVis3D</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Rendering volumetric objects.</db:para>
<db:para>This documentation was introduced in QtDataVisualization 1.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Volumetric Rendering</db:emphasis> shows how to use <db:link xlink:href="qcustom3dvolume-qtdatavis.xml">QCustom3DVolume</db:link> to display volumetric data.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/volumetric-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Qt Creator: Tutorial: Build and run</db:link>.</db:para>
</db:section>
<db:section xml:id="initializing-volume-item">
<db:title>Initializing Volume Item</db:title>
<db:para>The <db:link xlink:href="qcustom3dvolume-qtdatavis.xml">QCustom3DVolume</db:link> items are special custom items (see <db:link xlink:href="qcustom3ditem-qtdatavis.xml">QCustom3DItem</db:link>), which can be used to display volumetric data. The volume items are only supported with orthographic projection, so first make sure the graph is using it:</db:para>
<db:programlisting language="cpp">m_graph-&gt;setOrthoProjection(true);
</db:programlisting>
<db:para>Create a volumetric item tied to the data ranges of the axes:</db:para>
<db:programlisting language="cpp">m_volumeItem = new QCustom3DVolume;
// Adjust water level to zero with a minor tweak to y-coordinate position and scaling
m_volumeItem-&gt;setScaling(
            QVector3D(m_graph-&gt;axisX()-&gt;max() - m_graph-&gt;axisX()-&gt;min(),
                      (m_graph-&gt;axisY()-&gt;max() - m_graph-&gt;axisY()-&gt;min()) * 0.91f,
                      m_graph-&gt;axisZ()-&gt;max() - m_graph-&gt;axisZ()-&gt;min()));
m_volumeItem-&gt;setPosition(
            QVector3D((m_graph-&gt;axisX()-&gt;max() + m_graph-&gt;axisX()-&gt;min()) / 2.0f,
                      -0.045f * (m_graph-&gt;axisY()-&gt;max() - m_graph-&gt;axisY()-&gt;min()) +
                      (m_graph-&gt;axisY()-&gt;max() + m_graph-&gt;axisY()-&gt;min()) / 2.0f,
                      (m_graph-&gt;axisZ()-&gt;max() + m_graph-&gt;axisZ()-&gt;min()) / 2.0f));
m_volumeItem-&gt;setScalingAbsolute(false);
</db:programlisting>
<db:para>Indicate that the scaling of the volume should follow the changes in the data ranges by setting the <db:link xlink:href="qcustom3ditem-qtdatavis.xml#scalingAbsolute-prop">QCustom3DItem::scalingAbsolute</db:link> property to <db:code>false</db:code>. Next, define the internal contents of the volume:</db:para>
<db:programlisting language="cpp">m_volumeItem-&gt;setTextureWidth(lowDetailSize);
m_volumeItem-&gt;setTextureHeight(lowDetailSize / 2);
m_volumeItem-&gt;setTextureDepth(lowDetailSize);
m_volumeItem-&gt;setTextureFormat(QImage::Format_Indexed8);
m_volumeItem-&gt;setTextureData(new QList&lt;uchar&gt;(*m_lowDetailData));
</db:programlisting>
<db:para>Use eight bit indexed color for the texture, as it is compact and makes it easy to adjust the colors without needing to reset the whole texture. For the texture data, use the data created earlier based on height maps. Typically, the data for volume items comes pregenerated in the form of a stack of images, so the data generation details can be skipped. For more information about the actual data generation process, see the example code.</db:para>
<db:para>Since eight bit indexed colors are used, a color table is needed to map the eight bit color indexes to actual colors. In a typical use case, you would get the color table from the source images instead of using one manually defined:</db:para>
<db:programlisting language="cpp">m_volumeItem-&gt;setColorTable(m_colorTable1);
</db:programlisting>
<db:para>To have an option to show slice frames around the volume, initialize their properties. Initially, the frames will be hidden:</db:para>
<db:programlisting language="cpp">m_volumeItem-&gt;setSliceFrameGaps(QVector3D(0.01f, 0.02f, 0.01f));
m_volumeItem-&gt;setSliceFrameThicknesses(QVector3D(0.0025f, 0.005f, 0.0025f));
m_volumeItem-&gt;setSliceFrameWidths(QVector3D(0.0025f, 0.005f, 0.0025f));
m_volumeItem-&gt;setDrawSliceFrames(false);
</db:programlisting>
<db:para>Finally, add the volume as a custom item to the graph to display it:</db:para>
<db:programlisting language="cpp">m_graph-&gt;addCustomItem(m_volumeItem);
</db:programlisting>
</db:section>
<db:section xml:id="slicing-into-the-volume">
<db:title>Slicing into the Volume</db:title>
<db:para>Unless the volume is largely transparent, you can only see the surface of it, which is often not very helpful. One way to inspect the internal structure of the volume is to view the slices of the volume. <db:link xlink:href="qcustom3dvolume-qtdatavis.xml">QCustom3DVolume</db:link> provides two ways to display the slices. The first is to show the selected slices in place of the volume. For example, to specify a slice perpendicular to the X-axis, use the following method:</db:para>
<db:programlisting language="cpp">m_volumeItem-&gt;setSliceIndexX(m_sliceIndexX);
</db:programlisting>
<db:para>To display the slice specified above, the <db:link xlink:href="qcustom3dvolume-qtdatavis.xml#drawSlices-prop">QCustom3DVolume::drawSlices</db:link> property must also be set:</db:para>
<db:programlisting language="cpp">m_volumeItem-&gt;setDrawSlices(true);
</db:programlisting>
<db:para>The second way to view slices is to use <db:link xlink:href="qcustom3dvolume-qtdatavis.xml#renderSlice">QCustom3DVolume::renderSlice</db:link>() method, which produces a <db:link xlink:href="qimage.xml">QImage</db:link> from the specified slice. This image can then be displayed on another widget, such as a <db:link xlink:href="qlabel.xml">QLabel</db:link>:</db:para>
<db:programlisting language="cpp">m_sliceLabelX-&gt;setPixmap(
            QPixmap::fromImage(m_volumeItem-&gt;renderSlice(Qt::XAxis, m_sliceIndexX)));
</db:programlisting>
</db:section>
<db:section xml:id="adjusting-volume-transparency">
<db:title>Adjusting Volume Transparency</db:title>
<db:para>Sometimes, viewing just the slices doesn't give you a good understanding of the volume's internal structure. <db:link xlink:href="qcustom3dvolume-qtdatavis.xml">QCustom3DVolume</db:link> provides two properties that can be used to adjust the volume transparency:</db:para>
<db:programlisting language="cpp">m_volumeItem-&gt;setAlphaMultiplier(mult);
    ...
m_volumeItem-&gt;setPreserveOpacity(enabled);
</db:programlisting>
<db:para>The <db:link xlink:href="qcustom3dvolume-qtdatavis.xml#alphaMultiplier-prop">QCustom3DVolume::alphaMultiplier</db:link> is a general multiplier that is applied to the alpha value of each voxel of the volume. It makes it possible to add uniform transparency to the already somewhat transparent portions of the volume to reveal internal opaque details. This multiplier doesn't affect colors that are fully opaque, unless the <db:link xlink:href="qcustom3dvolume-qtdatavis.xml#preserveOpacity-prop">QCustom3DVolume::preserveOpacity</db:link> property is set to <db:code>false</db:code>.</db:para>
<db:para>An alternative way to adjust the transparency of the volume is to adjust the alpha values of the voxels directly. For eight bit indexed textures, this is done simply by modifying and resetting the color table:</db:para>
<db:programlisting language="cpp">int newAlpha = enabled ? terrainTransparency : 255;
for (int i = aboveWaterGroundColorsMin; i &lt; underWaterGroundColorsMax; i++) {
    QRgb oldColor1 = m_colorTable1.at(i);
    QRgb oldColor2 = m_colorTable2.at(i);
    m_colorTable1[i] = qRgba(qRed(oldColor1), qGreen(oldColor1), qBlue(oldColor1), newAlpha);
    m_colorTable2[i] = qRgba(qRed(oldColor2), qGreen(oldColor2), qBlue(oldColor2), newAlpha);
}
if (m_usingPrimaryTable)
    m_volumeItem-&gt;setColorTable(m_colorTable1);
else
    m_volumeItem-&gt;setColorTable(m_colorTable2);
</db:programlisting>
</db:section>
<db:section xml:id="high-definition-vs-low-definition-shader">
<db:title>High Definition vs. Low Definition Shader</db:title>
<db:para>By default, the volumetric rendering uses a high definition shader. It accounts for each voxel of the volume with the correct weight when ray-tracing the volume contents, providing an accurate representation of even the finer details of the volume. However, this is computationally very expensive, so the frame rate suffers. If rendering speed is more important than pixel-perfect accuracy of the volume contents, take the much faster low definition shader into use by setting <db:link xlink:href="qcustom3dvolume-qtdatavis.xml#useHighDefShader-prop">QCustom3DVolume::useHighDefShader</db:link> property <db:code>false</db:code>. The low definition shader achieves the speed by making compromises on accuracy, so it doesn't guarantee that every voxel of the volume will be sampled. This can lead to flickering or other rendering artifacts on the finer details of the volume.</db:para>
<db:programlisting language="cpp">m_volumeItem-&gt;setUseHighDefShader(enabled);
</db:programlisting>
</db:section>
<db:section xml:id="example-contents">
<db:title>Example Contents</db:title>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdatavis3d.git/tree/examples/datavisualization/volumetric?h=6.9">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:section>
</db:article>
