<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoAddress Class</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeoaddress.xml">QGeoAddress</db:link> class represents an address of a <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link>.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoAddress</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += positioning</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoAddress is part of <db:simplelist><db:member>QtPositioning-positioning</db:member><db:member>QtLocation-places-data</db:member><db:member>QtLocation-places</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The address' attributes are normalized to US feature names and can be mapped to the local feature levels (for example State matches &quot;Bundesland&quot; in Germany).</db:para>
<db:para>The address contains a <db:link xlink:href="qgeoaddress.xml#text">text</db:link>() for displaying purposes and additional properties to access the components of an address:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qgeoaddress.xml#country">QGeoAddress::country</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeoaddress.xml#countryCode">QGeoAddress::countryCode</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeoaddress.xml#state">QGeoAddress::state</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeoaddress.xml#city">QGeoAddress::city</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeoaddress.xml#district">QGeoAddress::district</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeoaddress.xml#street">QGeoAddress::street</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeoaddress.xml#postalCode">QGeoAddress::postalCode</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoAddress">
<db:title>QGeoAddress::QGeoAddress()</db:title>
<db:para>Default constructor.</db:para>
</db:section>
<db:section xml:id="QGeoAddress-1">
<db:title>QGeoAddress::QGeoAddress(const QGeoAddress &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoAddress">
<db:title>[noexcept] QGeoAddress::~QGeoAddress()</db:title>
<db:para>Destroys this address.</db:para>
</db:section>
<db:section xml:id="city">
<db:title>QString QGeoAddress::city() const</db:title>
<db:para>Returns the city.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#setCity">setCity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QGeoAddress::clear()</db:title>
<db:para>Clears all of the address' data fields.</db:para>
</db:section>
<db:section xml:id="country">
<db:title>QString QGeoAddress::country() const</db:title>
<db:para>Returns the country name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#setCountry">setCountry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="countryCode">
<db:title>QString QGeoAddress::countryCode() const</db:title>
<db:para>Returns the country code according to ISO 3166-1 alpha-3</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#setCountryCode">setCountryCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="county">
<db:title>QString QGeoAddress::county() const</db:title>
<db:para>Returns the county. The county is considered the second subdivision below country.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#setCounty">setCounty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="district">
<db:title>QString QGeoAddress::district() const</db:title>
<db:para>Returns the district. The district is considered the subdivison below city.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#setDistrict">setDistrict</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QGeoAddress::isEmpty() const</db:title>
<db:para>Returns whether this address is empty. An address is considered empty if <db:emphasis>all</db:emphasis> of its fields are empty.</db:para>
</db:section>
<db:section xml:id="isTextGenerated">
<db:title>bool QGeoAddress::isTextGenerated() const</db:title>
<db:para>Returns true if <db:link xlink:href="qgeoaddress.xml#text">QGeoAddress::text</db:link>() is automatically generated from address elements, otherwise returns false if <db:link xlink:href="qgeoaddress.xml#text">text</db:link>() has been explicitly assigned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#text">text</db:link>()</db:member>
<db:member><db:link xlink:href="qgeoaddress.xml#setText">setText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="postalCode">
<db:title>QString QGeoAddress::postalCode() const</db:title>
<db:para>Returns the postal code.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#setPostalCode">setPostalCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCity">
<db:title>void QGeoAddress::setCity(const QString &amp;<db:emphasis>city</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">city</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#city">city</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCountry">
<db:title>void QGeoAddress::setCountry(const QString &amp;<db:emphasis>country</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">country</db:code> name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#country">country</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCountryCode">
<db:title>void QGeoAddress::setCountryCode(const QString &amp;<db:emphasis>countryCode</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">countryCode</db:code> according to ISO 3166-1 alpha-3</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#countryCode">countryCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCounty">
<db:title>void QGeoAddress::setCounty(const QString &amp;<db:emphasis>county</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">county</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#county">county</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDistrict">
<db:title>void QGeoAddress::setDistrict(const QString &amp;<db:emphasis>district</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">district</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#district">district</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPostalCode">
<db:title>void QGeoAddress::setPostalCode(const QString &amp;<db:emphasis>postalCode</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">postalCode</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#postalCode">postalCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setState">
<db:title>void QGeoAddress::setState(const QString &amp;<db:emphasis>state</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">state</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStreet">
<db:title>void QGeoAddress::setStreet(const QString &amp;<db:emphasis>street</db:emphasis>)</db:title>
<db:para>Sets the street-level component of the address to <db:code role="parameter">street</db:code>.</db:para>
<db:para>This typically includes a street number and street name but may also contain things like a unit number, a building name, or anything else that might be used to distinguish one address from another.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#street">street</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setText">
<db:title>void QGeoAddress::setText(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">text</db:code> is not empty, explicitly assigns <db:code role="parameter">text</db:code> as the string to be returned by <db:link xlink:href="qgeoaddress.xml#text">text</db:link>(). <db:link xlink:href="qgeoaddress.xml#isTextGenerated">isTextGenerated</db:link>() will return false.</db:para>
<db:para>If <db:code role="parameter">text</db:code> is empty, indicates that <db:link xlink:href="qgeoaddress.xml#text">text</db:link>() should be automatically generated from the address elements. <db:link xlink:href="qgeoaddress.xml#isTextGenerated">isTextGenerated</db:link>() will return true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#text">text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>QString QGeoAddress::state() const</db:title>
<db:para>Returns the state. The state is considered the first subdivision below country.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#setState">setState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="street">
<db:title>QString QGeoAddress::street() const</db:title>
<db:para>Returns the street-level component of the address.</db:para>
<db:para>This typically includes a street number and street name but may also contain things like a unit number, a building name, or anything else that might be used to distinguish one address from another.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#setStreet">setStreet</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text">
<db:title>QString QGeoAddress::text() const</db:title>
<db:para>Returns the address as a single formatted string. It is the recommended string to use to display the address to the user. It typically takes the format of an address as found on an envelope, but this is not always necessarily the case.</db:para>
<db:para>The address text is either automatically generated or explicitly assigned. This can be determined by checking <db:link xlink:href="qgeoaddress.xml#isTextGenerated">isTextGenerated</db:link>.</db:para>
<db:para>If an empty string is provided to <db:link xlink:href="qgeoaddress.xml#setText">setText</db:link>(), then <db:link xlink:href="qgeoaddress.xml#isTextGenerated">isTextGenerated</db:link>() will be set to true and text() will return a string which is locally formatted according to <db:link xlink:href="qgeoaddress.xml#countryCode">countryCode</db:link>() and based on the elements of the address such as street, city and so on. Because the text string is generated from the address elements, a sequence of calls such as text(), <db:link xlink:href="qgeoaddress.xml#setStreet">setStreet</db:link>(), text() may return different strings for each invocation of text().</db:para>
<db:para>If a non-empty string is provided to <db:link xlink:href="qgeoaddress.xml#setText">setText</db:link>(), then <db:link xlink:href="qgeoaddress.xml#isTextGenerated">isTextGenerated</db:link>() will be set to false and text() will always return the explicitly assigned string. Calls to modify other elements such as <db:link xlink:href="qgeoaddress.xml#setStreet">setStreet</db:link>(), <db:link xlink:href="qgeoaddress.xml#setCity">setCity</db:link>() and so on will not affect the resultant string from text().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoaddress.xml#setText">setText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QGeoAddress::operator!=(const QGeoAddress &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this address is not equal to <db:code role="parameter">other</db:code>, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGeoAddress &amp;QGeoAddress::operator=(const QGeoAddress &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:para>Assigns the given <db:code role="parameter">address</db:code> to this address and returns a reference to this address.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QGeoAddress::operator==(const QGeoAddress &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this address is equal to <db:code role="parameter">other</db:code>, otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
