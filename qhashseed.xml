<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This struct was introduced in Qt 6.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHashSeed</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qhashseed.xml">QHashSeed</db:link> class is used to convey the <db:link xlink:href="qhash.xml#qhash">QHash</db:link> seed. This is used internally by <db:link xlink:href="qhash.xml#qhash">QHash</db:link> and provides three static member functions to allow users to obtain the hash and to reset it.</db:para>
<db:para><db:link xlink:href="qhash.xml#qhash">QHash</db:link> and the qHash() functions implement what is called as &quot;salted hash&quot;. The intent is that different applications and different instances of the same application will produce different hashing values for the same input, thus causing the ordering of elements in <db:link xlink:href="qhash.xml#qhash">QHash</db:link> to be unpredictable by external observers. This improves the applications' resilience against attacks that attempt to force hashing tables into degenerate mode.</db:para>
<db:para>Most applications will not need to deal directly with the hash seed, as <db:link xlink:href="qhash.xml#qhash">QHash</db:link> will do so when needed. However, applications may wish to use this for their own purposes in the same way as <db:link xlink:href="qhash.xml#qhash">QHash</db:link> does: as an application-global random value (but see <db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link> too). Note that the global hash seed may change during the application's lifetime, if the <db:link xlink:href="qhashseed.xml#resetRandomGlobalSeed">resetRandomGlobalSeed</db:link>() function is called. Users of the global hash need to store the value they are using and not rely on getting it again.</db:para>
<db:para>This class also implements functionality to set the hash seed to a deterministic value, which the qHash() functions will take to mean that they should use a fixed hashing function on their data too. This functionality is only meant to be used in debugging applications. This behavior can also be controlled by setting the <db:code>QT_HASH_SEED</db:code> environment variable to the value zero (any other value is ignored).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhash.xml#qhash">QHash</db:link></db:member>
<db:member><db:link xlink:href="qrandomgenerator.xml">QRandomGenerator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHashSeed">
<db:title>[constexpr] QHashSeed::QHashSeed(size_t <db:emphasis>data</db:emphasis> = 0)</db:title>
<db:constructorsynopsis>
<db:methodname>QHashSeed</db:methodname>
<db:methodparam>
<db:type>size_t</db:type>
<db:parameter>data</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QHashSeed(size_t data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qhashseed.xml">QHashSeed</db:link> object using <db:code role="parameter">data</db:code> as the seed.</db:para>
</db:section>
<db:section xml:id="globalSeed">
<db:title>[static] QHashSeed QHashSeed::globalSeed()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QHashSeed</db:type>
<db:methodname>globalSeed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHashSeed globalSeed()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current global <db:link xlink:href="qhash.xml#qhash">QHash</db:link> seed. The value returned by this function will be zero if <db:link xlink:href="qhashseed.xml#setDeterministicGlobalSeed">setDeterministicGlobalSeed</db:link>() has been called or if the <db:code>QT_HASH_SEED</db:code> environment variable is set to zero.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="resetRandomGlobalSeed">
<db:title>[static] void QHashSeed::resetRandomGlobalSeed()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>resetRandomGlobalSeed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resetRandomGlobalSeed()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reseeds the Qt hashing seed to a new, random value. Calling this function is not necessary, but long-running applications may want to do so after a long period of time in which information about its hash may have been exposed to potential attackers.</db:para>
<db:para>If the environment variable <db:code>QT_HASH_SEED</db:code> is set to zero, calling this function will result in a no-op.</db:para>
<db:para>Qt never calls this function during the execution of the application, but unless the <db:code>QT_HASH_SEED</db:code> variable is set to 0, the hash seed returned by <db:link xlink:href="qhashseed.xml#globalSeed">globalSeed</db:link>() will be a random value as if this function had been called.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="setDeterministicGlobalSeed">
<db:title>[static] void QHashSeed::setDeterministicGlobalSeed()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setDeterministicGlobalSeed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDeterministicGlobalSeed()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Forces the Qt hash seed to a deterministic value (zero) and asks the qHash() functions to use a pre-determined hashing function. This mode is only useful for debugging and should not be used in production code.</db:para>
<db:para>Regular operation can be restored by calling <db:link xlink:href="qhashseed.xml#resetRandomGlobalSeed">resetRandomGlobalSeed</db:link>().</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-size_t">
<db:title>[constexpr] size_t QHashSeed::operator size_t() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>size_t</db:type>
<db:methodname>operator size_t</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">size_t operator size_t() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the returned hash seed into a <db:code>size_t</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
