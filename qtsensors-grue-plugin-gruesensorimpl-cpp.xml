<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Sensors - Grue Sensor Example</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Qt Sensors - Grue sensor example demonstrates all the steps from creating a new sensor to using it.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtSensors module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;gruesensorimpl.h&quot;
#include &lt;QDebug&gt;
#include &lt;QTimer&gt;

char const * const gruesensorimpl::id(&quot;grue.gruesensor&quot;);

gruesensorimpl::gruesensorimpl(QSensor *sensor)
    : QSensorBackend(sensor)
    , lightLevel(QAmbientLightReading::Undefined)
{
    // We need a light sensor
    lightSensor = new QAmbientLightSensor(this);
    connect(lightSensor, SIGNAL(readingChanged()), this, SLOT(lightChanged()));
    lightSensor-&gt;connectToBackend();

    // We need a timer
    darkTimer = new QTimer(this);
    darkTimer-&gt;setInterval(1000);
    connect(darkTimer, SIGNAL(timeout()), this, SLOT(increaseChance()));

    // We use this as our timestamp source
    timer.start();

    // Register our reading instance
    setReading&lt;GrueSensorReading&gt;(&amp;m_reading);

    // Supply metadata
    // We can run as fast as the light sensor does
    setDataRates(lightSensor);
    // Only one output range, 0 to 1 in .1 increments
    addOutputRange(0, 1, 0.1);
    setDescription(QLatin1String(&quot;Grue Sensor&quot;));
}

void gruesensorimpl::start()
{
    lightSensor-&gt;setDataRate(sensor()-&gt;dataRate());
    lightSensor-&gt;start();
    // If the light sensor doesn't work we don't work either
    if (!lightSensor-&gt;isActive())
        sensorStopped();
    if (lightSensor-&gt;isBusy())
        sensorBusy();
}

void gruesensorimpl::stop()
{
    lightSensor-&gt;stop();
}

void gruesensorimpl::lightChanged()
{
    if (lightLevel == lightSensor-&gt;reading()-&gt;lightLevel())
        return;

    lightLevel = lightSensor-&gt;reading()-&gt;lightLevel();

    int chance = 0;
    darkTimer-&gt;stop();

    switch (lightSensor-&gt;reading()-&gt;lightLevel()) {
    case QAmbientLightReading::Dark:
        // It is dark. You are likely to be eaten by a grue.
        chance = 10;
        darkTimer-&gt;start();
        break;
    default:
        break;
    }

    // Only send an update if the value has changed.
    if (chance != m_reading.chanceOfBeingEaten() || m_reading.timestamp() == 0) {
        m_reading.setTimestamp(timer.elapsed());
        m_reading.setChanceOfBeingEaten(chance);
        newReadingAvailable();
    }
}

void gruesensorimpl::increaseChance()
{
    // The longer you stay in the dark, the higher your chance of being eaten
    int chance = m_reading.chanceOfBeingEaten() + 10;

    m_reading.setTimestamp(timer.elapsed());
    m_reading.setChanceOfBeingEaten(chance);

    newReadingAvailable();

    // No point in using the timer anymore if we've hit 100... you can't get more
    // likely to be eaten than 100%
    if (chance &gt;= 100)
        darkTimer-&gt;stop();
}

</db:programlisting>
</db:article>
