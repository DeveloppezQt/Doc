<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QQmlFileSelector Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A class for applying a <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> to QML file loading.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlFileSelector</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qqmlfileselector.xml">QQmlFileSelector</db:link> will automatically apply a <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> to qml file and asset paths.</db:para>
<db:para>It is used as follows:</db:para>
<db:programlisting language="cpp">QQmlEngine engine;
QQmlFileSelector* selector = new QQmlFileSelector(&amp;engine);
</db:programlisting>
<db:para>Then you can swap out files like so:</db:para>
<db:programlisting language="cpp">main.qml
Component.qml
asset.png
+unix/Component.qml
+mac/asset.png
</db:programlisting>
<db:para>In this example, main.qml will normally use Component.qml for the Component type. However on a unix platform, the unix selector will be present and the +unix/Component.qml version will be used instead. Note that this acts like swapping out Component.qml with +unix/Component.qml, so when using Component.qml you should not need to alter any paths based on which version was selected.</db:para>
<db:para>For example, to pass the &quot;asset.png&quot; file path around you would refer to it just as &quot;asset.png&quot; in all of main.qml, Component.qml, and +linux/Component.qml. It will be replaced with +mac/asset.png on Mac platforms in all cases.</db:para>
<db:para>For a list of available selectors, see <db:code>QFileSelector</db:code>.</db:para>
<db:para>Your platform may also provide additional selectors for you to use. As specified by <db:link xlink:href="qfileselector.xml">QFileSelector</db:link>, directories used for selection must start with a '+' character, so you will not accidentally trigger this feature unless you have directories with such names inside your project.</db:para>
<db:para>If a new <db:link xlink:href="qqmlfileselector.xml">QQmlFileSelector</db:link> is set on the engine, the old one will be replaced. Use <db:link xlink:href="qqmlfileselector.xml#get">QQmlFileSelector::get</db:link>() to query or use the existing instance.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlFileSelector">
<db:title>QQmlFileSelector::QQmlFileSelector(QQmlEngine *<db:emphasis>engine</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Creates a new <db:link xlink:href="qqmlfileselector.xml">QQmlFileSelector</db:link>, which includes its own <db:link xlink:href="qfileselector.xml">QFileSelector</db:link>. <db:code role="parameter">engine</db:code> is the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> you wish to apply file selectors too. It will also take ownership of the <db:link xlink:href="qqmlfileselector.xml">QQmlFileSelector</db:link>.</db:para>
</db:section>
<db:section xml:id="get">
<db:title>[static] QQmlFileSelector *QQmlFileSelector::get(QQmlEngine *<db:emphasis>engine</db:emphasis>)</db:title>
<db:para>Gets the <db:link xlink:href="qqmlfileselector.xml">QQmlFileSelector</db:link> currently active on the target <db:code role="parameter">engine</db:code>.</db:para>
</db:section>
<db:section xml:id="setExtraSelectors">
<db:title>void QQmlFileSelector::setExtraSelectors(QStringList &amp;<db:emphasis>strings</db:emphasis>)</db:title>
<db:para>Adds extra selectors contained in <db:code role="parameter">strings</db:code> to the current <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> being used. Use this when extra selectors are all you need to avoid having to create your own <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> instance.</db:para>
</db:section>
<db:section xml:id="setSelector">
<db:title>void QQmlFileSelector::setSelector(QFileSelector *<db:emphasis>selector</db:emphasis>)</db:title>
<db:para>Sets a different <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> instance for use by the <db:link xlink:href="qqmlfileselector.xml">QQmlFileSelector</db:link>. <db:link xlink:href="qqmlfileselector.xml">QQmlFileSelector</db:link> does not take ownership of the new <db:link xlink:href="qfileselector.xml">QFileSelector</db:link>. To reset <db:link xlink:href="qqmlfileselector.xml">QQmlFileSelector</db:link> to use its internal <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> instance, call setSelector(0).</db:para>
</db:section>
</db:section>
</db:article>
