<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCameraFocus Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcamerafocus.xml">QCameraFocus</db:link> class provides an interface for focus and zoom related camera settings.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCameraFocus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCameraFocus is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_camera</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>On hardware that supports it, this class lets you adjust the focus or zoom (both optical and digital). This also includes things like &quot;Macro&quot; mode for close up work (e.g. reading barcodes, or recognising letters), or &quot;touch to focus&quot; - indicating an interesting area of the viewfinder for the hardware to attempt to focus on.</db:para>
<db:programlisting language="cpp">QCameraFocus *focus = camera-&amp;gt;focus();
focus-&amp;gt;setFocusPointMode(QCameraFocus::FocusPointCustom);
focus-&amp;gt;setCustomFocusPoint(QPointF(0.25f, 0.75f)); // A point near the bottom left, 25% away from the corner, near that shiny vase
</db:programlisting>
<db:para>Zooming can be accomplished in a number of ways - usually the more expensive but higher quality approach is an optical zoom, which allows using the full extent of the camera sensor to gather image pixels. In addition it is possible to digitally zoom, which will generally just enlarge part of the sensor frame and throw away other parts. If the camera hardware supports optical zoom this should generally always be used first. The <db:link xlink:href="qcamerafocus.xml#maximumOpticalZoom">maximumOpticalZoom</db:link>() method allows this to be checked. The <db:link xlink:href="qcamerafocus.xml#zoomTo">zoomTo</db:link>() method allows changing both optical and digital zoom at once.</db:para>
<db:programlisting language="cpp">focus-&amp;gt;zoomTo(3.0, 4.0); // Super zoom!
</db:programlisting>
<db:section xml:id="some-notes-on-autofocus">
<db:title>Some notes on autofocus</db:title>
<db:para>Some hardware supports a movable focus lens assembly, and typically this hardware also supports automatically focusing via some heuristic. You can influence this via the <db:link xlink:href="qcamerafocus.xml#FocusPointMode-enum">FocusPointMode</db:link> setting - typically the center of the frame is brought into focus, but some hardware also supports focusing on any faces detected in the frame, or on a specific point (usually provided by a user in a &quot;touch to focus&quot; scenario).</db:para>
<db:para>This class (in combination with <db:link xlink:href="qcamerafocuszone.xml">QCameraFocusZone</db:link>) can expose information on what parts of the camera sensor image are in focus or are being used for autofocusing via the <db:link xlink:href="qcamerafocus.xml#focusZones-prop">focusZones</db:link>() property:</db:para>
<db:programlisting language="cpp">focus-&amp;gt;setFocusPointMode(QCameraFocus::FocusPointAuto);
QList&amp;lt;QCameraFocusZone&amp;gt; zones = focus-&amp;gt;focusZones();
foreach (QCameraFocusZone zone, zones) {
    if (zone.status() == QCameraFocusZone::Focused) {
        // Draw a green box at zone.area()
    } else if (zone.status() == QCameraFocusZone::Selected) {
        // This area is selected for autofocusing, but is not in focus
        // Draw a yellow box at zone.area()
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamerafocuszone.xml">QCameraFocusZone</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FocusMode-enum">
<db:title>enum QCameraFocus::FocusMode</db:title>
<db:bridgehead renderas="sect2">flags QCameraFocus::FocusModes</db:bridgehead>
<db:enumsynopsis>
<db:enumname>FocusMode</db:enumname>
<db:enumitem>
<db:enumidentifier>ManualFocus</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HyperfocalFocus</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InfinityFocus</db:enumidentifier>
<db:enumvalue>0x04</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AutoFocus</db:enumidentifier>
<db:enumvalue>0x8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ContinuousFocus</db:enumidentifier>
<db:enumvalue>0x10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MacroFocus</db:enumidentifier>
<db:enumvalue>0x20</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QCameraFocus::FocusModes</db:typedefname>
</db:typedefsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafocus.xml">QCameraFocus</db:link></db:emphasis>::ManualFocus</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Manual or fixed focus mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafocus.xml">QCameraFocus</db:link></db:emphasis>::HyperfocalFocus</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Focus to hyperfocal distance, with the maximum depth of field achieved. All objects at distances from half of this distance out to infinity will be acceptably sharp.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafocus.xml">QCameraFocus</db:link></db:emphasis>::InfinityFocus</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Focus strictly to infinity.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafocus.xml">QCameraFocus</db:link></db:emphasis>::AutoFocus</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>One-shot auto focus mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafocus.xml">QCameraFocus</db:link></db:emphasis>::ContinuousFocus</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Continuous auto focus mode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafocus.xml">QCameraFocus</db:link></db:emphasis>::MacroFocus</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>One shot auto focus to objects close to camera.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>FocusModes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;FocusMode&gt;. </db:code>It stores an OR combination of <db:code>FocusMode</db:code> values.</db:para>
</db:section>
<db:section xml:id="FocusPointMode-enum">
<db:title>enum QCameraFocus::FocusPointMode</db:title>
<db:enumsynopsis>
<db:enumname>FocusPointMode</db:enumname>
<db:enumitem>
<db:enumidentifier>FocusPointAuto</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FocusPointCenter</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FocusPointFaceDetection</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FocusPointCustom</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafocus.xml">QCameraFocus</db:link></db:emphasis>::FocusPointAuto</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Automatically select one or multiple focus points.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafocus.xml">QCameraFocus</db:link></db:emphasis>::FocusPointCenter</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Focus to the frame center.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafocus.xml">QCameraFocus</db:link></db:emphasis>::FocusPointFaceDetection</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Focus on faces in the frame.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcamerafocus.xml">QCameraFocus</db:link></db:emphasis>::FocusPointCustom</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Focus to the custom point, defined by <db:link xlink:href="qcamerafocus.xml#customFocusPoint-prop">QCameraFocus::customFocusPoint</db:link> property.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="customFocusPoint-prop">
<db:title>customFocusPoint : QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>customFocusPoint</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">customFocusPoint</db:synopsisinfo>
<db:synopsisinfo role="setter">setCustomFocusPoint</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property represents the position of the custom focus point, in relative frame coordinates: <db:link xlink:href="qpointf.xml">QPointF</db:link>(0,0) points to the left top frame point, <db:link xlink:href="qpointf.xml">QPointF</db:link>(0.5,0.5) points to the frame center.</db:para>
<db:para>The custom focus point property is used only in <db:code>FocusPointCustom</db:code> focus mode.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">customFocusPoint</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCustomFocusPoint</db:emphasis>(const <db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> &amp;<db:emphasis>point</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="digitalZoom-prop">
<db:title>[read-only] digitalZoom : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>digitalZoom</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">digitalZoom</db:synopsisinfo>
<db:synopsisinfo role="notifier">digitalZoomChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current digital zoom value.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">digitalZoom</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamerafocus.xml#digitalZoomChanged">digitalZoomChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamerafocus.xml#opticalZoom-prop">QCameraFocus::opticalZoom</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusMode-prop">
<db:title>focusMode : FocusModes</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>FocusModes</db:type>
<db:varname>focusMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">focusMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setFocusMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current camera focus mode.</db:para>
<db:para>This controls the way the camera lens assembly is configured.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamerafocus.xml#FocusMode-enum">QCameraFocus::FocusModes</db:link></db:type> <db:emphasis role="bold">focusMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFocusMode</db:emphasis>(<db:type><db:link xlink:href="qcamerafocus.xml#FocusMode-enum">QCameraFocus::FocusModes</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamerafocus.xml#isFocusModeSupported">QCameraFocus::isFocusModeSupported</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusPointMode-prop">
<db:title>focusPointMode : FocusPointMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>FocusPointMode</db:type>
<db:varname>focusPointMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">focusPointMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setFocusPointMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current camera focus point selection mode.</db:para>
<db:para>If the camera focus mode is set to use an autofocusing mode, this property controls the way the camera will select areas of the frame to use for autofocusing.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcamerafocus.xml#FocusPointMode-enum">QCameraFocus::FocusPointMode</db:link></db:type> <db:emphasis role="bold">focusPointMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFocusPointMode</db:emphasis>(<db:type><db:link xlink:href="qcamerafocus.xml#FocusPointMode-enum">QCameraFocus::FocusPointMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamerafocus.xml#isFocusPointModeSupported">QCameraFocus::isFocusPointModeSupported</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusZones-prop">
<db:title>[read-only] focusZones : const QCameraFocusZoneList</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QCameraFocusZoneList</db:type>
<db:varname>focusZones</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">focusZones</db:synopsisinfo>
<db:synopsisinfo role="notifier">focusZonesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the list of active focus zones.</db:para>
<db:para>If QCamera::FocusPointAuto or QCamera::FocusPointFaceDetection focus mode is selected this method returns the list of zones the camera is actually focused on.</db:para>
<db:para>The coordinates system is the same as for custom focus points: <db:link xlink:href="qpointf.xml">QPointF</db:link>(0,0) points to the left top frame point, <db:link xlink:href="qpointf.xml">QPointF</db:link>(0.5,0.5) points to the frame center.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QCameraFocusZoneList</db:type> <db:emphasis role="bold">focusZones</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamerafocus.xml#focusZonesChanged">focusZonesChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="opticalZoom-prop">
<db:title>[read-only] opticalZoom : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>opticalZoom</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">opticalZoom</db:synopsisinfo>
<db:synopsisinfo role="notifier">opticalZoomChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current optical zoom value.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">opticalZoom</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcamerafocus.xml#opticalZoomChanged">opticalZoomChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcamerafocus.xml#digitalZoom-prop">QCameraFocus::digitalZoom</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="digitalZoomChanged">
<db:title>void QCameraFocus::digitalZoomChanged(qreal <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>digitalZoomChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">digitalZoom</db:synopsisinfo>
<db:synopsisinfo role="signature">void digitalZoomChanged(qreal value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when digital zoom value changes to new <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcamerafocus.xml#digitalZoom-prop">digitalZoom</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="focusZonesChanged">
<db:title>void QCameraFocus::focusZonesChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>focusZonesChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">focusZones</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusZonesChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the set of zones used in autofocusing is changed.</db:para>
<db:para>This can change when a zone is focused or loses focus, or new focus zones have been detected.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcamerafocus.xml#focusZones-prop">focusZones</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="isAvailable">
<db:title>bool QCameraFocus::isAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAvailable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAvailable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if focus related settings are supported by this camera.</db:para>
<db:para>You may need to also check if any specific features are supported.</db:para>
</db:section>
<db:section xml:id="isFocusModeSupported">
<db:title>bool QCameraFocus::isFocusModeSupported(QCameraFocus::FocusModes <db:emphasis>mode</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFocusModeSupported</db:methodname>
<db:methodparam>
<db:type>QCameraFocus::FocusModes</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFocusModeSupported(QCameraFocus::FocusModes mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the focus <db:code role="parameter">mode</db:code> is supported by camera.</db:para>
</db:section>
<db:section xml:id="isFocusPointModeSupported">
<db:title>bool QCameraFocus::isFocusPointModeSupported(QCameraFocus::FocusPointMode <db:emphasis>mode</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFocusPointModeSupported</db:methodname>
<db:methodparam>
<db:type>QCameraFocus::FocusPointMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFocusPointModeSupported(QCameraFocus::FocusPointMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if focus point <db:code role="parameter">mode</db:code> is supported.</db:para>
</db:section>
<db:section xml:id="maximumDigitalZoom">
<db:title>qreal QCameraFocus::maximumDigitalZoom() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>maximumDigitalZoom</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal maximumDigitalZoom() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum digital zoom</db:para>
<db:para>This will be <db:code>1.0</db:code> on cameras that do not support digital zoom.</db:para>
</db:section>
<db:section xml:id="maximumDigitalZoomChanged">
<db:title>void QCameraFocus::maximumDigitalZoomChanged(qreal <db:emphasis>zoom</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>maximumDigitalZoomChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>zoom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void maximumDigitalZoomChanged(qreal zoom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when the maximum supported digital <db:code role="parameter">zoom</db:code> value changed.</db:para>
<db:para>The maximum supported zoom value can depend on other camera settings, like capture mode or resolution.</db:para>
</db:section>
<db:section xml:id="maximumOpticalZoom">
<db:title>qreal QCameraFocus::maximumOpticalZoom() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>maximumOpticalZoom</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal maximumOpticalZoom() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum optical zoom.</db:para>
<db:para>This will be <db:code>1.0</db:code> on cameras that do not support optical zoom.</db:para>
</db:section>
<db:section xml:id="maximumOpticalZoomChanged">
<db:title>void QCameraFocus::maximumOpticalZoomChanged(qreal <db:emphasis>zoom</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>maximumOpticalZoomChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>zoom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void maximumOpticalZoomChanged(qreal zoom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when the maximum supported optical <db:code role="parameter">zoom</db:code> value changed.</db:para>
</db:section>
<db:section xml:id="opticalZoomChanged">
<db:title>void QCameraFocus::opticalZoomChanged(qreal <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>opticalZoomChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">opticalZoom</db:synopsisinfo>
<db:synopsisinfo role="signature">void opticalZoomChanged(qreal value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when optical zoom value changes to new <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qcamerafocus.xml#opticalZoom-prop">opticalZoom</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="zoomTo">
<db:title>void QCameraFocus::zoomTo(qreal <db:emphasis>optical</db:emphasis>, qreal <db:emphasis>digital</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>zoomTo</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>optical</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>digital</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void zoomTo(qreal optical, qreal digital)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the camera <db:code role="parameter">optical</db:code> and <db:code role="parameter">digital</db:code> zoom values.</db:para>
<db:para>Since there may be a physical component to move, the change in zoom value may not be instantaneous.</db:para>
</db:section>
</db:section>
</db:article>
