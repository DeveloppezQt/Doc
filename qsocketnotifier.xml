<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSocketNotifier Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link> class provides support for monitoring activity on a file descriptor.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSocketNotifier</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSocketNotifier is part of <db:simplelist><db:member>network</db:member><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link> makes it possible to integrate Qt's event loop with other event loops based on file descriptors. File descriptor action is detected in Qt's main event loop (<db:link xlink:href="qcoreapplication.xml#exec">QCoreApplication::exec</db:link>()).</db:para>
<db:anchor xml:id="write-notifiers"/>
<db:para>Once you have opened a device using a low-level (usually platform-specific) API, you can create a socket notifier to monitor the file descriptor. The socket notifier is enabled by default, i.e. it emits the <db:link xlink:href="qsocketnotifier.xml#activated">activated</db:link>() signal whenever a socket event corresponding to its type occurs. Connect the <db:link xlink:href="qsocketnotifier.xml#activated">activated</db:link>() signal to the slot you want to be called when an event corresponding to your socket notifier's type occurs.</db:para>
<db:para>There are three types of socket notifiers: read, write, and exception. The type is described by the <db:link xlink:href="qsocketnotifier.xml#Type-enum">Type</db:link> enum, and must be specified when constructing the socket notifier. After construction it can be determined using the <db:link xlink:href="qsocketnotifier.xml#type">type</db:link>() function. Note that if you need to monitor both reads and writes for the same file descriptor, you must create two socket notifiers. Note also that it is not possible to install two socket notifiers of the same type (<db:link xlink:href="qsocketnotifier.xml#Type-enum">Read</db:link>, <db:link xlink:href="qsocketnotifier.xml#Type-enum">Write</db:link>, <db:link xlink:href="qsocketnotifier.xml#Type-enum">Exception</db:link>) on the same socket.</db:para>
<db:para>The <db:link xlink:href="qsocketnotifier.xml#setEnabled">setEnabled</db:link>() function allows you to disable as well as enable the socket notifier. It is generally advisable to explicitly enable or disable the socket notifier, especially for write notifiers. A disabled notifier ignores socket events (the same effect as not creating the socket notifier). Use the <db:link xlink:href="qsocketnotifier.xml#isEnabled">isEnabled</db:link>() function to determine the notifier's current status.</db:para>
<db:para>Finally, you can use the <db:link xlink:href="qsocketnotifier.xml#socket">socket</db:link>() function to retrieve the socket identifier. Although the class is called <db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link>, it is normally used for other types of devices than sockets. <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> and <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link> provide notification through signals, so there is normally no need to use a <db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link> on them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
<db:member><db:link xlink:href="qprocess.xml">QProcess</db:link></db:member>
<db:member><db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link></db:member>
<db:member><db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Type-enum">
<db:title>enum QSocketNotifier::Type</db:title>
<db:enumsynopsis>
<db:enumname>Type</db:enumname>
<db:enumitem>
<db:enumidentifier>Read</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Write</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Exception</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the various types of events that a socket notifier can recognize. The type must be specified when constructing the socket notifier.</db:para>
<db:para>Note that if you need to monitor both reads and writes for the same file descriptor, you must create two socket notifiers. Note also that it is not possible to install two socket notifiers of the same type (Read, Write, Exception) on the same socket.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link></db:emphasis>::Read</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>There is data to be read.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link></db:emphasis>::Write</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Data can be written.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link></db:emphasis>::Exception</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An exception has occurred. We recommend against using this.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsocketnotifier.xml#QSocketNotifier">QSocketNotifier</db:link>()</db:member>
<db:member><db:link xlink:href="qsocketnotifier.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSocketNotifier">
<db:title>QSocketNotifier::QSocketNotifier(qintptr <db:emphasis>socket</db:emphasis>, QSocketNotifier::Type <db:emphasis>type</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSocketNotifier</db:methodname>
<db:methodparam>
<db:type>qintptr</db:type>
<db:parameter>socket</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSocketNotifier::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSocketNotifier(qintptr socket, QSocketNotifier::Type type, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a socket notifier with the given <db:code role="parameter">parent</db:code>. It enables the <db:code role="parameter">socket</db:code>, and watches for events of the given <db:code role="parameter">type</db:code>.</db:para>
<db:para>It is generally advisable to explicitly enable or disable the socket notifier, especially for write notifiers.</db:para>
<db:para><db:emphasis role="bold">Note for Windows users:</db:emphasis> The socket passed to <db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link> will become non-blocking, even if it was created as a blocking socket.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsocketnotifier.xml#setEnabled">setEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qsocketnotifier.xml#isEnabled">isEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QSocketNotifier">
<db:title>[virtual] QSocketNotifier::~QSocketNotifier()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSocketNotifier</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSocketNotifier()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this socket notifier.</db:para>
</db:section>
<db:section xml:id="activated">
<db:title>[since 5.15] void QSocketNotifier::activated(QSocketDescriptor <db:emphasis>socket</db:emphasis>, QSocketNotifier::Type <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>activated</db:methodname>
<db:methodparam>
<db:type>QSocketDescriptor</db:type>
<db:parameter>socket</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSocketNotifier::Type</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void activated(QSocketDescriptor socket, QSocketNotifier::Type type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the socket notifier is enabled and a socket event corresponding to its <db:code role="parameter">type</db:code> occurs.</db:para>
<db:para>The socket identifier is passed in the <db:code role="parameter">socket</db:code> parameter.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:para>This function was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsocketnotifier.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qsocketnotifier.xml#socket">socket</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QSocketNotifier::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#event" role="function">QObject::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="isEnabled">
<db:title>bool QSocketNotifier::isEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the notifier is enabled; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsocketnotifier.xml#setEnabled">setEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEnabled">
<db:title>void QSocketNotifier::setEnabled(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEnabled(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">enable</db:code> is true, the notifier is enabled; otherwise the notifier is disabled.</db:para>
<db:para>The notifier is enabled by default, i.e. it emits the <db:link xlink:href="qsocketnotifier.xml#activated">activated</db:link>() signal whenever a socket event corresponding to its <db:link xlink:href="qsocketnotifier.xml#type">type</db:link> occurs. If it is disabled, it ignores socket events (the same effect as not creating the socket notifier).</db:para>
<db:para>Write notifiers should normally be disabled immediately after the <db:link xlink:href="qsocketnotifier.xml#activated">activated</db:link>() signal has been emitted</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsocketnotifier.xml#isEnabled">isEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qsocketnotifier.xml#activated">activated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="socket">
<db:title>qintptr QSocketNotifier::socket() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qintptr</db:type>
<db:methodname>socket</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qintptr socket() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the socket identifier specified to the constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsocketnotifier.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>QSocketNotifier::Type QSocketNotifier::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSocketNotifier::Type</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSocketNotifier::Type type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the socket event type specified to the constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsocketnotifier.xml#socket">socket</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QSocketNotifier</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qsocketnotifier.xml">QSocketNotifier</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="activated-1">
<db:title>void QSocketNotifier::activated(int <db:emphasis>socket</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>activated</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>socket</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void activated(int socket)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>To avoid unintended truncation of the descriptor, use the QSocketDescriptor overload of this function. If you need compatibility with versions older than 5.15 you need to change the slot to accept qintptr if it currently accepts an int, and then connect using Functor-Based Connection.</db:para>
<db:para>This signal is emitted whenever the socket notifier is enabled and a socket event corresponding to its <db:link xlink:href="qsocketnotifier.xml#Type-enum">type</db:link> occurs.</db:para>
<db:para>The socket identifier is passed in the <db:code role="parameter">socket</db:code> parameter.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsocketnotifier.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qsocketnotifier.xml#socket">socket</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
