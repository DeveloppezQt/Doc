<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Creating Help Project Files</db:title>
<db:productname>QDoc</db:productname>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="22-qdoc-configuration-generalvariables.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Generic Configuration Variables"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="23-qdoc-configuration-cppvariables.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="C++ Specific Configuration Variables"/></db:extendedlink>
<db:abstract>
<db:para>QDoc Manual.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>QDoc Manual</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>Starting with Qt 4.4, Qt Assistant uses a different system for managing Qt documentation that requires QDoc to generate inventories of files in a format that is similar to the old style DCF format, but with additional features.</db:para>
<db:para>Instead of hard-coding information about the documentation sets for Qt, QDoc allows configuration variables to be used to specify which pages are to be used in each documentation set it generates. These are specified as subvariables of the qch variable with each set declared using a unique identifier as a subvariable.</db:para>
<db:para>For example, the configuration file for the Qt documentation defines a Qt documentation set by specifying information about the set as subvariables with the qhp.Qt prefix:</db:para>
<db:programlisting language="cpp">qhp.Qt.file                = qt.qhp
qhp.Qt.namespace           = com.trolltech.qt.440
qhp.Qt.virtualFolder       = qdoc
qhp.Qt.indexTitle          = Qt Reference Documentation
qhp.Qt.indexRoot           =
qhp.Qt.extraFiles          = classic.css images/qt-logo.png
qhp.Qt.filterAttributes    = qt 4.4.0 qtrefdoc
qhp.Qt.customFilters.Qt.name = Qt 4.4.0
qhp.Qt.customFilters.Qt.filterAttributes = qt 4.4.0
qhp.Qt.subprojects         = classes overviews examples
qhp.Qt.subprojects.classes.title = Classes
qhp.Qt.subprojects.classes.indexTitle = Qt's Classes
qhp.Qt.subprojects.classes.selectors = class
qhp.Qt.subprojects.overviews.title = Overviews
qhp.Qt.subprojects.overviews.indexTitle = All Overviews and HOWTOs
qhp.Qt.subprojects.overviews.selectors = fake:page,group,module
qhp.Qt.subprojects.examples.title = Tutorials and Examples
qhp.Qt.subprojects.examples.indexTitle = Qt Examples
qhp.Qt.subprojects.examples.selectors = fake:example
</db:programlisting>
<db:para>To create a table of contents for a manual, create a subproject with a type property and set it to manual. The page in the documentation referred to by the indexTitle property must contain a list of links that acts as a table of contents for the whole manual. QDoc will take the information in this list and create a table of contents for the subproject.</db:para>
<db:para>For example, the configuration file for Qt Creator defines only one subproject for its documentation, including all the documentation in a single manual:</db:para>
<db:programlisting language="cpp">qhp.QtCreator.subprojects = manual
qhp.QtCreator.subprojects.manual.title = Qt Creator Manual
qhp.QtCreator.subprojects.manual.indexTitle = Qt Creator Manual
qhp.QtCreator.subprojects.manual.type = manual
</db:programlisting>
<db:para>In this example, the page entitled &quot;Qt Creator Manual&quot; contains a nested list of links to pages in the documentation which is duplicated in Qt Assistant's Contents tab.</db:para>
</db:section>
</db:article>
