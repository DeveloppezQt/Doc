<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Developing on Raspberry Pi</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qt-edu-for-developers.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Qt Edu for Developers"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qt-edu-resources.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Qt Edu resources"/></db:extendedlink>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>With <db:link xlink:href="qt-edu-for-developers.xml">Qt Edu for Developers</db:link> package, you can also develop for embedded devices with Raspberry Pi as target hardware. This is done by adding a <db:emphasis>Qt Board Support Package</db:emphasis> (QBSP) to your existing Qt installation, and flashing an SD card used by Raspberry Pi with a <db:emphasis>Boot to Qt</db:emphasis> system image.</db:para>
<db:note>
<db:para>Windows and Linux are supported as development hosts, but macOS is not supported.</db:para>
</db:note>
<db:para>First, complete the <db:link xlink:href="qt-edu-for-developers.xml">Qt Edu for Developers</db:link> installation steps before continuing.</db:para>
<db:section xml:id="A1-download-qbsp">
<db:title>1. Download QBSP</db:title>
<db:para>Log in to your <db:link xlink:href="https://login.qt.io/login">Qt Account</db:link>. Go to the <db:guilabel>Downloads</db:guilabel> section and select <db:emphasis>Qt for Device Creation QBSP for the EDU license</db:emphasis> from the drop-down menu in the <db:guilabel>Product</db:guilabel> field.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qt-edu-qbsp.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Download the correct version of the <db:emphasis>.qbsp</db:emphasis> file for your development host (Windows or Linux).</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qt-edu-qbsp-download.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="A2-run-the-maintenance-tool">
<db:title>2. Run the maintenance tool</db:title>
<db:para>Go to Qt's installation folder, and run <db:guilabel>MaintenanceTool</db:guilabel>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qt-edu-maintenancetool.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Maintenance tool allows you to modify your existing Qt installation. Navigate to <db:guilabel>Custom installation</db:guilabel> and select <db:guilabel>Next</db:guilabel>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qt-edu-custominstallation.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Select <db:guilabel>Browse QBSP files</db:guilabel>. In the file dialog window, locate and select the <db:code>.qbsp</db:code> file you downloaded from your Qt Account.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qt-edu-browse-qbsp.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>After this, the list of available components is updated. Under <db:guilabel>Boot to Qt Software Stack</db:guilabel>, select <db:guilabel>Raspberry Pi</db:guilabel> and then <db:guilabel>Next</db:guilabel>. This will install the Boot to Qt system image and toolchain for Raspberry Pi.</db:para>
</db:section>
<db:section xml:id="A3-open-qt-creator">
<db:title>3. Open Qt Creator</db:title>
<db:para>To complete the setup, the Boot to Qt system image needs to be flashed to an SD card used as the boot drive for Raspberry Pi. In addition, Qt Creator needs to be configured for connecting to the device running the Boot to Qt software stack, using either a wired or wireless network connection.</db:para>
<db:para>These steps are performed in Qt Creator, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-developing-b2qt.html">Qt Creator: Connecting Boot2Qt Devices</db:link> for details.</db:para>
</db:section>
</db:article>
