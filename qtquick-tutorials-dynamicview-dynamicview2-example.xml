<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Dynamic View Ordering Tutorial 2 - Dragging View Items</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtquick-tutorials-dynamicview-dynamicview1-example.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="QML Dynamic View Ordering Tutorial 1 - A Simple ListView and Delegate"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtquick-tutorials-dynamicview-dynamicview3-example.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="QML Dynamic View Ordering Tutorial 3 - Moving Dragged Items"/></db:extendedlink>
<db:abstract>
<db:para>Qt Quick Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>QML Dynamic View Ordering Tutorial</db:para>
<db:para>Now that we have a visible list of items we want to be able to interact with them. We'll start by extending the delegate so the visible content can be dragged up and down the screen. The updated delegate looks like this:</db:para>
<db:programlisting language="qml">    Component {
        id: dragDelegate

        MouseArea {
            id: dragArea

            property bool held: false

            anchors { left: parent.left; right: parent.right }
            height: content.height

            drag.target: held ? content : undefined
            drag.axis: Drag.YAxis

            onPressAndHold: held = true
            onReleased: held = false

            Rectangle {
                id: content
                anchors {
                    horizontalCenter: parent.horizontalCenter
                    verticalCenter: parent.verticalCenter
                }
                width: dragArea.width; height: column.implicitHeight + 4

                border.width: 1
                border.color: &quot;lightsteelblue&quot;
                color: dragArea.held ? &quot;lightsteelblue&quot; : &quot;white&quot;
                Behavior on color { ColorAnimation { duration: 100 } }
                radius: 2
                states: State {
                    when: dragArea.held

                    ParentChange { target: content; parent: root }
                    AnchorChanges {
                        target: content
                        anchors { horizontalCenter: undefined; verticalCenter: undefined }
                    }
                }
                Column {
                    id: column
                    anchors { fill: parent; margins: 2 }

                    Text { text: 'Name: ' + name }
                    Text { text: 'Type: ' + type }
                    Text { text: 'Age: ' + age }
                    Text { text: 'Size: ' + size }
                }
            }
        }
    }
</db:programlisting>
<db:section xml:id="walkthrough">
<db:title>Walkthrough</db:title>
<db:para>The major change here is the root item of the delegate is now a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> which provides handlers for mouse events and will allow us to drag the delegate's content item. It also acts as a container for the content item which is important as a delegate's root item is positioned by the view and cannot be moved by other means.</db:para>
<db:programlisting language="qml">        MouseArea {
            id: dragArea

            property bool held: false

            anchors { left: parent.left; right: parent.right }
            height: content.height

            drag.target: held ? content : undefined
            drag.axis: Drag.YAxis

            onPressAndHold: held = true
            onReleased: held = false

            Rectangle {
                id: content
            }
        }
</db:programlisting>
<db:para>Dragging the content item is enabled by binding it to the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>'s <db:link xlink:href="qml-qtquick-mousearea.xml#drag.target-prop">drag.target</db:link> property. Because we still want the view to be flickable we wait until the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>'s <db:link xlink:href="qml-qtquick-mousearea.xml#pressAndHold-signal">pressAndHold</db:link> signal is emitted before binding the drag target. This way when mouse moves before the hold timeout has expired it is interpreted as moving the list and if it moves after it is interpreted as dragging an item. To make it more obvious to the user when an item can be dragged we'll change the background color of the content item when the timeout has expired.</db:para>
<db:programlisting language="qml">                color: dragArea.held ? &quot;lightsteelblue&quot; : &quot;white&quot;
                Behavior on color { ColorAnimation { duration: 100 } }
</db:programlisting>
<db:para>The other thing we'll need to do before an item can be dragged is to unset any anchors on the content item so it can be freely moved around. We do this in a state change that is triggered when the delegate item is held, at the same time we can reparent the content item to the root item so that is above other items in the stacking order and isn't obscured as it is dragged around.</db:para>
<db:programlisting language="qml">                states: State {
                    when: dragArea.held

                    ParentChange { target: content; parent: root }
                    AnchorChanges {
                        target: content
                        anchors { horizontalCenter: undefined; verticalCenter: undefined }
                    }
                }
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/tutorials/dynamicview/dynamicview2?h=5.13">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
