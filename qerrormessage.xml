<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QErrorMessage Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qerrormessage.xml">QErrorMessage</db:link> class provides an error message display dialog.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QErrorMessage</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdialog.xml" xlink:role="class">QDialog</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QErrorMessage is part of <db:simplelist><db:member>standard-dialog</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An error message widget consists of a text label and a checkbox. The checkbox lets the user control whether the same error message will be displayed again in the future, typically displaying the text, &quot;Show this message again&quot; translated into the appropriate local language.</db:para>
<db:para>For production applications, the class can be used to display messages which the user only needs to see once. To use <db:link xlink:href="qerrormessage.xml">QErrorMessage</db:link> like this, you create the dialog in the usual way, and show it by calling the <db:link xlink:href="qerrormessage.xml#showMessage">showMessage</db:link>() slot or connecting signals to it.</db:para>
<db:para>The static <db:link xlink:href="qerrormessage.xml#qtHandler">qtHandler</db:link>() function installs a message handler using <db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>() and creates a <db:link xlink:href="qerrormessage.xml">QErrorMessage</db:link> that displays <db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qtlogging.xml#qWarning">qWarning</db:link>() and <db:link xlink:href="qtlogging.xml#qFatal">qFatal</db:link>() messages. This is most useful in environments where no console is available to display warnings and error messages.</db:para>
<db:para>In both cases <db:link xlink:href="qerrormessage.xml">QErrorMessage</db:link> will queue pending messages and display them in order, with each new message being shown as soon as the user has accepted the previous message. Once the user has specified that a message is not to be shown again it is automatically skipped, and the dialog will show the next appropriate message in the queue.</db:para>
<db:para>The <db:link xlink:href="qtwidgets-dialogs-standarddialogs-example.xml">Standard Dialogs</db:link> example shows how to use <db:link xlink:href="qerrormessage.xml">QErrorMessage</db:link> as well as other built-in Qt dialogs.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qerrormessage.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessagebox.xml">QMessageBox</db:link></db:member>
<db:member><db:link xlink:href="qstatusbar.xml#showMessage">QStatusBar::showMessage</db:link>()</db:member>
<db:member><db:link xlink:href="qtwidgets-dialogs-standarddialogs-example.xml">Standard Dialogs Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QErrorMessage">
<db:title>[explicit] QErrorMessage::QErrorMessage(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QErrorMessage</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QErrorMessage(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs and installs an error handler window with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The default <db:link xlink:href="qt.xml#WindowModality-enum">window modality</db:link> of the dialog depends on the platform. The window modality can be overridden via <db:link xlink:href="qwidget.xml#windowModality-prop">setWindowModality</db:link>() before calling <db:link xlink:href="qerrormessage.xml#showMessage">showMessage</db:link>().</db:para>
</db:section>
<db:section xml:id="dtor.QErrorMessage">
<db:title>[virtual] QErrorMessage::~QErrorMessage()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QErrorMessage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QErrorMessage()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the error message dialog.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QErrorMessage::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>changeEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changeEvent(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="done">
<db:title>[override virtual protected] void QErrorMessage::done(int <db:emphasis>a</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>done</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void done(int a) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qdialog.xml#done" role="function">QDialog::done(int r)</db:link>.</db:para>
</db:section>
<db:section xml:id="qtHandler">
<db:title>[static] QErrorMessage *QErrorMessage::qtHandler()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QErrorMessage *</db:type>
<db:methodname>qtHandler</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QErrorMessage * qtHandler()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to a <db:link xlink:href="qerrormessage.xml">QErrorMessage</db:link> object that outputs the default Qt messages. This function creates such an object, if there isn't one already.</db:para>
<db:para>The object will only output log messages of <db:link xlink:href="qloggingcategory.xml#defaultCategory">QLoggingCategory::defaultCategory</db:link>().</db:para>
<db:para>The object will forward all messages to the original message handler.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtlogging.xml#qInstallMessageHandler">qInstallMessageHandler</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showMessage">
<db:title>void QErrorMessage::showMessage(const QString &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>showMessage</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showMessage(const QString &amp;message)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shows the given message, <db:code role="parameter">message</db:code>, and returns immediately. If the user has requested for the message not to be shown again, this function does nothing.</db:para>
<db:para>Normally, the message is displayed immediately. However, if there are pending messages, it will be queued to be displayed later.</db:para>
</db:section>
<db:section xml:id="showMessage-1">
<db:title>void QErrorMessage::showMessage(const QString &amp;<db:emphasis>message</db:emphasis>, const QString &amp;<db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>showMessage</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void showMessage(const QString &amp;message, const QString &amp;type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Shows the given message, <db:code role="parameter">message</db:code>, and returns immediately. If the user has requested for messages of type, <db:code role="parameter">type</db:code>, not to be shown again, this function does nothing.</db:para>
<db:para>Normally, the message is displayed immediately. However, if there are pending messages, it will be queued to be displayed later.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qerrormessage.xml#showMessage">showMessage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
