<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextTableCell Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtexttablecell.xml">QTextTableCell</db:link> class represents the properties of a cell in a <db:link xlink:href="qtexttable.xml">QTextTable</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextTableCell</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextTableCell is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Table cells are pieces of document structure that belong to a table. The table orders cells into particular rows and columns; cells can also span multiple columns and rows.</db:para>
<db:para>Cells are usually created when a table is inserted into a document with <db:link xlink:href="qtextcursor.xml#insertTable">QTextCursor::insertTable</db:link>(), but they are also created and destroyed when a table is resized.</db:para>
<db:para>Cells contain information about their location in a table; you can obtain the <db:link xlink:href="qtexttablecell.xml#row">row</db:link>() and <db:link xlink:href="qtexttablecell.xml#column">column</db:link>() numbers of a cell, and its <db:link xlink:href="qtexttablecell.xml#rowSpan">rowSpan</db:link>() and <db:link xlink:href="qtexttablecell.xml#columnSpan">columnSpan</db:link>().</db:para>
<db:para>The <db:link xlink:href="qtexttablecell.xml#format">format</db:link>() of a cell describes the default character format of its contents. The <db:link xlink:href="qtexttablecell.xml#firstCursorPosition">firstCursorPosition</db:link>() and <db:link xlink:href="qtexttablecell.xml#lastCursorPosition">lastCursorPosition</db:link>() functions are used to obtain the extent of the cell in the document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml">QTextTable</db:link></db:member>
<db:member><db:link xlink:href="qtexttableformat.xml">QTextTableFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextTableCell">
<db:title>QTextTableCell::QTextTableCell()</db:title>
<db:para>Constructs an invalid table cell.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttablecell.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTextTableCell-1">
<db:title>QTextTableCell::QTextTableCell(const QTextTableCell &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copy constructor. Creates a new <db:link xlink:href="qtexttablecell.xml">QTextTableCell</db:link> object based on the <db:code role="parameter">other</db:code> cell.</db:para>
</db:section>
<db:section xml:id="dtor.QTextTableCell">
<db:title>[noexcept] QTextTableCell::~QTextTableCell()</db:title>
<db:para>Destroys the table cell.</db:para>
</db:section>
<db:section xml:id="begin">
<db:title>QTextFrame::iterator QTextTableCell::begin() const</db:title>
<db:para>Returns a frame iterator pointing to the beginning of the table's cell.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttablecell.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="column">
<db:title>int QTextTableCell::column() const</db:title>
<db:para>Returns the number of the column in the table that contains this cell.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttablecell.xml#row">row</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnSpan">
<db:title>int QTextTableCell::columnSpan() const</db:title>
<db:para>Returns the number of columns this cell spans. The default is 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttablecell.xml#rowSpan">rowSpan</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="end">
<db:title>QTextFrame::iterator QTextTableCell::end() const</db:title>
<db:para>Returns a frame iterator pointing to the end of the table's cell.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttablecell.xml#begin">begin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="firstCursorPosition">
<db:title>QTextCursor QTextTableCell::firstCursorPosition() const</db:title>
<db:para>Returns the first valid cursor position in this cell.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttablecell.xml#lastCursorPosition">lastCursorPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>QTextCharFormat QTextTableCell::format() const</db:title>
<db:para>Returns the cell's character format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttablecell.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QTextTableCell::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if this is a valid table cell; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="lastCursorPosition">
<db:title>QTextCursor QTextTableCell::lastCursorPosition() const</db:title>
<db:para>Returns the last valid cursor position in this cell.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttablecell.xml#firstCursorPosition">firstCursorPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="row">
<db:title>int QTextTableCell::row() const</db:title>
<db:para>Returns the number of the row in the table that contains this cell.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttablecell.xml#column">column</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowSpan">
<db:title>int QTextTableCell::rowSpan() const</db:title>
<db:para>Returns the number of rows this cell spans. The default is 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttablecell.xml#columnSpan">columnSpan</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>[since 4.2] void QTextTableCell::setFormat(const QTextCharFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Sets the cell's character format to <db:code role="parameter">format</db:code>. This can for example be used to change the background color of the entire cell:</db:para>
<db:para><db:link xlink:href="qtexttablecell.xml">QTextTableCell</db:link> cell = table-&gt;cellAt(2, 3); <db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link> format = cell.<db:link xlink:href="qtexttablecell.xml#format">format</db:link>(); format.setBackground(<db:link xlink:href="qt.xml#GlobalColor-enum">Qt::blue</db:link>); cell.setFormat(format);</db:para>
<db:para>Note that the cell's row or column span cannot be changed through this function. You have to use <db:link xlink:href="qtexttable.xml#mergeCells">QTextTable::mergeCells</db:link> and <db:link xlink:href="qtexttable.xml#splitCell">QTextTable::splitCell</db:link> instead.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttablecell.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tableCellFormatIndex">
<db:title>[since 4.5] int QTextTableCell::tableCellFormatIndex() const</db:title>
<db:para>Returns the index of the tableCell's format in the document's internal list of formats.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocument.xml#allFormats">QTextDocument::allFormats</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QTextTableCell::operator!=(const QTextTableCell &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this cell object and the <db:code role="parameter">other</db:code> cell object describe different cells; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QTextTableCell &amp;QTextTableCell::operator=(const QTextTableCell &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the <db:code role="parameter">other</db:code> table cell to this table cell.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QTextTableCell::operator==(const QTextTableCell &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this cell object and the <db:code role="parameter">other</db:code> cell object describe the same cell; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
