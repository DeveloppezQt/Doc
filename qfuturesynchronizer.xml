<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFutureSynchronizer Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QFutureSynchronizer</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfuturesynchronizer.xml">QFutureSynchronizer</db:link> class is a convenience class that simplifies <db:link xlink:href="qfuture.xml">QFuture</db:link> synchronization.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFutureSynchronizer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFutureSynchronizer is part of <db:simplelist><db:member>thread</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qfuturesynchronizer.xml">QFutureSynchronizer</db:link> is a template class that simplifies synchronization of one or more <db:link xlink:href="qfuture.xml">QFuture</db:link> objects. Futures are added using the <db:link xlink:href="qfuturesynchronizer.xml#addFuture">addFuture</db:link>() or <db:link xlink:href="qfuturesynchronizer.xml#setFuture">setFuture</db:link>() functions. The <db:link xlink:href="qfuturesynchronizer.xml#futures">futures</db:link>() function returns a list of futures. Use <db:link xlink:href="qfuturesynchronizer.xml#clearFutures">clearFutures</db:link>() to remove all futures from the <db:link xlink:href="qfuturesynchronizer.xml">QFutureSynchronizer</db:link>.</db:para>
<db:para>The <db:link xlink:href="qfuturesynchronizer.xml#waitForFinished">waitForFinished</db:link>() function waits for all futures to finish. The destructor of <db:link xlink:href="qfuturesynchronizer.xml">QFutureSynchronizer</db:link> calls <db:link xlink:href="qfuturesynchronizer.xml#waitForFinished">waitForFinished</db:link>(), providing an easy way to ensure that all futures have finished before returning from a function:</db:para>
<db:programlisting language="cpp">void someFunction()
{
    QFutureSynchronizer&amp;lt;void&amp;gt; synchronizer;

    ...

    synchronizer.addFuture(QtConcurrent::run(anotherFunction));
    synchronizer.addFuture(QtConcurrent::map(list, mapFunction));

    return; // QFutureSynchronizer waits for all futures to finish
}
</db:programlisting>
<db:para>The behavior of <db:link xlink:href="qfuturesynchronizer.xml#waitForFinished">waitForFinished</db:link>() can be changed using the <db:link xlink:href="qfuturesynchronizer.xml#setCancelOnWait">setCancelOnWait</db:link>() function. Calling <db:link xlink:href="qfuturesynchronizer.xml#setCancelOnWait">setCancelOnWait</db:link>(true) will cause <db:link xlink:href="qfuturesynchronizer.xml#waitForFinished">waitForFinished</db:link>() to cancel all futures before waiting for them to finish. You can query the status of the cancel-on-wait feature using the <db:link xlink:href="qfuturesynchronizer.xml#cancelOnWait">cancelOnWait</db:link>() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuture.xml">QFuture</db:link></db:member>
<db:member><db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link></db:member>
<db:member><db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFutureSynchronizer-1">
<db:title>QFutureSynchronizer::QFutureSynchronizer()</db:title>
<db:constructorsynopsis>
<db:methodname>QFutureSynchronizer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFutureSynchronizer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qfuturesynchronizer.xml">QFutureSynchronizer</db:link>.</db:para>
</db:section>
<db:section xml:id="QFutureSynchronizer-2">
<db:title>[explicit] QFutureSynchronizer::QFutureSynchronizer(const QFuture&lt;T&gt; &amp;<db:emphasis>future</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QFutureSynchronizer</db:methodname>
<db:methodparam>
<db:type>const QFuture&lt;T&gt; &amp;</db:type>
<db:parameter>future</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QFutureSynchronizer(const QFuture&lt;T&gt; &amp;future)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qfuturesynchronizer.xml">QFutureSynchronizer</db:link> and begins watching <db:code role="parameter">future</db:code> by calling <db:link xlink:href="qfuturesynchronizer.xml#addFuture">addFuture</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuturesynchronizer.xml#addFuture">addFuture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QFutureSynchronizer">
<db:title>QFutureSynchronizer::~QFutureSynchronizer()</db:title>
<db:destructorsynopsis>
<db:methodname>~QFutureSynchronizer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QFutureSynchronizer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Calls <db:link xlink:href="qfuturesynchronizer.xml#waitForFinished">waitForFinished</db:link>() function to ensure that all futures have finished before destroying this <db:link xlink:href="qfuturesynchronizer.xml">QFutureSynchronizer</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuturesynchronizer.xml#waitForFinished">waitForFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addFuture">
<db:title>void QFutureSynchronizer::addFuture(const QFuture&lt;T&gt; &amp;<db:emphasis>future</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addFuture</db:methodname>
<db:methodparam>
<db:type>const QFuture&lt;T&gt; &amp;</db:type>
<db:parameter>future</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addFuture(const QFuture&lt;T&gt; &amp;future)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">future</db:code> to the list of managed futures.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuturesynchronizer.xml#futures">futures</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cancelOnWait">
<db:title>bool QFutureSynchronizer::cancelOnWait() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>cancelOnWait</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool cancelOnWait() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the cancel-on-wait feature is enabled; otherwise returns false. If cancel-on-wait is enabled, the <db:link xlink:href="qfuturesynchronizer.xml#waitForFinished">waitForFinished</db:link>() function will cancel all futures before waiting for them to finish.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuturesynchronizer.xml#setCancelOnWait">setCancelOnWait</db:link>()</db:member>
<db:member><db:link xlink:href="qfuturesynchronizer.xml#waitForFinished">waitForFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearFutures">
<db:title>void QFutureSynchronizer::clearFutures()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearFutures</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearFutures()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all managed futures from this <db:link xlink:href="qfuturesynchronizer.xml">QFutureSynchronizer</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuturesynchronizer.xml#addFuture">addFuture</db:link>()</db:member>
<db:member><db:link xlink:href="qfuturesynchronizer.xml#setFuture">setFuture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="futures">
<db:title>QList&lt;QFuture&lt;T&gt;&gt; QFutureSynchronizer::futures() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QFuture&lt;T&gt;&gt;</db:type>
<db:methodname>futures</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QFuture&lt;T&gt;&gt; futures() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all managed futures.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuturesynchronizer.xml#addFuture">addFuture</db:link>()</db:member>
<db:member><db:link xlink:href="qfuturesynchronizer.xml#setFuture">setFuture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCancelOnWait">
<db:title>void QFutureSynchronizer::setCancelOnWait(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCancelOnWait</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCancelOnWait(bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables or disables the cancel-on-wait feature based on the <db:code role="parameter">enabled</db:code> argument. If <db:code role="parameter">enabled</db:code> is true, the <db:link xlink:href="qfuturesynchronizer.xml#waitForFinished">waitForFinished</db:link>() function will cancel all futures before waiting for them to finish.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuturesynchronizer.xml#cancelOnWait">cancelOnWait</db:link>()</db:member>
<db:member><db:link xlink:href="qfuturesynchronizer.xml#waitForFinished">waitForFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFuture">
<db:title>void QFutureSynchronizer::setFuture(const QFuture&lt;T&gt; &amp;<db:emphasis>future</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFuture</db:methodname>
<db:methodparam>
<db:type>const QFuture&lt;T&gt; &amp;</db:type>
<db:parameter>future</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFuture(const QFuture&lt;T&gt; &amp;future)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">future</db:code> to be the only future managed by this <db:link xlink:href="qfuturesynchronizer.xml">QFutureSynchronizer</db:link>. This is a convenience function that calls <db:link xlink:href="qfuturesynchronizer.xml#waitForFinished">waitForFinished</db:link>(), then <db:link xlink:href="qfuturesynchronizer.xml#clearFutures">clearFutures</db:link>(), and finally passes <db:code role="parameter">future</db:code> to <db:link xlink:href="qfuturesynchronizer.xml#addFuture">addFuture</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuturesynchronizer.xml#addFuture">addFuture</db:link>()</db:member>
<db:member><db:link xlink:href="qfuturesynchronizer.xml#waitForFinished">waitForFinished</db:link>()</db:member>
<db:member><db:link xlink:href="qfuturesynchronizer.xml#clearFutures">clearFutures</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForFinished">
<db:title>void QFutureSynchronizer::waitForFinished()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>waitForFinished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void waitForFinished()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Waits for all futures to finish. If <db:link xlink:href="qfuturesynchronizer.xml#cancelOnWait">cancelOnWait</db:link>() returns true, each future is canceled before waiting for them to finish.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfuturesynchronizer.xml#cancelOnWait">cancelOnWait</db:link>()</db:member>
<db:member><db:link xlink:href="qfuturesynchronizer.xml#setCancelOnWait">setCancelOnWait</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
