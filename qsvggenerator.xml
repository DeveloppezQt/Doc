<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSvgGenerator Class</db:title>
<db:productname>QtSvg</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt SVG Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsvggenerator.xml">QSvgGenerator</db:link> class provides a paint device that is used to create SVG drawings.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSvgGenerator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Svg)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Svg)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += svg</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpaintdevice.xml" xlink:role="class">QPaintDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSvgGenerator is part of <db:simplelist><db:member>painting</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This paint device represents a Scalable Vector Graphics (SVG) drawing. Like <db:link xlink:href="qprinter.xml">QPrinter</db:link>, it is designed as a write-only device that generates output in a specific format.</db:para>
<db:para>To write an SVG file, you first need to configure the output by setting the <db:link xlink:href="qsvggenerator.xml#fileName-prop">fileName</db:link> or <db:link xlink:href="qsvggenerator.xml#outputDevice-prop">outputDevice</db:link> properties. It is usually necessary to specify the size of the drawing by setting the <db:link xlink:href="qsvggenerator.xml#size-prop">size</db:link> property, and in some cases where the drawing will be included in another, the <db:link xlink:href="qsvggenerator.xml#viewBox">viewBox</db:link> property also needs to be set.</db:para>
<db:programlisting language="cpp">    QSvgGenerator generator;
    generator.setFileName(path);
    generator.setSize(QSize(200, 200));
    generator.setViewBox(QRect(0, 0, 200, 200));
    generator.setTitle(tr(&quot;SVG Generator Example Drawing&quot;));
    generator.setDescription(tr(&quot;An SVG drawing created by the SVG Generator &quot;
                                &quot;Example provided with Qt.&quot;));
</db:programlisting>
<db:para>Other meta-data can be specified by setting the <db:code role="parameter">title</db:code>, <db:code role="parameter">description</db:code> and <db:code role="parameter">resolution</db:code> properties.</db:para>
<db:para>As with other <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> subclasses, a <db:link xlink:href="qpainter.xml">QPainter</db:link> object is used to paint onto an instance of this class:</db:para>
<db:programlisting language="cpp">    QPainter painter;
    painter.begin(&amp;amp;generator);
    ...
    painter.end();
</db:programlisting>
<db:para>Painting is performed in the same way as for any other paint device. However, it is necessary to use the <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>() and <db:link xlink:href="qpainter.xml#end">end</db:link>() to explicitly begin and end painting on the device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvgrenderer.xml">QSvgRenderer</db:link></db:member>
<db:member><db:link xlink:href="qsvgwidget.xml">QSvgWidget</db:link></db:member>
<db:member><db:link xlink:href="qtsvg-module.xml">Qt SVG C++ Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SvgVersion-enum">
<db:title>[since 6.5] enum QSvgGenerator::SvgVersion</db:title>
<db:enumsynopsis>
<db:enumname>SvgVersion</db:enumname>
<db:enumitem>
<db:enumidentifier>SvgTiny12</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Svg11</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enumeration describes the version of the SVG output of the generator.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsvggenerator.xml">QSvgGenerator</db:link></db:emphasis>::<db:emphasis role="bold">SvgVersion</db:emphasis>::SvgTiny12</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The generated document follows the SVG Tiny 1.2 specification.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsvggenerator.xml">QSvgGenerator</db:link></db:emphasis>::<db:emphasis role="bold">SvgVersion</db:emphasis>::Svg11</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The generated document follows the SVG 1.1 specification.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 6.5.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="description-prop">
<db:title>description : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>description</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">description</db:synopsisinfo>
<db:synopsisinfo role="setter">setDescription</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the description of the generated SVG drawing</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">description</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDescription</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>description</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvggenerator.xml#title-prop">title</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileName-prop">
<db:title>fileName : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>fileName</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">fileName</db:synopsisinfo>
<db:synopsisinfo role="setter">setFileName</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the target filename for the generated SVG drawing</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">fileName</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFileName</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>fileName</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvggenerator.xml#outputDevice-prop">outputDevice</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="outputDevice-prop">
<db:title>outputDevice : QIODevice*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QIODevice*</db:type>
<db:varname>outputDevice</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">outputDevice</db:synopsisinfo>
<db:synopsisinfo role="setter">setOutputDevice</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the output device for the generated SVG drawing</db:para>
<db:para>If both output device and file name are specified, the output device will have precedence.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qiodevice.xml">QIODevice</db:link></db:type> *<db:emphasis role="bold">outputDevice</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOutputDevice</db:emphasis>(<db:type><db:link xlink:href="qiodevice.xml">QIODevice</db:link></db:type> *<db:emphasis>outputDevice</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvggenerator.xml#fileName-prop">fileName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resolution-prop">
<db:title>resolution : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>resolution</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">resolution</db:synopsisinfo>
<db:synopsisinfo role="setter">setResolution</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the resolution of the generated output</db:para>
<db:para>The resolution is specified in dots per inch, and is used to calculate the physical size of an SVG drawing.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">resolution</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setResolution</db:emphasis>(<db:type>int</db:type> <db:emphasis>dpi</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvggenerator.xml#size-prop">size</db:link></db:member>
<db:member><db:link xlink:href="qsvggenerator.xml#viewBox">viewBox</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size-prop">
<db:title>size : QSize</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSize</db:type>
<db:varname>size</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">size</db:synopsisinfo>
<db:synopsisinfo role="setter">setSize</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the size of the generated SVG drawing</db:para>
<db:para>By default this property is set to <db:code>QSize(-1, -1)</db:code>, which indicates that the generator should not output the width and height attributes of the <db:code>&lt;svg&gt;</db:code> element.</db:para>
<db:note>
<db:para>It is not possible to change this property while a <db:link xlink:href="qpainter.xml">QPainter</db:link> is active on the generator.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">size</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSize</db:emphasis>(const <db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvggenerator.xml#viewBox">viewBox</db:link></db:member>
<db:member><db:link xlink:href="qsvggenerator.xml#resolution-prop">resolution</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title-prop">
<db:title>title : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>title</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">title</db:synopsisinfo>
<db:synopsisinfo role="setter">setTitle</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the title of the generated SVG drawing</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">title</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTitle</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>title</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvggenerator.xml#description-prop">description</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewBox-prop">
<db:title>viewBox : QRectF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRectF</db:type>
<db:varname>viewBox</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">viewBoxF</db:synopsisinfo>
<db:synopsisinfo role="setter">setViewBox</db:synopsisinfo>
<db:synopsisinfo role="setter">setViewBox</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the <db:link xlink:href="qsvggenerator.xml#viewBox">viewBox</db:link> of the generated SVG drawing</db:para>
<db:para>By default this property is set to <db:code>QRect(0, 0, -1, -1)</db:code>, which indicates that the generator should not output the <db:link xlink:href="qsvggenerator.xml#viewBox">viewBox</db:link> attribute of the <db:code>&lt;svg&gt;</db:code> element.</db:para>
<db:note>
<db:para>It is not possible to change this property while a <db:link xlink:href="qpainter.xml">QPainter</db:link> is active on the generator.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> <db:emphasis role="bold">viewBoxF</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setViewBox</db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>viewBox</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setViewBox</db:emphasis>(const <db:type><db:link xlink:href="qrectf.xml">QRectF</db:link></db:type> &amp;<db:emphasis>viewBox</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvggenerator.xml#viewBox">viewBox</db:link>()</db:member>
<db:member><db:link xlink:href="qsvggenerator.xml#size-prop">size</db:link></db:member>
<db:member><db:link xlink:href="qsvggenerator.xml#resolution-prop">resolution</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSvgGenerator">
<db:title>QSvgGenerator::QSvgGenerator()</db:title>
<db:constructorsynopsis>
<db:methodname>QSvgGenerator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSvgGenerator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new generator using the SVG Tiny 1.2 profile.</db:para>
</db:section>
<db:section xml:id="QSvgGenerator-1">
<db:title>[explicit, since 6.5] QSvgGenerator::QSvgGenerator(QSvgGenerator::SvgVersion <db:emphasis>version</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSvgGenerator</db:methodname>
<db:methodparam>
<db:type>QSvgGenerator::SvgVersion</db:type>
<db:parameter>version</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSvgGenerator(QSvgGenerator::SvgVersion version)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new generator that uses the SVG version <db:code role="parameter">version</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="dtor.QSvgGenerator">
<db:title>[virtual] QSvgGenerator::~QSvgGenerator()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSvgGenerator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSvgGenerator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the generator.</db:para>
</db:section>
<db:section xml:id="metric">
<db:title>[override virtual protected] int QSvgGenerator::metric(QPaintDevice::PaintDeviceMetric <db:emphasis>metric</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>metric</db:methodname>
<db:methodparam>
<db:type>QPaintDevice::PaintDeviceMetric</db:type>
<db:parameter>metric</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int metric(QPaintDevice::PaintDeviceMetric metric) const override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintdevice.xml#metric" role="function">QPaintDevice::metric(QPaintDevice::PaintDeviceMetric metric) const</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEngine">
<db:title>[override virtual protected] QPaintEngine *QSvgGenerator::paintEngine() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPaintEngine *</db:type>
<db:methodname>paintEngine</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPaintEngine * paintEngine() const override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qpaintdevice.xml#paintEngine" role="function">QPaintDevice::paintEngine() const</db:link>.</db:para>
<db:para>Returns the paint engine used to render graphics to be converted to SVG format information.</db:para>
</db:section>
<db:section xml:id="svgVersion">
<db:title>[since 6.5] QSvgGenerator::SvgVersion QSvgGenerator::svgVersion() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSvgGenerator::SvgVersion</db:type>
<db:methodname>svgVersion</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSvgGenerator::SvgVersion svgVersion() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the version of the SVG document that this generator is producing.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="viewBox">
<db:title>QRect QSvgGenerator::viewBox() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>viewBox</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect viewBox() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:link xlink:href="qsvggenerator.xml#viewBox-prop">viewBoxF</db:link>().toRect().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsvggenerator.xml#viewBox-prop">setViewBox</db:link>()</db:member>
<db:member><db:link xlink:href="qsvggenerator.xml#viewBox-prop">viewBoxF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
