<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngineView QML Type</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> renders web content within a QML application.</db:para>
<db:para>This type was introduced in QtWebEngine 1.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtWebEngine 1.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtWebEngine 1.0</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> type enables QML applications to render regions of dynamic web content. It may share the screen with other QML types, such as a <db:link xlink:href="qml-qtquick-controls-tabview.xml">TabView</db:link>, or fill the screen, as specified within the QML application.</db:para>
<db:section xml:id="initializing-web-engine">
<db:title>Initializing Web Engine</db:title>
<db:para>For the web engine view to be rendered, the web engine must be initialized by using <db:link xlink:href="qtwebengine.xml#initialize">QtWebEngine::initialize</db:link> in the application main source file, as illustrated by the following code snippet:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
    QGuiApplication app(argc, argv);

    QtWebEngine::initialize();

    QQmlApplicationEngine engine;
    engine.load(QUrl(QStringLiteral(&quot;qrc:/main.qml&quot;)));

    return app.exec();
}

</db:programlisting>
</db:section>
<db:section xml:id="loading-web-pages">
<db:title>Loading Web Pages</db:title>
<db:para>An application can load pages into the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link>, using either the <db:link xlink:href="qml-qtwebengine-webengineview.xml#url-prop">url</db:link> property or the <db:link xlink:href="qml-qtwebengine-webengineview.xml#loadHtml-method">loadHtml</db:link> method and navigate within the view's session history. The GET method is always used to load URLs.</db:para>
<db:para>The history is represented by a <db:link xlink:href="qml-qtwebengine-webenginehistory.xml">WebEngineHistory</db:link> data model that is held by the <db:link xlink:href="qml-qtwebengine-webengineview.xml#navigationHistory-prop">navigationHistory</db:link> property.</db:para>
<db:para>The following sample QML application loads a web page using the <db:code>url</db:code> property:</db:para>
<db:programlisting language="cpp">import QtQuick 2.0
import QtQuick.Window 2.0
import QtWebEngine 1.0

Window {
    width: 1024
    height: 750
    visible: true
    WebEngineView {
        anchors.fill: parent
        url: &quot;http://www.qt.io&quot;
    }
}

</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#loading-prop">loading</db:link> property holds whether an HTML page is currently loading. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#loadingChanged-signal">loadingChanged</db:link>() signal is emitted when loading the page begins, ends, or fails.</db:para>
<db:para>The title of an HTML page can be accessed with the <db:link xlink:href="qml-qtwebengine-webengineview.xml#title-prop">title</db:link> property. Additionally, a web page may specify an icon, which can be accessed using the <db:link xlink:href="qml-qtwebengine-webengineview.xml#icon-prop">icon</db:link> property. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#zoomFactor-prop">zoomFactor</db:link> property enables zooming the contents of the web page by a scale factor.</db:para>
<db:para>If a certificate error is raised while loading a web page, the <db:link xlink:href="qml-qtwebengine-webengineview.xml#certificateError-signal">certificateError</db:link>() signal is emitted. Certificate errors are handled by using the methods of the <db:link xlink:href="qml-qtwebengine-webenginecertificateerror.xml">WebEngineCertificateError</db:link> type.</db:para>
</db:section>
<db:section xml:id="interaction">
<db:title>Interaction</db:title>
<db:para>By default, links to different pages load within the same <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> object, but web sites may request them to be opened as a new tab, window, or dialog. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#newViewRequested-signal">newViewRequested</db:link>() signal is emitted when a request to load the page in a separate web engine view is issued. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#NewViewDestination-prop">NewViewDestination</db:link> property describes how the new view should be opened. In addition, the <db:link xlink:href="qml-qtwebengine-webenginenewviewrequest.xml">WebEngineNewViewRequest</db:link> utility type can be used to load web pages in separate web engine views.</db:para>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#findText-method">findText</db:link>() method can be used to search for a string on a web page, using the options described by <db:link xlink:href="qml-qtwebengine-webengineview.xml#FindFlags-prop">FindFlags</db:link>.</db:para>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#setActiveFocusOnPress-method">setActiveFocusOnPress</db:link>() method can be used to create a UI element that should not get focus. This can be useful in a hybrid UI.</db:para>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#linkHovered-signal">linkHovered</db:link>() signal is emitted when a mouse pointer passes over a link and thus corresponds to the <db:code>mouseover</db:code> DOM event.</db:para>
<db:para>Actions, such as selecting and editing content, can be performed on a web page by using the <db:link xlink:href="qml-qtwebengine-webengineview.xml#triggerWebAction-method">triggerWebAction</db:link>() method. The available actions are described by the <db:link xlink:href="qml-qtwebengine-webengineview.xml#WebAction-prop">WebAction</db:link> property.</db:para>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#backgroundColorChanged-signal">backgroundColorChanged</db:link>() signal is emitted when the web page background color changes.</db:para>
</db:section>
<db:section xml:id="user-scripts">
<db:title>User Scripts</db:title>
<db:para>During the loading of a page, so called <db:emphasis>user scripts</db:emphasis> can be injected in the JavaScript engine at different points. The script objects attached to the web engine view are held by the <db:link xlink:href="qml-qtwebengine-webengineview.xml#userScripts-prop">userScripts</db:link> property and injected by using the <db:link xlink:href="qml-qtwebengine-webenginescript.xml">WebEngineScript</db:link> type. Scripts can also be run by using the <db:link xlink:href="qml-qtwebengine-webengineview.xml#runJavaScript-method">runJavaScript</db:link>() method in the same world as other scripts that are part of the loaded site.</db:para>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#webChannel-prop">webChannel</db:link> property can be used to expose a <db:link xlink:href="qml-qtwebchannel-webchannel.xml">WebChannel</db:link> instance in the JavaScript context of the page it is rendering as <db:code>qt.webChannelTransport</db:code>.</db:para>
</db:section>
<db:section xml:id="fullscreen-mode">
<db:title>Fullscreen Mode</db:title>
<db:para>A web page can request through the JavaScript API to be loaded in fullscreen mode. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#fullScreenRequested-signal">fullScreenRequested</db:link>() signal is emitted when the web page issues the request. The <db:link xlink:href="qml-qtwebengine-webenginefullscreenrequest.xml">WebEngineFullScreenRequest</db:link> utility type can be used to toggle fullscreen requests. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#fullScreenCancelled-method">fullScreenCancelled</db:link> method can be used to notify the browser engine when the windowing system forces the application to leave fullscreen mode.</db:para>
</db:section>
<db:section xml:id="profiles">
<db:title>Profiles</db:title>
<db:para>Web engine views can be isolated from each other by using the <db:link xlink:href="qml-qtwebengine-webengineprofile.xml">WebEngineProfile</db:link> type. A profile contains settings, scripts, and the list of visited links shared by all views that belong to the profile. For example, a dedicated profile could be created for a <db:emphasis>private browsing</db:emphasis> mode. The current profile for the view is held by the <db:link xlink:href="qml-qtwebengine-webengineview.xml#profile-prop">profile</db:link> property and the current settings are held by the <db:link xlink:href="qml-qtwebengine-webengineview.xml#settings-prop">settings</db:link> property. The settings are specified by using the <db:link xlink:href="qml-qtwebengine-webenginesettings.xml">WebEngineSettings</db:link> type.</db:para>
</db:section>
<db:section xml:id="platform-features">
<db:title>Platform Features</db:title>
<db:para>Web pages can request access to platform features, such as geolocation or audio and video capture devices. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#featurePermissionRequested-signal">featurePermissionRequested</db:link>() signal is emitted when a web page requests to make use of a resource. The supported platform features are described by the <db:link xlink:href="qml-qtwebengine-webengineview.xml#Feature-prop">Feature</db:link> property. If users grant the permission, the <db:link xlink:href="qml-qtwebengine-webengineview.xml#grantFeaturePermission-method">grantFeaturePermission</db:link>() method is used to set it to <db:emphasis>granted</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="rendering-to-opengl-surface">
<db:title>Rendering to OpenGL Surface</db:title>
<db:para>When using a <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> to render a Qt Quick user interface to an OpenGL surface, the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> type is not rendered correctly. The web engine view attempts to use a global OpenGL context created by <db:link xlink:href="qtwebengine.xml#initialize">QtWebEngine::initialize</db:link>, but there is no public API for accessing that context in order to share it with the <db:code>QQuickRenderControl</db:code> context.</db:para>
<db:para>To have the web engine view rendered correctly, it is possible to manually create a new offscreen context that is shared with the <db:code>QQuickRenderControl</db:code> and to call the non-public function <db:code>qt_gl_set_global_share_context()</db:code>, rather than calling <db:code>initialize()</db:code>. If <db:code>initialize()</db:code> is called after setting a global context, it will do nothing.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="ErrorDomain-prop">
<db:title>ErrorDomain : enumeration</db:title>
<db:para>Describes various high-level error types:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.NoErrorDomain</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.InternalErrorDomain</db:para>
</db:td>
<db:td>
<db:para>Content fails to be interpreted by Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ConnectionErrorDomain</db:para>
</db:td>
<db:td>
<db:para>Error results from faulty network connection.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.CertificateErrorDomain</db:para>
</db:td>
<db:td>
<db:para>Error related to the SSL/TLS certficate.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.HttpErrorDomain</db:para>
</db:td>
<db:td>
<db:para>Error related to the HTTP connection.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.FtpErrorDomain</db:para>
</db:td>
<db:td>
<db:para>Error related to the FTP connection.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.DnsErrorDomain</db:para>
</db:td>
<db:td>
<db:para>Error related to the DNS connection.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Feature-prop">
<db:title>Feature : enumeration</db:title>
<db:para>Describes the platform feature access categories that the user may be asked to grant or deny access to:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.Geolocation</db:para>
</db:td>
<db:td>
<db:para>Location hardware or service.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.MediaAudioCapture</db:para>
</db:td>
<db:td>
<db:para>Audio capture devices, such as microphones.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.MediaVideoCapture</db:para>
</db:td>
<db:td>
<db:para>Video devices, such as cameras.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.MediaAudioVideoCapture</db:para>
</db:td>
<db:td>
<db:para>Both audio and video capture devices.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#featurePermissionRequested-signal">featurePermissionRequested</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#grantFeaturePermission-method">grantFeaturePermission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="FindFlags-prop">
<db:title>FindFlags : enumeration</db:title>
<db:para>Describes the options available to the <db:link xlink:href="qml-qtwebengine-webengineview.xml#findText-method">findText</db:link>() function. The options can be OR-ed together from the following list:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.FindBackward</db:para>
</db:td>
<db:td>
<db:para>Searches backwards instead of forwards.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.FindFlags</db:para>
</db:td>
<db:td>
<db:para>FindCaseSensitively By default <db:link xlink:href="qml-qtwebengine-webengineview.xml#findText-method">findText</db:link>() works case insensitive. Specifying this option changes the behavior to a case sensitive find operation.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#findText-method">findText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="JavaScriptConsoleMessageLevel-prop">
<db:title>JavaScriptConsoleMessageLevel : enumeration</db:title>
<db:para>Indicates the severity of a JavaScript console message:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.InfoMessageLevel</db:para>
</db:td>
<db:td>
<db:para>Message is purely informative and can safely be ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.WarningMessageLevel</db:para>
</db:td>
<db:td>
<db:para>Message indicates there might be a problem that may need attention.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ErrorMessageLevel</db:para>
</db:td>
<db:td>
<db:para>Message indicates there has been an error.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="LoadStatus-prop">
<db:title>LoadStatus : enumeration</db:title>
<db:para>Reflects a page's load status:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.LoadStartedStatus</db:para>
</db:td>
<db:td>
<db:para>Page is currently loading.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.LoadSucceededStatus</db:para>
</db:td>
<db:td>
<db:para>Page has successfully loaded, and is not currently loading.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.LoadFailedStatus</db:para>
</db:td>
<db:td>
<db:para>Page has failed to load, and is not currently loading.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="NewViewDestination-prop">
<db:title>NewViewDestination : enumeration</db:title>
<db:para>Describes how to open a new view:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.NewViewInWindow</db:para>
</db:td>
<db:td>
<db:para>In a separate Window.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.NewViewInTab</db:para>
</db:td>
<db:td>
<db:para>In a tab of the same window.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.NewViewInDialog</db:para>
</db:td>
<db:td>
<db:para>In a Window without a tab bar, toolbar, or URL bar.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.NewViewInBackgroundTab</db:para>
</db:td>
<db:td>
<db:para>In a tab of the same window, without hiding the currently visible web engine view.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webenginenewviewrequest.xml#destination-prop">WebEngineNewViewRequest.destination</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="RenderProcessTerminationStatus-prop">
<db:title>[since QtWebEngine 1.2] RenderProcessTerminationStatus : enumeration</db:title>
<db:para>Describes the status with which the render process terminated:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.NormalTerminationStatus</db:para>
</db:td>
<db:td>
<db:para>The render process terminated normally.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.AbnormalTerminationStatus</db:para>
</db:td>
<db:td>
<db:para>The render process terminated with a non-zero exit status.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.CrashedTerminationStatus</db:para>
</db:td>
<db:td>
<db:para>The render process crashed, for example because of a segmentation fault.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.KilledTerminationStatus</db:para>
</db:td>
<db:td>
<db:para>The render process was killed, for example by <db:code>SIGKILL</db:code> or task manager kill.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in QtWebEngine 1.2.</db:para>
</db:section>
<db:section xml:id="WebAction-prop">
<db:title>[since QtWebEngine 1.2] WebAction : enumeration</db:title>
<db:para>Describes the types of action that can be performed on a web page:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.NoWebAction</db:para>
</db:td>
<db:td>
<db:para>No action is triggered.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Back</db:para>
</db:td>
<db:td>
<db:para>Navigate back in the history of navigated links.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Forward</db:para>
</db:td>
<db:td>
<db:para>Navigate forward in the history of navigated links.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Stop</db:para>
</db:td>
<db:td>
<db:para>Stop loading the current page.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Reload</db:para>
</db:td>
<db:td>
<db:para>Reload the current page.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ReloadAndBypassCache</db:para>
</db:td>
<db:td>
<db:para>Reload the current page, but do not use any local cache.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Cut</db:para>
</db:td>
<db:td>
<db:para>Cut the content currently selected into the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Copy</db:para>
</db:td>
<db:td>
<db:para>Copy the content currently selected into the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Paste</db:para>
</db:td>
<db:td>
<db:para>Paste content from the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Undo</db:para>
</db:td>
<db:td>
<db:para>Undo the last editing action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Redo</db:para>
</db:td>
<db:td>
<db:para>Redo the last editing action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.SelectAll</db:para>
</db:td>
<db:td>
<db:para>Select all content.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.PasteAndMatchStyle</db:para>
</db:td>
<db:td>
<db:para>Paste content from the clipboard with current style.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.OpenLinkInThisWindow</db:para>
</db:td>
<db:td>
<db:para>Open the current link in the current window. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.OpenLinkInNewWindow</db:para>
</db:td>
<db:td>
<db:para>Open the current link in a new window. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.OpenLinkInNewTab</db:para>
</db:td>
<db:td>
<db:para>Open the current link in a new tab. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.CopyLinkToClipboard</db:para>
</db:td>
<db:td>
<db:para>Copy the current link to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.CopyImageToClipboard</db:para>
</db:td>
<db:td>
<db:para>Copy the clicked image to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.CopyImageUrlToClipboard</db:para>
</db:td>
<db:td>
<db:para>Copy the clicked image's URL to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.CopyMediaUrlToClipboard</db:para>
</db:td>
<db:td>
<db:para>Copy the hovered audio or video's URL to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ToggleMediaControls</db:para>
</db:td>
<db:td>
<db:para>Toggle between showing and hiding the controls for the hovered audio or video element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ToggleMediaLoop</db:para>
</db:td>
<db:td>
<db:para>Toggle whether the hovered audio or video should loop on completetion or not. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ToggleMediaPlayPause</db:para>
</db:td>
<db:td>
<db:para>Toggle the play/pause state of the hovered audio or video element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ToggleMediaMute</db:para>
</db:td>
<db:td>
<db:para>Mute or unmute the hovered audio or video element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.DownloadLinkToDisk</db:para>
</db:td>
<db:td>
<db:para>Download the current link to the disk. To implement download actions, connect to the QWebEngineProfile::downloadRequested signal. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.DownloadImageToDisk</db:para>
</db:td>
<db:td>
<db:para>Download the highlighted image to the disk. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.DownloadMediaToDisk</db:para>
</db:td>
<db:td>
<db:para>Download the hovered audio or video to the disk. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.InspectElement</db:para>
</db:td>
<db:td>
<db:para>Trigger any attached Web Inspector to inspect the highlighed element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ExitFullScreen</db:para>
</db:td>
<db:td>
<db:para>Exit the fullscreen mode. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in QtWebEngine 1.2.</db:para>
</db:section>
<db:section xml:id="activeFocusOnPress-prop">
<db:title>[since QtWebEngine 1.2] activeFocusOnPress : bool</db:title>
<db:para>Specifies whether the view should gain active focus when pressed. The default value is <db:code>true</db:code>.</db:para>
<db:para>This property was introduced in QtWebEngine 1.2.</db:para>
</db:section>
<db:section xml:id="backgroundColor-prop">
<db:title>[since QtWebEngine 1.2] backgroundColor : bool</db:title>
<db:para>Changes the color of the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link>'s background, behind the document's body. Can be set to <db:code>&quot;transparent&quot;</db:code> or to a translucent color to see through the document or to match the web content in a hybrid app to prevent the white flashes that may appear during loading.</db:para>
<db:para>The default value is white.</db:para>
<db:para>This property was introduced in QtWebEngine 1.2.</db:para>
</db:section>
<db:section xml:id="canGoBack-prop">
<db:title>[read-only] canGoBack : bool</db:title>
<db:para>Returns <db:code>true</db:code> if there are prior session history entries, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="canGoForward-prop">
<db:title>[read-only] canGoForward : bool</db:title>
<db:para>Returns <db:code>true</db:code> if there are subsequent session history entries, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="icon-prop">
<db:title>[read-only] icon : url</db:title>
<db:para>The location of the currently displayed web site icon, also known as favicon or shortcut icon. This read-only URL corresponds to the image used within a mobile browser application to represent a bookmarked page on the device's home screen.</db:para>
<db:para>The following snippet uses the <db:code>icon</db:code> property to build an <db:code>Image</db:code> component:</db:para>
<db:programlisting language="qml">Image {
    id: appIcon
    source: webView.icon != &quot;&quot; ? webView.icon : &quot;fallbackFavIcon.png&quot;;
    // ...
}
</db:programlisting>
</db:section>
<db:section xml:id="isFullScreen-prop">
<db:title>[read-only, since QtWebEngine 1.1] isFullScreen : bool</db:title>
<db:para>Returns <db:code>true</db:code> if the web view is in fullscreen mode, <db:code>false</db:code> otherwise.</db:para>
<db:para>This property was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#fullScreenRequested-signal">fullScreenRequested</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#fullScreenCancelled-method">fullScreenCancelled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadProgress-prop">
<db:title>[read-only] loadProgress : int</db:title>
<db:para>The amount of data from the page that has been loaded, expressed as an integer percentage in the range from <db:code>0</db:code> to <db:code>100</db:code>.</db:para>
</db:section>
<db:section xml:id="loading-prop">
<db:title>[read-only] loading : bool</db:title>
<db:para>Returns <db:code>true</db:code> if the HTML page is currently loading, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="navigationHistory-prop">
<db:title>[read-only, since QtWebEngine 1.1] navigationHistory : WebEngineHistory</db:title>
<db:para>The navigation history of the current view.</db:para>
<db:para>This property was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webenginehistory.xml">WebEngineHistory</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="profile-prop">
<db:title>[since QtWebEngine 1.1] profile : WebEngineProfile</db:title>
<db:para>The current profile used for the view.</db:para>
<db:para>This property was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineprofile.xml">WebEngineProfile</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="settings-prop">
<db:title>[read-only, since QtWebEngine 1.1] settings : WebEngineSettings</db:title>
<db:para>Settings used by this view.</db:para>
<db:para>This property was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webenginesettings.xml">WebEngineSettings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title-prop">
<db:title>[read-only] title : string</db:title>
<db:para>The title of the currently displayed HTML page. This is a read-only value that reflects the contents of the <db:code>&lt;title&gt;</db:code> tag.</db:para>
</db:section>
<db:section xml:id="url-prop">
<db:title>url : url</db:title>
<db:para>The location of the currently displayed HTML page. This writable property offers the main interface to load a page into a web view. It functions the same as the <db:code>window.location</db:code> DOM property.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#loadHtml-method">loadHtml</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="userScripts-prop">
<db:title>[read-only, since QtWebEngine 1.1] userScripts : list&lt;WebEngineScript&gt;</db:title>
<db:para>List of script objects attached to the view.</db:para>
<db:para>This property was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webenginescript.xml">WebEngineScript</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="webChannel-prop">
<db:title>[since QtWebEngine 1.1] webChannel : QQmlWebChannel</db:title>
<db:para>The web channel instance used by this view. This channel is automatically using the internal <db:link xlink:href="qtwebengine-qmlmodule.xml">QtWebEngine</db:link> transport mechanism over Chromium IPC, and exposed in the javascript context of the page it is rendering as <db:code>qt.webChannelTransport</db:code>. This transport object is used when instantiating the JavaScript counterpart of <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> using the <db:link xlink:href="qtwebchannel-javascript.xml">Qt WebChannel JavaScript API</db:link>.</db:para>
<db:note>
<db:para>The view does not take ownership for an assigned webChannel object.</db:para>
</db:note>
<db:para>This property was introduced in QtWebEngine 1.1.</db:para>
</db:section>
<db:section xml:id="zoomFactor-prop">
<db:title>[since QtWebEngine 1.1] zoomFactor : real</db:title>
<db:para>Zoom factor for the view. Valid values are within the range from <db:code>0.25</db:code> to <db:code>5.0</db:code>. The default factor is <db:code>1.0</db:code>.</db:para>
<db:para>This property was introduced in QtWebEngine 1.1.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="activeFocusOnPressChanged-signal">
<db:title>[since QtWebEngine 1.2] activeFocusOnPressChanged(bool <db:emphasis>activeFocusOnPress</db:emphasis>)</db:title>
<db:para>This signal is emitted when the ability of the web engine view to get focus when clicked changes.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onActiveFocusOnPressChanged</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#setActiveFocusOnPress-method">setActiveFocusOnPress</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="backgroundColorChanged-signal">
<db:title>[since QtWebEngine 1.2] backgroundColorChanged()</db:title>
<db:para>This signal is emitted when the web engine view background color changes.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onBackgroundColorChanged</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.2.</db:para>
</db:section>
<db:section xml:id="certificateError-signal">
<db:title>[since QtWebEngine 1.1] certificateError(WebEngineCertificateError <db:emphasis>error</db:emphasis>)</db:title>
<db:para>This signal is emitted when an invalid certificate error is raised while loading a given request.</db:para>
<db:para>The certificate error can be handled by using the methods of the <db:link xlink:href="qml-qtwebengine-webenginecertificateerror.xml">WebEngineCertificateError</db:link> type.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onCertificateError</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.1.</db:para>
</db:section>
<db:section xml:id="featurePermissionRequested-signal">
<db:title>[since QtWebEngine 1.1] featurePermissionRequested(url <db:emphasis>securityOrigin</db:emphasis>, Feature <db:emphasis>feature</db:emphasis>)</db:title>
<db:para>This signal is emitted when the web site identified by <db:code role="parameter">securityOrigin</db:code> requests to make use of the resource or device identified by <db:code role="parameter">feature</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onFeaturePermissionRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#grantFeaturePermission-method">grantFeaturePermission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fullScreenRequested-signal">
<db:title>[since QtWebEngine 1.1] fullScreenRequested(WebEngineFullScreenRequest <db:emphasis>request</db:emphasis>)</db:title>
<db:para>This signal is emitted when the web page requests fullscreen mode through the JavaScript API.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onFullScreenRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#isFullScreen-prop">isFullScreen</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="javaScriptConsoleMessage-signal">
<db:title>javaScriptConsoleMessage(JavaScriptConsoleMessageLevel <db:emphasis>level</db:emphasis>, string <db:emphasis>message</db:emphasis>, int <db:emphasis>lineNumber</db:emphasis>, string <db:emphasis>sourceID</db:emphasis>)</db:title>
<db:para>This signal is emitted when a JavaScript program tries to print a <db:code role="parameter">message</db:code> to the web browser's console.</db:para>
<db:para>For example, in case of evaluation errors the source URL may be provided in <db:code role="parameter">sourceID</db:code> as well as the <db:code role="parameter">lineNumber</db:code>.</db:para>
<db:para><db:code role="parameter">level</db:code> indicates the severity of the event that triggered the message, that is, whether it was triggered by an error or a less severe event.</db:para>
<db:para>If no handler is specified, the view will log the messages into a <db:code>js</db:code> <db:link xlink:href="qloggingcategory.xml">logging category</db:link>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onJavaScriptConsoleMessage</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwebengine-debugging.xml#console-logging">Console Logging</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="linkHovered-signal">
<db:title>linkHovered(url <db:emphasis>hoveredUrl</db:emphasis>)</db:title>
<db:para>Within a mouse-driven interface, this signal is emitted when a mouse pointer passes over a link, corresponding to the <db:code>mouseover</db:code> DOM event. This event may also occur in touch interfaces for <db:code>mouseover</db:code> events that are not cancelled with <db:code>preventDefault()</db:code>. <db:code role="parameter">hoveredUrl</db:code> provides the link's location.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLinkHovered</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="loadingChanged-signal">
<db:title>loadingChanged(WebEngineLoadRequest <db:emphasis>loadRequest</db:emphasis>)</db:title>
<db:para>This signal is emitted when a page load begins, ends, or fails.</db:para>
<db:para>When handling the signal with <db:code>onLoadingChanged</db:code>, various read-only parameters are available on the <db:code role="parameter">loadRequest</db:code>:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Property</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>url</db:para>
</db:td>
<db:td>
<db:para>The location of the resource that is loading.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>status</db:para>
</db:td>
<db:td>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#LoadStatus-prop">load status</db:link> of the page.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>errorString</db:para>
</db:td>
<db:td>
<db:para>The description of load error.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>errorCode</db:para>
</db:td>
<db:td>
<db:para>The HTTP error code.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>errorDomain</db:para>
</db:td>
<db:td>
<db:para>The high-level <db:link xlink:href="qml-qtwebengine-webengineview.xml#ErrorDomain-prop">error type</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>The corresponding handler is <db:code>onLoadingChanged</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#loading-prop">loading</db:link></db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#LoadStatus-prop">LoadStatus</db:link></db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#ErrorDomain-prop">ErrorDomain</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="newViewRequested-signal">
<db:title>[since QtWebEngine 1.1] newViewRequested(WebEngineViewRequest <db:emphasis>request</db:emphasis>)</db:title>
<db:para>This signal is emitted when a page load is requested to happen in a separate web engine view. This can either be because the current page requested it explicitly through a JavaScript call to <db:code>window.open</db:code>, or because the user clicked on a link while holding Shift, Ctrl, or a built-in combination that triggers the page to open in a new window.</db:para>
<db:para>If this signal is not handled, the requested load will fail.</db:para>
<db:para>An example implementation:</db:para>
<db:programlisting language="qml">QtObject {
    id: windowParent
    // Create the initial browsing windows and open the startup page.
    Component.onCompleted: {
        var firstWindow = windowComponent.createObject(windowParent)
        firstWindow.webView.loadHtml('&lt;input type=&quot;button&quot; value=&quot;Click!&quot; onclick=&quot;window.open(&quot;http://qt.io&quot;)&quot;&gt;')
    }

    property Component windowComponent: Window {
        // Destroy on close to release the Window's QML resources.
        // Because it was created with a parent, it won't be garbage-collected.
        onClosing: destroy()
        visible: true

        property WebEngineView webView: webView_
        WebEngineView {
            id: webView_
            anchors.fill: parent

            // Handle the signal. Dynamically create the window and
            // use its WebEngineView as the destination of our request.
            onNewViewRequested: {
                var newWindow = windowComponent.createObject(windowParent)
                request.openIn(newWindow.webView)
            }
        }
    }
}
</db:programlisting>
<db:note>
<db:para>The corresponding handler is <db:code>onNewViewRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#NewViewDestination-prop">NewViewDestination</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-webengine-quicknanobrowser-example.xml">WebEngine Quick Nano Browser</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderProcessTerminated-signal">
<db:title>[since QtWebEngine 1.2] renderProcessTerminated(RenderProcessTerminationStatus <db:emphasis>terminationStatus</db:emphasis>, int <db:emphasis>exitCode</db:emphasis>)</db:title>
<db:para>This signal is emitted when the render process is terminated with a non-zero exit status. <db:code role="parameter">terminationStatus</db:code> is the termination status of the process and <db:code role="parameter">exitCode</db:code> is the status code with which the process terminated.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onRenderProcessTerminated</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#RenderProcessTerminationStatus-prop">RenderProcessTerminationStatus</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowCloseRequested-signal">
<db:title>[since QtWebEngine 1.2] windowCloseRequested()</db:title>
<db:para>This signal is emitted whenever the page requests the web browser window to be closed, for example through the JavaScript <db:code>window.close()</db:code> call.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onWindowCloseRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.2.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="findText-method">
<db:title>[since QtWebEngine 1.1] void findText(string <db:emphasis>subString</db:emphasis>)</db:title>
<db:para>Finds the specified string, <db:code role="parameter">subString</db:code>, in the page.</db:para>
<db:para>To clear the search highlight, just pass an empty string.</db:para>
<db:para>This method was introduced in QtWebEngine 1.1.</db:para>
</db:section>
<db:section xml:id="findText-method-1">
<db:title>[since QtWebEngine 1.1] void findText(string <db:emphasis>subString</db:emphasis>, FindFlags <db:emphasis>options</db:emphasis>)</db:title>
<db:para>Finds the specified string, <db:code role="parameter">subString</db:code>, in the page, using the given <db:code role="parameter">options</db:code>.</db:para>
<db:para>To clear the search highlight, just pass an empty string.</db:para>
<db:programlisting language="cpp">findText(&quot;Qt&quot;, WebEngineView.FindBackward | WebEngineView.FindCaseSensitively);
</db:programlisting>
<db:para>This method was introduced in QtWebEngine 1.1.</db:para>
</db:section>
<db:section xml:id="findText-method-2">
<db:title>[since QtWebEngine 1.1] void findText(string <db:emphasis>subString</db:emphasis>, FindFlags <db:emphasis>options</db:emphasis>, variant <db:emphasis>resultCallback</db:emphasis>)</db:title>
<db:para>Finds the specified string, <db:code role="parameter">subString</db:code>, in the page, using the given <db:code role="parameter">options</db:code>.</db:para>
<db:para>To clear the search highlight, just pass an empty string.</db:para>
<db:para>The <db:code role="parameter">resultCallback</db:code> must take a boolean parameter. It will be called with a value of true if the <db:code role="parameter">subString</db:code> was found; otherwise the callback value will be false.</db:para>
<db:programlisting language="cpp">findText(&quot;Qt&quot;, WebEngineView.FindCaseSensitively, function(success) {
    if (success)
        console.log(&quot;Qt was found!&quot;);
});
</db:programlisting>
<db:para>This method was introduced in QtWebEngine 1.1.</db:para>
</db:section>
<db:section xml:id="fullScreenCancelled-method">
<db:title>[since QtWebEngine 1.1] void fullScreenCancelled()</db:title>
<db:para>Immediately sets <db:code>isFullScreen</db:code> property to <db:code>false</db:code>. It can be used to notify the browser engine when the windowing system forces the application to leave fullscreen mode.</db:para>
<db:programlisting language="qml">ApplicationWindow {
    onVisibilityChanged: {
        if (webEngineView.isFullScreen &amp;&amp; visibility != Window.FullScreen)
            webEngineView.fullScreenCancelled()
    }

    WebEngineView {
        id: webEngineView
        // ...
    }
}
</db:programlisting>
<db:para>This method was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#isFullScreen-prop">isFullScreen</db:link></db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#fullScreenRequested-signal">fullScreenRequested</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="goBack-method">
<db:title>void goBack()</db:title>
<db:para>Go backward within the browser's session history, if possible. This function is equivalent to the <db:code>window.history.back()</db:code> DOM method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#canGoBack-prop">canGoBack</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="goBackOrForward-method">
<db:title>[since QtWebEngine 1.1] void goBackOrForward(int <db:emphasis>offset</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">offset</db:code> is positive, goes forward the specified number of offset pages in the current session history. If offset is negative, it goes back. If the offset is invalid, the page is not changed.</db:para>
<db:para>This method was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#goBack-method">goBack</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#goForward-method">goForward</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="goForward-method">
<db:title>void goForward()</db:title>
<db:para>Go forward within the browser's session history, if possible. This function is equivalent to the <db:code>window.history.forward()</db:code> DOM method.</db:para>
</db:section>
<db:section xml:id="grantFeaturePermission-method">
<db:title>[since QtWebEngine 1.1] void grantFeaturePermission(url <db:emphasis>securityOrigin</db:emphasis>, Feature <db:emphasis>feature</db:emphasis>, bool <db:emphasis>granted</db:emphasis>)</db:title>
<db:para>Sets or unsets the permission, depending on <db:code role="parameter">granted</db:code>, for the web site identified by <db:code role="parameter">securityOrigin</db:code> to use <db:code role="parameter">feature</db:code>.</db:para>
<db:para>This method was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#featurePermissionRequested-signal">featurePermissionRequested</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadHtml-method">
<db:title>void loadHtml(string <db:emphasis>html</db:emphasis>, url <db:emphasis>baseUrl</db:emphasis>)</db:title>
<db:para>Loads the specified <db:code role="parameter">html</db:code> as the content of the web view.</db:para>
<db:para>This method offers a lower-level alternative to the <db:code>url</db:code> property, which references HTML pages via URL.</db:para>
<db:para>External objects, such as stylesheets or images referenced in the HTML document, should be located relative to <db:code role="parameter">baseUrl</db:code>. For example, if <db:code role="parameter">html</db:code> is retrieved from <db:code>http://www.example.com/documents/overview.html</db:code>, which is the base URL, then an image referenced with the relative URL, <db:code>diagram.png</db:code>, should be at <db:code>http://www.example.com/documents/diagram.png</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#url-prop">url</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reload-method">
<db:title>void reload()</db:title>
<db:para>Reloads the current page. This function is equivalent to the <db:code>window.location.reload()</db:code> DOM method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#reloadAndBypassCache-method">reloadAndBypassCache</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reloadAndBypassCache-method">
<db:title>[since QtWebEngine 1.1] void reloadAndBypassCache()</db:title>
<db:para>Reloads the current page, ignoring any cached content.</db:para>
<db:para>This method was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#reload-method">reload</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="runJavaScript-method">
<db:title>void runJavaScript(string <db:emphasis>script</db:emphasis>, variant <db:emphasis>callback</db:emphasis>)</db:title>
<db:para>Runs the specified <db:code role="parameter">script</db:code> in the content of the web view.</db:para>
<db:para>In case a callback function is provided, it will be invoked after the script finishes running.</db:para>
<db:programlisting language="cpp">runJavaScript(&quot;document.title&quot;, function(result) { console.log(result); });
</db:programlisting>
<db:para>The script will run in the same <db:emphasis>world</db:emphasis> as other scripts that are part of the loaded site.</db:para>
<db:warning>
<db:para>Do not execute lengthy routines in the callback function, because it might block the rendering of the web content.</db:para>
</db:warning>
<db:para>See <db:link xlink:href="qml-qtwebengine-webengineview.xml#userScripts-prop">WebEngineView::userScripts</db:link> for an alternative API to inject scripts.</db:para>
</db:section>
<db:section xml:id="setActiveFocusOnPress-method">
<db:title>[since QtWebEngine 1.2] void setActiveFocusOnPress(bool <db:emphasis>arg</db:emphasis>)</db:title>
<db:para>Sets active focus to a clicked web engine view if <db:code role="parameter">arg</db:code> is <db:code>true</db:code>. By setting it to <db:code>false</db:code>, a web engine view can be used to create a UI element that should not get focus. This can be useful in a hybrid UI.</db:para>
<db:para>This method was introduced in QtWebEngine 1.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#activeFocusOnPressChanged-signal">activeFocusOnPressChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop-method">
<db:title>void stop()</db:title>
<db:para>Stops loading the current page.</db:para>
</db:section>
<db:section xml:id="triggerWebAction-method">
<db:title>[since QtWebEngine 1.2] void triggerWebAction(WebAction <db:emphasis>action</db:emphasis>)</db:title>
<db:para>Triggers the web action <db:code role="parameter">action</db:code>.</db:para>
<db:para>This method was introduced in QtWebEngine 1.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#WebAction-prop">WebAction</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
