<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngineView QML Type</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> renders web content within a QML application.</db:para>
<db:para>This type was introduced in QtWebEngine 1.0.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtWebEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtWebEngine 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Item</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> type enables QML applications to render regions of dynamic web content. It may share the screen with other QML types, such as a TabView, or fill the screen, as specified within the QML application.</db:para>
<db:section xml:id="initializing-web-engine">
<db:title>Initializing Web Engine</db:title>
<db:para>For the web engine view to be rendered, the web engine must be initialized by using <db:link xlink:href="qtwebenginequick.xml#initialize">QtWebEngineQuick::initialize</db:link> in the application main source file, as illustrated by the following code snippet:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QCoreApplication::setOrganizationName(&quot;QtExamples&quot;);
    QCoreApplication::setAttribute(Qt::AA_ShareOpenGLContexts);
    QtWebEngineQuick::initialize();
    QGuiApplication app(argc, argv);

    QQmlApplicationEngine engine;
    engine.load(QUrl(QStringLiteral(&quot;qrc:/main.qml&quot;)));

    return app.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="loading-web-pages">
<db:title>Loading Web Pages</db:title>
<db:para>An application can load pages into the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link>, using either the <db:link xlink:href="qml-qtwebengine-webengineview.xml#url-prop">url</db:link> property or the <db:link xlink:href="qml-qtwebengine-webengineview.xml#loadHtml-method">loadHtml</db:link> method and navigate within the view's session history. The GET method is always used to load URLs.</db:para>
<db:para>The history is represented by a <db:link xlink:href="qml-qtwebengine-webenginehistory.xml">WebEngineHistory</db:link> data model that is held by the <db:link xlink:href="qml-qtwebengine-webengineview.xml#history-prop">history</db:link> property.</db:para>
<db:para>The following sample QML application loads a web page using the <db:code>url</db:code> property:</db:para>
<db:programlisting language="cpp">import QtQuick
import QtQuick.Window
import QtWebEngine

Window {
    width: 1024
    height: 750
    visible: true
    WebEngineView {
        anchors.fill: parent
        url: &quot;https://www.qt.io&quot;
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#loading-prop">loading</db:link> property holds whether an HTML page is currently loading. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#loadingChanged-signal">loadingChanged</db:link>() signal is emitted when loading the page begins, ends, or fails.</db:para>
<db:para>The title of an HTML page can be accessed with the <db:link xlink:href="qml-qtwebengine-webengineview.xml#title-prop">title</db:link> property. Additionally, a web page may specify an icon, which can be accessed using the <db:link xlink:href="qml-qtwebengine-webengineview.xml#icon-prop">icon</db:link> property. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#zoomFactor-prop">zoomFactor</db:link> property enables zooming the contents of the web page by a scale factor.</db:para>
<db:para>If a certificate error is raised while loading a web page, the <db:link xlink:href="qml-qtwebengine-webengineview.xml#certificateError-signal">certificateError</db:link>() signal is emitted. Certificate errors are handled by using the methods of the <db:link xlink:href="qml-qtwebengine-webenginecertificateerror.xml">WebEngineCertificateError</db:link> type.</db:para>
</db:section>
<db:section xml:id="interaction">
<db:title>Interaction</db:title>
<db:para>By default, links to different pages load within the same <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> object, but web sites may request them to be opened as a new tab, window, or dialog. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#newWindowRequested-signal">newWindowRequested</db:link>() signal is emitted when a request to load the page in a separate web engine view is issued. The NewViewDestination property describes how the new view should be opened. In addition, the <db:link xlink:href="qml-qtwebengine-webenginenewwindowrequest.xml">WebEngineNewWindowRequest</db:link> utility type can be used to load web pages in separate web engine views.</db:para>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#findText-method">findText</db:link>() method can be used to search for a string on a web page, using the options described by <db:link xlink:href="qml-qtwebengine-webengineview.xml#FindFlags-prop">FindFlags</db:link>.</db:para>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#setActiveFocusOnPress-method">setActiveFocusOnPress</db:link>() method can be used to create a UI element that should not get focus on press. This can be useful in a hybrid UI.</db:para>
<db:para>The <db:link xlink:href="qml-qtwebengine-webenginesettings.xml#focusOnNavigationEnabled-prop">focusOnNavigationEnabled</db:link> setting can be used to make the view automatically receive focus when a navigation operation occurs (like loading or reloading a page or navigating through history).</db:para>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#linkHovered-signal">linkHovered</db:link>() signal is emitted when a mouse pointer passes over a link and thus corresponds to the <db:code>mouseover</db:code> DOM event.</db:para>
<db:para>Actions, such as selecting and editing content, can be performed on a web page by using the <db:link xlink:href="qml-qtwebengine-webengineview.xml#triggerWebAction-method">triggerWebAction</db:link>() method. The available actions are described by the <db:link xlink:href="qml-qtwebengine-webengineview.xml#WebAction-prop">WebAction</db:link> property.</db:para>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#backgroundColorChanged-signal">backgroundColorChanged</db:link>() signal is emitted when the web page background color changes.</db:para>
</db:section>
<db:section xml:id="user-scripts">
<db:title>User Scripts</db:title>
<db:para>During the loading of a page, so called <db:emphasis>user scripts</db:emphasis> can be injected in the JavaScript engine at different points. The script objects attached to the web engine view are held by the <db:link xlink:href="qml-qtwebengine-webengineview.xml#userScripts-prop">userScripts</db:link> property and injected by using the <db:link xlink:href="qml-qtwebengine-webenginescript.xml">WebEngineScript</db:link> type. Scripts can also be run by using the <db:link xlink:href="qml-qtwebengine-webengineview.xml#runJavaScript-method">runJavaScript</db:link>() method in the same world as other scripts that are part of the loaded site.</db:para>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#webChannel-prop">webChannel</db:link> property can be used to expose a WebChannel instance in the JavaScript context of the page it is rendering as <db:code>qt.webChannelTransport</db:code>.</db:para>
</db:section>
<db:section xml:id="fullscreen-mode">
<db:title>Fullscreen Mode</db:title>
<db:para>A web page can request through the JavaScript API to be loaded in fullscreen mode. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#fullScreenRequested-signal">fullScreenRequested</db:link>() signal is emitted when the web page issues the request. The <db:link xlink:href="qml-qtwebengine-fullscreenrequest.xml">FullScreenRequest</db:link> utility type can be used to toggle fullscreen requests. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#fullScreenCancelled-method">fullScreenCancelled</db:link> method can be used to notify the browser engine when the windowing system forces the application to leave fullscreen mode.</db:para>
</db:section>
<db:section xml:id="profiles">
<db:title>Profiles</db:title>
<db:para>Web engine views can be isolated from each other by using the <db:link xlink:href="qml-qtwebengine-webengineprofile.xml">WebEngineProfile</db:link> type. A profile contains settings, scripts, and the list of visited links shared by all views that belong to the profile. For example, a dedicated profile could be created for a <db:emphasis>private browsing</db:emphasis> mode. The current profile for the view is held by the <db:link xlink:href="qml-qtwebengine-webengineview.xml#profile-prop">profile</db:link> property and the current settings are held by the <db:link xlink:href="qml-qtwebengine-webengineview.xml#settings-prop">settings</db:link> property. The settings are specified by using the <db:link xlink:href="qml-qtwebengine-webenginesettings.xml">WebEngineSettings</db:link> type.</db:para>
</db:section>
<db:section xml:id="platform-features">
<db:title>Platform Features</db:title>
<db:para>Web pages can request access to platform features, such as geolocation or audio and video capture devices. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#featurePermissionRequested-signal">featurePermissionRequested</db:link>() signal is emitted when a web page requests to make use of a resource. The supported platform features are described by the <db:link xlink:href="qml-qtwebengine-webengineview.xml#Feature-prop">Feature</db:link> property. If users grant the permission, the <db:link xlink:href="qml-qtwebengine-webengineview.xml#grantFeaturePermission-method">grantFeaturePermission</db:link>() method is used to set it to <db:emphasis>granted</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="rendering-to-opengl-surface">
<db:title>Rendering to OpenGL Surface</db:title>
<db:para>When using a <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> to render a Qt Quick user interface to an OpenGL surface, the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> type is not rendered correctly. The web engine view attempts to use a global OpenGL context created by <db:link xlink:href="qtwebenginequick.xml#initialize">QtWebEngineQuick::initialize</db:link>, but there is no public API for accessing that context in order to share it with the <db:code>QQuickRenderControl</db:code> context.</db:para>
<db:para>To have the web engine view rendered correctly, it is possible to manually create a new offscreen context that is shared with the <db:code>QQuickRenderControl</db:code> and to call the non-public function <db:code>qt_gl_set_global_share_context()</db:code>, rather than calling <db:code>initialize()</db:code>. If <db:code>initialize()</db:code> is called after setting a global context, it will do nothing.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="ErrorDomain-prop">
<db:title>ErrorDomain : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>ErrorDomain</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Describes various high-level error types:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.NoErrorDomain</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.InternalErrorDomain</db:para>
</db:td>
<db:td>
<db:para>Content fails to be interpreted by Qt WebEngine.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ConnectionErrorDomain</db:para>
</db:td>
<db:td>
<db:para>Error results from faulty network connection.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.CertificateErrorDomain</db:para>
</db:td>
<db:td>
<db:para>Error related to the SSL/TLS certificate.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.HttpErrorDomain</db:para>
</db:td>
<db:td>
<db:para>Error related to the HTTP connection.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.FtpErrorDomain</db:para>
</db:td>
<db:td>
<db:para>Error related to the FTP connection.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.DnsErrorDomain</db:para>
</db:td>
<db:td>
<db:para>Error related to the DNS connection.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Feature-prop">
<db:title>Feature : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>Feature</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Describes the platform feature access categories that the user may be asked to grant or deny access to:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.Geolocation</db:para>
</db:td>
<db:td>
<db:para>Location hardware or service.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.MediaAudioCapture</db:para>
</db:td>
<db:td>
<db:para>Audio capture devices, such as microphones.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.MediaVideoCapture</db:para>
</db:td>
<db:td>
<db:para>Video devices, such as cameras.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.MediaAudioVideoCapture</db:para>
</db:td>
<db:td>
<db:para>Both audio and video capture devices.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DesktopVideoCapture</db:para>
</db:td>
<db:td>
<db:para>Video output capture, that is, the capture of the user's display. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>DesktopAudioVideoCapture</db:para>
</db:td>
<db:td>
<db:para>Both audio and video output capture. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEnginView.Notifications</db:para>
</db:td>
<db:td>
<db:para>Web notifications for the end-user.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#featurePermissionRequested-signal">featurePermissionRequested</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#grantFeaturePermission-method">grantFeaturePermission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="FindFlags-prop">
<db:title>FindFlags : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>FindFlags</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Describes the options available to the <db:link xlink:href="qml-qtwebengine-webengineview.xml#findText-method">findText</db:link>() function. The options can be OR-ed together from the following list:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.FindBackward</db:para>
</db:td>
<db:td>
<db:para>Searches backwards instead of forwards.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.FindFlags</db:para>
</db:td>
<db:td>
<db:para>FindCaseSensitively By default <db:link xlink:href="qml-qtwebengine-webengineview.xml#findText-method">findText</db:link>() works case insensitive. Specifying this option changes the behavior to a case sensitive find operation.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#findText-method">findText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="JavaScriptConsoleMessageLevel-prop">
<db:title>JavaScriptConsoleMessageLevel : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>JavaScriptConsoleMessageLevel</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Indicates the severity of a JavaScript console message:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.InfoMessageLevel</db:para>
</db:td>
<db:td>
<db:para>Message is purely informative and can safely be ignored.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.WarningMessageLevel</db:para>
</db:td>
<db:td>
<db:para>Message indicates there might be a problem that may need attention.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ErrorMessageLevel</db:para>
</db:td>
<db:td>
<db:para>Message indicates there has been an error.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="LifecycleState-prop">
<db:title>[since QtWebEngine 1.10] LifecycleState : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>LifecycleState</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This enum describes the lifecycle state of the page:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.LifecycleState.Active</db:para>
</db:td>
<db:td>
<db:para>Normal state.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.LifecycleState.Frozen</db:para>
</db:td>
<db:td>
<db:para>Low CPU usage state where most HTML task sources are suspended.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.LifecycleState.Discarded</db:para>
</db:td>
<db:td>
<db:para>Very low resource usage state where the entire browsing context is discarded.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in QtWebEngine 1.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#lifecycleState-propx">lifecycleState</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-features.xml#page-lifecycle-api">Page Lifecycle API</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-webenginequick-lifecycle-example.xml">WebEngine Lifecycle Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="LoadStatus-prop">
<db:title>LoadStatus : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>LoadStatus</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Reflects a page's load status:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.LoadStartedStatus</db:para>
</db:td>
<db:td>
<db:para>Page is currently loading.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.LoadStoppedStatus</db:para>
</db:td>
<db:td>
<db:para>Loading the page was stopped by the <db:link xlink:href="qml-qtwebengine-webengineview.xml#stop-method">stop</db:link>() method or by the loader code or network stack in Chromium.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.LoadSucceededStatus</db:para>
</db:td>
<db:td>
<db:para>Page has successfully loaded, and is not currently loading.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.LoadFailedStatus</db:para>
</db:td>
<db:td>
<db:para>Page has failed to load, and is not currently loading.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PrintedPageOrientation-prop">
<db:title>[since QtWebEngine 1.3] PrintedPageOrientation : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>PrintedPageOrientation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Describes the orientation of a PDF document that gets created from the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link>'s contents. The enumeration values are mapped from and must match <db:link xlink:href="qpagelayout.xml#Orientation-enum">QPageLayout::Orientation</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.Portrait</db:para>
</db:td>
<db:td>
<db:para>The document will be created using portrait orientation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Landscape</db:para>
</db:td>
<db:td>
<db:para>The document will be created using landscape orientation.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in QtWebEngine 1.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#printToPdf-method">WebEngineView::printToPdf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="PrintedPageSizeId-prop">
<db:title>[since QtWebEngine 1.3] PrintedPageSizeId : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>PrintedPageSizeId</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This enum type lists the available page sizes as defined in the Postscript PPD standard.</db:para>
<db:para>The enumeration values are mapped from and must match <db:link xlink:href="qpagesize.xml#PageSizeId-enum">QPageSize::PageSizeId</db:link>. They are also duplicated in <db:link xlink:href="qpagedpaintdevice.xml">QPagedPaintDevice</db:link> and <db:link xlink:href="qprinter.xml">QPrinter</db:link>.</db:para>
<db:para>The defined sizes are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.A0</db:para>
</db:td>
<db:td>
<db:para>841 x 1189 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A1</db:para>
</db:td>
<db:td>
<db:para>594 x 841 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A2</db:para>
</db:td>
<db:td>
<db:para>420 x 594 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A3</db:para>
</db:td>
<db:td>
<db:para>297 x 420 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A4</db:para>
</db:td>
<db:td>
<db:para>210 x 297 mm, 8.26 x 11.69 inches</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A5</db:para>
</db:td>
<db:td>
<db:para>148 x 210 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A6</db:para>
</db:td>
<db:td>
<db:para>105 x 148 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A7</db:para>
</db:td>
<db:td>
<db:para>74 x 105 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A8</db:para>
</db:td>
<db:td>
<db:para>52 x 74 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A9</db:para>
</db:td>
<db:td>
<db:para>37 x 52 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.B0</db:para>
</db:td>
<db:td>
<db:para>1000 x 1414 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.B1</db:para>
</db:td>
<db:td>
<db:para>707 x 1000 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.B2</db:para>
</db:td>
<db:td>
<db:para>500 x 707 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.B3</db:para>
</db:td>
<db:td>
<db:para>353 x 500 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.B4</db:para>
</db:td>
<db:td>
<db:para>250 x 353 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.B5</db:para>
</db:td>
<db:td>
<db:para>176 x 250 mm, 6.93 x 9.84 inches</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.B6</db:para>
</db:td>
<db:td>
<db:para>125 x 176 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.B7</db:para>
</db:td>
<db:td>
<db:para>88 x 125 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.B8</db:para>
</db:td>
<db:td>
<db:para>62 x 88 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.B9</db:para>
</db:td>
<db:td>
<db:para>44 x 62 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.B10</db:para>
</db:td>
<db:td>
<db:para>31 x 44 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.C5E</db:para>
</db:td>
<db:td>
<db:para>163 x 229 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Comm10E</db:para>
</db:td>
<db:td>
<db:para>105 x 241 mm, U.S. Common 10 Envelope</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.DLE</db:para>
</db:td>
<db:td>
<db:para>110 x 220 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Executive</db:para>
</db:td>
<db:td>
<db:para>7.5 x 10 inches, 190.5 x 254 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Folio</db:para>
</db:td>
<db:td>
<db:para>210 x 330 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Ledger</db:para>
</db:td>
<db:td>
<db:para>431.8 x 279.4 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Legal</db:para>
</db:td>
<db:td>
<db:para>8.5 x 14 inches, 215.9 x 355.6 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Letter</db:para>
</db:td>
<db:td>
<db:para>8.5 x 11 inches, 215.9 x 279.4 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Tabloid</db:para>
</db:td>
<db:td>
<db:para>279.4 x 431.8 mm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Custom</db:para>
</db:td>
<db:td>
<db:para>Unknown, or a user defined size.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A10</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A3Extra</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A4Extra</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A4Plus</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A4Small</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.A5Extra</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.B5Extra</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.JisB0</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.JisB1</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.JisB2</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.JisB3</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.JisB4</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.JisB5</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.JisB6</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.JisB7</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.JisB8</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.JisB9</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.JisB10</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.AnsiA</db:para>
</db:td>
<db:td>
<db:para>= <db:code>Letter</db:code></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.AnsiB</db:para>
</db:td>
<db:td>
<db:para>= <db:code>Ledger</db:code></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.AnsiC</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.AnsiD</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.AnsiE</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.LegalExtra</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.LetterExtra</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.LetterPlus</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.LetterSmall</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.TabloidExtra</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ArchA</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ArchB</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ArchC</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ArchD</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ArchE</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Imperial7x9</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Imperial8x10</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Imperial9x11</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Imperial9x12</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Imperial10x11</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Imperial10x13</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Imperial10x14</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Imperial12x11</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Imperial15x11</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ExecutiveStandard</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Note</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Quarto</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Statement</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.SuperA</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.SuperB</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Postcard</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.DoublePostcard</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Prc16K</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Prc32K</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Prc32KBig</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.FanFoldUS</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.FanFoldGerman</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.FanFoldGermanLegal</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeB4</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeB5</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeB6</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeC0</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeC1</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeC2</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeC3</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeC4</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeC5</db:para>
</db:td>
<db:td>
<db:para>= <db:code>C5E</db:code></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeC6</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeC65</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeC7</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeDL</db:para>
</db:td>
<db:td>
<db:para>= <db:code>DLE</db:code></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Envelope9</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Envelope10</db:para>
</db:td>
<db:td>
<db:para>= <db:code>Comm10E</db:code></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Envelope11</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Envelope12</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Envelope14</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeMonarch</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopePersonal</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeChou3</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeChou4</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeInvite</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeItalian</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeKaku2</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeKaku3</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopePrc1</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopePrc2</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopePrc3</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopePrc4</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopePrc5</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopePrc6</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopePrc7</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopePrc8</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopePrc9</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopePrc10</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.EnvelopeYou4</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.LastPageSize</db:para>
</db:td>
<db:td>
<db:para>= <db:code>EnvelopeYou4</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in QtWebEngine 1.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#printToPdf-method">WebEngineView::printToPdf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="RenderProcessTerminationStatus-prop">
<db:title>[since QtWebEngine 1.2] RenderProcessTerminationStatus : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>RenderProcessTerminationStatus</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Describes the status with which the render process terminated:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.NormalTerminationStatus</db:para>
</db:td>
<db:td>
<db:para>The render process terminated normally.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.AbnormalTerminationStatus</db:para>
</db:td>
<db:td>
<db:para>The render process terminated with a non-zero exit status.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.CrashedTerminationStatus</db:para>
</db:td>
<db:td>
<db:para>The render process crashed, for example because of a segmentation fault.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.KilledTerminationStatus</db:para>
</db:td>
<db:td>
<db:para>The render process was killed, for example by <db:code>SIGKILL</db:code> or task manager kill.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in QtWebEngine 1.2.</db:para>
</db:section>
<db:section xml:id="WebAction-prop">
<db:title>[since QtWebEngine 1.2] WebAction : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>WebAction</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Describes the types of action that can be performed on a web page:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>WebEngineView.NoWebAction</db:para>
</db:td>
<db:td>
<db:para>No action is triggered.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Back</db:para>
</db:td>
<db:td>
<db:para>Navigate back in the history of navigated links.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Forward</db:para>
</db:td>
<db:td>
<db:para>Navigate forward in the history of navigated links.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Stop</db:para>
</db:td>
<db:td>
<db:para>Stop loading the current page.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Reload</db:para>
</db:td>
<db:td>
<db:para>Reload the current page.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ReloadAndBypassCache</db:para>
</db:td>
<db:td>
<db:para>Reload the current page, but do not use any local cache.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Cut</db:para>
</db:td>
<db:td>
<db:para>Cut the content currently selected into the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Copy</db:para>
</db:td>
<db:td>
<db:para>Copy the content currently selected into the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Paste</db:para>
</db:td>
<db:td>
<db:para>Paste content from the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Undo</db:para>
</db:td>
<db:td>
<db:para>Undo the last editing action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Redo</db:para>
</db:td>
<db:td>
<db:para>Redo the last editing action.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.SelectAll</db:para>
</db:td>
<db:td>
<db:para>Select all content. This action is only enabled when the page's content is focused. The focus can be forced by the JavaScript <db:code>window.focus()</db:code> call, or the <db:link xlink:href="qml-qtwebengine-webenginesettings.xml#focusOnNavigationEnabled-prop">focusOnNavigationEnabled</db:link> setting should be enabled to get automatic focus.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.PasteAndMatchStyle</db:para>
</db:td>
<db:td>
<db:para>Paste content from the clipboard with current style.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.OpenLinkInThisWindow</db:para>
</db:td>
<db:td>
<db:para>Open the current link in the current window. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.OpenLinkInNewWindow</db:para>
</db:td>
<db:td>
<db:para>Open the current link in a new window. Requires a handler for the <db:link xlink:href="qml-qtwebengine-webengineview.xml#newWindowRequested-signal">newWindowRequested</db:link>() signal. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.OpenLinkInNewTab</db:para>
</db:td>
<db:td>
<db:para>Open the current link in a new tab. Requires a handler for the <db:link xlink:href="qml-qtwebengine-webengineview.xml#newWindowRequested-signal">newWindowRequested</db:link>() signal. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.CopyLinkToClipboard</db:para>
</db:td>
<db:td>
<db:para>Copy the current link to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.CopyImageToClipboard</db:para>
</db:td>
<db:td>
<db:para>Copy the clicked image to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.CopyImageUrlToClipboard</db:para>
</db:td>
<db:td>
<db:para>Copy the clicked image's URL to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.CopyMediaUrlToClipboard</db:para>
</db:td>
<db:td>
<db:para>Copy the hovered audio or video's URL to the clipboard. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ToggleMediaControls</db:para>
</db:td>
<db:td>
<db:para>Toggle between showing and hiding the controls for the hovered audio or video element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ToggleMediaLoop</db:para>
</db:td>
<db:td>
<db:para>Toggle whether the hovered audio or video should loop on completetion or not. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ToggleMediaPlayPause</db:para>
</db:td>
<db:td>
<db:para>Toggle the play/pause state of the hovered audio or video element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ToggleMediaMute</db:para>
</db:td>
<db:td>
<db:para>Mute or unmute the hovered audio or video element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.DownloadLinkToDisk</db:para>
</db:td>
<db:td>
<db:para>Download the current link to the disk. To implement download actions, connect to the <db:link xlink:href="qquickwebengineprofile.xml#downloadRequested">WebEngineProfile.downloadRequested</db:link> signal. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.DownloadImageToDisk</db:para>
</db:td>
<db:td>
<db:para>Download the highlighted image to the disk. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.DownloadMediaToDisk</db:para>
</db:td>
<db:td>
<db:para>Download the hovered audio or video to the disk. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.InspectElement</db:para>
</db:td>
<db:td>
<db:para>Trigger any attached Web Inspector to inspect the highlighed element. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ExitFullScreen</db:para>
</db:td>
<db:td>
<db:para>Exit the fullscreen mode. (Added in Qt 5.6)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.SavePage</db:para>
</db:td>
<db:td>
<db:para>Save the current web page to disk. (Added in Qt 5.7)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ViewSource</db:para>
</db:td>
<db:td>
<db:para>Show the source of the current page in a new tab. Requires a handler for the <db:link xlink:href="qml-qtwebengine-webengineview.xml#newWindowRequested-signal">newWindowRequested</db:link>() signal. (Added in Qt 5.8)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ToggleBold</db:para>
</db:td>
<db:td>
<db:para>Toggles boldness for the selection or at the cursor position. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ToggleItalic</db:para>
</db:td>
<db:td>
<db:para>Toggles italics for the selection or at the cursor position. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ToggleUnderline</db:para>
</db:td>
<db:td>
<db:para>Toggles underlining of the selection or at the cursor position. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.ToggleStrikethrough</db:para>
</db:td>
<db:td>
<db:para>Toggles striking through the selection or at the cursor position. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.AlignLeft</db:para>
</db:td>
<db:td>
<db:para>Aligns the lines containing the selection or the cursor to the left. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.AlignCenter</db:para>
</db:td>
<db:td>
<db:para>Aligns the lines containing the selection or the cursor at the center. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.AlignRight</db:para>
</db:td>
<db:td>
<db:para>Aligns the lines containing the selection or the cursor to the right. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.AlignJustified</db:para>
</db:td>
<db:td>
<db:para>Stretches the lines containing the selection or the cursor so that each line has equal width. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Indent</db:para>
</db:td>
<db:td>
<db:para>Indents the lines containing the selection or the cursor. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.Outdent</db:para>
</db:td>
<db:td>
<db:para>Outdents the lines containing the selection or the cursor. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.InsertOrderedList</db:para>
</db:td>
<db:td>
<db:para>Inserts an ordered list at the current cursor position, deleting the current selection. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>WebEngineView.InsertUnorderedList</db:para>
</db:td>
<db:td>
<db:para>Inserts an unordered list at the current cursor position, deleting the current selection. Requires <db:code>contenteditable=&quot;true&quot;</db:code>. (Added in Qt 5.10)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in QtWebEngine 1.2.</db:para>
</db:section>
<db:section xml:id="activeFocusOnPress-prop">
<db:title>[since QtWebEngine 1.2] activeFocusOnPress : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>activeFocusOnPress</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies whether the view should gain active focus when pressed. The default value is <db:code>true</db:code>.</db:para>
<db:para>This property was introduced in QtWebEngine 1.2.</db:para>
</db:section>
<db:section xml:id="audioMuted-prop">
<db:title>[since QtWebEngine 1.3] audioMuted : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>audioMuted</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The state of whether the current page audio is muted.</db:para>
<db:para>This property was introduced in QtWebEngine 1.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#recentlyAudible-prop">recentlyAudible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="backgroundColor-prop">
<db:title>[since QtWebEngine 1.2] backgroundColor : color</db:title>
<db:fieldsynopsis>
<db:type>color</db:type>
<db:varname>backgroundColor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Changes the color of the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link>'s background, behind the document's body. Can be set to <db:code>&quot;transparent&quot;</db:code> or to a translucent color to see through the document or to match the web content in a hybrid app to prevent the white flashes that may appear during loading.</db:para>
<db:para>The default value is white.</db:para>
<db:para>This property was introduced in QtWebEngine 1.2.</db:para>
</db:section>
<db:section xml:id="canGoBack-prop">
<db:title>[read-only] canGoBack : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>canGoBack</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns <db:code>true</db:code> if there are prior session history entries, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="canGoForward-prop">
<db:title>[read-only] canGoForward : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>canGoForward</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns <db:code>true</db:code> if there are subsequent session history entries, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="contentsSize-prop">
<db:title>[read-only, since QtWebEngine 1.3] contentsSize : size</db:title>
<db:fieldsynopsis>
<db:type>size</db:type>
<db:varname>contentsSize</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Size of the page contents.</db:para>
<db:para>This property was introduced in QtWebEngine 1.3.</db:para>
</db:section>
<db:section xml:id="devToolsView-prop">
<db:title>[since QtWebEngine 1.7] devToolsView : WebEngineView</db:title>
<db:fieldsynopsis>
<db:type>WebEngineView</db:type>
<db:varname>devToolsView</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The view currently hosting the developer tools for this view. Setting it to a new view will navigate that view to an internal URL with the developer tools, and bind it to this view.</db:para>
<db:para>This property was introduced in QtWebEngine 1.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#inspectedView-prop">inspectedView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="history-prop">
<db:title>[read-only, since QtWebEngine 1.1] history : WebEngineHistory</db:title>
<db:fieldsynopsis>
<db:type>WebEngineHistory</db:type>
<db:varname>history</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The navigation history of the current view.</db:para>
<db:para>This property was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webenginehistory.xml">WebEngineHistory</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="icon-prop">
<db:title>[read-only] icon : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>icon</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>An internal URL for accessing the currently displayed web site icon, also known as favicon or shortcut icon. This read-only URL corresponds to the image used within a mobile browser application to represent a bookmarked page on the device's home screen.</db:para>
<db:para>The following snippet uses the <db:code>icon</db:code> property to build an <db:code>Image</db:code> component:</db:para>
<db:programlisting language="qml">Image {
    id: appIcon
    sourceSize: Qt.size(32, 32)
    source: webView.icon != &quot;&quot; ? webView.icon : &quot;fallbackFavicon.png&quot;;
    // ...
}
</db:programlisting>
<db:para>Specifying the <db:link xlink:href="qml-qtquick-image.xml#sourceSize-prop">Image::sourceSize</db:link> property informs the Qt WebEngine's favicon provider about the requested size and resizes the icon to it. If <db:link xlink:href="qml-qtquick-image.xml#sourceSize-prop">Image::sourceSize</db:link> property is not specified, the provider provides the icon with the largest available resolution.</db:para>
</db:section>
<db:section xml:id="inspectedView-prop">
<db:title>[since QtWebEngine 1.7] inspectedView : WebEngineView</db:title>
<db:fieldsynopsis>
<db:type>WebEngineView</db:type>
<db:varname>inspectedView</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The view this view is currently inspecting, if any. Setting it will navigate to an internal URL with the developer tools of the view set.</db:para>
<db:para>It is recommended to unset this property when developer tools are not visible; otherwise some debug information may appear in the inspected <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link>.</db:para>
<db:para>This property was introduced in QtWebEngine 1.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#devToolsView-prop">devToolsView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFullScreen-prop">
<db:title>[read-only, since QtWebEngine 1.1] isFullScreen : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>isFullScreen</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns <db:code>true</db:code> if the web view is in fullscreen mode, <db:code>false</db:code> otherwise.</db:para>
<db:para>This property was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#fullScreenRequested-signal">fullScreenRequested</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#fullScreenCancelled-method">fullScreenCancelled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lifecycleState-propx">
<db:title>[since QtWebEngine 1.10] lifecycleState : LifecycleState</db:title>
<db:fieldsynopsis>
<db:type>LifecycleState</db:type>
<db:varname>lifecycleState</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The current lifecycle state of the page.</db:para>
<db:para>The following restrictions are enforced by the setter:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A visible page must remain in the <db:code>Active</db:code> state.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the page is being inspected by a <db:link xlink:href="qml-qtwebengine-webengineview.xml#devToolsView-prop">devToolsView</db:link> then both pages must remain in the <db:code>Active</db:code> states.</db:para>
</db:listitem>
<db:listitem>
<db:para>A page in the <db:code>Discarded</db:code> state can only transition to the <db:code>Active</db:code> state. This will cause a reload of the page.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>These are the only hard limits on the lifecycle state, but see also <db:link xlink:href="qml-qtwebengine-webengineview.xml#recommendedState-prop">recommendedState</db:link> for the recommended soft limits.</db:para>
<db:para>This property was introduced in QtWebEngine 1.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#recommendedState-prop">recommendedState</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-features.xml#page-lifecycle-api">Page Lifecycle API</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-webenginequick-lifecycle-example.xml">WebEngine Lifecycle Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadProgress-prop">
<db:title>[read-only] loadProgress : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>loadProgress</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The amount of data from the page that has been loaded, expressed as an integer percentage in the range from <db:code>0</db:code> to <db:code>100</db:code>.</db:para>
</db:section>
<db:section xml:id="loading-prop">
<db:title>[read-only] loading : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>loading</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns <db:code>true</db:code> if the HTML page is currently loading, <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="profile-prop">
<db:title>[since QtWebEngine 1.1] profile : WebEngineProfile</db:title>
<db:fieldsynopsis>
<db:type>WebEngineProfile</db:type>
<db:varname>profile</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The current profile used for the view.</db:para>
<db:para>This property was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineprofile.xml">WebEngineProfile</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="recentlyAudible-prop">
<db:title>[read-only, since QtWebEngine 1.3] recentlyAudible : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>recentlyAudible</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the current page's audible state (audio was recently played, or not).</db:para>
<db:para>This property was introduced in QtWebEngine 1.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#audioMuted-prop">audioMuted</db:link></db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#recentlyAudibleChanged-signal">recentlyAudibleChanged</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="recommendedState-prop">
<db:title>[read-only, since QtWebEngine 1.10] recommendedState : LifecycleState</db:title>
<db:fieldsynopsis>
<db:type>LifecycleState</db:type>
<db:varname>recommendedState</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The recommended limit for the lifecycle state of the page.</db:para>
<db:para>Setting the lifecycle state to a lower resource usage state than the recommended state may cause side-effects such as stopping background audio playback or loss of HTML form input. Setting the lifecycle state to a higher resource state is however completely safe.</db:para>
<db:para>This property was introduced in QtWebEngine 1.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#lifecycleState-propx">lifecycleState</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-features.xml#page-lifecycle-api">Page Lifecycle API</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-webenginequick-lifecycle-example.xml">WebEngine Lifecycle Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderProcessPid-prop">
<db:title>[read-only, since QtWebEngine 1.11] renderProcessPid : qint64</db:title>
<db:fieldsynopsis>
<db:type>qint64</db:type>
<db:varname>renderProcessPid</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the process ID (PID) of the render process assigned to the current page's main frame.</db:para>
<db:para>If no render process is available yet, <db:code>0</db:code> is returned.</db:para>
<db:para>This property was introduced in QtWebEngine 1.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#renderProcessPidChanged-signal">renderProcessPidChanged</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scrollPosition-prop">
<db:title>[read-only, since QtWebEngine 1.3] scrollPosition : point</db:title>
<db:fieldsynopsis>
<db:type>point</db:type>
<db:varname>scrollPosition</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Scroll position of the page contents.</db:para>
<db:para>This property was introduced in QtWebEngine 1.3.</db:para>
</db:section>
<db:section xml:id="settings-prop">
<db:title>[read-only, since QtWebEngine 1.1] settings : WebEngineSettings</db:title>
<db:fieldsynopsis>
<db:type>WebEngineSettings</db:type>
<db:varname>settings</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Settings used by this view.</db:para>
<db:para>This property was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webenginesettings.xml">WebEngineSettings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title-prop">
<db:title>[read-only] title : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>title</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The title of the currently displayed HTML page. This is a read-only value that reflects the contents of the <db:code>&lt;title&gt;</db:code> tag.</db:para>
</db:section>
<db:section xml:id="touchHandleDelegate-prop">
<db:title>[since QtWebEngine 6.4] touchHandleDelegate : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>touchHandleDelegate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The <db:code role="parameter">touchHandleDelegate</db:code> provides a template defining visual touch handles instantiated by the view whenever touch selection handling is required.</db:para>
<db:para>The handle's position, opacity, and visibility are updated automatically. The delegate should be a QML Item or any QML type which inherits it.</db:para>
<db:note>
<db:para>If no QML Item is set, the default touch handles will be shown.</db:para>
</db:note>
<db:para>The following code uses a custom touch handle delegate:</db:para>
<db:programlisting language="cpp">WebEngineView {
// ...
    touchHandleDelegate: Rectangle {
        color: &quot;red&quot;
    }
    // ...
}
</db:programlisting>
<db:para>This property was introduced in QtWebEngine 6.4.</db:para>
</db:section>
<db:section xml:id="url-prop">
<db:title>url : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>url</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The location of the currently displayed HTML page. This writable property offers the main interface to load a page into a web view. It functions the same as the <db:code>window.location</db:code> DOM property.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#loadHtml-method">loadHtml</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="userScripts-prop">
<db:title>[read-only, since QtWebEngine 1.1] userScripts : WebEngineScriptCollection</db:title>
<db:fieldsynopsis>
<db:type>WebEngineScriptCollection</db:type>
<db:varname>userScripts</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The user scripts' collection associated with the view.</db:para>
<db:para>This property was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webenginescriptcollection.xml">WebEngineScriptCollection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="webChannel-prop">
<db:title>[since QtWebEngine 1.1] webChannel : QQmlWebChannel</db:title>
<db:fieldsynopsis>
<db:type>QQmlWebChannel</db:type>
<db:varname>webChannel</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The web channel instance used by this view. This channel is automatically using the internal <db:link xlink:href="qtwebengine-qmlmodule.xml">QtWebEngine</db:link> transport mechanism over Chromium IPC, and exposed in the javascript context of the page it is rendering as <db:code>qt.webChannelTransport</db:code>. This transport object is used when instantiating the JavaScript counterpart of <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> using the <db:link xlink:href="qtwebchannel-javascript.xml">Qt WebChannel JavaScript API</db:link>.</db:para>
<db:note>
<db:para>The view does not take ownership for an assigned webChannel object.</db:para>
</db:note>
<db:para>This property was introduced in QtWebEngine 1.1.</db:para>
</db:section>
<db:section xml:id="webChannelWorld-prop">
<db:title>[since QtWebEngine 1.3] webChannelWorld : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>webChannelWorld</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>JavaScript world that the web channel instance used by this view is installed in. The world must be a number between <db:code>0</db:code> and <db:code>256</db:code>.</db:para>
<db:para>This property was introduced in QtWebEngine 1.3.</db:para>
</db:section>
<db:section xml:id="zoomFactor-prop">
<db:title>[since QtWebEngine 1.1] zoomFactor : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>zoomFactor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Zoom factor for the view. Valid values are within the range from <db:code>0.25</db:code> to <db:code>5.0</db:code>. The default factor is <db:code>1.0</db:code>.</db:para>
<db:para>This property was introduced in QtWebEngine 1.1.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="activeFocusOnPressChanged-signal">
<db:title>[since QtWebEngine 1.2] activeFocusOnPressChanged(bool <db:emphasis>activeFocusOnPress</db:emphasis>)</db:title>
<db:para>This signal is emitted when the value of <db:code role="parameter">activeFocusOnPress</db:code> changes. It specifies whether the view should gain active focus when pressed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onActiveFocusOnPressChanged</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#activeFocusOnPress-prop">activeFocusOnPress</db:link></db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#setActiveFocusOnPress-method">setActiveFocusOnPress</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="audioMutedChanged-signal">
<db:title>[since QtWebEngine 1.3] audioMutedChanged(bool <db:emphasis>muted</db:emphasis>)</db:title>
<db:para>This signal is emitted when the value of <db:code role="parameter">muted</db:code> changes. The value is specified using the <db:link xlink:href="qml-qtwebengine-webengineview.xml#audioMuted-prop">audioMuted</db:link> property.</db:para>
<db:note>
<db:para>Not to be confused with a specific HTML5 audio / video element being muted.</db:para>
</db:note>
<db:note>
<db:para>The corresponding handler is <db:code>onAudioMutedChanged</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#audioMuted-prop">audioMuted</db:link></db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#recentlyAudibleChanged-signal">recentlyAudibleChanged</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="authenticationDialogRequested-signal">
<db:title>[since QtWebEngine 1.4] authenticationDialogRequested(AuthenticationDialogRequest <db:emphasis>request</db:emphasis>)</db:title>
<db:para>This signal is emitted when an authentication dialog is requested.</db:para>
<db:para>The <db:code role="parameter">request</db:code> can be handled by using the methods of the <db:link xlink:href="qml-qtwebengine-authenticationdialogrequest.xml">AuthenticationDialogRequest</db:link> type.</db:para>
<db:note>
<db:para>Signal handlers need to call <db:code>request.accepted = true</db:code> to prevent a default dialog from showing up. Make sure to call either <db:link xlink:href="qml-qtwebengine-authenticationdialogrequest.xml#dialogAccept-method">AuthenticationDialogRequest::dialogAccept</db:link>() or <db:link xlink:href="qml-qtwebengine-authenticationdialogrequest.xml#dialogReject-method">AuthenticationDialogRequest::dialogReject</db:link>() afterwards.</db:para>
</db:note>
<db:note>
<db:para>The corresponding handler is <db:code>onAuthenticationDialogRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.4.</db:para>
</db:section>
<db:section xml:id="backgroundColorChanged-signal">
<db:title>[since QtWebEngine 1.2] backgroundColorChanged()</db:title>
<db:para>This signal is emitted when the web engine view background color changes.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onBackgroundColorChanged</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.2.</db:para>
</db:section>
<db:section xml:id="certificateError-signal">
<db:title>[since QtWebEngine 1.1] certificateError(WebEngineCertificateError <db:emphasis>error</db:emphasis>)</db:title>
<db:para>This signal is emitted when an invalid certificate error, <db:code role="parameter">error</db:code>, is raised while loading a given request.</db:para>
<db:para>The certificate error can be handled by using the methods of the <db:link xlink:href="qml-qtwebengine-webenginecertificateerror.xml">WebEngineCertificateError</db:link> type.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onCertificateError</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.1.</db:para>
</db:section>
<db:section xml:id="colorDialogRequested-signal">
<db:title>[since QtWebEngine 1.4] colorDialogRequested(ColorDialogRequest <db:emphasis>request</db:emphasis>)</db:title>
<db:para>This signal is emitted when a color picker dialog is requested.</db:para>
<db:para>The <db:code role="parameter">request</db:code> can be handled by using the methods of the <db:link xlink:href="qml-qtwebengine-colordialogrequest.xml">ColorDialogRequest</db:link> type.</db:para>
<db:note>
<db:para>Signal handlers need to call <db:code>request.accepted = true</db:code> to prevent a default dialog from showing up. Make sure to call either <db:link xlink:href="qml-qtwebengine-colordialogrequest.xml#dialogAccept-method">ColorDialogRequest::dialogAccept</db:link>() or <db:link xlink:href="qml-qtwebengine-colordialogrequest.xml#dialogReject-method">ColorDialogRequest::dialogReject</db:link>() afterwards.</db:para>
</db:note>
<db:note>
<db:para>The corresponding handler is <db:code>onColorDialogRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.4.</db:para>
</db:section>
<db:section xml:id="contextMenuRequested-signal">
<db:title>[since QtWebEngine 1.4] contextMenuRequested(ContextMenuRequest <db:emphasis>request</db:emphasis>)</db:title>
<db:para>This signal is emitted when a context menu is requested.</db:para>
<db:para>The <db:code role="parameter">request</db:code> can be handled by using the properties of the <db:link xlink:href="qml-qtwebengine-contextmenurequest.xml">ContextMenuRequest</db:link> type.</db:para>
<db:note>
<db:para>Signal handlers need to call <db:code>request.accepted = true</db:code> to prevent a default context menu from showing up.</db:para>
</db:note>
<db:note>
<db:para>The corresponding handler is <db:code>onContextMenuRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.4.</db:para>
</db:section>
<db:section xml:id="featurePermissionRequested-signal">
<db:title>[since QtWebEngine 1.1] featurePermissionRequested(url <db:emphasis>securityOrigin</db:emphasis>, Feature <db:emphasis>feature</db:emphasis>)</db:title>
<db:para>This signal is emitted when the web site identified by <db:code role="parameter">securityOrigin</db:code> requests to make use of the resource or device identified by <db:code role="parameter">feature</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onFeaturePermissionRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#grantFeaturePermission-method">grantFeaturePermission</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileDialogRequested-signal">
<db:title>[since QtWebEngine 1.4] fileDialogRequested(FileDialogRequest <db:emphasis>request</db:emphasis>)</db:title>
<db:para>This signal is emitted when a file picker dialog is requested.</db:para>
<db:para>The <db:code role="parameter">request</db:code> can be handled by using the methods of the <db:link xlink:href="qml-qtwebengine-filedialogrequest.xml">FileDialogRequest</db:link> type.</db:para>
<db:note>
<db:para>Signal handlers need to call <db:code>request.accepted = true</db:code> to prevent a default dialog from showing up. Make sure to call either <db:link xlink:href="qml-qtwebengine-filedialogrequest.xml#dialogAccept-method">FileDialogRequest::dialogAccept</db:link>() or <db:link xlink:href="qml-qtwebengine-filedialogrequest.xml#dialogReject-method">FileDialogRequest::dialogReject</db:link>() afterwards.</db:para>
</db:note>
<db:note>
<db:para>The corresponding handler is <db:code>onFileDialogRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.4.</db:para>
</db:section>
<db:section xml:id="findTextFinished-signal">
<db:title>[since QtWebEngine 1.10] findTextFinished(FindTextResult <db:emphasis>result</db:emphasis>)</db:title>
<db:para>This signal is emitted when a string search on a page is completed. <db:code role="parameter">result</db:code> is the result of the string search.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onFindTextFinished</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#findText-method">findText</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtwebengine-findtextresult.xml">FindTextResult</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fullScreenRequested-signal">
<db:title>[since QtWebEngine 1.1] fullScreenRequested(FullScreenRequest <db:emphasis>request</db:emphasis>)</db:title>
<db:para>This signal is emitted when the web page issues the <db:code role="parameter">request</db:code> for fullscreen mode through the JavaScript API.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onFullScreenRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#isFullScreen-prop">isFullScreen</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="geometryChangeRequested-signal">
<db:title>[since QtWebEngine 1.7] geometryChangeRequested(rect <db:emphasis>geometry</db:emphasis>, rect <db:emphasis>frameGeometry</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the document wants to change the position and size of the page to <db:code role="parameter">frameGeometry</db:code>. This can happen for example through JavaScript.</db:para>
<db:para>While <db:code role="parameter">frameGeometry</db:code> includes, <db:code role="parameter">geometry</db:code> excludes the size of frame margins.</db:para>
<db:note>
<db:para>Geometry related properties of QML Window expect a size excluding the window decoration. You have to use <db:code role="parameter">geometry</db:code> to handle this signal correctly.</db:para>
</db:note>
<db:programlisting language="qml">onGeometryChangeRequested: {
    window.x = geometry.x
    window.y = geometry.y
    window.width = geometry.width
    window.height = geometry.height
}
</db:programlisting>
<db:note>
<db:para>The corresponding handler is <db:code>onGeometryChangeRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.7.</db:para>
</db:section>
<db:section xml:id="javaScriptConsoleMessage-signal">
<db:title>javaScriptConsoleMessage(JavaScriptConsoleMessageLevel <db:emphasis>level</db:emphasis>, string <db:emphasis>message</db:emphasis>, int <db:emphasis>lineNumber</db:emphasis>, string <db:emphasis>sourceID</db:emphasis>)</db:title>
<db:para>This signal is emitted when a JavaScript program tries to print a <db:code role="parameter">message</db:code> to the web browser's console.</db:para>
<db:para>For example, in case of evaluation errors the source URL may be provided in <db:code role="parameter">sourceID</db:code> as well as the <db:code role="parameter">lineNumber</db:code>.</db:para>
<db:para><db:code role="parameter">level</db:code> indicates the severity of the event that triggered the message, that is, whether it was triggered by an error or a less severe event.</db:para>
<db:para>If no handler is specified, the view will log the messages into a <db:code>js</db:code> <db:link xlink:href="qloggingcategory.xml">logging category</db:link>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onJavaScriptConsoleMessage</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwebengine-debugging.xml#console-logging">Console Logging</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="javaScriptDialogRequested-signal">
<db:title>[since QtWebEngine 1.4] javaScriptDialogRequested(JavaScriptDialogRequest <db:emphasis>request</db:emphasis>)</db:title>
<db:para>This signal is emitted when a JavaScript dialog is requested.</db:para>
<db:para>The <db:code role="parameter">request</db:code> can be handled by using the methods of the <db:link xlink:href="qml-qtwebengine-javascriptdialogrequest.xml">JavaScriptDialogRequest</db:link> type.</db:para>
<db:note>
<db:para>Signal handlers need to call <db:code>request.accepted = true</db:code> to prevent a default dialog from showing up. Make sure to call either <db:link xlink:href="qml-qtwebengine-javascriptdialogrequest.xml#dialogAccept-method">JavaScriptDialogRequest::dialogAccept</db:link>() or <db:link xlink:href="qml-qtwebengine-javascriptdialogrequest.xml#dialogReject-method">JavaScriptDialogRequest::dialogReject</db:link>() afterwards.</db:para>
</db:note>
<db:note>
<db:para>The corresponding handler is <db:code>onJavaScriptDialogRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.4.</db:para>
</db:section>
<db:section xml:id="linkHovered-signal">
<db:title>linkHovered(url <db:emphasis>hoveredUrl</db:emphasis>)</db:title>
<db:para>Within a mouse-driven interface, this signal is emitted when a mouse pointer passes over a link, corresponding to the <db:code>mouseover</db:code> DOM event. This event may also occur in touch interfaces for <db:code>mouseover</db:code> events that are not cancelled with <db:code>preventDefault()</db:code>. <db:code role="parameter">hoveredUrl</db:code> provides the link's location.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLinkHovered</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="loadingChanged-signal">
<db:title>loadingChanged(WebEngineLoadingInfo <db:emphasis>loadingInfo</db:emphasis>)</db:title>
<db:para>This signal is emitted when a page load begins, ends, or fails.</db:para>
<db:para>When handling the signal with <db:code>onLoadingChanged</db:code>, various read-only parameters are available on the <db:link xlink:href="qml-qtwebengine-webengineloadinginfo.xml">WebEngineLoadingInfo</db:link> specified by <db:code role="parameter">loadingInfo</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onLoadingChanged</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#loading-prop">loading</db:link></db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#LoadStatus-prop">LoadStatus</db:link></db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#ErrorDomain-prop">ErrorDomain</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="navigationRequested-signal">
<db:title>navigationRequested(WebEngineNavigationRequest <db:emphasis>request</db:emphasis>)</db:title>
<db:para>This signal is emitted when the navigation request <db:code role="parameter">request</db:code> is issued.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onNavigationRequested</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="newWindowRequested-signal">
<db:title>[since QtWebEngine 2.0] newWindowRequested(WebEngineNewWindowRequest <db:emphasis>request</db:emphasis>)</db:title>
<db:para>This signal is emitted when <db:code role="parameter">request</db:code> is issued to load a page in a separate web engine view. This can either be because the current page requested it explicitly through a JavaScript call to <db:code>window.open</db:code>, or because the user clicked on a link while holding Shift, Ctrl, or a built-in combination that triggers the page to open in a new window.</db:para>
<db:para>The signal is handled by calling <db:link xlink:href="qml-qtwebengine-webengineview.xml#acceptAsNewWindow-method">acceptAsNewWindow</db:link>() on the destination view. If this signal is not handled, the requested load will fail.</db:para>
<db:para>An example implementation:</db:para>
<db:programlisting language="qml">QtObject {
    id: windowParent
    // Create the initial browsing windows and open the startup page.
    Component.onCompleted: {
        var firstWindow = windowComponent.createObject(windowParent);
        firstWindow.webView.loadHtml('&amp;lt;input type=&quot;button&quot; value=&quot;Click!&quot; onclick=&quot;window.open(&amp;amp;quot;http://qt.io&amp;amp;quot;)&quot;&amp;gt;');
    }

    property Component windowComponent: Window {
        // Destroy on close to release the Window's QML resources.
        // Because it was created with a parent, it won't be garbage-collected.
        onClosing: destroy()
        visible: true

        property WebEngineView webView: webView_
        WebEngineView {
            id: webView_
            anchors.fill: parent

            // Handle the signal. Dynamically create the window and
            // use its WebEngineView as the destination of our request.
            onNewWindowRequested: function(request) {
                var newWindow = windowComponent.createObject(windowParent);
                newWindow.webView.acceptAsNewWindow(request);
            }
        }
    }
}
</db:programlisting>
<db:note>
<db:para>The corresponding handler is <db:code>onNewWindowRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 2.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webenginenewwindowrequest.xml">WebEngineNewWindowRequest</db:link></db:member>
<db:member><db:link xlink:href="qtwebengine-webenginequick-quicknanobrowser-example.xml">WebEngine Quick Nano Browser</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pdfPrintingFinished-signal">
<db:title>[since QtWebEngine 1.5] pdfPrintingFinished(string <db:emphasis>filePath</db:emphasis>, bool <db:emphasis>success</db:emphasis>)</db:title>
<db:para>This signal is emitted when printing the web page into a PDF file has finished. <db:code role="parameter">filePath</db:code> will contain the path the file was requested to be created at, and <db:code role="parameter">success</db:code> will be <db:code>true</db:code> if the file was successfully created and <db:code>false</db:code> otherwise.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPdfPrintingFinished</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#printToPdf-method">printToPdf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="printRequest-signal">
<db:title>[since QtWebEngine 1.8] printRequest()</db:title>
<db:para>This signal is emitted when the JavaScript <db:code>window.print()</db:code> method is called. Typically, the signal handler can simply call <db:link xlink:href="qml-qtwebengine-webengineview.xml#printToPdf-method">printToPdf</db:link>().</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPrintRequest</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#printToPdf-method">printToPdf</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quotaRequested-signal">
<db:title>[since QtWebEngine 1.7] quotaRequested(QuotaRequest <db:emphasis>request</db:emphasis>)</db:title>
<db:para>This signal is emitted when the web page issues a <db:code role="parameter">request</db:code> for a larger persistent storage than the application's current allocation in File System API. The default quota is 0 bytes.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onQuotaRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-quotarequest.xml">QuotaRequest</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="recentlyAudibleChanged-signal">
<db:title>[since QtWebEngine 1.3] recentlyAudibleChanged(bool <db:emphasis>recentlyAudible</db:emphasis>)</db:title>
<db:para>This signal is emitted when the page's audible state, specified by <db:code role="parameter">recentlyAudible</db:code>, is changed, due to audio being played or stopped.</db:para>
<db:note>
<db:para>The signal is also emitted when the <db:link xlink:href="qml-qtwebengine-webengineview.xml#audioMuted-prop">audioMuted</db:link> property changes. Also if the audio is paused, this signal is emitted with an approximate <db:emphasis role="bold">two-second delay</db:emphasis>, from the moment the audio is paused.</db:para>
</db:note>
<db:para>If a web page contains two videos that are started in sequence, this signal gets emitted only once, for the first video to generate sound. After both videos are stopped, the signal is emitted upon the last sound generated. This means that the signal is emitted both when any kind of sound is generated and when everything is completely silent within a web page, regardless of the number of audio streams.</db:para>
<db:para>Spurious signal emissions might also happen. For example, when sound is stopped, this signal gets emitted first with a value of <db:code>true</db:code>, and then with a value of <db:code>false</db:code>. Further, when audio starts playing, the signal is emitted twice with a value of <db:code>true</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onRecentlyAudibleChanged</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#recentlyAudible-prop">recentlyAudible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerProtocolHandlerRequested-signal">
<db:title>[since QtWebEngine 1.7] registerProtocolHandlerRequested(RegisterProtocolHandlerRequest <db:emphasis>request</db:emphasis>)</db:title>
<db:para>This signal is emitted when the web page tries to register a custom protocol by issuing a <db:link xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler">registerProtocolHandler</db:link> <db:code role="parameter">request</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onRegisterProtocolHandlerRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-registerprotocolhandlerrequest.xml">RegisterProtocolHandlerRequest</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderProcessPidChanged-signal">
<db:title>[since QtWebEngine 1.11] renderProcessPidChanged(qint64 <db:emphasis>pid</db:emphasis>)</db:title>
<db:para>If no render process is available yet, <db:code>0</db:code> is returned. This signal is emitted when <db:code role="parameter">pid</db:code> (process ID) of the page's underlying render process changed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onRenderProcessPidChanged</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#renderProcessPid-prop">renderProcessPid</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderProcessTerminated-signal">
<db:title>[since QtWebEngine 1.2] renderProcessTerminated(RenderProcessTerminationStatus <db:emphasis>terminationStatus</db:emphasis>, int <db:emphasis>exitCode</db:emphasis>)</db:title>
<db:para>This signal is emitted when the render process is terminated with a non-zero exit status. <db:code role="parameter">terminationStatus</db:code> is the termination status of the process and <db:code role="parameter">exitCode</db:code> is the status code with which the process terminated.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onRenderProcessTerminated</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#RenderProcessTerminationStatus-prop">RenderProcessTerminationStatus</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectClientCertificate-signal">
<db:title>[since QtWebEngine 1.9] selectClientCertificate(WebEngineClientCertificateSelection <db:emphasis>clientCertificateSelection</db:emphasis>)</db:title>
<db:para>This signal is emitted when a web site requests an SSL client certificate, and one or more were found in the system's client certificate store.</db:para>
<db:para>Handling the signal is asynchronous, and loading will be waiting until a certificate is selected, or the last copy of <db:code role="parameter">clientCertificateSelection</db:code> is destroyed.</db:para>
<db:para>If the signal is not handled, <db:code role="parameter">clientCertificateSelection</db:code> is automatically destroyed, and loading will continue without a client certificate.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onSelectClientCertificate</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineclientcertificateselection.xml">WebEngineClientCertificateSelection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tooltipRequested-signal">
<db:title>[since QtWebEngine 1.10] tooltipRequested(TooltipRequest <db:emphasis>request</db:emphasis>)</db:title>
<db:para>This signal is emitted when the web page sends a <db:code role="parameter">request</db:code> to show a tooltip at a specified position.</db:para>
<db:note>
<db:para>Signal handlers need to call <db:code>request.accepted = true</db:code> to prevent a default tooltip from showing up.</db:para>
</db:note>
<db:note>
<db:para>The corresponding handler is <db:code>onTooltipRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-tooltiprequest.xml">TooltipRequest</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="touchSelectionMenuRequested-signal">
<db:title>[since QtWebEngine 6.3] touchSelectionMenuRequested(TouchSelectionMenuRequest *<db:emphasis>request</db:emphasis>)</db:title>
<db:para>This signal is emitted when a touch selection menu is requested at a specified position.</db:para>
<db:para>The <db:code role="parameter">request</db:code> can be handled by using the methods of the <db:link xlink:href="qml-qtwebengine-touchselectionmenurequest.xml">TouchSelectionMenuRequest</db:link> type.</db:para>
<db:note>
<db:para>Signal handlers need to call <db:code>request.accepted = true</db:code> to prevent a default touch selection menu from showing up.</db:para>
</db:note>
<db:note>
<db:para>The corresponding handler is <db:code>onTouchSelectionMenuRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-touchselectionmenurequest.xml">TouchSelectionMenuRequest</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wasRecentlyAudibleChanged-signal">
<db:title>[since QtWebEngine 1.3] wasRecentlyAudibleChanged(bool <db:emphasis>wasRecentlyAudible</db:emphasis>)</db:title>
<db:para>This signal is emitted when the page's audible state, specified by <db:code role="parameter">wasRecentlyAudible</db:code>, is changed, due to audio being played or stopped.</db:para>
<db:note>
<db:para>The signal is also emitted when calling the setAudioMuted method.</db:para>
</db:note>
<db:note>
<db:para>The corresponding handler is <db:code>onWasRecentlyAudibleChanged</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.3.</db:para>
</db:section>
<db:section xml:id="windowCloseRequested-signal">
<db:title>[since QtWebEngine 1.2] windowCloseRequested()</db:title>
<db:para>This signal is emitted whenever the page requests the web browser window to be closed, for example through the JavaScript <db:code>window.close()</db:code> call.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onWindowCloseRequested</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtWebEngine 1.2.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="acceptAsNewWindow-method">
<db:title>[since QtWebEngine 2.0] void acceptAsNewWindow(QWebEngineNewWindowRequest *<db:emphasis>request</db:emphasis>)</db:title>
<db:para>Handle the <db:link xlink:href="qml-qtwebengine-webengineview.xml#newWindowRequested-signal">newWindowRequested</db:link> signal by opening the <db:code role="parameter">request</db:code> in this view.</db:para>
<db:para>This method was introduced in QtWebEngine 2.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#newWindowRequested-signal">newWindowRequested</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="action-method">
<db:title>[since 5.12] WebEngineAction action(WebAction <db:emphasis>action</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qml-qtwebengine-webengineaction.xml">WebEngineAction</db:link> for the specified <db:link xlink:href="qml-qtwebengine-webengineview.xml#WebAction-prop">WebAction</db:link> <db:code role="parameter">action</db:code>. <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> also takes care of implementing the action, so that upon triggering the corresponding action is performed on the view.</db:para>
<db:programlisting language="cpp">var copyAction = webEngineView.action(WebEngineView.Copy);
</db:programlisting>
<db:para>This method was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineaction.xml">WebEngineAction</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findText-method">
<db:title>[since QtWebEngine 1.1] void findText(string <db:emphasis>subString</db:emphasis>)</db:title>
<db:para>Finds the specified string, <db:code role="parameter">subString</db:code>, in the page. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#findTextFinished-signal">findTextFinished</db:link>() signal is emitted when a string search is completed.</db:para>
<db:para>To clear the search highlight, just pass an empty string.</db:para>
<db:para>This method was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#findTextFinished-signal">findTextFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findText-method-1">
<db:title>[since QtWebEngine 1.1] void findText(string <db:emphasis>subString</db:emphasis>, FindFlags <db:emphasis>options</db:emphasis>)</db:title>
<db:para>Finds the specified string, <db:code role="parameter">subString</db:code>, in the page, using the given <db:code role="parameter">options</db:code>. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#findTextFinished-signal">findTextFinished</db:link>() signal is emitted when a string search is completed.</db:para>
<db:para>To clear the search highlight, just pass an empty string.</db:para>
<db:programlisting language="cpp">findText(&quot;Qt&quot;, WebEngineView.FindBackward | WebEngineView.FindCaseSensitively);
</db:programlisting>
<db:para>This method was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#findTextFinished-signal">findTextFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findText-method-2">
<db:title>[since QtWebEngine 1.1] void findText(string <db:emphasis>subString</db:emphasis>, FindFlags <db:emphasis>options</db:emphasis>, variant <db:emphasis>resultCallback</db:emphasis>)</db:title>
<db:para>Finds the specified string, <db:code role="parameter">subString</db:code>, in the page, using the given <db:code role="parameter">options</db:code>. The <db:link xlink:href="qml-qtwebengine-webengineview.xml#findTextFinished-signal">findTextFinished</db:link>() signal is emitted when a string search is completed.</db:para>
<db:para>To clear the search highlight, just pass an empty string.</db:para>
<db:para>The <db:code role="parameter">resultCallback</db:code> must take an integer parameter. It will be called with the number of found occurrences of the <db:code role="parameter">subString</db:code>.</db:para>
<db:programlisting language="cpp">findText(&quot;Qt&quot;, WebEngineView.FindCaseSensitively, function(matchCount) {
    if (matchCount &amp;gt; 0)
        console.log(&quot;'Qt' tokens found:&quot;, matchCount);
});
</db:programlisting>
<db:para>This method was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#findTextFinished-signal">findTextFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fullScreenCancelled-method">
<db:title>[since QtWebEngine 1.1] void fullScreenCancelled()</db:title>
<db:para>Immediately sets <db:code>isFullScreen</db:code> property to <db:code>false</db:code>. It can be used to notify the browser engine when the windowing system forces the application to leave fullscreen mode.</db:para>
<db:programlisting language="qml">ApplicationWindow {
    onVisibilityChanged: {
        if (webEngineView.isFullScreen &amp;amp;&amp;amp; visibility != Window.FullScreen)
            webEngineView.fullScreenCancelled()
    }

    WebEngineView {
        id: webEngineView
        // ...
    }
}
</db:programlisting>
<db:para>This method was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#isFullScreen-prop">isFullScreen</db:link></db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#fullScreenRequested-signal">fullScreenRequested</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="goBack-method">
<db:title>void goBack()</db:title>
<db:para>Go backward within the browser's session history, if possible. This function is equivalent to the <db:code>window.history.back()</db:code> DOM method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#canGoBack-prop">canGoBack</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="goBackOrForward-method">
<db:title>[since QtWebEngine 1.1] void goBackOrForward(int <db:emphasis>offset</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">offset</db:code> is positive, goes forward the specified number of offset pages in the current session history. If offset is negative, it goes back. If the offset is invalid, the page is not changed.</db:para>
<db:para>This method was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#goBack-method">goBack</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#goForward-method">goForward</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="goForward-method">
<db:title>void goForward()</db:title>
<db:para>Go forward within the browser's session history, if possible. This function is equivalent to the <db:code>window.history.forward()</db:code> DOM method.</db:para>
</db:section>
<db:section xml:id="grantFeaturePermission-method">
<db:title>[since QtWebEngine 1.1] void grantFeaturePermission(url <db:emphasis>securityOrigin</db:emphasis>, Feature <db:emphasis>feature</db:emphasis>, bool <db:emphasis>granted</db:emphasis>)</db:title>
<db:para>Sets or unsets the permission, depending on <db:code role="parameter">granted</db:code>, for the web site identified by <db:code role="parameter">securityOrigin</db:code> to use <db:code role="parameter">feature</db:code>.</db:para>
<db:para>This method was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#featurePermissionRequested-signal">featurePermissionRequested</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadHtml-method">
<db:title>void loadHtml(string <db:emphasis>html</db:emphasis>, url <db:emphasis>baseUrl</db:emphasis>)</db:title>
<db:para>Loads the specified <db:code role="parameter">html</db:code> as the content of the web view.</db:para>
<db:para>This method offers a lower-level alternative to the <db:code>url</db:code> property, which references HTML pages via URL.</db:para>
<db:para>External objects, such as stylesheets or images referenced in the HTML document, should be located relative to <db:code role="parameter">baseUrl</db:code>. For external objects to be loaded, <db:code>baseUrl</db:code> cannot be empty. For example, if <db:code role="parameter">html</db:code> is retrieved from <db:code>http://www.example.com/documents/overview.html</db:code>, which is the base URL, then an image referenced with the relative URL, <db:code>diagram.png</db:code>, should be at <db:code>http://www.example.com/documents/diagram.png</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#url-prop">url</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="printToPdf-method">
<db:title>[since QtWebEngine 1.3] void printToPdf(const string <db:emphasis>filePath</db:emphasis>, PrintedPageSizeId <db:emphasis>pageSizeId</db:emphasis>, PrintedPageOrientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:para>Prints the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link>'s current content to a PDF document and stores it under <db:code role="parameter">filePath</db:code>. The document's size will be determined by the value of <db:code role="parameter">pageSizeId</db:code> and its orientation will be determined using <db:code role="parameter">orientation</db:code>.</db:para>
<db:para>This method issues an asynchronous request for printing the web page into a PDF and returns immediately. To be informed about the result of the request, connect to the signal <db:link xlink:href="qml-qtwebengine-webengineview.xml#pdfPrintingFinished-signal">pdfPrintingFinished</db:link>().</db:para>
<db:para>If you leave out <db:code role="parameter">pageSizeId</db:code>, it defaults to <db:code>A4</db:code>. If you leave out <db:code role="parameter">orientation</db:code>, it defaults to <db:code>Portrait</db:code>.</db:para>
<db:para>This method was introduced in QtWebEngine 1.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#pdfPrintingFinished-signal">pdfPrintingFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="printToPdf-method-1">
<db:title>[since QtWebEngine 1.3] void printToPdf(variant <db:emphasis>resultCallback</db:emphasis>, PrintedPageSizeId <db:emphasis>pageSizeId</db:emphasis>, PrintedPageOrientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:para>Prints the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link>'s current content to a PDF document and returns it in a byte array. The document's size will be determined by the value of <db:code role="parameter">pageSizeId</db:code> and its orientation will be determined using <db:code role="parameter">orientation</db:code>.</db:para>
<db:para>The <db:code role="parameter">resultCallback</db:code> must take a string parameter. This string will contain the document's data upon successful printing and an empty string otherwise.</db:para>
<db:para>If you leave out <db:code role="parameter">pageSizeId</db:code>, it defaults to <db:code>A4</db:code>. If you leave out <db:code role="parameter">orientation</db:code>, it defaults to <db:code>Portrait</db:code>.</db:para>
<db:para>This method was introduced in QtWebEngine 1.3.</db:para>
</db:section>
<db:section xml:id="reload-method">
<db:title>void reload()</db:title>
<db:para>Reloads the current page. This function is equivalent to the <db:code>window.location.reload()</db:code> DOM method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#reloadAndBypassCache-method">reloadAndBypassCache</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reloadAndBypassCache-method">
<db:title>[since QtWebEngine 1.1] void reloadAndBypassCache()</db:title>
<db:para>Reloads the current page, ignoring any cached content.</db:para>
<db:para>This method was introduced in QtWebEngine 1.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#reload-method">reload</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replaceMisspelledWord-method">
<db:title>[since QtWebEngine 1.3] void replaceMisspelledWord(const QString &amp;<db:emphasis>replacement</db:emphasis>)</db:title>
<db:para>Replace the current misspelled word with <db:code role="parameter">replacement</db:code>.</db:para>
<db:para>This method was introduced in QtWebEngine 1.3.</db:para>
</db:section>
<db:section xml:id="runJavaScript-method">
<db:title>void runJavaScript(string <db:emphasis>script</db:emphasis>, variant <db:emphasis>callback</db:emphasis>)</db:title>
<db:para>Runs the specified <db:code role="parameter">script</db:code> in the content of the web view.</db:para>
<db:para>The <db:code role="parameter">callback</db:code> parameter is optional. If a callback function is provided, it will be invoked after the script finishes running.</db:para>
<db:programlisting language="cpp">runJavaScript(&quot;document.title&quot;, function(result) { console.log(result); });
</db:programlisting>
<db:para>Only plain data can be returned from JavaScript as the result value. Supported data types include all of the JSON data types as well as, for example, <db:code>Date</db:code> and <db:code>ArrayBuffer</db:code>. Unsupported data types include, for example, <db:code>Function</db:code> and <db:code>Promise</db:code>.</db:para>
<db:para>The script will run in the same <db:emphasis>world</db:emphasis> as other scripts that are part of the loaded site.</db:para>
<db:warning>
<db:para>Do not execute lengthy routines in the callback function, because it might block the rendering of the web content.</db:para>
</db:warning>
<db:para>For more information about injecting scripts, see <db:link xlink:href="qtwebengine-overview.xml#script-injection">Script Injection</db:link>. For an alternative way to inject scripts, see <db:link xlink:href="qml-qtwebengine-webengineview.xml#userScripts-prop">WebEngineView::userScripts</db:link>.</db:para>
</db:section>
<db:section xml:id="setActiveFocusOnPress-method">
<db:title>[since QtWebEngine 1.2] void setActiveFocusOnPress(bool <db:emphasis>arg</db:emphasis>)</db:title>
<db:para>Sets active focus to a clicked web engine view if <db:code role="parameter">arg</db:code> is <db:code>true</db:code>. By setting it to <db:code>false</db:code>, a web engine view can be used to create a UI element that should not get focus. This can be useful in a hybrid UI.</db:para>
<db:para>This method was introduced in QtWebEngine 1.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#activeFocusOnPress-prop">activeFocusOnPress</db:link></db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#activeFocusOnPressChanged-signal">activeFocusOnPressChanged</db:link></db:member>
<db:member><db:link xlink:href="qml-qtwebengine-webenginesettings.xml#focusOnNavigationEnabled-prop">WebEngineSettings::focusOnNavigationEnabled</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop-method">
<db:title>void stop()</db:title>
<db:para>Stops loading the current page.</db:para>
</db:section>
<db:section xml:id="triggerWebAction-method">
<db:title>[since QtWebEngine 1.2] void triggerWebAction(WebAction <db:emphasis>action</db:emphasis>)</db:title>
<db:para>Triggers the web action <db:code role="parameter">action</db:code>.</db:para>
<db:para>This method was introduced in QtWebEngine 1.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtwebengine-webengineview.xml#WebAction-prop">WebAction</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
