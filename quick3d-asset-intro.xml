<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D Introduction with glTF Assets</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick 3D Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The <db:link xlink:href="qtquick3d-intro-example.xml">Qt Quick 3D - Introduction</db:link> example provides a quick introduction to creating QML-based applications with Qt Quick 3D, but it does so using only built-in primitives, such as spheres and cylinders. This page provides an introduction using <db:link xlink:href="https://en.wikipedia.org/wiki/GlTF#glTF_2.0">glTF 2.0</db:link> assets, using some of the models from the <db:link xlink:href="https://github.com/KhronosGroup/glTF-Sample-Models">Khronos glTF Sample Models repository</db:link>.</db:para>
<db:section xml:id="our-skeleton-application">
<db:title>Our Skeleton Application</db:title>
<db:para>Let's start with the following application. This code snippet is runnable as-is with the <db:code>qml</db:code> command-line tool. The result is a very green 3D view with nothing else in it.</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick3D
import QtQuick3D.Helpers

Item {
    width: 1280
    height: 720

    View3D {
        anchors.fill: parent

        environment: SceneEnvironment {
            backgroundMode: SceneEnvironment.Color
            clearColor: &quot;green&quot;
        }

        PerspectiveCamera {
            id: camera
        }

        WasdController {
            controlledObject: camera
        }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_empty.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="importing-an-asset">
<db:title>Importing an Asset</db:title>
<db:para>We are going to use two glTF 2.0 models from the Sample Models repository: Sponza and Suzanne.</db:para>
<db:para>These models typically come with a number of texture maps and the mesh (geometry) data stored in a separate binary file, in addition to the .gltf file:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_sponza_dir.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>How do we get all this into our Qt Quick 3D scene?</db:para>
<db:para>There are a number of options:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Generate QML components that can be instantiated in the scene. The command-line tool to perform this conversion is the <db:link xlink:href="qtquick3d-tool-balsam.xml">Balsam</db:link> tool. Besides generating a .qml file, that is effectively a subscene, this also repacks the mesh (geometry) data into an optimized, fast-to-load format, and copies the texture map image files as well.</db:para>
</db:listitem>
<db:listitem>
<db:para>Perform the same using <db:code>balsamui</db:code>, a GUI frontend for <db:link xlink:href="qtquick3d-tool-balsam.xml">Balsam</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>If using <db:link xlink:href="https://www.qt.io/product/ui-design-tools">Qt Design Studio</db:link>, the asset import process is integrated into the visual design tools. Importing can be triggered, for example, by dragging and dropping the .gltf file onto the appropriate panel.</db:para>
</db:listitem>
<db:listitem>
<db:para>For glTF 2.0 assets in particular, there is a runtime option as well: the <db:link xlink:href="qml-qtquick3d-assetutils-runtimeloader.xml">RuntimeLoader</db:link> type. This allows loading a .gltf file (and the associated binary and texture data files) at runtime, without doing any pre-processing via tools such as <db:link xlink:href="qtquick3d-tool-balsam.xml">Balsam</db:link>. This is very handy in applications that wish to open and load user-provided assets. On the other hand, this approach is significantly less efficient when it comes to performance. Therefore, we will not be focusing on this approach in this introduction. Check the <db:link xlink:href="qtquick3d-runtimeloader-example.xml">Qt Quick 3D - RuntimeLoader Example</db:link> for an example of this approach.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Both the <db:code>balsam</db:code> and <db:code>balsamui</db:code> applications are shipped with Qt, and should be present in the directory with other similar executable tools, assuming Qt Quick 3D is installed or built. In many cases, running <db:link xlink:href="qtquick3d-tool-balsam.xml">balsam</db:link> from the command-line on the .gltf file is sufficient, without having to specify any additional arguments. It is worth being aware however of the many command-line, or interactive if using <db:code>balsamui</db:code> or Qt Design Studio, options. For example, when working with <db:link xlink:href="quick3d-lightmap.xml">baked lightmaps to provide static global illumination</db:link>, it is likely that one will want to pass <db:code>--generateLightmapUV</db:code> to get the additional lightmap UV channel generated at asset import time, instead of performing this potentially consuming process at run-time. Similarly, <db:code>--generateMeshLevelsOfDetail</db:code> is essential when it is desirable to have simplified versions of the meshes generated in order to have <db:link xlink:href="qtquick3d-lod.xml">automatic LOD</db:link> enabled in the scene. Other options allow generating missing data (e.g. <db:code>--generateNormals</db:code>) and performing various optimizations.</db:para>
<db:para>In <db:code>balsamui</db:code> the command-line options are mapped to interactive elements:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_balsamui_options.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="importing-via-balsam">
<db:title>Importing via balsam</db:title>
<db:para>Let's get started! Assuming that the <db:link xlink:href="https://github.com/KhronosGroup/glTF-Sample-Models">https://github.com/KhronosGroup/glTF-Sample-Models</db:link> <db:code>git</db:code> repository is checked out somewhere, we can simply run balsam from our example application directory, by specifying an absolute path to the .gltf files:</db:para>
<db:para><db:code>balsam c:\work\glTF-Sample-Models\2.0\Sponza\glTF\Sponza.gltf</db:code></db:para>
<db:para>This gives us a <db:code>Sponza.qml</db:code>, a <db:code>.mesh</db:code> file under the <db:code>meshes</db:code> subdirectory, and the texture maps copied under <db:code>maps</db:code>.</db:para>
<db:note>
<db:para>This qml file is not runnable on its own. It is a <db:emphasis>component</db:emphasis>, that should be instantiated within a 3D scene associated with a <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>.</db:para>
</db:note>
<db:para>Our project structure is very simple here, as the asset qml files live right next to our main .qml scene. This allows us to simply instantiate the Sponza type using the <db:link xlink:href="qtqml-documents-topic.xml">standard QML component system</db:link>. (at run-time this will then look for Sponza.qml in the filesystem)</db:para>
<db:para>Just adding the model (subscene) is pointless however, since by default the materials feature the full <db:link xlink:href="quick3d-pbr.xml">PBR lighting calculations</db:link>, so nothing is shown from our scene without a light such as <db:link xlink:href="qml-qtquick3d-directionallight.xml">DirectionalLight</db:link>, <db:link xlink:href="qml-qtquick3d-pointlight.xml">PointLight</db:link>, or <db:link xlink:href="qml-qtquick3d-spotlight.xml">SpotLight</db:link>, or having <db:link xlink:href="quick3d-asset-conditioning-ibl.xml">image-based lighting</db:link> enabled via <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#lightProbe-prop">the environment</db:link>.</db:para>
<db:para>For now, we choose to add a <db:link xlink:href="qml-qtquick3d-directionallight.xml">DirectionalLight</db:link> with the default settings. (meaning the color is <db:code>white</db:code>, and the light emits in the direction of the Z axis)</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick3D
import QtQuick3D.Helpers

Item {
    width: 1280
    height: 720

    View3D {
        anchors.fill: parent

        environment: SceneEnvironment {
            backgroundMode: SceneEnvironment.Color
            clearColor: &quot;green&quot;
        }

        PerspectiveCamera {
            id: camera
        }

        DirectionalLight {
        }

        Sponza {
        }

        WasdController {
            controlledObject: camera
        }
    }
}
</db:programlisting>
<db:para>Running this with the <db:code>qml</db:code> tool will load and run, but the scene is all empty by default since the Sponza model is behind the camera. The scale is also not ideal, e.g. moving around with WASD keys and the mouse (enabled by the <db:link xlink:href="qml-qtquick3d-helpers-wasdcontroller.xml">WasdController</db:link>) does not feel right.</db:para>
<db:para>To remedy this, we scale the Sponza model (subscene) by <db:code>100</db:code> along the X, Y, and Z axis. In addition, the camera's starting Y position is bumped to 100.</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick3D
import QtQuick3D.Helpers

Item {
    width: 1280
    height: 720

    View3D {
        anchors.fill: parent

        environment: SceneEnvironment {
            backgroundMode: SceneEnvironment.Color
            clearColor: &quot;green&quot;
        }

        PerspectiveCamera {
            id: camera
            y: 100
        }

        DirectionalLight {
        }

        Sponza {
            scale: Qt.vector3d(100, 100, 100)
        }

        WasdController {
            controlledObject: camera
        }
    }
}
</db:programlisting>
<db:para>Running this gives us:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_sponza_first.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>With the mouse and the WASDRF keys we can move around:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_sponza_second.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_sponza_out.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para>We mentioned <db:code>subscene</db:code> a number of times above as an alternative to &quot;model&quot;. Why is this? While not obvious with the Sponza asset, which in its glTF form is a single model with 103 submeshes, mapping to a single <db:link xlink:href="qml-qtquick3d-model.xml">Model</db:link> object with 103 elements in its <db:link xlink:href="qml-qtquick3d-model.xml#materials-prop">materials list</db:link>, an asset can contain any number of <db:link xlink:href="qml-qtquick3d-model.xml">models</db:link>, each with multiple submeshes and associated materials. These Models can form parent-child relationships and can be combined with additional <db:link xlink:href="qml-qtquick3d-node.xml">nodes</db:link> to perform transforms such as translate, rotate, or scale. It is therefore more appropriate to look at the imported asset as a complete subscene, an arbitrary tree of <db:link xlink:href="qml-qtquick3d-node.xml">nodes</db:link>, even if the rendered result is visually perceived as a single model. Open the generated Sponza.qml, or any other QML file generated from such assets, in a plain text editor to get an impression of the structure (which naturally always depends on how the source asset, in this case the glTF file, was designed).</db:para>
</db:note>
</db:section>
<db:section xml:id="importing-via-balsamui">
<db:title>Importing via balsamui</db:title>
<db:para>For our second model, let's use the graphical user interface of <db:code>balsam</db:code> instead.</db:para>
<db:para>Running <db:code>balsamui</db:code> opens the tool:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_balsamui_startup.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>Let's import the <db:link xlink:href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/Suzanne">Suzanne</db:link> model. This is a simpler model with two texture maps.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_balsamui_open.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>As there is no need for any additional configuration options, we can just Convert. The result is the same as running <db:code>balsam</db:code>: a Suzanne.qml and some additional files generated in the specific output directory.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_balsamui_convert.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>From this point on, working with the generated assets is the same as in the previous section.</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick3D
import QtQuick3D.Helpers

Item {
    width: 1280
    height: 720

    View3D {
        anchors.fill: parent

        environment: SceneEnvironment {
            backgroundMode: SceneEnvironment.Color
            clearColor: &quot;green&quot;
        }

        PerspectiveCamera {
            id: camera
            y: 100
        }

        DirectionalLight {
        }

        Sponza {
            scale: Qt.vector3d(100, 100, 100)
        }

        Suzanne {
            y: 100
            scale: Qt.vector3d(50, 50, 50)
            eulerRotation.y: -90
        }

        WasdController {
            controlledObject: camera
        }
    }
}
</db:programlisting>
<db:para>Again, a scale is applied to the instantiated Suzanne node, and the Y position is altered a bit so that the model does not end up in the floor of the Sponza building.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_suzanne_first.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>All properties can be changed, bound to, and animated, just like with Qt Quick. For example, let's apply a continuous rotation to our Suzanne model:</db:para>
<db:programlisting language="qml">Suzanne {
    y: 100
    scale: Qt.vector3d(50, 50, 50)
    NumberAnimation on eulerRotation.y {
        from: 0
        to: 360
        duration: 3000
        loops: Animation.Infinite
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="making-it-look-better">
<db:title>Making it Look Better</db:title>
<db:section xml:id="more-light">
<db:title>More light</db:title>
<db:para>Now, our scene is a bit dark. Let's add another light. This time a <db:link xlink:href="qml-qtquick3d-pointlight.xml">PointLight</db:link>, and one that casts a shadow.</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick3D
import QtQuick3D.Helpers

Item {
    width: 1280
    height: 720

    View3D {
        anchors.fill: parent

        environment: SceneEnvironment {
            backgroundMode: SceneEnvironment.Color
            clearColor: &quot;green&quot;
        }

        PerspectiveCamera {
            id: camera
            y: 100
        }

        DirectionalLight {
        }

        Sponza {
            scale: Qt.vector3d(100, 100, 100)
        }

        PointLight {
            y: 200
            color: &quot;#d9c62b&quot;
            brightness: 5
            castsShadow: true
            shadowFactor: 75
        }

        Suzanne {
            y: 100
            scale: Qt.vector3d(50, 50, 50)
            NumberAnimation on eulerRotation.y {
                from: 0
                to: 360
                duration: 3000
                loops: Animation.Infinite
            }
        }

        WasdController {
            controlledObject: camera
        }
    }
}
</db:programlisting>
<db:para>Launching this scene and moving the camera around a bit reveals that this is indeed starting to look better than before:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_suzanne_morelight.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="light-debugging">
<db:title>Light debugging</db:title>
<db:para>The <db:link xlink:href="qml-qtquick3d-pointlight.xml">PointLight</db:link> is placed slightly above the Suzanne model. When designing the scene using visual tools, such as Qt Design Studio, this is obvious, but when developing without any design tools it may become handy to be able to quickly visualize the location of <db:link xlink:href="qml-qtquick3d-light.xml">lights</db:link> and other <db:link xlink:href="qml-qtquick3d-node.xml">nodes</db:link>.</db:para>
<db:para>This we can do by adding a child node, a <db:link xlink:href="qml-qtquick3d-model.xml">Model</db:link> to the <db:link xlink:href="qml-qtquick3d-pointlight.xml">PointLight</db:link>. The position of the child node is relative to the parent, so the default <db:code>(0, 0, 0)</db:code> is effectively the position of the <db:link xlink:href="qml-qtquick3d-pointlight.xml">PointLight</db:link> in this case. Enclosing the light within some geometry (the built-in cube in this case) is not a problem for the standard real-time lighting calculations since this system has no concept of occlusion, meaning the light has no problems with traveling through &quot;walls&quot;. If we used <db:link xlink:href="quick3d-lightmap.xml">pre-baked lightmaps</db:link>, where lighting is calculated using raytracing, that would be a different story. In that case we would need to make sure the cube is not blocking the light, perhaps by moving our debug cube a bit above the light.</db:para>
<db:programlisting language="qml">PointLight {
    y: 200
    color: &quot;#d9c62b&quot;
    brightness: 5
    castsShadow: true
    shadowFactor: 75
    Model {
        source: &quot;#Cube&quot;
        scale: Qt.vector3d(0.01, 0.01, 0.01)
        materials: PrincipledMaterial {
            lighting: PrincipledMaterial.NoLighting
        }
    }
}
</db:programlisting>
<db:para>Another trick we use here is turning off lighting for the material used with the cube. It will just appear using the default base color (white), without being affected by lighting. This is handy for objects used for debugging and visualizing purposes.</db:para>
<db:para>The result, note the small, white cube appearing, visualizing the position of the <db:link xlink:href="qml-qtquick3d-pointlight.xml">PointLight</db:link>:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_suzanne_cube.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="skybox-and-image-based-lighting">
<db:title>Skybox and image-based lighting</db:title>
<db:para>Another obvious improvement is doing something about the background. That green clear color is not quite ideal. How about some environment that also contributes to lighting?</db:para>
<db:para>As we do not necessarily have suitable HDRI panorama image available, let's use a procedurally generated high dynamic range sky image. This is easy to do with the help of <db:link xlink:href="qml-qtquick3d-helpers-proceduralskytexturedata.xml">ProceduralSkyTextureData</db:link> and <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link>'s support for non-file based, dynamically generated image data. Instead of specifying <db:link xlink:href="qml-qtquick3d-texture.xml#source-prop">source</db:link>, we rather use the <db:link xlink:href="qml-qtquick3d-texture.xml#textureData-prop">textureData</db:link> property.</db:para>
<db:programlisting language="qml">environment: SceneEnvironment {
    backgroundMode: SceneEnvironment.SkyBox
    lightProbe: Texture {
        textureData: ProceduralSkyTextureData {
        }
    }
}
</db:programlisting>
<db:note>
<db:para>The example code prefers defining objects inline. This is not mandatory, the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link> or <db:link xlink:href="qml-qtquick3d-helpers-proceduralskytexturedata.xml">ProceduralSkyTextureData</db:link> objects could have also been defined elsewhere in the object tree, and then referenced by <db:code>id</db:code>.</db:para>
</db:note>
<db:para>As a result, we have both a skybox and improved lighting. (the former due to the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#backgroundMode-prop">backgroundMode</db:link> being set to SkyBox and <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#lightProbe-prop">light probe</db:link> being set to a valid <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link>; the latter due to <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#lightProbe-prop">light probe</db:link> being set to a valid <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link>)</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_sponza_ibl.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_sponza_ibl_2.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:section>
</db:section>
<db:section xml:id="basic-performance-investigations">
<db:title>Basic Performance Investigations</db:title>
<db:para>To get some basic insights into the resource and performance aspects of the scene, it is a good idea to add a way to show an interactive <db:link xlink:href="qml-qtquick3d-helpers-debugview.xml">DebugView</db:link> item early on in the development process. Here we choose to add a <db:link xlink:href="qml-qtquick-controls-button.xml">Button</db:link> that toggles the <db:link xlink:href="qml-qtquick3d-helpers-debugview.xml">DebugView</db:link>, both anchored in the top-right corner.</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Controls
import QtQuick3D
import QtQuick3D.Helpers

Item {
    width: 1280
    height: 720

    View3D {
        id: view3D
        anchors.fill: parent

        environment: SceneEnvironment {
            backgroundMode: SceneEnvironment.SkyBox
            lightProbe: Texture {
                textureData: ProceduralSkyTextureData {
                }
            }
        }

        PerspectiveCamera {
            id: camera
            y: 100
        }

        DirectionalLight {
        }

        Sponza {
            scale: Qt.vector3d(100, 100, 100)
        }

        PointLight {
            y: 200
            color: &quot;#d9c62b&quot;
            brightness: 5
            castsShadow: true
            shadowFactor: 75
            Model {
                source: &quot;#Cube&quot;
                scale: Qt.vector3d(0.01, 0.01, 0.01)
                materials: PrincipledMaterial {
                    lighting: PrincipledMaterial.NoLighting
                }
            }
        }

        Suzanne {
            y: 100
            scale: Qt.vector3d(50, 50, 50)
            NumberAnimation on eulerRotation.y {
                from: 0
                to: 360
                duration: 3000
                loops: Animation.Infinite
            }
        }

        WasdController {
            controlledObject: camera
        }
    }

    Button {
        anchors.right: parent.right
        text: &quot;Toggle DebugView&quot;
        onClicked: debugView.visible = !debugView.visible
        DebugView {
            id: debugView
            source: view3D
            visible: false
            anchors.top: parent.bottom
            anchors.right: parent.right
        }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_suzanne_debugview.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This panel shows live timings, allows examining the live list of texture maps and meshes, and gives an insight into the render passes that need to be performed before the final color buffer can be rendered.</db:para>
<db:para>Due to making the <db:link xlink:href="qml-qtquick3d-pointlight.xml">PointLight</db:link> a shadow casting light, there are multiple render passes involved:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_suzanne_debugview_2.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>In the <db:code>Textures</db:code> section we see the texture maps from the Suzanne and Sponza assets (the latter has a lot of them), as well as the procedurally generated sky texture.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_suzanne_debugview_3.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:code>Models</db:code> page presents no surprises:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_suzanne_debugview_4.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>On the <db:code>Tools</db:code> page there are some interactive controls to toggle <db:link xlink:href="qml-qtquick3d-debugsettings.xml#wireframeEnabled-prop">wireframe mode</db:link> and various <db:link xlink:href="qml-qtquick3d-debugsettings.xml#materialOverride-prop">material overrides</db:link>.</db:para>
<db:para>Here with wireframe mode enabled and forcing rendering to only use the <db:link xlink:href="qml-qtquick3d-principledmaterial.xml#baseColor-prop">base color</db:link> component of the materials:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/assetintro_suzanne_override.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This concludes our tour of the basics of building a <db:link xlink:href="qtquick3d-index.xml">Qt Quick 3D</db:link> scene with imported assets.</db:para>
</db:section>
</db:article>
