<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Notifier</db:title>
<db:productname>QtAndroidExtras</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Android Extras Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates calling Java code from an Android application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/notification.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example demonstrates how to add a custom Java class to an Android application, and how to call into this using the JNI convenience APIs in the Qt Android Extras module. The application UI is created by using Qt Quick.</db:para>
<db:para>Click on either of the smiley faces to put a notification in the status area of the Android device.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="calling-java-methods-from-c-code">
<db:title>Calling Java Methods from C++ Code</db:title>
<db:para>We define a custom Java class called <db:code>NotificationClient</db:code> in the NotificationClient.java file:</db:para>
<db:programlisting language="cpp">package org.qtproject.example.notification;

import android.app.Notification;
import android.app.NotificationManager;
import android.content.Context;

public class NotificationClient extends org.qtproject.qt5.android.bindings.QtActivity
{
    private static NotificationManager m_notificationManager;
    private static Notification.Builder m_builder;
    private static NotificationClient m_instance;

    public NotificationClient()
    {
        m_instance = this;
    }

    public static void notify(String s)
    {
        if (m_notificationManager == null) {
            m_notificationManager = (NotificationManager)m_instance.getSystemService(Context.NOTIFICATION_SERVICE);
            m_builder = new Notification.Builder(m_instance);
            m_builder.setSmallIcon(R.drawable.icon);
            m_builder.setContentTitle(&quot;A message from Qt!&quot;);
        }

        m_builder.setContentText(s);
        m_notificationManager.notify(1, m_builder.build());
    }
}

</db:programlisting>
<db:para>In the NotificationClient C++ class header file, notificationclient.h, we declare a simple C++ API to display notifications on an Android device. It consists of a single string property, <db:code>notification</db:code>, and a slot, <db:code>updateAndroidNotification()</db:code>, that calls the Java code:</db:para>
<db:programlisting language="cpp">    Q_PROPERTY(QString notification READ notification WRITE setNotification NOTIFY notificationChanged)
    ...
private slots:
    void updateAndroidNotification();

</db:programlisting>
<db:para>A NotificationClient object is exposed to the QML in the main source file, main.cpp:</db:para>
<db:programlisting language="cpp">    QQuickView view;

    NotificationClient *notificationClient = new NotificationClient(&amp;view);
    view.engine()-&gt;rootContext()-&gt;setContextProperty(QLatin1String(&quot;notificationClient&quot;),
                                                     notificationClient);
</db:programlisting>
<db:para>In the NotificationClient C++ class source file, notificationclient.cpp, we import the QtAndroidJniObject class to be able to use its functions:</db:para>
<db:programlisting language="cpp">#include &lt;QtAndroidExtras/QAndroidJniObject&gt;

</db:programlisting>
<db:para>We connect the <db:code>notificationChanged()</db:code> signal to the <db:code>updateAndroidNotification()</db:code> slot to update the notification text when the <db:code>notification</db:code> property changes:</db:para>
<db:programlisting language="cpp">NotificationClient::NotificationClient(QObject *parent)
    : QObject(parent)
{
    connect(this, SIGNAL(notificationChanged()), this, SLOT(updateAndroidNotification()));
}

</db:programlisting>
<db:para>The <db:code>NotificationClient::updateAndroidNotification()</db:code> function calls the Java method. We construct a Java string from the <db:code>notification</db:code> string property:</db:para>
<db:programlisting language="cpp">void NotificationClient::updateAndroidNotification()
{
    QAndroidJniObject javaNotification = QAndroidJniObject::fromString(m_notification);
</db:programlisting>
<db:para>And pass the string object as a parameter to the Java <db:code>notify()</db:code> method. Note that we must supply the signature ourselves:</db:para>
<db:programlisting language="cpp">    QAndroidJniObject::callStaticMethod&lt;void&gt;(&quot;org/qtproject/example/notification/NotificationClient&quot;,
                                       &quot;notify&quot;,
                                       &quot;(Ljava/lang/String;)V&quot;,
                                       javaNotification.object&lt;jstring&gt;());
}

</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="notification/android-sources/AndroidManifest.xml">notification/android-sources/AndroidManifest.xml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="notification/android-sources/src/org/qtproject/example/notification/NotificationClient.java">notification/android-sources/src/org/qtproject/example/notification/NotificationClient.java</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="notification/main.cpp">notification/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="notification/main.qrc">notification/main.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="notification/notification.pro">notification/notification.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="notification/notificationclient.cpp">notification/notificationclient.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="notification/notificationclient.h">notification/notificationclient.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="notification/qml/main.qml">notification/qml/main.qml</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="notification/android-sources/res/drawable/icon.png">notification/android-sources/res/drawable/icon.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="notification/images/happy.png">notification/images/happy.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="notification/images/sad.png">notification/images/sad.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="android-support.xml">Qt for Android</db:link></db:member>
<db:member><db:link xlink:href="qtandroidextras-index.xml">Qt Android Extras</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section></db:section></db:article>
