<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Parsing and displaying CBOR data</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A demonstration of how to parse files in CBOR format.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example shows how to use the <db:link xlink:href="qcborstreamreader.xml">QCborStreamReader</db:link> class directly to parse CBOR content. The cbordump program reads content in CBOR format from files or standard input and dumps the decoded content to stdout in a human-readable format. It can output in CBOR diagnostic notation (which is similar to JSON), or it can produce a verbose output where each byte input is displayed with its encoding beside it.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/cbordump.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="the-cbordumper-class">
<db:title>The CborDumper Class</db:title>
<db:para>The CborDumper class contains a <db:link xlink:href="qcborstreamreader.xml">QCborStreamReader</db:link> object that is initialized using the <db:link xlink:href="qfile.xml">QFile</db:link> object argument passed to the CborDumper constructor. Based on the arguments the dump function calls either dumpOne() or dumpOneDetailed() to dump the contents to standard output,</db:para>
<db:programlisting language="cpp">struct CborDumper
{
    enum DumpOption { ShowCompact = 0x01, ShowWidthIndicators = 0x02, ShowAnnotated = 0x04 };
    Q_DECLARE_FLAGS(DumpOptions, DumpOption)

    CborDumper(QFile *f, DumpOptions opts_);
    QCborError dump();

private:
    void dumpOne(int nestingLevel);
    void dumpOneDetailed(int nestingLevel);

    void printByteArray(const QByteArray &amp;amp;ba);
    void printWidthIndicator(quint64 value, char space = '\0');
    void printStringWidthIndicator(quint64 value);

    QCborStreamReader reader;
    QByteArray data;
    QStack&amp;lt;quint8&amp;gt; byteArrayEncoding;
    qint64 offset = 0;
    DumpOptions opts;
};
</db:programlisting>
<db:section xml:id="the-dumpone-function">
<db:title>The dumpOne() Function</db:title>
<db:para>Switching on <db:link xlink:href="qcborstreamreader.xml#type">QCborStreamReader::type</db:link>() enables printing appropriate to the type of the current value in the stream. If the type is an array or map, the value's content is iterated over, and for each entry the dumpOne() function is called recursively with a higher indentation argument. If the type is a tag, it is printed out and dumpOne() is called once without increasing the indentation argument.</db:para>
</db:section>
<db:section xml:id="the-dumponedetailed-function">
<db:title>The dumpOneDetailed() Function</db:title>
<db:para>This function dumps out both the incoming bytes and the decoded contents on the same line. It uses lambda functions to print out the bytes and decoded content, but otherwise has a similar structure as dumpOne().</db:para>
</db:section>
</db:section>
<db:section xml:id="cbortagdescription">
<db:title>CborTagDescription</db:title>
<db:para>The tagDescriptions table, describing the CBOR tags available, is automatically generated from an XML file available from the iana.org website. When dumpOneDetailed() reports a tag, it uses its description from this table.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/corelib/serialization/cbordump?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborstreamreader.xml">QCborStreamReader</db:link></db:member>
<db:member><db:link xlink:href="cbor.xml">CBOR Support in Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
