<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QPdfWriter Class</db:title>
<db:productname>QtGui</db:productname>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpdfwriter.xml">QPdfWriter</db:link> class is a class to generate PDFs that can be used as a paint device.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPdfWriter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qpagedpaintdevice.xml" xlink:role="class">QPagedPaintDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPdfWriter is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qpdfwriter.xml">QPdfWriter</db:link> generates PDF out of a series of drawing commands using <db:link xlink:href="qpainter.xml">QPainter</db:link>. The <db:link xlink:href="qpdfwriter.xml#newPage">newPage</db:link>() method can be used to create several pages.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPdfWriter">
<db:title>[explicit] QPdfWriter::QPdfWriter(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Constructs a PDF writer that will write the pdf to <db:code role="parameter">device</db:code>.</db:para>
</db:section>
<db:section xml:id="QPdfWriter-1">
<db:title>[explicit] QPdfWriter::QPdfWriter(const QString &amp;<db:emphasis>filename</db:emphasis>)</db:title>
<db:para>Constructs a PDF writer that will write the pdf to <db:code role="parameter">filename</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPdfWriter">
<db:title>[virtual noexcept] QPdfWriter::~QPdfWriter()</db:title>
<db:para>Destroys the pdf writer.</db:para>
</db:section>
<db:section xml:id="creator">
<db:title>QString QPdfWriter::creator() const</db:title>
<db:para>Returns the creator of the document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setCreator">setCreator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="newPage">
<db:title>[override virtual] bool QPdfWriter::newPage()</db:title>
<db:para>Reimplements: <db:link xlink:href="qpagedpaintdevice.xml#newPage" role="function">QPagedPaintDevice::newPage()</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEngine">
<db:title>[override virtual protected] QPaintEngine *QPdfWriter::paintEngine() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintdevice.xml#paintEngine" role="function">QPaintDevice::paintEngine() const</db:link>.</db:para>
</db:section>
<db:section xml:id="setCreator">
<db:title>void QPdfWriter::setCreator(const QString &amp;<db:emphasis>creator</db:emphasis>)</db:title>
<db:para>Sets the creator of the document to <db:code role="parameter">creator</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#creator">creator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMargins">
<db:title>[override virtual] void QPdfWriter::setMargins(const QPagedPaintDevice::Margins &amp;<db:emphasis>m</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpagedpaintdevice.xml#setMargins" role="function">QPagedPaintDevice::setMargins(const QPagedPaintDevice::Margins &amp;margins)</db:link>.</db:para>
</db:section>
<db:section xml:id="setPageSize">
<db:title>[override virtual] void QPdfWriter::setPageSize(QPagedPaintDevice::PageSize <db:emphasis>size</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpagedpaintdevice.xml#setPageSize" role="function">QPagedPaintDevice::setPageSize(QPagedPaintDevice::PageSize size)</db:link>.</db:para>
</db:section>
<db:section xml:id="setPageSizeMM">
<db:title>[override virtual] void QPdfWriter::setPageSizeMM(const QSizeF &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qpagedpaintdevice.xml#setPageSizeMM" role="function">QPagedPaintDevice::setPageSizeMM(const QSizeF &amp;size)</db:link>.</db:para>
</db:section>
<db:section xml:id="setTitle">
<db:title>void QPdfWriter::setTitle(const QString &amp;<db:emphasis>title</db:emphasis>)</db:title>
<db:para>Sets the title of the document being created to <db:code role="parameter">title</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#title">title</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title">
<db:title>QString QPdfWriter::title() const</db:title>
<db:para>Returns the title of the document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setTitle">setTitle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
