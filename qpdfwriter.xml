<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QPdfWriter Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpdfwriter.xml">QPdfWriter</db:link> class is a class to generate PDFs that can be used as a paint device.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPdfWriter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qpagedpaintdevice.xml" xlink:role="class">QPagedPaintDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPdfWriter is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qpdfwriter.xml">QPdfWriter</db:link> generates PDF out of a series of drawing commands using <db:link xlink:href="qpainter.xml">QPainter</db:link>. The <db:link xlink:href="qpdfwriter.xml#newPage">newPage</db:link>() method can be used to create several pages.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPdfWriter">
<db:title>[explicit] QPdfWriter::QPdfWriter(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Constructs a PDF writer that will write the pdf to <db:code role="parameter">device</db:code>.</db:para>
</db:section>
<db:section xml:id="QPdfWriter-1">
<db:title>[explicit] QPdfWriter::QPdfWriter(const QString &amp;<db:emphasis>filename</db:emphasis>)</db:title>
<db:para>Constructs a PDF writer that will write the pdf to <db:code role="parameter">filename</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPdfWriter">
<db:title>[virtual noexcept] QPdfWriter::~QPdfWriter()</db:title>
<db:para>Destroys the pdf writer.</db:para>
</db:section>
<db:section xml:id="creator">
<db:title>QString QPdfWriter::creator() const</db:title>
<db:para>Returns the creator of the document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setCreator">setCreator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="newPage">
<db:title>[override virtual] bool QPdfWriter::newPage()</db:title>
<db:para>Reimplements: <db:link xlink:href="qpagedpaintdevice.xml#newPage" role="function">QPagedPaintDevice::newPage()</db:link>.</db:para>
</db:section>
<db:section xml:id="pageLayout">
<db:title>[since 5.3] QPageLayout QPdfWriter::pageLayout() const</db:title>
<db:para>Returns the current page layout. Use this method to access the current <db:link xlink:href="qpagesize.xml">QPageSize</db:link>, <db:link xlink:href="qpagelayout.xml#Orientation-enum">QPageLayout::Orientation</db:link>, <db:link xlink:href="qmarginsf.xml">QMarginsF</db:link>, fullRect() and paintRect().</db:para>
<db:para>Note that you cannot use the setters on the returned object, you must either call the individual <db:link xlink:href="qpdfwriter.xml">QPdfWriter</db:link> methods or use <db:link xlink:href="qpdfwriter.xml#setPageLayout">setPageLayout</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setPageLayout">setPageLayout</db:link>()</db:member>
<db:member><db:link xlink:href="qpdfwriter.xml#setPageSize" role="deprecated">setPageSize</db:link>()</db:member>
<db:member><db:link xlink:href="qpdfwriter.xml#setPageOrientation">setPageOrientation</db:link>()</db:member>
<db:member><db:link xlink:href="qpdfwriter.xml#setPageMargins">setPageMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEngine">
<db:title>[override virtual protected] QPaintEngine *QPdfWriter::paintEngine() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintdevice.xml#paintEngine" role="function">QPaintDevice::paintEngine() const</db:link>.</db:para>
</db:section>
<db:section xml:id="resolution">
<db:title>[since 5.3] int QPdfWriter::resolution() const</db:title>
<db:para>Returns the resolution of the PDF in DPI.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setResolution">setResolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCreator">
<db:title>void QPdfWriter::setCreator(const QString &amp;<db:emphasis>creator</db:emphasis>)</db:title>
<db:para>Sets the creator of the document to <db:code role="parameter">creator</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#creator">creator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPageLayout">
<db:title>[since 5.3] bool QPdfWriter::setPageLayout(const QPageLayout &amp;<db:emphasis>newPageLayout</db:emphasis>)</db:title>
<db:para>Sets the PDF page layout to <db:code role="parameter">newPageLayout</db:code>.</db:para>
<db:para>You should call this before calling <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>(), or immediately before calling <db:link xlink:href="qpdfwriter.xml#newPage">newPage</db:link>() to apply the new page layout to a new page. You should not call any painting methods between a call to setPageLayout() and <db:link xlink:href="qpdfwriter.xml#newPage">newPage</db:link>() as the wrong paint metrics may be used.</db:para>
<db:para>Returns true if the page layout was successfully set to <db:code role="parameter">newPageLayout</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#pageLayout">pageLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPageMargins">
<db:title>[since 5.3] bool QPdfWriter::setPageMargins(const QMarginsF &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:para>Set the PDF page <db:code role="parameter">margins</db:code> in the current page layout units.</db:para>
<db:para>You should call this before calling <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>(), or immediately before calling <db:link xlink:href="qpdfwriter.xml#newPage">newPage</db:link>() to apply the new margins to a new page. You should not call any painting methods between a call to setPageMargins() and <db:link xlink:href="qpdfwriter.xml#newPage">newPage</db:link>() as the wrong paint metrics may be used.</db:para>
<db:para>To get the current page margins use <db:link xlink:href="qpdfwriter.xml#pageLayout">pageLayout</db:link>().pageMargins().</db:para>
<db:para>Returns true if the page margins were successfully set to <db:code role="parameter">margins</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#pageLayout">pageLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPageMargins-1">
<db:title>[since 5.3] bool QPdfWriter::setPageMargins(const QMarginsF &amp;<db:emphasis>margins</db:emphasis>, QPageLayout::Unit <db:emphasis>units</db:emphasis>)</db:title>
<db:para>Set the PDF page <db:code role="parameter">margins</db:code> defined in the given <db:code role="parameter">units</db:code>.</db:para>
<db:para>You should call this before calling <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>(), or immediately before calling <db:link xlink:href="qpdfwriter.xml#newPage">newPage</db:link>() to apply the new margins to a new page. You should not call any painting methods between a call to <db:link xlink:href="qpdfwriter.xml#setPageMargins">setPageMargins</db:link>() and <db:link xlink:href="qpdfwriter.xml#newPage">newPage</db:link>() as the wrong paint metrics may be used.</db:para>
<db:para>To get the current page margins use <db:link xlink:href="qpdfwriter.xml#pageLayout">pageLayout</db:link>().pageMargins().</db:para>
<db:para>Returns true if the page margins were successfully set to <db:code role="parameter">margins</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#pageLayout">pageLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPageOrientation">
<db:title>[since 5.3] bool QPdfWriter::setPageOrientation(QPageLayout::Orientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:para>Sets the PDF page <db:code role="parameter">orientation</db:code>.</db:para>
<db:para>The page orientation is used to define the orientation of the page size when obtaining the page rect.</db:para>
<db:para>You should call this before calling <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>(), or immediately before calling <db:link xlink:href="qpdfwriter.xml#newPage">newPage</db:link>() to apply the new orientation to a new page. You should not call any painting methods between a call to setPageOrientation() and <db:link xlink:href="qpdfwriter.xml#newPage">newPage</db:link>() as the wrong paint metrics may be used.</db:para>
<db:para>To get the current <db:link xlink:href="qpagelayout.xml#Orientation-enum">QPageLayout::Orientation</db:link> use <db:link xlink:href="qpdfwriter.xml#pageLayout">pageLayout</db:link>().pageOrientation().</db:para>
<db:para>Returns true if the page orientation was successfully set to <db:code role="parameter">orientation</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#pageLayout">pageLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPageSize-1">
<db:title>[since 5.3] bool QPdfWriter::setPageSize(const QPageSize &amp;<db:emphasis>pageSize</db:emphasis>)</db:title>
<db:para>Sets the PDF page size to <db:code role="parameter">pageSize</db:code>.</db:para>
<db:para>To get the current <db:link xlink:href="qpagesize.xml">QPageSize</db:link> use <db:link xlink:href="qpdfwriter.xml#pageLayout">pageLayout</db:link>().<db:link xlink:href="qpagedpaintdevice.xml#pageSize">pageSize</db:link>().</db:para>
<db:para>You should call this before calling <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>(), or immediately before calling <db:link xlink:href="qpdfwriter.xml#newPage">newPage</db:link>() to apply the new page size to a new page. You should not call any painting methods between a call to setPageSize() and <db:link xlink:href="qpdfwriter.xml#newPage">newPage</db:link>() as the wrong paint metrics may be used.</db:para>
<db:para>Returns true if the page size was successfully set to <db:code role="parameter">pageSize</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#pageLayout">pageLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResolution">
<db:title>[since 5.3] void QPdfWriter::setResolution(int <db:emphasis>resolution</db:emphasis>)</db:title>
<db:para>Sets the PDF <db:code role="parameter">resolution</db:code> in DPI.</db:para>
<db:para>This setting affects the coordinate system as returned by, for example <db:link xlink:href="qpainter.xml#viewport">QPainter::viewport</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#resolution">resolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTitle">
<db:title>void QPdfWriter::setTitle(const QString &amp;<db:emphasis>title</db:emphasis>)</db:title>
<db:para>Sets the title of the document being created to <db:code role="parameter">title</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#title">title</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title">
<db:title>QString QPdfWriter::title() const</db:title>
<db:para>Returns the title of the document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setTitle">setTitle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
