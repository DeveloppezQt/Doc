<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPdfWriter Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpdfwriter.xml">QPdfWriter</db:link> class is a class to generate PDFs that can be used as a paint device.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPdfWriter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qpagedpaintdevice.xml" xlink:role="class">QPagedPaintDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPdfWriter is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qpdfwriter.xml">QPdfWriter</db:link> generates PDF out of a series of drawing commands using <db:link xlink:href="qpainter.xml">QPainter</db:link>. The <db:link xlink:href="qpdfwriter.xml#newPage">newPage</db:link>() method can be used to create several pages.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ColorModel-enum">
<db:title>[since 6.8] enum QPdfWriter::ColorModel</db:title>
<db:para>This enumeration describes the way in which the PDF engine interprets stroking and filling colors, set as a <db:link xlink:href="qpainter.xml">QPainter</db:link>'s pen or brush (via <db:link xlink:href="qpen.xml">QPen</db:link> and <db:link xlink:href="qbrush.xml">QBrush</db:link>).</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfwriter.xml">QPdfWriter</db:link></db:emphasis>::<db:emphasis role="bold">ColorModel</db:emphasis>::RGB</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>All colors are converted to RGB and saved as such in the PDF.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfwriter.xml">QPdfWriter</db:link></db:emphasis>::<db:emphasis role="bold">ColorModel</db:emphasis>::Grayscale</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>All colors are converted to grayscale. For backwards compatibility, they are emitted in the PDF output as RGB colors, with identical quantities of red, green and blue.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfwriter.xml">QPdfWriter</db:link></db:emphasis>::<db:emphasis role="bold">ColorModel</db:emphasis>::CMYK</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>All colors are converted to CMYK and saved as such.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfwriter.xml">QPdfWriter</db:link></db:emphasis>::<db:emphasis role="bold">ColorModel</db:emphasis>::Auto</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>RGB colors are emitted as RGB; CMYK colors are emitted as CMYK. Colors of any other color spec are converted to RGB. This is the default since Qt 6.8.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml">QColor</db:link></db:member>
<db:member><db:link xlink:href="qgradient.xml">QGradient</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPdfWriter">
<db:title>[explicit] QPdfWriter::QPdfWriter(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Constructs a PDF writer that will write the pdf to <db:code role="parameter">device</db:code>.</db:para>
</db:section>
<db:section xml:id="QPdfWriter-1">
<db:title>[explicit] QPdfWriter::QPdfWriter(const QString &amp;<db:emphasis>filename</db:emphasis>)</db:title>
<db:para>Constructs a PDF writer that will write the pdf to <db:code role="parameter">filename</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPdfWriter">
<db:title>[virtual noexcept] QPdfWriter::~QPdfWriter()</db:title>
<db:para>Destroys the pdf writer.</db:para>
</db:section>
<db:section xml:id="addFileAttachment">
<db:title>void QPdfWriter::addFileAttachment(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis>, const QString &amp;<db:emphasis>mimeType</db:emphasis> = QString())</db:title>
<db:para>Adds <db:code role="parameter">fileName</db:code> attachment to the PDF with (optional) <db:code role="parameter">mimeType</db:code>. <db:code role="parameter">data</db:code> contains the raw file data to embed into the PDF file.</db:para>
</db:section>
<db:section xml:id="author">
<db:title>[since 6.9] QString QPdfWriter::author() const</db:title>
<db:para>Returns the author of the document.</db:para>
<db:para>This function was introduced in Qt 6.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setAuthor">setAuthor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="colorModel">
<db:title>[since 6.8] QPdfWriter::ColorModel QPdfWriter::colorModel() const</db:title>
<db:para>Returns the color model used by this PDF writer. The default is <db:link xlink:href="qpdfwriter.xml#ColorModel-enum">QPdfWriter::ColorModel::Auto</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setColorModel">setColorModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="creator">
<db:title>QString QPdfWriter::creator() const</db:title>
<db:para>Returns the creator of the document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setCreator">setCreator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="documentId">
<db:title>[since 6.8] QUuid QPdfWriter::documentId() const</db:title>
<db:para>Returns the ID of the document. By default, the ID is a randomly generated UUID.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setDocumentId">setDocumentId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="documentXmpMetadata">
<db:title>QByteArray QPdfWriter::documentXmpMetadata() const</db:title>
<db:para>Gets the document metadata, as it was provided with a call to <db:link xlink:href="qpdfwriter.xml#setDocumentXmpMetadata">setDocumentXmpMetadata</db:link>. It will not return the default metadata.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setDocumentXmpMetadata">setDocumentXmpMetadata</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="newPage">
<db:title>[override virtual] bool QPdfWriter::newPage()</db:title>
<db:para>Reimplements: <db:link xlink:href="qpagedpaintdevice.xml#newPage" role="function">QPagedPaintDevice::newPage()</db:link>.</db:para>
</db:section>
<db:section xml:id="outputIntent">
<db:title>[since 6.8] QPdfOutputIntent QPdfWriter::outputIntent() const</db:title>
<db:para>Returns the output intent used by this PDF writer.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setOutputIntent">setOutputIntent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEngine">
<db:title>[override virtual protected] QPaintEngine *QPdfWriter::paintEngine() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qpaintdevice.xml#paintEngine" role="function">QPaintDevice::paintEngine() const</db:link>.</db:para>
</db:section>
<db:section xml:id="pdfVersion">
<db:title>QPagedPaintDevice::PdfVersion QPdfWriter::pdfVersion() const</db:title>
<db:para>Returns the PDF version for this writer. The default is <db:code>PdfVersion_1_4</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setPdfVersion">setPdfVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resolution">
<db:title>int QPdfWriter::resolution() const</db:title>
<db:para>Returns the resolution of the PDF in DPI.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setResolution">setResolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAuthor">
<db:title>[since 6.9] void QPdfWriter::setAuthor(const QString &amp;<db:emphasis>author</db:emphasis>)</db:title>
<db:para>Sets the author of the document to <db:code role="parameter">author</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#author">author</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColorModel">
<db:title>[since 6.8] void QPdfWriter::setColorModel(QPdfWriter::ColorModel <db:emphasis>model</db:emphasis>)</db:title>
<db:para>Sets the color model used by this PDF writer to <db:code role="parameter">model</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#colorModel">colorModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCreator">
<db:title>void QPdfWriter::setCreator(const QString &amp;<db:emphasis>creator</db:emphasis>)</db:title>
<db:para>Sets the creator of the document to <db:code role="parameter">creator</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#creator">creator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDocumentId">
<db:title>[since 6.8] void QPdfWriter::setDocumentId(QUuid <db:emphasis>documentId</db:emphasis>)</db:title>
<db:para>Sets the ID of the document to <db:code role="parameter">documentId</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#documentId">documentId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDocumentXmpMetadata">
<db:title>void QPdfWriter::setDocumentXmpMetadata(const QByteArray &amp;<db:emphasis>xmpMetadata</db:emphasis>)</db:title>
<db:para>Sets the document metadata. This metadata is not influenced by the <db:link xlink:href="qpdfwriter.xml#setTitle">setTitle</db:link> / <db:link xlink:href="qpdfwriter.xml#setCreator">setCreator</db:link> methods, so is up to the user to keep it consistent. <db:code role="parameter">xmpMetadata</db:code> contains XML formatted metadata to embed into the PDF file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#documentXmpMetadata">documentXmpMetadata</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOutputIntent">
<db:title>[since 6.8] void QPdfWriter::setOutputIntent(const QPdfOutputIntent &amp;<db:emphasis>intent</db:emphasis>)</db:title>
<db:para>Sets the output intent used by this PDF writer to <db:code role="parameter">intent</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#outputIntent">outputIntent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPdfVersion">
<db:title>void QPdfWriter::setPdfVersion(QPagedPaintDevice::PdfVersion <db:emphasis>version</db:emphasis>)</db:title>
<db:para>Sets the PDF version for this writer to <db:code role="parameter">version</db:code>.</db:para>
<db:para>If <db:code role="parameter">version</db:code> is the same value as currently set then no change will be made.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#pdfVersion">pdfVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResolution">
<db:title>void QPdfWriter::setResolution(int <db:emphasis>resolution</db:emphasis>)</db:title>
<db:para>Sets the PDF <db:code role="parameter">resolution</db:code> in DPI.</db:para>
<db:para>This setting affects the coordinate system as returned by, for example <db:link xlink:href="qpainter.xml#viewport">QPainter::viewport</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#resolution">resolution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTitle">
<db:title>void QPdfWriter::setTitle(const QString &amp;<db:emphasis>title</db:emphasis>)</db:title>
<db:para>Sets the title of the document being created to <db:code role="parameter">title</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#title">title</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title">
<db:title>QString QPdfWriter::title() const</db:title>
<db:para>Returns the title of the document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpdfwriter.xml#setTitle">setTitle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
