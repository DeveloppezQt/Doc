<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Timer QML Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Triggers a handler at a specified interval.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQml 2.15</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Timer is part of <db:simplelist><db:member>qtquick-interceptors</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A Timer can be used to trigger an action either once, or repeatedly at a given interval.</db:para>
<db:para>Here is a Timer that shows the current date and time, and updates the text every 500 milliseconds. It uses the JavaScript Date object to access the current time.</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    Timer {
        interval: 500; running: true; repeat: true
        onTriggered: time.text = Date().toString()
    }

    Text { id: time }
}
</db:programlisting>
<db:para>The Timer type is synchronized with the animation timer. Since the animation timer is usually set to 60fps, the resolution of Timer will be at best 16ms.</db:para>
<db:para>If the Timer is running and one of its properties is changed, the elapsed time will be reset. For example, if a Timer with interval of 1000ms has its <db:emphasis>repeat</db:emphasis> property changed 500ms after starting, the elapsed time will be reset to 0, and the Timer will be triggered 1000ms later.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtdoc-demos-clocks-example.xml">Qt Quick Demo - Clocks</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="interval-prop">
<db:title>interval : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>interval</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Sets the <db:code role="parameter">interval</db:code> between triggers, in milliseconds.</db:para>
<db:para>The default interval is 1000 milliseconds.</db:para>
</db:section>
<db:section xml:id="repeat-prop">
<db:title>repeat : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>repeat</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If <db:code role="parameter">repeat</db:code> is true the timer is triggered repeatedly at the specified interval; otherwise, the timer will trigger once at the specified interval and then stop (i.e. running will be set to false).</db:para>
<db:para><db:code role="parameter">repeat</db:code> defaults to false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-timer.xml#running-prop">running</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="running-prop">
<db:title>running : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>running</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If set to true, starts the timer; otherwise stops the timer. For a non-repeating timer, <db:code role="parameter">running</db:code> is set to false after the timer has been triggered.</db:para>
<db:para><db:code role="parameter">running</db:code> defaults to false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-timer.xml#repeat-prop">repeat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="triggeredOnStart-prop">
<db:title>triggeredOnStart : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>triggeredOnStart</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When a timer is started, the first trigger is usually after the specified interval has elapsed. It is sometimes desirable to trigger immediately when the timer is started; for example, to establish an initial state.</db:para>
<db:para>If <db:code role="parameter">triggeredOnStart</db:code> is true, the timer is triggered immediately when started, and subsequently at the specified interval. Note that if <db:emphasis>repeat</db:emphasis> is set to false, the timer is triggered twice; once on start, and again at the interval.</db:para>
<db:para><db:code role="parameter">triggeredOnStart</db:code> defaults to false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-timer.xml#running-prop">running</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="triggered-signal">
<db:title>triggered()</db:title>
<db:para>This signal is emitted when the Timer times out.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onTriggered</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="restart-method">
<db:title>restart()</db:title>
<db:para>Restarts the timer</db:para>
<db:para>If the Timer is not running it will be started, otherwise it will be stopped, reset to initial state and started. The running property will be true following a call to restart().</db:para>
</db:section>
<db:section xml:id="start-method">
<db:title>start()</db:title>
<db:para>Starts the timer</db:para>
<db:para>If the timer is already running, calling this method has no effect. The running property will be true following a call to start().</db:para>
</db:section>
<db:section xml:id="stop-method">
<db:title>stop()</db:title>
<db:para>Stops the timer</db:para>
<db:para>If the timer is not running, calling this method has no effect. The running property will be false following a call to stop().</db:para>
</db:section>
</db:section>
</db:article>
