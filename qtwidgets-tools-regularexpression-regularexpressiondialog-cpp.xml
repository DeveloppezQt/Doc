<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRegularExpression Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> example shows how regular expressions in Qt are applied to text by providing an environment in which new regular expressions can be created and tested on custom text strings.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Giuseppe D'Angelo &lt;giuseppe.dangelo@kdab.com&gt;
** Copyright (C) 2015 Samuel Gaist &lt;samuel.gaist@edeltech.ch&gt;
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;regularexpressiondialog.h&quot;

#include &lt;QApplication&gt;

#include &lt;QCheckBox&gt;
#include &lt;QComboBox&gt;
#include &lt;QLabel&gt;
#include &lt;QLineEdit&gt;
#include &lt;QSpinBox&gt;
#include &lt;QPlainTextEdit&gt;
#include &lt;QTreeWidget&gt;

#include &lt;QAction&gt;
#include &lt;QClipboard&gt;

#include &lt;QHBoxLayout&gt;
#include &lt;QGridLayout&gt;
#include &lt;QFormLayout&gt;

#include &lt;QRegularExpression&gt;
#include &lt;QRegularExpressionMatch&gt;
#include &lt;QRegularExpressionMatchIterator&gt;

Q_DECLARE_METATYPE(QRegularExpression::MatchType)

RegularExpressionDialog::RegularExpressionDialog(QWidget *parent)
    : QDialog(parent)
{
    setupUi();
    setWindowTitle(tr(&quot;QRegularExpression Example&quot;));

    connect(patternLineEdit, &amp;QLineEdit::textChanged, this, &amp;RegularExpressionDialog::refresh);
    connect(subjectTextEdit, &amp;QPlainTextEdit::textChanged, this, &amp;RegularExpressionDialog::refresh);

    connect(caseInsensitiveOptionCheckBox, &amp;QCheckBox::toggled, this, &amp;RegularExpressionDialog::refresh);
    connect(dotMatchesEverythingOptionCheckBox, &amp;QCheckBox::toggled, this, &amp;RegularExpressionDialog::refresh);
    connect(multilineOptionCheckBox, &amp;QCheckBox::toggled, this, &amp;RegularExpressionDialog::refresh);
    connect(extendedPatternSyntaxOptionCheckBox, &amp;QCheckBox::toggled, this, &amp;RegularExpressionDialog::refresh);
    connect(invertedGreedinessOptionCheckBox, &amp;QCheckBox::toggled, this, &amp;RegularExpressionDialog::refresh);
    connect(dontCaptureOptionCheckBox, &amp;QCheckBox::toggled, this, &amp;RegularExpressionDialog::refresh);
    connect(useUnicodePropertiesOptionCheckBox, &amp;QCheckBox::toggled, this, &amp;RegularExpressionDialog::refresh);
    connect(optimizeOnFirstUsageOptionCheckBox, &amp;QCheckBox::toggled, this, &amp;RegularExpressionDialog::refresh);
    connect(dontAutomaticallyOptimizeOptionCheckBox, &amp;QCheckBox::toggled, this, &amp;RegularExpressionDialog::refresh);

    connect(offsetSpinBox, static_cast&lt;void (QSpinBox::*)(int)&gt;(&amp;QSpinBox::valueChanged),
            this, &amp;RegularExpressionDialog::refresh);

    connect(matchTypeComboBox, static_cast&lt;void (QComboBox::*)(int)&gt;(&amp;QComboBox::currentIndexChanged),
            this, &amp;RegularExpressionDialog::refresh);

    connect(anchoredMatchOptionCheckBox, &amp;QCheckBox::toggled, this, &amp;RegularExpressionDialog::refresh);
    connect(dontCheckSubjectStringMatchOptionCheckBox, &amp;QCheckBox::toggled, this, &amp;RegularExpressionDialog::refresh);

    patternLineEdit-&gt;setText(tr(&quot;(\\+?\\d+)-(?&lt;prefix&gt;\\d+)-(?&lt;number&gt;\\w+)&quot;));
    subjectTextEdit-&gt;setPlainText(tr(&quot;My office number is +43-152-0123456, my mobile is 001-41-255512 instead.&quot;));

    refresh();
}

void RegularExpressionDialog::refresh()
{
    setUpdatesEnabled(false);

    const QString pattern = patternLineEdit-&gt;text();
    const QString text = subjectTextEdit-&gt;toPlainText();

    offsetSpinBox-&gt;setMaximum(qMax(0, text.length() - 1));

    QString escaped = pattern;
    escaped.replace(QLatin1String(&quot;\\&quot;), QLatin1String(&quot;\\\\&quot;));
    escaped.replace(QLatin1String(&quot;\&quot;&quot;), QLatin1String(&quot;\\\&quot;&quot;));
    escaped.prepend(QLatin1Char('&quot;'));
    escaped.append(QLatin1Char('&quot;'));
    escapedPatternLineEdit-&gt;setText(escaped);

    QRegularExpression rx(pattern);
    QRegularExpression::MatchType matchType = matchTypeComboBox-&gt;currentData().value&lt;QRegularExpression::MatchType&gt;();
    QRegularExpression::PatternOptions patternOptions = QRegularExpression::NoPatternOption;
    QRegularExpression::MatchOptions matchOptions = QRegularExpression::NoMatchOption;

    if (anchoredMatchOptionCheckBox-&gt;isChecked())
        matchOptions |= QRegularExpression::AnchoredMatchOption;
    if (dontCheckSubjectStringMatchOptionCheckBox-&gt;isChecked())
        matchOptions |= QRegularExpression::DontCheckSubjectStringMatchOption;

    if (caseInsensitiveOptionCheckBox-&gt;isChecked())
        patternOptions |= QRegularExpression::CaseInsensitiveOption;
    if (dotMatchesEverythingOptionCheckBox-&gt;isChecked())
        patternOptions |= QRegularExpression::DotMatchesEverythingOption;
    if (multilineOptionCheckBox-&gt;isChecked())
        patternOptions |= QRegularExpression::MultilineOption;
    if (extendedPatternSyntaxOptionCheckBox-&gt;isChecked())
        patternOptions |= QRegularExpression::ExtendedPatternSyntaxOption;
    if (invertedGreedinessOptionCheckBox-&gt;isChecked())
        patternOptions |= QRegularExpression::InvertedGreedinessOption;
    if (dontCaptureOptionCheckBox-&gt;isChecked())
        patternOptions |= QRegularExpression::DontCaptureOption;
    if (useUnicodePropertiesOptionCheckBox-&gt;isChecked())
        patternOptions |= QRegularExpression::UseUnicodePropertiesOption;
    if (optimizeOnFirstUsageOptionCheckBox-&gt;isChecked())
        patternOptions |= QRegularExpression::OptimizeOnFirstUsageOption;
    if (dontAutomaticallyOptimizeOptionCheckBox-&gt;isChecked())
        patternOptions |= QRegularExpression::DontAutomaticallyOptimizeOption;

    rx.setPatternOptions(patternOptions);

    QPalette palette = patternLineEdit-&gt;palette();
    if (rx.isValid())
        palette.setColor(QPalette::Text, subjectTextEdit-&gt;palette().color(QPalette::Text));
    else
        palette.setColor(QPalette::Text, Qt::red);
    patternLineEdit-&gt;setPalette(palette);

    matchDetailsTreeWidget-&gt;clear();
    matchDetailsTreeWidget-&gt;setEnabled(rx.isValid());

    if (rx.isValid()) {
        const int capturingGroupsCount = rx.captureCount() + 1;

        QRegularExpressionMatchIterator iterator = rx.globalMatch(text, offsetSpinBox-&gt;value(), matchType, matchOptions);
        int i = 0;

        while (iterator.hasNext()) {
            QRegularExpressionMatch match = iterator.next();

            QTreeWidgetItem *matchDetailTopItem = new QTreeWidgetItem(matchDetailsTreeWidget);
            matchDetailTopItem-&gt;setText(0, QString::number(i));

            for (int captureGroupIndex = 0; captureGroupIndex &lt; capturingGroupsCount; ++captureGroupIndex) {
                QTreeWidgetItem *matchDetailItem = new QTreeWidgetItem(matchDetailTopItem);
                matchDetailItem-&gt;setText(1, QString::number(captureGroupIndex));
                matchDetailItem-&gt;setText(2, match.captured(captureGroupIndex));
            }

            ++i;
        }
    }

    matchDetailsTreeWidget-&gt;expandAll();

    namedGroupsTreeWidget-&gt;clear();
    namedGroupsTreeWidget-&gt;setEnabled(rx.isValid());

    if (rx.isValid()) {
        regexpStatusLabel-&gt;setText(tr(&quot;Valid&quot;));

        const QStringList namedCaptureGroups = rx.namedCaptureGroups();
        for (int i = 0; i &lt; namedCaptureGroups.size(); ++i) {
            const QString currentNamedCaptureGroup = namedCaptureGroups.at(i);

            QTreeWidgetItem *namedGroupItem = new QTreeWidgetItem(namedGroupsTreeWidget);
            namedGroupItem-&gt;setText(0, QString::number(i));
            namedGroupItem-&gt;setText(1, currentNamedCaptureGroup.isNull() ? tr(&quot;&lt;no name&gt;&quot;) : currentNamedCaptureGroup);
        }
    } else {
        regexpStatusLabel-&gt;setText(tr(&quot;Invalid: syntax error at position %1 (%2)&quot;)
                                   .arg(rx.patternErrorOffset())
                                   .arg(rx.errorString()));
    }

    setUpdatesEnabled(true);
}

void RegularExpressionDialog::copyEscapedPatternToClipboard()
{
#ifndef QT_NO_CLIPBOARD
    QClipboard *clipboard = QGuiApplication::clipboard();
    if (clipboard)
        clipboard-&gt;setText(escapedPatternLineEdit-&gt;text());
#endif
}

void RegularExpressionDialog::setupUi()
{
    QWidget *leftHalfContainer = setupLeftUi();

    QFrame *verticalSeparator = new QFrame;
    verticalSeparator-&gt;setFrameStyle(QFrame::VLine | QFrame::Sunken);

    QWidget *rightHalfContainer = setupRightUi();

    QHBoxLayout *mainLayout = new QHBoxLayout;
    mainLayout-&gt;addWidget(leftHalfContainer);
    mainLayout-&gt;addWidget(verticalSeparator);
    mainLayout-&gt;addWidget(rightHalfContainer);

    setLayout(mainLayout);
}

QWidget *RegularExpressionDialog::setupLeftUi()
{
    QWidget *container = new QWidget;

    QFormLayout *layout = new QFormLayout(container);
    layout-&gt;setFieldGrowthPolicy(QFormLayout::AllNonFixedFieldsGrow);
    layout-&gt;setMargin(0);

    QLabel *regexpAndSubjectLabel = new QLabel(tr(&quot;&lt;h3&gt;Regular expression and text input&lt;/h3&gt;&quot;));
    layout-&gt;addRow(regexpAndSubjectLabel);

    patternLineEdit = new QLineEdit;
    patternLineEdit-&gt;setClearButtonEnabled(true);
    layout-&gt;addRow(tr(&quot;&amp;Pattern:&quot;), patternLineEdit);

    escapedPatternLineEdit = new QLineEdit;
    escapedPatternLineEdit-&gt;setReadOnly(true);
    QPalette palette = escapedPatternLineEdit-&gt;palette();
    palette.setBrush(QPalette::Base, palette.brush(QPalette::Disabled, QPalette::Base));
    escapedPatternLineEdit-&gt;setPalette(palette);

#ifndef QT_NO_CLIPBOARD
    QAction *copyEscapedPatternAction = new QAction(this);
    copyEscapedPatternAction-&gt;setText(tr(&quot;Copy to clipboard&quot;));
    copyEscapedPatternAction-&gt;setIcon(QIcon(QStringLiteral(&quot;:/images/copy.png&quot;)));
    connect(copyEscapedPatternAction, &amp;QAction::triggered, this, &amp;RegularExpressionDialog::copyEscapedPatternToClipboard);
    escapedPatternLineEdit-&gt;addAction(copyEscapedPatternAction, QLineEdit::TrailingPosition);
#endif

    layout-&gt;addRow(tr(&quot;&amp;Escaped pattern:&quot;), escapedPatternLineEdit);

    subjectTextEdit = new QPlainTextEdit;
    layout-&gt;addRow(tr(&quot;&amp;Subject text:&quot;), subjectTextEdit);

    caseInsensitiveOptionCheckBox = new QCheckBox(tr(&quot;Case insensitive (/i)&quot;));
    dotMatchesEverythingOptionCheckBox = new QCheckBox(tr(&quot;Dot matches everything (/s)&quot;));
    multilineOptionCheckBox = new QCheckBox(tr(&quot;Multiline (/m)&quot;));
    extendedPatternSyntaxOptionCheckBox = new QCheckBox(tr(&quot;Extended pattern (/x)&quot;));
    invertedGreedinessOptionCheckBox = new QCheckBox(tr(&quot;Inverted greediness&quot;));
    dontCaptureOptionCheckBox = new QCheckBox(tr(&quot;Don't capture&quot;));
    useUnicodePropertiesOptionCheckBox = new QCheckBox(tr(&quot;Use unicode properties (/u)&quot;));
    optimizeOnFirstUsageOptionCheckBox = new QCheckBox(tr(&quot;Optimize on first usage&quot;));
    dontAutomaticallyOptimizeOptionCheckBox = new QCheckBox(tr(&quot;Don't automatically optimize&quot;));

    QGridLayout *patternOptionsCheckBoxLayout = new QGridLayout;
    int gridRow = 0;
    patternOptionsCheckBoxLayout-&gt;addWidget(caseInsensitiveOptionCheckBox, gridRow, 1);
    patternOptionsCheckBoxLayout-&gt;addWidget(dotMatchesEverythingOptionCheckBox, gridRow, 2);
    ++gridRow;
    patternOptionsCheckBoxLayout-&gt;addWidget(multilineOptionCheckBox, gridRow, 1);
    patternOptionsCheckBoxLayout-&gt;addWidget(extendedPatternSyntaxOptionCheckBox, gridRow, 2);
    ++gridRow;
    patternOptionsCheckBoxLayout-&gt;addWidget(invertedGreedinessOptionCheckBox, gridRow, 1);
    patternOptionsCheckBoxLayout-&gt;addWidget(dontCaptureOptionCheckBox, gridRow, 2);
    ++gridRow;
    patternOptionsCheckBoxLayout-&gt;addWidget(useUnicodePropertiesOptionCheckBox, gridRow, 1);
    patternOptionsCheckBoxLayout-&gt;addWidget(optimizeOnFirstUsageOptionCheckBox, gridRow, 2);
    ++gridRow;
    patternOptionsCheckBoxLayout-&gt;addWidget(dontAutomaticallyOptimizeOptionCheckBox, gridRow, 1);

    layout-&gt;addRow(tr(&quot;Pattern options:&quot;), patternOptionsCheckBoxLayout);

    offsetSpinBox = new QSpinBox;
    layout-&gt;addRow(tr(&quot;Match &amp;offset:&quot;), offsetSpinBox);

    matchTypeComboBox = new QComboBox;
    matchTypeComboBox-&gt;addItem(tr(&quot;Normal&quot;), QVariant::fromValue(QRegularExpression::NormalMatch));
    matchTypeComboBox-&gt;addItem(tr(&quot;Partial prefer complete&quot;), QVariant::fromValue(QRegularExpression::PartialPreferCompleteMatch));
    matchTypeComboBox-&gt;addItem(tr(&quot;Partial prefer first&quot;), QVariant::fromValue(QRegularExpression::PartialPreferFirstMatch));
    matchTypeComboBox-&gt;addItem(tr(&quot;No match&quot;), QVariant::fromValue(QRegularExpression::NoMatch));
    layout-&gt;addRow(tr(&quot;Match &amp;type:&quot;), matchTypeComboBox);

    dontCheckSubjectStringMatchOptionCheckBox = new QCheckBox(tr(&quot;Don't check subject string&quot;));
    anchoredMatchOptionCheckBox = new QCheckBox(tr(&quot;Anchored match&quot;));

    QGridLayout *matchOptionsCheckBoxLayout = new QGridLayout;
    matchOptionsCheckBoxLayout-&gt;addWidget(dontCheckSubjectStringMatchOptionCheckBox, 0, 0);
    matchOptionsCheckBoxLayout-&gt;addWidget(anchoredMatchOptionCheckBox, 0, 1);
    layout-&gt;addRow(tr(&quot;Match options:&quot;), matchOptionsCheckBoxLayout);

    return container;
}

QWidget *RegularExpressionDialog::setupRightUi()
{
    QWidget *container = new QWidget;

    QFormLayout *layout = new QFormLayout(container);
    layout-&gt;setFieldGrowthPolicy(QFormLayout::AllNonFixedFieldsGrow);
    layout-&gt;setMargin(0);

    QLabel *matchInfoLabel = new QLabel(tr(&quot;&lt;h3&gt;Match information&lt;/h3&gt;&quot;));
    layout-&gt;addRow(matchInfoLabel);

    matchDetailsTreeWidget = new QTreeWidget;
    matchDetailsTreeWidget-&gt;setHeaderLabels(QStringList() &lt;&lt; tr(&quot;Match index&quot;) &lt;&lt; tr(&quot;Group index&quot;) &lt;&lt; tr(&quot;Captured string&quot;));
    matchDetailsTreeWidget-&gt;setSizeAdjustPolicy(QTreeWidget::AdjustToContents);
    layout-&gt;addRow(tr(&quot;Match details:&quot;), matchDetailsTreeWidget);

    QFrame *horizontalSeparator = new QFrame;
    horizontalSeparator-&gt;setFrameStyle(QFrame::HLine | QFrame::Sunken);
    layout-&gt;addRow(horizontalSeparator);

    QLabel *regexpInfoLabel = new QLabel(tr(&quot;&lt;h3&gt;Regular expression information&lt;/h3&gt;&quot;));
    layout-&gt;addRow(regexpInfoLabel);

    regexpStatusLabel = new QLabel(tr(&quot;Valid&quot;));
    regexpStatusLabel-&gt;setWordWrap(true);
    layout-&gt;addRow(tr(&quot;Pattern status:&quot;), regexpStatusLabel);

    namedGroupsTreeWidget = new QTreeWidget;
    namedGroupsTreeWidget-&gt;setHeaderLabels(QStringList() &lt;&lt; tr(&quot;Index&quot;) &lt;&lt; tr(&quot;Named group&quot;));
    namedGroupsTreeWidget-&gt;setSizeAdjustPolicy(QTreeWidget::AdjustToContents);
    namedGroupsTreeWidget-&gt;setRootIsDecorated(false);
    layout-&gt;addRow(tr(&quot;Named groups:&quot;), namedGroupsTreeWidget);

    return container;
}

</db:programlisting>
</db:article>
