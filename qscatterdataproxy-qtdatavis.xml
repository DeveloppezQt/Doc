<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScatterDataProxy Class</db:title>
<db:productname>QtDataVis3D</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscatterdataproxy-qtdatavis.xml">QScatterDataProxy</db:link> class is the data proxy for 3D scatter graphs.</db:para>
<db:para>This class was introduced in QtDataVisualization 1.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScatterDataProxy</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtDataVisualization 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS DataVisualization)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::DataVisualization)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += datavisualization</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In QML</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtdatavisualization-scatterdataproxy.xml" xlink:role="">ScatterDataProxy</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractdataproxy-qtdatavis.xml" xlink:role="class">QAbstractDataProxy</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml" xlink:role="class">QItemModelScatterDataProxy</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A scatter data proxy handles adding, inserting, changing, and removing data items.</db:para>
<db:para><db:link xlink:href="qscatterdataproxy-qtdatavis.xml">QScatterDataProxy</db:link> takes ownership of all QtDataVisualization::QScatterDataArray and <db:link xlink:href="qscatterdataitem-qtdatavis.xml">QScatterDataItem</db:link> objects passed to it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtdatavisualization-data-handling.xml">Qt Data Visualization Data Handling</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="itemCount-prop">
<db:title>[read-only] itemCount : const int</db:title>
<db:para>This property holds the number of items in the array.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">itemCount</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">itemCountChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>count</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="series-prop">
<db:title>[read-only] series : QScatter3DSeries* const</db:title>
<db:para>This property holds the series this proxy is attached to.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qscatter3dseries-qtdatavis.xml">QScatter3DSeries</db:link></db:type> *<db:emphasis role="bold">series</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">seriesChanged</db:emphasis>(<db:type><db:link xlink:href="qscatter3dseries-qtdatavis.xml">QScatter3DSeries</db:link></db:type> *<db:emphasis>series</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScatterDataProxy">
<db:title>[explicit] QScatterDataProxy::QScatterDataProxy(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs <db:link xlink:href="qscatterdataproxy-qtdatavis.xml">QScatterDataProxy</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QScatterDataProxy">
<db:title>[virtual noexcept] QScatterDataProxy::~QScatterDataProxy()</db:title>
<db:para>Deletes the scatter data proxy.</db:para>
</db:section>
<db:section xml:id="addItem">
<db:title>int QScatterDataProxy::addItem(const QScatterDataItem &amp;<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Adds the item <db:code role="parameter">item</db:code> to the end of the array.</db:para>
<db:para>Returns the index of the added item.</db:para>
</db:section>
<db:section xml:id="addItems">
<db:title>int QScatterDataProxy::addItems(const QScatterDataArray &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:para>Adds the items specified by <db:code role="parameter">items</db:code> to the end of the array.</db:para>
<db:para>Returns the index of the first added item.</db:para>
</db:section>
<db:section xml:id="array">
<db:title>const QScatterDataArray *QScatterDataProxy::array() const</db:title>
<db:para>Returns the pointer to the data array.</db:para>
</db:section>
<db:section xml:id="arrayReset">
<db:title>void QScatterDataProxy::arrayReset()</db:title>
<db:para>This signal is emitted when the data array is reset. If the contents of the whole array are changed without calling <db:link xlink:href="qscatterdataproxy-qtdatavis.xml#resetArray">resetArray</db:link>(), this signal needs to be emitted to update the graph.</db:para>
</db:section>
<db:section xml:id="insertItem">
<db:title>void QScatterDataProxy::insertItem(int <db:emphasis>index</db:emphasis>, const QScatterDataItem &amp;<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Inserts the item <db:code role="parameter">item</db:code> to the position <db:code role="parameter">index</db:code>. If the index is equal to the data array size, the item is added to the array.</db:para>
</db:section>
<db:section xml:id="insertItems">
<db:title>void QScatterDataProxy::insertItems(int <db:emphasis>index</db:emphasis>, const QScatterDataArray &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:para>Inserts the items specified by <db:code role="parameter">items</db:code> to the position <db:code role="parameter">index</db:code>. If the index is equal to data array size, the items are added to the array.</db:para>
</db:section>
<db:section xml:id="itemAt">
<db:title>const QScatterDataItem *QScatterDataProxy::itemAt(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the pointer to the item at the index <db:code role="parameter">index</db:code>. It is guaranteed to be valid only until the next call that modifies data.</db:para>
</db:section>
<db:section xml:id="itemsAdded">
<db:title>void QScatterDataProxy::itemsAdded(int <db:emphasis>startIndex</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This signal is emitted when the number of items specified by <db:code role="parameter">count</db:code> is added starting at the position <db:code role="parameter">startIndex</db:code>. If items are added to the array without calling <db:link xlink:href="qscatterdataproxy-qtdatavis.xml#addItem">addItem</db:link>() or <db:link xlink:href="qscatterdataproxy-qtdatavis.xml#addItems">addItems</db:link>(), this signal needs to be emitted to update the graph.</db:para>
</db:section>
<db:section xml:id="itemsChanged">
<db:title>void QScatterDataProxy::itemsChanged(int <db:emphasis>startIndex</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This signal is emitted when the number of items specified by <db:code role="parameter">count</db:code> is changed starting at the position <db:code role="parameter">startIndex</db:code>. If items are changed in the array without calling <db:link xlink:href="qscatterdataproxy-qtdatavis.xml#setItem">setItem</db:link>() or <db:link xlink:href="qscatterdataproxy-qtdatavis.xml#setItems">setItems</db:link>(), this signal needs to be emitted to update the graph.</db:para>
</db:section>
<db:section xml:id="itemsInserted">
<db:title>void QScatterDataProxy::itemsInserted(int <db:emphasis>startIndex</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This signal is emitted when the number of items specified by <db:code role="parameter">count</db:code> is inserted starting at the position <db:code role="parameter">startIndex</db:code>. If items are inserted into the array without calling <db:link xlink:href="qscatterdataproxy-qtdatavis.xml#insertItem">insertItem</db:link>() or <db:link xlink:href="qscatterdataproxy-qtdatavis.xml#insertItems">insertItems</db:link>(), this signal needs to be emitted to update the graph.</db:para>
</db:section>
<db:section xml:id="itemsRemoved">
<db:title>void QScatterDataProxy::itemsRemoved(int <db:emphasis>startIndex</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>This signal is emitted when the number of rows specified by <db:code role="parameter">count</db:code> is removed starting at the position <db:code role="parameter">startIndex</db:code>. The index may be larger than the current array size if items are removed from the end. If items are removed from the array without calling <db:link xlink:href="qscatterdataproxy-qtdatavis.xml#removeItems">removeItems</db:link>(), this signal needs to be emitted to update the graph.</db:para>
</db:section>
<db:section xml:id="removeItems">
<db:title>void QScatterDataProxy::removeItems(int <db:emphasis>index</db:emphasis>, int <db:emphasis>removeCount</db:emphasis>)</db:title>
<db:para>Removes the number of items specified by <db:code role="parameter">removeCount</db:code> starting at the position <db:code role="parameter">index</db:code>. Attempting to remove items past the end of the array does nothing.</db:para>
</db:section>
<db:section xml:id="resetArray">
<db:title>void QScatterDataProxy::resetArray(QScatterDataArray *<db:emphasis>newArray</db:emphasis>)</db:title>
<db:para>Takes ownership of the array <db:code role="parameter">newArray</db:code>. Clears the existing array if the new array differs from it. If the arrays are the same, this function just triggers the <db:link xlink:href="qscatterdataproxy-qtdatavis.xml#arrayReset">arrayReset</db:link>() signal.</db:para>
<db:para>Passing a null array deletes the old array and creates a new empty array.</db:para>
</db:section>
<db:section xml:id="setItem">
<db:title>void QScatterDataProxy::setItem(int <db:emphasis>index</db:emphasis>, const QScatterDataItem &amp;<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Replaces the item at the position <db:code role="parameter">index</db:code> with the item <db:code role="parameter">item</db:code>.</db:para>
</db:section>
<db:section xml:id="setItems">
<db:title>void QScatterDataProxy::setItems(int <db:emphasis>index</db:emphasis>, const QScatterDataArray &amp;<db:emphasis>items</db:emphasis>)</db:title>
<db:para>Replaces the items starting from the position <db:code role="parameter">index</db:code> with the items specified by <db:code role="parameter">items</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QScatterDataArray-typedef">
<db:title>QScatterDataArray</db:title>
<db:para>A list of <db:link xlink:href="qscatterdataitem-qtdatavis.xml">QScatterDataItem</db:link> objects.</db:para>
</db:section>
</db:section>
</db:article>
