<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SplitView QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Lays out items with a draggable splitter between each item.</db:para>
<db:para>This type was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 1.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-item.xml">Item</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>SplitView is part of <db:simplelist><db:member><db:link xlink:href="views.xml">Application Navigation and Views</db:link></db:member><db:member><db:link xlink:href="controls.xml">Buttons and Controls</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/splitview.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qml-qtquick-controls-splitview.xml">SplitView</db:link> is a control that lays out items horizontally or vertically with a draggable splitter between each item.</db:para>
<db:para>There will always be one (and only one) item in the <db:link xlink:href="qml-qtquick-controls-splitview.xml">SplitView</db:link> that has <db:link xlink:href="">Layout.fillWidth</db:link> set to <db:code>true</db:code> (or <db:link xlink:href="">Layout.fillHeight</db:link>, if orientation is Qt.Vertical). This means that the item will get all leftover space when other items have been laid out. By default, the last visible child of the <db:link xlink:href="qml-qtquick-controls-splitview.xml">SplitView</db:link> will have this set, but it can be changed by explicitly setting fillWidth to <db:code>true</db:code> on another item.</db:para>
<db:para>As the fillWidth item will automatically be resized to fit the extra space, explicit assignments to its width and height properties will be ignored (but <db:link xlink:href="">Layout.minimumWidth</db:link> and <db:link xlink:href="">Layout.maximumWidth</db:link> will still be respected). The initial sizes of other items should be set via their width and height properties. Any binding assignment to an item's width or height will be broken as soon as the user drags that item's splitter handle.</db:para>
<db:para>A handle can belong to the item either on the left or top side, or on the right or bottom side:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If the fillWidth item is to the right: the handle belongs to the left item.</db:para>
</db:listitem>
<db:listitem>
<db:para>if the fillWidth item is on the left: the handle belongs to the right item.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This will again control which item gets resized when the user drags a handle, and which handle gets hidden when an item is told to hide.</db:para>
<db:para><db:link xlink:href="qml-qtquick-controls-splitview.xml">SplitView</db:link> supports setting attached Layout properties on child items, which means that you can set the following attached properties for each child:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="">Layout.minimumWidth</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Layout.minimumHeight</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Layout.maximumWidth</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Layout.maximumHeight</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Layout.fillWidth</db:link> (<db:code>true</db:code> for only one child)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Layout.fillHeight</db:link> (<db:code>true</db:code> for only one child)</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>import <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Layouts 1.0 in your QML file in order to use the Layout attached properties inside <db:link xlink:href="qml-qtquick-controls-splitview.xml">SplitView</db:link>.</db:para>
</db:note>
<db:para>Example:</db:para>
<db:para>To create a <db:link xlink:href="qml-qtquick-controls-splitview.xml">SplitView</db:link> with three items, and let the center item get superfluous space, one could do the following:</db:para>
<db:programlisting language="qml">SplitView {
    anchors.fill: parent
    orientation: Qt.Horizontal

    Rectangle {
        width: 200
        Layout.maximumWidth: 400
        color: &quot;lightblue&quot;
        Text {
            text: &quot;View 1&quot;
            anchors.centerIn: parent
        }
    }
    Rectangle {
        id: centerItem
        Layout.minimumWidth: 50
        Layout.fillWidth: true
        color: &quot;lightgray&quot;
        Text {
            text: &quot;View 2&quot;
            anchors.centerIn: parent
        }
    }
    Rectangle {
        width: 200
        color: &quot;lightgreen&quot;
        Text {
            text: &quot;View 3&quot;
            anchors.centerIn: parent
        }
    }
}

</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="handleDelegate-prop">
<db:title>handleDelegate : Component</db:title>
<db:para>This property holds the delegate that will be instantiated between each child item. Inside the delegate the following properties are available:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>readonly property bool styleData.index</db:para>
</db:td>
<db:td>
<db:para>Specifies the index of the splitter handle. The handle between the first and the second item will get index 0, the next handle index 1 etc.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>readonly property bool styleData.hovered</db:para>
</db:td>
<db:td>
<db:para>The handle is being hovered.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>readonly property bool styleData.pressed</db:para>
</db:td>
<db:td>
<db:para>The handle is being pressed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>readonly property bool styleData.resizing</db:para>
</db:td>
<db:td>
<db:para>The handle is being dragged.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="orientation-prop">
<db:title>orientation : enumeration</db:title>
<db:para>This property holds the orientation of the <db:link xlink:href="qml-qtquick-controls-splitview.xml">SplitView</db:link>. The value can be either <db:code>Qt.Horizontal</db:code> or <db:code>Qt.Vertical</db:code>. The default value is <db:code>Qt.Horizontal</db:code>.</db:para>
</db:section>
<db:section xml:id="resizing-prop">
<db:title>resizing : bool</db:title>
<db:para>This propery is <db:code>true</db:code> when the user is resizing any of the items by dragging on the splitter handles.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addItem-method">
<db:title>[since QtQuick.Controls 1.3] void addItem(Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Add an item to the end of the view.</db:para>
<db:para>This method was introduced in QtQuick.Controls 1.3.</db:para>
</db:section>
<db:section xml:id="removeItem-method">
<db:title>[since QtQuick.Controls 1.4] void removeItem(Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Remove <db:code role="parameter">item</db:code> from the view.</db:para>
<db:para>This method was introduced in QtQuick.Controls 1.4.</db:para>
</db:section>
</db:section>
</db:article>
