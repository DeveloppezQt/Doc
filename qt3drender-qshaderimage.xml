<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QShaderImage Class</db:title>
<db:subtitle>Qt3DRender::QShaderImage</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides Image access to shader programs.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QShaderImage</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3drender)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3drender)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3drender</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qt3d-render-shaderimage.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3dcore-qnode.xml" xlink:role="class">Qt3DCore::QNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To make the content of textures available for read and write operations in a shader, they need to exposed as <db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link>. Textures can be composed of several mip levels, layers and faces. Additionally declaring a <db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link> allows specifying which level, layer or face of the texture content we want to access.</db:para>
<db:para><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link> has to be assigned as a <db:link xlink:href="qt3drender-qparameter.xml">QParameter</db:link>'s value and reference a valid <db:link xlink:href="qt3drender-qabstracttexture.xml">Qt3DRender::QAbstractTexture</db:link> to work properly.</db:para>
<db:para>If the referenced texture is a one-dimensional array, two-dimensional array, three-dimensional, cube map, cube map array, or two-dimensional multisample array texture, it is possible to bind either the entire texture level or a single layer or face of the texture level. This can be controlled with the <db:link xlink:href="qt3drender-qshaderimage.xml#layered-prop">layered</db:link> property.</db:para>
<db:para>Support for <db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link> is only supported with OpenGL 4 and partially with OpenGL ES 3.1 and 3.2.</db:para>
<db:para>OpenGL 4 supports the following image types:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>GLSL Type</db:para>
</db:th>
<db:th>
<db:para>OpenGL Type Enum</db:para>
</db:th>
<db:th>
<db:para>Texture Type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>image1D</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_1D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture1d.xml">QTexture1D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image2D</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_2D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2d.xml">QTexture2D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image3D</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_3D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture3d.xml">QTexture3D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image2DRect</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_2D_RECT</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturerectangle.xml">QTextureRectangle</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>imageCube</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_CUBE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturecubemap.xml">QTextureCubeMap</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>imageBuffer</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_BUFFER</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturebuffer.xml">QTextureBuffer</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image1DArray</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_1D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture1darray.xml">QTexture1DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image2DArray</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_2D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2darray.xml">QTexture2DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>imageCubeArray</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_CUBE_MAP_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturecubemaparray.xml">QTextureCubeMapArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image2DMS</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_2D_MULTISAMPLE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2dmultisample.xml">QTexture2DMultisample</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image2DMSArray</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_2D_MULTISAMPLE_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2dmultisamplearray.xml">QTexture2DMultisampleArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage1D</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_1D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture1d.xml">QTexture1D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage2D</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_2D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2d.xml">QTexture2D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage3D</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_3D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture3d.xml">QTexture3D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage2DRect</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_2D_RECT</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturerectangle.xml">QTextureRectangle</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimageCube</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_CUBE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturecubemap.xml">QTextureCubeMap</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimageBuffer</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_BUFFER</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturebuffer.xml">QTextureBuffer</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage1DArray</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_1D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture1darray.xml">QTexture1DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage2DArray</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_2D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2darray.xml">QTexture2DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimageCubeArray</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_CUBE_MAP_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturecubemaparray.xml">QTextureCubeMapArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage2DMS</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_2D_MULTISAMPLE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2dmultisample.xml">QTexture2DMultisample</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage2DMSArray</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2dmultisamplearray.xml">QTexture2DMultisampleArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage1D</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_1D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture1d.xml">QTexture1D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage2D</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_2D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2d.xml">QTexture2D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage3D</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_3D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture3d.xml">QTexture3D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage2DRect</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_2D_RECT</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturerectangle.xml">QTextureRectangle</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimageCube</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_CUBE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturecubemap.xml">QTextureCubeMap</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimageBuffer</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_BUFFER</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturebuffer.xml">QTextureBuffer</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage1DArray</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_1D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture1darray.xml">QTexture1DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage2DArray</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_2D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2darray.xml">QTexture2DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimageCubeArray</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturecubemaparray.xml">QTextureCubeMapArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage2DMS</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2dmultisample.xml">QTexture2DMultisample</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage2DMSArray</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2dmultisamplearray.xml">QTexture2DMultisampleArray</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>OpenGL ES 3.1 supports the following image types:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>GLSL Type</db:para>
</db:th>
<db:th>
<db:para>OpenGL Type Enum</db:para>
</db:th>
<db:th>
<db:para>Texture Type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>image2D</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_2D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2d.xml">QTexture2D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image3D</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_3D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture3d.xml">QTexture3D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>imageCube</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_CUBE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturecubemap.xml">QTextureCubeMap</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image2DArray</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_2D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2darray.xml">QTexture2DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage2D</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_2D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2d.xml">QTexture2D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage3D</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_3D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture3d.xml">QTexture3D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimageCube</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_CUBE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturecubemap.xml">QTextureCubeMap</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimage2DArray</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_2D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2darray.xml">QTexture2DArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage2D</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_2D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2d.xml">QTexture2D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage3D</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_3D</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture3d.xml">QTexture3D</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimageCube</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_CUBE</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturecubemap.xml">QTextureCubeMap</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimage2DArray</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_2D_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexture2darray.xml">QTexture2DArray</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>OpenGL ES 3.2 supports all of the OpenGL ES 3.1 image types as well as the following:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>GLSL Type</db:para>
</db:th>
<db:th>
<db:para>OpenGL Type Enum</db:para>
</db:th>
<db:th>
<db:para>Texture Type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>imageBuffer</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_BUFFER</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturebuffer.xml">QTextureBuffer</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>imageCubeArray</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_CUBE_MAP_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturecubemaparray.xml">QTextureCubeMapArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimageBuffer</db:para>
</db:td>
<db:td>
<db:para>GL_IMAGE_BUFFER</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturebuffer.xml">QTextureBuffer</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>iimageCubeArray</db:para>
</db:td>
<db:td>
<db:para>GL_INT_IMAGE_CUBE_MAP_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturecubemaparray.xml">QTextureCubeMapArray</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimageBuffer</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_BUFFER</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturebuffer.xml">QTextureBuffer</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>uimageCubeArray</db:para>
</db:td>
<db:td>
<db:para>GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qt3drender-qtexturecubemaparray.xml">QTextureCubeMapArray</db:link></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Expected use would look like:</db:para>
<db:programlisting language="cpp" role="bad">Qt3DRender::QTexture2D *tex2D = new Qt3DRender::QTexture2D();
...
Qt3DRender::QMaterial *material = new Qt3DRender::QMaterial();
...
Qt3DRender::QParameter *imageParameter = new Qt3DRender::QParameter();
Qt3DRender::QShaderImage *shaderImage = new Qt3DRender::QShaderImage();

shaderImage-&amp;gt;setTexture(tex2D);

imageParameter-&amp;gt;setName(&quot;imageUniformName&quot;);
imageParameter-&amp;gt;setValue(QVariant::fromValue(shaderImage));

material-&amp;gt;addParameter(imageParamenter);
</db:programlisting>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Access-enum">
<db:title>enum QShaderImage::Access</db:title>
<db:enumsynopsis>
<db:enumname>Access</db:enumname>
<db:enumitem>
<db:enumidentifier>ReadOnly</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WriteOnly</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadWrite</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::ReadOnly</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Image will only be read from in shaders</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::WriteOnly</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Image will only be written into from shaders</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::ReadWrite</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Image will only be read and written into from shaders</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ImageFormat-enum">
<db:title>enum QShaderImage::ImageFormat</db:title>
<db:enumsynopsis>
<db:enumname>ImageFormat</db:enumname>
<db:enumitem>
<db:enumidentifier>NoFormat</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Automatic</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R8_UNorm</db:enumidentifier>
<db:enumvalue>0x8229</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG8_UNorm</db:enumidentifier>
<db:enumvalue>0x822B</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA8_UNorm</db:enumidentifier>
<db:enumvalue>0x8058</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R16_UNorm</db:enumidentifier>
<db:enumvalue>0x822A</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG16_UNorm</db:enumidentifier>
<db:enumvalue>0x822C</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA16_UNorm</db:enumidentifier>
<db:enumvalue>0x805B</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R8_SNorm</db:enumidentifier>
<db:enumvalue>0x8F94</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG8_SNorm</db:enumidentifier>
<db:enumvalue>0x8F95</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA8_SNorm</db:enumidentifier>
<db:enumvalue>0x8F97</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R16_SNorm</db:enumidentifier>
<db:enumvalue>0x8F98</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG16_SNorm</db:enumidentifier>
<db:enumvalue>0x8F99</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA16_SNorm</db:enumidentifier>
<db:enumvalue>0x8F9B</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R8U</db:enumidentifier>
<db:enumvalue>0x8232</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG8U</db:enumidentifier>
<db:enumvalue>0x8238</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA8U</db:enumidentifier>
<db:enumvalue>0x8D7C</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R16U</db:enumidentifier>
<db:enumvalue>0x8234</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG16U</db:enumidentifier>
<db:enumvalue>0x823A</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA16U</db:enumidentifier>
<db:enumvalue>0x8D76</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R32U</db:enumidentifier>
<db:enumvalue>0x8236</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG32U</db:enumidentifier>
<db:enumvalue>0x823C</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA32U</db:enumidentifier>
<db:enumvalue>0x8D70</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R8I</db:enumidentifier>
<db:enumvalue>0x8231</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG8I</db:enumidentifier>
<db:enumvalue>0x8237</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA8I</db:enumidentifier>
<db:enumvalue>0x8D8E</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R16I</db:enumidentifier>
<db:enumvalue>0x8233</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG16I</db:enumidentifier>
<db:enumvalue>0x8239</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA16I</db:enumidentifier>
<db:enumvalue>0x8D88</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R32I</db:enumidentifier>
<db:enumvalue>0x8235</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG32I</db:enumidentifier>
<db:enumvalue>0x823B</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA32I</db:enumidentifier>
<db:enumvalue>0x8D82</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R16F</db:enumidentifier>
<db:enumvalue>0x822D</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG16F</db:enumidentifier>
<db:enumvalue>0x822F</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA16F</db:enumidentifier>
<db:enumvalue>0x881A</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>R32F</db:enumidentifier>
<db:enumvalue>0x822E</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG32F</db:enumidentifier>
<db:enumvalue>0x8230</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGBA32F</db:enumidentifier>
<db:enumvalue>0x8814</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RG11B10F</db:enumidentifier>
<db:enumvalue>0x8C3A</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB10A2</db:enumidentifier>
<db:enumvalue>0x8059</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RGB10A2U</db:enumidentifier>
<db:enumvalue>0x906F</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This list describes all possible image formats</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::NoFormat</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>GL_NONE</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::Automatic</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Qt 3D will try to determine the format automatically based on the referenced texture.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::R8_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8229</db:code></db:td>
<db:td>
<db:para>GL_R8 (GLSL type r8, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RG8_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x822B</db:code></db:td>
<db:td>
<db:para>GL_RG8 (GLSL type rg8, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RGBA8_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8058</db:code></db:td>
<db:td>
<db:para>GL_RGBA8 (GLSL type rgba8, supported by OpenGL 4.2+, OpenGL ES 3.1+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::R16_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x822A</db:code></db:td>
<db:td>
<db:para>GL_R16 (GLSL type r16, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RG16_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x822C</db:code></db:td>
<db:td>
<db:para>GL_RG16 (GLSL type rg16, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RGBA16_UNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x805B</db:code></db:td>
<db:td>
<db:para>GL_RGBA16 (GLSL type rgba16, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::R8_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8F94</db:code></db:td>
<db:td>
<db:para>GL_R8_SNORM (GLSL type r8_snorm, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RG8_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8F95</db:code></db:td>
<db:td>
<db:para>GL_RG8_SNORM (GLSL type rg8_snorm, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RGBA8_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8F97</db:code></db:td>
<db:td>
<db:para>GL_RGBA8_SNORM (GLSL type rgba8_snorm, supported by OpenGL 4.2+, OpenGL ES 3.1+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::R16_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8F98</db:code></db:td>
<db:td>
<db:para>GL_R16_SNORM (GLSL type r16_snorm, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RG16_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8F99</db:code></db:td>
<db:td>
<db:para>GL_RG16_SNORM (GLSL type rg16_snorm, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RGBA16_SNorm</db:code></db:para>
</db:td>
<db:td><db:code>0x8F9B</db:code></db:td>
<db:td>
<db:para>GL_RGBA16_SNORM (GLSL type rgba16_snorm, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::R8U</db:code></db:para>
</db:td>
<db:td><db:code>0x8232</db:code></db:td>
<db:td>
<db:para>GL_R8UI (GLSL type r8ui, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RG8U</db:code></db:para>
</db:td>
<db:td><db:code>0x8238</db:code></db:td>
<db:td>
<db:para>GL_RG8UI (GLSL type rg8ui, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RGBA8U</db:code></db:para>
</db:td>
<db:td><db:code>0x8D7C</db:code></db:td>
<db:td>
<db:para>GL_RGBA8UI (GLSL type rgba8ui, supported by OpenGL 4.2+, OpenGL ES 3.1+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::R16U</db:code></db:para>
</db:td>
<db:td><db:code>0x8234</db:code></db:td>
<db:td>
<db:para>GL_R16UI (GLSL type r16ui, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RG16U</db:code></db:para>
</db:td>
<db:td><db:code>0x823A</db:code></db:td>
<db:td>
<db:para>GL_RG16UI (GLSL type rg16ui, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RGBA16U</db:code></db:para>
</db:td>
<db:td><db:code>0x8D76</db:code></db:td>
<db:td>
<db:para>GL_RGBA16UI (GLSL type rgba16ui, supported by OpenGL 4.2+, OpenGL ES 3.1+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::R32U</db:code></db:para>
</db:td>
<db:td><db:code>0x8236</db:code></db:td>
<db:td>
<db:para>GL_R32UI (GLSL type r32ui, supported by OpenGL 4.2+, OpenGL ES 3.1)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RG32U</db:code></db:para>
</db:td>
<db:td><db:code>0x823C</db:code></db:td>
<db:td>
<db:para>GL_RG32UI (GLSL type rg32ui, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RGBA32U</db:code></db:para>
</db:td>
<db:td><db:code>0x8D70</db:code></db:td>
<db:td>
<db:para>GL_RGBA32UI (GLSL type rgba32ui, supported by OpenGL 4.2+, OpenGL ES 3.1+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::R8I</db:code></db:para>
</db:td>
<db:td><db:code>0x8231</db:code></db:td>
<db:td>
<db:para>GL_R8I (GLSL type r8i, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RG8I</db:code></db:para>
</db:td>
<db:td><db:code>0x8237</db:code></db:td>
<db:td>
<db:para>GL_RG8I (GLSL type rg8i, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RGBA8I</db:code></db:para>
</db:td>
<db:td><db:code>0x8D8E</db:code></db:td>
<db:td>
<db:para>GL_RGBA8I (GLSL type rgba8i, supported by OpenGL 4.2+, OpenGL ES 3.1+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::R16I</db:code></db:para>
</db:td>
<db:td><db:code>0x8233</db:code></db:td>
<db:td>
<db:para>GL_R16I (GLSL type r16i, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RG16I</db:code></db:para>
</db:td>
<db:td><db:code>0x8239</db:code></db:td>
<db:td>
<db:para>GL_RG16I (GLSL type rg16i, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RGBA16I</db:code></db:para>
</db:td>
<db:td><db:code>0x8D88</db:code></db:td>
<db:td>
<db:para>GL_RGBA16I (GLSL type rgba16i, supported by OpenGL 4.2+, OpenGL ES 3.1)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::R32I</db:code></db:para>
</db:td>
<db:td><db:code>0x8235</db:code></db:td>
<db:td>
<db:para>GL_R32I (GLSL type r32i, supported by OpenGL 4.2+, OpenGL ES 3.1+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RG32I</db:code></db:para>
</db:td>
<db:td><db:code>0x823B</db:code></db:td>
<db:td>
<db:para>GL_RG32I (GLSL type rg32i, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RGBA32I</db:code></db:para>
</db:td>
<db:td><db:code>0x8D82</db:code></db:td>
<db:td>
<db:para>GL_RGBA32I (GLSL type rgba32i, supported by OpenGL 4.2+, OpenGL ES 3.1+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::R16F</db:code></db:para>
</db:td>
<db:td><db:code>0x822D</db:code></db:td>
<db:td>
<db:para>GL_R16F (GLSL type r16f, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RG16F</db:code></db:para>
</db:td>
<db:td><db:code>0x822F</db:code></db:td>
<db:td>
<db:para>GL_RG16F (GLSL type rg16f, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RGBA16F</db:code></db:para>
</db:td>
<db:td><db:code>0x881A</db:code></db:td>
<db:td>
<db:para>GL_RGBA16F (GLSL type rgba16f, supported by OpenGL 4.2+, OpenGL ES 3.1+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::R32F</db:code></db:para>
</db:td>
<db:td><db:code>0x822E</db:code></db:td>
<db:td>
<db:para>GL_R32F (GLSL type r32f, supported by OpenGL 4.2+, OpenGL ES 3.1+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RG32F</db:code></db:para>
</db:td>
<db:td><db:code>0x8230</db:code></db:td>
<db:td>
<db:para>GL_RG32F (GLSL type rg32f, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RGBA32F</db:code></db:para>
</db:td>
<db:td><db:code>0x8814</db:code></db:td>
<db:td>
<db:para>GL_RGBA32F (GLSL type rgba32f, supported by OpenGL 4.2+, OpenGL ES 3.1+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RG11B10F</db:code></db:para>
</db:td>
<db:td><db:code>0x8C3A</db:code></db:td>
<db:td>
<db:para>GL_R11F_G11F_B10F (GLSL type r11f_g11f_b10f, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RGB10A2</db:code></db:para>
</db:td>
<db:td><db:code>0x8059</db:code></db:td>
<db:td>
<db:para>GL_RGB10_A2 (GLSL type rgb10_a2, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qt3drender.xml">Qt3DRender</db:link></db:emphasis>::<db:emphasis role="bold"><db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link></db:emphasis>::RGB10A2U</db:code></db:para>
</db:td>
<db:td><db:code>0x906F</db:code></db:td>
<db:td>
<db:para>GL_RGB10_A2UI (GLSL type rgb10_a2ui, supported by OpenGL 4.2+)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="access-prop">
<db:title>access : Access</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Access</db:type>
<db:varname>access</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">access</db:synopsisinfo>
<db:synopsisinfo role="setter">setAccess</db:synopsisinfo>
<db:synopsisinfo role="notifier">accessChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies the type of access we want to allow from our shader instances to the image. If a shader tries to write or read from an image that has incompatible access, the behavior is undefined.</db:para>
<db:para>The default value is <db:link xlink:href="qt3drender-qshaderimage.xml#Access-enum">QShaderImage::ReadWrite</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3drender-qshaderimage.xml#Access-enum">Qt3DRender::QShaderImage::Access</db:link></db:type> <db:emphasis role="bold">access</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAccess</db:emphasis>(<db:type><db:link xlink:href="qt3drender-qshaderimage.xml#Access-enum">Qt3DRender::QShaderImage::Access</db:link></db:type> <db:emphasis>access</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">accessChanged</db:emphasis>(<db:type><db:link xlink:href="qt3drender-qshaderimage.xml#Access-enum">Qt3DRender::QShaderImage::Access</db:link></db:type> <db:emphasis>access</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="format-prop">
<db:title>format : ImageFormat</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ImageFormat</db:type>
<db:varname>format</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">format</db:synopsisinfo>
<db:synopsisinfo role="setter">setFormat</db:synopsisinfo>
<db:synopsisinfo role="notifier">formatChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specifies the image format, which is essentially important when storing values in the Image from a shader.</db:para>
<db:para>The format doesn't have to be the same as the referenced texture's format. It however has to be compatible (matching in size but not necessarily by class type). For instance a texture of format R32F (size 32bits, class 1x32) could be used with an image of format RGBA8I (size 32bits, class 4x8). Table 8.27 of the <db:link xlink:href="https://www.khronos.org/registry/OpenGL/specs/gl/glspec45.core.pdf">OpenGL specifications</db:link> shows the size and class for all supported Image formats.</db:para>
<db:para>By default Qt3D will try to set the image format to match that of the referenced texture.</db:para>
<db:para>The default value is <db:link xlink:href="qt3drender-qshaderimage.xml#ImageFormat-enum">QShaderImage::Automatic</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3drender-qshaderimage.xml#ImageFormat-enum">Qt3DRender::QShaderImage::ImageFormat</db:link></db:type> <db:emphasis role="bold">format</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFormat</db:emphasis>(<db:type><db:link xlink:href="qt3drender-qshaderimage.xml#ImageFormat-enum">Qt3DRender::QShaderImage::ImageFormat</db:link></db:type> <db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">formatChanged</db:emphasis>(<db:type><db:link xlink:href="qt3drender-qshaderimage.xml#ImageFormat-enum">Qt3DRender::QShaderImage::ImageFormat</db:link></db:type> <db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="layer-prop">
<db:title>layer : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>layer</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">layer</db:synopsisinfo>
<db:synopsisinfo role="setter">setLayer</db:synopsisinfo>
<db:synopsisinfo role="notifier">layerChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds which layer out of the referenced texture should be used for the <db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link>. This property does nothing if <db:code role="parameter">layered</db:code> is set to true or if the reference texture's type isn't compatible with layers.</db:para>
<db:note>
<db:para>When the referenced texture is of type cube map or cube map array and <db:code role="parameter">ĺayered</db:code> is set to false, the face and layer are retrieved in the following manner:</db:para>
</db:note>
<db:programlisting language="cpp" role="bad">cubeMapLayer = layer / 6
cubeMapFace = layer - (cubeMapLayer * 6)
</db:programlisting>
<db:para>The default value is 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">layer</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLayer</db:emphasis>(<db:type>int</db:type> <db:emphasis>layer</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">layerChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>layer</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="layered-prop">
<db:title>layered : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>layered</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">layered</db:synopsisinfo>
<db:synopsisinfo role="setter">setLayered</db:synopsisinfo>
<db:synopsisinfo role="notifier">layeredChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>*</db:para>
<db:para>If set to true, if the referenced texture is a one-dimensional array, two-dimensional array, three-dimensional, cube map, cube map array, or two-dimensional multisample array texture, the entire level will be bound for all layers. If set to false, only the single layer specified by the <db:code role="parameter">layer</db:code> property will be bound.</db:para>
<db:para>The default value is <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">layered</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLayered</db:emphasis>(<db:type>bool</db:type> <db:emphasis>layered</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">layeredChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>layered</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="mipLevel-prop">
<db:title>mipLevel : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>mipLevel</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">mipLevel</db:synopsisinfo>
<db:synopsisinfo role="setter">setMipLevel</db:synopsisinfo>
<db:synopsisinfo role="notifier">mipLevelChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds which mipLevel out of the referenced texture should be used for the <db:link xlink:href="qt3drender-qshaderimage.xml">QShaderImage</db:link>.</db:para>
<db:para>The default value is 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">mipLevel</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMipLevel</db:emphasis>(<db:type>int</db:type> <db:emphasis>mipLevel</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">mipLevelChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>mipLevel</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:article>
