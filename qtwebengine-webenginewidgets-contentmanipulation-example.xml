<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Content Manipulation Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to load and manipulate web content.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/contentmanipulation-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Content Manipulation</db:emphasis> shows how to use JQuery with <db:link xlink:href="qtwebenginewidgets-index.xml">Qt WebEngine Widgets</db:link> to create a web browser with special effects and content manipulation.</db:para>
<db:para>In the application, we call QWebEnginePage::runJavaScript() to execute jQuery JavaScript code. We implement a <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> with a <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> as a central widget to build up the browser itself.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="mainwindow-class-definition">
<db:title>MainWindow Class Definition</db:title>
<db:para>The <db:code>MainWindow</db:code> class inherits <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>. It implements a number of slots to perform actions on both the application and on the web content:</db:para>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(const QUrl&amp; url);

protected slots:

    void adjustLocation();
    void changeLocation();
    void adjustTitle();
    void setProgress(int p);
    void finishLoading(bool);

    void viewSource();

    void highlightAllLinks();
    void rotateImages(bool invert);
    void removeGifImages();
    void removeInlineFrames();
    void removeObjectElements();
    void removeEmbeddedElements();

private:
    QString jQuery;
    QWebEngineView *view;
    QLineEdit *locationEdit;
    QAction *rotateAction;
    int progress;
};

</db:programlisting>
<db:para>We also declare a <db:link xlink:href="qstring.xml">QString</db:link> that contains the jQuery, a <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> that displays the web content, and a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> that acts as the address bar.</db:para>
</db:section>
<db:section xml:id="mainwindow-class-implementation">
<db:title>MainWindow Class Implementation</db:title>
<db:para>We start by implementing the constructor. The first part of the constructor sets the value of <db:code>progress</db:code> to 0. This value will be used later in the code to visualize the loading of a web page:</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow(const QUrl&amp; url)
{
    progress = 0;

</db:programlisting>
<db:para>Next, the jQuery library is loaded by using a <db:link xlink:href="qfile.xml">QFile</db:link> and reading the file content. The jQuery library is a JavaScript library that provides different functions for manipulating HTML:</db:para>
<db:programlisting language="cpp">    QFile file;
    file.setFileName(&quot;:/jquery.min.js&quot;);
    file.open(QIODevice::ReadOnly);
    jQuery = file.readAll();
    jQuery.append(&quot;\nvar qt = { 'jQuery': jQuery.noConflict(true) };&quot;);
    file.close();

</db:programlisting>
<db:para>The second part of the constructor creates a <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> and connects slots to the view's signals:</db:para>
<db:programlisting language="cpp">    view = new QWebEngineView(this);
    view-&gt;load(url);
    connect(view, SIGNAL(loadFinished(bool)), SLOT(adjustLocation()));
    connect(view, SIGNAL(titleChanged(QString)), SLOT(adjustTitle()));
    connect(view, SIGNAL(loadProgress(int)), SLOT(setProgress(int)));
    connect(view, SIGNAL(loadFinished(bool)), SLOT(finishLoading(bool)));

</db:programlisting>
<db:para>Furthermore, we create a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> as the browser's address bar. We then set the horizontal <db:link xlink:href="qsizepolicy.xml">QSizePolicy</db:link> to fill the available area in the browser at all times. We add the <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> to a <db:link xlink:href="qtoolbar.xml">QToolBar</db:link> together with a set of navigation actions from QWebEngineView::pageAction():</db:para>
<db:programlisting language="cpp">    locationEdit = new QLineEdit(this);
    locationEdit-&gt;setSizePolicy(QSizePolicy::Expanding, locationEdit-&gt;sizePolicy().verticalPolicy());
    connect(locationEdit, SIGNAL(returnPressed()), SLOT(changeLocation()));

    QToolBar *toolBar = addToolBar(tr(&quot;Navigation&quot;));
    toolBar-&gt;addAction(view-&gt;pageAction(QWebEnginePage::Back));
    toolBar-&gt;addAction(view-&gt;pageAction(QWebEnginePage::Forward));
    toolBar-&gt;addAction(view-&gt;pageAction(QWebEnginePage::Reload));
    toolBar-&gt;addAction(view-&gt;pageAction(QWebEnginePage::Stop));
    toolBar-&gt;addWidget(locationEdit);

</db:programlisting>
<db:para>The third part of the constructor implements two <db:link xlink:href="qmenu.xml">QMenu</db:link> widgets and assigns a set of actions to them:</db:para>
<db:programlisting language="cpp">    QMenu *viewMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;View&quot;));
    QAction* viewSourceAction = new QAction(&quot;Page Source&quot;, this);
    connect(viewSourceAction, SIGNAL(triggered()), SLOT(viewSource()));
    viewMenu-&gt;addAction(viewSourceAction);

    QMenu *effectMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Effect&quot;));
    effectMenu-&gt;addAction(&quot;Highlight all links&quot;, this, SLOT(highlightAllLinks()));

    rotateAction = new QAction(this);
    rotateAction-&gt;setIcon(style()-&gt;standardIcon(QStyle::SP_FileDialogDetailedView));
    rotateAction-&gt;setCheckable(true);
    rotateAction-&gt;setText(tr(&quot;Turn images upside down&quot;));
    connect(rotateAction, SIGNAL(toggled(bool)), this, SLOT(rotateImages(bool)));
    effectMenu-&gt;addAction(rotateAction);

    QMenu *toolsMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Tools&quot;));
    toolsMenu-&gt;addAction(tr(&quot;Remove GIF images&quot;), this, SLOT(removeGifImages()));
    toolsMenu-&gt;addAction(tr(&quot;Remove all inline frames&quot;), this, SLOT(removeInlineFrames()));
    toolsMenu-&gt;addAction(tr(&quot;Remove all object elements&quot;), this, SLOT(removeObjectElements()));
    toolsMenu-&gt;addAction(tr(&quot;Remove all embedded elements&quot;), this, SLOT(removeEmbeddedElements()));

</db:programlisting>
<db:para>The last line sets the <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> as the central widget in the <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>:</db:para>
<db:programlisting language="cpp">    setCentralWidget(view);
}

</db:programlisting>
<db:para>When the page is loaded, <db:code>adjustLocation()</db:code> is triggered by the <db:code>loadFinished()</db:code> signal in <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link> to update the address bar:</db:para>
<db:programlisting language="cpp">void MainWindow::adjustLocation()
{
    locationEdit-&gt;setText(view-&gt;url().toString());
}

</db:programlisting>
<db:para>In <db:code>changeLocation()</db:code>, we create a <db:link xlink:href="qurl.xml">QUrl</db:link> object, and then use it to load the page into the <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link>. When the new web page has finished loading, <db:code>adjustLocation()</db:code> will be run once more to update the address bar:</db:para>
<db:programlisting language="cpp">void MainWindow::changeLocation()
{
    QUrl url = QUrl::fromUserInput(locationEdit-&gt;text());
    view-&gt;load(url);
    view-&gt;setFocus();
}

</db:programlisting>
<db:para>The <db:code>adjustTitle()</db:code> method sets the window title and displays the loading progress:</db:para>
<db:programlisting language="cpp">void MainWindow::adjustTitle()
{
    if (progress &lt;= 0 || progress &gt;= 100)
        setWindowTitle(view-&gt;title());
    else
        setWindowTitle(QString(&quot;%1 (%2%)&quot;).arg(view-&gt;title()).arg(progress));
}

void MainWindow::setProgress(int p)
{
    progress = p;
    adjustTitle();
}

</db:programlisting>
<db:para>This slot is triggered by the <db:code>titleChanged()</db:code> signal in <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link>.</db:para>
<db:para>When a web page has loaded, the <db:code>finishLoading()</db:code> method is triggered by the <db:code>loadFinished()</db:code> signal in <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link>. The method then updates the progress in the title bar and calls <db:code>runJavaScript()</db:code> to evaluate the jQuery library against the current web page:</db:para>
<db:programlisting language="cpp">void MainWindow::finishLoading(bool)
{
    progress = 100;
    adjustTitle();
    view-&gt;page()-&gt;runJavaScript(jQuery);

    rotateImages(rotateAction-&gt;isChecked());
}

</db:programlisting>
<db:para>This means that the JavaScript can be viewed as a part of the content loaded into the <db:link xlink:href="qwebengineview.xml">QWebEngineView</db:link>, and therefore needs to be loaded every time a new page is loaded. Once the jQuery library is loaded, we can start executing the different jQuery functions in the browser.</db:para>
<db:para>The <db:code>rotateImages()</db:code> function is then called explicitly to make sure that the images of the newly loaded page respect the state of the toggle action.</db:para>
<db:para>The first jQuery-based function, <db:code>highlightAllLinks()</db:code>, is designed to highlight all links in the current webpage. The JavaScript code looks for web elements named <db:emphasis>a</db:emphasis>, which is the tag for a hyperlink. For each such element, the background color is set to be yellow by using CSS:</db:para>
<db:programlisting language="cpp">void MainWindow::highlightAllLinks()
{
    QString code = &quot;qt.jQuery('a').each( function () { qt.jQuery(this).css('background-color', 'yellow') } ); undefined&quot;;
    view-&gt;page()-&gt;runJavaScript(code);
}

</db:programlisting>
<db:para>We append <db:code>undefined</db:code> after the jQuery call to prevent a possible recursion loop and crash caused by the way the elements returned by the each iterator elements reference each other, which causes problems upon converting them to <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>The <db:code>rotateImages()</db:code> function rotates the images on the current web page. This JavaScript code relies on CSS transforms. It looks up all <db:emphasis>img</db:emphasis> elements and rotates the images 180 degrees and then back again:</db:para>
<db:programlisting language="cpp">void MainWindow::rotateImages(bool invert)
{
    QString code;

    if (invert)
        code = &quot;qt.jQuery('img').each( function () { qt.jQuery(this).css('-webkit-transition', '-webkit-transform 2s'); qt.jQuery(this).css('-webkit-transform', 'rotate(180deg)') } ); undefined&quot;;
    else
        code = &quot;qt.jQuery('img').each( function () { qt.jQuery(this).css('-webkit-transition', '-webkit-transform 2s'); qt.jQuery(this).css('-webkit-transform', 'rotate(0deg)') } ); undefined&quot;;
    view-&gt;page()-&gt;runJavaScript(code);
}

</db:programlisting>
<db:para>The remaining methods remove different elements from the current web page. The <db:code>removeGifImages()</db:code> removes all GIF images on the page by looking up the <db:emphasis>src</db:emphasis> attribute of all the elements on the web page. Any element with a <db:emphasis>gif</db:emphasis> file as its source is removed:</db:para>
<db:programlisting language="cpp">void MainWindow::removeGifImages()
{
    QString code = &quot;qt.jQuery('[src*=gif]').remove()&quot;;
    view-&gt;page()-&gt;runJavaScript(code);
}

</db:programlisting>
<db:para>The <db:code>removeInlineFrames()</db:code> method removes all <db:emphasis>iframe</db:emphasis> or inline elements:</db:para>
<db:programlisting language="cpp">void MainWindow::removeInlineFrames()
{
    QString code = &quot;qt.jQuery('iframe').remove()&quot;;
    view-&gt;page()-&gt;runJavaScript(code);
}

</db:programlisting>
<db:para>The <db:code>removeObjectElements()</db:code> method removes all <db:emphasis>object</db:emphasis> elements:</db:para>
<db:programlisting language="cpp">void MainWindow::removeObjectElements()
{
    QString code = &quot;qt.jQuery('object').remove()&quot;;
    view-&gt;page()-&gt;runJavaScript(code);
}

</db:programlisting>
<db:para>The <db:code>removeEmbeddedElements()</db:code> method removes any elements using the <db:emphasis>embed</db:emphasis> tag, such as plugins embedded on the page:</db:para>
<db:programlisting language="cpp">void MainWindow::removeEmbeddedElements()
{
    QString code = &quot;qt.jQuery('embed').remove()&quot;;
    view-&gt;page()-&gt;runJavaScript(code);
}

</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/contentmanipulation/contentmanipulation.pro">webenginewidgets/contentmanipulation/contentmanipulation.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/contentmanipulation/jquery.min.js">webenginewidgets/contentmanipulation/jquery.min.js</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/contentmanipulation/jquery.qrc">webenginewidgets/contentmanipulation/jquery.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/contentmanipulation/main.cpp">webenginewidgets/contentmanipulation/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/contentmanipulation/mainwindow.cpp">webenginewidgets/contentmanipulation/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webenginewidgets/contentmanipulation/mainwindow.h">webenginewidgets/contentmanipulation/mainwindow.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
