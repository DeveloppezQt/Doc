<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Sub-Attaq</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows Qt's ability to combine <db:link xlink:href="animation-overview.xml">the animation framework</db:link> and <db:link xlink:href="statemachine-api.xml">the state machine framework</db:link> to create a game.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the QtCore module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL21$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia. For licensing terms and
** conditions see http://qt.digia.com/licensing. For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights. These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** $QT_END_LICENSE$
**
****************************************************************************/

//Own
#include &quot;states.h&quot;
#include &quot;graphicsscene.h&quot;
#include &quot;boat.h&quot;
#include &quot;submarine.h&quot;
#include &quot;torpedo.h&quot;
#include &quot;animationmanager.h&quot;
#include &quot;progressitem.h&quot;
#include &quot;textinformationitem.h&quot;

//Qt
#include &lt;QtWidgets/QMessageBox&gt;
#include &lt;QtWidgets/QGraphicsView&gt;
#include &lt;QtCore/QStateMachine&gt;
#include &lt;QtWidgets/QKeyEventTransition&gt;
#include &lt;QtCore/QFinalState&gt;

PlayState::PlayState(GraphicsScene *scene, QState *parent)
    : QState(parent),
    scene(scene),
    machine(0),
    currentLevel(0),
    score(0)
{
}

PlayState::~PlayState()
{
    delete machine;
}

void PlayState::onEntry(QEvent *)
{
    //We are now playing?
    if (machine) {
        machine-&gt;stop();
        //we hide the information
        scene-&gt;textInformationItem-&gt;hide();
        scene-&gt;clearScene();
        currentLevel = 0;
        score = 0;
        delete machine;
    }

    machine = new QStateMachine;

    //This state is when player is playing
    LevelState *levelState = new LevelState(scene, this, machine);

    //This state is when the player is actually playing but the game is not paused
    QState *playingState = new QState(levelState);
    levelState-&gt;setInitialState(playingState);

    //This state is when the game is paused
    PauseState *pauseState = new PauseState(scene, levelState);

    //We have one view, it receive the key press event
    QKeyEventTransition *pressPplay = new QKeyEventTransition(scene-&gt;views().at(0), QEvent::KeyPress, Qt::Key_P);
    pressPplay-&gt;setTargetState(pauseState);
    QKeyEventTransition *pressPpause = new QKeyEventTransition(scene-&gt;views().at(0), QEvent::KeyPress, Qt::Key_P);
    pressPpause-&gt;setTargetState(playingState);

    //Pause &quot;P&quot; is triggered, the player pause the game
    playingState-&gt;addTransition(pressPplay);

    //To get back playing when the game has been paused
    pauseState-&gt;addTransition(pressPpause);

    //This state is when player have lost
    LostState *lostState = new LostState(scene, this, machine);

    //This state is when player have won
    WinState *winState = new WinState(scene, this, machine);

    //The boat has been destroyed then the game is finished
    levelState-&gt;addTransition(scene-&gt;boat, SIGNAL(boatExecutionFinished()),lostState);

    //This transition check if we won or not
    WinTransition *winTransition = new WinTransition(scene, this, winState);

    //The boat has been destroyed then the game is finished
    levelState-&gt;addTransition(winTransition);

    //This state is an animation when the score changed
    UpdateScoreState *scoreState = new UpdateScoreState(levelState);

    //This transition update the score when a submarine die
    UpdateScoreTransition *scoreTransition = new UpdateScoreTransition(scene, this, levelState);
    scoreTransition-&gt;setTargetState(scoreState);

    //The boat has been destroyed then the game is finished
    playingState-&gt;addTransition(scoreTransition);

    //We go back to play state
    scoreState-&gt;addTransition(playingState);

    //We start playing!!!
    machine-&gt;setInitialState(levelState);

    //Final state
    QFinalState *final = new QFinalState(machine);

    //This transition is triggered when the player press space after completing a level
    CustomSpaceTransition *spaceTransition = new CustomSpaceTransition(scene-&gt;views().at(0), this, QEvent::KeyPress, Qt::Key_Space);
    spaceTransition-&gt;setTargetState(levelState);
    winState-&gt;addTransition(spaceTransition);

    //We lost we should reach the final state
    lostState-&gt;addTransition(lostState, SIGNAL(finished()), final);

    machine-&gt;start();
}

LevelState::LevelState(GraphicsScene *scene, PlayState *game, QState *parent) : QState(parent), scene(scene), game(game)
{
}
void LevelState::onEntry(QEvent *)
{
    initializeLevel();
}

void LevelState::initializeLevel()
{
    //we re-init the boat
    scene-&gt;boat-&gt;setPos(scene-&gt;width()/2, scene-&gt;sealLevel() - scene-&gt;boat-&gt;size().height());
    scene-&gt;boat-&gt;setCurrentSpeed(0);
    scene-&gt;boat-&gt;setCurrentDirection(Boat::None);
    scene-&gt;boat-&gt;setBombsLaunched(0);
    scene-&gt;boat-&gt;show();
    scene-&gt;setFocusItem(scene-&gt;boat, Qt::OtherFocusReason);
    scene-&gt;boat-&gt;run();

    scene-&gt;progressItem-&gt;setScore(game-&gt;score);
    scene-&gt;progressItem-&gt;setLevel(game-&gt;currentLevel + 1);

    GraphicsScene::LevelDescription currentLevelDescription = scene-&gt;levelsData.value(game-&gt;currentLevel);

    for (int i = 0; i &lt; currentLevelDescription.submarines.size(); ++i ) {

        QPair&lt;int,int&gt; subContent = currentLevelDescription.submarines.at(i);
        GraphicsScene::SubmarineDescription submarineDesc = scene-&gt;submarinesData.at(subContent.first);

        for (int j = 0; j &lt; subContent.second; ++j ) {
            SubMarine *sub = new SubMarine(submarineDesc.type, submarineDesc.name, submarineDesc.points);
            scene-&gt;addItem(sub);
            int random = (qrand() % 15 + 1);
            qreal x = random == 13 || random == 5 ? 0 : scene-&gt;width() - sub-&gt;size().width();
            qreal y = scene-&gt;height() -(qrand() % 150 + 1) - sub-&gt;size().height();
            sub-&gt;setPos(x,y);
            sub-&gt;setCurrentDirection(x == 0 ? SubMarine::Right : SubMarine::Left);
            sub-&gt;setCurrentSpeed(qrand() % 3 + 1);
        }
    }
}

/** Pause State */
PauseState::PauseState(GraphicsScene *scene, QState *parent) : QState(parent),scene(scene)
{
}
void PauseState::onEntry(QEvent *)
{
    AnimationManager::self()-&gt;pauseAll();
    scene-&gt;boat-&gt;setEnabled(false);
}
void PauseState::onExit(QEvent *)
{
    AnimationManager::self()-&gt;resumeAll();
    scene-&gt;boat-&gt;setEnabled(true);
    scene-&gt;boat-&gt;setFocus();
}

/** Lost State */
LostState::LostState(GraphicsScene *scene, PlayState *game, QState *parent) : QState(parent), scene(scene), game(game)
{
}

void LostState::onEntry(QEvent *)
{
    //The message to display
    QString message = QString(&quot;You lose on level %1. Your score is %2.&quot;).arg(game-&gt;currentLevel+1).arg(game-&gt;score);

    //We set the level back to 0
    game-&gt;currentLevel = 0;

    //We set the score back to 0
    game-&gt;score = 0;

    //We clear the scene
    scene-&gt;clearScene();

    //We inform the player
    scene-&gt;textInformationItem-&gt;setMessage(message);
    scene-&gt;textInformationItem-&gt;show();
}

void LostState::onExit(QEvent *)
{
    //we hide the information
    scene-&gt;textInformationItem-&gt;hide();
}

/** Win State */
WinState::WinState(GraphicsScene *scene, PlayState *game, QState *parent) : QState(parent), scene(scene), game(game)
{
}

void WinState::onEntry(QEvent *)
{
    //We clear the scene
    scene-&gt;clearScene();

    QString message;
    if (scene-&gt;levelsData.size() - 1 != game-&gt;currentLevel) {
        message = QString(&quot;You win the level %1. Your score is %2.\nPress Space to continue.&quot;).arg(game-&gt;currentLevel+1).arg(game-&gt;score);
        //We increment the level number
        game-&gt;currentLevel++;
    } else {
        message = QString(&quot;You finish the game on level %1. Your score is %2.&quot;).arg(game-&gt;currentLevel+1).arg(game-&gt;score);
        //We set the level back to 0
        game-&gt;currentLevel = 0;
        //We set the score back to 0
        game-&gt;score = 0;
    }

    //We inform the player
    scene-&gt;textInformationItem-&gt;setMessage(message);
    scene-&gt;textInformationItem-&gt;show();
}

void WinState::onExit(QEvent *)
{
    //we hide the information
    scene-&gt;textInformationItem-&gt;hide();
}

/** UpdateScore State */
UpdateScoreState::UpdateScoreState(QState *parent) : QState(parent)
{
}

/** Win transition */
UpdateScoreTransition::UpdateScoreTransition(GraphicsScene *scene, PlayState *game, QAbstractState *target)
    : QSignalTransition(scene,SIGNAL(subMarineDestroyed(int))),
    game(game), scene(scene)
{
    setTargetState(target);
}

bool UpdateScoreTransition::eventTest(QEvent *event)
{
    if (!QSignalTransition::eventTest(event))
        return false;
    QStateMachine::SignalEvent *se = static_cast&lt;QStateMachine::SignalEvent*&gt;(event);
    game-&gt;score += se-&gt;arguments().at(0).toInt();
    scene-&gt;progressItem-&gt;setScore(game-&gt;score);
    return true;
}

/** Win transition */
WinTransition::WinTransition(GraphicsScene *scene, PlayState *game, QAbstractState *target)
    : QSignalTransition(scene,SIGNAL(allSubMarineDestroyed(int))),
    game(game), scene(scene)
{
    setTargetState(target);
}

bool WinTransition::eventTest(QEvent *event)
{
    if (!QSignalTransition::eventTest(event))
        return false;
    QStateMachine::SignalEvent *se = static_cast&lt;QStateMachine::SignalEvent*&gt;(event);
    game-&gt;score += se-&gt;arguments().at(0).toInt();
    scene-&gt;progressItem-&gt;setScore(game-&gt;score);
    return true;
}

/** Space transition */
CustomSpaceTransition::CustomSpaceTransition(QWidget *widget, PlayState *game, QEvent::Type type, int key)
    :   QKeyEventTransition(widget, type, key),
        game(game)
{
}

bool CustomSpaceTransition::eventTest(QEvent *event)
{
    if (!QKeyEventTransition::eventTest(event))
        return false;
    return (game-&gt;currentLevel != 0);
}

</db:programlisting>
</db:article>
