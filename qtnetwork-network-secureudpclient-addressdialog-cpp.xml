<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>DTLS client</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example demonstrates how to implement client-side DTLS connections.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2018 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;addressdialog.h&quot;
#include &quot;ui_addressdialog.h&quot;

#include &amp;lt;QtCore&amp;gt;
#include &amp;lt;QtNetwork&amp;gt;
#include &amp;lt;QtWidgets&amp;gt;

#include &amp;lt;limits&amp;gt;

AddressDialog::AddressDialog(QWidget *parent)
    : QDialog(parent),
      ui(new Ui::AddressDialog)
{
    ui-&amp;gt;setupUi(this);
    setupHostSelector();
    setupPortSelector();
}

AddressDialog::~AddressDialog()
{
    delete ui;
}

QString AddressDialog::remoteName() const
{
    if (ui-&amp;gt;addressSelector-&amp;gt;count())
        return ui-&amp;gt;addressSelector-&amp;gt;currentText();
    return {};
}

quint16 AddressDialog::remotePort() const
{
    return quint16(ui-&amp;gt;portSelector-&amp;gt;text().toUInt());
}

void AddressDialog::setupHostSelector()
{
    QString name(QHostInfo::localHostName());
    if (!name.isEmpty()) {
        ui-&amp;gt;addressSelector-&amp;gt;addItem(name);
        const QString domain = QHostInfo::localDomainName();
        if (!domain.isEmpty())
            ui-&amp;gt;addressSelector-&amp;gt;addItem(name + QChar('.') + domain);
    }

    if (name != QStringLiteral(&quot;localhost&quot;))
        ui-&amp;gt;addressSelector-&amp;gt;addItem(QStringLiteral(&quot;localhost&quot;));

    const QList&amp;lt;QHostAddress&amp;gt; ipAddressesList = QNetworkInterface::allAddresses();
    for (const QHostAddress &amp;amp;ipAddress : ipAddressesList) {
        if (!ipAddress.isLoopback())
            ui-&amp;gt;addressSelector-&amp;gt;addItem(ipAddress.toString());
    }

    ui-&amp;gt;addressSelector-&amp;gt;insertSeparator(ui-&amp;gt;addressSelector-&amp;gt;count());

    for (const QHostAddress &amp;amp;ipAddress : ipAddressesList) {
        if (ipAddress.isLoopback())
            ui-&amp;gt;addressSelector-&amp;gt;addItem(ipAddress.toString());
    }
}

void AddressDialog::setupPortSelector()
{
    ui-&amp;gt;portSelector-&amp;gt;setValidator(new QIntValidator(0, std::numeric_limits&amp;lt;quint16&amp;gt;::max(),
                                                     ui-&amp;gt;portSelector));
    ui-&amp;gt;portSelector-&amp;gt;setText(QStringLiteral(&quot;22334&quot;));
}

</db:programlisting>
</db:article>
