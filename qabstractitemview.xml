<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractItemView Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> class provides the basic functionality for item view classes.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractItemView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractscrollarea.xml" xlink:role="class">QAbstractScrollArea</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qcolumnview.xml" xlink:role="class">QColumnView</db:link>, <db:link xlink:href="qheaderview.xml" xlink:role="class">QHeaderView</db:link>, <db:link xlink:href="qlistview.xml" xlink:role="class">QListView</db:link>, <db:link xlink:href="qtableview.xml" xlink:role="class">QTableView</db:link>, and <db:link xlink:href="qtreeview.xml" xlink:role="class">QTreeView</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractItemView is part of <db:simplelist><db:member>model-view</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> class is the base class for every standard view that uses a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>. <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> is an abstract class and cannot itself be instantiated. It provides a standard interface for interoperating with models through the signals and slots mechanism, enabling subclasses to be kept up-to-date with changes to their models. This class provides standard support for keyboard and mouse navigation, viewport scrolling, item editing, and selections. The keyboard navigation implements this functionality:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Keys</db:para>
</db:th>
<db:th>
<db:para>Functionality</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Arrow keys</db:para>
</db:td>
<db:td>
<db:para>Changes the current item and selects it.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Arrow keys</db:para>
</db:td>
<db:td>
<db:para>Changes the current item but does not select it.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Shift+Arrow keys</db:para>
</db:td>
<db:td>
<db:para>Changes the current item and selects it. The previously selected item(s) is not deselected.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Space</db:para>
</db:td>
<db:td>
<db:para>Toggles selection of the current item.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Tab/Backtab</db:para>
</db:td>
<db:td>
<db:para>Changes the current item to the next/previous item.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Home/End</db:para>
</db:td>
<db:td>
<db:para>Selects the first/last item in the model.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Page up/Page down</db:para>
</db:td>
<db:td>
<db:para>Scrolls the rows shown up/down by the number of visible rows in the view.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+A</db:para>
</db:td>
<db:td>
<db:para>Selects all items in the model.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that the above table assumes that the <db:link xlink:href="qabstractitemview.xml#selectionMode-prop">selection mode</db:link> allows the operations. For instance, you cannot select items if the selection mode is <db:link xlink:href="qabstractitemview.xml#SelectionMode-enum">QAbstractItemView::NoSelection</db:link>.</db:para>
<db:para>The <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> class is one of the <db:link xlink:href="model-view-programming.xml#model-view-classes">Model/View Classes</db:link> and is part of Qt's <db:link xlink:href="model-view-programming.xml">model/view framework</db:link>.</db:para>
<db:para>The view classes that inherit <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> only need to implement their own view-specific functionality, such as drawing items, returning the geometry of items, finding items, etc.</db:para>
<db:para><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> provides common slots such as <db:link xlink:href="qabstractitemview.xml#edit">edit</db:link>() and <db:link xlink:href="qabstractitemview.xml#setCurrentIndex">setCurrentIndex</db:link>(). Many protected slots are also provided, including <db:link xlink:href="qabstractitemview.xml#dataChanged">dataChanged</db:link>(), <db:link xlink:href="qabstractitemview.xml#rowsInserted">rowsInserted</db:link>(), <db:link xlink:href="qabstractitemview.xml#rowsAboutToBeRemoved">rowsAboutToBeRemoved</db:link>(), <db:link xlink:href="qabstractitemview.xml#selectionChanged">selectionChanged</db:link>(), and <db:link xlink:href="qabstractitemview.xml#currentChanged">currentChanged</db:link>().</db:para>
<db:para>The root item is returned by <db:link xlink:href="qabstractitemview.xml#rootIndex">rootIndex</db:link>(), and the current item by <db:link xlink:href="qabstractitemview.xml#currentIndex">currentIndex</db:link>(). To make sure that an item is visible use <db:link xlink:href="qabstractitemview.xml#scrollTo">scrollTo</db:link>().</db:para>
<db:para>Some of <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link>'s functions are concerned with scrolling, for example <db:link xlink:href="qabstractitemview.xml#horizontalScrollMode-prop">setHorizontalScrollMode</db:link>() and <db:link xlink:href="qabstractitemview.xml#verticalScrollMode-prop">setVerticalScrollMode</db:link>(). To set the range of the scroll bars, you can, for example, reimplement the view's <db:link xlink:href="qabstractitemview.xml#resizeEvent">resizeEvent</db:link>() function:</db:para>
<db:programlisting language="cpp">void MyView::resizeEvent(QResizeEvent *event) {
    horizontalScrollBar()-&amp;gt;setRange(0, realWidth - width());
    ...
}
</db:programlisting>
<db:para>Note that the range is not updated until the widget is shown.</db:para>
<db:para>Several other functions are concerned with selection control; for example <db:link xlink:href="qabstractitemview.xml#selectionMode-prop">setSelectionMode</db:link>(), and <db:link xlink:href="qabstractitemview.xml#selectionBehavior-prop">setSelectionBehavior</db:link>(). This class provides a default selection model to work with (<db:link xlink:href="qabstractitemview.xml#selectionModel">selectionModel</db:link>()), but this can be replaced by using <db:link xlink:href="qabstractitemview.xml#setSelectionModel">setSelectionModel</db:link>() with an instance of <db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link>.</db:para>
<db:para>For complete control over the display and editing of items you can specify a delegate with <db:link xlink:href="qabstractitemview.xml#setItemDelegate">setItemDelegate</db:link>().</db:para>
<db:para><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> provides a lot of protected functions. Some are concerned with editing, for example, <db:link xlink:href="qabstractitemview.xml#edit">edit</db:link>(), and <db:link xlink:href="qabstractitemview.xml#commitData">commitData</db:link>(), whilst others are keyboard and mouse event handlers.</db:para>
<db:note>
<db:para>If you inherit <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> and intend to update the contents of the viewport, you should use viewport-&gt;<db:link xlink:href="qabstractitemview.xml#update">update</db:link>() instead of <db:link xlink:href="qwidget.xml#update">update</db:link>() as all painting operations take place on the viewport.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="model-view-programming.xml#view-classes">View Classes</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CursorAction-enum">
<db:title>enum QAbstractItemView::CursorAction</db:title>
<db:enumsynopsis>
<db:enumname>CursorAction</db:enumname>
<db:enumitem>
<db:enumidentifier>MoveUp</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MoveDown</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MoveLeft</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MoveRight</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MoveHome</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MoveEnd</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MovePageUp</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MovePageDown</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MoveNext</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MovePrevious</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the different ways to navigate between items,</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::MoveUp</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Move to the item above the current item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::MoveDown</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Move to the item below the current item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::MoveLeft</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Move to the item left of the current item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::MoveRight</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Move to the item right of the current item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::MoveHome</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Move to the top-left corner item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::MoveEnd</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Move to the bottom-right corner item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::MovePageUp</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Move one page up above the current item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::MovePageDown</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Move one page down below the current item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::MoveNext</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Move to the item after the current item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::MovePrevious</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Move to the item before the current item.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#moveCursor">moveCursor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="DragDropMode-enum">
<db:title>enum QAbstractItemView::DragDropMode</db:title>
<db:enumsynopsis>
<db:enumname>DragDropMode</db:enumname>
<db:enumitem>
<db:enumidentifier>NoDragDrop</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DragOnly</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DropOnly</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DragDrop</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InternalMove</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Describes the various drag and drop events the view can act upon. By default the view does not support dragging or dropping (<db:code>NoDragDrop</db:code>).</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::NoDragDrop</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Does not support dragging or dropping.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::DragOnly</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The view supports dragging of its own items</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::DropOnly</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The view accepts drops</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::DragDrop</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The view supports both dragging and dropping</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::InternalMove</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The view accepts move (<db:emphasis role="bold">not copy</db:emphasis>) operations only from itself.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that the model used needs to provide support for drag and drop operations.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#dragDropMode-prop">setDragDropMode</db:link>()</db:member>
<db:member><db:link xlink:href="model-view-programming.xml#using-drag-and-drop-with-item-views">Using drag and drop with item views</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="DropIndicatorPosition-enum">
<db:title>enum QAbstractItemView::DropIndicatorPosition</db:title>
<db:enumsynopsis>
<db:enumname>DropIndicatorPosition</db:enumname>
<db:enumitem>
<db:enumidentifier>OnItem</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AboveItem</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BelowItem</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OnViewport</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum indicates the position of the drop indicator in relation to the index at the current mouse position:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::OnItem</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The item will be dropped on the index.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::AboveItem</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The item will be dropped above the index.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::BelowItem</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The item will be dropped below the index.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::OnViewport</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The item will be dropped onto a region of the viewport with no items. The way each view handles items dropped onto the viewport depends on the behavior of the underlying model in use.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="EditTrigger-enum">
<db:title>enum QAbstractItemView::EditTrigger</db:title>
<db:bridgehead renderas="sect2">flags QAbstractItemView::EditTriggers</db:bridgehead>
<db:enumsynopsis>
<db:enumname>EditTrigger</db:enumname>
<db:enumitem>
<db:enumidentifier>NoEditTriggers</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CurrentChanged</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DoubleClicked</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SelectedClicked</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EditKeyPressed</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnyKeyPressed</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AllEditTriggers</db:enumidentifier>
<db:enumvalue>31</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QAbstractItemView::EditTriggers</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes actions which will initiate item editing.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::NoEditTriggers</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No editing possible.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::CurrentChanged</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Editing start whenever current item changes.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::DoubleClicked</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Editing starts when an item is double clicked.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::SelectedClicked</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Editing starts when clicking on an already selected item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::EditKeyPressed</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Editing starts when the platform edit key has been pressed over an item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::AnyKeyPressed</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Editing starts when any key is pressed over an item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::AllEditTriggers</db:code></db:para>
</db:td>
<db:td><db:code>31</db:code></db:td>
<db:td>
<db:para>Editing starts for all above actions.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>EditTriggers</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;EditTrigger&gt;. </db:code>It stores an OR combination of <db:code>EditTrigger</db:code> values.</db:para>
</db:section>
<db:section xml:id="ScrollHint-enum">
<db:title>enum QAbstractItemView::ScrollHint</db:title>
<db:enumsynopsis>
<db:enumname>ScrollHint</db:enumname>
<db:enumitem>
<db:enumidentifier>EnsureVisible</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PositionAtTop</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PositionAtBottom</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PositionAtCenter</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::EnsureVisible</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Scroll to ensure that the item is visible.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::PositionAtTop</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Scroll to position the item at the top of the viewport.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::PositionAtBottom</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Scroll to position the item at the bottom of the viewport.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::PositionAtCenter</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Scroll to position the item at the center of the viewport.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ScrollMode-enum">
<db:title>enum QAbstractItemView::ScrollMode</db:title>
<db:enumsynopsis>
<db:enumname>ScrollMode</db:enumname>
<db:enumitem>
<db:enumidentifier>ScrollPerItem</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ScrollPerPixel</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Describes how the scrollbar should behave. When setting the scroll mode to ScrollPerPixel the single step size will adjust automatically unless it was set explicitly using <db:link xlink:href="qabstractslider.xml#singleStep-prop">setSingleStep</db:link>(). The automatic adjustment can be restored by setting the single step size to -1.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::ScrollPerItem</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The view will scroll the contents one item at a time.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::ScrollPerPixel</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The view will scroll the contents one pixel at a time.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="SelectionBehavior-enum">
<db:title>enum QAbstractItemView::SelectionBehavior</db:title>
<db:enumsynopsis>
<db:enumname>SelectionBehavior</db:enumname>
<db:enumitem>
<db:enumidentifier>SelectItems</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SelectRows</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SelectColumns</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::SelectItems</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Selecting single items.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::SelectRows</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Selecting only rows.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::SelectColumns</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Selecting only columns.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="SelectionMode-enum">
<db:title>enum QAbstractItemView::SelectionMode</db:title>
<db:enumsynopsis>
<db:enumname>SelectionMode</db:enumname>
<db:enumitem>
<db:enumidentifier>NoSelection</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SingleSelection</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MultiSelection</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExtendedSelection</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ContiguousSelection</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum indicates how the view responds to user selections:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::SingleSelection</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>When the user selects an item, any already-selected item becomes unselected. It is possible for the user to deselect the selected item by pressing the Ctrl key when clicking the selected item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::ContiguousSelection</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::ExtendedSelection</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Ctrl key when clicking on an item, the clicked item gets toggled and all other items are left untouched. If the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item. Multiple items can be selected by dragging the mouse over them.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::MultiSelection</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>When the user selects an item in the usual way, the selection status of that item is toggled and the other items are left alone. Multiple items can be toggled by dragging the mouse over them.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::NoSelection</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Items cannot be selected.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The most commonly used modes are SingleSelection and ExtendedSelection.</db:para>
</db:section>
<db:section xml:id="State-enum">
<db:title>enum QAbstractItemView::State</db:title>
<db:enumsynopsis>
<db:enumname>State</db:enumname>
<db:enumitem>
<db:enumidentifier>NoState</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DraggingState</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DragSelectingState</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EditingState</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExpandingState</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CollapsingState</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnimatingState</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Describes the different states the view can be in. This is usually only interesting when reimplementing your own view.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::NoState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The is the default state.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::DraggingState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The user is dragging items.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::DragSelectingState</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The user is selecting items.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::EditingState</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The user is editing an item in a widget editor.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::ExpandingState</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The user is opening a branch of items.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::CollapsingState</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The user is closing a branch of items.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:emphasis>::AnimatingState</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The item view is performing an animation.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="alternatingRowColors-prop">
<db:title>alternatingRowColors : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>alternatingRowColors</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">alternatingRowColors</db:synopsisinfo>
<db:synopsisinfo role="setter">setAlternatingRowColors</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether to draw the background using alternating colors</db:para>
<db:para>If this property is <db:code>true</db:code>, the item background will be drawn using <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::Base</db:link> and <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::AlternateBase</db:link>; otherwise the background will be drawn using the <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::Base</db:link> color.</db:para>
<db:para>By default, this property is <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">alternatingRowColors</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAlternatingRowColors</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="autoScroll-prop">
<db:title>autoScroll : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>autoScroll</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hasAutoScroll</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoScroll</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether autoscrolling in drag move events is enabled</db:para>
<db:para>If this property is set to true (the default), the <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> automatically scrolls the contents of the view if the user drags within 16 pixels of the viewport edge. If the current item changes, then the view will scroll automatically to ensure that the current item is fully visible.</db:para>
<db:para>This property only works if the viewport accepts drops. Autoscroll is switched off by setting this property to false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasAutoScroll</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoScroll</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="autoScrollMargin-prop">
<db:title>autoScrollMargin : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>autoScrollMargin</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoScrollMargin</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoScrollMargin</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the size of the area when auto scrolling is triggered</db:para>
<db:para>This property controls the size of the area at the edge of the viewport that triggers autoscrolling. The default value is 16 pixels.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">autoScrollMargin</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoScrollMargin</db:emphasis>(<db:type>int</db:type> <db:emphasis>margin</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="defaultDropAction-prop">
<db:title>defaultDropAction : Qt::DropAction</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::DropAction</db:type>
<db:varname>defaultDropAction</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">defaultDropAction</db:synopsisinfo>
<db:synopsisinfo role="setter">setDefaultDropAction</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the drop action that will be used by default in QAbstractItemView::drag()</db:para>
<db:para>If the property is not set, the drop action is CopyAction when the supported actions support CopyAction.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#DropAction-enum">Qt::DropAction</db:link></db:type> <db:emphasis role="bold">defaultDropAction</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDefaultDropAction</db:emphasis>(<db:type><db:link xlink:href="qt.xml#DropAction-enum">Qt::DropAction</db:link></db:type> <db:emphasis>dropAction</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#showDropIndicator-prop">showDropIndicator</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#dragDropOverwriteMode-prop">dragDropOverwriteMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragDropMode-prop">
<db:title>dragDropMode : DragDropMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>DragDropMode</db:type>
<db:varname>dragDropMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">dragDropMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setDragDropMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the drag and drop event the view will act upon</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractitemview.xml#DragDropMode-enum">QAbstractItemView::DragDropMode</db:link></db:type> <db:emphasis role="bold">dragDropMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDragDropMode</db:emphasis>(<db:type><db:link xlink:href="qabstractitemview.xml#DragDropMode-enum">QAbstractItemView::DragDropMode</db:link></db:type> <db:emphasis>behavior</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#showDropIndicator-prop">showDropIndicator</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#dragDropOverwriteMode-prop">dragDropOverwriteMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragDropOverwriteMode-prop">
<db:title>dragDropOverwriteMode : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>dragDropOverwriteMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">dragDropOverwriteMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setDragDropOverwriteMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the view's drag and drop behavior</db:para>
<db:para>If its value is <db:code>true</db:code>, the selected data will overwrite the existing item data when dropped, while moving the data will clear the item. If its value is <db:code>false</db:code>, the selected data will be inserted as a new item when the data is dropped. When the data is moved, the item is removed as well.</db:para>
<db:para>The default value is <db:code>false</db:code>, as in the <db:link xlink:href="qlistview.xml">QListView</db:link> and <db:link xlink:href="qtreeview.xml">QTreeView</db:link> subclasses. In the <db:link xlink:href="qtableview.xml">QTableView</db:link> subclass, on the other hand, the property has been set to <db:code>true</db:code>.</db:para>
<db:para>Note: This is not intended to prevent overwriting of items. The model's implementation of flags() should do that by not returning <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemIsDropEnabled</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">dragDropOverwriteMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDragDropOverwriteMode</db:emphasis>(<db:type>bool</db:type> <db:emphasis>overwrite</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#dragDropMode-prop">dragDropMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragEnabled-prop">
<db:title>dragEnabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>dragEnabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">dragEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setDragEnabled</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the view supports dragging of its own items</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">dragEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDragEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#showDropIndicator-prop">showDropIndicator</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#DragDropMode-enum">DragDropMode</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#dragDropOverwriteMode-prop">dragDropOverwriteMode</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml#acceptDrops-prop">acceptDrops</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="editTriggers-prop">
<db:title>editTriggers : EditTriggers</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>EditTriggers</db:type>
<db:varname>editTriggers</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">editTriggers</db:synopsisinfo>
<db:synopsisinfo role="setter">setEditTriggers</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds which actions will initiate item editing</db:para>
<db:para>This property is a selection of flags defined by <db:link xlink:href="qabstractitemview.xml#EditTrigger-enum">EditTrigger</db:link>, combined using the OR operator. The view will only initiate the editing of an item if the action performed is set in this property.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractitemview.xml#EditTrigger-enum">QAbstractItemView::EditTriggers</db:link></db:type> <db:emphasis role="bold">editTriggers</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setEditTriggers</db:emphasis>(<db:type><db:link xlink:href="qabstractitemview.xml#EditTrigger-enum">QAbstractItemView::EditTriggers</db:link></db:type> <db:emphasis>triggers</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="horizontalScrollMode-prop">
<db:title>horizontalScrollMode : ScrollMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ScrollMode</db:type>
<db:varname>horizontalScrollMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">horizontalScrollMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setHorizontalScrollMode</db:synopsisinfo>
<db:synopsisinfo role="resetter">resetHorizontalScrollMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>how the view scrolls its contents in the horizontal direction</db:para>
<db:para>This property controls how the view scroll its contents horizontally. Scrolling can be done either per pixel or per item. Its default value comes from the style via the <db:link xlink:href="qstyle.xml#StyleHint-enum">QStyle::SH_ItemView_ScrollMode</db:link> style hint.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractitemview.xml#ScrollMode-enum">QAbstractItemView::ScrollMode</db:link></db:type> <db:emphasis role="bold">horizontalScrollMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHorizontalScrollMode</db:emphasis>(<db:type><db:link xlink:href="qabstractitemview.xml#ScrollMode-enum">QAbstractItemView::ScrollMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">resetHorizontalScrollMode</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="iconSize-prop">
<db:title>iconSize : QSize</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSize</db:type>
<db:varname>iconSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">iconSize</db:synopsisinfo>
<db:synopsisinfo role="setter">setIconSize</db:synopsisinfo>
<db:synopsisinfo role="notifier">iconSizeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the size of items' icons</db:para>
<db:para>Setting this property when the view is visible will cause the items to be laid out again.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">iconSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setIconSize</db:emphasis>(const <db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">iconSizeChanged</db:emphasis>(const <db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="selectionBehavior-prop">
<db:title>selectionBehavior : SelectionBehavior</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>SelectionBehavior</db:type>
<db:varname>selectionBehavior</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">selectionBehavior</db:synopsisinfo>
<db:synopsisinfo role="setter">setSelectionBehavior</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds which selection behavior the view uses</db:para>
<db:para>This property holds whether selections are done in terms of single items, rows or columns.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractitemview.xml#SelectionBehavior-enum">QAbstractItemView::SelectionBehavior</db:link></db:type> <db:emphasis role="bold">selectionBehavior</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSelectionBehavior</db:emphasis>(<db:type><db:link xlink:href="qabstractitemview.xml#SelectionBehavior-enum">QAbstractItemView::SelectionBehavior</db:link></db:type> <db:emphasis>behavior</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#SelectionMode-enum">SelectionMode</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#SelectionBehavior-enum">SelectionBehavior</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionMode-prop">
<db:title>selectionMode : SelectionMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>SelectionMode</db:type>
<db:varname>selectionMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">selectionMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setSelectionMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds which selection mode the view operates in</db:para>
<db:para>This property controls whether the user can select one or many items and, in many-item selections, whether the selection must be a continuous range of items.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractitemview.xml#SelectionMode-enum">QAbstractItemView::SelectionMode</db:link></db:type> <db:emphasis role="bold">selectionMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSelectionMode</db:emphasis>(<db:type><db:link xlink:href="qabstractitemview.xml#SelectionMode-enum">QAbstractItemView::SelectionMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#SelectionMode-enum">SelectionMode</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#SelectionBehavior-enum">SelectionBehavior</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showDropIndicator-prop">
<db:title>showDropIndicator : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>showDropIndicator</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">showDropIndicator</db:synopsisinfo>
<db:synopsisinfo role="setter">setDropIndicatorShown</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the drop indicator is shown when dragging items and dropping.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">showDropIndicator</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDropIndicatorShown</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#dragEnabled-prop">dragEnabled</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#DragDropMode-enum">DragDropMode</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#dragDropOverwriteMode-prop">dragDropOverwriteMode</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml#acceptDrops-prop">acceptDrops</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabKeyNavigation-prop">
<db:title>tabKeyNavigation : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>tabKeyNavigation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">tabKeyNavigation</db:synopsisinfo>
<db:synopsisinfo role="setter">setTabKeyNavigation</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether item navigation with tab and backtab is enabled.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">tabKeyNavigation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTabKeyNavigation</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="textElideMode-prop">
<db:title>textElideMode : Qt::TextElideMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::TextElideMode</db:type>
<db:varname>textElideMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">textElideMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setTextElideMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the position of the &quot;...&quot; in elided text.</db:para>
<db:para>The default value for all item views is <db:link xlink:href="qt.xml#TextElideMode-enum">Qt::ElideRight</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#TextElideMode-enum">Qt::TextElideMode</db:link></db:type> <db:emphasis role="bold">textElideMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextElideMode</db:emphasis>(<db:type><db:link xlink:href="qt.xml#TextElideMode-enum">Qt::TextElideMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="verticalScrollMode-prop">
<db:title>verticalScrollMode : ScrollMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ScrollMode</db:type>
<db:varname>verticalScrollMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">verticalScrollMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setVerticalScrollMode</db:synopsisinfo>
<db:synopsisinfo role="resetter">resetVerticalScrollMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>how the view scrolls its contents in the vertical direction</db:para>
<db:para>This property controls how the view scroll its contents vertically. Scrolling can be done either per pixel or per item. Its default value comes from the style via the <db:link xlink:href="qstyle.xml#StyleHint-enum">QStyle::SH_ItemView_ScrollMode</db:link> style hint.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractitemview.xml#ScrollMode-enum">QAbstractItemView::ScrollMode</db:link></db:type> <db:emphasis role="bold">verticalScrollMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVerticalScrollMode</db:emphasis>(<db:type><db:link xlink:href="qabstractitemview.xml#ScrollMode-enum">QAbstractItemView::ScrollMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">resetVerticalScrollMode</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractItemView">
<db:title>[explicit] QAbstractItemView::QAbstractItemView(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractItemView</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemView(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an abstract item view with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractItemView">
<db:title>[virtual] QAbstractItemView::~QAbstractItemView()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractItemView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractItemView()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the view.</db:para>
</db:section>
<db:section xml:id="activated">
<db:title>void QAbstractItemView::activated(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>activated</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void activated(const QModelIndex &amp;index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the item specified by <db:code role="parameter">index</db:code> is activated by the user. How to activate items depends on the platform; e.g., by single- or double-clicking the item, or by pressing the Return or Enter key when the item is current.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#clicked">clicked</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#doubleClicked">doubleClicked</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#entered">entered</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#pressed">pressed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearSelection">
<db:title>void QAbstractItemView::clearSelection()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearSelection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearSelection()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deselects all selected items. The current index will not be changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#setSelection">setSelection</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#selectAll">selectAll</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clicked">
<db:title>void QAbstractItemView::clicked(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clicked</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clicked(const QModelIndex &amp;index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a mouse button is left-clicked. The item the mouse was clicked on is specified by <db:code role="parameter">index</db:code>. The signal is only emitted when the index is valid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#activated">activated</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#doubleClicked">doubleClicked</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#entered">entered</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#pressed">pressed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closeEditor">
<db:title>[virtual protected] void QAbstractItemView::closeEditor(QWidget *<db:emphasis>editor</db:emphasis>, QAbstractItemDelegate::EndEditHint <db:emphasis>hint</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>closeEditor</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>editor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractItemDelegate::EndEditHint</db:type>
<db:parameter>hint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void closeEditor(QWidget *editor, QAbstractItemDelegate::EndEditHint hint)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes the given <db:code role="parameter">editor</db:code>, and releases it. The <db:code role="parameter">hint</db:code> is used to specify how the view should respond to the end of the editing operation. For example, the hint may indicate that the next item in the view should be opened for editing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#edit">edit</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#commitData">commitData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closePersistentEditor">
<db:title>void QAbstractItemView::closePersistentEditor(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>closePersistentEditor</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void closePersistentEditor(const QModelIndex &amp;index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes the persistent editor for the item at the given <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#openPersistentEditor">openPersistentEditor</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#isPersistentEditorOpen">isPersistentEditorOpen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="commitData">
<db:title>[virtual protected] void QAbstractItemView::commitData(QWidget *<db:emphasis>editor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>commitData</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>editor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void commitData(QWidget *editor)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Commit the data in the <db:code role="parameter">editor</db:code> to the model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#closeEditor">closeEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentChanged">
<db:title>[virtual protected] void QAbstractItemView::currentChanged(const QModelIndex &amp;<db:emphasis>current</db:emphasis>, const QModelIndex &amp;<db:emphasis>previous</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>currentChanged</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>current</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>previous</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentChanged(const QModelIndex &amp;current, const QModelIndex &amp;previous)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This slot is called when a new item becomes the current item. The previous current item is specified by the <db:code role="parameter">previous</db:code> index, and the new item by the <db:code role="parameter">current</db:code> index.</db:para>
<db:para>If you want to know about changes to items see the <db:link xlink:href="qabstractitemview.xml#dataChanged">dataChanged</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="currentIndex">
<db:title>QModelIndex QAbstractItemView::currentIndex() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>currentIndex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex currentIndex() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the model index of the current item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#setCurrentIndex">setCurrentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dataChanged">
<db:title>[virtual protected] void QAbstractItemView::dataChanged(const QModelIndex &amp;<db:emphasis>topLeft</db:emphasis>, const QModelIndex &amp;<db:emphasis>bottomRight</db:emphasis>, const QList&lt;int&gt; &amp;<db:emphasis>roles</db:emphasis> = QList&lt;int&gt;())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dataChanged</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>topLeft</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>bottomRight</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;int&gt; &amp;</db:type>
<db:parameter>roles</db:parameter>
<db:initializer>QList&lt;int&gt;()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dataChanged(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight, const QList&lt;int&gt; &amp;roles)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This slot is called when items with the given <db:code role="parameter">roles</db:code> are changed in the model. The changed items are those from <db:code role="parameter">topLeft</db:code> to <db:code role="parameter">bottomRight</db:code> inclusive. If just one item is changed <db:code role="parameter">topLeft</db:code> == <db:code role="parameter">bottomRight</db:code>.</db:para>
<db:para>The <db:code role="parameter">roles</db:code> which have been changed can either be an empty container (meaning everything has changed), or a non-empty container with the subset of roles which have changed.</db:para>
<db:note>
<db:para>: <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ToolTipRole</db:link> is not honored by dataChanged() in the views provided by Qt.</db:para>
</db:note>
</db:section>
<db:section xml:id="dirtyRegionOffset">
<db:title>[protected] QPoint QAbstractItemView::dirtyRegionOffset() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>dirtyRegionOffset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint dirtyRegionOffset() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the offset of the dirty regions in the view.</db:para>
<db:para>If you use <db:link xlink:href="qabstractitemview.xml#scrollDirtyRegion">scrollDirtyRegion</db:link>() and implement a <db:link xlink:href="qabstractscrollarea.xml#paintEvent">paintEvent</db:link>() in a subclass of <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link>, you should translate the area given by the paint event with the offset returned from this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#scrollDirtyRegion">scrollDirtyRegion</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#setDirtyRegion">setDirtyRegion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="doubleClicked">
<db:title>void QAbstractItemView::doubleClicked(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>doubleClicked</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void doubleClicked(const QModelIndex &amp;index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a mouse button is double-clicked. The item the mouse was double-clicked on is specified by <db:code role="parameter">index</db:code>. The signal is only emitted when the index is valid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#clicked">clicked</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#activated">activated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[override virtual protected] void QAbstractItemView::dragEnterEvent(QDragEnterEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragEnterEvent</db:methodname>
<db:methodparam>
<db:type>QDragEnterEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragEnterEvent(QDragEnterEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragEnterEvent" role="function">QAbstractScrollArea::dragEnterEvent(QDragEnterEvent *event)</db:link>.</db:para>
<db:para>This function is called with the given <db:code role="parameter">event</db:code> when a drag and drop operation enters the widget. If the drag is over a valid dropping place (e.g. over an item that accepts drops), the event is accepted; otherwise it is ignored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#dropEvent">dropEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#startDrag">startDrag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[override virtual protected] void QAbstractItemView::dragLeaveEvent(QDragLeaveEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragLeaveEvent</db:methodname>
<db:methodparam>
<db:type>QDragLeaveEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragLeaveEvent(QDragLeaveEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragLeaveEvent" role="function">QAbstractScrollArea::dragLeaveEvent(QDragLeaveEvent *event)</db:link>.</db:para>
<db:para>This function is called when the item being dragged leaves the view. The <db:code role="parameter">event</db:code> describes the state of the drag and drop operation.</db:para>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[override virtual protected] void QAbstractItemView::dragMoveEvent(QDragMoveEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragMoveEvent</db:methodname>
<db:methodparam>
<db:type>QDragMoveEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragMoveEvent(QDragMoveEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dragMoveEvent" role="function">QAbstractScrollArea::dragMoveEvent(QDragMoveEvent *event)</db:link>.</db:para>
<db:para>This function is called continuously with the given <db:code role="parameter">event</db:code> during a drag and drop operation over the widget. It can cause the view to scroll if, for example, the user drags a selection to view's right or bottom edge. In this case, the event will be accepted; otherwise it will be ignored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#dropEvent">dropEvent</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#startDrag">startDrag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QAbstractItemView::dropEvent(QDropEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dropEvent</db:methodname>
<db:methodparam>
<db:type>QDropEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dropEvent(QDropEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#dropEvent" role="function">QAbstractScrollArea::dropEvent(QDropEvent *event)</db:link>.</db:para>
<db:para>This function is called with the given <db:code role="parameter">event</db:code> when a drop event occurs over the widget. If the model accepts the even position the drop event is accepted; otherwise it is ignored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#startDrag">startDrag</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropIndicatorPosition">
<db:title>[protected] QAbstractItemView::DropIndicatorPosition QAbstractItemView::dropIndicatorPosition() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractItemView::DropIndicatorPosition</db:type>
<db:methodname>dropIndicatorPosition</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemView::DropIndicatorPosition dropIndicatorPosition() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the drop indicator in relation to the closest item.</db:para>
</db:section>
<db:section xml:id="edit">
<db:title>void QAbstractItemView::edit(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>edit</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void edit(const QModelIndex &amp;index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts editing the item corresponding to the given <db:code role="parameter">index</db:code> if it is editable.</db:para>
<db:para>Note that this function does not change the current index. Since the current index defines the next and previous items to edit, users may find that keyboard navigation does not work as expected. To provide consistent navigation behavior, call <db:link xlink:href="qabstractitemview.xml#setCurrentIndex">setCurrentIndex</db:link>() before this function with the same model index.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodelindex.xml#flags">QModelIndex::flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="edit-1">
<db:title>[virtual protected] bool QAbstractItemView::edit(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, QAbstractItemView::EditTrigger <db:emphasis>trigger</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>edit</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractItemView::EditTrigger</db:type>
<db:parameter>trigger</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool edit(const QModelIndex &amp;index, QAbstractItemView::EditTrigger trigger, QEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts editing the item at <db:code role="parameter">index</db:code>, creating an editor if necessary, and returns <db:code>true</db:code> if the view's <db:link xlink:href="qabstractitemview.xml#State-enum">State</db:link> is now <db:link xlink:href="qabstractitemview.xml#State-enum">EditingState</db:link>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>The action that caused the editing process is described by <db:code role="parameter">trigger</db:code>, and the associated event is specified by <db:code role="parameter">event</db:code>.</db:para>
<db:para>Editing can be forced by specifying the <db:code role="parameter">trigger</db:code> to be <db:link xlink:href="qabstractitemview.xml#EditTrigger-enum">QAbstractItemView::AllEditTriggers</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#closeEditor">closeEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="editorDestroyed">
<db:title>[virtual protected] void QAbstractItemView::editorDestroyed(QObject *<db:emphasis>editor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>editorDestroyed</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>editor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void editorDestroyed(QObject *editor)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called when the given <db:code role="parameter">editor</db:code> has been destroyed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#closeEditor">closeEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="entered">
<db:title>void QAbstractItemView::entered(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>entered</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void entered(const QModelIndex &amp;index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the mouse cursor enters the item specified by <db:code role="parameter">index</db:code>. Mouse tracking needs to be enabled for this feature to work.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#viewportEntered">viewportEntered</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#activated">activated</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#clicked">clicked</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#doubleClicked">doubleClicked</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#pressed">pressed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QAbstractItemView::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#event" role="function">QAbstractScrollArea::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[override virtual protected] bool QAbstractItemView::eventFilter(QObject *<db:emphasis>object</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>eventFilter</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool eventFilter(QObject *object, QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#eventFilter" role="function">QObject::eventFilter(QObject *watched, QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="executeDelayedItemsLayout">
<db:title>[protected] void QAbstractItemView::executeDelayedItemsLayout()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>executeDelayedItemsLayout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void executeDelayedItemsLayout()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Executes the scheduled layouts without waiting for the event processing to begin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#scheduleDelayedItemsLayout">scheduleDelayedItemsLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QAbstractItemView::focusInEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusInEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusInEvent(QFocusEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
<db:para>This function is called with the given <db:code role="parameter">event</db:code> when the widget obtains the focus. By default, the event is ignored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#setFocus-1">setFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#focusOutEvent">focusOutEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focusNextPrevChild">
<db:title>[override virtual protected] bool QAbstractItemView::focusNextPrevChild(bool <db:emphasis>next</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>focusNextPrevChild</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>next</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool focusNextPrevChild(bool next) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusNextPrevChild" role="function">QWidget::focusNextPrevChild(bool next)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QAbstractItemView::focusOutEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusOutEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusOutEvent(QFocusEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
<db:para>This function is called with the given <db:code role="parameter">event</db:code> when the widget loses the focus. By default, the event is ignored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#clearFocus">clearFocus</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#focusInEvent">focusInEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalOffset">
<db:title>[pure virtual protected] int QAbstractItemView::horizontalOffset() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>horizontalOffset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int horizontalOffset() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal offset of the view.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#verticalOffset">verticalOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexAt">
<db:title>[pure virtual] QModelIndex QAbstractItemView::indexAt(const QPoint &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>indexAt</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex indexAt(const QPoint &amp;point) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the model index of the item at the viewport coordinates <db:code role="parameter">point</db:code>.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#visualRect">visualRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexWidget">
<db:title>QWidget *QAbstractItemView::indexWidget(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>indexWidget</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * indexWidget(const QModelIndex &amp;index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the widget for the item at the given <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#setIndexWidget">setIndexWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initViewItemOption">
<db:title>[virtual protected, since 6.0] void QAbstractItemView::initViewItemOption(QStyleOptionViewItem *<db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>initViewItemOption</db:methodname>
<db:methodparam>
<db:type>QStyleOptionViewItem *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initViewItemOption(QStyleOptionViewItem *option) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initialize the <db:code role="parameter">option</db:code> structure with the view's palette, font, state, alignments etc.</db:para>
<db:note>
<db:para>Implementations of this methods should check the <db:link xlink:href="qstyleoption.xml#version-var">version</db:link> of the structure received, populate all members the implementation is familiar with, and set the version member to the one supported by the implementation before returning.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="inputMethodEvent">
<db:title>[override virtual protected] void QAbstractItemView::inputMethodEvent(QInputMethodEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>inputMethodEvent</db:methodname>
<db:methodparam>
<db:type>QInputMethodEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void inputMethodEvent(QInputMethodEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodEvent" role="function">QWidget::inputMethodEvent(QInputMethodEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="inputMethodQuery">
<db:title>[override virtual] QVariant QAbstractItemView::inputMethodQuery(Qt::InputMethodQuery <db:emphasis>query</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>inputMethodQuery</db:methodname>
<db:methodparam>
<db:type>Qt::InputMethodQuery</db:type>
<db:parameter>query</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant inputMethodQuery(Qt::InputMethodQuery query) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodQuery" role="function">QWidget::inputMethodQuery(Qt::InputMethodQuery query) const</db:link>.</db:para>
</db:section>
<db:section xml:id="isIndexHidden">
<db:title>[pure virtual protected] bool QAbstractItemView::isIndexHidden(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isIndexHidden</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isIndexHidden(const QModelIndex &amp;index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the item referred to by the given <db:code role="parameter">index</db:code> is hidden in the view, otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Hiding is a view specific feature. For example in <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> a column can be marked as hidden or a row in the <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link>.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
</db:section>
<db:section xml:id="isPersistentEditorOpen">
<db:title>bool QAbstractItemView::isPersistentEditorOpen(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isPersistentEditorOpen</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isPersistentEditorOpen(const QModelIndex &amp;index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether a persistent editor is open for the item at index <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#openPersistentEditor">openPersistentEditor</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#closePersistentEditor">closePersistentEditor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemDelegate">
<db:title>QAbstractItemDelegate *QAbstractItemView::itemDelegate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractItemDelegate *</db:type>
<db:methodname>itemDelegate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemDelegate * itemDelegate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item delegate used by this view and model. This is either one set with <db:link xlink:href="qabstractitemview.xml#setItemDelegate">setItemDelegate</db:link>(), or the default one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#setItemDelegate">setItemDelegate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemDelegateForColumn">
<db:title>QAbstractItemDelegate *QAbstractItemView::itemDelegateForColumn(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractItemDelegate *</db:type>
<db:methodname>itemDelegateForColumn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemDelegate * itemDelegateForColumn(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item delegate used by this view and model for the given <db:code role="parameter">column</db:code>. You can call <db:link xlink:href="qabstractitemview.xml#itemDelegate">itemDelegate</db:link>() to get a pointer to the current delegate for a given index.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#setItemDelegateForColumn">setItemDelegateForColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#itemDelegateForRow">itemDelegateForRow</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#itemDelegate">itemDelegate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemDelegateForIndex">
<db:title>[virtual, since 6.0] QAbstractItemDelegate *QAbstractItemView::itemDelegateForIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QAbstractItemDelegate *</db:type>
<db:methodname>itemDelegateForIndex</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemDelegate * itemDelegateForIndex(const QModelIndex &amp;index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item delegate used by this view and model for the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#setItemDelegate">setItemDelegate</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#setItemDelegateForRow">setItemDelegateForRow</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#setItemDelegateForColumn">setItemDelegateForColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemDelegateForRow">
<db:title>QAbstractItemDelegate *QAbstractItemView::itemDelegateForRow(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractItemDelegate *</db:type>
<db:methodname>itemDelegateForRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemDelegate * itemDelegateForRow(int row) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item delegate used by this view and model for the given <db:code role="parameter">row</db:code>, or <db:code>nullptr</db:code> if no delegate has been assigned. You can call <db:link xlink:href="qabstractitemview.xml#itemDelegate">itemDelegate</db:link>() to get a pointer to the current delegate for a given index.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#setItemDelegateForRow">setItemDelegateForRow</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#itemDelegateForColumn">itemDelegateForColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#setItemDelegate">setItemDelegate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QAbstractItemView::keyPressEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyPressEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyPressEvent(QKeyEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#keyPressEvent" role="function">QAbstractScrollArea::keyPressEvent(QKeyEvent *e)</db:link>.</db:para>
<db:para>This function is called with the given <db:code role="parameter">event</db:code> when a key event is sent to the widget. The default implementation handles basic cursor movement, e.g. Up, Down, Left, Right, Home, PageUp, and PageDown; the <db:link xlink:href="qabstractitemview.xml#activated">activated</db:link>() signal is emitted if the current index is valid and the activation key is pressed (e.g. Enter or Return, depending on the platform). This function is where editing is initiated by key press, e.g. if F2 is pressed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#edit">edit</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#moveCursor">moveCursor</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#keyboardSearch">keyboardSearch</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#tabKeyNavigation-prop">tabKeyNavigation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyboardSearch">
<db:title>[virtual] void QAbstractItemView::keyboardSearch(const QString &amp;<db:emphasis>search</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyboardSearch</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>search</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyboardSearch(const QString &amp;search)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves to and selects the item best matching the string <db:code role="parameter">search</db:code>. If no item is found nothing happens.</db:para>
<db:para>In the default implementation, the search is reset if <db:code role="parameter">search</db:code> is empty, or the time interval since the last search has exceeded <db:link xlink:href="qapplication.xml#keyboardInputInterval-prop">QApplication::keyboardInputInterval</db:link>().</db:para>
</db:section>
<db:section xml:id="model">
<db:title>QAbstractItemModel *QAbstractItemView::model() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractItemModel *</db:type>
<db:methodname>model</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemModel * model() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the model that this view is presenting.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#setModel">setModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[override virtual protected] void QAbstractItemView::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseDoubleClickEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseDoubleClickEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseDoubleClickEvent" role="function">QAbstractScrollArea::mouseDoubleClickEvent(QMouseEvent *e)</db:link>.</db:para>
<db:para>This function is called with the given <db:code role="parameter">event</db:code> when a mouse button is double clicked inside the widget. If the double-click is on a valid item it emits the <db:link xlink:href="qabstractitemview.xml#doubleClicked">doubleClicked</db:link>() signal and calls <db:link xlink:href="qabstractitemview.xml#edit">edit</db:link>() on the item.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QAbstractItemView::mouseMoveEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseMoveEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseMoveEvent" role="function">QAbstractScrollArea::mouseMoveEvent(QMouseEvent *e)</db:link>.</db:para>
<db:para>This function is called with the given <db:code role="parameter">event</db:code> when a mouse move event is sent to the widget. If a selection is in progress and new items are moved over the selection is extended; if a drag is in progress it is continued.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QAbstractItemView::mousePressEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mousePressEvent" role="function">QAbstractScrollArea::mousePressEvent(QMouseEvent *e)</db:link>.</db:para>
<db:para>This function is called with the given <db:code role="parameter">event</db:code> when a mouse button is pressed while the cursor is inside the widget. If a valid item is pressed on it is made into the current item. This function emits the <db:link xlink:href="qabstractitemview.xml#pressed">pressed</db:link>() signal.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QAbstractItemView::mouseReleaseEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseReleaseEvent(QMouseEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#mouseReleaseEvent" role="function">QAbstractScrollArea::mouseReleaseEvent(QMouseEvent *e)</db:link>.</db:para>
<db:para>This function is called with the given <db:code role="parameter">event</db:code> when a mouse button is released, after a mouse press event on the widget. If a user presses the mouse inside your widget and then drags the mouse to another location before releasing the mouse button, your widget receives the release event. The function will emit the <db:link xlink:href="qabstractitemview.xml#clicked">clicked</db:link>() signal if an item was being pressed.</db:para>
</db:section>
<db:section xml:id="moveCursor">
<db:title>[pure virtual protected] QModelIndex QAbstractItemView::moveCursor(QAbstractItemView::CursorAction <db:emphasis>cursorAction</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>moveCursor</db:methodname>
<db:methodparam>
<db:type>QAbstractItemView::CursorAction</db:type>
<db:parameter>cursorAction</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::KeyboardModifiers</db:type>
<db:parameter>modifiers</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex moveCursor(QAbstractItemView::CursorAction cursorAction, Qt::KeyboardModifiers modifiers) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> object pointing to the next object in the view, based on the given <db:code role="parameter">cursorAction</db:code> and keyboard modifiers specified by <db:code role="parameter">modifiers</db:code>.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
</db:section>
<db:section xml:id="openPersistentEditor">
<db:title>void QAbstractItemView::openPersistentEditor(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>openPersistentEditor</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void openPersistentEditor(const QModelIndex &amp;index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens a persistent editor on the item at the given <db:code role="parameter">index</db:code>. If no editor exists, the delegate will create a new editor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#closePersistentEditor">closePersistentEditor</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#isPersistentEditorOpen">isPersistentEditorOpen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pressed">
<db:title>void QAbstractItemView::pressed(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pressed</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pressed(const QModelIndex &amp;index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a mouse button is pressed. The item the mouse was pressed on is specified by <db:code role="parameter">index</db:code>. The signal is only emitted when the index is valid.</db:para>
<db:para>Use the <db:link xlink:href="qguiapplication.xml#mouseButtons">QGuiApplication::mouseButtons</db:link>() function to get the state of the mouse buttons.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#activated">activated</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#clicked">clicked</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#doubleClicked">doubleClicked</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#entered">entered</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reset">
<db:title>[virtual] void QAbstractItemView::reset()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>reset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reset the internal state of the view.</db:para>
<db:warning>
<db:para>This function will reset open editors, scroll bar positions, selections, etc. Existing changes will not be committed. If you would like to save your changes when resetting the view, you can reimplement this function, commit your changes, and then call the superclass' implementation.</db:para>
</db:warning>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QAbstractItemView::resizeEvent(QResizeEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeEvent</db:methodname>
<db:methodparam>
<db:type>QResizeEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeEvent(QResizeEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#resizeEvent" role="function">QAbstractScrollArea::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
<db:para>This function is called with the given <db:code role="parameter">event</db:code> when a resize event is sent to the widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#resizeEvent">QWidget::resizeEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rootIndex">
<db:title>QModelIndex QAbstractItemView::rootIndex() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>rootIndex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex rootIndex() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the model index of the model's root item. The root item is the parent item to the view's toplevel items. The root can be invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#setRootIndex">setRootIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowsAboutToBeRemoved">
<db:title>[virtual protected] void QAbstractItemView::rowsAboutToBeRemoved(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>rowsAboutToBeRemoved</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rowsAboutToBeRemoved(const QModelIndex &amp;parent, int start, int end)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This slot is called when rows are about to be removed. The deleted rows are those under the given <db:code role="parameter">parent</db:code> from <db:code role="parameter">start</db:code> to <db:code role="parameter">end</db:code> inclusive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#rowsInserted">rowsInserted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowsInserted">
<db:title>[virtual protected] void QAbstractItemView::rowsInserted(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>rowsInserted</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rowsInserted(const QModelIndex &amp;parent, int start, int end)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This slot is called when rows are inserted. The new rows are those under the given <db:code role="parameter">parent</db:code> from <db:code role="parameter">start</db:code> to <db:code role="parameter">end</db:code> inclusive. The base class implementation calls fetchMore() on the model to check for more data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#rowsAboutToBeRemoved">rowsAboutToBeRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scheduleDelayedItemsLayout">
<db:title>[protected] void QAbstractItemView::scheduleDelayedItemsLayout()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scheduleDelayedItemsLayout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scheduleDelayedItemsLayout()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Schedules a layout of the items in the view to be executed when the event processing starts.</db:para>
<db:para>Even if scheduleDelayedItemsLayout() is called multiple times before events are processed, the view will only do the layout once.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#executeDelayedItemsLayout">executeDelayedItemsLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scrollDirtyRegion">
<db:title>[protected] void QAbstractItemView::scrollDirtyRegion(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scrollDirtyRegion</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scrollDirtyRegion(int dx, int dy)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Prepares the view for scrolling by (<db:code role="parameter">dx</db:code>,<db:code role="parameter">dy</db:code>) pixels by moving the dirty regions in the opposite direction. You only need to call this function if you are implementing a scrolling viewport in your view subclass.</db:para>
<db:para>If you implement <db:link xlink:href="qabstractscrollarea.xml#scrollContentsBy">scrollContentsBy</db:link>() in a subclass of <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link>, call this function before you call <db:link xlink:href="qwidget.xml#scroll">QWidget::scroll</db:link>() on the viewport. Alternatively, just call <db:link xlink:href="qabstractitemview.xml#update">update</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml#scrollContentsBy">scrollContentsBy</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#dirtyRegionOffset">dirtyRegionOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#setDirtyRegion">setDirtyRegion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scrollTo">
<db:title>[pure virtual] void QAbstractItemView::scrollTo(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, QAbstractItemView::ScrollHint <db:emphasis>hint</db:emphasis> = EnsureVisible)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>scrollTo</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractItemView::ScrollHint</db:type>
<db:parameter>hint</db:parameter>
<db:initializer>EnsureVisible</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scrollTo(const QModelIndex &amp;index, QAbstractItemView::ScrollHint hint) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scrolls the view if necessary to ensure that the item at <db:code role="parameter">index</db:code> is visible. The view will try to position the item according to the given <db:code role="parameter">hint</db:code>.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
</db:section>
<db:section xml:id="scrollToBottom">
<db:title>void QAbstractItemView::scrollToBottom()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scrollToBottom</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scrollToBottom()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scrolls the view to the bottom.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#scrollTo">scrollTo</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#scrollToTop">scrollToTop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scrollToTop">
<db:title>void QAbstractItemView::scrollToTop()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>scrollToTop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scrollToTop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scrolls the view to the top.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#scrollTo">scrollTo</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#scrollToBottom">scrollToBottom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectAll">
<db:title>[virtual] void QAbstractItemView::selectAll()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>selectAll</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectAll()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Selects all items in the view. This function will use the selection behavior set on the view when selecting.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#setSelection">setSelection</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#selectedIndexes">selectedIndexes</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#clearSelection">clearSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedIndexes">
<db:title>[virtual protected] QModelIndexList QAbstractItemView::selectedIndexes() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndexList</db:type>
<db:methodname>selectedIndexes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndexList selectedIndexes() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This convenience function returns a list of all selected and non-hidden item indexes in the view. The list contains no duplicates, and is not sorted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselectionmodel.xml#selectedIndexes">QItemSelectionModel::selectedIndexes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionChanged">
<db:title>[virtual protected] void QAbstractItemView::selectionChanged(const QItemSelection &amp;<db:emphasis>selected</db:emphasis>, const QItemSelection &amp;<db:emphasis>deselected</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>selectionChanged</db:methodname>
<db:methodparam>
<db:type>const QItemSelection &amp;</db:type>
<db:parameter>selected</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QItemSelection &amp;</db:type>
<db:parameter>deselected</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectionChanged(const QItemSelection &amp;selected, const QItemSelection &amp;deselected)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This slot is called when the selection is changed. The previous selection (which may be empty), is specified by <db:code role="parameter">deselected</db:code>, and the new selection by <db:code role="parameter">selected</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#setSelection">setSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionCommand">
<db:title>[virtual protected] QItemSelectionModel::SelectionFlags QAbstractItemView::selectionCommand(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, const QEvent *<db:emphasis>event</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QItemSelectionModel::SelectionFlags</db:type>
<db:methodname>selectionCommand</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QEvent *</db:type>
<db:parameter>event</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex &amp;index, const QEvent *event) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the SelectionFlags to be used when updating a selection model for the specified <db:code role="parameter">index</db:code>. The result depends on the current <db:link xlink:href="qabstractitemview.xml#selectionMode-prop">selectionMode</db:link>(), and on the user input event <db:code role="parameter">event</db:code>, which can be <db:code>nullptr</db:code>.</db:para>
<db:para>Reimplement this function to define your own selection behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#setSelection">setSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionModel">
<db:title>QItemSelectionModel *QAbstractItemView::selectionModel() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QItemSelectionModel *</db:type>
<db:methodname>selectionModel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QItemSelectionModel * selectionModel() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current selection model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#setSelectionModel">setSelectionModel</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#selectedIndexes">selectedIndexes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentIndex">
<db:title>void QAbstractItemView::setCurrentIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCurrentIndex</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCurrentIndex(const QModelIndex &amp;index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current item to be the item at <db:code role="parameter">index</db:code>.</db:para>
<db:para>Unless the current selection mode is <db:link xlink:href="qabstractitemview.xml#SelectionMode-enum">NoSelection</db:link>, the item is also selected. Note that this function also updates the starting position for any new selections the user performs.</db:para>
<db:para>To set an item as the current item without selecting it, call</db:para>
<db:para><db:code>selectionModel()-&gt;setCurrentIndex(index, QItemSelectionModel::NoUpdate);</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#currentIndex">currentIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#currentChanged">currentChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#selectionMode-prop">selectionMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDirtyRegion">
<db:title>[protected] void QAbstractItemView::setDirtyRegion(const QRegion &amp;<db:emphasis>region</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDirtyRegion</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>region</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDirtyRegion(const QRegion &amp;region)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Marks the given <db:code role="parameter">region</db:code> as dirty and schedules it to be updated. You only need to call this function if you are implementing your own view subclass.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#scrollDirtyRegion">scrollDirtyRegion</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#dirtyRegionOffset">dirtyRegionOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIndexWidget">
<db:title>void QAbstractItemView::setIndexWidget(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setIndexWidget</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setIndexWidget(const QModelIndex &amp;index, QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the given <db:code role="parameter">widget</db:code> on the item at the given <db:code role="parameter">index</db:code>, passing the ownership of the widget to the viewport.</db:para>
<db:para>If <db:code role="parameter">index</db:code> is invalid (e.g., if you pass the root index), this function will do nothing.</db:para>
<db:para>The given <db:code role="parameter">widget</db:code>'s <db:link xlink:href="qwidget.xml">autoFillBackground</db:link> property must be set to true, otherwise the widget's background will be transparent, showing both the model data and the item at the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>If index widget A is replaced with index widget B, index widget A will be deleted. For example, in the code snippet below, the <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> object will be deleted.</db:para>
<db:programlisting language="cpp">setIndexWidget(index, new QLineEdit);
...
setIndexWidget(index, new QTextEdit);
</db:programlisting>
<db:para>This function should only be used to display static content within the visible area corresponding to an item of data. If you want to display custom dynamic content or implement a custom editor widget, subclass <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link> instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#indexWidget">indexWidget</db:link>()</db:member>
<db:member><db:link xlink:href="model-view-programming.xml#delegate-classes">Delegate Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemDelegate">
<db:title>void QAbstractItemView::setItemDelegate(QAbstractItemDelegate *<db:emphasis>delegate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setItemDelegate</db:methodname>
<db:methodparam>
<db:type>QAbstractItemDelegate *</db:type>
<db:parameter>delegate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setItemDelegate(QAbstractItemDelegate *delegate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item delegate for this view and its model to <db:code role="parameter">delegate</db:code>. This is useful if you want complete control over the editing and display of items.</db:para>
<db:para>Any existing delegate will be removed, but not deleted. <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> does not take ownership of <db:code role="parameter">delegate</db:code>.</db:para>
<db:warning>
<db:para>You should not share the same instance of a delegate between views. Doing so can cause incorrect or unintuitive editing behavior since each view connected to a given delegate may receive the <db:link xlink:href="qabstractitemdelegate.xml#closeEditor">closeEditor</db:link>() signal, and attempt to access, modify or close an editor that has already been closed.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#itemDelegate">itemDelegate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemDelegateForColumn">
<db:title>void QAbstractItemView::setItemDelegateForColumn(int <db:emphasis>column</db:emphasis>, QAbstractItemDelegate *<db:emphasis>delegate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setItemDelegateForColumn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractItemDelegate *</db:type>
<db:parameter>delegate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setItemDelegateForColumn(int column, QAbstractItemDelegate *delegate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the given item <db:code role="parameter">delegate</db:code> used by this view and model for the given <db:code role="parameter">column</db:code>. All items on <db:code role="parameter">column</db:code> will be drawn and managed by <db:code role="parameter">delegate</db:code> instead of using the default delegate (i.e., <db:link xlink:href="qabstractitemview.xml#itemDelegate">itemDelegate</db:link>()).</db:para>
<db:para>Any existing column delegate for <db:code role="parameter">column</db:code> will be removed, but not deleted. <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> does not take ownership of <db:code role="parameter">delegate</db:code>.</db:para>
<db:note>
<db:para>If a delegate has been assigned to both a row and a column, the row delegate will take precedence and manage the intersecting cell index.</db:para>
</db:note>
<db:warning>
<db:para>You should not share the same instance of a delegate between views. Doing so can cause incorrect or unintuitive editing behavior since each view connected to a given delegate may receive the <db:link xlink:href="qabstractitemdelegate.xml#closeEditor">closeEditor</db:link>() signal, and attempt to access, modify or close an editor that has already been closed.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#itemDelegateForColumn">itemDelegateForColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#setItemDelegateForRow">setItemDelegateForRow</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#itemDelegate">itemDelegate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemDelegateForRow">
<db:title>void QAbstractItemView::setItemDelegateForRow(int <db:emphasis>row</db:emphasis>, QAbstractItemDelegate *<db:emphasis>delegate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setItemDelegateForRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractItemDelegate *</db:type>
<db:parameter>delegate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setItemDelegateForRow(int row, QAbstractItemDelegate *delegate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the given item <db:code role="parameter">delegate</db:code> used by this view and model for the given <db:code role="parameter">row</db:code>. All items on <db:code role="parameter">row</db:code> will be drawn and managed by <db:code role="parameter">delegate</db:code> instead of using the default delegate (i.e., <db:link xlink:href="qabstractitemview.xml#itemDelegate">itemDelegate</db:link>()).</db:para>
<db:para>Any existing row delegate for <db:code role="parameter">row</db:code> will be removed, but not deleted. <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> does not take ownership of <db:code role="parameter">delegate</db:code>.</db:para>
<db:note>
<db:para>If a delegate has been assigned to both a row and a column, the row delegate (i.e., this delegate) will take precedence and manage the intersecting cell index.</db:para>
</db:note>
<db:warning>
<db:para>You should not share the same instance of a delegate between views. Doing so can cause incorrect or unintuitive editing behavior since each view connected to a given delegate may receive the <db:link xlink:href="qabstractitemdelegate.xml#closeEditor">closeEditor</db:link>() signal, and attempt to access, modify or close an editor that has already been closed.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#itemDelegateForRow">itemDelegateForRow</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#setItemDelegateForColumn">setItemDelegateForColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#itemDelegate">itemDelegate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setModel">
<db:title>[virtual] void QAbstractItemView::setModel(QAbstractItemModel *<db:emphasis>model</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setModel</db:methodname>
<db:methodparam>
<db:type>QAbstractItemModel *</db:type>
<db:parameter>model</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setModel(QAbstractItemModel *model)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">model</db:code> for the view to present.</db:para>
<db:para>This function will create and set a new selection model, replacing any model that was previously set with <db:link xlink:href="qabstractitemview.xml#setSelectionModel">setSelectionModel</db:link>(). However, the old selection model will not be deleted as it may be shared between several views. We recommend that you delete the old selection model if it is no longer required. This is done with the following code:</db:para>
<db:programlisting language="cpp">QItemSelectionModel *m = view-&amp;gt;selectionModel();
view-&amp;gt;setModel(new model);
delete m;
</db:programlisting>
<db:para>If both the old model and the old selection model do not have parents, or if their parents are long-lived objects, it may be preferable to call their <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() functions to explicitly delete them.</db:para>
<db:para>The view <db:emphasis>does not</db:emphasis> take ownership of the model unless it is the model's parent object because the model may be shared between many different views.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#model">model</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#selectionModel">selectionModel</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#setSelectionModel">setSelectionModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRootIndex">
<db:title>[virtual] void QAbstractItemView::setRootIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setRootIndex</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRootIndex(const QModelIndex &amp;index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the root item to the item at the given <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#rootIndex">rootIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelection">
<db:title>[pure virtual protected] void QAbstractItemView::setSelection(const QRect &amp;<db:emphasis>rect</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setSelection</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QItemSelectionModel::SelectionFlags</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSelection(const QRect &amp;rect, QItemSelectionModel::SelectionFlags flags) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Applies the selection <db:code role="parameter">flags</db:code> to the items in or touched by the rectangle, <db:code role="parameter">rect</db:code>.</db:para>
<db:para>When implementing your own itemview setSelection should call <db:link xlink:href="qabstractitemview.xml#selectionModel">selectionModel</db:link>()-&gt;select(selection, flags) where selection is either an empty <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> or a <db:link xlink:href="qitemselection.xml">QItemSelection</db:link> that contains all items that are contained in <db:code role="parameter">rect</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#selectionCommand">selectionCommand</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#selectedIndexes">selectedIndexes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelectionModel">
<db:title>[virtual] void QAbstractItemView::setSelectionModel(QItemSelectionModel *<db:emphasis>selectionModel</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setSelectionModel</db:methodname>
<db:methodparam>
<db:type>QItemSelectionModel *</db:type>
<db:parameter>selectionModel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSelectionModel(QItemSelectionModel *selectionModel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current selection model to the given <db:code role="parameter">selectionModel</db:code>.</db:para>
<db:para>Note that, if you call <db:link xlink:href="qabstractitemview.xml#setModel">setModel</db:link>() after this function, the given <db:code role="parameter">selectionModel</db:code> will be replaced by one created by the view.</db:para>
<db:note>
<db:para>It is up to the application to delete the old selection model if it is no longer needed; i.e., if it is not being used by other views. This will happen automatically when its parent object is deleted. However, if it does not have a parent, or if the parent is a long-lived object, it may be preferable to call its <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() function to explicitly delete it.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#selectionModel">selectionModel</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#setModel">setModel</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#clearSelection">clearSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setState">
<db:title>[protected] void QAbstractItemView::setState(QAbstractItemView::State <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setState</db:methodname>
<db:methodparam>
<db:type>QAbstractItemView::State</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setState(QAbstractItemView::State state)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item view's state to the given <db:code role="parameter">state</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHintForColumn">
<db:title>[virtual] int QAbstractItemView::sizeHintForColumn(int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>sizeHintForColumn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int sizeHintForColumn(int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width size hint for the specified <db:code role="parameter">column</db:code> or -1 if there is no model.</db:para>
<db:para>This function is used in views with a horizontal header to find the size hint for a header section based on the contents of the given <db:code role="parameter">column</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#sizeHintForRow">sizeHintForRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHintForIndex">
<db:title>QSize QAbstractItemView::sizeHintForIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHintForIndex</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHintForIndex(const QModelIndex &amp;index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size hint for the item with the specified <db:code role="parameter">index</db:code> or an invalid size for invalid indexes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#sizeHintForRow">sizeHintForRow</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#sizeHintForColumn">sizeHintForColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHintForRow">
<db:title>[virtual] int QAbstractItemView::sizeHintForRow(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>sizeHintForRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int sizeHintForRow(int row) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the height size hint for the specified <db:code role="parameter">row</db:code> or -1 if there is no model.</db:para>
<db:para>The returned height is calculated using the size hints of the given <db:code role="parameter">row</db:code>'s items, i.e. the returned value is the maximum height among the items. Note that to control the height of a row, you must reimplement the <db:link xlink:href="qabstractitemdelegate.xml#sizeHint">QAbstractItemDelegate::sizeHint</db:link>() function.</db:para>
<db:para>This function is used in views with a vertical header to find the size hint for a header section based on the contents of the given <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#sizeHintForColumn">sizeHintForColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startDrag">
<db:title>[virtual protected] void QAbstractItemView::startDrag(Qt::DropActions <db:emphasis>supportedActions</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>startDrag</db:methodname>
<db:methodparam>
<db:type>Qt::DropActions</db:type>
<db:parameter>supportedActions</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void startDrag(Qt::DropActions supportedActions)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts a drag by calling drag-&gt;exec() using the given <db:code role="parameter">supportedActions</db:code>.</db:para>
</db:section>
<db:section xml:id="state">
<db:title>[protected] QAbstractItemView::State QAbstractItemView::state() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractItemView::State</db:type>
<db:methodname>state</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemView::State state() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item view's state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#setState">setState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QAbstractItemView::timerEvent(QTimerEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>timerEvent</db:methodname>
<db:methodparam>
<db:type>QTimerEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void timerEvent(QTimerEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
<db:para>This function is called with the given <db:code role="parameter">event</db:code> when a timer event is sent to the widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#timerEvent">QObject::timerEvent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="update">
<db:title>void QAbstractItemView::update(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>update</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void update(const QModelIndex &amp;index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Updates the area occupied by the given <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="updateGeometries">
<db:title>[virtual protected] void QAbstractItemView::updateGeometries()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>updateGeometries</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateGeometries()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Updates the geometry of the child widgets of the view.</db:para>
</db:section>
<db:section xml:id="verticalOffset">
<db:title>[pure virtual protected] int QAbstractItemView::verticalOffset() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>verticalOffset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int verticalOffset() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the vertical offset of the view.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#horizontalOffset">horizontalOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewportEntered">
<db:title>void QAbstractItemView::viewportEntered()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>viewportEntered</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void viewportEntered()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the mouse cursor enters the viewport. Mouse tracking needs to be enabled for this feature to work.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#entered">entered</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewportEvent">
<db:title>[override virtual protected] bool QAbstractItemView::viewportEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>viewportEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool viewportEvent(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#viewportEvent" role="function">QAbstractScrollArea::viewportEvent(QEvent *event)</db:link>.</db:para>
<db:para>This function is used to handle tool tips, and What's This? mode, if the given <db:code role="parameter">event</db:code> is a <db:link xlink:href="qevent.xml#Type-enum">QEvent::ToolTip</db:link>,or a <db:link xlink:href="qevent.xml#Type-enum">QEvent::WhatsThis</db:link>. It passes all other events on to its base class viewportEvent() handler.</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">event</db:code> has been recognized and processed; otherwise, returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="viewportSizeHint">
<db:title>[override virtual protected] QSize QAbstractItemView::viewportSizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>viewportSizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize viewportSizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#viewportSizeHint" role="function">QAbstractScrollArea::viewportSizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="visualRect">
<db:title>[pure virtual] QRect QAbstractItemView::visualRect(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>visualRect</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect visualRect(const QModelIndex &amp;index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the rectangle on the viewport occupied by the item at <db:code role="parameter">index</db:code>.</db:para>
<db:para>If your item is displayed in several areas then visualRect should return the primary area that contains index and not the complete area that index might encompasses, touch or cause drawing.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#indexAt">indexAt</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#visualRegionForSelection">visualRegionForSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visualRegionForSelection">
<db:title>[pure virtual protected] QRegion QAbstractItemView::visualRegionForSelection(const QItemSelection &amp;<db:emphasis>selection</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRegion</db:type>
<db:methodname>visualRegionForSelection</db:methodname>
<db:methodparam>
<db:type>const QItemSelection &amp;</db:type>
<db:parameter>selection</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion visualRegionForSelection(const QItemSelection &amp;selection) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the region from the viewport of the items in the given <db:code role="parameter">selection</db:code>.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemview.xml#visualRect">visualRect</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemview.xml#selectedIndexes">selectedIndexes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QAbstractItemView</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="itemDelegate-1">
<db:title>QAbstractItemDelegate *QAbstractItemView::itemDelegate(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAbstractItemDelegate *</db:type>
<db:methodname>itemDelegate</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemDelegate * itemDelegate(const QModelIndex &amp;index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qabstractitemview.xml#itemDelegateForIndex">itemDelegateForIndex</db:link>() instead. Returns the item delegate used by this view and model for the given <db:code role="parameter">index</db:code>.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
